!function i(u,s,a){function c(t,e){if(!s[t]){if(!u[t]){var n="function"==typeof require&&require;if(!e&&n)return n(t,!0);if(l)return l(t,!0);var r=new Error("Cannot find module '"+t+"'");throw r.code="MODULE_NOT_FOUND",r}var o=s[t]={exports:{}};u[t][0].call(o.exports,function(e){return c(u[t][1][e]||e)},o,o.exports,i,u,s,a)}return s[t].exports}for(var l="function"==typeof require&&require,e=0;e<a.length;e++)c(a[e]);return c}({1:[function(t,n,r){"use strict";function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var o,s=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==u(e)&&"function"!=typeof e)return{default:e};var t=a();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e){var i;Object.prototype.hasOwnProperty.call(e,o)&&((i=r?Object.getOwnPropertyDescriptor(e,o):null)&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o])}n.default=e,t&&t.set(e,n);return n}(t("@microsoft/signalr")),l=(o=t("tippy.js"))&&o.__esModule?o:{default:o};function a(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return a=function(){return e},e}var c=document.getElementById("wiki-talk-send");c&&(c.completelyDisabled=!0,c.disabled=!0);var D=document.getElementById("wiki-talk-newmessage-input");window.wikimvcchat={connection:null,messageListUl:null,userNamespace:"Users",init:function(e,t,n,r){if(window.wikimvcchat.userNamespace=t,window.wikimvcchat.messageListUl=document.getElementById("wiki-talk-message-list"),null!=window.wikimvcchat.messageListUl){r=JSON.parse(r)||[];for(var o,i=0;i<r.length;i++)window.wikimvcchat.addMessage(r[i]);0<r.length&&(null!=(o=document.getElementById("wiki-message-div-".concat(r[r.length-1].id)))&&o.classList.contains("wiki-message-thread")&&o.classList.add("expanded")),e&&e.length&&n&&n.length&&(window.wikimvcchat.connection=(new s.HubConnectionBuilder).withUrl(e).withAutomaticReconnect().build(),window.wikimvcchat.connection.on("Receive",window.wikimvcchat.addMessage),window.wikimvcchat.connection.start().then(function(){c.completelyDisabled=!1}).catch(function(e){return console.error("An error occurred while connecting to chat")}),D.addEventListener("input",function(){c.completelyDisabled||(c.disabled=!(D.value&&0<D.value.length))}),D.addEventListener("keypress",function(e){13!==e.keyCode||e.shiftKey||(window.wikimvcchat.sendMessage(n,D.value),e.preventDefault(),e.stopPropagation())}),c.addEventListener("click",function(e){window.wikimvcchat.sendMessage(n,D.value),e.preventDefault(),e.stopPropagation()}))}},addMessage:function(t){var n,r,o,i,u,s,a,c,l,D,p,f,h,d,g,v,m,y,F,E,b,C,w,B;null!=t&&null!=t.content&&null!=t.content.length&&0<t.content.length&&((n=null!=t.replyMessageId&&null!=t.replyMessageId.length&&0<t.replyMessageId.length)&&/(?:\uD83D(?:\uDD73\uFE0F?|\uDC41(?:(?:\uFE0F(?:\u200D\uD83D\uDDE8\uFE0F?)?|\u200D\uD83D\uDDE8\uFE0F?))?|[\uDDE8\uDDEF]\uFE0F?|\uDC4B(?:\uD83C[\uDFFB-\uDFFF])?|\uDD90(?:(?:\uD83C[\uDFFB-\uDFFF]|\uFE0F))?|[\uDD96\uDC4C\uDC48\uDC49\uDC46\uDD95\uDC47\uDC4D\uDC4E\uDC4A\uDC4F\uDE4C\uDC50\uDE4F\uDC85\uDCAA\uDC42\uDC43\uDC76\uDC66\uDC67](?:\uD83C[\uDFFB-\uDFFF])?|\uDC71(?:(?:\uD83C(?:[\uDFFB-\uDFFF](?:\u200D(?:[\u2640\u2642]\uFE0F?))?)|\u200D(?:[\u2640\u2642]\uFE0F?)))?|\uDC68(?:(?:\uD83C(?:\uDFFB(?:\u200D(?:\uD83E(?:\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFC-\uDFFF]|[\uDDB0\uDDB1\uDDB3\uDDB2\uDDAF\uDDBC\uDDBD])|\u2695\uFE0F?|\uD83C[\uDF93\uDFEB\uDF3E\uDF73\uDFED\uDFA4\uDFA8]|\u2696\uFE0F?|\uD83D[\uDD27\uDCBC\uDD2C\uDCBB\uDE80\uDE92]|\u2708\uFE0F?))?|\uDFFC(?:\u200D(?:\uD83E(?:\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB\uDFFD-\uDFFF]|[\uDDB0\uDDB1\uDDB3\uDDB2\uDDAF\uDDBC\uDDBD])|\u2695\uFE0F?|\uD83C[\uDF93\uDFEB\uDF3E\uDF73\uDFED\uDFA4\uDFA8]|\u2696\uFE0F?|\uD83D[\uDD27\uDCBC\uDD2C\uDCBB\uDE80\uDE92]|\u2708\uFE0F?))?|\uDFFD(?:\u200D(?:\uD83E(?:\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF]|[\uDDB0\uDDB1\uDDB3\uDDB2\uDDAF\uDDBC\uDDBD])|\u2695\uFE0F?|\uD83C[\uDF93\uDFEB\uDF3E\uDF73\uDFED\uDFA4\uDFA8]|\u2696\uFE0F?|\uD83D[\uDD27\uDCBC\uDD2C\uDCBB\uDE80\uDE92]|\u2708\uFE0F?))?|\uDFFE(?:\u200D(?:\uD83E(?:\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB-\uDFFD\uDFFF]|[\uDDB0\uDDB1\uDDB3\uDDB2\uDDAF\uDDBC\uDDBD])|\u2695\uFE0F?|\uD83C[\uDF93\uDFEB\uDF3E\uDF73\uDFED\uDFA4\uDFA8]|\u2696\uFE0F?|\uD83D[\uDD27\uDCBC\uDD2C\uDCBB\uDE80\uDE92]|\u2708\uFE0F?))?|\uDFFF(?:\u200D(?:\uD83E(?:\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB-\uDFFE]|[\uDDB0\uDDB1\uDDB3\uDDB2\uDDAF\uDDBC\uDDBD])|\u2695\uFE0F?|\uD83C[\uDF93\uDFEB\uDF3E\uDF73\uDFED\uDFA4\uDFA8]|\u2696\uFE0F?|\uD83D[\uDD27\uDCBC\uDD2C\uDCBB\uDE80\uDE92]|\u2708\uFE0F?))?)|\u200D(?:\uD83E[\uDDB0\uDDB1\uDDB3\uDDB2\uDDAF\uDDBC\uDDBD]|\u2695\uFE0F?|\uD83C[\uDF93\uDFEB\uDF3E\uDF73\uDFED\uDFA4\uDFA8]|\u2696\uFE0F?|\uD83D(?:\uDC69\u200D\uD83D(?:\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?)|\uDC68\u200D\uD83D(?:\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?)|\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?|[\uDD27\uDCBC\uDD2C\uDCBB\uDE80\uDE92])|\u2708\uFE0F?|\u2764(?:\uFE0F\u200D\uD83D(?:\uDC8B\u200D\uD83D\uDC68|\uDC68)|\u200D\uD83D(?:\uDC8B\u200D\uD83D\uDC68|\uDC68)))))?|\uDC69(?:(?:\uD83C(?:\uDFFB(?:\u200D(?:\uD83E(?:\uDD1D\u200D\uD83D(?:\uDC69\uD83C[\uDFFC-\uDFFF]|\uDC68\uD83C[\uDFFC-\uDFFF])|[\uDDB0\uDDB1\uDDB3\uDDB2\uDDAF\uDDBC\uDDBD])|\u2695\uFE0F?|\uD83C[\uDF93\uDFEB\uDF3E\uDF73\uDFED\uDFA4\uDFA8]|\u2696\uFE0F?|\uD83D[\uDD27\uDCBC\uDD2C\uDCBB\uDE80\uDE92]|\u2708\uFE0F?))?|\uDFFC(?:\u200D(?:\uD83E(?:\uDD1D\u200D\uD83D(?:\uDC69\uD83C[\uDFFB\uDFFD-\uDFFF]|\uDC68\uD83C[\uDFFB\uDFFD-\uDFFF])|[\uDDB0\uDDB1\uDDB3\uDDB2\uDDAF\uDDBC\uDDBD])|\u2695\uFE0F?|\uD83C[\uDF93\uDFEB\uDF3E\uDF73\uDFED\uDFA4\uDFA8]|\u2696\uFE0F?|\uD83D[\uDD27\uDCBC\uDD2C\uDCBB\uDE80\uDE92]|\u2708\uFE0F?))?|\uDFFD(?:\u200D(?:\uD83E(?:\uDD1D\u200D\uD83D(?:\uDC69\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF]|\uDC68\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])|[\uDDB0\uDDB1\uDDB3\uDDB2\uDDAF\uDDBC\uDDBD])|\u2695\uFE0F?|\uD83C[\uDF93\uDFEB\uDF3E\uDF73\uDFED\uDFA4\uDFA8]|\u2696\uFE0F?|\uD83D[\uDD27\uDCBC\uDD2C\uDCBB\uDE80\uDE92]|\u2708\uFE0F?))?|\uDFFE(?:\u200D(?:\uD83E(?:\uDD1D\u200D\uD83D(?:\uDC69\uD83C[\uDFFB-\uDFFD\uDFFF]|\uDC68\uD83C[\uDFFB-\uDFFD\uDFFF])|[\uDDB0\uDDB1\uDDB3\uDDB2\uDDAF\uDDBC\uDDBD])|\u2695\uFE0F?|\uD83C[\uDF93\uDFEB\uDF3E\uDF73\uDFED\uDFA4\uDFA8]|\u2696\uFE0F?|\uD83D[\uDD27\uDCBC\uDD2C\uDCBB\uDE80\uDE92]|\u2708\uFE0F?))?|\uDFFF(?:\u200D(?:\uD83E(?:\uDD1D\u200D\uD83D(?:\uDC69\uD83C[\uDFFB-\uDFFE]|\uDC68\uD83C[\uDFFB-\uDFFE])|[\uDDB0\uDDB1\uDDB3\uDDB2\uDDAF\uDDBC\uDDBD])|\u2695\uFE0F?|\uD83C[\uDF93\uDFEB\uDF3E\uDF73\uDFED\uDFA4\uDFA8]|\u2696\uFE0F?|\uD83D[\uDD27\uDCBC\uDD2C\uDCBB\uDE80\uDE92]|\u2708\uFE0F?))?)|\u200D(?:\uD83E[\uDDB0\uDDB1\uDDB3\uDDB2\uDDAF\uDDBC\uDDBD]|\u2695\uFE0F?|\uD83C[\uDF93\uDFEB\uDF3E\uDF73\uDFED\uDFA4\uDFA8]|\u2696\uFE0F?|\uD83D(?:\uDC69\u200D\uD83D(?:\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?)|\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?|[\uDD27\uDCBC\uDD2C\uDCBB\uDE80\uDE92])|\u2708\uFE0F?|\u2764(?:\uFE0F\u200D\uD83D(?:\uDC8B\u200D\uD83D[\uDC68\uDC69]|[\uDC68\uDC69])|\u200D\uD83D(?:\uDC8B\u200D\uD83D[\uDC68\uDC69]|[\uDC68\uDC69])))))?|[\uDC74\uDC75](?:\uD83C[\uDFFB-\uDFFF])?|[\uDE4D\uDE4E\uDE45\uDE46\uDC81\uDE4B\uDE47\uDC6E](?:(?:\uD83C(?:[\uDFFB-\uDFFF](?:\u200D(?:[\u2642\u2640]\uFE0F?))?)|\u200D(?:[\u2642\u2640]\uFE0F?)))?|\uDD75(?:(?:\uFE0F(?:\u200D(?:[\u2642\u2640]\uFE0F?))?|\uD83C(?:[\uDFFB-\uDFFF](?:\u200D(?:[\u2642\u2640]\uFE0F?))?)|\u200D(?:[\u2642\u2640]\uFE0F?)))?|[\uDC82\uDC77](?:(?:\uD83C(?:[\uDFFB-\uDFFF](?:\u200D(?:[\u2642\u2640]\uFE0F?))?)|\u200D(?:[\u2642\u2640]\uFE0F?)))?|\uDC78(?:\uD83C[\uDFFB-\uDFFF])?|\uDC73(?:(?:\uD83C(?:[\uDFFB-\uDFFF](?:\u200D(?:[\u2642\u2640]\uFE0F?))?)|\u200D(?:[\u2642\u2640]\uFE0F?)))?|[\uDC72\uDC70\uDC7C](?:\uD83C[\uDFFB-\uDFFF])?|[\uDC86\uDC87\uDEB6](?:(?:\uD83C(?:[\uDFFB-\uDFFF](?:\u200D(?:[\u2642\u2640]\uFE0F?))?)|\u200D(?:[\u2642\u2640]\uFE0F?)))?|[\uDC83\uDD7A](?:\uD83C[\uDFFB-\uDFFF])?|\uDD74(?:(?:\uD83C[\uDFFB-\uDFFF]|\uFE0F))?|\uDC6F(?:\u200D(?:[\u2642\u2640]\uFE0F?))?|[\uDEA3\uDEB4\uDEB5](?:(?:\uD83C(?:[\uDFFB-\uDFFF](?:\u200D(?:[\u2642\u2640]\uFE0F?))?)|\u200D(?:[\u2642\u2640]\uFE0F?)))?|[\uDEC0\uDECC\uDC6D\uDC6B\uDC6C](?:\uD83C[\uDFFB-\uDFFF])?|\uDDE3\uFE0F?|\uDC15(?:\u200D\uD83E\uDDBA)?|[\uDC3F\uDD4A\uDD77\uDD78\uDDFA\uDEE3\uDEE4\uDEE2\uDEF3\uDEE5\uDEE9\uDEF0\uDECE\uDD70\uDD79\uDDBC\uDD76\uDECD\uDDA5\uDDA8\uDDB1\uDDB2\uDCFD\uDD6F\uDDDE\uDDF3\uDD8B\uDD8A\uDD8C\uDD8D\uDDC2\uDDD2\uDDD3\uDD87\uDDC3\uDDC4\uDDD1\uDDDD\uDEE0\uDDE1\uDEE1\uDDDC\uDECF\uDECB\uDD49]\uFE0F?|[\uDE00\uDE03\uDE04\uDE01\uDE06\uDE05\uDE02\uDE42\uDE43\uDE09\uDE0A\uDE07\uDE0D\uDE18\uDE17\uDE1A\uDE19\uDE0B\uDE1B-\uDE1D\uDE10\uDE11\uDE36\uDE0F\uDE12\uDE44\uDE2C\uDE0C\uDE14\uDE2A\uDE34\uDE37\uDE35\uDE0E\uDE15\uDE1F\uDE41\uDE2E\uDE2F\uDE32\uDE33\uDE26-\uDE28\uDE30\uDE25\uDE22\uDE2D\uDE31\uDE16\uDE23\uDE1E\uDE13\uDE29\uDE2B\uDE24\uDE21\uDE20\uDE08\uDC7F\uDC80\uDCA9\uDC79-\uDC7B\uDC7D\uDC7E\uDE3A\uDE38\uDE39\uDE3B-\uDE3D\uDE40\uDE3F\uDE3E\uDE48-\uDE4A\uDC8B\uDC8C\uDC98\uDC9D\uDC96\uDC97\uDC93\uDC9E\uDC95\uDC9F\uDC94\uDC9B\uDC9A\uDC99\uDC9C\uDDA4\uDCAF\uDCA2\uDCA5\uDCAB\uDCA6\uDCA8\uDCA3\uDCAC\uDCAD\uDCA4\uDC40\uDC45\uDC44\uDC8F\uDC91\uDC6A\uDC64\uDC65\uDC63\uDC35\uDC12\uDC36\uDC29\uDC3A\uDC31\uDC08\uDC2F\uDC05\uDC06\uDC34\uDC0E\uDC2E\uDC02-\uDC04\uDC37\uDC16\uDC17\uDC3D\uDC0F\uDC11\uDC10\uDC2A\uDC2B\uDC18\uDC2D\uDC01\uDC00\uDC39\uDC30\uDC07\uDC3B\uDC28\uDC3C\uDC3E\uDC14\uDC13\uDC23-\uDC27\uDC38\uDC0A\uDC22\uDC0D\uDC32\uDC09\uDC33\uDC0B\uDC2C\uDC1F-\uDC21\uDC19\uDC1A\uDC0C\uDC1B-\uDC1E\uDC90\uDCAE\uDD2A\uDDFE\uDDFB\uDC92\uDDFC\uDDFD\uDD4C\uDED5\uDD4D\uDD4B\uDC88\uDE82-\uDE8A\uDE9D\uDE9E\uDE8B-\uDE8E\uDE90-\uDE9C\uDEF5\uDEFA\uDEB2\uDEF4\uDEF9\uDE8F\uDEA8\uDEA5\uDEA6\uDED1\uDEA7\uDEF6\uDEA4\uDEA2\uDEEB\uDEEC\uDCBA\uDE81\uDE9F-\uDEA1\uDE80\uDEF8\uDD5B\uDD67\uDD50\uDD5C\uDD51\uDD5D\uDD52\uDD5E\uDD53\uDD5F\uDD54\uDD60\uDD55\uDD61\uDD56\uDD62\uDD57\uDD63\uDD58\uDD64\uDD59\uDD65\uDD5A\uDD66\uDD25\uDCA7\uDEF7\uDD2E\uDC53-\uDC62\uDC51\uDC52\uDCFF\uDC84\uDC8D\uDC8E\uDD07-\uDD0A\uDCE2\uDCE3\uDCEF\uDD14\uDD15\uDCFB\uDCF1\uDCF2\uDCDE-\uDCE0\uDD0B\uDD0C\uDCBB\uDCBD-\uDCC0\uDCFA\uDCF7-\uDCF9\uDCFC\uDD0D\uDD0E\uDCA1\uDD26\uDCD4-\uDCDA\uDCD3\uDCD2\uDCC3\uDCDC\uDCC4\uDCF0\uDCD1\uDD16\uDCB0\uDCB4-\uDCB8\uDCB3\uDCB9\uDCB1\uDCB2\uDCE7-\uDCE9\uDCE4-\uDCE6\uDCEB\uDCEA\uDCEC-\uDCEE\uDCDD\uDCBC\uDCC1\uDCC2\uDCC5-\uDCD0\uDD12\uDD13\uDD0F-\uDD11\uDD28\uDD2B\uDD27\uDD29\uDD17\uDD2C\uDD2D\uDCE1\uDC89\uDC8A\uDEAA\uDEBD\uDEBF\uDEC1\uDED2\uDEAC\uDDFF\uDEAE\uDEB0\uDEB9-\uDEBC\uDEBE\uDEC2-\uDEC5\uDEB8\uDEAB\uDEB3\uDEAD\uDEAF\uDEB1\uDEB7\uDCF5\uDD1E\uDD03\uDD04\uDD19-\uDD1D\uDED0\uDD4E\uDD2F\uDD00-\uDD02\uDD3C\uDD3D\uDD05\uDD06\uDCF6\uDCF3\uDCF4\uDD31\uDCDB\uDD30\uDD1F-\uDD24\uDD34\uDFE0-\uDFE2\uDD35\uDFE3-\uDFE5\uDFE7-\uDFE9\uDFE6\uDFEA\uDFEB\uDD36-\uDD3B\uDCA0\uDD18\uDD33\uDD32\uDEA9])|\uD83E(?:[\uDD1A\uDD0F\uDD1E\uDD1F\uDD18\uDD19\uDD1B\uDD1C\uDD32\uDD33\uDDB5\uDDB6\uDDBB\uDDD2](?:\uD83C[\uDFFB-\uDFFF])?|\uDDD1(?:(?:\uD83C(?:[\uDFFB-\uDFFF](?:\u200D(?:\uD83E(?:\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF]|[\uDDB0\uDDB1\uDDB3\uDDB2\uDDAF\uDDBC\uDDBD])|\u2695\uFE0F?|\uD83C[\uDF93\uDFEB\uDF3E\uDF73\uDFED\uDFA4\uDFA8]|\u2696\uFE0F?|\uD83D[\uDD27\uDCBC\uDD2C\uDCBB\uDE80\uDE92]|\u2708\uFE0F?))?)|\u200D(?:\uD83E(?:\uDD1D\u200D\uD83E\uDDD1|[\uDDB0\uDDB1\uDDB3\uDDB2\uDDAF\uDDBC\uDDBD])|\u2695\uFE0F?|\uD83C[\uDF93\uDFEB\uDF3E\uDF73\uDFED\uDFA4\uDFA8]|\u2696\uFE0F?|\uD83D[\uDD27\uDCBC\uDD2C\uDCBB\uDE80\uDE92]|\u2708\uFE0F?)))?|[\uDDD4\uDDD3](?:\uD83C[\uDFFB-\uDFFF])?|[\uDDCF\uDD26\uDD37](?:(?:\uD83C(?:[\uDFFB-\uDFFF](?:\u200D(?:[\u2642\u2640]\uFE0F?))?)|\u200D(?:[\u2642\u2640]\uFE0F?)))?|[\uDD34\uDDD5\uDD35\uDD30\uDD31\uDD36](?:\uD83C[\uDFFB-\uDFFF])?|[\uDDB8\uDDB9\uDDD9-\uDDDD](?:(?:\uD83C(?:[\uDFFB-\uDFFF](?:\u200D(?:[\u2642\u2640]\uFE0F?))?)|\u200D(?:[\u2642\u2640]\uFE0F?)))?|[\uDDDE\uDDDF](?:\u200D(?:[\u2642\u2640]\uFE0F?))?|[\uDDCD\uDDCE\uDDD6\uDDD7\uDD38](?:(?:\uD83C(?:[\uDFFB-\uDFFF](?:\u200D(?:[\u2642\u2640]\uFE0F?))?)|\u200D(?:[\u2642\u2640]\uFE0F?)))?|\uDD3C(?:\u200D(?:[\u2642\u2640]\uFE0F?))?|[\uDD3D\uDD3E\uDD39\uDDD8](?:(?:\uD83C(?:[\uDFFB-\uDFFF](?:\u200D(?:[\u2642\u2640]\uFE0F?))?)|\u200D(?:[\u2642\u2640]\uFE0F?)))?|[\uDD23\uDD70\uDD29\uDD2A\uDD11\uDD17\uDD2D\uDD2B\uDD14\uDD10\uDD28\uDD25\uDD24\uDD12\uDD15\uDD22\uDD2E\uDD27\uDD75\uDD76\uDD74\uDD2F\uDD20\uDD73\uDD13\uDDD0\uDD7A\uDD71\uDD2C\uDD21\uDD16\uDDE1\uDD0E\uDD0D\uDD1D\uDDBE\uDDBF\uDDE0\uDDB7\uDDB4\uDD3A\uDDB0\uDDB1\uDDB3\uDDB2\uDD8D\uDDA7\uDDAE\uDD8A\uDD9D\uDD81\uDD84\uDD93\uDD8C\uDD99\uDD92\uDD8F\uDD9B\uDD94\uDD87\uDDA5\uDDA6\uDDA8\uDD98\uDDA1\uDD83\uDD85\uDD86\uDDA2\uDD89\uDDA9\uDD9A\uDD9C\uDD8E\uDD95\uDD96\uDD88\uDD8B\uDD97\uDD82\uDD9F\uDDA0\uDD40\uDD6D\uDD5D\uDD65\uDD51\uDD54\uDD55\uDD52\uDD6C\uDD66\uDDC4\uDDC5\uDD5C\uDD50\uDD56\uDD68\uDD6F\uDD5E\uDDC7\uDDC0\uDD69\uDD53\uDD6A\uDD59\uDDC6\uDD5A\uDD58\uDD63\uDD57\uDDC8\uDDC2\uDD6B\uDD6E\uDD5F-\uDD61\uDD80\uDD9E\uDD90\uDD91\uDDAA\uDDC1\uDD67\uDD5B\uDD42\uDD43\uDD64\uDDC3\uDDC9\uDDCA\uDD62\uDD44\uDDED\uDDF1\uDDBD\uDDBC\uDE82\uDDF3\uDE90\uDDE8\uDDE7\uDD47-\uDD49\uDD4E\uDD4F\uDD4D\uDD4A\uDD4B\uDD45\uDD3F\uDD4C\uDE80\uDE81\uDDFF\uDDE9\uDDF8\uDDF5\uDDF6\uDD7D\uDD7C\uDDBA\uDDE3-\uDDE6\uDD7B\uDE71-\uDE73\uDD7E\uDD7F\uDE70\uDDE2\uDE95\uDD41\uDDEE\uDE94\uDDFE\uDE93\uDDAF\uDDF0\uDDF2\uDDEA-\uDDEC\uDE78-\uDE7A\uDE91\uDE92\uDDF4\uDDF7\uDDF9-\uDDFD\uDDEF])|[\u263A\u2639\u2620\u2763\u2764]\uFE0F?|\u270B(?:\uD83C[\uDFFB-\uDFFF])?|[\u270C\u261D](?:(?:\uD83C[\uDFFB-\uDFFF]|\uFE0F))?|\u270A(?:\uD83C[\uDFFB-\uDFFF])?|\u270D(?:(?:\uD83C[\uDFFB-\uDFFF]|\uFE0F))?|\uD83C(?:\uDF85(?:\uD83C[\uDFFB-\uDFFF])?|\uDFC3(?:(?:\uD83C(?:[\uDFFB-\uDFFF](?:\u200D(?:[\u2642\u2640]\uFE0F?))?)|\u200D(?:[\u2642\u2640]\uFE0F?)))?|[\uDFC7\uDFC2](?:\uD83C[\uDFFB-\uDFFF])?|\uDFCC(?:(?:\uFE0F(?:\u200D(?:[\u2642\u2640]\uFE0F?))?|\uD83C(?:[\uDFFB-\uDFFF](?:\u200D(?:[\u2642\u2640]\uFE0F?))?)|\u200D(?:[\u2642\u2640]\uFE0F?)))?|[\uDFC4\uDFCA](?:(?:\uD83C(?:[\uDFFB-\uDFFF](?:\u200D(?:[\u2642\u2640]\uFE0F?))?)|\u200D(?:[\u2642\u2640]\uFE0F?)))?|\uDFCB(?:(?:\uFE0F(?:\u200D(?:[\u2642\u2640]\uFE0F?))?|\uD83C(?:[\uDFFB-\uDFFF](?:\u200D(?:[\u2642\u2640]\uFE0F?))?)|\u200D(?:[\u2642\u2640]\uFE0F?)))?|[\uDFF5\uDF36\uDF7D\uDFD4-\uDFD6\uDFDC-\uDFDF\uDFDB\uDFD7\uDFD8\uDFDA\uDFD9\uDFCE\uDFCD\uDF21\uDF24-\uDF2C\uDF97\uDF9F\uDF96\uDF99-\uDF9B\uDF9E\uDFF7\uDD70\uDD71\uDD7E\uDD7F\uDE02\uDE37]\uFE0F?|\uDFF4(?:(?:\u200D\u2620\uFE0F?|\uDB40\uDC67\uDB40\uDC62\uDB40(?:\uDC65\uDB40\uDC6E\uDB40\uDC67\uDB40\uDC7F|\uDC73\uDB40\uDC63\uDB40\uDC74\uDB40\uDC7F|\uDC77\uDB40\uDC6C\uDB40\uDC73\uDB40\uDC7F)))?|\uDFF3(?:(?:\uFE0F(?:\u200D\uD83C\uDF08)?|\u200D\uD83C\uDF08))?|\uDDE6\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF]|\uDDE7\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF]|\uDDE8\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF]|\uDDE9\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF]|\uDDEA\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA]|\uDDEB\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7]|\uDDEC\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE]|\uDDED\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA]|\uDDEE\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9]|\uDDEF\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5]|\uDDF0\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF]|\uDDF1\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE]|\uDDF2\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF]|\uDDF3\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF]|\uDDF4\uD83C\uDDF2|\uDDF5\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE]|\uDDF6\uD83C\uDDE6|\uDDF7\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC]|\uDDF8\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF]|\uDDF9\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF]|\uDDFA\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF]|\uDDFB\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA]|\uDDFC\uD83C[\uDDEB\uDDF8]|\uDDFD\uD83C\uDDF0|\uDDFE\uD83C[\uDDEA\uDDF9]|\uDDFF\uD83C[\uDDE6\uDDF2\uDDFC]|[\uDFFB-\uDFFF\uDF38-\uDF3C\uDF37\uDF31-\uDF35\uDF3E-\uDF43\uDF47-\uDF53\uDF45\uDF46\uDF3D\uDF44\uDF30\uDF5E\uDF56\uDF57\uDF54\uDF5F\uDF55\uDF2D-\uDF2F\uDF73\uDF72\uDF7F\uDF71\uDF58-\uDF5D\uDF60\uDF62-\uDF65\uDF61\uDF66-\uDF6A\uDF82\uDF70\uDF6B-\uDF6F\uDF7C\uDF75\uDF76\uDF7E\uDF77-\uDF7B\uDF74\uDFFA\uDF0D-\uDF10\uDF0B\uDFE0-\uDFE6\uDFE8-\uDFED\uDFEF\uDFF0\uDF01\uDF03-\uDF07\uDF09\uDFA0-\uDFA2\uDFAA\uDF11-\uDF20\uDF0C\uDF00\uDF08\uDF02\uDF0A\uDF83\uDF84\uDF86-\uDF8B\uDF8D-\uDF91\uDF80\uDF81\uDFAB\uDFC6\uDFC5\uDFC0\uDFD0\uDFC8\uDFC9\uDFBE\uDFB3\uDFCF\uDFD1-\uDFD3\uDFF8\uDFA3\uDFBD\uDFBF\uDFAF\uDFB1\uDFAE\uDFB0\uDFB2\uDCCF\uDC04\uDFB4\uDFAD\uDFA8\uDF92\uDFA9\uDF93\uDFBC\uDFB5\uDFB6\uDFA4\uDFA7\uDFB7-\uDFBB\uDFA5\uDFAC\uDFEE\uDFF9\uDFE7\uDFA6\uDD8E\uDD91-\uDD9A\uDE01\uDE36\uDE2F\uDE50\uDE39\uDE1A\uDE32\uDE51\uDE38\uDE34\uDE33\uDE3A\uDE35\uDFC1\uDF8C])|\u26F7\uFE0F?|\u26F9(?:(?:\uFE0F(?:\u200D(?:[\u2642\u2640]\uFE0F?))?|\uD83C(?:[\uDFFB-\uDFFF](?:\u200D(?:[\u2642\u2640]\uFE0F?))?)|\u200D(?:[\u2642\u2640]\uFE0F?)))?|[\u2618\u26F0\u26E9\u2668\u26F4\u2708\u23F1\u23F2\u2600\u2601\u26C8\u2602\u26F1\u2744\u2603\u2604\u26F8\u2660\u2665\u2666\u2663\u265F\u26D1\u260E\u2328\u2709\u270F\u2712\u2702\u26CF\u2692\u2694\u2699\u2696\u26D3\u2697\u26B0\u26B1\u26A0\u2622\u2623\u2B06\u2197\u27A1\u2198\u2B07\u2199\u2B05\u2196\u2195\u2194\u21A9\u21AA\u2934\u2935\u269B\u2721\u2638\u262F\u271D\u2626\u262A\u262E\u25B6\u23ED\u23EF\u25C0\u23EE\u23F8-\u23FA\u23CF\u2640\u2642\u2695\u267E\u267B\u269C\u2611\u2714\u2716\u303D\u2733\u2734\u2747\u203C\u2049\u3030\u00A9\u00AE\u2122]\uFE0F?|[\u0023\u002A\u0030-\u0039](?:\uFE0F\u20E3|\u20E3)|[\u2139\u24C2\u3297\u3299\u25FC\u25FB\u25AA\u25AB]\uFE0F?|[\u2615\u26EA\u26F2\u26FA\u26FD\u2693\u26F5\u231B\u23F3\u231A\u23F0\u2B50\u26C5\u2614\u26A1\u26C4\u2728\u26BD\u26BE\u26F3\u267F\u26D4\u2648-\u2653\u26CE\u23E9-\u23EC\u2B55\u2705\u274C\u274E\u2795-\u2797\u27B0\u27BF\u2753-\u2755\u2757\u26AB\u26AA\u2B1B\u2B1C\u25FE\u25FD])/.test(t.content)?this.addReaction(t):(null!=(r=document.getElementById("wiki-talk-nomessages"))&&r.remove(),(o=document.createElement("li")).id="wiki-message-".concat(t.id),i=document.createElement("div"),o.appendChild(i),i.id="wiki-message-div-".concat(t.id),i.classList.add("wiki-message","collapsible","collapsed"),u=document.createElement("div"),i.appendChild(u),u.classList.add("wiki-message-header"),s=document.createElement("span"),u.appendChild(s),s.classList.add("wiki-message-sender"),a=document.createTextNode(t.senderName),t.senderExists?(c=document.createElement("a"),s.appendChild(c),c.classList.add("wiki-username","wiki-username-link"),c.href="/".concat(window.wikimvcchat.userNamespace,":").concat(t.senderId),c.title="Visit the user page for ".concat(t.senderName),c.appendChild(a)):(l=document.createElement("span"),s.appendChild(l),userLink.classList.add("wiki-username","wiki-username-nolink"),userLink.appendChild(a)),D=document.createElement("span"),u.appendChild(D),D.classList.add("wiki-message-reactions","wiki-message-reactions-".concat(t.id)),p=document.createElement("span"),u.appendChild(p),p.classList.add("wiki-message-timestamp"),f=document.createTextNode(new Date(t.timestamp/1e4-22089888e5).toLocaleString()),p.appendChild(f),h=document.createElement("div"),u.appendChild(h),h.classList.add("wiki-message-thread-toggler"),h.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" width="12" height="12"><path d="M4 1.533v9.671l4.752-4.871z" /></svg >',h.onclick=function(e){e.target.parentElement.parentElement.classList.toggle("expanded")},d=document.createElement("div"),i.appendChild(d),d.classList.add("wiki-message-content"),g=document.createTextNode(t.content),d.appendChild(g),v=document.createElement("div"),i.appendChild(v),v.classList.add("wiki-message-collapse-toggler"),m=document.createElement("a"),v.appendChild(m),m.href="javascript: void(0);",m.onclick=function(e){e.target.parentElement.parentElement.classList.toggle("collapsed")},n?null!=(y=document.getElementById("wiki-message-div-".concat(t.replyMessageId)))&&(y.classList.add("wiki-message-thread"),null==(F=y.getElementsByTagName("ul"))&&(F=document.createElement("ul"),y.appendChild(F)),F.appendChild(o)):(E=document.createElement("div"),i.appendChild(E),E.classList.add("wiki-talk-reply"),b=document.createElement("div"),E.appendChild(b),b.classList.add("form-group"),C=document.createElement("label"),b.appendChild(C),C.htmlFor="wiki-talk-message-input-".concat(t.id),C.textContent="Reply",w=document.createElement("textarea"),b.appendChild(w),w.id="wiki-talk-message-input-".concat(t.id),b.classList.add("form-control"),B=document.createElement("button"),E.appendChild(B),B.id="wiki-talk-reply-button-".concat(t.id),B.type="button",B.classList.add("btn","btn-primary"),B.textContent="Post",B.addEventListener("click",function(t){t=t||window.event;var n,r,o=(e.target||e.srcElement).id;null==o||null==o.length||o.length<=23||(o=o.substr(23),null==(n=document.getElementById("wiki-talk-message-input-".concat(o)))||null!=(r=n.value)&&null!=r.length&&0<r.length&&(window.wikimvcchat.connection.invoke("Send",{Markdown:r,MessageId:o,TopicId:topicId}).catch(function(e){return console.error("An error occurred while sending a chat message")}),t.preventDefault(),t.stopPropagation()))}),window.wikimvcchat.messageListUl.appendChild(o)),parseInt(getComputedStyle(d).getPropertyValue("height"))<parseInt(getComputedStyle(d).getPropertyValue("max-height"))&&i.classList.remove("collapsible")))},addReaction:function(e){var t,n;null==e||null==e.messageId||!(null!=e.replyMessageId||null!=e.replyMessageId.length||0<e.replyMessageId.length)||null!=(t=document.getElementById("wiki-message-reactions-".concat(e.replyMessageId)))&&(n=e.content.replace(/[^a-zA-Z]/g,""),null==t.getElementById("wiki-message-reactions-".concat(n,"-").concat(e.messageId))&&window.wikimvcchat.addReactionList(e.replyMessageId,e.topicId,t,n,e.content),window.wikimvcchat.addReactionToList(e,n))},addReactionList:function(t,n,e,r,o){var i=document.createElement("span");e.appendChild(i),i.id="wiki-message-reactions-".concat(r,"-").concat(t),i.classList.add("wiki-message-reactions");var u=document.createElement("span");i.appendChild(u),u.classList.add("wiki-message-reaction-icon"),u.onclick=function(e){window.wikimvcchat.connection.invoke("Send",{Markdown:o,MessageId:t,TopicId:n}).catch(function(e){return console.error("An error occurred while attempting to send a chat reaction")}),e.preventDefault(),e.stopPropagation()};var s=document.createElement("span");i.appendChild(s),i.id="wiki-message-reaction-count-".concat(r,"-").concat(t),s.classList.add("wiki-message-reaction-count");var a=document.createTextNode("0");s.appendChild(a);var c=document.createElement("ul");return i.appendChild(c),c.id="wiki-message-reaction-list-".concat(r,"-").concat(t),c.classList.add("wiki-message-reaction-list"),c.style.display="none",(0,l.default)(i,{content:function(){return document.getElementById("wiki-message-reaction-list-".concat(r,"-").concat(t)).innerHTML},placement:"auto",allowHTML:!0}),i},addReactionToList:function(e,t){var n,r=document.getElementById("wiki-message-reaction-count-".concat(t,"-").concat(e.replyMessageId));null!=r&&(n=parseInt(r.textContent),n++,r.textContent=n.toLocaleString());var o=document.getElementById("wiki-message-reaction-list-".concat(t,"-").concat(e.replyMessageId));null!=o&&window.wikimvcchat.addReactionToList(o,e);var u=document.createElement("li");o.appendChild(u);var s,a,c=document.createTextNode(e.senderName);e.senderExists?(s=document.createElement("a"),u.appendChild(s),s.classList.add("wiki-username","wiki-username-link"),s.href="/".concat(window.wikimvcchat.userNamespace,":").concat(e.senderId),s.title="Visit the user page for ".concat(e.senderName),s.appendChild(c)):(a=document.createElement("span"),u.appendChild(a),a.classList.add("wiki-username","wiki-username-nolink"),a.appendChild(c));var l=document.createElement("span");u.appendChild(l);var D=document.createTextNode(new Date(list[i].timestamp/1e4-22089888e5).toLocaleString());l.appendChild(D)},sendMessage:function(e,t){t&&t.length&&window.wikimvcchat.connection.invoke("Send",{Markdown:t,MessageId:"",TopicId:e}).catch(function(e){return console.error(e)})}}},{"@microsoft/signalr":24,"tippy.js":30}],2:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=(o.prototype.abort=function(){this.isAborted||(this.isAborted=!0,this.onabort&&this.onabort())},Object.defineProperty(o.prototype,"signal",{get:function(){return this},enumerable:!0,configurable:!0}),Object.defineProperty(o.prototype,"aborted",{get:function(){return this.isAborted},enumerable:!0,configurable:!0}),o);function o(){this.isAborted=!1,this.onabort=null}n.AbortController=r},{}],3:[function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(n,"__esModule",{value:!0});var i,u=e("./Errors"),s=e("./FetchHttpClient"),a=e("./HttpClient"),c=e("./Utils"),l=e("./XhrHttpClient"),D=(i=a.HttpClient,o(p,i),p.prototype.send=function(e){return e.abortSignal&&e.abortSignal.aborted?Promise.reject(new u.AbortError):e.method?e.url?this.httpClient.send(e):Promise.reject(new Error("No url defined.")):Promise.reject(new Error("No method defined."))},p.prototype.getCookieString=function(e){return this.httpClient.getCookieString(e)},p);function p(e){var t=i.call(this)||this;if("undefined"!=typeof fetch||c.Platform.isNode)t.httpClient=new s.FetchHttpClient(e);else{if("undefined"==typeof XMLHttpRequest)throw new Error("No usable HttpClient found.");t.httpClient=new l.XhrHttpClient(e)}return t}n.DefaultHttpClient=D},{"./Errors":5,"./FetchHttpClient":6,"./HttpClient":8,"./Utils":21,"./XhrHttpClient":23}],4:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=[0,2e3,1e4,3e4,null],o=(i.prototype.nextRetryDelayInMilliseconds=function(e){return this.retryDelays[e.previousRetryCount]},i);function i(e){this.retryDelays=void 0!==e?e.concat([null]):r}n.DefaultReconnectPolicy=o},{}],5:[function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(n,"__esModule",{value:!0});var i,u=(i=Error,o(s,i),s);function s(e,t){var n=this,r=this.constructor.prototype;return(n=i.call(this,e)||this).statusCode=t,n.__proto__=r,n}n.HttpError=u;var a,c=(a=Error,o(l,a),l);function l(e){void 0===e&&(e="A timeout occurred.");var t=this,n=this.constructor.prototype;return(t=a.call(this,e)||this).__proto__=n,t}n.TimeoutError=c;var D,p=(D=Error,o(f,D),f);function f(e){void 0===e&&(e="An abort occurred.");var t=this,n=this.constructor.prototype;return(t=D.call(this,e)||this).__proto__=n,t}n.AbortError=p},{}],6:[function(r,e,t){"use strict";var o,n=this&&this.__extends||(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),l=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},i=this&&this.__awaiter||function(i,u,s,a){return new(s=s||Promise)(function(e,t){function n(e){try{o(a.next(e))}catch(e){t(e)}}function r(e){try{o(a.throw(e))}catch(e){t(e)}}function o(t){t.done?e(t.value):new s(function(e){e(t.value)}).then(n,r)}o((a=a.apply(i,u||[])).next())})},D=this&&this.__generator||function(n,r){var o,i,u,s={label:0,sent:function(){if(1&u[0])throw u[1];return u[1]},trys:[],ops:[]},e={next:t(0),throw:t(1),return:t(2)};return"function"==typeof Symbol&&(e[Symbol.iterator]=function(){return this}),e;function t(t){return function(e){return function(t){if(o)throw new TypeError("Generator is already executing.");for(;s;)try{if(o=1,i&&(u=2&t[0]?i.return:t[0]?i.throw||((u=i.return)&&u.call(i),0):i.next)&&!(u=u.call(i,t[1])).done)return u;switch(i=0,u&&(t=[2&t[0],u.value]),t[0]){case 0:case 1:u=t;break;case 4:return s.label++,{value:t[1],done:!1};case 5:s.label++,i=t[1],t=[0];continue;case 7:t=s.ops.pop(),s.trys.pop();continue;default:if(!(u=0<(u=s.trys).length&&u[u.length-1])&&(6===t[0]||2===t[0])){s=0;continue}if(3===t[0]&&(!u||t[1]>u[0]&&t[1]<u[3])){s.label=t[1];break}if(6===t[0]&&s.label<u[1]){s.label=u[1],u=t;break}if(u&&s.label<u[2]){s.label=u[2],s.ops.push(t);break}u[2]&&s.ops.pop(),s.trys.pop();continue}t=r.call(n,s)}catch(e){t=[6,e],i=0}finally{o=u=0}if(5&t[0])throw t[1];return{value:t[0]?t[1]:void 0,done:!0}}([t,e])}}};Object.defineProperty(t,"__esModule",{value:!0});var u,p=r("./Errors"),f=r("./HttpClient"),h=r("./ILogger"),s=r("./Utils"),a=(u=f.HttpClient,n(c,u),c.prototype.send=function(c){return i(this,void 0,void 0,function(){var t,n,r,o,i,u,s,a=this;return D(this,function(e){switch(e.label){case 0:if(c.abortSignal&&c.abortSignal.aborted)throw new p.AbortError;if(!c.method)throw new Error("No method defined.");if(!c.url)throw new Error("No url defined.");t=new this.abortControllerType,c.abortSignal&&(c.abortSignal.onabort=function(){t.abort(),n=new p.AbortError}),r=null,c.timeout&&(o=c.timeout,r=setTimeout(function(){t.abort(),a.logger.log(h.LogLevel.Warning,"Timeout from HTTP request."),n=new p.TimeoutError},o)),e.label=1;case 1:return e.trys.push([1,3,4,5]),[4,this.fetchType(c.url,{body:c.content,cache:"no-cache",credentials:!0===c.withCredentials?"include":"same-origin",headers:l({"Content-Type":"text/plain;charset=UTF-8","X-Requested-With":"XMLHttpRequest"},c.headers),method:c.method,mode:"cors",redirect:"manual",signal:t.signal})];case 2:return i=e.sent(),[3,5];case 3:if(u=e.sent(),n)throw n;throw this.logger.log(h.LogLevel.Warning,"Error from HTTP request. "+u+"."),u;case 4:return r&&clearTimeout(r),c.abortSignal&&(c.abortSignal.onabort=null),[7];case 5:if(!i.ok)throw new p.HttpError(i.statusText,i.status);return[4,function(e,t){var n;switch(t){case"arraybuffer":n=e.arrayBuffer();break;case"text":n=e.text();break;case"blob":case"document":case"json":throw new Error(t+" is not supported.");default:n=e.text()}return n}(i,c.responseType)];case 6:return s=e.sent(),[2,new f.HttpResponse(i.status,i.statusText,s)]}})})},c.prototype.getCookieString=function(e){var n="";return s.Platform.isNode&&this.jar&&this.jar.getCookies(e,function(e,t){return n=t.join("; ")}),n},c);function c(e){var t,n=u.call(this)||this;return n.logger=e,"undefined"==typeof fetch?(t="function"==typeof __webpack_require__?__non_webpack_require__:r,n.jar=new(t("tough-cookie").CookieJar),n.fetchType=t("node-fetch"),n.fetchType=t("fetch-cookie")(n.fetchType,n.jar),n.abortControllerType=t("abort-controller")):(n.fetchType=fetch.bind(self),n.abortControllerType=AbortController),n}t.FetchHttpClient=a},{"./Errors":5,"./HttpClient":8,"./ILogger":13,"./Utils":21}],7:[function(n,e,r){(function(c){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var l=n("./TextMessageFormat"),D=n("./Utils"),e=(t.prototype.writeHandshakeRequest=function(e){return l.TextMessageFormat.write(JSON.stringify(e))},t.prototype.parseHandshakeResponse=function(e){if(D.isArrayBuffer(e)||void 0!==c&&e instanceof c){var t=new Uint8Array(e);if(-1===(i=t.indexOf(l.TextMessageFormat.RecordSeparatorCode)))throw new Error("Message is incomplete.");var n=i+1,r=String.fromCharCode.apply(null,t.slice(0,n)),o=t.byteLength>n?t.slice(n).buffer:null}else{var i,u=e;if(-1===(i=u.indexOf(l.TextMessageFormat.RecordSeparator)))throw new Error("Message is incomplete.");n=i+1,r=u.substring(0,n),o=u.length>n?u.substring(n):null}var s=l.TextMessageFormat.parse(r),a=JSON.parse(s[0]);if(a.type)throw new Error("Expected a handshake response from the server.");return[o,a]},t);function t(){}r.HandshakeProtocol=e}).call(this,n("buffer").Buffer)},{"./TextMessageFormat":20,"./Utils":21,buffer:27}],8:[function(e,t,n){"use strict";var r=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e};Object.defineProperty(n,"__esModule",{value:!0});function o(e,t,n){this.statusCode=e,this.statusText=t,this.content=n}n.HttpResponse=o;var i=(u.prototype.get=function(e,t){return this.send(r({},t,{method:"GET",url:e}))},u.prototype.post=function(e,t){return this.send(r({},t,{method:"POST",url:e}))},u.prototype.delete=function(e,t){return this.send(r({},t,{method:"DELETE",url:e}))},u.prototype.getCookieString=function(e){return""},u);function u(){}n.HttpClient=i},{}],9:[function(i,e,t){"use strict";var D=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},r=this&&this.__awaiter||function(i,u,s,a){return new(s=s||Promise)(function(e,t){function n(e){try{o(a.next(e))}catch(e){t(e)}}function r(e){try{o(a.throw(e))}catch(e){t(e)}}function o(t){t.done?e(t.value):new s(function(e){e(t.value)}).then(n,r)}o((a=a.apply(i,u||[])).next())})},g=this&&this.__generator||function(n,r){var o,i,u,s={label:0,sent:function(){if(1&u[0])throw u[1];return u[1]},trys:[],ops:[]},e={next:t(0),throw:t(1),return:t(2)};return"function"==typeof Symbol&&(e[Symbol.iterator]=function(){return this}),e;function t(t){return function(e){return function(t){if(o)throw new TypeError("Generator is already executing.");for(;s;)try{if(o=1,i&&(u=2&t[0]?i.return:t[0]?i.throw||((u=i.return)&&u.call(i),0):i.next)&&!(u=u.call(i,t[1])).done)return u;switch(i=0,u&&(t=[2&t[0],u.value]),t[0]){case 0:case 1:u=t;break;case 4:return s.label++,{value:t[1],done:!1};case 5:s.label++,i=t[1],t=[0];continue;case 7:t=s.ops.pop(),s.trys.pop();continue;default:if(!(u=0<(u=s.trys).length&&u[u.length-1])&&(6===t[0]||2===t[0])){s=0;continue}if(3===t[0]&&(!u||t[1]>u[0]&&t[1]<u[3])){s.label=t[1];break}if(6===t[0]&&s.label<u[1]){s.label=u[1],u=t;break}if(u&&s.label<u[2]){s.label=u[2],s.ops.push(t);break}u[2]&&s.ops.pop(),s.trys.pop();continue}t=r.call(n,s)}catch(e){t=[6,e],i=0}finally{o=u=0}if(5&t[0])throw t[1];return{value:t[0]?t[1]:void 0,done:!0}}([t,e])}}};Object.defineProperty(t,"__esModule",{value:!0});var u=i("./DefaultHttpClient"),v=i("./ILogger"),a=i("./ITransport"),c=i("./LongPollingTransport"),n=i("./ServerSentEventsTransport"),p=i("./Utils"),o=i("./WebSocketTransport"),s=(l.prototype.start=function(n){return r(this,void 0,void 0,function(){var t;return g(this,function(e){switch(e.label){case 0:return n=n||a.TransferFormat.Binary,p.Arg.isIn(n,a.TransferFormat,"transferFormat"),this.logger.log(v.LogLevel.Debug,"Starting connection with transfer format '"+a.TransferFormat[n]+"'."),"Disconnected"!==this.connectionState?[2,Promise.reject(new Error("Cannot start an HttpConnection that is not in the 'Disconnected' state."))]:(this.connectionState="Connecting",this.startInternalPromise=this.startInternal(n),[4,this.startInternalPromise]);case 1:return e.sent(),"Disconnecting"!==this.connectionState?[3,3]:(t="Failed to start the HttpConnection before stop() was called.",this.logger.log(v.LogLevel.Error,t),[4,this.stopPromise]);case 2:return e.sent(),[2,Promise.reject(new Error(t))];case 3:if("Connected"!==this.connectionState)return t="HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!",this.logger.log(v.LogLevel.Error,t),[2,Promise.reject(new Error(t))];e.label=4;case 4:return this.connectionStarted=!0,[2]}})})},l.prototype.send=function(e){return"Connected"!==this.connectionState?Promise.reject(new Error("Cannot send data if the connection is not in the 'Connected' State.")):(this.sendQueue||(this.sendQueue=new f(this.transport)),this.sendQueue.send(e))},l.prototype.stop=function(n){return r(this,void 0,void 0,function(){var t=this;return g(this,function(e){switch(e.label){case 0:return"Disconnected"===this.connectionState?(this.logger.log(v.LogLevel.Debug,"Call to HttpConnection.stop("+n+") ignored because the connection is already in the disconnected state."),[2,Promise.resolve()]):"Disconnecting"===this.connectionState?(this.logger.log(v.LogLevel.Debug,"Call to HttpConnection.stop("+n+") ignored because the connection is already in the disconnecting state."),[2,this.stopPromise]):(this.connectionState="Disconnecting",this.stopPromise=new Promise(function(e){t.stopPromiseResolver=e}),[4,this.stopInternal(n)]);case 1:return e.sent(),[4,this.stopPromise];case 2:return e.sent(),[2]}})})},l.prototype.stopInternal=function(n){return r(this,void 0,void 0,function(){var t;return g(this,function(e){switch(e.label){case 0:this.stopError=n,e.label=1;case 1:return e.trys.push([1,3,,4]),[4,this.startInternalPromise];case 2:case 3:return e.sent(),[3,4];case 4:if(!this.transport)return[3,9];e.label=5;case 5:return e.trys.push([5,7,,8]),[4,this.transport.stop()];case 6:return e.sent(),[3,8];case 7:return t=e.sent(),this.logger.log(v.LogLevel.Error,"HttpConnection.transport.stop() threw error '"+t+"'."),this.stopConnection(),[3,8];case 8:return this.transport=void 0,[3,10];case 9:this.logger.log(v.LogLevel.Debug,"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed."),this.stopConnection(),e.label=10;case 10:return[2]}})})},l.prototype.startInternal=function(s){return r(this,void 0,void 0,function(){var n,r,o,t,i,u;return g(this,function(e){switch(e.label){case 0:n=this.baseUrl,this.accessTokenFactory=this.options.accessTokenFactory,e.label=1;case 1:return e.trys.push([1,12,,13]),this.options.skipNegotiation?this.options.transport!==a.HttpTransportType.WebSockets?[3,3]:(this.transport=this.constructTransport(a.HttpTransportType.WebSockets),[4,this.startTransport(n,s)]):[3,5];case 2:return e.sent(),[3,4];case 3:throw new Error("Negotiation can only be skipped when using the WebSocket transport directly.");case 4:return[3,11];case 5:r=null,o=0,t=function(){var t;return g(this,function(e){switch(e.label){case 0:return[4,i.getNegotiationResponse(n)];case 1:if(r=e.sent(),"Disconnecting"===i.connectionState||"Disconnected"===i.connectionState)throw new Error("The connection was stopped during negotiation.");if(r.error)throw new Error(r.error);if(r.ProtocolVersion)throw new Error("Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.");return r.url&&(n=r.url),r.accessToken&&(t=r.accessToken,i.accessTokenFactory=function(){return t}),o++,[2]}})},i=this,e.label=6;case 6:return[5,t()];case 7:e.sent(),e.label=8;case 8:if(r.url&&o<100)return[3,6];e.label=9;case 9:if(100===o&&r.url)throw new Error("Negotiate redirection limit exceeded.");return[4,this.createTransport(n,this.options.transport,r,s)];case 10:e.sent(),e.label=11;case 11:return this.transport instanceof c.LongPollingTransport&&(this.features.inherentKeepAlive=!0),"Connecting"===this.connectionState&&(this.logger.log(v.LogLevel.Debug,"The HttpConnection connected successfully."),this.connectionState="Connected"),[3,13];case 12:return u=e.sent(),this.logger.log(v.LogLevel.Error,"Failed to start the connection: "+u),this.connectionState="Disconnected",this.transport=void 0,[2,Promise.reject(u)];case 13:return[2]}})})},l.prototype.getNegotiationResponse=function(l){return r(this,void 0,void 0,function(){var t,n,r,o,i,u,s,a,c;return g(this,function(e){switch(e.label){case 0:return t={},this.accessTokenFactory?[4,this.accessTokenFactory()]:[3,2];case 1:(n=e.sent())&&(t.Authorization="Bearer "+n),e.label=2;case 2:r=p.getUserAgentHeader(),o=r[0],i=r[1],t[o]=i,u=this.resolveNegotiateUrl(l),this.logger.log(v.LogLevel.Debug,"Sending negotiation request: "+u+"."),e.label=3;case 3:return e.trys.push([3,5,,6]),[4,this.httpClient.post(u,{content:"",headers:D({},t,this.options.headers),withCredentials:this.options.withCredentials})];case 4:return 200!==(s=e.sent()).statusCode?[2,Promise.reject(new Error("Unexpected status code returned from negotiate '"+s.statusCode+"'"))]:((!(a=JSON.parse(s.content)).negotiateVersion||a.negotiateVersion<1)&&(a.connectionToken=a.connectionId),[2,a]);case 5:return c=e.sent(),this.logger.log(v.LogLevel.Error,"Failed to complete negotiation with the server: "+c),[2,Promise.reject(c)];case 6:return[2]}})})},l.prototype.createConnectUrl=function(e,t){return t?e+(-1===e.indexOf("?")?"?":"&")+"id="+t:e},l.prototype.createTransport=function(p,f,h,d){return r(this,void 0,void 0,function(){var t,n,r,o,i,u,s,a,c,l,D;return g(this,function(e){switch(e.label){case 0:return t=this.createConnectUrl(p,h.connectionToken),this.isITransport(f)?(this.logger.log(v.LogLevel.Debug,"Connection was provided an instance of ITransport, using that directly."),this.transport=f,[4,this.startTransport(t,d)]):[3,2];case 1:return e.sent(),this.connectionId=h.connectionId,[2];case 2:n=[],r=h.availableTransports||[],o=h,i=0,u=r,e.label=3;case 3:return i<u.length?(s=u[i],(a=this.resolveTransportOrError(s,f,d))instanceof Error?(n.push(s.transport+" failed: "+a),[3,12]):[3,4]):[3,13];case 4:if(!this.isITransport(a))return[3,12];if(this.transport=a,o)return[3,9];e.label=5;case 5:return e.trys.push([5,7,,8]),[4,this.getNegotiationResponse(p)];case 6:return o=e.sent(),[3,8];case 7:return c=e.sent(),[2,Promise.reject(c)];case 8:t=this.createConnectUrl(p,o.connectionToken),e.label=9;case 9:return e.trys.push([9,11,,12]),[4,this.startTransport(t,d)];case 10:return e.sent(),this.connectionId=o.connectionId,[2];case 11:return l=e.sent(),this.logger.log(v.LogLevel.Error,"Failed to start the transport '"+s.transport+"': "+l),o=void 0,n.push(s.transport+" failed: "+l),"Connecting"!==this.connectionState?(D="Failed to select transport before stop() was called.",this.logger.log(v.LogLevel.Debug,D),[2,Promise.reject(new Error(D))]):[3,12];case 12:return i++,[3,3];case 13:return 0<n.length?[2,Promise.reject(new Error("Unable to connect to the server with any of the available transports. "+n.join(" ")))]:[2,Promise.reject(new Error("None of the transports supported by the client are supported by the server."))]}})})},l.prototype.constructTransport=function(e){switch(e){case a.HttpTransportType.WebSockets:if(!this.options.WebSocket)throw new Error("'WebSocket' is not supported in your environment.");return new o.WebSocketTransport(this.httpClient,this.accessTokenFactory,this.logger,this.options.logMessageContent||!1,this.options.WebSocket,this.options.headers||{});case a.HttpTransportType.ServerSentEvents:if(!this.options.EventSource)throw new Error("'EventSource' is not supported in your environment.");return new n.ServerSentEventsTransport(this.httpClient,this.accessTokenFactory,this.logger,this.options.logMessageContent||!1,this.options.EventSource,this.options.withCredentials,this.options.headers||{});case a.HttpTransportType.LongPolling:return new c.LongPollingTransport(this.httpClient,this.accessTokenFactory,this.logger,this.options.logMessageContent||!1,this.options.withCredentials,this.options.headers||{});default:throw new Error("Unknown transport: "+e+".")}},l.prototype.startTransport=function(e,t){var n=this;return this.transport.onreceive=this.onreceive,this.transport.onclose=function(e){return n.stopConnection(e)},this.transport.connect(e,t)},l.prototype.resolveTransportOrError=function(e,t,n){var r,o,i=a.HttpTransportType[e.transport];if(null==i)return this.logger.log(v.LogLevel.Debug,"Skipping transport '"+e.transport+"' because it is not supported by this client."),new Error("Skipping transport '"+e.transport+"' because it is not supported by this client.");if(o=i,(r=t)&&0==(o&r))return this.logger.log(v.LogLevel.Debug,"Skipping transport '"+a.HttpTransportType[i]+"' because it was disabled by the client."),new Error("'"+a.HttpTransportType[i]+"' is disabled by the client.");if(!(0<=e.transferFormats.map(function(e){return a.TransferFormat[e]}).indexOf(n)))return this.logger.log(v.LogLevel.Debug,"Skipping transport '"+a.HttpTransportType[i]+"' because it does not support the requested transfer format '"+a.TransferFormat[n]+"'."),new Error("'"+a.HttpTransportType[i]+"' does not support "+a.TransferFormat[n]+".");if(i===a.HttpTransportType.WebSockets&&!this.options.WebSocket||i===a.HttpTransportType.ServerSentEvents&&!this.options.EventSource)return this.logger.log(v.LogLevel.Debug,"Skipping transport '"+a.HttpTransportType[i]+"' because it is not supported in your environment.'"),new Error("'"+a.HttpTransportType[i]+"' is not supported in your environment.");this.logger.log(v.LogLevel.Debug,"Selecting transport '"+a.HttpTransportType[i]+"'.");try{return this.constructTransport(i)}catch(e){return e}},l.prototype.isITransport=function(e){return e&&"object"==typeof e&&"connect"in e},l.prototype.stopConnection=function(t){var n=this;if(this.logger.log(v.LogLevel.Debug,"HttpConnection.stopConnection("+t+") called while in state "+this.connectionState+"."),this.transport=void 0,t=this.stopError||t,this.stopError=void 0,"Disconnected"!==this.connectionState){if("Connecting"===this.connectionState)throw this.logger.log(v.LogLevel.Warning,"Call to HttpConnection.stopConnection("+t+") was ignored because the connection is still in the connecting state."),new Error("HttpConnection.stopConnection("+t+") was called while the connection is still in the connecting state.");if("Disconnecting"===this.connectionState&&this.stopPromiseResolver(),t?this.logger.log(v.LogLevel.Error,"Connection disconnected with error '"+t+"'."):this.logger.log(v.LogLevel.Information,"Connection disconnected."),this.sendQueue&&(this.sendQueue.stop().catch(function(e){n.logger.log(v.LogLevel.Error,"TransportSendQueue.stop() threw error '"+e+"'.")}),this.sendQueue=void 0),this.connectionId=void 0,this.connectionState="Disconnected",this.connectionStarted){this.connectionStarted=!1;try{this.onclose&&this.onclose(t)}catch(e){this.logger.log(v.LogLevel.Error,"HttpConnection.onclose("+t+") threw error '"+e+"'.")}}}else this.logger.log(v.LogLevel.Debug,"Call to HttpConnection.stopConnection("+t+") was ignored because the connection is already in the disconnected state.")},l.prototype.resolveUrl=function(e){if(0===e.lastIndexOf("https://",0)||0===e.lastIndexOf("http://",0))return e;if(!p.Platform.isBrowser||!window.document)throw new Error("Cannot resolve '"+e+"'.");var t=window.document.createElement("a");return t.href=e,this.logger.log(v.LogLevel.Information,"Normalizing '"+e+"' to '"+t.href+"'."),t.href},l.prototype.resolveNegotiateUrl=function(e){var t=e.indexOf("?"),n=e.substring(0,-1===t?e.length:t);return"/"!==n[n.length-1]&&(n+="/"),n+="negotiate",-1===(n+=-1===t?"":e.substring(t)).indexOf("negotiateVersion")&&(n+=-1===t?"?":"&",n+="negotiateVersion="+this.negotiateVersion),n},l);function l(e,t){if(void 0===t&&(t={}),this.features={},this.negotiateVersion=1,p.Arg.isRequired(e,"url"),this.logger=p.createLogger(t.logger),this.baseUrl=this.resolveUrl(e),(t=t||{}).logMessageContent=void 0!==t.logMessageContent&&t.logMessageContent,"boolean"!=typeof t.withCredentials&&void 0!==t.withCredentials)throw new Error("withCredentials option was not a 'boolean' or 'undefined' value");t.withCredentials=void 0===t.withCredentials||t.withCredentials;var n,r=null,o=null;p.Platform.isNode&&void 0!==i&&(r=(n="function"==typeof __webpack_require__?__non_webpack_require__:i)("ws"),o=n("eventsource")),p.Platform.isNode||"undefined"==typeof WebSocket||t.WebSocket?p.Platform.isNode&&!t.WebSocket&&r&&(t.WebSocket=r):t.WebSocket=WebSocket,p.Platform.isNode||"undefined"==typeof EventSource||t.EventSource?p.Platform.isNode&&!t.EventSource&&void 0!==o&&(t.EventSource=o):t.EventSource=EventSource,this.httpClient=t.httpClient||new u.DefaultHttpClient(this.logger),this.connectionState="Disconnected",this.connectionStarted=!1,this.options=t,this.onreceive=null,this.onclose=null}t.HttpConnection=s;var f=(h.prototype.send=function(e){return this.bufferData(e),this.transportResult||(this.transportResult=new d),this.transportResult.promise},h.prototype.stop=function(){return this.executing=!1,this.sendBufferedData.resolve(),this.sendLoopPromise},h.prototype.bufferData=function(e){if(this.buffer.length&&typeof this.buffer[0]!=typeof e)throw new Error("Expected data to be of type "+typeof this.buffer+" but was of type "+typeof e);this.buffer.push(e),this.sendBufferedData.resolve()},h.prototype.sendLoop=function(){return r(this,void 0,void 0,function(){var t,n,r;return g(this,function(e){switch(e.label){case 0:return[4,this.sendBufferedData.promise];case 1:if(e.sent(),!this.executing)return this.transportResult&&this.transportResult.reject("Connection stopped."),[3,6];this.sendBufferedData=new d,t=this.transportResult,this.transportResult=void 0,n="string"==typeof this.buffer[0]?this.buffer.join(""):h.concatBuffers(this.buffer),this.buffer.length=0,e.label=2;case 2:return e.trys.push([2,4,,5]),[4,this.transport.send(n)];case 3:return e.sent(),t.resolve(),[3,5];case 4:return r=e.sent(),t.reject(r),[3,5];case 5:return[3,0];case 6:return[2]}})})},h.concatBuffers=function(e){for(var t=e.map(function(e){return e.byteLength}).reduce(function(e,t){return e+t}),n=new Uint8Array(t),r=0,o=0,i=e;o<i.length;o++){var u=i[o];n.set(new Uint8Array(u),r),r+=u.byteLength}return n.buffer},h);function h(e){this.transport=e,this.buffer=[],this.executing=!0,this.sendBufferedData=new d,this.transportResult=new d,this.sendLoopPromise=this.sendLoop()}t.TransportSendQueue=f;var d=(m.prototype.resolve=function(){this.resolver()},m.prototype.reject=function(e){this.rejecter(e)},m);function m(){var r=this;this.promise=new Promise(function(e,t){var n=[e,t];return r.resolver=n[0],r.rejecter=n[1],n})}},{"./DefaultHttpClient":3,"./ILogger":13,"./ITransport":14,"./LongPollingTransport":17,"./ServerSentEventsTransport":18,"./Utils":21,"./WebSocketTransport":22}],10:[function(e,t,n){"use strict";var r=this&&this.__awaiter||function(i,u,s,a){return new(s=s||Promise)(function(e,t){function n(e){try{o(a.next(e))}catch(e){t(e)}}function r(e){try{o(a.throw(e))}catch(e){t(e)}}function o(t){t.done?e(t.value):new s(function(e){e(t.value)}).then(n,r)}o((a=a.apply(i,u||[])).next())})},a=this&&this.__generator||function(n,r){var o,i,u,s={label:0,sent:function(){if(1&u[0])throw u[1];return u[1]},trys:[],ops:[]},e={next:t(0),throw:t(1),return:t(2)};return"function"==typeof Symbol&&(e[Symbol.iterator]=function(){return this}),e;function t(t){return function(e){return function(t){if(o)throw new TypeError("Generator is already executing.");for(;s;)try{if(o=1,i&&(u=2&t[0]?i.return:t[0]?i.throw||((u=i.return)&&u.call(i),0):i.next)&&!(u=u.call(i,t[1])).done)return u;switch(i=0,u&&(t=[2&t[0],u.value]),t[0]){case 0:case 1:u=t;break;case 4:return s.label++,{value:t[1],done:!1};case 5:s.label++,i=t[1],t=[0];continue;case 7:t=s.ops.pop(),s.trys.pop();continue;default:if(!(u=0<(u=s.trys).length&&u[u.length-1])&&(6===t[0]||2===t[0])){s=0;continue}if(3===t[0]&&(!u||t[1]>u[0]&&t[1]<u[3])){s.label=t[1];break}if(6===t[0]&&s.label<u[1]){s.label=u[1],u=t;break}if(u&&s.label<u[2]){s.label=u[2],s.ops.push(t);break}u[2]&&s.ops.pop(),s.trys.pop();continue}t=r.call(n,s)}catch(e){t=[6,e],i=0}finally{o=u=0}if(5&t[0])throw t[1];return{value:t[0]?t[1]:void 0,done:!0}}([t,e])}}};Object.defineProperty(n,"__esModule",{value:!0});var c,o,i=e("./HandshakeProtocol"),l=e("./IHubProtocol"),D=e("./ILogger"),p=e("./Subject"),u=e("./Utils");(o=c=n.HubConnectionState||(n.HubConnectionState={})).Disconnected="Disconnected",o.Connecting="Connecting",o.Connected="Connected",o.Disconnecting="Disconnecting",o.Reconnecting="Reconnecting";var s=(f.create=function(e,t,n,r){return new f(e,t,n,r)},Object.defineProperty(f.prototype,"state",{get:function(){return this.connectionState},enumerable:!0,configurable:!0}),Object.defineProperty(f.prototype,"connectionId",{get:function(){return this.connection&&this.connection.connectionId||null},enumerable:!0,configurable:!0}),Object.defineProperty(f.prototype,"baseUrl",{get:function(){return this.connection.baseUrl||""},set:function(e){if(this.connectionState!==c.Disconnected&&this.connectionState!==c.Reconnecting)throw new Error("The HubConnection must be in the Disconnected or Reconnecting state to change the url.");if(!e)throw new Error("The HubConnection url must be a valid url.");this.connection.baseUrl=e},enumerable:!0,configurable:!0}),f.prototype.start=function(){return this.startPromise=this.startWithStateTransitions(),this.startPromise},f.prototype.startWithStateTransitions=function(){return r(this,void 0,void 0,function(){var t;return a(this,function(e){switch(e.label){case 0:if(this.connectionState!==c.Disconnected)return[2,Promise.reject(new Error("Cannot start a HubConnection that is not in the 'Disconnected' state."))];this.connectionState=c.Connecting,this.logger.log(D.LogLevel.Debug,"Starting HubConnection."),e.label=1;case 1:return e.trys.push([1,3,,4]),[4,this.startInternal()];case 2:return e.sent(),this.connectionState=c.Connected,this.connectionStarted=!0,this.logger.log(D.LogLevel.Debug,"HubConnection connected successfully."),[3,4];case 3:return t=e.sent(),this.connectionState=c.Disconnected,this.logger.log(D.LogLevel.Debug,"HubConnection failed to start successfully because of error '"+t+"'."),[2,Promise.reject(t)];case 4:return[2]}})})},f.prototype.startInternal=function(){return r(this,void 0,void 0,function(){var t,n,r,o=this;return a(this,function(e){switch(e.label){case 0:return this.stopDuringStartError=void 0,this.receivedHandshakeResponse=!1,t=new Promise(function(e,t){o.handshakeResolver=e,o.handshakeRejecter=t}),[4,this.connection.start(this.protocol.transferFormat)];case 1:e.sent(),e.label=2;case 2:return e.trys.push([2,5,,7]),n={protocol:this.protocol.name,version:this.protocol.version},this.logger.log(D.LogLevel.Debug,"Sending handshake request."),[4,this.sendMessage(this.handshakeProtocol.writeHandshakeRequest(n))];case 3:return e.sent(),this.logger.log(D.LogLevel.Information,"Using HubProtocol '"+this.protocol.name+"'."),this.cleanupTimeout(),this.resetTimeoutPeriod(),this.resetKeepAliveInterval(),[4,t];case 4:if(e.sent(),this.stopDuringStartError)throw this.stopDuringStartError;return[3,7];case 5:return r=e.sent(),this.logger.log(D.LogLevel.Debug,"Hub handshake failed with error '"+r+"' during start(). Stopping HubConnection."),this.cleanupTimeout(),this.cleanupPingTimer(),[4,this.connection.stop(r)];case 6:throw e.sent(),r;case 7:return[2]}})})},f.prototype.stop=function(){return r(this,void 0,void 0,function(){var t;return a(this,function(e){switch(e.label){case 0:return t=this.startPromise,this.stopPromise=this.stopInternal(),[4,this.stopPromise];case 1:e.sent(),e.label=2;case 2:return e.trys.push([2,4,,5]),[4,t];case 3:case 4:return e.sent(),[3,5];case 5:return[2]}})})},f.prototype.stopInternal=function(e){return this.connectionState===c.Disconnected?(this.logger.log(D.LogLevel.Debug,"Call to HubConnection.stop("+e+") ignored because it is already in the disconnected state."),Promise.resolve()):this.connectionState===c.Disconnecting?(this.logger.log(D.LogLevel.Debug,"Call to HttpConnection.stop("+e+") ignored because the connection is already in the disconnecting state."),this.stopPromise):(this.connectionState=c.Disconnecting,this.logger.log(D.LogLevel.Debug,"Stopping HubConnection."),this.reconnectDelayHandle?(this.logger.log(D.LogLevel.Debug,"Connection stopped during reconnect delay. Done reconnecting."),clearTimeout(this.reconnectDelayHandle),this.reconnectDelayHandle=void 0,this.completeClose(),Promise.resolve()):(this.cleanupTimeout(),this.cleanupPingTimer(),this.stopDuringStartError=e||new Error("The connection was stopped before the hub handshake could complete."),this.connection.stop(e)))},f.prototype.stream=function(e){for(var t=this,n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];var o,i=this.replaceStreamingParams(n),u=i[0],s=i[1],a=this.createStreamInvocation(e,n,s),c=new p.Subject;return c.cancelCallback=function(){var e=t.createCancelInvocation(a.invocationId);return delete t.callbacks[a.invocationId],o.then(function(){return t.sendWithProtocol(e)})},this.callbacks[a.invocationId]=function(e,t){t?c.error(t):e&&(e.type===l.MessageType.Completion?e.error?c.error(new Error(e.error)):c.complete():c.next(e.item))},o=this.sendWithProtocol(a).catch(function(e){c.error(e),delete t.callbacks[a.invocationId]}),this.launchStreams(u,o),c},f.prototype.sendMessage=function(e){return this.resetKeepAliveInterval(),this.connection.send(e)},f.prototype.sendWithProtocol=function(e){return this.sendMessage(this.protocol.writeMessage(e))},f.prototype.send=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var r=this.replaceStreamingParams(t),o=r[0],i=r[1],u=this.sendWithProtocol(this.createInvocation(e,t,!0,i));return this.launchStreams(o,u),u},f.prototype.invoke=function(e){for(var t=this,n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];var o=this.replaceStreamingParams(n),i=o[0],u=o[1],s=this.createInvocation(e,n,!1,u);return new Promise(function(n,r){t.callbacks[s.invocationId]=function(e,t){t?r(t):e&&(e.type===l.MessageType.Completion?e.error?r(new Error(e.error)):n(e.result):r(new Error("Unexpected message type: "+e.type)))};var e=t.sendWithProtocol(s).catch(function(e){r(e),delete t.callbacks[s.invocationId]});t.launchStreams(i,e)})},f.prototype.on=function(e,t){e&&t&&(e=e.toLowerCase(),this.methods[e]||(this.methods[e]=[]),-1===this.methods[e].indexOf(t)&&this.methods[e].push(t))},f.prototype.off=function(e,t){var n,r;e&&(e=e.toLowerCase(),(n=this.methods[e])&&(t?-1!==(r=n.indexOf(t))&&(n.splice(r,1),0===n.length&&delete this.methods[e]):delete this.methods[e]))},f.prototype.onclose=function(e){e&&this.closedCallbacks.push(e)},f.prototype.onreconnecting=function(e){e&&this.reconnectingCallbacks.push(e)},f.prototype.onreconnected=function(e){e&&this.reconnectedCallbacks.push(e)},f.prototype.processIncomingData=function(e){if(this.cleanupTimeout(),this.receivedHandshakeResponse||(e=this.processHandshakeResponse(e),this.receivedHandshakeResponse=!0),e)for(var t=0,n=this.protocol.parseMessages(e,this.logger);t<n.length;t++){var r=n[t];switch(r.type){case l.MessageType.Invocation:this.invokeClientMethod(r);break;case l.MessageType.StreamItem:case l.MessageType.Completion:var o=this.callbacks[r.invocationId];o&&(r.type===l.MessageType.Completion&&delete this.callbacks[r.invocationId],o(r));break;case l.MessageType.Ping:break;case l.MessageType.Close:this.logger.log(D.LogLevel.Information,"Close message received from server.");var i=r.error?new Error("Server returned an error on close: "+r.error):void 0;!0===r.allowReconnect?this.connection.stop(i):this.stopPromise=this.stopInternal(i);break;default:this.logger.log(D.LogLevel.Warning,"Invalid message type: "+r.type+".")}}this.resetTimeoutPeriod()},f.prototype.processHandshakeResponse=function(e){var t,n,r;try{r=(t=this.handshakeProtocol.parseHandshakeResponse(e))[0],n=t[1]}catch(e){var o="Error parsing handshake response: "+e;this.logger.log(D.LogLevel.Error,o);var i=new Error(o);throw this.handshakeRejecter(i),i}if(n.error)throw o="Server returned handshake error: "+n.error,this.logger.log(D.LogLevel.Error,o),i=new Error(o),this.handshakeRejecter(i),i;return this.logger.log(D.LogLevel.Debug,"Server handshake complete."),this.handshakeResolver(),r},f.prototype.resetKeepAliveInterval=function(){var e=this;this.connection.features.inherentKeepAlive||(this.cleanupPingTimer(),this.pingServerHandle=setTimeout(function(){return r(e,void 0,void 0,function(){return a(this,function(e){switch(e.label){case 0:if(this.connectionState!==c.Connected)return[3,4];e.label=1;case 1:return e.trys.push([1,3,,4]),[4,this.sendMessage(this.cachedPingMessage)];case 2:return e.sent(),[3,4];case 3:return e.sent(),this.cleanupPingTimer(),[3,4];case 4:return[2]}})})},this.keepAliveIntervalInMilliseconds))},f.prototype.resetTimeoutPeriod=function(){var e=this;this.connection.features&&this.connection.features.inherentKeepAlive||(this.timeoutHandle=setTimeout(function(){return e.serverTimeout()},this.serverTimeoutInMilliseconds))},f.prototype.serverTimeout=function(){this.connection.stop(new Error("Server timeout elapsed without receiving a message from the server."))},f.prototype.invokeClientMethod=function(t){var e,n=this,r=this.methods[t.target.toLowerCase()];if(r){try{r.forEach(function(e){return e.apply(n,t.arguments)})}catch(e){this.logger.log(D.LogLevel.Error,"A callback for the method "+t.target.toLowerCase()+" threw error '"+e+"'.")}t.invocationId&&(e="Server requested a response, which is not supported in this version of the client.",this.logger.log(D.LogLevel.Error,e),this.stopPromise=this.stopInternal(new Error(e)))}else this.logger.log(D.LogLevel.Warning,"No client method with the name '"+t.target+"' found.")},f.prototype.connectionClosed=function(e){this.logger.log(D.LogLevel.Debug,"HubConnection.connectionClosed("+e+") called while in state "+this.connectionState+"."),this.stopDuringStartError=this.stopDuringStartError||e||new Error("The underlying connection was closed before the hub handshake could complete."),this.handshakeResolver&&this.handshakeResolver(),this.cancelCallbacksWithError(e||new Error("Invocation canceled due to the underlying connection being closed.")),this.cleanupTimeout(),this.cleanupPingTimer(),this.connectionState===c.Disconnecting?this.completeClose(e):this.connectionState===c.Connected&&this.reconnectPolicy?this.reconnect(e):this.connectionState===c.Connected&&this.completeClose(e)},f.prototype.completeClose=function(t){var n=this;if(this.connectionStarted){this.connectionState=c.Disconnected,this.connectionStarted=!1;try{this.closedCallbacks.forEach(function(e){return e.apply(n,[t])})}catch(e){this.logger.log(D.LogLevel.Error,"An onclose callback called with error '"+t+"' threw error '"+e+"'.")}}},f.prototype.reconnect=function(s){return r(this,void 0,void 0,function(){var t,n,r,o,i,u=this;return a(this,function(e){switch(e.label){case 0:if(t=Date.now(),r=void(n=0)!==s?s:new Error("Attempting to reconnect due to a unknown error."),null===(o=this.getNextRetryDelay(n++,0,r)))return this.logger.log(D.LogLevel.Debug,"Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt."),this.completeClose(s),[2];if(this.connectionState=c.Reconnecting,s?this.logger.log(D.LogLevel.Information,"Connection reconnecting because of error '"+s+"'."):this.logger.log(D.LogLevel.Information,"Connection reconnecting."),this.onreconnecting){try{this.reconnectingCallbacks.forEach(function(e){return e.apply(u,[s])})}catch(e){this.logger.log(D.LogLevel.Error,"An onreconnecting callback called with error '"+s+"' threw error '"+e+"'.")}if(this.connectionState!==c.Reconnecting)return this.logger.log(D.LogLevel.Debug,"Connection left the reconnecting state in onreconnecting callback. Done reconnecting."),[2]}e.label=1;case 1:return null===o?[3,7]:(this.logger.log(D.LogLevel.Information,"Reconnect attempt number "+n+" will start in "+o+" ms."),[4,new Promise(function(e){u.reconnectDelayHandle=setTimeout(e,o)})]);case 2:if(e.sent(),this.reconnectDelayHandle=void 0,this.connectionState!==c.Reconnecting)return this.logger.log(D.LogLevel.Debug,"Connection left the reconnecting state during reconnect delay. Done reconnecting."),[2];e.label=3;case 3:return e.trys.push([3,5,,6]),[4,this.startInternal()];case 4:if(e.sent(),this.connectionState=c.Connected,this.logger.log(D.LogLevel.Information,"HubConnection reconnected successfully."),this.onreconnected)try{this.reconnectedCallbacks.forEach(function(e){return e.apply(u,[u.connection.connectionId])})}catch(e){this.logger.log(D.LogLevel.Error,"An onreconnected callback called with connectionId '"+this.connection.connectionId+"; threw error '"+e+"'.")}return[2];case 5:return i=e.sent(),this.logger.log(D.LogLevel.Information,"Reconnect attempt failed because of error '"+i+"'."),this.connectionState!==c.Reconnecting?(this.logger.log(D.LogLevel.Debug,"Connection left the reconnecting state during reconnect attempt. Done reconnecting."),[2]):(r=i instanceof Error?i:new Error(i.toString()),o=this.getNextRetryDelay(n++,Date.now()-t,r),[3,6]);case 6:return[3,1];case 7:return this.logger.log(D.LogLevel.Information,"Reconnect retries have been exhausted after "+(Date.now()-t)+" ms and "+n+" failed attempts. Connection disconnecting."),this.completeClose(),[2]}})})},f.prototype.getNextRetryDelay=function(t,n,e){try{return this.reconnectPolicy.nextRetryDelayInMilliseconds({elapsedMilliseconds:n,previousRetryCount:t,retryReason:e})}catch(e){return this.logger.log(D.LogLevel.Error,"IRetryPolicy.nextRetryDelayInMilliseconds("+t+", "+n+") threw error '"+e+"'."),null}},f.prototype.cancelCallbacksWithError=function(t){var n=this.callbacks;this.callbacks={},Object.keys(n).forEach(function(e){(0,n[e])(null,t)})},f.prototype.cleanupPingTimer=function(){this.pingServerHandle&&clearTimeout(this.pingServerHandle)},f.prototype.cleanupTimeout=function(){this.timeoutHandle&&clearTimeout(this.timeoutHandle)},f.prototype.createInvocation=function(e,t,n,r){if(n)return 0!==r.length?{arguments:t,streamIds:r,target:e,type:l.MessageType.Invocation}:{arguments:t,target:e,type:l.MessageType.Invocation};var o=this.invocationId;return this.invocationId++,0!==r.length?{arguments:t,invocationId:o.toString(),streamIds:r,target:e,type:l.MessageType.Invocation}:{arguments:t,invocationId:o.toString(),target:e,type:l.MessageType.Invocation}},f.prototype.launchStreams=function(e,r){var o=this;if(0!==e.length){r=r||Promise.resolve();var t=function(n){e[n].subscribe({complete:function(){r=r.then(function(){return o.sendWithProtocol(o.createCompletionMessage(n))})},error:function(e){var t=e instanceof Error?e.message:e&&e.toString?e.toString():"Unknown error";r=r.then(function(){return o.sendWithProtocol(o.createCompletionMessage(n,t))})},next:function(e){r=r.then(function(){return o.sendWithProtocol(o.createStreamItemMessage(n,e))})}})};for(var n in e)t(n)}},f.prototype.replaceStreamingParams=function(e){for(var t=[],n=[],r=0;r<e.length;r++){var o,i=e[r];this.isObservable(i)&&(o=this.invocationId,this.invocationId++,t[o]=i,n.push(o.toString()),e.splice(r,1))}return[t,n]},f.prototype.isObservable=function(e){return e&&e.subscribe&&"function"==typeof e.subscribe},f.prototype.createStreamInvocation=function(e,t,n){var r=this.invocationId;return this.invocationId++,0!==n.length?{arguments:t,invocationId:r.toString(),streamIds:n,target:e,type:l.MessageType.StreamInvocation}:{arguments:t,invocationId:r.toString(),target:e,type:l.MessageType.StreamInvocation}},f.prototype.createCancelInvocation=function(e){return{invocationId:e,type:l.MessageType.CancelInvocation}},f.prototype.createStreamItemMessage=function(e,t){return{invocationId:e,item:t,type:l.MessageType.StreamItem}},f.prototype.createCompletionMessage=function(e,t,n){return t?{error:t,invocationId:e,type:l.MessageType.Completion}:{invocationId:e,result:n,type:l.MessageType.Completion}},f);function f(e,t,n,r){var o=this;u.Arg.isRequired(e,"connection"),u.Arg.isRequired(t,"logger"),u.Arg.isRequired(n,"protocol"),this.serverTimeoutInMilliseconds=3e4,this.keepAliveIntervalInMilliseconds=15e3,this.logger=t,this.protocol=n,this.connection=e,this.reconnectPolicy=r,this.handshakeProtocol=new i.HandshakeProtocol,this.connection.onreceive=function(e){return o.processIncomingData(e)},this.connection.onclose=function(e){return o.connectionClosed(e)},this.callbacks={},this.methods={},this.closedCallbacks=[],this.reconnectingCallbacks=[],this.reconnectedCallbacks=[],this.invocationId=0,this.receivedHandshakeResponse=!1,this.connectionState=c.Disconnected,this.connectionStarted=!1,this.cachedPingMessage=this.protocol.writeMessage({type:l.MessageType.Ping})}n.HubConnection=s},{"./HandshakeProtocol":7,"./IHubProtocol":12,"./ILogger":13,"./Subject":19,"./Utils":21}],11:[function(e,t,n){"use strict";var r=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e};Object.defineProperty(n,"__esModule",{value:!0});var o=e("./DefaultReconnectPolicy"),i=e("./HttpConnection"),u=e("./HubConnection"),s=e("./ILogger"),a=e("./JsonHubProtocol"),c=e("./Loggers"),l=e("./Utils"),D={trace:s.LogLevel.Trace,debug:s.LogLevel.Debug,info:s.LogLevel.Information,information:s.LogLevel.Information,warn:s.LogLevel.Warning,warning:s.LogLevel.Warning,error:s.LogLevel.Error,critical:s.LogLevel.Critical,none:s.LogLevel.None};var p=(f.prototype.configureLogging=function(e){var t;return l.Arg.isRequired(e,"logging"),void 0!==e.log?this.logger=e:"string"==typeof e?(t=function(e){var t=D[e.toLowerCase()];if(void 0!==t)return t;throw new Error("Unknown log level: "+e)}(e),this.logger=new l.ConsoleLogger(t)):this.logger=new l.ConsoleLogger(e),this},f.prototype.withUrl=function(e,t){return l.Arg.isRequired(e,"url"),this.url=e,this.httpConnectionOptions=r({},this.httpConnectionOptions,"object"==typeof t?t:{transport:t}),this},f.prototype.withHubProtocol=function(e){return l.Arg.isRequired(e,"protocol"),this.protocol=e,this},f.prototype.withAutomaticReconnect=function(e){if(this.reconnectPolicy)throw new Error("A reconnectPolicy has already been set.");return e?Array.isArray(e)?this.reconnectPolicy=new o.DefaultReconnectPolicy(e):this.reconnectPolicy=e:this.reconnectPolicy=new o.DefaultReconnectPolicy,this},f.prototype.build=function(){var e=this.httpConnectionOptions||{};if(void 0===e.logger&&(e.logger=this.logger),!this.url)throw new Error("The 'HubConnectionBuilder.withUrl' method must be called before building the connection.");var t=new i.HttpConnection(this.url,e);return u.HubConnection.create(t,this.logger||c.NullLogger.instance,this.protocol||new a.JsonHubProtocol,this.reconnectPolicy)},f);function f(){}n.HubConnectionBuilder=p},{"./DefaultReconnectPolicy":4,"./HttpConnection":9,"./HubConnection":10,"./ILogger":13,"./JsonHubProtocol":15,"./Loggers":16,"./Utils":21}],12:[function(e,t,n){"use strict";var r;Object.defineProperty(n,"__esModule",{value:!0}),(r=n.MessageType||(n.MessageType={}))[r.Invocation=1]="Invocation",r[r.StreamItem=2]="StreamItem",r[r.Completion=3]="Completion",r[r.StreamInvocation=4]="StreamInvocation",r[r.CancelInvocation=5]="CancelInvocation",r[r.Ping=6]="Ping",r[r.Close=7]="Close"},{}],13:[function(e,t,n){"use strict";var r;Object.defineProperty(n,"__esModule",{value:!0}),(r=n.LogLevel||(n.LogLevel={}))[r.Trace=0]="Trace",r[r.Debug=1]="Debug",r[r.Information=2]="Information",r[r.Warning=3]="Warning",r[r.Error=4]="Error",r[r.Critical=5]="Critical",r[r.None=6]="None"},{}],14:[function(e,t,n){"use strict";var r,o;Object.defineProperty(n,"__esModule",{value:!0}),(r=n.HttpTransportType||(n.HttpTransportType={}))[r.None=0]="None",r[r.WebSockets=1]="WebSockets",r[r.ServerSentEvents=2]="ServerSentEvents",r[r.LongPolling=4]="LongPolling",(o=n.TransferFormat||(n.TransferFormat={}))[o.Text=1]="Text",o[o.Binary=2]="Binary"},{}],15:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var s=e("./IHubProtocol"),a=e("./ILogger"),r=e("./ITransport"),c=e("./Loggers"),l=e("./TextMessageFormat"),o=(i.prototype.parseMessages=function(e,t){if("string"!=typeof e)throw new Error("Invalid input for JSON hub protocol. Expected a string.");if(!e)return[];null===t&&(t=c.NullLogger.instance);for(var n=[],r=0,o=l.TextMessageFormat.parse(e);r<o.length;r++){var i=o[r],u=JSON.parse(i);if("number"!=typeof u.type)throw new Error("Invalid payload.");switch(u.type){case s.MessageType.Invocation:this.isInvocationMessage(u);break;case s.MessageType.StreamItem:this.isStreamItemMessage(u);break;case s.MessageType.Completion:this.isCompletionMessage(u);break;case s.MessageType.Ping:case s.MessageType.Close:break;default:t.log(a.LogLevel.Information,"Unknown message type '"+u.type+"' ignored.");continue}n.push(u)}return n},i.prototype.writeMessage=function(e){return l.TextMessageFormat.write(JSON.stringify(e))},i.prototype.isInvocationMessage=function(e){this.assertNotEmptyString(e.target,"Invalid payload for Invocation message."),void 0!==e.invocationId&&this.assertNotEmptyString(e.invocationId,"Invalid payload for Invocation message.")},i.prototype.isStreamItemMessage=function(e){if(this.assertNotEmptyString(e.invocationId,"Invalid payload for StreamItem message."),void 0===e.item)throw new Error("Invalid payload for StreamItem message.")},i.prototype.isCompletionMessage=function(e){if(e.result&&e.error)throw new Error("Invalid payload for Completion message.");!e.result&&e.error&&this.assertNotEmptyString(e.error,"Invalid payload for Completion message."),this.assertNotEmptyString(e.invocationId,"Invalid payload for Completion message.")},i.prototype.assertNotEmptyString=function(e,t){if("string"!=typeof e||""===e)throw new Error(t)},i);function i(){this.name="json",this.version=1,this.transferFormat=r.TransferFormat.Text}n.JsonHubProtocol=o},{"./IHubProtocol":12,"./ILogger":13,"./ITransport":14,"./Loggers":16,"./TextMessageFormat":20}],16:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=(o.prototype.log=function(e,t){},o.instance=new o,o);function o(){}n.NullLogger=r},{}],17:[function(e,t,n){"use strict";var p=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},r=this&&this.__awaiter||function(i,u,s,a){return new(s=s||Promise)(function(e,t){function n(e){try{o(a.next(e))}catch(e){t(e)}}function r(e){try{o(a.throw(e))}catch(e){t(e)}}function o(t){t.done?e(t.value):new s(function(e){e(t.value)}).then(n,r)}o((a=a.apply(i,u||[])).next())})},f=this&&this.__generator||function(n,r){var o,i,u,s={label:0,sent:function(){if(1&u[0])throw u[1];return u[1]},trys:[],ops:[]},e={next:t(0),throw:t(1),return:t(2)};return"function"==typeof Symbol&&(e[Symbol.iterator]=function(){return this}),e;function t(t){return function(e){return function(t){if(o)throw new TypeError("Generator is already executing.");for(;s;)try{if(o=1,i&&(u=2&t[0]?i.return:t[0]?i.throw||((u=i.return)&&u.call(i),0):i.next)&&!(u=u.call(i,t[1])).done)return u;switch(i=0,u&&(t=[2&t[0],u.value]),t[0]){case 0:case 1:u=t;break;case 4:return s.label++,{value:t[1],done:!1};case 5:s.label++,i=t[1],t=[0];continue;case 7:t=s.ops.pop(),s.trys.pop();continue;default:if(!(u=0<(u=s.trys).length&&u[u.length-1])&&(6===t[0]||2===t[0])){s=0;continue}if(3===t[0]&&(!u||t[1]>u[0]&&t[1]<u[3])){s.label=t[1];break}if(6===t[0]&&s.label<u[1]){s.label=u[1],u=t;break}if(u&&s.label<u[2]){s.label=u[2],s.ops.push(t);break}u[2]&&s.ops.pop(),s.trys.pop();continue}t=r.call(n,s)}catch(e){t=[6,e],i=0}finally{o=u=0}if(5&t[0])throw t[1];return{value:t[0]?t[1]:void 0,done:!0}}([t,e])}}};Object.defineProperty(n,"__esModule",{value:!0});var u=e("./AbortController"),h=e("./Errors"),d=e("./ILogger"),g=e("./ITransport"),v=e("./Utils"),o=(Object.defineProperty(i.prototype,"pollAborted",{get:function(){return this.pollAbort.aborted},enumerable:!0,configurable:!0}),i.prototype.connect=function(l,D){return r(this,void 0,void 0,function(){var t,n,r,o,i,u,s,a,c;return f(this,function(e){switch(e.label){case 0:if(v.Arg.isRequired(l,"url"),v.Arg.isRequired(D,"transferFormat"),v.Arg.isIn(D,g.TransferFormat,"transferFormat"),this.url=l,this.logger.log(d.LogLevel.Trace,"(LongPolling transport) Connecting."),D===g.TransferFormat.Binary&&"undefined"!=typeof XMLHttpRequest&&"string"!=typeof(new XMLHttpRequest).responseType)throw new Error("Binary protocols over XmlHttpRequest not implementing advanced features are not supported.");return n=v.getUserAgentHeader(),r=n[0],o=n[1],i=p(((t={})[r]=o,t),this.headers),u={abortSignal:this.pollAbort.signal,headers:i,timeout:1e5,withCredentials:this.withCredentials},D===g.TransferFormat.Binary&&(u.responseType="arraybuffer"),[4,this.getAccessToken()];case 1:return s=e.sent(),this.updateHeaderToken(u,s),a=l+"&_="+Date.now(),this.logger.log(d.LogLevel.Trace,"(LongPolling transport) polling: "+a+"."),[4,this.httpClient.get(a,u)];case 2:return 200!==(c=e.sent()).statusCode?(this.logger.log(d.LogLevel.Error,"(LongPolling transport) Unexpected response code: "+c.statusCode+"."),this.closeError=new h.HttpError(c.statusText||"",c.statusCode),this.running=!1):this.running=!0,this.receiving=this.poll(this.url,u),[2]}})})},i.prototype.getAccessToken=function(){return r(this,void 0,void 0,function(){return f(this,function(e){switch(e.label){case 0:return this.accessTokenFactory?[4,this.accessTokenFactory()]:[3,2];case 1:return[2,e.sent()];case 2:return[2,null]}})})},i.prototype.updateHeaderToken=function(e,t){e.headers||(e.headers={}),t?e.headers.Authorization="Bearer "+t:e.headers.Authorization&&delete e.headers.Authorization},i.prototype.poll=function(i,u){return r(this,void 0,void 0,function(){var t,n,r,o;return f(this,function(e){switch(e.label){case 0:e.trys.push([0,,8,9]),e.label=1;case 1:return this.running?[4,this.getAccessToken()]:[3,7];case 2:t=e.sent(),this.updateHeaderToken(u,t),e.label=3;case 3:return e.trys.push([3,5,,6]),n=i+"&_="+Date.now(),this.logger.log(d.LogLevel.Trace,"(LongPolling transport) polling: "+n+"."),[4,this.httpClient.get(n,u)];case 4:return 204===(r=e.sent()).statusCode?(this.logger.log(d.LogLevel.Information,"(LongPolling transport) Poll terminated by server."),this.running=!1):200!==r.statusCode?(this.logger.log(d.LogLevel.Error,"(LongPolling transport) Unexpected response code: "+r.statusCode+"."),this.closeError=new h.HttpError(r.statusText||"",r.statusCode),this.running=!1):r.content?(this.logger.log(d.LogLevel.Trace,"(LongPolling transport) data received. "+v.getDataDetail(r.content,this.logMessageContent)+"."),this.onreceive&&this.onreceive(r.content)):this.logger.log(d.LogLevel.Trace,"(LongPolling transport) Poll timed out, reissuing."),[3,6];case 5:return o=e.sent(),this.running?o instanceof h.TimeoutError?this.logger.log(d.LogLevel.Trace,"(LongPolling transport) Poll timed out, reissuing."):(this.closeError=o,this.running=!1):this.logger.log(d.LogLevel.Trace,"(LongPolling transport) Poll errored after shutdown: "+o.message),[3,6];case 6:return[3,1];case 7:return[3,9];case 8:return this.logger.log(d.LogLevel.Trace,"(LongPolling transport) Polling complete."),this.pollAborted||this.raiseOnClose(),[7];case 9:return[2]}})})},i.prototype.send=function(t){return r(this,void 0,void 0,function(){return f(this,function(e){return this.running?[2,v.sendMessage(this.logger,"LongPolling",this.httpClient,this.url,this.accessTokenFactory,t,this.logMessageContent,this.withCredentials,this.headers)]:[2,Promise.reject(new Error("Cannot send until the transport is connected"))]})})},i.prototype.stop=function(){return r(this,void 0,void 0,function(){var t,n,r,o,i,u;return f(this,function(e){switch(e.label){case 0:this.logger.log(d.LogLevel.Trace,"(LongPolling transport) Stopping polling."),this.running=!1,this.pollAbort.abort(),e.label=1;case 1:return e.trys.push([1,,5,6]),[4,this.receiving];case 2:return e.sent(),this.logger.log(d.LogLevel.Trace,"(LongPolling transport) sending DELETE request to "+this.url+"."),t={},n=v.getUserAgentHeader(),r=n[0],o=n[1],t[r]=o,i={headers:p({},t,this.headers),withCredentials:this.withCredentials},[4,this.getAccessToken()];case 3:return u=e.sent(),this.updateHeaderToken(i,u),[4,this.httpClient.delete(this.url,i)];case 4:return e.sent(),this.logger.log(d.LogLevel.Trace,"(LongPolling transport) DELETE request sent."),[3,6];case 5:return this.logger.log(d.LogLevel.Trace,"(LongPolling transport) Stop finished."),this.raiseOnClose(),[7];case 6:return[2]}})})},i.prototype.raiseOnClose=function(){var e;this.onclose&&(e="(LongPolling transport) Firing onclose event.",this.closeError&&(e+=" Error: "+this.closeError),this.logger.log(d.LogLevel.Trace,e),this.onclose(this.closeError))},i);function i(e,t,n,r,o,i){this.httpClient=e,this.accessTokenFactory=t,this.logger=n,this.pollAbort=new u.AbortController,this.logMessageContent=r,this.withCredentials=o,this.headers=i,this.running=!1,this.onreceive=null,this.onclose=null}n.LongPollingTransport=o},{"./AbortController":2,"./Errors":5,"./ILogger":13,"./ITransport":14,"./Utils":21}],18:[function(e,t,n){"use strict";var p=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},r=this&&this.__awaiter||function(i,u,s,a){return new(s=s||Promise)(function(e,t){function n(e){try{o(a.next(e))}catch(e){t(e)}}function r(e){try{o(a.throw(e))}catch(e){t(e)}}function o(t){t.done?e(t.value):new s(function(e){e(t.value)}).then(n,r)}o((a=a.apply(i,u||[])).next())})},o=this&&this.__generator||function(n,r){var o,i,u,s={label:0,sent:function(){if(1&u[0])throw u[1];return u[1]},trys:[],ops:[]},e={next:t(0),throw:t(1),return:t(2)};return"function"==typeof Symbol&&(e[Symbol.iterator]=function(){return this}),e;function t(t){return function(e){return function(t){if(o)throw new TypeError("Generator is already executing.");for(;s;)try{if(o=1,i&&(u=2&t[0]?i.return:t[0]?i.throw||((u=i.return)&&u.call(i),0):i.next)&&!(u=u.call(i,t[1])).done)return u;switch(i=0,u&&(t=[2&t[0],u.value]),t[0]){case 0:case 1:u=t;break;case 4:return s.label++,{value:t[1],done:!1};case 5:s.label++,i=t[1],t=[0];continue;case 7:t=s.ops.pop(),s.trys.pop();continue;default:if(!(u=0<(u=s.trys).length&&u[u.length-1])&&(6===t[0]||2===t[0])){s=0;continue}if(3===t[0]&&(!u||t[1]>u[0]&&t[1]<u[3])){s.label=t[1];break}if(6===t[0]&&s.label<u[1]){s.label=u[1],u=t;break}if(u&&s.label<u[2]){s.label=u[2],s.ops.push(t);break}u[2]&&s.ops.pop(),s.trys.pop();continue}t=r.call(n,s)}catch(e){t=[6,e],i=0}finally{o=u=0}if(5&t[0])throw t[1];return{value:t[0]?t[1]:void 0,done:!0}}([t,e])}}};Object.defineProperty(n,"__esModule",{value:!0});var f=e("./ILogger"),h=e("./ITransport"),d=e("./Utils"),i=(u.prototype.connect=function(l,D){return r(this,void 0,void 0,function(){var t,c=this;return o(this,function(e){switch(e.label){case 0:return d.Arg.isRequired(l,"url"),d.Arg.isRequired(D,"transferFormat"),d.Arg.isIn(D,h.TransferFormat,"transferFormat"),this.logger.log(f.LogLevel.Trace,"(SSE transport) Connecting."),this.url=l,this.accessTokenFactory?[4,this.accessTokenFactory()]:[3,2];case 1:(t=e.sent())&&(l+=(l.indexOf("?")<0?"?":"&")+"access_token="+encodeURIComponent(t)),e.label=2;case 2:return[2,new Promise(function(e,n){var r=!1;if(D===h.TransferFormat.Text){var t,o,i,u,s,a=d.Platform.isBrowser||d.Platform.isWebWorker?new c.eventSourceConstructor(l,{withCredentials:c.withCredentials}):(t=c.httpClient.getCookieString(l),(o={}).Cookie=t,u=(i=d.getUserAgentHeader())[0],s=i[1],o[u]=s,new c.eventSourceConstructor(l,{withCredentials:c.withCredentials,headers:p({},o,c.headers)}));try{a.onmessage=function(e){if(c.onreceive)try{c.logger.log(f.LogLevel.Trace,"(SSE transport) data received. "+d.getDataDetail(e.data,c.logMessageContent)+"."),c.onreceive(e.data)}catch(e){return void c.close(e)}},a.onerror=function(e){var t=new Error(e.data||"Error occurred");r?c.close(t):n(t)},a.onopen=function(){c.logger.log(f.LogLevel.Information,"SSE connected to "+c.url),c.eventSource=a,r=!0,e()}}catch(e){return void n(e)}}else n(new Error("The Server-Sent Events transport only supports the 'Text' transfer format"))})]}})})},u.prototype.send=function(t){return r(this,void 0,void 0,function(){return o(this,function(e){return this.eventSource?[2,d.sendMessage(this.logger,"SSE",this.httpClient,this.url,this.accessTokenFactory,t,this.logMessageContent,this.withCredentials,this.headers)]:[2,Promise.reject(new Error("Cannot send until the transport is connected"))]})})},u.prototype.stop=function(){return this.close(),Promise.resolve()},u.prototype.close=function(e){this.eventSource&&(this.eventSource.close(),this.eventSource=void 0,this.onclose&&this.onclose(e))},u);function u(e,t,n,r,o,i,u){this.httpClient=e,this.accessTokenFactory=t,this.logger=n,this.logMessageContent=r,this.withCredentials=i,this.eventSourceConstructor=o,this.headers=u,this.onreceive=null,this.onclose=null}n.ServerSentEventsTransport=i},{"./ILogger":13,"./ITransport":14,"./Utils":21}],19:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e("./Utils"),o=(i.prototype.next=function(e){for(var t=0,n=this.observers;t<n.length;t++)n[t].next(e)},i.prototype.error=function(e){for(var t=0,n=this.observers;t<n.length;t++){var r=n[t];r.error&&r.error(e)}},i.prototype.complete=function(){for(var e=0,t=this.observers;e<t.length;e++){var n=t[e];n.complete&&n.complete()}},i.prototype.subscribe=function(e){return this.observers.push(e),new r.SubjectSubscription(this,e)},i);function i(){this.observers=[]}n.Subject=o},{"./Utils":21}],20:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=(o.write=function(e){return""+e+o.RecordSeparator},o.parse=function(e){if(e[e.length-1]!==o.RecordSeparator)throw new Error("Message is incomplete.");var t=e.split(o.RecordSeparator);return t.pop(),t},o.RecordSeparatorCode=30,o.RecordSeparator=String.fromCharCode(o.RecordSeparatorCode),o);function o(){}n.TextMessageFormat=r},{}],21:[function(f,e,h){(function(t){"use strict";var m=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},e=this&&this.__awaiter||function(i,u,s,a){return new(s=s||Promise)(function(e,t){function n(e){try{o(a.next(e))}catch(e){t(e)}}function r(e){try{o(a.throw(e))}catch(e){t(e)}}function o(t){t.done?e(t.value):new s(function(e){e(t.value)}).then(n,r)}o((a=a.apply(i,u||[])).next())})},y=this&&this.__generator||function(n,r){var o,i,u,s={label:0,sent:function(){if(1&u[0])throw u[1];return u[1]},trys:[],ops:[]},e={next:t(0),throw:t(1),return:t(2)};return"function"==typeof Symbol&&(e[Symbol.iterator]=function(){return this}),e;function t(t){return function(e){return function(t){if(o)throw new TypeError("Generator is already executing.");for(;s;)try{if(o=1,i&&(u=2&t[0]?i.return:t[0]?i.throw||((u=i.return)&&u.call(i),0):i.next)&&!(u=u.call(i,t[1])).done)return u;switch(i=0,u&&(t=[2&t[0],u.value]),t[0]){case 0:case 1:u=t;break;case 4:return s.label++,{value:t[1],done:!1};case 5:s.label++,i=t[1],t=[0];continue;case 7:t=s.ops.pop(),s.trys.pop();continue;default:if(!(u=0<(u=s.trys).length&&u[u.length-1])&&(6===t[0]||2===t[0])){s=0;continue}if(3===t[0]&&(!u||t[1]>u[0]&&t[1]<u[3])){s.label=t[1];break}if(6===t[0]&&s.label<u[1]){s.label=u[1],u=t;break}if(u&&s.label<u[2]){s.label=u[2],s.ops.push(t);break}u[2]&&s.ops.pop(),s.trys.pop();continue}t=r.call(n,s)}catch(e){t=[6,e],i=0}finally{o=u=0}if(5&t[0])throw t[1];return{value:t[0]?t[1]:void 0,done:!0}}([t,e])}}};Object.defineProperty(h,"__esModule",{value:!0});var F=f("./ILogger"),n=f("./Loggers");h.VERSION="5.0.0-preview.4.20257.10";var r=(o.isRequired=function(e,t){if(null==e)throw new Error("The '"+t+"' argument is required.")},o.isIn=function(e,t,n){if(!(e in t))throw new Error("Unknown "+n+" value: "+e+".")},o);function o(){}h.Arg=r;var i=(Object.defineProperty(u,"isBrowser",{get:function(){return"object"==typeof window},enumerable:!0,configurable:!0}),Object.defineProperty(u,"isWebWorker",{get:function(){return"object"==typeof self&&"importScripts"in self},enumerable:!0,configurable:!0}),Object.defineProperty(u,"isNode",{get:function(){return!this.isBrowser&&!this.isWebWorker},enumerable:!0,configurable:!0}),u);function u(){}function E(e,t){var n="";return b(e)?(n="Binary data of length "+e.byteLength,t&&(n+=". Content: '"+s(e)+"'")):"string"==typeof e&&(n="String data of length "+e.length,t&&(n+=". Content: '"+e+"'")),n}function s(e){var t=new Uint8Array(e),n="";return t.forEach(function(e){n+="0x"+(e<16?"0":"")+e.toString(16)+" "}),n.substr(0,n.length-1)}function b(e){return e&&"undefined"!=typeof ArrayBuffer&&(e instanceof ArrayBuffer||e.constructor&&"ArrayBuffer"===e.constructor.name)}h.Platform=i,h.getDataDetail=E,h.formatArrayBuffer=s,h.isArrayBuffer=b,h.sendMessage=function(c,l,D,p,f,h,d,g,v){return e(this,void 0,void 0,function(){var t,n,r,o,i,u,s,a;return y(this,function(e){switch(e.label){case 0:return n={},f?[4,f()]:[3,2];case 1:(r=e.sent())&&((t={}).Authorization="Bearer "+r,n=t),e.label=2;case 2:return o=C(),i=o[0],u=o[1],n[i]=u,c.log(F.LogLevel.Trace,"("+l+" transport) sending data. "+E(h,d)+"."),s=b(h)?"arraybuffer":"text",[4,D.post(p,{content:h,headers:m({},n,v),responseType:s,withCredentials:g})];case 3:return a=e.sent(),c.log(F.LogLevel.Trace,"("+l+" transport) request complete. Response status: "+a.statusCode+"."),[2]}})})},h.createLogger=function(e){return void 0===e?new l(F.LogLevel.Information):null===e?n.NullLogger.instance:e.log?e:new l(e)};var a=(c.prototype.dispose=function(){var e=this.subject.observers.indexOf(this.observer);-1<e&&this.subject.observers.splice(e,1),0===this.subject.observers.length&&this.subject.cancelCallback&&this.subject.cancelCallback().catch(function(e){})},c);function c(e,t){this.subject=e,this.observer=t}h.SubjectSubscription=a;var l=(D.prototype.log=function(e,t){if(e>=this.minimumLogLevel)switch(e){case F.LogLevel.Critical:case F.LogLevel.Error:this.outputConsole.error("["+(new Date).toISOString()+"] "+F.LogLevel[e]+": "+t);break;case F.LogLevel.Warning:this.outputConsole.warn("["+(new Date).toISOString()+"] "+F.LogLevel[e]+": "+t);break;case F.LogLevel.Information:this.outputConsole.info("["+(new Date).toISOString()+"] "+F.LogLevel[e]+": "+t);break;default:this.outputConsole.log("["+(new Date).toISOString()+"] "+F.LogLevel[e]+": "+t)}},D);function D(e){this.minimumLogLevel=e,this.outputConsole=console}function C(){var e="X-SignalR-User-Agent";return i.isNode&&(e="User-Agent"),[e,p(h.VERSION,function(){{if(!i.isNode)return"";switch(t.platform){case"win32":return"Windows NT";case"darwin":return"macOS";case"linux":return"Linux";default:return t.platform}}}(),i.isNode?"NodeJS":"Browser",function(){if(i.isNode)return t.versions.node;return}())]}function p(e,t,n,r){var o="Microsoft SignalR/",i=e.split(".");return o+=i[0]+"."+i[1],o+=" ("+e+"; ",o+=t&&""!==t?t+"; ":"Unknown OS; ",o+=""+n,o+=r?"; "+r:"; Unknown Runtime Version",o+=")"}h.ConsoleLogger=l,h.getUserAgentHeader=C,h.constructUserAgent=p}).call(this,f("_process"))},{"./ILogger":13,"./Loggers":16,_process:29}],22:[function(e,t,n){"use strict";var p=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},r=this&&this.__awaiter||function(i,u,s,a){return new(s=s||Promise)(function(e,t){function n(e){try{o(a.next(e))}catch(e){t(e)}}function r(e){try{o(a.throw(e))}catch(e){t(e)}}function o(t){t.done?e(t.value):new s(function(e){e(t.value)}).then(n,r)}o((a=a.apply(i,u||[])).next())})},o=this&&this.__generator||function(n,r){var o,i,u,s={label:0,sent:function(){if(1&u[0])throw u[1];return u[1]},trys:[],ops:[]},e={next:t(0),throw:t(1),return:t(2)};return"function"==typeof Symbol&&(e[Symbol.iterator]=function(){return this}),e;function t(t){return function(e){return function(t){if(o)throw new TypeError("Generator is already executing.");for(;s;)try{if(o=1,i&&(u=2&t[0]?i.return:t[0]?i.throw||((u=i.return)&&u.call(i),0):i.next)&&!(u=u.call(i,t[1])).done)return u;switch(i=0,u&&(t=[2&t[0],u.value]),t[0]){case 0:case 1:u=t;break;case 4:return s.label++,{value:t[1],done:!1};case 5:s.label++,i=t[1],t=[0];continue;case 7:t=s.ops.pop(),s.trys.pop();continue;default:if(!(u=0<(u=s.trys).length&&u[u.length-1])&&(6===t[0]||2===t[0])){s=0;continue}if(3===t[0]&&(!u||t[1]>u[0]&&t[1]<u[3])){s.label=t[1];break}if(6===t[0]&&s.label<u[1]){s.label=u[1],u=t;break}if(u&&s.label<u[2]){s.label=u[2],s.ops.push(t);break}u[2]&&s.ops.pop(),s.trys.pop();continue}t=r.call(n,s)}catch(e){t=[6,e],i=0}finally{o=u=0}if(5&t[0])throw t[1];return{value:t[0]?t[1]:void 0,done:!0}}([t,e])}}};Object.defineProperty(n,"__esModule",{value:!0});var f=e("./ILogger"),h=e("./ITransport"),d=e("./Utils"),i=(u.prototype.connect=function(l,D){return r(this,void 0,void 0,function(){var t,c=this;return o(this,function(e){switch(e.label){case 0:return d.Arg.isRequired(l,"url"),d.Arg.isRequired(D,"transferFormat"),d.Arg.isIn(D,h.TransferFormat,"transferFormat"),this.logger.log(f.LogLevel.Trace,"(WebSockets transport) Connecting."),this.accessTokenFactory?[4,this.accessTokenFactory()]:[3,2];case 1:(t=e.sent())&&(l+=(l.indexOf("?")<0?"?":"&")+"access_token="+encodeURIComponent(t)),e.label=2;case 2:return[2,new Promise(function(t,n){var r;l=l.replace(/^http/,"ws");var e,o,i,u,s=c.httpClient.getCookieString(l),a=!1;d.Platform.isNode&&(e={},i=(o=d.getUserAgentHeader())[0],u=o[1],e[i]=u,s&&(e.Cookie=""+s),r=new c.webSocketConstructor(l,void 0,{headers:p({},e,c.headers)})),r=r||new c.webSocketConstructor(l),D===h.TransferFormat.Binary&&(r.binaryType="arraybuffer"),r.onopen=function(e){c.logger.log(f.LogLevel.Information,"WebSocket connected to "+l+"."),c.webSocket=r,a=!0,t()},r.onerror=function(e){var t=null,t="undefined"!=typeof ErrorEvent&&e instanceof ErrorEvent?e.error:new Error("There was an error with the transport.");n(t)},r.onmessage=function(e){if(c.logger.log(f.LogLevel.Trace,"(WebSockets transport) data received. "+d.getDataDetail(e.data,c.logMessageContent)+"."),c.onreceive)try{c.onreceive(e.data)}catch(e){return void c.close(e)}},r.onclose=function(e){var t;a?c.close(e):(t=null,t="undefined"!=typeof ErrorEvent&&e instanceof ErrorEvent?e.error:new Error("There was an error with the transport."),n(t))}})]}})})},u.prototype.send=function(e){return this.webSocket&&this.webSocket.readyState===this.webSocketConstructor.OPEN?(this.logger.log(f.LogLevel.Trace,"(WebSockets transport) sending data. "+d.getDataDetail(e,this.logMessageContent)+"."),this.webSocket.send(e),Promise.resolve()):Promise.reject("WebSocket is not in the OPEN state")},u.prototype.stop=function(){return this.webSocket&&this.close(void 0),Promise.resolve()},u.prototype.close=function(e){this.webSocket&&(this.webSocket.onclose=function(){},this.webSocket.onmessage=function(){},this.webSocket.onerror=function(){},this.webSocket.close(),this.webSocket=void 0),this.logger.log(f.LogLevel.Trace,"(WebSockets transport) socket closed."),this.onclose&&(!this.isCloseEvent(e)||!1!==e.wasClean&&1e3===e.code?e instanceof Error?this.onclose(e):this.onclose():this.onclose(new Error("WebSocket closed with status code: "+e.code+" ("+e.reason+").")))},u.prototype.isCloseEvent=function(e){return e&&"boolean"==typeof e.wasClean&&"number"==typeof e.code},u);function u(e,t,n,r,o,i){this.logger=n,this.accessTokenFactory=t,this.logMessageContent=r,this.webSocketConstructor=o,this.httpClient=e,this.onreceive=null,this.onclose=null,this.headers=i}n.WebSocketTransport=i},{"./ILogger":13,"./ITransport":14,"./Utils":21}],23:[function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(n,"__esModule",{value:!0});var i,u=e("./Errors"),s=e("./HttpClient"),a=e("./ILogger"),c=(i=s.HttpClient,o(l,i),l.prototype.send=function(o){var i=this;return o.abortSignal&&o.abortSignal.aborted?Promise.reject(new u.AbortError):o.method?o.url?new Promise(function(e,t){var n=new XMLHttpRequest;n.open(o.method,o.url,!0),n.withCredentials=void 0===o.withCredentials||o.withCredentials,n.setRequestHeader("X-Requested-With","XMLHttpRequest"),n.setRequestHeader("Content-Type","text/plain;charset=UTF-8");var r=o.headers;r&&Object.keys(r).forEach(function(e){n.setRequestHeader(e,r[e])}),o.responseType&&(n.responseType=o.responseType),o.abortSignal&&(o.abortSignal.onabort=function(){n.abort(),t(new u.AbortError)}),o.timeout&&(n.timeout=o.timeout),n.onload=function(){o.abortSignal&&(o.abortSignal.onabort=null),200<=n.status&&n.status<300?e(new s.HttpResponse(n.status,n.statusText,n.response||n.responseText)):t(new u.HttpError(n.statusText,n.status))},n.onerror=function(){i.logger.log(a.LogLevel.Warning,"Error from HTTP request. "+n.status+": "+n.statusText+"."),t(new u.HttpError(n.statusText,n.status))},n.ontimeout=function(){i.logger.log(a.LogLevel.Warning,"Timeout from HTTP request."),t(new u.TimeoutError)},n.send(o.content||"")}):Promise.reject(new Error("No url defined.")):Promise.reject(new Error("No method defined."))},l);function l(e){var t=i.call(this)||this;return t.logger=e,t}n.XhrHttpClient=c},{"./Errors":5,"./HttpClient":8,"./ILogger":13}],24:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e("./Errors");n.AbortError=r.AbortError,n.HttpError=r.HttpError,n.TimeoutError=r.TimeoutError;var o=e("./HttpClient");n.HttpClient=o.HttpClient,n.HttpResponse=o.HttpResponse;var i=e("./DefaultHttpClient");n.DefaultHttpClient=i.DefaultHttpClient;var u=e("./HubConnection");n.HubConnection=u.HubConnection,n.HubConnectionState=u.HubConnectionState;var s=e("./HubConnectionBuilder");n.HubConnectionBuilder=s.HubConnectionBuilder;var a=e("./IHubProtocol");n.MessageType=a.MessageType;var c=e("./ILogger");n.LogLevel=c.LogLevel;var l=e("./ITransport");n.HttpTransportType=l.HttpTransportType,n.TransferFormat=l.TransferFormat;var D=e("./Loggers");n.NullLogger=D.NullLogger;var p=e("./JsonHubProtocol");n.JsonHubProtocol=p.JsonHubProtocol;var f=e("./Subject");n.Subject=f.Subject;var h=e("./Utils");n.VERSION=h.VERSION},{"./DefaultHttpClient":3,"./Errors":5,"./HttpClient":8,"./HubConnection":10,"./HubConnectionBuilder":11,"./IHubProtocol":12,"./ILogger":13,"./ITransport":14,"./JsonHubProtocol":15,"./Loggers":16,"./Subject":19,"./Utils":21}],25:[function(e,t,a){(function(F){"use strict";function T(e){var t=e.getBoundingClientRect();return{width:t.width,height:t.height,top:t.top,right:t.right,bottom:t.bottom,left:t.left,x:t.left,y:t.top}}function w(e){if("[object Window]"===e.toString())return e;var t=e.ownerDocument;return t?t.defaultView:window}function l(e){var t=w(e);return{scrollLeft:t.pageXOffset,scrollTop:t.pageYOffset}}function A(e){return e instanceof w(e).Element||e instanceof Element}function D(e){return e instanceof w(e).HTMLElement||e instanceof HTMLElement}function c(e){return e?(e.nodeName||"").toLowerCase():null}function S(e){return(A(e)?e.ownerDocument:e.document).documentElement}function p(e){return T(S(e)).left+l(e).scrollLeft}function E(e){return w(e).getComputedStyle(e)}function f(e){var t=E(e),n=t.overflow,r=t.overflowX,o=t.overflowY;return/auto|scroll|overlay|hidden/.test(n+o+r)}function b(e,t,n){void 0===n&&(n=!1);var r,o,i=S(t),u=T(e),s={scrollLeft:0,scrollTop:0},a={x:0,y:0};return n||("body"===c(t)&&!f(i)||(s=(r=t)!==w(r)&&D(r)?{scrollLeft:(o=r).scrollLeft,scrollTop:o.scrollTop}:l(r)),D(t)?((a=T(t)).x+=t.clientLeft,a.y+=t.clientTop):i&&(a.x=p(i))),{x:u.left+s.scrollLeft-a.x,y:u.top+s.scrollTop-a.y,width:u.width,height:u.height}}function ee(e){return{x:e.offsetLeft,y:e.offsetTop,width:e.offsetWidth,height:e.offsetHeight}}function s(e){return"html"===c(e)?e:e.assignedSlot||e.parentNode||e.host||S(e)}function C(e,t){void 0===t&&(t=[]);var n=function e(t){return 0<=["html","body","#document"].indexOf(c(t))?t.ownerDocument.body:D(t)&&f(t)?t:e(s(t))}(e),r="body"===c(n),o=w(n),i=r?[o].concat(o.visualViewport||[],f(n)?n:[]):n,u=t.concat(i);return r?u:u.concat(C(s(i)))}function r(e){return D(e)&&"fixed"!==E(e).position?e.offsetParent:null}function te(e){for(var t=w(e),n=r(e);n&&0<=["table","td","th"].indexOf(c(n));)n=r(n);return(!n||"body"!==c(n)||"static"!==E(n).position)&&n||t}Object.defineProperty(a,"__esModule",{value:!0});var ne="top",re="bottom",oe="right",ie="left",j="auto",H=[ne,re,oe,ie],ue="start",h="end",k="clippingParents",P="viewport",O="popper",I="reference",R=H.reduce(function(e,t){return e.concat([t+"-"+ue,t+"-"+h])},[]),N=[].concat(H,[j]).reduce(function(e,t){return e.concat([t,t+"-"+ue,t+"-"+h])},[]),B=["beforeRead","read","afterRead","beforeMain","main","afterMain","beforeWrite","write","afterWrite"];function L(e){var r=new Map,o=new Set,t=[];return e.forEach(function(e){r.set(e.name,e)}),e.forEach(function(e){o.has(e.name)||!function n(e){o.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach(function(e){var t;o.has(e)||(t=r.get(e))&&n(t)}),t.push(e)}(e)}),t}function x(e){for(var t=arguments.length,n=new Array(1<t?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return[].concat(n).reduce(function(e,t){return e.replace(/%s/,t)},e)}var M='Popper: modifier "%s" provided an invalid %s property, expected %s but got %s',_='Popper: modifier "%s" requires "%s", but "%s" modifier is not available',U=["name","enabled","phase","fn","effect","requires","options"];function se(e){return e.split("-")[0]}var W="Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.",o={placement:"bottom",modifiers:[],strategy:"absolute"};function q(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return!t.some(function(e){return!(e&&"function"==typeof e.getBoundingClientRect)})}function e(e){void 0===e&&(e={});var t=e.defaultModifiers,m=void 0===t?[]:t,n=e.defaultOptions,y=void 0===n?o:n;return function(p,f,t){void 0===t&&(t=y);var n,r,h={placement:"bottom",orderedModifiers:[],options:Object.assign({},o,{},y),modifiersData:{},elements:{reference:p,popper:f},attributes:{},styles:{}},d=[],l=!1,g={state:h,setOptions:function(e){v(),h.options=Object.assign({},y,{},h.options,{},e),h.scrollParents={reference:A(p)?C(p):p.contextElement?C(p.contextElement):[],popper:C(f)};var t,n,r,o,i,u,s,a,c,l,D=(r=[].concat(m,h.options.modifiers),o=r.reduce(function(e,t){var n=e[t.name];return e[t.name]=n?Object.assign({},n,{},t,{options:Object.assign({},n.options,{},t.options),data:Object.assign({},n.data,{},t.data)}):t,e},{}),t=Object.keys(o).map(function(e){return o[e]}),n=L(t),B.reduce(function(e,t){return e.concat(n.filter(function(e){return e.phase===t}))},[]));return h.orderedModifiers=D.filter(function(e){return e.enabled}),"production"!==F.env.NODE_ENV&&(a=[].concat(D,h.options.modifiers),c=function(e){return e.name},l=new Set,i=a.filter(function(e){var t=c(e);if(!l.has(t))return l.add(t),!0}),(s=i).forEach(function(n){Object.keys(n).forEach(function(e){switch(e){case"name":"string"!=typeof n.name&&console.error(x(M,String(n.name),'"name"','"string"','"'+String(n.name)+'"'));break;case"enabled":"boolean"!=typeof n.enabled&&console.error(x(M,n.name,'"enabled"','"boolean"','"'+String(n.enabled)+'"'));case"phase":B.indexOf(n.phase)<0&&console.error(x(M,n.name,'"phase"',"either "+B.join(", "),'"'+String(n.phase)+'"'));break;case"fn":"function"!=typeof n.fn&&console.error(x(M,n.name,'"fn"','"function"','"'+String(n.fn)+'"'));break;case"effect":"function"!=typeof n.effect&&console.error(x(M,n.name,'"effect"','"function"','"'+String(n.fn)+'"'));break;case"requires":Array.isArray(n.requires)||console.error(x(M,n.name,'"requires"','"array"','"'+String(n.requires)+'"'));break;case"requiresIfExists":Array.isArray(n.requiresIfExists)||console.error(x(M,n.name,'"requiresIfExists"','"array"','"'+String(n.requiresIfExists)+'"'));break;case"options":case"data":break;default:console.error('PopperJS: an invalid property has been provided to the "'+n.name+'" modifier, valid properties are '+U.map(function(e){return'"'+e+'"'}).join(", ")+'; but "'+e+'" was provided.')}n.requires&&n.requires.forEach(function(t){null==s.find(function(e){return e.name===t})&&console.error(x(_,String(n.name),t,t))})})}),se(h.options.placement)===j&&(h.orderedModifiers.find(function(e){return"flip"===e.name})||console.error(['Popper: "auto" placements require the "flip" modifier be',"present and enabled to work."].join(" "))),[(u=E(f)).marginTop,u.marginRight,u.marginBottom,u.marginLeft].some(function(e){return parseFloat(e)})&&console.warn(['Popper: CSS "margin" styles cannot be used to apply padding',"between the popper and its reference element or boundary.","To replicate margin, use the `offset` modifier, as well as","the `padding` option in the `preventOverflow` and `flip`","modifiers."].join(" "))),h.orderedModifiers.forEach(function(e){var t,n=e.name,r=e.options,o=void 0===r?{}:r,i=e.effect;"function"==typeof i&&(t=i({state:h,name:n,instance:g,options:o}),d.push(t||function(){}))}),g.update()},forceUpdate:function(){if(!l){var e=h.elements,t=e.reference,n=e.popper;if(q(t,n)){h.rects={reference:b(t,te(n),"fixed"===h.options.strategy),popper:ee(n)},h.reset=!1,h.placement=h.options.placement,h.orderedModifiers.forEach(function(e){return h.modifiersData[e.name]=Object.assign({},e.data)});for(var r,o,i,u,s,a=0,c=0;c<h.orderedModifiers.length;c++){if("production"!==F.env.NODE_ENV&&100<(a+=1)){console.error("Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.");break}!0!==h.reset?(o=(r=h.orderedModifiers[c]).fn,u=void 0===(i=r.options)?{}:i,s=r.name,"function"==typeof o&&(h=o({state:h,options:u,name:s,instance:g})||h)):(h.reset=!1,c=-1)}}else"production"!==F.env.NODE_ENV&&console.error(W)}},update:(n=function(){return new Promise(function(e){g.forceUpdate(),e(h)})},function(){return r=r||new Promise(function(e){Promise.resolve().then(function(){r=void 0,e(n())})})}),destroy:function(){v(),l=!0}};if(!q(p,f))return"production"!==F.env.NODE_ENV&&console.error(W),g;function v(){d.forEach(function(e){return e()}),d=[]}return g.setOptions(t).then(function(e){!l&&t.onFirstUpdate&&t.onFirstUpdate(e)}),g}}var d={passive:!0};function ae(e){return e.split("-")[1]}function ce(e){return 0<=["top","bottom"].indexOf(e)?"x":"y"}function V(e){var t,n=e.reference,r=e.element,o=e.placement,i=o?se(o):null,u=o?ae(o):null,s=n.x+n.width/2-r.width/2,a=n.y+n.height/2-r.height/2;switch(i){case ne:t={x:s,y:n.y-r.height};break;case re:t={x:s,y:n.y+n.height};break;case oe:t={x:n.x+n.width,y:a};break;case ie:t={x:n.x-r.width,y:a};break;default:t={x:n.x,y:n.y}}var c=i?ce(i):null;if(null!=c){var l="y"===c?"height":"width";switch(u){case ue:t[c]=Math.floor(t[c])-Math.floor(n[l]/2-r[l]/2);break;case h:t[c]=Math.floor(t[c])+Math.ceil(n[l]/2-r[l]/2)}}return t}var z={top:"auto",right:"auto",bottom:"auto",left:"auto"};function g(e){var t,n,r,o,i,u,s=e.popper,a=e.popperRect,c=e.placement,l=e.offsets,D=e.position,p=e.gpuAcceleration,f=e.adaptive,h=(r=(n=l).x,o=n.y,i=window.devicePixelRatio||1,{x:Math.round(r*i)/i||0,y:Math.round(o*i)/i||0}),d=h.x,g=h.y,v=l.hasOwnProperty("x"),m=l.hasOwnProperty("y"),y=ie,F=ne,E=window;f&&((u=te(s))===w(s)&&(u=S(s)),c===ne&&(F=re,g-=u.clientHeight-a.height,g*=p?1:-1),c===ie&&(y=oe,d-=u.clientWidth-a.width,d*=p?1:-1));var b,C=Object.assign({position:D},f&&z);return p?Object.assign({},C,((b={})[F]=m?"0":"",b[y]=v?"0":"",b.transform=(E.devicePixelRatio||1)<2?"translate("+d+"px, "+g+"px)":"translate3d("+d+"px, "+g+"px, 0)",b)):Object.assign({},C,((t={})[F]=m?g+"px":"",t[y]=v?d+"px":"",t.transform="",t))}var t={left:"right",right:"left",bottom:"top",top:"bottom"};function X(e){return e.replace(/left|right|bottom|top/g,function(e){return t[e]})}var n={start:"end",end:"start"};function J(e){return e.replace(/start|end/g,function(e){return n[e]})}function v(e){return parseFloat(e)||0}function m(e){var t,n,r=w(e),o={top:v((n=D(t=e)?E(t):{}).borderTopWidth),right:v(n.borderRightWidth),bottom:v(n.borderBottomWidth),left:v(n.borderLeftWidth)},i="html"===c(e),u=p(e),s=e.clientWidth+o.right,a=e.clientHeight+o.bottom;return i&&50<r.innerHeight-e.clientHeight&&(a=r.innerHeight-o.bottom),{top:i?0:e.clientTop,right:e.clientLeft>o.left?o.right:i?r.innerWidth-s-u:e.offsetWidth-s,bottom:i?r.innerHeight-a:e.offsetHeight-a,left:i?u:e.clientLeft}}function y(e,t){var n=Boolean(t.getRootNode&&t.getRootNode().host);if(e.contains(t))return!0;if(n){var r=t;do{if(r&&e.isSameNode(r))return!0;r=r.parentNode||r.host}while(r)}return!1}function Y(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function G(e,t){return t===P?Y((u=w(e),s=u.visualViewport,a=u.innerWidth,c=u.innerHeight,s&&/iPhone|iPod|iPad/.test(navigator.platform)&&(a=s.width,c=s.height),{width:a,height:c,x:0,y:0})):D(t)?T(t):Y((n=S(e),r=w(n),o=l(n),(i=b(S(n),r)).height=Math.max(i.height,r.innerHeight),i.width=Math.max(i.width,r.innerWidth),i.x=-o.scrollLeft,i.y=-o.scrollTop,i));var n,r,o,i,u,s,a,c}function Q(o,e,t){var n,r,i,u="clippingParents"===e?(r=C(n=o),A(i=0<=["absolute","fixed"].indexOf(E(n).position)&&D(n)?te(n):n)?r.filter(function(e){return A(e)&&y(e,i)}):[]):[].concat(e),s=[].concat(u,[t]),a=s[0],c=s.reduce(function(e,t){var n=G(o,t),r=m(D(t)?t:S(o));return e.top=Math.max(n.top+r.top,e.top),e.right=Math.min(n.right-r.right,e.right),e.bottom=Math.min(n.bottom-r.bottom,e.bottom),e.left=Math.max(n.left+r.left,e.left),e},G(o,a));return c.width=c.right-c.left,c.height=c.bottom-c.top,c.x=c.left,c.y=c.top,c}function le(){return{top:0,right:0,bottom:0,left:0}}function $(e){return Object.assign({},le(),{},e)}function K(n,e){return e.reduce(function(e,t){return e[t]=n,e},{})}function De(e,t){void 0===t&&(t={});var r,n=t.placement,o=void 0===n?e.placement:n,i=t.boundary,u=void 0===i?k:i,s=t.rootBoundary,a=void 0===s?P:s,c=t.elementContext,l=void 0===c?O:c,D=t.altBoundary,p=void 0!==D&&D,f=t.padding,h=void 0===f?0:f,d=$("number"!=typeof h?h:K(h,H)),g=l===O?I:O,v=e.elements.reference,m=e.rects.popper,y=e.elements[p?g:l],F=Q(A(y)?y:y.contextElement||S(e.elements.popper),u,a),E=T(v),b=V({reference:E,element:m,strategy:"absolute",placement:o}),C=Y(Object.assign({},m,{},b)),w=l===O?C:E,B={top:F.top-w.top+d.top,bottom:w.bottom-F.bottom+d.bottom,left:F.left-w.left+d.left,right:w.right-F.right+d.right},L=e.modifiersData.offset;return l===O&&L&&(r=L[o],Object.keys(B).forEach(function(e){var t=0<=[oe,re].indexOf(e)?1:-1,n=0<=[ne,re].indexOf(e)?"y":"x";B[e]+=r[n]*t})),B}function pe(e,t,n){return Math.max(e,Math.min(t,n))}function Z(e,t,n){return void 0===n&&(n={x:0,y:0}),{top:e.top-t.height-n.y,right:e.right-t.width+n.x,bottom:e.bottom-t.height+n.y,left:e.left-t.width-n.x}}function fe(t){return[ne,oe,re,ie].some(function(e){return 0<=t[e]})}var i=[{name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var t=e.state,n=e.instance,r=e.options,o=r.scroll,i=void 0===o||o,u=r.resize,s=void 0===u||u,a=w(t.elements.popper),c=[].concat(t.scrollParents.reference,t.scrollParents.popper);return i&&c.forEach(function(e){e.addEventListener("scroll",n.update,d)}),s&&a.addEventListener("resize",n.update,d),function(){i&&c.forEach(function(e){e.removeEventListener("scroll",n.update,d)}),s&&a.removeEventListener("resize",n.update,d)}},data:{}},{name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,n=e.name;t.modifiersData[n]=V({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}},{name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t,n=e.state,r=e.options,o=r.gpuAcceleration,i=void 0===o||o,u=r.adaptive,s=void 0===u||u;"production"!==F.env.NODE_ENV&&(t=E(n.elements.popper).transitionProperty||"",s&&["transform","top","right","bottom","left"].some(function(e){return 0<=t.indexOf(e)})&&console.warn(["Popper: Detected CSS transitions on at least one of the following",'CSS properties: "transform", "top", "right", "bottom", "left".',"\n\n",'Disable the "computeStyles" modifier\'s `adaptive` option to allow',"for smooth transitions, or remove these properties from the CSS","transition declaration on the popper element if only transitioning","opacity or background-color for example.","\n\n","We recommend using the popper element as a wrapper around an inner","element that can have any CSS property transitioned for animations."].join(" ")));var a={placement:se(n.placement),popper:n.elements.popper,popperRect:n.rects.popper,gpuAcceleration:i};null!=n.modifiersData.popperOffsets&&(n.styles.popper=Object.assign({},n.styles.popper,{},g(Object.assign({},a,{offsets:n.modifiersData.popperOffsets,position:n.options.strategy,adaptive:s})))),null!=n.modifiersData.arrow&&(n.styles.arrow=Object.assign({},n.styles.arrow,{},g(Object.assign({},a,{offsets:n.modifiersData.arrow,position:"absolute",adaptive:!1})))),n.attributes.popper=Object.assign({},n.attributes.popper,{"data-popper-placement":n.placement})},data:{}},{name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var o=e.state;Object.keys(o.elements).forEach(function(e){var t=o.styles[e]||{},n=o.attributes[e]||{},r=o.elements[e];D(r)&&c(r)&&(Object.assign(r.style,t),Object.keys(n).forEach(function(e){var t=n[e];!1===t?r.removeAttribute(e):r.setAttribute(e,!0===t?"":t)}))})},effect:function(e){var o=e.state,i={popper:{position:o.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(o.elements.popper.style,i.popper),o.elements.arrow&&Object.assign(o.elements.arrow.style,i.arrow),function(){Object.keys(o.elements).forEach(function(e){var t=o.elements[e],n=o.attributes[e]||{},r=Object.keys(o.styles.hasOwnProperty(e)?o.styles[e]:i[e]).reduce(function(e,t){return e[t]="",e},{});D(t)&&c(t)&&(Object.assign(t.style,r),Object.keys(n).forEach(function(e){t.removeAttribute(e)}))})}},requires:["computeStyles"]},{name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var l=e.state,t=e.options,n=e.name,r=t.offset,D=void 0===r?[0,0]:r,o=N.reduce(function(e,t){var n,r,o,i,u,s,a,c;return e[t]=(n=t,r=l.rects,o=D,i=se(n),u=0<=[ie,ne].indexOf(i)?-1:1,s="function"==typeof o?o(Object.assign({},r,{placement:n})):o,a=(a=s[0])||0,c=((c=s[1])||0)*u,0<=[ie,oe].indexOf(i)?{x:c,y:a}:{x:a,y:c}),e},{}),i=o[l.placement],u=i.x,s=i.y;null!=l.modifiersData.popperOffsets&&(l.modifiersData.popperOffsets.x+=u,l.modifiersData.popperOffsets.y+=s),l.modifiersData[n]=o}},{name:"flip",enabled:!0,phase:"main",fn:function(e){var n=e.state,t=e.options,r=e.name;if(!n.modifiersData[r]._skip){for(var o=t.mainAxis,i=void 0===o||o,u=t.altAxis,s=void 0===u||u,a=t.fallbackPlacements,c=t.padding,l=t.boundary,D=t.rootBoundary,p=t.altBoundary,f=t.flipVariations,h=void 0===f||f,d=t.allowedAutoPlacements,g=n.options.placement,v=se(g),m=a||(v===g||!h?[X(g)]:function(e){if(se(e)===j)return[];var t=X(e);return[J(e),t,J(t)]}(g)),y=[g].concat(m).reduce(function(e,t){return e.concat(se(t)===j?function(n,e){void 0===e&&(e={});var t=e.placement,r=e.boundary,o=e.rootBoundary,i=e.padding,u=e.flipVariations,s=e.allowedAutoPlacements,a=void 0===s?N:s,c=ae(t),l=(c?u?R:R.filter(function(e){return ae(e)===c}):H).filter(function(e){return 0<=a.indexOf(e)}).reduce(function(e,t){return e[t]=De(n,{placement:t,boundary:r,rootBoundary:o,padding:i})[se(t)],e},{});return Object.keys(l).sort(function(e,t){return l[e]-l[t]})}(n,{placement:t,boundary:l,rootBoundary:D,padding:c,flipVariations:h,allowedAutoPlacements:d}):t)},[]),F=n.rects.reference,E=n.rects.popper,b=new Map,C=!0,w=y[0],B=0;B<y.length;B++){var L=y[B],T=se(L),A=ae(L)===ue,S=0<=[ne,re].indexOf(T),k=S?"width":"height",P=De(n,{placement:L,boundary:l,rootBoundary:D,altBoundary:p,padding:c}),O=S?A?oe:ie:A?re:ne;F[k]>E[k]&&(O=X(O));var I=X(O),x=[];if(i&&x.push(P[T]<=0),s&&x.push(P[O]<=0,P[I]<=0),x.every(function(e){return e})){w=L,C=!1;break}b.set(L,x)}if(C)for(var M=function(n){var e=y.find(function(e){var t=b.get(e);if(t)return t.slice(0,n).every(function(e){return e})});if(e)return w=e,"break"},_=h?3:1;0<_;_--){if("break"===M(_))break}n.placement!==w&&(n.modifiersData[r]._skip=!0,n.placement=w,n.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}},{name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var t,n,r,o,i,u,s,a,c,l,D,p,f,h,d,g,v,m,y,F,E,b,C,w,B,L,T,A=e.state,S=e.options,k=e.name,P=S.mainAxis,O=void 0===P||P,I=S.altAxis,x=void 0!==I&&I,M=S.boundary,_=S.rootBoundary,j=S.altBoundary,H=S.padding,R=S.tether,N=void 0===R||R,U=S.tetherOffset,W=void 0===U?0:U,q=De(A,{boundary:M,rootBoundary:_,padding:H,altBoundary:j}),V=se(A.placement),z=ae(A.placement),X=!z,J=ce(V),Y="x"===J?"y":"x",G=A.modifiersData.popperOffsets,Q=A.rects.reference,$=A.rects.popper,K="function"==typeof W?W(Object.assign({},A.rects,{placement:A.placement})):W,Z={x:0,y:0};G&&(O&&(t="y"===J?ne:ie,n="y"===J?re:oe,r="y"===J?"height":"width",o=G[J],i=G[J]+q[t],u=G[J]-q[n],s=N?-$[r]/2:0,a=z===ue?Q[r]:$[r],c=z===ue?-$[r]:-Q[r],l=A.elements.arrow,D=N&&l?ee(l):{width:0,height:0},f=(p=A.modifiersData["arrow#persistent"]?A.modifiersData["arrow#persistent"].padding:le())[t],h=p[n],d=pe(0,Q[r],D[r]),g=X?Q[r]/2-s-d-f-K:a-d-f-K,v=X?-Q[r]/2+s+d+h+K:c+d+h+K,y=(m=A.elements.arrow&&te(A.elements.arrow))?"y"===J?m.clientTop||0:m.clientLeft||0:0,F=A.modifiersData.offset?A.modifiersData.offset[A.placement][J]:0,E=G[J]+g-F-y,b=G[J]+v-F,C=pe(N?Math.min(i,E):i,o,N?Math.max(u,b):u),G[J]=C,Z[J]=C-o),x&&(w="x"===J?ne:ie,B="x"===J?re:oe,T=pe((L=G[Y])+q[w],L,L-q[B]),G[Y]=T,Z[Y]=T-L),A.modifiersData[k]=Z)},requiresIfExists:["offset"]},{name:"arrow",enabled:!0,phase:"main",fn:function(e){var t,n,r,o,i,u,s,a,c,l,D,p,f,h,d=e.state,g=e.name,v=d.elements.arrow,m=d.modifiersData.popperOffsets,y=se(d.placement),F=ce(y),E=0<=[ie,oe].indexOf(y)?"height":"width";v&&m&&(n=d.modifiersData[g+"#persistent"].padding,r=ee(v),o="y"===F?ne:ie,i="y"===F?re:oe,u=d.rects.reference[E]+d.rects.reference[F]-m[F]-d.rects.popper[E],s=m[F]-d.rects.reference[F],c=(a=te(v))?"y"===F?a.clientHeight||0:a.clientWidth||0:0,l=u/2-s/2,D=n[o],p=c-r[E]-n[i],h=pe(D,f=c/2-r[E]/2+l,p),d.modifiersData[g]=((t={})[F]=h,t.centerOffset=h-f,t))},effect:function(e){var t=e.state,n=e.options,r=e.name,o=n.element,i=void 0===o?"[data-popper-arrow]":o,u=n.padding,s=void 0===u?0:u;null!=i&&("string"==typeof i&&!(i=t.elements.popper.querySelector(i))||("production"!==F.env.NODE_ENV&&(D(i)||console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).',"To use an SVG arrow, wrap it in an HTMLElement that will be used as","the arrow."].join(" "))),y(t.elements.popper,i)?(t.elements.arrow=i,t.modifiersData[r+"#persistent"]={padding:$("number"!=typeof s?s:K(s,H))}):"production"!==F.env.NODE_ENV&&console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper',"element."].join(" "))))},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]},{name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,n=e.name,r=t.rects.reference,o=t.rects.popper,i=t.modifiersData.preventOverflow,u=De(t,{elementContext:"reference"}),s=De(t,{altBoundary:!0}),a=Z(u,r),c=Z(s,o,i),l=fe(a),D=fe(c);t.modifiersData[n]={referenceClippingOffsets:a,popperEscapeOffsets:c,isReferenceHidden:l,hasPopperEscaped:D},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":l,"data-popper-escaped":D})}}],u=e({defaultModifiers:i});a.createPopper=u,a.defaultModifiers=i,a.detectOverflow=De,a.popperGenerator=e}).call(this,e("_process"))},{_process:29}],26:[function(e,t,n){"use strict";n.byteLength=function(e){var t=D(e),n=t[0],r=t[1];return 3*(n+r)/4-r},n.toByteArray=function(e){var t,n,r=D(e),o=r[0],i=r[1],u=new l(function(e,t){return 3*(e+t)/4-t}(o,i)),s=0,a=0<i?o-4:o;for(n=0;n<a;n+=4)t=c[e.charCodeAt(n)]<<18|c[e.charCodeAt(n+1)]<<12|c[e.charCodeAt(n+2)]<<6|c[e.charCodeAt(n+3)],u[s++]=t>>16&255,u[s++]=t>>8&255,u[s++]=255&t;2===i&&(t=c[e.charCodeAt(n)]<<2|c[e.charCodeAt(n+1)]>>4,u[s++]=255&t);1===i&&(t=c[e.charCodeAt(n)]<<10|c[e.charCodeAt(n+1)]<<4|c[e.charCodeAt(n+2)]>>2,u[s++]=t>>8&255,u[s++]=255&t);return u},n.fromByteArray=function(e){for(var t,n=e.length,r=n%3,o=[],i=0,u=n-r;i<u;i+=16383)o.push(a(e,i,u<i+16383?u:i+16383));1==r?(t=e[n-1],o.push(s[t>>2]+s[t<<4&63]+"==")):2==r&&(t=(e[n-2]<<8)+e[n-1],o.push(s[t>>10]+s[t>>4&63]+s[t<<2&63]+"="));return o.join("")};for(var s=[],c=[],l="undefined"!=typeof Uint8Array?Uint8Array:Array,r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",o=0,i=r.length;o<i;++o)s[o]=r[o],c[r.charCodeAt(o)]=o;function D(e){var t=e.length;if(0<t%4)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function a(e,t,n){for(var r,o,i=[],u=t;u<n;u+=3)r=(e[u]<<16&16711680)+(e[u+1]<<8&65280)+(255&e[u+2]),i.push(s[(o=r)>>18&63]+s[o>>12&63]+s[o>>6&63]+s[63&o]);return i.join("")}c["-".charCodeAt(0)]=62,c["_".charCodeAt(0)]=63},{}],27:[function(H,e,R){(function(D){"use strict";var r=H("base64-js"),i=H("ieee754"),e="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;R.Buffer=D,R.SlowBuffer=function(e){+e!=e&&(e=0);return D.alloc(+e)},R.INSPECT_MAX_BYTES=50;var n=2147483647;function u(e){if(n<e)throw new RangeError('The value "'+e+'" is invalid for option "size"');var t=new Uint8Array(e);return Object.setPrototypeOf(t,D.prototype),t}function D(e,t,n){if("number"!=typeof e)return o(e,t,n);if("string"==typeof t)throw new TypeError('The "string" argument must be of type string. Received type number');return a(e)}function o(e,t,n){if("string"==typeof e)return function(e,t){"string"==typeof t&&""!==t||(t="utf8");if(!D.isEncoding(t))throw new TypeError("Unknown encoding: "+t);var n=0|f(e,t),r=u(n),o=r.write(e,t);o!==n&&(r=r.slice(0,o));return r}(e,t);if(ArrayBuffer.isView(e))return c(e);if(null==e)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(M(e,ArrayBuffer)||e&&M(e.buffer,ArrayBuffer))return l(e,t,n);if("undefined"!=typeof SharedArrayBuffer&&(M(e,SharedArrayBuffer)||e&&M(e.buffer,SharedArrayBuffer)))return l(e,t,n);if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type number');var r=e.valueOf&&e.valueOf();if(null!=r&&r!==e)return D.from(r,t,n);var o=function(e){if(D.isBuffer(e)){var t=0|p(e.length),n=u(t);return 0===n.length?n:(e.copy(n,0,0,t),n)}if(void 0!==e.length)return"number"!=typeof e.length||_(e.length)?u(0):c(e);if("Buffer"===e.type&&Array.isArray(e.data))return c(e.data)}(e);if(o)return o;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return D.from(e[Symbol.toPrimitive]("string"),t,n);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function s(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function a(e){return s(e),u(e<0?0:0|p(e))}function c(e){for(var t=e.length<0?0:0|p(e.length),n=u(t),r=0;r<t;r+=1)n[r]=255&e[r];return n}function l(e,t,n){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(n||0))throw new RangeError('"length" is outside of buffer bounds');var r=void 0===t&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,t):new Uint8Array(e,t,n);return Object.setPrototypeOf(r,D.prototype),r}function p(e){if(n<=e)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+n.toString(16)+" bytes");return 0|e}function f(e,t){if(D.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||M(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);var n=e.length,r=2<arguments.length&&!0===arguments[2];if(!r&&0===n)return 0;for(var o=!1;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":return O(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return I(e).length;default:if(o)return r?-1:O(e).length;t=(""+t).toLowerCase(),o=!0}}function h(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function d(e,t,n,r,o){if(0===e.length)return-1;if("string"==typeof n?(r=n,n=0):2147483647<n?n=2147483647:n<-2147483648&&(n=-2147483648),_(n=+n)&&(n=o?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(o)return-1;n=e.length-1}else if(n<0){if(!o)return-1;n=0}if("string"==typeof t&&(t=D.from(t,r)),D.isBuffer(t))return 0===t.length?-1:g(e,t,n,r,o);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):g(e,[t],n,r,o);throw new TypeError("val must be string, number or Buffer")}function g(e,t,n,r,o){var i=1,u=e.length,s=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;u/=i=2,s/=2,n/=2}function a(e,t){return 1===i?e[t]:e.readUInt16BE(t*i)}if(o)for(var c=-1,l=n;l<u;l++)if(a(e,l)===a(t,-1===c?0:l-c)){if(-1===c&&(c=l),l-c+1===s)return c*i}else-1!==c&&(l-=l-c),c=-1;else for(u<n+s&&(n=u-s),l=n;0<=l;l--){for(var D=!0,p=0;p<s;p++)if(a(e,l+p)!==a(t,p)){D=!1;break}if(D)return l}return-1}function v(e,t,n,r){n=Number(n)||0;var o=e.length-n;(!r||o<(r=Number(r)))&&(r=o);var i=t.length;i/2<r&&(r=i/2);for(var u=0;u<r;++u){var s=parseInt(t.substr(2*u,2),16);if(_(s))return u;e[n+u]=s}return u}function m(e,t,n,r){return x(function(e){for(var t=[],n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,r)}function y(e,t,n,r){return x(function(e,t){for(var n,r,o,i=[],u=0;u<e.length&&!((t-=2)<0);++u)n=e.charCodeAt(u),r=n>>8,o=n%256,i.push(o),i.push(r);return i}(t,e.length-n),e,n,r)}function F(e,t,n){return 0===t&&n===e.length?r.fromByteArray(e):r.fromByteArray(e.slice(t,n))}function E(e,t,n){n=Math.min(e.length,n);for(var r=[],o=t;o<n;){var i,u,s,a,c=e[o],l=null,D=239<c?4:223<c?3:191<c?2:1;if(o+D<=n)switch(D){case 1:c<128&&(l=c);break;case 2:128==(192&(i=e[o+1]))&&127<(a=(31&c)<<6|63&i)&&(l=a);break;case 3:i=e[o+1],u=e[o+2],128==(192&i)&&128==(192&u)&&2047<(a=(15&c)<<12|(63&i)<<6|63&u)&&(a<55296||57343<a)&&(l=a);break;case 4:i=e[o+1],u=e[o+2],s=e[o+3],128==(192&i)&&128==(192&u)&&128==(192&s)&&65535<(a=(15&c)<<18|(63&i)<<12|(63&u)<<6|63&s)&&a<1114112&&(l=a)}null===l?(l=65533,D=1):65535<l&&(l-=65536,r.push(l>>>10&1023|55296),l=56320|1023&l),r.push(l),o+=D}return function(e){var t=e.length;if(t<=b)return String.fromCharCode.apply(String,e);var n="",r=0;for(;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=b));return n}(r)}R.kMaxLength=n,(D.TYPED_ARRAY_SUPPORT=function(){try{var e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}())||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(D.prototype,"parent",{enumerable:!0,get:function(){if(D.isBuffer(this))return this.buffer}}),Object.defineProperty(D.prototype,"offset",{enumerable:!0,get:function(){if(D.isBuffer(this))return this.byteOffset}}),D.poolSize=8192,D.from=o,Object.setPrototypeOf(D.prototype,Uint8Array.prototype),Object.setPrototypeOf(D,Uint8Array),D.alloc=function(e,t,n){return o=t,i=n,s(r=e),r<=0||void 0===o?u(r):"string"==typeof i?u(r).fill(o,i):u(r).fill(o);var r,o,i},D.allocUnsafe=a,D.allocUnsafeSlow=a,D.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==D.prototype},D.compare=function(e,t){if(M(e,Uint8Array)&&(e=D.from(e,e.offset,e.byteLength)),M(t,Uint8Array)&&(t=D.from(t,t.offset,t.byteLength)),!D.isBuffer(e)||!D.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;for(var n=e.length,r=t.length,o=0,i=Math.min(n,r);o<i;++o)if(e[o]!==t[o]){n=e[o],r=t[o];break}return n<r?-1:r<n?1:0},D.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},D.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return D.alloc(0);if(void 0===t)for(o=t=0;o<e.length;++o)t+=e[o].length;for(var n=D.allocUnsafe(t),r=0,o=0;o<e.length;++o){var i=e[o];if(M(i,Uint8Array)&&(i=D.from(i)),!D.isBuffer(i))throw new TypeError('"list" argument must be an Array of Buffers');i.copy(n,r),r+=i.length}return n},D.byteLength=f,D.prototype._isBuffer=!0,D.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)h(this,t,t+1);return this},D.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)h(this,t,t+3),h(this,t+1,t+2);return this},D.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)h(this,t,t+7),h(this,t+1,t+6),h(this,t+2,t+5),h(this,t+3,t+4);return this},D.prototype.toLocaleString=D.prototype.toString=function(){var e=this.length;return 0===e?"":0===arguments.length?E(this,0,e):function(e,t,n){var r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e=e||"utf8";;)switch(e){case"hex":return B(this,t,n);case"utf8":case"utf-8":return E(this,t,n);case"ascii":return C(this,t,n);case"latin1":case"binary":return w(this,t,n);case"base64":return F(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return L(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}.apply(this,arguments)},D.prototype.equals=function(e){if(!D.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===D.compare(this,e)},D.prototype.inspect=function(){var e="",t=R.INSPECT_MAX_BYTES,e=this.toString("hex",0,t).replace(/(.{2})/g,"$1 ").trim();return this.length>t&&(e+=" ... "),"<Buffer "+e+">"},e&&(D.prototype[e]=D.prototype.inspect),D.prototype.compare=function(e,t,n,r,o){if(M(e,Uint8Array)&&(e=D.from(e,e.offset,e.byteLength)),!D.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===r&&(r=0),void 0===o&&(o=this.length),t<0||n>e.length||r<0||o>this.length)throw new RangeError("out of range index");if(o<=r&&n<=t)return 0;if(o<=r)return-1;if(n<=t)return 1;if(this===e)return 0;for(var i=(o>>>=0)-(r>>>=0),u=(n>>>=0)-(t>>>=0),s=Math.min(i,u),a=this.slice(r,o),c=e.slice(t,n),l=0;l<s;++l)if(a[l]!==c[l]){i=a[l],u=c[l];break}return i<u?-1:u<i?1:0},D.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},D.prototype.indexOf=function(e,t,n){return d(this,e,t,n,!0)},D.prototype.lastIndexOf=function(e,t,n){return d(this,e,t,n,!1)},D.prototype.write=function(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(n)?(n>>>=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var o=this.length-t;if((void 0===n||o<n)&&(n=o),0<e.length&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r=r||"utf8";for(var i,u,s,a,c,l,D=!1;;)switch(r){case"hex":return v(this,e,t,n);case"utf8":case"utf-8":return c=t,l=n,x(O(e,(a=this).length-c),a,c,l);case"ascii":return m(this,e,t,n);case"latin1":case"binary":return m(this,e,t,n);case"base64":return i=this,u=t,s=n,x(I(e),i,u,s);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return y(this,e,t,n);default:if(D)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),D=!0}},D.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var b=4096;function C(e,t,n){var r="";n=Math.min(e.length,n);for(var o=t;o<n;++o)r+=String.fromCharCode(127&e[o]);return r}function w(e,t,n){var r="";n=Math.min(e.length,n);for(var o=t;o<n;++o)r+=String.fromCharCode(e[o]);return r}function B(e,t,n){var r=e.length;(!t||t<0)&&(t=0),(!n||n<0||r<n)&&(n=r);for(var o="",i=t;i<n;++i)o+=j[e[i]];return o}function L(e,t,n){for(var r=e.slice(t,n),o="",i=0;i<r.length;i+=2)o+=String.fromCharCode(r[i]+256*r[i+1]);return o}function T(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(n<e+t)throw new RangeError("Trying to access beyond buffer length")}function A(e,t,n,r,o,i){if(!D.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(o<t||t<i)throw new RangeError('"value" argument is out of bounds');if(n+r>e.length)throw new RangeError("Index out of range")}function S(e,t,n,r){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function k(e,t,n,r,o){return t=+t,n>>>=0,o||S(e,0,n,4),i.write(e,t,n,r,23,4),n+4}function P(e,t,n,r,o){return t=+t,n>>>=0,o||S(e,0,n,8),i.write(e,t,n,r,52,8),n+8}D.prototype.slice=function(e,t){var n=this.length;(e=~~e)<0?(e+=n)<0&&(e=0):n<e&&(e=n),(t=void 0===t?n:~~t)<0?(t+=n)<0&&(t=0):n<t&&(t=n),t<e&&(t=e);var r=this.subarray(e,t);return Object.setPrototypeOf(r,D.prototype),r},D.prototype.readUIntLE=function(e,t,n){e>>>=0,t>>>=0,n||T(e,t,this.length);for(var r=this[e],o=1,i=0;++i<t&&(o*=256);)r+=this[e+i]*o;return r},D.prototype.readUIntBE=function(e,t,n){e>>>=0,t>>>=0,n||T(e,t,this.length);for(var r=this[e+--t],o=1;0<t&&(o*=256);)r+=this[e+--t]*o;return r},D.prototype.readUInt8=function(e,t){return e>>>=0,t||T(e,1,this.length),this[e]},D.prototype.readUInt16LE=function(e,t){return e>>>=0,t||T(e,2,this.length),this[e]|this[e+1]<<8},D.prototype.readUInt16BE=function(e,t){return e>>>=0,t||T(e,2,this.length),this[e]<<8|this[e+1]},D.prototype.readUInt32LE=function(e,t){return e>>>=0,t||T(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},D.prototype.readUInt32BE=function(e,t){return e>>>=0,t||T(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},D.prototype.readIntLE=function(e,t,n){e>>>=0,t>>>=0,n||T(e,t,this.length);for(var r=this[e],o=1,i=0;++i<t&&(o*=256);)r+=this[e+i]*o;return(o*=128)<=r&&(r-=Math.pow(2,8*t)),r},D.prototype.readIntBE=function(e,t,n){e>>>=0,t>>>=0,n||T(e,t,this.length);for(var r=t,o=1,i=this[e+--r];0<r&&(o*=256);)i+=this[e+--r]*o;return(o*=128)<=i&&(i-=Math.pow(2,8*t)),i},D.prototype.readInt8=function(e,t){return e>>>=0,t||T(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},D.prototype.readInt16LE=function(e,t){e>>>=0,t||T(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},D.prototype.readInt16BE=function(e,t){e>>>=0,t||T(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},D.prototype.readInt32LE=function(e,t){return e>>>=0,t||T(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},D.prototype.readInt32BE=function(e,t){return e>>>=0,t||T(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},D.prototype.readFloatLE=function(e,t){return e>>>=0,t||T(e,4,this.length),i.read(this,e,!0,23,4)},D.prototype.readFloatBE=function(e,t){return e>>>=0,t||T(e,4,this.length),i.read(this,e,!1,23,4)},D.prototype.readDoubleLE=function(e,t){return e>>>=0,t||T(e,8,this.length),i.read(this,e,!0,52,8)},D.prototype.readDoubleBE=function(e,t){return e>>>=0,t||T(e,8,this.length),i.read(this,e,!1,52,8)},D.prototype.writeUIntLE=function(e,t,n,r){e=+e,t>>>=0,n>>>=0,r||A(this,e,t,n,Math.pow(2,8*n)-1,0);var o=1,i=0;for(this[t]=255&e;++i<n&&(o*=256);)this[t+i]=e/o&255;return t+n},D.prototype.writeUIntBE=function(e,t,n,r){e=+e,t>>>=0,n>>>=0,r||A(this,e,t,n,Math.pow(2,8*n)-1,0);var o=n-1,i=1;for(this[t+o]=255&e;0<=--o&&(i*=256);)this[t+o]=e/i&255;return t+n},D.prototype.writeUInt8=function(e,t,n){return e=+e,t>>>=0,n||A(this,e,t,1,255,0),this[t]=255&e,t+1},D.prototype.writeUInt16LE=function(e,t,n){return e=+e,t>>>=0,n||A(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},D.prototype.writeUInt16BE=function(e,t,n){return e=+e,t>>>=0,n||A(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},D.prototype.writeUInt32LE=function(e,t,n){return e=+e,t>>>=0,n||A(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},D.prototype.writeUInt32BE=function(e,t,n){return e=+e,t>>>=0,n||A(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},D.prototype.writeIntLE=function(e,t,n,r){var o;e=+e,t>>>=0,r||A(this,e,t,n,(o=Math.pow(2,8*n-1))-1,-o);var i=0,u=1,s=0;for(this[t]=255&e;++i<n&&(u*=256);)e<0&&0===s&&0!==this[t+i-1]&&(s=1),this[t+i]=(e/u>>0)-s&255;return t+n},D.prototype.writeIntBE=function(e,t,n,r){var o;e=+e,t>>>=0,r||A(this,e,t,n,(o=Math.pow(2,8*n-1))-1,-o);var i=n-1,u=1,s=0;for(this[t+i]=255&e;0<=--i&&(u*=256);)e<0&&0===s&&0!==this[t+i+1]&&(s=1),this[t+i]=(e/u>>0)-s&255;return t+n},D.prototype.writeInt8=function(e,t,n){return e=+e,t>>>=0,n||A(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},D.prototype.writeInt16LE=function(e,t,n){return e=+e,t>>>=0,n||A(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},D.prototype.writeInt16BE=function(e,t,n){return e=+e,t>>>=0,n||A(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},D.prototype.writeInt32LE=function(e,t,n){return e=+e,t>>>=0,n||A(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},D.prototype.writeInt32BE=function(e,t,n){return e=+e,t>>>=0,n||A(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},D.prototype.writeFloatLE=function(e,t,n){return k(this,e,t,!0,n)},D.prototype.writeFloatBE=function(e,t,n){return k(this,e,t,!1,n)},D.prototype.writeDoubleLE=function(e,t,n){return P(this,e,t,!0,n)},D.prototype.writeDoubleBE=function(e,t,n){return P(this,e,t,!1,n)},D.prototype.copy=function(e,t,n,r){if(!D.isBuffer(e))throw new TypeError("argument should be a Buffer");if(n=n||0,r||0===r||(r=this.length),t>=e.length&&(t=e.length),t=t||0,0<r&&r<n&&(r=n),r===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);var o=r-n;if(this===e&&"function"==typeof Uint8Array.prototype.copyWithin)this.copyWithin(t,n,r);else if(this===e&&n<t&&t<r)for(var i=o-1;0<=i;--i)e[i+t]=this[i+n];else Uint8Array.prototype.set.call(e,this.subarray(n,r),t);return o},D.prototype.fill=function(e,t,n,r){if("string"==typeof e){if("string"==typeof t?(r=t,t=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!D.isEncoding(r))throw new TypeError("Unknown encoding: "+r);var o;1===e.length&&(o=e.charCodeAt(0),("utf8"===r&&o<128||"latin1"===r)&&(e=o))}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;var i;if(t>>>=0,n=void 0===n?this.length:n>>>0,"number"==typeof(e=e||0))for(i=t;i<n;++i)this[i]=e;else{var u=D.isBuffer(e)?e:D.from(e,r),s=u.length;if(0===s)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(i=0;i<n-t;++i)this[i+t]=u[i%s]}return this};var t=/[^+/0-9A-Za-z-_]/g;function O(e,t){var n;t=t||1/0;for(var r=e.length,o=null,i=[],u=0;u<r;++u){if(55295<(n=e.charCodeAt(u))&&n<57344){if(!o){if(56319<n){-1<(t-=3)&&i.push(239,191,189);continue}if(u+1===r){-1<(t-=3)&&i.push(239,191,189);continue}o=n;continue}if(n<56320){-1<(t-=3)&&i.push(239,191,189),o=n;continue}n=65536+(o-55296<<10|n-56320)}else o&&-1<(t-=3)&&i.push(239,191,189);if(o=null,n<128){if(--t<0)break;i.push(n)}else if(n<2048){if((t-=2)<0)break;i.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;i.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;i.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return i}function I(e){return r.toByteArray(function(e){if((e=(e=e.split("=")[0]).trim().replace(t,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function x(e,t,n,r){for(var o=0;o<r&&!(o+n>=t.length||o>=e.length);++o)t[o+n]=e[o];return o}function M(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function _(e){return e!=e}var j=function(){for(var e="0123456789abcdef",t=new Array(256),n=0;n<16;++n)for(var r=16*n,o=0;o<16;++o)t[r+o]=e[n]+e[o];return t}()}).call(this,H("buffer").Buffer)},{"base64-js":26,buffer:27,ieee754:28}],28:[function(e,t,n){n.read=function(e,t,n,r,o){var i,u,s=8*o-r-1,a=(1<<s)-1,c=a>>1,l=-7,D=n?o-1:0,p=n?-1:1,f=e[t+D];for(D+=p,i=f&(1<<-l)-1,f>>=-l,l+=s;0<l;i=256*i+e[t+D],D+=p,l-=8);for(u=i&(1<<-l)-1,i>>=-l,l+=r;0<l;u=256*u+e[t+D],D+=p,l-=8);if(0===i)i=1-c;else{if(i===a)return u?NaN:1/0*(f?-1:1);u+=Math.pow(2,r),i-=c}return(f?-1:1)*u*Math.pow(2,i-r)},n.write=function(e,t,n,r,o,i){var u,s,a,c=8*i-o-1,l=(1<<c)-1,D=l>>1,p=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,f=r?0:i-1,h=r?1:-1,d=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(s=isNaN(t)?1:0,u=l):(u=Math.floor(Math.log(t)/Math.LN2),t*(a=Math.pow(2,-u))<1&&(u--,a*=2),2<=(t+=1<=u+D?p/a:p*Math.pow(2,1-D))*a&&(u++,a/=2),l<=u+D?(s=0,u=l):1<=u+D?(s=(t*a-1)*Math.pow(2,o),u+=D):(s=t*Math.pow(2,D-1)*Math.pow(2,o),u=0));8<=o;e[n+f]=255&s,f+=h,s/=256,o-=8);for(u=u<<o|s,c+=o;0<c;e[n+f]=255&u,f+=h,u/=256,c-=8);e[n+f-h]|=128*d}},{}],29:[function(e,t,n){var r,o,i=t.exports={};function u(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(t){if(r===setTimeout)return setTimeout(t,0);if((r===u||!r)&&setTimeout)return r=setTimeout,setTimeout(t,0);try{return r(t,0)}catch(e){try{return r.call(null,t,0)}catch(e){return r.call(this,t,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:u}catch(e){r=u}try{o="function"==typeof clearTimeout?clearTimeout:s}catch(e){o=s}}();var c,l=[],D=!1,p=-1;function f(){D&&c&&(D=!1,c.length?l=c.concat(l):p=-1,l.length&&h())}function h(){if(!D){var e=a(f);D=!0;for(var t=l.length;t;){for(c=l,l=[];++p<t;)c&&c[p].run();p=-1,t=l.length}c=null,D=!1,function(t){if(o===clearTimeout)return clearTimeout(t);if((o===s||!o)&&clearTimeout)return o=clearTimeout,clearTimeout(t);try{o(t)}catch(e){try{return o.call(null,t)}catch(e){return o.call(this,t)}}}(e)}}function d(e,t){this.fun=e,this.array=t}function g(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(1<arguments.length)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];l.push(new d(e,t)),1!==l.length||D||a(h)},d.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=g,i.addListener=g,i.once=g,i.off=g,i.removeListener=g,i.removeAllListeners=g,i.emit=g,i.prependListener=g,i.prependOnceListener=g,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},{}],30:[function(I,e,x){(function(ee){"use strict";Object.defineProperty(x,"__esModule",{value:!0});var te=I("@popperjs/core"),ne={passive:!0},re="tippy-iOS",r="tippy-content",s="tippy-backdrop",o="tippy-arrow",i="tippy-svg-arrow";function oe(e,t,n){if(Array.isArray(e)){var r=e[t];return null==r?Array.isArray(n)?n[t]:n:r}return e}function t(e,t){var n={}.toString.call(e);return 0===n.indexOf("[object")&&-1<n.indexOf(t+"]")}function ie(e,t){return"function"==typeof e?e.apply(void 0,t):e}function ue(t,n){return 0===n?t:function(e){clearTimeout(r),r=setTimeout(function(){t(e)},n)};var r}function D(e,t){var n=Object.assign({},e);return t.forEach(function(e){delete n[e]}),n}function se(e){return[].concat(e)}function ae(e,t){-1===e.indexOf(t)&&e.push(t)}function ce(e){return e.split("-")[0]}function le(e){return[].slice.call(e)}function De(){return document.createElement("div")}function p(e){return t(e,"Element")}function pe(e){return t(e,"MouseEvent")}function u(e){return e&&e._tippy&&e._tippy.reference===e}function f(e){return p(e)?[e]:t(e,"NodeList")?le(e):Array.isArray(e)?e:le(document.querySelectorAll(e))}function fe(e,t){e.forEach(function(e){e&&(e.style.transitionDuration=t+"ms")})}function he(e,t){e.forEach(function(e){e&&e.setAttribute("data-state",t)})}function de(e){var t=se(e)[0];return t&&t.ownerDocument||document}function ge(t,e,n){var r=e+"EventListener";["transitionend","webkitTransitionEnd"].forEach(function(e){t[r](e,n)})}var ve={isTouch:!1},n=0;function h(){ve.isTouch||(ve.isTouch=!0,window.performance&&document.addEventListener("mousemove",a))}function a(){var e=performance.now();e-n<20&&(ve.isTouch=!1,document.removeEventListener("mousemove",a)),n=e}function d(){var e,t=document.activeElement;u(t)&&(e=t._tippy,t.blur&&!e.state.isVisible&&t.blur())}var e="undefined"!=typeof window&&"undefined"!=typeof document,c=e?navigator.userAgent:"",me=/MSIE |Trident\//.test(c),ye=e&&/iPhone|iPad|iPod/.test(navigator.platform);function Fe(e){return[e+"() was called on a"+("destroy"===e?"n already-":" ")+"destroyed instance. This is a no-op but","indicates a potential memory leak."].join(" ")}function l(e){return e.replace(/[ \t]{2,}/g," ").replace(/^[ \t]*/gm,"").trim()}function g(e){return[l("\n  %ctippy.js\n\n  %c"+l(e)+"\n\n  %c👷‍ This is a development-only message. It will be removed in production.\n  "),"color: #00C584; font-size: 1.3em; font-weight: bold;","line-height: 1.5","color: #a6a095;"]}function Ee(e,t){var n;e&&(n=console).warn.apply(n,g(t))}function be(e,t){var n;e&&(n=console).error.apply(n,g(t))}var v={animateFill:!1,followCursor:!1,inlinePositioning:!1,sticky:!1},Ce=Object.assign({appendTo:function(){return document.body},aria:{content:"auto",expanded:"auto"},content:"",delay:0,duration:[300,250],getReferenceClientRect:null,hideOnClick:!0,ignoreAttributes:!1,interactive:!1,interactiveBorder:2,interactiveDebounce:0,moveTransition:"",offset:[0,10],onAfterUpdate:function(){},onBeforeUpdate:function(){},onCreate:function(){},onDestroy:function(){},onHidden:function(){},onHide:function(){},onMount:function(){},onShow:function(){},onShown:function(){},onTrigger:function(){},onUntrigger:function(){},onClickOutside:function(){},placement:"top",plugins:[],popperOptions:{},render:null,showOnCreate:!1,touch:!0,trigger:"mouseenter focus",triggerTarget:null},v,{},{allowHTML:!1,animation:"fade",arrow:!0,content:"",inertia:!1,maxWidth:350,role:"tooltip",theme:"",zIndex:9999}),m=Object.keys(Ce);function we(o){var e=(o.plugins||[]).reduce(function(e,t){var n=t.name,r=t.defaultValue;return n&&(e[n]=void 0!==o[n]?o[n]:r),e},{});return Object.assign({},o,{},e)}function Be(e,t){var o,n,r=Object.assign({},t,{content:ie(t.content,[e])},t.ignoreAttributes?{}:(o=e,((n=t.plugins)?Object.keys(we(Object.assign({},Ce,{plugins:n}))):m).reduce(function(t,n){var r=(o.getAttribute("data-tippy-"+n)||"").trim();if(!r)return t;if("content"===n)t[n]=r;else try{t[n]=JSON.parse(r)}catch(e){t[n]=r}return t},{})));return r.aria=Object.assign({},Ce.aria,{},r.aria),r.aria={expanded:"auto"===r.aria.expanded?t.interactive:r.aria.expanded,content:"auto"===r.aria.content?t.interactive?null:"describedby":r.aria.content},r}function y(e,o){void 0===e&&(e={}),void 0===o&&(o=[]),Object.keys(e).forEach(function(t){var e,n,r=D(Ce,Object.keys(v));Ee((e=r,n=t,!{}.hasOwnProperty.call(e,n))&&0===o.filter(function(e){return e.name===t}).length,["`"+t+"`","is not a valid prop. You may have spelled it incorrectly, or if it's","a plugin, forgot to pass it in an array as props.plugins.","\n\n","All props: https://atomiks.github.io/tippyjs/v6/all-props/\n","Plugins: https://atomiks.github.io/tippyjs/v6/plugins/"].join(" "))})}var F=function(){return"innerHTML"};function E(e,t){e[F()]=t}function b(e){var t=De();return!0===e?t.className=o:(t.className=i,p(e)?t.appendChild(e):E(t,e)),t}function C(e,t){p(t.content)?(E(e,""),e.appendChild(t.content)):"function"!=typeof t.content&&(t.allowHTML?E(e,t.content):e.textContent=t.content)}function Le(e){var t=e.firstElementChild,n=le(t.children);return{box:t,content:n.find(function(e){return e.classList.contains(r)}),arrow:n.find(function(e){return e.classList.contains(o)||e.classList.contains(i)}),backdrop:n.find(function(e){return e.classList.contains(s)})}}function w(u){var s=De(),e=De();e.className="tippy-box",e.setAttribute("data-state","hidden"),e.setAttribute("tabindex","-1");var t=De();function n(e,t){var n=Le(s),r=n.box,o=n.content,i=n.arrow;t.theme?r.setAttribute("data-theme",t.theme):r.removeAttribute("data-theme"),"string"==typeof t.animation?r.setAttribute("data-animation",t.animation):r.removeAttribute("data-animation"),t.inertia?r.setAttribute("data-inertia",""):r.removeAttribute("data-inertia"),r.style.maxWidth="number"==typeof t.maxWidth?t.maxWidth+"px":t.maxWidth,t.role?r.setAttribute("role",t.role):r.removeAttribute("role"),e.content!==t.content&&C(o,u.props),t.arrow?i?e.arrow!==t.arrow&&(r.removeChild(i),r.appendChild(b(t.arrow))):r.appendChild(b(t.arrow)):i&&r.removeChild(i)}return t.className=r,t.setAttribute("data-state","hidden"),C(t,u.props),s.appendChild(e),e.appendChild(t),n(u.props,u.props),{popper:s,onUpdate:n}}w.$$tippy=!0;var Te=1,Ae=[],Se=[];function B(D,e){var i,n,r,u,o,p,s,a,c=Be(D,Object.assign({},Ce,{},we(e))),l=!1,f=!1,h=!1,d=[],g=ue(z,c.interactiveDebounce),v=de(c.triggerTarget||D),t=Te++,m=(a=c.plugins).filter(function(e,t){return a.indexOf(e)===t}),y={id:t,reference:D,popper:De(),popperInstance:null,props:c,state:{isEnabled:!0,isVisible:!1,isDestroyed:!1,isMounted:!1,isShown:!1},plugins:m,clearDelayTimeouts:function(){clearTimeout(i),clearTimeout(n),cancelAnimationFrame(r)},setProps:function(e){"production"!==ee.env.NODE_ENV&&Ee(y.state.isDestroyed,Fe("setProps"));if(y.state.isDestroyed)return;I("onBeforeUpdate",[y,e]),q();var t=y.props,n=Be(D,Object.assign({},y.props,{},e,{ignoreAttributes:!0}));y.props=n,W(),t.interactiveDebounce!==n.interactiveDebounce&&(_(),g=ue(z,n.interactiveDebounce));t.triggerTarget&&!n.triggerTarget?se(t.triggerTarget).forEach(function(e){e.removeAttribute("aria-expanded")}):n.triggerTarget&&D.removeAttribute("aria-expanded");M(),P(),b&&b(t,n);y.popperInstance&&(G(),$().forEach(function(e){requestAnimationFrame(e._tippy.popperInstance.forceUpdate)}));I("onAfterUpdate",[y,e])},setContent:function(e){y.setProps({content:e})},show:function(){"production"!==ee.env.NODE_ENV&&Ee(y.state.isDestroyed,Fe("show"));var e=y.state.isVisible,t=y.state.isDestroyed,n=!y.state.isEnabled,r=ve.isTouch&&!y.props.touch,o=oe(y.props.duration,0,Ce.duration);if(e||t||n||r)return;if(A().hasAttribute("disabled"))return;if(I("onShow",[y],!1),!1===y.props.onShow(y))return;y.state.isVisible=!0,T()&&(E.style.visibility="visible");P(),H(),y.state.isMounted||(E.style.transition="none");{var i,u,s;T()&&(i=S(),u=i.box,s=i.content,fe([u,s],0))}p=function(){var e,t,n;y.state.isVisible&&!h&&(h=!0,E.offsetHeight,E.style.transition=y.props.moveTransition,T()&&y.props.animation&&(fe([t=(e=S()).box,n=e.content],o),he([t,n],"visible")),x(),M(),ae(Se,y),O(!0),y.state.isMounted=!0,I("onMount",[y]),y.props.animation&&T()&&N(o,function(){y.state.isShown=!0,I("onShown",[y])}))},function(){var e,t=y.props.appendTo,n=A();e=y.props.interactive&&t===Ce.appendTo||"parent"===t?n.parentNode:ie(t,[n]);e.contains(E)||e.appendChild(E);G(),"production"!==ee.env.NODE_ENV&&Ee(y.props.interactive&&t===Ce.appendTo&&n.nextElementSibling!==E,["Interactive tippy element may not be accessible via keyboard","navigation because it is not directly after the reference element","in the DOM source order.","\n\n","Using a wrapper <div> or <span> tag around the reference element","solves this by creating a new parentNode context.","\n\n","Specifying `appendTo: document.body` silences this warning, but it","assumes you are using a focus management solution to handle","keyboard navigation.","\n\n","See: https://atomiks.github.io/tippyjs/v6/accessibility/#interactivity"].join(" "))}()},hide:function(){"production"!==ee.env.NODE_ENV&&Ee(y.state.isDestroyed,Fe("hide"));var e=!y.state.isVisible,t=y.state.isDestroyed,n=!y.state.isEnabled,r=oe(y.props.duration,1,Ce.duration);if(e||t||n)return;if(I("onHide",[y],!1),!1===y.props.onHide(y))return;y.state.isVisible=!1,y.state.isShown=!1,h=!1,T()&&(E.style.visibility="hidden");{var o,i,u;_(),R(),P(),T()&&(o=S(),i=o.box,u=o.content,y.props.animation&&(fe([i,u],r),he([i,u],"hidden")))}x(),M(),y.props.animation?T()&&function(e,t){N(e,function(){!y.state.isVisible&&E.parentNode&&E.parentNode.contains(E)&&t()})}(r,y.unmount):y.unmount()},enable:function(){y.state.isEnabled=!0},disable:function(){y.hide(),y.state.isEnabled=!1},unmount:function(){y.state.isVisible&&y.hide();if(!y.state.isMounted)return;Q(),$().forEach(function(e){e._tippy.unmount()}),E.parentNode&&E.parentNode.removeChild(E);0===(Se=Se.filter(function(e){return e!==y})).length&&O(!1);y.state.isMounted=!1,I("onHidden",[y])},destroy:function(){"production"!==ee.env.NODE_ENV&&Ee(y.state.isDestroyed,Fe("destroy"));if(y.state.isDestroyed)return;y.clearDelayTimeouts(),y.unmount(),q(),delete D._tippy,y.state.isDestroyed=!0,I("onDestroy",[y])}};if(!c.render)return"production"!==ee.env.NODE_ENV&&be(!0,"render() function has not been supplied."),y;var F=c.render(y),E=F.popper,b=F.onUpdate;E.setAttribute("data-tippy-root",""),E.id="tippy-"+y.id,y.popper=E,D._tippy=y,E._tippy=y;var C=m.map(function(e){return e.fn(y)}),w=D.hasAttribute("aria-expanded");return W(),M(),P(),I("onCreate",[y]),c.showOnCreate&&K(),E.addEventListener("mouseenter",function(){y.props.interactive&&y.state.isVisible&&y.clearDelayTimeouts()}),E.addEventListener("mouseleave",function(e){y.props.interactive&&0<=y.props.trigger.indexOf("mouseenter")&&(v.addEventListener("mousemove",g),g(e))}),y;function B(){var e=y.props.touch;return Array.isArray(e)?e:[e,0]}function L(){return"hold"===B()[0]}function T(){var e;return null!=(e=y.props.render)&&e.$$tippy}function A(){return s||D}function S(){return Le(E)}function k(e){return y.state.isMounted&&!y.state.isVisible||ve.isTouch||u&&"focus"===u.type?0:oe(y.props.delay,e?0:1,Ce.delay)}function P(){E.style.pointerEvents=y.props.interactive&&y.state.isVisible?"":"none",E.style.zIndex=""+y.props.zIndex}function O(e){var t=e&&ye&&ve.isTouch;v.body.classList[t?"add":"remove"](re)}function I(t,n,e){var r;void 0===e&&(e=!0),C.forEach(function(e){e[t]&&e[t].apply(void 0,n)}),e&&(r=y.props)[t].apply(r,n)}function x(){var r,o,e=y.props.aria;e.content&&(r="aria-"+e.content,o=E.id,se(y.props.triggerTarget||D).forEach(function(e){var t,n=e.getAttribute(r);y.state.isVisible?e.setAttribute(r,n?n+" "+o:o):(t=n&&n.replace(o,"").trim())?e.setAttribute(r,t):e.removeAttribute(r)}))}function M(){!w&&y.props.aria.expanded&&se(y.props.triggerTarget||D).forEach(function(e){y.props.interactive?e.setAttribute("aria-expanded",y.state.isVisible&&e===A()?"true":"false"):e.removeAttribute("aria-expanded")})}function _(){v.body.removeEventListener("mouseleave",Z),v.removeEventListener("mousemove",g),Ae=Ae.filter(function(e){return e!==g})}function j(e){if(!y.props.interactive||!E.contains(e.target)){if(A().contains(e.target)){if(ve.isTouch)return;if(y.state.isVisible&&0<=y.props.trigger.indexOf("click"))return}else y.props.onClickOutside(y,e);!0===y.props.hideOnClick&&(l=!1,y.clearDelayTimeouts(),y.hide(),f=!0,setTimeout(function(){f=!1}),y.state.isMounted||R())}}function H(){v.addEventListener("mousedown",j,!0)}function R(){v.removeEventListener("mousedown",j,!0)}function N(e,t){var n=S().box;function r(e){e.target===n&&(ge(n,"remove",r),t())}if(0===e)return t();ge(n,"remove",o),ge(n,"add",r),o=r}function U(t,n,r){void 0===r&&(r=!1),se(y.props.triggerTarget||D).forEach(function(e){e.addEventListener(t,n,r),d.push({node:e,eventType:t,handler:n,options:r})})}function W(){L()&&(U("touchstart",V,ne),U("touchend",X,ne)),y.props.trigger.split(/\s+/).filter(Boolean).forEach(function(e){if("manual"!==e)switch(U(e,V),e){case"mouseenter":U("mouseleave",X);break;case"focus":U(me?"focusout":"blur",J);break;case"focusin":U("focusout",J)}})}function q(){d.forEach(function(e){var t=e.node,n=e.eventType,r=e.handler,o=e.options;t.removeEventListener(n,r,o)}),d=[]}function V(t){var e,n,r,o=!1;!y.state.isEnabled||Y(t)||f||(s=(u=t).currentTarget,M(),!y.state.isVisible&&pe(t)&&Ae.forEach(function(e){return e(t)}),"click"===t.type&&(y.props.trigger.indexOf("mouseenter")<0||l)&&!1!==y.props.hideOnClick&&y.state.isVisible?o=!0:(n=(e=B())[0],r=e[1],ve.isTouch&&"hold"===n&&r?i=setTimeout(function(){K(t)},r):K(t)),"click"===t.type&&(l=!o),o&&Z(t))}function z(e){var t,n,r,h,d,o=e.target,i=D.contains(o)||E.contains(o);"mousemove"===e.type&&i||(t=$().concat(E).map(function(e){var t,n=null==(t=e._tippy.popperInstance)?void 0:t.state;return n?{popperRect:e.getBoundingClientRect(),popperState:n,props:c}:null}).filter(Boolean),n=t,h=(r=e).clientX,d=r.clientY,n.every(function(e){var t=e.popperRect,n=e.popperState,r=e.props.interactiveBorder,o=ce(n.placement),i=n.modifiersData.offset;if(!i)return!0;var u="bottom"===o?i.top.y:0,s="top"===o?i.bottom.y:0,a="right"===o?i.left.x:0,c="left"===o?i.right.x:0,l=t.top-d+u>r,D=d-t.bottom-s>r,p=t.left-h+a>r,f=h-t.right-c>r;return l||D||p||f})&&(_(),Z(e)))}function X(e){if(!(Y(e)||0<=y.props.trigger.indexOf("click")&&l))return y.props.interactive?(v.body.addEventListener("mouseleave",Z),v.addEventListener("mousemove",g),ae(Ae,g),void g(e)):void Z(e)}function J(e){y.props.trigger.indexOf("focusin")<0&&e.target!==A()||y.props.interactive&&e.relatedTarget&&E.contains(e.relatedTarget)||Z(e)}function Y(e){return!!ve.isTouch&&L()!==0<=e.type.indexOf("touch")}function G(){Q();var e=y.props,t=e.popperOptions,n=e.placement,r=e.offset,o=e.getReferenceClientRect,i=e.moveTransition,u=T()?Le(E).arrow:null,s=o?{getBoundingClientRect:o}:D,a={name:"$$tippy",enabled:!0,phase:"beforeWrite",requires:["computeStyles"],fn:function(e){var t,n=e.state;T()&&(t=S().box,["placement","reference-hidden","escaped"].forEach(function(e){"placement"===e?t.setAttribute("data-placement",n.placement):n.attributes.popper["data-popper-"+e]?t.setAttribute("data-"+e,""):t.removeAttribute("data-"+e)}),n.attributes.popper={})}},c={name:"arrow",enabled:!!u,options:{element:u,padding:3}},l=[{name:"offset",options:{offset:r}},{name:"preventOverflow",options:{padding:{top:2,bottom:2,left:5,right:5}}},{name:"flip",options:{padding:5}},{name:"computeStyles",options:{adaptive:!i}}].concat(T()?[c]:[],(null==t?void 0:t.modifiers)||[],[a]);y.popperInstance=te.createPopper(s,E,Object.assign({},t,{placement:n,onFirstUpdate:p,modifiers:l}))}function Q(){y.popperInstance&&(y.popperInstance.destroy(),y.popperInstance=null)}function $(){return le(E.querySelectorAll("[data-tippy-root]"))}function K(e){y.clearDelayTimeouts(),e&&I("onTrigger",[y,e]),H();var t=k(!0);t?i=setTimeout(function(){y.show()},t):y.show()}function Z(e){var t;y.clearDelayTimeouts(),I("onUntrigger",[y,e]),y.state.isVisible?0<=y.props.trigger.indexOf("mouseenter")&&0<=y.props.trigger.indexOf("click")&&0<=["mouseleave","mousemove"].indexOf(e.type)&&l||((t=k(!1))?n=setTimeout(function(){y.state.isVisible&&y.hide()},t):r=requestAnimationFrame(function(){y.hide()})):R()}}function L(e,t){void 0===t&&(t={});var n,r,o,i=Ce.plugins.concat(t.plugins||[]);"production"!==ee.env.NODE_ENV&&(r=!(n=e),o="[object Object]"===Object.prototype.toString.call(n)&&!n.addEventListener,be(r,["tippy() was passed","`"+String(n)+"`","as its targets (first) argument. Valid types are: String, Element,","Element[], or NodeList."].join(" ")),be(o,["tippy() was passed a plain object which is not supported as an argument","for virtual positioning. Use props.getReferenceClientRect instead."].join(" ")),y(t,i)),document.addEventListener("touchstart",h,Object.assign({},ne,{capture:!0})),window.addEventListener("blur",d);var u,s,a=Object.assign({},t,{plugins:i}),c=f(e);"production"!==ee.env.NODE_ENV&&(u=p(a.content),s=1<c.length,Ee(u&&s,["tippy() was passed an Element as the `content` prop, but more than","one tippy instance was created by this invocation. This means the","content element will only be appended to the last tippy instance.","\n\n","Instead, pass the .innerHTML of the element, or use a function that","returns a cloned version of the element instead.","\n\n","1) content: element.innerHTML\n","2) content: () => element.cloneNode(true)"].join(" ")));var l=c.reduce(function(e,t){var n=t&&B(t,a);return n&&e.push(n),e},[]);return p(e)?l[0]:l}L.defaultProps=Ce,L.setDefaultProps=function(t){"production"!==ee.env.NODE_ENV&&y(t,[]),Object.keys(t).forEach(function(e){Ce[e]=t[e]})},L.currentInput=ve;var T={mouseover:"mouseenter",focusin:"focus",click:"click"};var A={name:"animateFill",defaultValue:!1,fn:function(e){var t;if(null==(t=e.props.render)||!t.$$tippy)return"production"!==ee.env.NODE_ENV&&be(e.props.animateFill,"The `animateFill` plugin requires the default render function."),{};var n,r=Le(e.popper),o=r.box,i=r.content,u=e.props.animateFill?((n=De()).className=s,he([n],"hidden"),n):null;return{onCreate:function(){u&&(o.insertBefore(u,o.firstElementChild),o.setAttribute("data-animatefill",""),o.style.overflow="hidden",e.setProps({arrow:!1,animation:"shift-away"}))},onMount:function(){var e,t;u&&(e=o.style.transitionDuration,t=Number(e.replace("ms","")),i.style.transitionDelay=Math.round(t/10)+"ms",u.style.transitionDuration=e,he([u],"visible"))},onShow:function(){u&&(u.style.transitionDuration="0ms")},onHide:function(){u&&he([u],"hidden")}}}};var S={name:"followCursor",defaultValue:!1,fn:function(r){var p=r.reference,e=de(r.props.triggerTarget||p),o=null;function t(){return"manual"===r.props.trigger.trim()}function n(){var e=!!t()||null!==o&&!(0===o.clientX&&0===o.clientY);return r.props.followCursor&&e}function i(e){e&&r.setProps({getReferenceClientRect:null})}function u(){n()?e.addEventListener("mousemove",s):i(r.props.followCursor)}function f(){e.removeEventListener("mousemove",s)}function s(e){o={clientX:e.clientX,clientY:e.clientY};var t=!e.target||p.contains(e.target),s=r.props.followCursor,a=e.clientX,c=e.clientY,n=p.getBoundingClientRect(),l=a-n.left,D=c-n.top;!t&&r.props.interactive||r.setProps({getReferenceClientRect:function(){var e=p.getBoundingClientRect(),t=a,n=c;"initial"===s&&(t=e.left+l,n=e.top+D);var r="horizontal"===s?e.top:n,o="vertical"===s?e.right:t,i="horizontal"===s?e.bottom:n,u="vertical"===s?e.left:t;return{width:o-u,height:i-r,top:r,right:o,bottom:i,left:u}}}),(ve.isTouch||"initial"===r.props.followCursor&&r.state.isVisible)&&f()}return{onAfterUpdate:function(e,t){var n=t.followCursor;void 0===n||n||i(!0)},onMount:function(){n()&&s(o)},onShow:function(){t()&&(o={clientX:0,clientY:0},u())},onTrigger:function(e,t){o||(pe(t)&&(o={clientX:t.clientX,clientY:t.clientY}),u())},onUntrigger:function(){r.state.isVisible||(f(),o=null)},onHidden:function(){f(),o=null}}}},k={name:"inlinePositioning",defaultValue:!1,fn:function(n){var r,o=n.reference;var t={name:"tippyInlinePositioning",enabled:!0,phase:"afterWrite",fn:function(e){var t=e.state;n.props.inlinePositioning&&(r!==t.placement&&n.setProps({getReferenceClientRect:function(){return function(t,e,n){if(n.length<2||null===t)return e;switch(t){case"top":case"bottom":var r=n[0],o=n[n.length-1],i="top"===t,u=r.top,s=o.bottom,a=i?r.left:o.left,c=i?r.right:o.right;return{top:u,bottom:s,left:a,right:c,width:c-a,height:s-u};case"left":case"right":var l=Math.min.apply(Math,n.map(function(e){return e.left})),D=Math.max.apply(Math,n.map(function(e){return e.right})),p=n.filter(function(e){return"left"===t?e.left===l:e.right===D}),f=p[0].top,h=p[p.length-1].bottom;return{top:f,bottom:h,left:l,right:D,width:D-l,height:h-f};default:return e}}(ce(t.placement),o.getBoundingClientRect(),le(o.getClientRects()))}}),r=t.placement)}};return{onCreate:function(){var e;n.setProps({popperOptions:Object.assign({},n.props.popperOptions,{modifiers:[].concat((null==(e=n.props.popperOptions)?void 0:e.modifiers)||[],[t])})})}}}};var P={name:"sticky",defaultValue:!1,fn:function(n){var r=n.reference,o=n.popper;function i(e){return!0===n.props.sticky||n.props.sticky===e}var u=null,s=null;function a(){var e=i("reference")?(n.popperInstance?n.popperInstance.state.elements.reference:r).getBoundingClientRect():null,t=i("popper")?o.getBoundingClientRect():null;(e&&O(u,e)||t&&O(s,t))&&n.popperInstance&&n.popperInstance.update(),u=e,s=t,n.state.isMounted&&requestAnimationFrame(a)}return{onMount:function(){n.props.sticky&&a()}}}};function O(e,t){return!e||!t||(e.top!==t.top||e.right!==t.right||e.bottom!==t.bottom||e.left!==t.left)}L.setDefaultProps({render:w}),x.animateFill=A,x.createSingleton=function(i,u){var s;void 0===u&&(u={}),"production"!==ee.env.NODE_ENV&&be(!Array.isArray(i),["The first argument passed to createSingleton() must be an array of","tippy instances. The passed value was",String(i)].join(" ")),i.forEach(function(e){e.disable()});var a=i.map(function(e){return e.reference}),e={fn:function(){return{onDestroy:function(){i.forEach(function(e){e.enable()})},onTrigger:function(e,t){var n,r=t.currentTarget,o=a.indexOf(r);r!==s&&(s=r,n=(u.overrides||[]).concat("content").reduce(function(e,t){return e[t]=i[o].props[t],e},{}),e.setProps(Object.assign({},n,{getReferenceClientRect:function(){return r.getBoundingClientRect()}})))}}}};return L(De(),Object.assign({},D(u,["overrides"]),{plugins:[e].concat(u.plugins||[]),triggerTarget:a}))},x.default=L,x.delegate=function(e,r){"production"!==ee.env.NODE_ENV&&be(!(r&&r.target),["You must specity a `target` prop indicating a CSS selector string matching","the target elements that should receive a tippy."].join(" "));var o=[],i=[],u=r.target,t=D(r,["target"]),n=Object.assign({},t,{trigger:"manual"}),s=Object.assign({},t,{showOnCreate:!0}),a=L(e,n);function c(e){var t,n;!e.target||(t=e.target.closest(u))&&((t.getAttribute("data-tippy-trigger")||r.trigger||Ce.trigger).indexOf(T[e.type])<0||t._tippy||(n=L(t,s))&&(i=i.concat(n)))}function l(e,t,n,r){void 0===r&&(r=!1),e.addEventListener(t,n,r),o.push({node:e,eventType:t,handler:n,options:r})}return se(a).forEach(function(e){var t,n=e.destroy;e.destroy=function(e){void 0===e&&(e=!0),e&&i.forEach(function(e){e.destroy()}),i=[],o.forEach(function(e){var t=e.node,n=e.eventType,r=e.handler,o=e.options;t.removeEventListener(n,r,o)}),o=[],n()},l(t=e.reference,"mouseover",c),l(t,"focusin",c),l(t,"click",c)}),a},x.followCursor=S,x.hideAll=function(e){var t=void 0===e?{}:e,r=t.exclude,o=t.duration;Se.forEach(function(e){var t,n=!1;r&&(n=u(r)?e.reference===r:e.popper===r.popper),n||(t=e.props.duration,e.setProps({duration:o}),e.hide(),e.state.isDestroyed||e.setProps({duration:t}))})},x.inlinePositioning=k,x.roundArrow='<svg width="16" height="6" xmlns="http://www.w3.org/2000/svg"><path d="M0 6s1.796-.013 4.67-3.615C5.851.9 6.93.006 8 0c1.07-.006 2.148.887 3.343 2.385C14.233 6.005 16 6 16 6H0z"></svg>',x.sticky=P}).call(this,I("_process"))},{"@popperjs/core":25,_process:29}]},{},[1]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
