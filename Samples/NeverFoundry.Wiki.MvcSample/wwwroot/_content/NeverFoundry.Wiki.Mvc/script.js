!function i(a,s,c){function u(t,e){if(!s[t]){if(!a[t]){var n="function"==typeof require&&require;if(!e&&n)return n(t,!0);if(p)return p(t,!0);var r=new Error("Cannot find module '"+t+"'");throw r.code="MODULE_NOT_FOUND",r}var o=s[t]={exports:{}};a[t][0].call(o.exports,function(e){return u(a[t][1][e]||e)},o,o.exports,i,a,s,c)}return s[t].exports}for(var p="function"==typeof require&&require,e=0;e<c.length;e++)u(c[e]);return u}({1:[function(e,t,n){"use strict";var r,o=e("@babel/runtime/helpers/interopRequireDefault"),a=o(e("@babel/runtime/regenerator")),i=o(e("@babel/runtime/helpers/asyncToGenerator")),s=o(e("tippy.js"));window.addEventListener("load",function(){window.wikiAutosuggestXHR=new XMLHttpRequest;var e=this.document.getElementById("searchInput");e&&e.addEventListener("keyup",function(e){var n,t=e.target;t.value.length<3||(n=document.getElementById("searchSuggestions"))&&(window.wikiAutosuggestXHR.abort(),window.wikiAutosuggestXHR.onreadystatechange=function(){var e;4==this.readyState&&200==this.status&&(e=JSON.parse(this.responseText),n.innerHTML="",e.forEach(function(e){var t=document.createElement("option");t.value=e,n.appendChild(t)}))},window.wikiAutosuggestXHR.open("GET","/wiki/api/suggest?search="+encodeURIComponent(t.value),!0),window.wikiAutosuggestXHR.send())})}),window.wikimvc={tmr:-1,showPreview:(r=(0,i.default)(a.default.mark(function e(t,n){var r,o,i;return a.default.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(t=t||window.event,null==(r=t.currentTarget)||r._tippy)return e.abrupt("return");e.next=4;break;case 4:(o=new FormData).append("link",n),i=(0,s.default)(r,{content:"Loading preview...",delay:[1500,null],placement:"auto",allowHTML:!0,onCreate:function(e){e._isFetching=!1,e._loaded=!1},onShow:function(t){t._isFetching||t._loaded||(t._isFetching=!0,fetch("/wiki/api/preview",{method:"POST",body:o,headers:{Accept:"application/json"}}).then(function(e){return e.json()}).then(function(e){e.length<1?(t.hide(),t.disable()):t.setContent(e)}).catch(function(e){t.setContent("Preview failed to load")}).finally(function(){t._loaded=!0,t._isFetching=!1,t.setProps({delay:[750,null]})}))}}),window.wikimvc.tmr=setTimeout(function(){i.show()},1500);case 8:case"end":return e.stop()}},e)})),function(e,t){return r.apply(this,arguments)}),hidePreview:function(){-1!==window.wikimvc.tmr&&(clearTimeout(window.wikimvc.tmr),window.wikimvc.tmr=-1)},showHideMessage:function(e){parseInt(getComputedStyle(e).getPropertyValue("height"))<parseInt(getComputedStyle(e).getPropertyValue("max-height"))&&e.parentElement.classList.remove("collapsible")}}},{"@babel/runtime/helpers/asyncToGenerator":2,"@babel/runtime/helpers/interopRequireDefault":3,"@babel/runtime/regenerator":4,"tippy.js":8}],2:[function(e,t,n){function c(e,t,n,r,o,i,a){try{var s=e[i](a),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(r,o)}t.exports=function(s){return function(){var e=this,a=arguments;return new Promise(function(t,n){var r=s.apply(e,a);function o(e){c(r,t,n,o,i,"next",e)}function i(e){c(r,t,n,o,i,"throw",e)}o(void 0)})}}},{}],3:[function(e,t,n){t.exports=function(e){return e&&e.__esModule?e:{default:e}}},{}],4:[function(e,t,n){t.exports=e("regenerator-runtime")},{"regenerator-runtime":7}],5:[function(e,t,c){(function(w){"use strict";function k(e){var t=e.getBoundingClientRect();return{width:t.width,height:t.height,top:t.top,right:t.right,bottom:t.bottom,left:t.left,x:t.left,y:t.top}}function T(e){if("[object Window]"===e.toString())return e;var t=e.ownerDocument;return t?t.defaultView:window}function p(e){var t=T(e);return{scrollLeft:t.pageXOffset,scrollTop:t.pageYOffset}}function D(e){return e instanceof T(e).Element||e instanceof Element}function f(e){return e instanceof T(e).HTMLElement||e instanceof HTMLElement}function u(e){return e?(e.nodeName||"").toLowerCase():null}function A(e){return(D(e)?e.ownerDocument:e.document).documentElement}function l(e){return k(A(e)).left+p(e).scrollLeft}function x(e){return T(e).getComputedStyle(e)}function d(e){var t=x(e),n=t.overflow,r=t.overflowX,o=t.overflowY;return/auto|scroll|overlay|hidden/.test(n+o+r)}function E(e,t,n){void 0===n&&(n=!1);var r,o,i=A(t),a=k(e),s={scrollLeft:0,scrollTop:0},c={x:0,y:0};return n||("body"===u(t)&&!d(i)||(s=(r=t)!==T(r)&&f(r)?{scrollLeft:(o=r).scrollLeft,scrollTop:o.scrollTop}:p(r)),f(t)?((c=k(t)).x+=t.clientLeft,c.y+=t.clientTop):i&&(c.x=l(i))),{x:a.left+s.scrollLeft-c.x,y:a.top+s.scrollTop-c.y,width:a.width,height:a.height}}function ee(e){return{x:e.offsetLeft,y:e.offsetTop,width:e.offsetWidth,height:e.offsetHeight}}function s(e){return"html"===u(e)?e:e.assignedSlot||e.parentNode||e.host||A(e)}function O(e,t){void 0===t&&(t=[]);var n=function e(t){return 0<=["html","body","#document"].indexOf(u(t))?t.ownerDocument.body:f(t)&&d(t)?t:e(s(t))}(e),r="body"===u(n),o=T(n),i=r?[o].concat(o.visualViewport||[],d(n)?n:[]):n,a=t.concat(i);return r?a:a.concat(O(s(i)))}function r(e){return f(e)&&"fixed"!==x(e).position?e.offsetParent:null}function te(e){for(var t=T(e),n=r(e);n&&0<=["table","td","th"].indexOf(u(n));)n=r(n);return(!n||"body"!==u(n)||"static"!==x(n).position)&&n||t}Object.defineProperty(c,"__esModule",{value:!0});var ne="top",re="bottom",oe="right",ie="left",R="auto",I=[ne,re,oe,ie],ae="start",h="end",S="clippingParents",P="viewport",C="popper",N="reference",H=I.reduce(function(e,t){return e.concat([t+"-"+ae,t+"-"+h])},[]),q=[].concat(I,[R]).reduce(function(e,t){return e.concat([t,t+"-"+ae,t+"-"+h])},[]),j=["beforeRead","read","afterRead","beforeMain","main","afterMain","beforeWrite","write","afterWrite"];function L(e){var r=new Map,o=new Set,t=[];return e.forEach(function(e){r.set(e.name,e)}),e.forEach(function(e){o.has(e.name)||!function n(e){o.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach(function(e){var t;o.has(e)||(t=r.get(e))&&n(t)}),t.push(e)}(e)}),t}function M(e){for(var t=arguments.length,n=new Array(1<t?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return[].concat(n).reduce(function(e,t){return e.replace(/%s/,t)},e)}var _='Popper: modifier "%s" provided an invalid %s property, expected %s but got %s',V='Popper: modifier "%s" requires "%s", but "%s" modifier is not available',B=["name","enabled","phase","fn","effect","requires","options"];function se(e){return e.split("-")[0]}var F="Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.",o={placement:"bottom",modifiers:[],strategy:"absolute"};function W(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return!t.some(function(e){return!(e&&"function"==typeof e.getBoundingClientRect)})}function e(e){void 0===e&&(e={});var t=e.defaultModifiers,y=void 0===t?[]:t,n=e.defaultOptions,b=void 0===n?o:n;return function(l,d,t){void 0===t&&(t=b);var n,r,h={placement:"bottom",orderedModifiers:[],options:Object.assign({},o,{},b),modifiersData:{},elements:{reference:l,popper:d},attributes:{},styles:{}},m=[],p=!1,v={state:h,setOptions:function(e){g(),h.options=Object.assign({},b,{},h.options,{},e),h.scrollParents={reference:D(l)?O(l):l.contextElement?O(l.contextElement):[],popper:O(d)};var t,n,r,o,i,a,s,c,u,p,f=(r=[].concat(y,h.options.modifiers),o=r.reduce(function(e,t){var n=e[t.name];return e[t.name]=n?Object.assign({},n,{},t,{options:Object.assign({},n.options,{},t.options),data:Object.assign({},n.data,{},t.data)}):t,e},{}),t=Object.keys(o).map(function(e){return o[e]}),n=L(t),j.reduce(function(e,t){return e.concat(n.filter(function(e){return e.phase===t}))},[]));return h.orderedModifiers=f.filter(function(e){return e.enabled}),"production"!==w.env.NODE_ENV&&(c=[].concat(f,h.options.modifiers),u=function(e){return e.name},p=new Set,i=c.filter(function(e){var t=u(e);if(!p.has(t))return p.add(t),!0}),(s=i).forEach(function(n){Object.keys(n).forEach(function(e){switch(e){case"name":"string"!=typeof n.name&&console.error(M(_,String(n.name),'"name"','"string"','"'+String(n.name)+'"'));break;case"enabled":"boolean"!=typeof n.enabled&&console.error(M(_,n.name,'"enabled"','"boolean"','"'+String(n.enabled)+'"'));case"phase":j.indexOf(n.phase)<0&&console.error(M(_,n.name,'"phase"',"either "+j.join(", "),'"'+String(n.phase)+'"'));break;case"fn":"function"!=typeof n.fn&&console.error(M(_,n.name,'"fn"','"function"','"'+String(n.fn)+'"'));break;case"effect":"function"!=typeof n.effect&&console.error(M(_,n.name,'"effect"','"function"','"'+String(n.fn)+'"'));break;case"requires":Array.isArray(n.requires)||console.error(M(_,n.name,'"requires"','"array"','"'+String(n.requires)+'"'));break;case"requiresIfExists":Array.isArray(n.requiresIfExists)||console.error(M(_,n.name,'"requiresIfExists"','"array"','"'+String(n.requiresIfExists)+'"'));break;case"options":case"data":break;default:console.error('PopperJS: an invalid property has been provided to the "'+n.name+'" modifier, valid properties are '+B.map(function(e){return'"'+e+'"'}).join(", ")+'; but "'+e+'" was provided.')}n.requires&&n.requires.forEach(function(t){null==s.find(function(e){return e.name===t})&&console.error(M(V,String(n.name),t,t))})})}),se(h.options.placement)===R&&(h.orderedModifiers.find(function(e){return"flip"===e.name})||console.error(['Popper: "auto" placements require the "flip" modifier be',"present and enabled to work."].join(" "))),[(a=x(d)).marginTop,a.marginRight,a.marginBottom,a.marginLeft].some(function(e){return parseFloat(e)})&&console.warn(['Popper: CSS "margin" styles cannot be used to apply padding',"between the popper and its reference element or boundary.","To replicate margin, use the `offset` modifier, as well as","the `padding` option in the `preventOverflow` and `flip`","modifiers."].join(" "))),h.orderedModifiers.forEach(function(e){var t,n=e.name,r=e.options,o=void 0===r?{}:r,i=e.effect;"function"==typeof i&&(t=i({state:h,name:n,instance:v,options:o}),m.push(t||function(){}))}),v.update()},forceUpdate:function(){if(!p){var e=h.elements,t=e.reference,n=e.popper;if(W(t,n)){h.rects={reference:E(t,te(n),"fixed"===h.options.strategy),popper:ee(n)},h.reset=!1,h.placement=h.options.placement,h.orderedModifiers.forEach(function(e){return h.modifiersData[e.name]=Object.assign({},e.data)});for(var r,o,i,a,s,c=0,u=0;u<h.orderedModifiers.length;u++){if("production"!==w.env.NODE_ENV&&100<(c+=1)){console.error("Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.");break}!0!==h.reset?(o=(r=h.orderedModifiers[u]).fn,a=void 0===(i=r.options)?{}:i,s=r.name,"function"==typeof o&&(h=o({state:h,options:a,name:s,instance:v})||h)):(h.reset=!1,u=-1)}}else"production"!==w.env.NODE_ENV&&console.error(F)}},update:(n=function(){return new Promise(function(e){v.forceUpdate(),e(h)})},function(){return r=r||new Promise(function(e){Promise.resolve().then(function(){r=void 0,e(n())})})}),destroy:function(){g(),p=!0}};if(!W(l,d))return"production"!==w.env.NODE_ENV&&console.error(F),v;function g(){m.forEach(function(e){return e()}),m=[]}return v.setOptions(t).then(function(e){!p&&t.onFirstUpdate&&t.onFirstUpdate(e)}),v}}var m={passive:!0};function ce(e){return e.split("-")[1]}function ue(e){return 0<=["top","bottom"].indexOf(e)?"x":"y"}function U(e){var t,n=e.reference,r=e.element,o=e.placement,i=o?se(o):null,a=o?ce(o):null,s=n.x+n.width/2-r.width/2,c=n.y+n.height/2-r.height/2;switch(i){case ne:t={x:s,y:n.y-r.height};break;case re:t={x:s,y:n.y+n.height};break;case oe:t={x:n.x+n.width,y:c};break;case ie:t={x:n.x-r.width,y:c};break;default:t={x:n.x,y:n.y}}var u=i?ue(i):null;if(null!=u){var p="y"===u?"height":"width";switch(a){case ae:t[u]=Math.floor(t[u])-Math.floor(n[p]/2-r[p]/2);break;case h:t[u]=Math.floor(t[u])+Math.ceil(n[p]/2-r[p]/2)}}return t}var X={top:"auto",right:"auto",bottom:"auto",left:"auto"};function v(e){var t,n,r,o,i,a,s=e.popper,c=e.popperRect,u=e.placement,p=e.offsets,f=e.position,l=e.gpuAcceleration,d=e.adaptive,h=(r=(n=p).x,o=n.y,i=window.devicePixelRatio||1,{x:Math.round(r*i)/i||0,y:Math.round(o*i)/i||0}),m=h.x,v=h.y,g=p.hasOwnProperty("x"),y=p.hasOwnProperty("y"),b=ie,w=ne,x=window;d&&((a=te(s))===T(s)&&(a=A(s)),u===ne&&(w=re,v-=a.clientHeight-c.height,v*=l?1:-1),u===ie&&(b=oe,m-=a.clientWidth-c.width,m*=l?1:-1));var E,O=Object.assign({position:f},d&&X);return l?Object.assign({},O,((E={})[w]=y?"0":"",E[b]=g?"0":"",E.transform=(x.devicePixelRatio||1)<2?"translate("+m+"px, "+v+"px)":"translate3d("+m+"px, "+v+"px, 0)",E)):Object.assign({},O,((t={})[w]=y?v+"px":"",t[b]=g?m+"px":"",t.transform="",t))}var t={left:"right",right:"left",bottom:"top",top:"bottom"};function G(e){return e.replace(/left|right|bottom|top/g,function(e){return t[e]})}var n={start:"end",end:"start"};function Y(e){return e.replace(/start|end/g,function(e){return n[e]})}function g(e){return parseFloat(e)||0}function y(e){var t,n,r=T(e),o={top:g((n=f(t=e)?x(t):{}).borderTopWidth),right:g(n.borderRightWidth),bottom:g(n.borderBottomWidth),left:g(n.borderLeftWidth)},i="html"===u(e),a=l(e),s=e.clientWidth+o.right,c=e.clientHeight+o.bottom;return i&&50<r.innerHeight-e.clientHeight&&(c=r.innerHeight-o.bottom),{top:i?0:e.clientTop,right:e.clientLeft>o.left?o.right:i?r.innerWidth-s-a:e.offsetWidth-s,bottom:i?r.innerHeight-c:e.offsetHeight-c,left:i?a:e.clientLeft}}function b(e,t){var n=Boolean(t.getRootNode&&t.getRootNode().host);if(e.contains(t))return!0;if(n){var r=t;do{if(r&&e.isSameNode(r))return!0;r=r.parentNode||r.host}while(r)}return!1}function z(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function $(e,t){return t===P?z((a=T(e),s=a.visualViewport,c=a.innerWidth,u=a.innerHeight,s&&/iPhone|iPod|iPad/.test(navigator.platform)&&(c=s.width,u=s.height),{width:c,height:u,x:0,y:0})):f(t)?k(t):z((n=A(e),r=T(n),o=p(n),(i=E(A(n),r)).height=Math.max(i.height,r.innerHeight),i.width=Math.max(i.width,r.innerWidth),i.x=-o.scrollLeft,i.y=-o.scrollTop,i));var n,r,o,i,a,s,c,u}function J(o,e,t){var n,r,i,a="clippingParents"===e?(r=O(n=o),D(i=0<=["absolute","fixed"].indexOf(x(n).position)&&f(n)?te(n):n)?r.filter(function(e){return D(e)&&b(e,i)}):[]):[].concat(e),s=[].concat(a,[t]),c=s[0],u=s.reduce(function(e,t){var n=$(o,t),r=y(f(t)?t:A(o));return e.top=Math.max(n.top+r.top,e.top),e.right=Math.min(n.right-r.right,e.right),e.bottom=Math.min(n.bottom-r.bottom,e.bottom),e.left=Math.max(n.left+r.left,e.left),e},$(o,c));return u.width=u.right-u.left,u.height=u.bottom-u.top,u.x=u.left,u.y=u.top,u}function pe(){return{top:0,right:0,bottom:0,left:0}}function K(e){return Object.assign({},pe(),{},e)}function Q(n,e){return e.reduce(function(e,t){return e[t]=n,e},{})}function fe(e,t){void 0===t&&(t={});var r,n=t.placement,o=void 0===n?e.placement:n,i=t.boundary,a=void 0===i?S:i,s=t.rootBoundary,c=void 0===s?P:s,u=t.elementContext,p=void 0===u?C:u,f=t.altBoundary,l=void 0!==f&&f,d=t.padding,h=void 0===d?0:d,m=K("number"!=typeof h?h:Q(h,I)),v=p===C?N:C,g=e.elements.reference,y=e.rects.popper,b=e.elements[l?v:p],w=J(D(b)?b:b.contextElement||A(e.elements.popper),a,c),x=k(g),E=U({reference:x,element:y,strategy:"absolute",placement:o}),O=z(Object.assign({},y,{},E)),T=p===C?O:x,j={top:w.top-T.top+m.top,bottom:T.bottom-w.bottom+m.bottom,left:w.left-T.left+m.left,right:T.right-w.right+m.right},L=e.modifiersData.offset;return p===C&&L&&(r=L[o],Object.keys(j).forEach(function(e){var t=0<=[oe,re].indexOf(e)?1:-1,n=0<=[ne,re].indexOf(e)?"y":"x";j[e]+=r[n]*t})),j}function le(e,t,n){return Math.max(e,Math.min(t,n))}function Z(e,t,n){return void 0===n&&(n={x:0,y:0}),{top:e.top-t.height-n.y,right:e.right-t.width+n.x,bottom:e.bottom-t.height+n.y,left:e.left-t.width-n.x}}function de(t){return[ne,oe,re,ie].some(function(e){return 0<=t[e]})}var i=[{name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var t=e.state,n=e.instance,r=e.options,o=r.scroll,i=void 0===o||o,a=r.resize,s=void 0===a||a,c=T(t.elements.popper),u=[].concat(t.scrollParents.reference,t.scrollParents.popper);return i&&u.forEach(function(e){e.addEventListener("scroll",n.update,m)}),s&&c.addEventListener("resize",n.update,m),function(){i&&u.forEach(function(e){e.removeEventListener("scroll",n.update,m)}),s&&c.removeEventListener("resize",n.update,m)}},data:{}},{name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,n=e.name;t.modifiersData[n]=U({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}},{name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t,n=e.state,r=e.options,o=r.gpuAcceleration,i=void 0===o||o,a=r.adaptive,s=void 0===a||a;"production"!==w.env.NODE_ENV&&(t=x(n.elements.popper).transitionProperty||"",s&&["transform","top","right","bottom","left"].some(function(e){return 0<=t.indexOf(e)})&&console.warn(["Popper: Detected CSS transitions on at least one of the following",'CSS properties: "transform", "top", "right", "bottom", "left".',"\n\n",'Disable the "computeStyles" modifier\'s `adaptive` option to allow',"for smooth transitions, or remove these properties from the CSS","transition declaration on the popper element if only transitioning","opacity or background-color for example.","\n\n","We recommend using the popper element as a wrapper around an inner","element that can have any CSS property transitioned for animations."].join(" ")));var c={placement:se(n.placement),popper:n.elements.popper,popperRect:n.rects.popper,gpuAcceleration:i};null!=n.modifiersData.popperOffsets&&(n.styles.popper=Object.assign({},n.styles.popper,{},v(Object.assign({},c,{offsets:n.modifiersData.popperOffsets,position:n.options.strategy,adaptive:s})))),null!=n.modifiersData.arrow&&(n.styles.arrow=Object.assign({},n.styles.arrow,{},v(Object.assign({},c,{offsets:n.modifiersData.arrow,position:"absolute",adaptive:!1})))),n.attributes.popper=Object.assign({},n.attributes.popper,{"data-popper-placement":n.placement})},data:{}},{name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var o=e.state;Object.keys(o.elements).forEach(function(e){var t=o.styles[e]||{},n=o.attributes[e]||{},r=o.elements[e];f(r)&&u(r)&&(Object.assign(r.style,t),Object.keys(n).forEach(function(e){var t=n[e];!1===t?r.removeAttribute(e):r.setAttribute(e,!0===t?"":t)}))})},effect:function(e){var o=e.state,i={popper:{position:o.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(o.elements.popper.style,i.popper),o.elements.arrow&&Object.assign(o.elements.arrow.style,i.arrow),function(){Object.keys(o.elements).forEach(function(e){var t=o.elements[e],n=o.attributes[e]||{},r=Object.keys(o.styles.hasOwnProperty(e)?o.styles[e]:i[e]).reduce(function(e,t){return e[t]="",e},{});f(t)&&u(t)&&(Object.assign(t.style,r),Object.keys(n).forEach(function(e){t.removeAttribute(e)}))})}},requires:["computeStyles"]},{name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var p=e.state,t=e.options,n=e.name,r=t.offset,f=void 0===r?[0,0]:r,o=q.reduce(function(e,t){var n,r,o,i,a,s,c,u;return e[t]=(n=t,r=p.rects,o=f,i=se(n),a=0<=[ie,ne].indexOf(i)?-1:1,s="function"==typeof o?o(Object.assign({},r,{placement:n})):o,c=(c=s[0])||0,u=((u=s[1])||0)*a,0<=[ie,oe].indexOf(i)?{x:u,y:c}:{x:c,y:u}),e},{}),i=o[p.placement],a=i.x,s=i.y;null!=p.modifiersData.popperOffsets&&(p.modifiersData.popperOffsets.x+=a,p.modifiersData.popperOffsets.y+=s),p.modifiersData[n]=o}},{name:"flip",enabled:!0,phase:"main",fn:function(e){var n=e.state,t=e.options,r=e.name;if(!n.modifiersData[r]._skip){for(var o=t.mainAxis,i=void 0===o||o,a=t.altAxis,s=void 0===a||a,c=t.fallbackPlacements,u=t.padding,p=t.boundary,f=t.rootBoundary,l=t.altBoundary,d=t.flipVariations,h=void 0===d||d,m=t.allowedAutoPlacements,v=n.options.placement,g=se(v),y=c||(g===v||!h?[G(v)]:function(e){if(se(e)===R)return[];var t=G(e);return[Y(e),t,Y(t)]}(v)),b=[v].concat(y).reduce(function(e,t){return e.concat(se(t)===R?function(n,e){void 0===e&&(e={});var t=e.placement,r=e.boundary,o=e.rootBoundary,i=e.padding,a=e.flipVariations,s=e.allowedAutoPlacements,c=void 0===s?q:s,u=ce(t),p=(u?a?H:H.filter(function(e){return ce(e)===u}):I).filter(function(e){return 0<=c.indexOf(e)}).reduce(function(e,t){return e[t]=fe(n,{placement:t,boundary:r,rootBoundary:o,padding:i})[se(t)],e},{});return Object.keys(p).sort(function(e,t){return p[e]-p[t]})}(n,{placement:t,boundary:p,rootBoundary:f,padding:u,flipVariations:h,allowedAutoPlacements:m}):t)},[]),w=n.rects.reference,x=n.rects.popper,E=new Map,O=!0,T=b[0],j=0;j<b.length;j++){var L=b[j],k=se(L),D=ce(L)===ae,A=0<=[ne,re].indexOf(k),S=A?"width":"height",P=fe(n,{placement:L,boundary:p,rootBoundary:f,altBoundary:l,padding:u}),C=A?D?oe:ie:D?re:ne;w[S]>x[S]&&(C=G(C));var N=G(C),M=[];if(i&&M.push(P[k]<=0),s&&M.push(P[C]<=0,P[N]<=0),M.every(function(e){return e})){T=L,O=!1;break}E.set(L,M)}if(O)for(var _=function(n){var e=b.find(function(e){var t=E.get(e);if(t)return t.slice(0,n).every(function(e){return e})});if(e)return T=e,"break"},V=h?3:1;0<V;V--){if("break"===_(V))break}n.placement!==T&&(n.modifiersData[r]._skip=!0,n.placement=T,n.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}},{name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var t,n,r,o,i,a,s,c,u,p,f,l,d,h,m,v,g,y,b,w,x,E,O,T,j,L,k,D=e.state,A=e.options,S=e.name,P=A.mainAxis,C=void 0===P||P,N=A.altAxis,M=void 0!==N&&N,_=A.boundary,V=A.rootBoundary,R=A.altBoundary,I=A.padding,H=A.tether,q=void 0===H||H,B=A.tetherOffset,F=void 0===B?0:B,W=fe(D,{boundary:_,rootBoundary:V,padding:I,altBoundary:R}),U=se(D.placement),X=ce(D.placement),G=!X,Y=ue(U),z="x"===Y?"y":"x",$=D.modifiersData.popperOffsets,J=D.rects.reference,K=D.rects.popper,Q="function"==typeof F?F(Object.assign({},D.rects,{placement:D.placement})):F,Z={x:0,y:0};$&&(C&&(t="y"===Y?ne:ie,n="y"===Y?re:oe,r="y"===Y?"height":"width",o=$[Y],i=$[Y]+W[t],a=$[Y]-W[n],s=q?-K[r]/2:0,c=X===ae?J[r]:K[r],u=X===ae?-K[r]:-J[r],p=D.elements.arrow,f=q&&p?ee(p):{width:0,height:0},d=(l=D.modifiersData["arrow#persistent"]?D.modifiersData["arrow#persistent"].padding:pe())[t],h=l[n],m=le(0,J[r],f[r]),v=G?J[r]/2-s-m-d-Q:c-m-d-Q,g=G?-J[r]/2+s+m+h+Q:u+m+h+Q,b=(y=D.elements.arrow&&te(D.elements.arrow))?"y"===Y?y.clientTop||0:y.clientLeft||0:0,w=D.modifiersData.offset?D.modifiersData.offset[D.placement][Y]:0,x=$[Y]+v-w-b,E=$[Y]+g-w,O=le(q?Math.min(i,x):i,o,q?Math.max(a,E):a),$[Y]=O,Z[Y]=O-o),M&&(T="x"===Y?ne:ie,j="x"===Y?re:oe,k=le((L=$[z])+W[T],L,L-W[j]),$[z]=k,Z[z]=k-L),D.modifiersData[S]=Z)},requiresIfExists:["offset"]},{name:"arrow",enabled:!0,phase:"main",fn:function(e){var t,n,r,o,i,a,s,c,u,p,f,l,d,h,m=e.state,v=e.name,g=m.elements.arrow,y=m.modifiersData.popperOffsets,b=se(m.placement),w=ue(b),x=0<=[ie,oe].indexOf(b)?"height":"width";g&&y&&(n=m.modifiersData[v+"#persistent"].padding,r=ee(g),o="y"===w?ne:ie,i="y"===w?re:oe,a=m.rects.reference[x]+m.rects.reference[w]-y[w]-m.rects.popper[x],s=y[w]-m.rects.reference[w],u=(c=te(g))?"y"===w?c.clientHeight||0:c.clientWidth||0:0,p=a/2-s/2,f=n[o],l=u-r[x]-n[i],h=le(f,d=u/2-r[x]/2+p,l),m.modifiersData[v]=((t={})[w]=h,t.centerOffset=h-d,t))},effect:function(e){var t=e.state,n=e.options,r=e.name,o=n.element,i=void 0===o?"[data-popper-arrow]":o,a=n.padding,s=void 0===a?0:a;null!=i&&("string"==typeof i&&!(i=t.elements.popper.querySelector(i))||("production"!==w.env.NODE_ENV&&(f(i)||console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).',"To use an SVG arrow, wrap it in an HTMLElement that will be used as","the arrow."].join(" "))),b(t.elements.popper,i)?(t.elements.arrow=i,t.modifiersData[r+"#persistent"]={padding:K("number"!=typeof s?s:Q(s,I))}):"production"!==w.env.NODE_ENV&&console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper',"element."].join(" "))))},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]},{name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,n=e.name,r=t.rects.reference,o=t.rects.popper,i=t.modifiersData.preventOverflow,a=fe(t,{elementContext:"reference"}),s=fe(t,{altBoundary:!0}),c=Z(a,r),u=Z(s,o,i),p=de(c),f=de(u);t.modifiersData[n]={referenceClippingOffsets:c,popperEscapeOffsets:u,isReferenceHidden:p,hasPopperEscaped:f},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":p,"data-popper-escaped":f})}}],a=e({defaultModifiers:i});c.createPopper=a,c.defaultModifiers=i,c.detectOverflow=fe,c.popperGenerator=e}).call(this,e("_process"))},{_process:6}],6:[function(e,t,n){var r,o,i=t.exports={};function a(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function c(t){if(r===setTimeout)return setTimeout(t,0);if((r===a||!r)&&setTimeout)return r=setTimeout,setTimeout(t,0);try{return r(t,0)}catch(e){try{return r.call(null,t,0)}catch(e){return r.call(this,t,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:a}catch(e){r=a}try{o="function"==typeof clearTimeout?clearTimeout:s}catch(e){o=s}}();var u,p=[],f=!1,l=-1;function d(){f&&u&&(f=!1,u.length?p=u.concat(p):l=-1,p.length&&h())}function h(){if(!f){var e=c(d);f=!0;for(var t=p.length;t;){for(u=p,p=[];++l<t;)u&&u[l].run();l=-1,t=p.length}u=null,f=!1,function(t){if(o===clearTimeout)return clearTimeout(t);if((o===s||!o)&&clearTimeout)return o=clearTimeout,clearTimeout(t);try{o(t)}catch(e){try{return o.call(null,t)}catch(e){return o.call(this,t)}}}(e)}}function m(e,t){this.fun=e,this.array=t}function v(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(1<arguments.length)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];p.push(new m(e,t)),1!==p.length||f||c(h)},m.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=v,i.addListener=v,i.once=v,i.off=v,i.removeListener=v,i.removeAllListeners=v,i.emit=v,i.prependListener=v,i.prependOnceListener=v,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},{}],7:[function(e,t,n){var r=function(a){"use strict";var c,e=Object.prototype,p=e.hasOwnProperty,t="function"==typeof Symbol?Symbol:{},o=t.iterator||"@@iterator",n=t.asyncIterator||"@@asyncIterator",r=t.toStringTag||"@@toStringTag";function s(e,t,n,r){var i,a,s,c,o=t&&t.prototype instanceof g?t:g,u=Object.create(o.prototype),p=new k(r||[]);return u._invoke=(i=e,a=n,s=p,c=l,function(e,t){if(c===h)throw new Error("Generator is already running");if(c===m){if("throw"===e)throw t;return A()}for(s.method=e,s.arg=t;;){var n=s.delegate;if(n){var r=T(n,s);if(r){if(r===v)continue;return r}}if("next"===s.method)s.sent=s._sent=s.arg;else if("throw"===s.method){if(c===l)throw c=m,s.arg;s.dispatchException(s.arg)}else"return"===s.method&&s.abrupt("return",s.arg);c=h;var o=f(i,a,s);if("normal"===o.type){if(c=s.done?m:d,o.arg===v)continue;return{value:o.arg,done:s.done}}"throw"===o.type&&(c=m,s.method="throw",s.arg=o.arg)}}),u}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}a.wrap=s;var l="suspendedStart",d="suspendedYield",h="executing",m="completed",v={};function g(){}function i(){}function u(){}var y={};y[o]=function(){return this};var b=Object.getPrototypeOf,w=b&&b(b(D([])));w&&w!==e&&p.call(w,o)&&(y=w);var x=u.prototype=g.prototype=Object.create(y);function E(e){["next","throw","return"].forEach(function(t){e[t]=function(e){return this._invoke(t,e)}})}function O(c,u){var t;this._invoke=function(n,r){function e(){return new u(function(e,t){!function t(e,n,r,o){var i=f(c[e],c,n);if("throw"!==i.type){var a=i.arg,s=a.value;return s&&"object"==typeof s&&p.call(s,"__await")?u.resolve(s.__await).then(function(e){t("next",e,r,o)},function(e){t("throw",e,r,o)}):u.resolve(s).then(function(e){a.value=e,r(a)},function(e){return t("throw",e,r,o)})}o(i.arg)}(n,r,e,t)})}return t=t?t.then(e,e):e()}}function T(e,t){var n=e.iterator[t.method];if(n===c){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=c,T(e,t),"throw"===t.method))return v;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var r=f(n,e.iterator,t.arg);if("throw"===r.type)return t.method="throw",t.arg=r.arg,t.delegate=null,v;var o=r.arg;return o?o.done?(t[e.resultName]=o.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=c),t.delegate=null,v):o:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,v)}function j(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function L(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function k(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(j,this),this.reset(!0)}function D(t){if(t){var e=t[o];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,r=function e(){for(;++n<t.length;)if(p.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=c,e.done=!0,e};return r.next=r}}return{next:A}}function A(){return{value:c,done:!0}}return i.prototype=x.constructor=u,u.constructor=i,u[r]=i.displayName="GeneratorFunction",a.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===i||"GeneratorFunction"===(t.displayName||t.name))},a.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,u):(e.__proto__=u,r in e||(e[r]="GeneratorFunction")),e.prototype=Object.create(x),e},a.awrap=function(e){return{__await:e}},E(O.prototype),O.prototype[n]=function(){return this},a.AsyncIterator=O,a.async=function(e,t,n,r,o){void 0===o&&(o=Promise);var i=new O(s(e,t,n,r),o);return a.isGeneratorFunction(t)?i:i.next().then(function(e){return e.done?e.value:i.next()})},E(x),x[r]="Generator",x[o]=function(){return this},x.toString=function(){return"[object Generator]"},a.keys=function(n){var r=[];for(var e in n)r.push(e);return r.reverse(),function e(){for(;r.length;){var t=r.pop();if(t in n)return e.value=t,e.done=!1,e}return e.done=!0,e}},a.values=D,k.prototype={constructor:k,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=c,this.done=!1,this.delegate=null,this.method="next",this.arg=c,this.tryEntries.forEach(L),!e)for(var t in this)"t"===t.charAt(0)&&p.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=c)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(n){if(this.done)throw n;var r=this;function e(e,t){return i.type="throw",i.arg=n,r.next=e,t&&(r.method="next",r.arg=c),!!t}for(var t=this.tryEntries.length-1;0<=t;--t){var o=this.tryEntries[t],i=o.completion;if("root"===o.tryLoc)return e("end");if(o.tryLoc<=this.prev){var a=p.call(o,"catchLoc"),s=p.call(o,"finallyLoc");if(a&&s){if(this.prev<o.catchLoc)return e(o.catchLoc,!0);if(this.prev<o.finallyLoc)return e(o.finallyLoc)}else if(a){if(this.prev<o.catchLoc)return e(o.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return e(o.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;0<=n;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&p.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var o=r;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=e,i.arg=t,o?(this.method="next",this.next=o.finallyLoc,v):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;0<=t;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),L(n),v}},catch:function(e){for(var t=this.tryEntries.length-1;0<=t;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r,o=n.completion;return"throw"===o.type&&(r=o.arg,L(n)),r}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:D(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=c),v}},a}("object"==typeof t?t.exports:{});try{regeneratorRuntime=r}catch(e){Function("r","regeneratorRuntime = r")(r)}},{}],8:[function(N,e,M){(function(ee){"use strict";Object.defineProperty(M,"__esModule",{value:!0});var te=N("@popperjs/core"),ne={passive:!0},re="tippy-iOS",r="tippy-content",s="tippy-backdrop",o="tippy-arrow",i="tippy-svg-arrow";function oe(e,t,n){if(Array.isArray(e)){var r=e[t];return null==r?Array.isArray(n)?n[t]:n:r}return e}function t(e,t){var n={}.toString.call(e);return 0===n.indexOf("[object")&&-1<n.indexOf(t+"]")}function ie(e,t){return"function"==typeof e?e.apply(void 0,t):e}function ae(t,n){return 0===n?t:function(e){clearTimeout(r),r=setTimeout(function(){t(e)},n)};var r}function f(e,t){var n=Object.assign({},e);return t.forEach(function(e){delete n[e]}),n}function se(e){return[].concat(e)}function ce(e,t){-1===e.indexOf(t)&&e.push(t)}function ue(e){return e.split("-")[0]}function pe(e){return[].slice.call(e)}function fe(){return document.createElement("div")}function l(e){return t(e,"Element")}function le(e){return t(e,"MouseEvent")}function a(e){return e&&e._tippy&&e._tippy.reference===e}function d(e){return l(e)?[e]:t(e,"NodeList")?pe(e):Array.isArray(e)?e:pe(document.querySelectorAll(e))}function de(e,t){e.forEach(function(e){e&&(e.style.transitionDuration=t+"ms")})}function he(e,t){e.forEach(function(e){e&&e.setAttribute("data-state",t)})}function me(e){var t=se(e)[0];return t&&t.ownerDocument||document}function ve(t,e,n){var r=e+"EventListener";["transitionend","webkitTransitionEnd"].forEach(function(e){t[r](e,n)})}var ge={isTouch:!1},n=0;function h(){ge.isTouch||(ge.isTouch=!0,window.performance&&document.addEventListener("mousemove",c))}function c(){var e=performance.now();e-n<20&&(ge.isTouch=!1,document.removeEventListener("mousemove",c)),n=e}function m(){var e,t=document.activeElement;a(t)&&(e=t._tippy,t.blur&&!e.state.isVisible&&t.blur())}var e="undefined"!=typeof window&&"undefined"!=typeof document,u=e?navigator.userAgent:"",ye=/MSIE |Trident\//.test(u),be=e&&/iPhone|iPad|iPod/.test(navigator.platform);function we(e){return[e+"() was called on a"+("destroy"===e?"n already-":" ")+"destroyed instance. This is a no-op but","indicates a potential memory leak."].join(" ")}function p(e){return e.replace(/[ \t]{2,}/g," ").replace(/^[ \t]*/gm,"").trim()}function v(e){return[p("\n  %ctippy.js\n\n  %c"+p(e)+"\n\n  %c👷‍ This is a development-only message. It will be removed in production.\n  "),"color: #00C584; font-size: 1.3em; font-weight: bold;","line-height: 1.5","color: #a6a095;"]}function xe(e,t){var n;e&&(n=console).warn.apply(n,v(t))}function Ee(e,t){var n;e&&(n=console).error.apply(n,v(t))}var g={animateFill:!1,followCursor:!1,inlinePositioning:!1,sticky:!1},Oe=Object.assign({appendTo:function(){return document.body},aria:{content:"auto",expanded:"auto"},content:"",delay:0,duration:[300,250],getReferenceClientRect:null,hideOnClick:!0,ignoreAttributes:!1,interactive:!1,interactiveBorder:2,interactiveDebounce:0,moveTransition:"",offset:[0,10],onAfterUpdate:function(){},onBeforeUpdate:function(){},onCreate:function(){},onDestroy:function(){},onHidden:function(){},onHide:function(){},onMount:function(){},onShow:function(){},onShown:function(){},onTrigger:function(){},onUntrigger:function(){},onClickOutside:function(){},placement:"top",plugins:[],popperOptions:{},render:null,showOnCreate:!1,touch:!0,trigger:"mouseenter focus",triggerTarget:null},g,{},{allowHTML:!1,animation:"fade",arrow:!0,content:"",inertia:!1,maxWidth:350,role:"tooltip",theme:"",zIndex:9999}),y=Object.keys(Oe);function Te(o){var e=(o.plugins||[]).reduce(function(e,t){var n=t.name,r=t.defaultValue;return n&&(e[n]=void 0!==o[n]?o[n]:r),e},{});return Object.assign({},o,{},e)}function je(e,t){var o,n,r=Object.assign({},t,{content:ie(t.content,[e])},t.ignoreAttributes?{}:(o=e,((n=t.plugins)?Object.keys(Te(Object.assign({},Oe,{plugins:n}))):y).reduce(function(t,n){var r=(o.getAttribute("data-tippy-"+n)||"").trim();if(!r)return t;if("content"===n)t[n]=r;else try{t[n]=JSON.parse(r)}catch(e){t[n]=r}return t},{})));return r.aria=Object.assign({},Oe.aria,{},r.aria),r.aria={expanded:"auto"===r.aria.expanded?t.interactive:r.aria.expanded,content:"auto"===r.aria.content?t.interactive?null:"describedby":r.aria.content},r}function b(e,o){void 0===e&&(e={}),void 0===o&&(o=[]),Object.keys(e).forEach(function(t){var e,n,r=f(Oe,Object.keys(g));xe((e=r,n=t,!{}.hasOwnProperty.call(e,n))&&0===o.filter(function(e){return e.name===t}).length,["`"+t+"`","is not a valid prop. You may have spelled it incorrectly, or if it's","a plugin, forgot to pass it in an array as props.plugins.","\n\n","All props: https://atomiks.github.io/tippyjs/v6/all-props/\n","Plugins: https://atomiks.github.io/tippyjs/v6/plugins/"].join(" "))})}var w=function(){return"innerHTML"};function x(e,t){e[w()]=t}function E(e){var t=fe();return!0===e?t.className=o:(t.className=i,l(e)?t.appendChild(e):x(t,e)),t}function O(e,t){l(t.content)?(x(e,""),e.appendChild(t.content)):"function"!=typeof t.content&&(t.allowHTML?x(e,t.content):e.textContent=t.content)}function Le(e){var t=e.firstElementChild,n=pe(t.children);return{box:t,content:n.find(function(e){return e.classList.contains(r)}),arrow:n.find(function(e){return e.classList.contains(o)||e.classList.contains(i)}),backdrop:n.find(function(e){return e.classList.contains(s)})}}function T(a){var s=fe(),e=fe();e.className="tippy-box",e.setAttribute("data-state","hidden"),e.setAttribute("tabindex","-1");var t=fe();function n(e,t){var n=Le(s),r=n.box,o=n.content,i=n.arrow;t.theme?r.setAttribute("data-theme",t.theme):r.removeAttribute("data-theme"),"string"==typeof t.animation?r.setAttribute("data-animation",t.animation):r.removeAttribute("data-animation"),t.inertia?r.setAttribute("data-inertia",""):r.removeAttribute("data-inertia"),r.style.maxWidth="number"==typeof t.maxWidth?t.maxWidth+"px":t.maxWidth,t.role?r.setAttribute("role",t.role):r.removeAttribute("role"),e.content!==t.content&&O(o,a.props),t.arrow?i?e.arrow!==t.arrow&&(r.removeChild(i),r.appendChild(E(t.arrow))):r.appendChild(E(t.arrow)):i&&r.removeChild(i)}return t.className=r,t.setAttribute("data-state","hidden"),O(t,a.props),s.appendChild(e),e.appendChild(t),n(a.props,a.props),{popper:s,onUpdate:n}}T.$$tippy=!0;var ke=1,De=[],Ae=[];function j(f,e){var i,n,r,a,o,l,s,c,u=je(f,Object.assign({},Oe,{},Te(e))),p=!1,d=!1,h=!1,m=[],v=ae(X,u.interactiveDebounce),g=me(u.triggerTarget||f),t=ke++,y=(c=u.plugins).filter(function(e,t){return c.indexOf(e)===t}),b={id:t,reference:f,popper:fe(),popperInstance:null,props:u,state:{isEnabled:!0,isVisible:!1,isDestroyed:!1,isMounted:!1,isShown:!1},plugins:y,clearDelayTimeouts:function(){clearTimeout(i),clearTimeout(n),cancelAnimationFrame(r)},setProps:function(e){"production"!==ee.env.NODE_ENV&&xe(b.state.isDestroyed,we("setProps"));if(b.state.isDestroyed)return;N("onBeforeUpdate",[b,e]),W();var t=b.props,n=je(f,Object.assign({},b.props,{},e,{ignoreAttributes:!0}));b.props=n,F(),t.interactiveDebounce!==n.interactiveDebounce&&(V(),v=ae(X,n.interactiveDebounce));t.triggerTarget&&!n.triggerTarget?se(t.triggerTarget).forEach(function(e){e.removeAttribute("aria-expanded")}):n.triggerTarget&&f.removeAttribute("aria-expanded");_(),P(),E&&E(t,n);b.popperInstance&&($(),K().forEach(function(e){requestAnimationFrame(e._tippy.popperInstance.forceUpdate)}));N("onAfterUpdate",[b,e])},setContent:function(e){b.setProps({content:e})},show:function(){"production"!==ee.env.NODE_ENV&&xe(b.state.isDestroyed,we("show"));var e=b.state.isVisible,t=b.state.isDestroyed,n=!b.state.isEnabled,r=ge.isTouch&&!b.props.touch,o=oe(b.props.duration,0,Oe.duration);if(e||t||n||r)return;if(D().hasAttribute("disabled"))return;if(N("onShow",[b],!1),!1===b.props.onShow(b))return;b.state.isVisible=!0,k()&&(x.style.visibility="visible");P(),I(),b.state.isMounted||(x.style.transition="none");{var i,a,s;k()&&(i=A(),a=i.box,s=i.content,de([a,s],0))}l=function(){var e,t,n;b.state.isVisible&&!h&&(h=!0,x.offsetHeight,x.style.transition=b.props.moveTransition,k()&&b.props.animation&&(de([t=(e=A()).box,n=e.content],o),he([t,n],"visible")),M(),_(),ce(Ae,b),C(!0),b.state.isMounted=!0,N("onMount",[b]),b.props.animation&&k()&&q(o,function(){b.state.isShown=!0,N("onShown",[b])}))},function(){var e,t=b.props.appendTo,n=D();e=b.props.interactive&&t===Oe.appendTo||"parent"===t?n.parentNode:ie(t,[n]);e.contains(x)||e.appendChild(x);$(),"production"!==ee.env.NODE_ENV&&xe(b.props.interactive&&t===Oe.appendTo&&n.nextElementSibling!==x,["Interactive tippy element may not be accessible via keyboard","navigation because it is not directly after the reference element","in the DOM source order.","\n\n","Using a wrapper <div> or <span> tag around the reference element","solves this by creating a new parentNode context.","\n\n","Specifying `appendTo: document.body` silences this warning, but it","assumes you are using a focus management solution to handle","keyboard navigation.","\n\n","See: https://atomiks.github.io/tippyjs/v6/accessibility/#interactivity"].join(" "))}()},hide:function(){"production"!==ee.env.NODE_ENV&&xe(b.state.isDestroyed,we("hide"));var e=!b.state.isVisible,t=b.state.isDestroyed,n=!b.state.isEnabled,r=oe(b.props.duration,1,Oe.duration);if(e||t||n)return;if(N("onHide",[b],!1),!1===b.props.onHide(b))return;b.state.isVisible=!1,b.state.isShown=!1,h=!1,k()&&(x.style.visibility="hidden");{var o,i,a;V(),H(),P(),k()&&(o=A(),i=o.box,a=o.content,b.props.animation&&(de([i,a],r),he([i,a],"hidden")))}M(),_(),b.props.animation?k()&&function(e,t){q(e,function(){!b.state.isVisible&&x.parentNode&&x.parentNode.contains(x)&&t()})}(r,b.unmount):b.unmount()},enable:function(){b.state.isEnabled=!0},disable:function(){b.hide(),b.state.isEnabled=!1},unmount:function(){b.state.isVisible&&b.hide();if(!b.state.isMounted)return;J(),K().forEach(function(e){e._tippy.unmount()}),x.parentNode&&x.parentNode.removeChild(x);0===(Ae=Ae.filter(function(e){return e!==b})).length&&C(!1);b.state.isMounted=!1,N("onHidden",[b])},destroy:function(){"production"!==ee.env.NODE_ENV&&xe(b.state.isDestroyed,we("destroy"));if(b.state.isDestroyed)return;b.clearDelayTimeouts(),b.unmount(),W(),delete f._tippy,b.state.isDestroyed=!0,N("onDestroy",[b])}};if(!u.render)return"production"!==ee.env.NODE_ENV&&Ee(!0,"render() function has not been supplied."),b;var w=u.render(b),x=w.popper,E=w.onUpdate;x.setAttribute("data-tippy-root",""),x.id="tippy-"+b.id,b.popper=x,f._tippy=b,x._tippy=b;var O=y.map(function(e){return e.fn(b)}),T=f.hasAttribute("aria-expanded");return F(),_(),P(),N("onCreate",[b]),u.showOnCreate&&Q(),x.addEventListener("mouseenter",function(){b.props.interactive&&b.state.isVisible&&b.clearDelayTimeouts()}),x.addEventListener("mouseleave",function(e){b.props.interactive&&0<=b.props.trigger.indexOf("mouseenter")&&(g.addEventListener("mousemove",v),v(e))}),b;function j(){var e=b.props.touch;return Array.isArray(e)?e:[e,0]}function L(){return"hold"===j()[0]}function k(){var e;return null!=(e=b.props.render)&&e.$$tippy}function D(){return s||f}function A(){return Le(x)}function S(e){return b.state.isMounted&&!b.state.isVisible||ge.isTouch||a&&"focus"===a.type?0:oe(b.props.delay,e?0:1,Oe.delay)}function P(){x.style.pointerEvents=b.props.interactive&&b.state.isVisible?"":"none",x.style.zIndex=""+b.props.zIndex}function C(e){var t=e&&be&&ge.isTouch;g.body.classList[t?"add":"remove"](re)}function N(t,n,e){var r;void 0===e&&(e=!0),O.forEach(function(e){e[t]&&e[t].apply(void 0,n)}),e&&(r=b.props)[t].apply(r,n)}function M(){var r,o,e=b.props.aria;e.content&&(r="aria-"+e.content,o=x.id,se(b.props.triggerTarget||f).forEach(function(e){var t,n=e.getAttribute(r);b.state.isVisible?e.setAttribute(r,n?n+" "+o:o):(t=n&&n.replace(o,"").trim())?e.setAttribute(r,t):e.removeAttribute(r)}))}function _(){!T&&b.props.aria.expanded&&se(b.props.triggerTarget||f).forEach(function(e){b.props.interactive?e.setAttribute("aria-expanded",b.state.isVisible&&e===D()?"true":"false"):e.removeAttribute("aria-expanded")})}function V(){g.body.removeEventListener("mouseleave",Z),g.removeEventListener("mousemove",v),De=De.filter(function(e){return e!==v})}function R(e){if(!b.props.interactive||!x.contains(e.target)){if(D().contains(e.target)){if(ge.isTouch)return;if(b.state.isVisible&&0<=b.props.trigger.indexOf("click"))return}else b.props.onClickOutside(b,e);!0===b.props.hideOnClick&&(p=!1,b.clearDelayTimeouts(),b.hide(),d=!0,setTimeout(function(){d=!1}),b.state.isMounted||H())}}function I(){g.addEventListener("mousedown",R,!0)}function H(){g.removeEventListener("mousedown",R,!0)}function q(e,t){var n=A().box;function r(e){e.target===n&&(ve(n,"remove",r),t())}if(0===e)return t();ve(n,"remove",o),ve(n,"add",r),o=r}function B(t,n,r){void 0===r&&(r=!1),se(b.props.triggerTarget||f).forEach(function(e){e.addEventListener(t,n,r),m.push({node:e,eventType:t,handler:n,options:r})})}function F(){L()&&(B("touchstart",U,ne),B("touchend",G,ne)),b.props.trigger.split(/\s+/).filter(Boolean).forEach(function(e){if("manual"!==e)switch(B(e,U),e){case"mouseenter":B("mouseleave",G);break;case"focus":B(ye?"focusout":"blur",Y);break;case"focusin":B("focusout",Y)}})}function W(){m.forEach(function(e){var t=e.node,n=e.eventType,r=e.handler,o=e.options;t.removeEventListener(n,r,o)}),m=[]}function U(t){var e,n,r,o=!1;!b.state.isEnabled||z(t)||d||(s=(a=t).currentTarget,_(),!b.state.isVisible&&le(t)&&De.forEach(function(e){return e(t)}),"click"===t.type&&(b.props.trigger.indexOf("mouseenter")<0||p)&&!1!==b.props.hideOnClick&&b.state.isVisible?o=!0:(n=(e=j())[0],r=e[1],ge.isTouch&&"hold"===n&&r?i=setTimeout(function(){Q(t)},r):Q(t)),"click"===t.type&&(p=!o),o&&Z(t))}function X(e){var t,n,r,h,m,o=e.target,i=f.contains(o)||x.contains(o);"mousemove"===e.type&&i||(t=K().concat(x).map(function(e){var t,n=null==(t=e._tippy.popperInstance)?void 0:t.state;return n?{popperRect:e.getBoundingClientRect(),popperState:n,props:u}:null}).filter(Boolean),n=t,h=(r=e).clientX,m=r.clientY,n.every(function(e){var t=e.popperRect,n=e.popperState,r=e.props.interactiveBorder,o=ue(n.placement),i=n.modifiersData.offset;if(!i)return!0;var a="bottom"===o?i.top.y:0,s="top"===o?i.bottom.y:0,c="right"===o?i.left.x:0,u="left"===o?i.right.x:0,p=t.top-m+a>r,f=m-t.bottom-s>r,l=t.left-h+c>r,d=h-t.right-u>r;return p||f||l||d})&&(V(),Z(e)))}function G(e){if(!(z(e)||0<=b.props.trigger.indexOf("click")&&p))return b.props.interactive?(g.body.addEventListener("mouseleave",Z),g.addEventListener("mousemove",v),ce(De,v),void v(e)):void Z(e)}function Y(e){b.props.trigger.indexOf("focusin")<0&&e.target!==D()||b.props.interactive&&e.relatedTarget&&x.contains(e.relatedTarget)||Z(e)}function z(e){return!!ge.isTouch&&L()!==0<=e.type.indexOf("touch")}function $(){J();var e=b.props,t=e.popperOptions,n=e.placement,r=e.offset,o=e.getReferenceClientRect,i=e.moveTransition,a=k()?Le(x).arrow:null,s=o?{getBoundingClientRect:o}:f,c={name:"$$tippy",enabled:!0,phase:"beforeWrite",requires:["computeStyles"],fn:function(e){var t,n=e.state;k()&&(t=A().box,["placement","reference-hidden","escaped"].forEach(function(e){"placement"===e?t.setAttribute("data-placement",n.placement):n.attributes.popper["data-popper-"+e]?t.setAttribute("data-"+e,""):t.removeAttribute("data-"+e)}),n.attributes.popper={})}},u={name:"arrow",enabled:!!a,options:{element:a,padding:3}},p=[{name:"offset",options:{offset:r}},{name:"preventOverflow",options:{padding:{top:2,bottom:2,left:5,right:5}}},{name:"flip",options:{padding:5}},{name:"computeStyles",options:{adaptive:!i}}].concat(k()?[u]:[],(null==t?void 0:t.modifiers)||[],[c]);b.popperInstance=te.createPopper(s,x,Object.assign({},t,{placement:n,onFirstUpdate:l,modifiers:p}))}function J(){b.popperInstance&&(b.popperInstance.destroy(),b.popperInstance=null)}function K(){return pe(x.querySelectorAll("[data-tippy-root]"))}function Q(e){b.clearDelayTimeouts(),e&&N("onTrigger",[b,e]),I();var t=S(!0);t?i=setTimeout(function(){b.show()},t):b.show()}function Z(e){var t;b.clearDelayTimeouts(),N("onUntrigger",[b,e]),b.state.isVisible?0<=b.props.trigger.indexOf("mouseenter")&&0<=b.props.trigger.indexOf("click")&&0<=["mouseleave","mousemove"].indexOf(e.type)&&p||((t=S(!1))?n=setTimeout(function(){b.state.isVisible&&b.hide()},t):r=requestAnimationFrame(function(){b.hide()})):H()}}function L(e,t){void 0===t&&(t={});var n,r,o,i=Oe.plugins.concat(t.plugins||[]);"production"!==ee.env.NODE_ENV&&(r=!(n=e),o="[object Object]"===Object.prototype.toString.call(n)&&!n.addEventListener,Ee(r,["tippy() was passed","`"+String(n)+"`","as its targets (first) argument. Valid types are: String, Element,","Element[], or NodeList."].join(" ")),Ee(o,["tippy() was passed a plain object which is not supported as an argument","for virtual positioning. Use props.getReferenceClientRect instead."].join(" ")),b(t,i)),document.addEventListener("touchstart",h,Object.assign({},ne,{capture:!0})),window.addEventListener("blur",m);var a,s,c=Object.assign({},t,{plugins:i}),u=d(e);"production"!==ee.env.NODE_ENV&&(a=l(c.content),s=1<u.length,xe(a&&s,["tippy() was passed an Element as the `content` prop, but more than","one tippy instance was created by this invocation. This means the","content element will only be appended to the last tippy instance.","\n\n","Instead, pass the .innerHTML of the element, or use a function that","returns a cloned version of the element instead.","\n\n","1) content: element.innerHTML\n","2) content: () => element.cloneNode(true)"].join(" ")));var p=u.reduce(function(e,t){var n=t&&j(t,c);return n&&e.push(n),e},[]);return l(e)?p[0]:p}L.defaultProps=Oe,L.setDefaultProps=function(t){"production"!==ee.env.NODE_ENV&&b(t,[]),Object.keys(t).forEach(function(e){Oe[e]=t[e]})},L.currentInput=ge;var k={mouseover:"mouseenter",focusin:"focus",click:"click"};var D={name:"animateFill",defaultValue:!1,fn:function(e){var t;if(null==(t=e.props.render)||!t.$$tippy)return"production"!==ee.env.NODE_ENV&&Ee(e.props.animateFill,"The `animateFill` plugin requires the default render function."),{};var n,r=Le(e.popper),o=r.box,i=r.content,a=e.props.animateFill?((n=fe()).className=s,he([n],"hidden"),n):null;return{onCreate:function(){a&&(o.insertBefore(a,o.firstElementChild),o.setAttribute("data-animatefill",""),o.style.overflow="hidden",e.setProps({arrow:!1,animation:"shift-away"}))},onMount:function(){var e,t;a&&(e=o.style.transitionDuration,t=Number(e.replace("ms","")),i.style.transitionDelay=Math.round(t/10)+"ms",a.style.transitionDuration=e,he([a],"visible"))},onShow:function(){a&&(a.style.transitionDuration="0ms")},onHide:function(){a&&he([a],"hidden")}}}};var A={name:"followCursor",defaultValue:!1,fn:function(r){var l=r.reference,e=me(r.props.triggerTarget||l),o=null;function t(){return"manual"===r.props.trigger.trim()}function n(){var e=!!t()||null!==o&&!(0===o.clientX&&0===o.clientY);return r.props.followCursor&&e}function i(e){e&&r.setProps({getReferenceClientRect:null})}function a(){n()?e.addEventListener("mousemove",s):i(r.props.followCursor)}function d(){e.removeEventListener("mousemove",s)}function s(e){o={clientX:e.clientX,clientY:e.clientY};var t=!e.target||l.contains(e.target),s=r.props.followCursor,c=e.clientX,u=e.clientY,n=l.getBoundingClientRect(),p=c-n.left,f=u-n.top;!t&&r.props.interactive||r.setProps({getReferenceClientRect:function(){var e=l.getBoundingClientRect(),t=c,n=u;"initial"===s&&(t=e.left+p,n=e.top+f);var r="horizontal"===s?e.top:n,o="vertical"===s?e.right:t,i="horizontal"===s?e.bottom:n,a="vertical"===s?e.left:t;return{width:o-a,height:i-r,top:r,right:o,bottom:i,left:a}}}),(ge.isTouch||"initial"===r.props.followCursor&&r.state.isVisible)&&d()}return{onAfterUpdate:function(e,t){var n=t.followCursor;void 0===n||n||i(!0)},onMount:function(){n()&&s(o)},onShow:function(){t()&&(o={clientX:0,clientY:0},a())},onTrigger:function(e,t){o||(le(t)&&(o={clientX:t.clientX,clientY:t.clientY}),a())},onUntrigger:function(){r.state.isVisible||(d(),o=null)},onHidden:function(){d(),o=null}}}},S={name:"inlinePositioning",defaultValue:!1,fn:function(n){var r,o=n.reference;var t={name:"tippyInlinePositioning",enabled:!0,phase:"afterWrite",fn:function(e){var t=e.state;n.props.inlinePositioning&&(r!==t.placement&&n.setProps({getReferenceClientRect:function(){return function(t,e,n){if(n.length<2||null===t)return e;switch(t){case"top":case"bottom":var r=n[0],o=n[n.length-1],i="top"===t,a=r.top,s=o.bottom,c=i?r.left:o.left,u=i?r.right:o.right;return{top:a,bottom:s,left:c,right:u,width:u-c,height:s-a};case"left":case"right":var p=Math.min.apply(Math,n.map(function(e){return e.left})),f=Math.max.apply(Math,n.map(function(e){return e.right})),l=n.filter(function(e){return"left"===t?e.left===p:e.right===f}),d=l[0].top,h=l[l.length-1].bottom;return{top:d,bottom:h,left:p,right:f,width:f-p,height:h-d};default:return e}}(ue(t.placement),o.getBoundingClientRect(),pe(o.getClientRects()))}}),r=t.placement)}};return{onCreate:function(){var e;n.setProps({popperOptions:Object.assign({},n.props.popperOptions,{modifiers:[].concat((null==(e=n.props.popperOptions)?void 0:e.modifiers)||[],[t])})})}}}};var P={name:"sticky",defaultValue:!1,fn:function(n){var r=n.reference,o=n.popper;function i(e){return!0===n.props.sticky||n.props.sticky===e}var a=null,s=null;function c(){var e=i("reference")?(n.popperInstance?n.popperInstance.state.elements.reference:r).getBoundingClientRect():null,t=i("popper")?o.getBoundingClientRect():null;(e&&C(a,e)||t&&C(s,t))&&n.popperInstance&&n.popperInstance.update(),a=e,s=t,n.state.isMounted&&requestAnimationFrame(c)}return{onMount:function(){n.props.sticky&&c()}}}};function C(e,t){return!e||!t||(e.top!==t.top||e.right!==t.right||e.bottom!==t.bottom||e.left!==t.left)}L.setDefaultProps({render:T}),M.animateFill=D,M.createSingleton=function(i,a){var s;void 0===a&&(a={}),"production"!==ee.env.NODE_ENV&&Ee(!Array.isArray(i),["The first argument passed to createSingleton() must be an array of","tippy instances. The passed value was",String(i)].join(" ")),i.forEach(function(e){e.disable()});var c=i.map(function(e){return e.reference}),e={fn:function(){return{onDestroy:function(){i.forEach(function(e){e.enable()})},onTrigger:function(e,t){var n,r=t.currentTarget,o=c.indexOf(r);r!==s&&(s=r,n=(a.overrides||[]).concat("content").reduce(function(e,t){return e[t]=i[o].props[t],e},{}),e.setProps(Object.assign({},n,{getReferenceClientRect:function(){return r.getBoundingClientRect()}})))}}}};return L(fe(),Object.assign({},f(a,["overrides"]),{plugins:[e].concat(a.plugins||[]),triggerTarget:c}))},M.default=L,M.delegate=function(e,r){"production"!==ee.env.NODE_ENV&&Ee(!(r&&r.target),["You must specity a `target` prop indicating a CSS selector string matching","the target elements that should receive a tippy."].join(" "));var o=[],i=[],a=r.target,t=f(r,["target"]),n=Object.assign({},t,{trigger:"manual"}),s=Object.assign({},t,{showOnCreate:!0}),c=L(e,n);function u(e){var t,n;!e.target||(t=e.target.closest(a))&&((t.getAttribute("data-tippy-trigger")||r.trigger||Oe.trigger).indexOf(k[e.type])<0||t._tippy||(n=L(t,s))&&(i=i.concat(n)))}function p(e,t,n,r){void 0===r&&(r=!1),e.addEventListener(t,n,r),o.push({node:e,eventType:t,handler:n,options:r})}return se(c).forEach(function(e){var t,n=e.destroy;e.destroy=function(e){void 0===e&&(e=!0),e&&i.forEach(function(e){e.destroy()}),i=[],o.forEach(function(e){var t=e.node,n=e.eventType,r=e.handler,o=e.options;t.removeEventListener(n,r,o)}),o=[],n()},p(t=e.reference,"mouseover",u),p(t,"focusin",u),p(t,"click",u)}),c},M.followCursor=A,M.hideAll=function(e){var t=void 0===e?{}:e,r=t.exclude,o=t.duration;Ae.forEach(function(e){var t,n=!1;r&&(n=a(r)?e.reference===r:e.popper===r.popper),n||(t=e.props.duration,e.setProps({duration:o}),e.hide(),e.state.isDestroyed||e.setProps({duration:t}))})},M.inlinePositioning=S,M.roundArrow='<svg width="16" height="6" xmlns="http://www.w3.org/2000/svg"><path d="M0 6s1.796-.013 4.67-3.615C5.851.9 6.93.006 8 0c1.07-.006 2.148.887 3.343 2.385C14.233 6.005 16 6 16 6H0z"></svg>',M.sticky=P}).call(this,N("_process"))},{"@popperjs/core":5,_process:6}]},{},[1]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJjb250ZW50L3NjcmlwdC5qcyIsIm5vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FzeW5jVG9HZW5lcmF0b3IuanMiLCJub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQuanMiLCJub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3IvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvZGlzdC9janMvcG9wcGVyLmpzIiwibm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIm5vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJub2RlX21vZHVsZXMvdGlwcHkuanMvZGlzdC90aXBweS5janMuanMiXSwibmFtZXMiOlsiciIsImUiLCJuIiwidCIsIm8iLCJpIiwiZiIsImMiLCJyZXF1aXJlIiwidSIsImEiLCJFcnJvciIsImNvZGUiLCJwIiwiZXhwb3J0cyIsImNhbGwiLCJsZW5ndGgiLCIxIiwibW9kdWxlIiwiX3Nob3dQcmV2aWV3IiwiX3RpcHB5IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJ3aWtpQXV0b3N1Z2dlc3RYSFIiLCJYTUxIdHRwUmVxdWVzdCIsInNlYXJjaCIsInRoaXMiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiZXZlbnQiLCJzZWFyY2hTdWdnZXN0aW9ucyIsImlucHV0IiwidGFyZ2V0IiwidmFsdWUiLCJhYm9ydCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlc3BvbnNlIiwicmVhZHlTdGF0ZSIsInN0YXR1cyIsIkpTT04iLCJwYXJzZSIsInJlc3BvbnNlVGV4dCIsImlubmVySFRNTCIsImZvckVhY2giLCJpdGVtIiwib3B0aW9uIiwiY3JlYXRlRWxlbWVudCIsImFwcGVuZENoaWxkIiwib3BlbiIsImVuY29kZVVSSUNvbXBvbmVudCIsInNlbmQiLCJ3aWtpbXZjIiwidG1yIiwic2hvd1ByZXZpZXciLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJfcmVnZW5lcmF0b3IiLCJtYXJrIiwiX2NhbGxlZSIsImxpbmsiLCJmb3JtRGF0YSIsIndyYXAiLCJfY29udGV4dCIsInByZXYiLCJuZXh0IiwiY3VycmVudFRhcmdldCIsImFicnVwdCIsIkZvcm1EYXRhIiwiYXBwZW5kIiwiY29udGVudCIsImRlbGF5IiwicGxhY2VtZW50IiwiYWxsb3dIVE1MIiwib25DcmVhdGUiLCJpbnN0YW5jZSIsIl9pc0ZldGNoaW5nIiwiX2xvYWRlZCIsIm9uU2hvdyIsImZldGNoIiwibWV0aG9kIiwiYm9keSIsImhlYWRlcnMiLCJBY2NlcHQiLCJ0aGVuIiwianNvbiIsImhpZGUiLCJkaXNhYmxlIiwic2V0Q29udGVudCIsImVycm9yIiwic2V0UHJvcHMiLCJzZXRUaW1lb3V0Iiwic2hvdyIsInN0b3AiLCJfeCIsIl94MiIsImFwcGx5IiwiYXJndW1lbnRzIiwiaGlkZVByZXZpZXciLCJjbGVhclRpbWVvdXQiLCJzaG93SGlkZU1lc3NhZ2UiLCJkaXYiLCJwYXJzZUludCIsImdldENvbXB1dGVkU3R5bGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwicGFyZW50RWxlbWVudCIsImNsYXNzTGlzdCIsInJlbW92ZSIsImFzeW5jR2VuZXJhdG9yU3RlcCIsImdlbiIsInJlc29sdmUiLCJyZWplY3QiLCJfbmV4dCIsIl90aHJvdyIsImtleSIsImFyZyIsImluZm8iLCJkb25lIiwiUHJvbWlzZSIsImZuIiwic2VsZiIsImFyZ3MiLCJlcnIiLCJ1bmRlZmluZWQiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImVsZW1lbnQiLCJyZWN0Iiwid2lkdGgiLCJoZWlnaHQiLCJ0b3AiLCJyaWdodCIsImJvdHRvbSIsImxlZnQiLCJ4IiwieSIsImdldFdpbmRvdyIsIm5vZGUiLCJ0b1N0cmluZyIsIm93bmVyRG9jdW1lbnQiLCJkZWZhdWx0VmlldyIsImdldFdpbmRvd1Njcm9sbCIsIndpbiIsInNjcm9sbExlZnQiLCJwYWdlWE9mZnNldCIsInNjcm9sbFRvcCIsInBhZ2VZT2Zmc2V0IiwiaXNFbGVtZW50IiwiRWxlbWVudCIsImlzSFRNTEVsZW1lbnQiLCJIVE1MRWxlbWVudCIsImdldE5vZGVOYW1lIiwibm9kZU5hbWUiLCJ0b0xvd2VyQ2FzZSIsImdldERvY3VtZW50RWxlbWVudCIsImRvY3VtZW50RWxlbWVudCIsImdldFdpbmRvd1Njcm9sbEJhclgiLCJpc1Njcm9sbFBhcmVudCIsIl9nZXRDb21wdXRlZFN0eWxlIiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJ0ZXN0IiwiZ2V0Q29tcG9zaXRlUmVjdCIsImVsZW1lbnRPclZpcnR1YWxFbGVtZW50Iiwib2Zmc2V0UGFyZW50IiwiaXNGaXhlZCIsInNjcm9sbCIsIm9mZnNldHMiLCJjbGllbnRMZWZ0IiwiY2xpZW50VG9wIiwiZ2V0TGF5b3V0UmVjdCIsIm9mZnNldExlZnQiLCJvZmZzZXRUb3AiLCJvZmZzZXRXaWR0aCIsIm9mZnNldEhlaWdodCIsImdldFBhcmVudE5vZGUiLCJhc3NpZ25lZFNsb3QiLCJwYXJlbnROb2RlIiwiaG9zdCIsImxpc3RTY3JvbGxQYXJlbnRzIiwibGlzdCIsInNjcm9sbFBhcmVudCIsImdldFNjcm9sbFBhcmVudCIsImluZGV4T2YiLCJpc0JvZHkiLCJjb25jYXQiLCJ2aXN1YWxWaWV3cG9ydCIsInVwZGF0ZWRMaXN0IiwiZ2V0VHJ1ZU9mZnNldFBhcmVudCIsInBvc2l0aW9uIiwiZ2V0T2Zmc2V0UGFyZW50IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJhdXRvIiwiYmFzZVBsYWNlbWVudHMiLCJzdGFydCIsImVuZCIsImNsaXBwaW5nUGFyZW50cyIsInZpZXdwb3J0IiwicG9wcGVyIiwicmVmZXJlbmNlIiwidmFyaWF0aW9uUGxhY2VtZW50cyIsInJlZHVjZSIsImFjYyIsInBsYWNlbWVudHMiLCJtb2RpZmllclBoYXNlcyIsIm9yZGVyIiwibW9kaWZpZXJzIiwibWFwIiwiTWFwIiwidmlzaXRlZCIsIlNldCIsInJlc3VsdCIsIm1vZGlmaWVyIiwic2V0IiwibmFtZSIsImhhcyIsInNvcnQiLCJhZGQiLCJyZXF1aXJlcyIsInJlcXVpcmVzSWZFeGlzdHMiLCJkZXAiLCJkZXBNb2RpZmllciIsImdldCIsInB1c2giLCJmb3JtYXQiLCJzdHIiLCJfbGVuIiwiQXJyYXkiLCJfa2V5IiwicmVwbGFjZSIsIklOVkFMSURfTU9ESUZJRVJfRVJST1IiLCJNSVNTSU5HX0RFUEVOREVOQ1lfRVJST1IiLCJWQUxJRF9QUk9QRVJUSUVTIiwiZ2V0QmFzZVBsYWNlbWVudCIsInNwbGl0IiwiSU5WQUxJRF9FTEVNRU5UX0VSUk9SIiwiREVGQVVMVF9PUFRJT05TIiwic3RyYXRlZ3kiLCJhcmVWYWxpZEVsZW1lbnRzIiwic29tZSIsInBvcHBlckdlbmVyYXRvciIsImdlbmVyYXRvck9wdGlvbnMiLCJfZ2VuZXJhdG9yT3B0aW9ucyRkZWYiLCJkZWZhdWx0TW9kaWZpZXJzIiwiX2dlbmVyYXRvck9wdGlvbnMkZGVmMiIsImRlZmF1bHRPcHRpb25zIiwib3B0aW9ucyIsInBlbmRpbmciLCJzdGF0ZSIsIm9yZGVyZWRNb2RpZmllcnMiLCJhc3NpZ24iLCJtb2RpZmllcnNEYXRhIiwiZWxlbWVudHMiLCJhdHRyaWJ1dGVzIiwic3R5bGVzIiwiZWZmZWN0Q2xlYW51cEZucyIsImlzRGVzdHJveWVkIiwic2V0T3B0aW9ucyIsImNsZWFudXBNb2RpZmllckVmZmVjdHMiLCJzY3JvbGxQYXJlbnRzIiwiY29udGV4dEVsZW1lbnQiLCJtZXJnZWQiLCJhcnIiLCJpZGVudGlmaWVycyIsImN1cnJlbnQiLCJleGlzdGluZyIsImRhdGEiLCJrZXlzIiwicGhhc2UiLCJmaWx0ZXIiLCJtIiwiZW5hYmxlZCIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsIl9yZWYiLCJpZGVudGlmaWVyIiwiY29uc29sZSIsIlN0cmluZyIsImpvaW4iLCJlZmZlY3QiLCJpc0FycmF5IiwicyIsInJlcXVpcmVtZW50IiwiZmluZCIsIm1vZCIsIl9yZWYyIiwibWFyZ2luVG9wIiwibWFyZ2luUmlnaHQiLCJtYXJnaW5Cb3R0b20iLCJtYXJnaW5MZWZ0IiwibWFyZ2luIiwicGFyc2VGbG9hdCIsIndhcm4iLCJfcmVmMyIsImNsZWFudXBGbiIsIl9yZWYzJG9wdGlvbnMiLCJ1cGRhdGUiLCJmb3JjZVVwZGF0ZSIsIl9zdGF0ZSRlbGVtZW50cyIsInJlY3RzIiwicmVzZXQiLCJfc3RhdGUkb3JkZXJlZE1vZGlmaWUiLCJfc3RhdGUkb3JkZXJlZE1vZGlmaWUyIiwiX29wdGlvbnMiLCJfX2RlYnVnX2xvb3BzX18iLCJpbmRleCIsImRlc3Ryb3kiLCJvbkZpcnN0VXBkYXRlIiwicGFzc2l2ZSIsImdldFZhcmlhdGlvbiIsImdldE1haW5BeGlzRnJvbVBsYWNlbWVudCIsImNvbXB1dGVPZmZzZXRzIiwiYmFzZVBsYWNlbWVudCIsInZhcmlhdGlvbiIsImNvbW1vblgiLCJjb21tb25ZIiwibWFpbkF4aXMiLCJsZW4iLCJNYXRoIiwiZmxvb3IiLCJjZWlsIiwidW5zZXRTaWRlcyIsIm1hcFRvU3R5bGVzIiwiX09iamVjdCRhc3NpZ24yIiwiZHByIiwicG9wcGVyUmVjdCIsImdwdUFjY2VsZXJhdGlvbiIsImFkYXB0aXZlIiwiX3JvdW5kT2Zmc2V0cyIsImRldmljZVBpeGVsUmF0aW8iLCJyb3VuZCIsImhhc1giLCJoYXNPd25Qcm9wZXJ0eSIsImhhc1kiLCJzaWRlWCIsInNpZGVZIiwiY2xpZW50SGVpZ2h0IiwiY2xpZW50V2lkdGgiLCJfT2JqZWN0JGFzc2lnbiIsImNvbW1vblN0eWxlcyIsInRyYW5zZm9ybSIsImhhc2giLCJnZXRPcHBvc2l0ZVBsYWNlbWVudCIsIm1hdGNoZWQiLCJoYXNoJDEiLCJnZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudCIsInRvTnVtYmVyIiwiY3NzVmFsdWUiLCJnZXREZWNvcmF0aW9ucyIsImNvbXB1dGVkU3R5bGUiLCJib3JkZXJzIiwiYm9yZGVyVG9wV2lkdGgiLCJib3JkZXJSaWdodFdpZHRoIiwiYm9yZGVyQm90dG9tV2lkdGgiLCJib3JkZXJMZWZ0V2lkdGgiLCJpc0hUTUwiLCJ3aW5TY3JvbGxCYXJYIiwiaW5uZXJIZWlnaHQiLCJpbm5lcldpZHRoIiwiY29udGFpbnMiLCJwYXJlbnQiLCJjaGlsZCIsImlzU2hhZG93IiwiQm9vbGVhbiIsImdldFJvb3ROb2RlIiwiaXNTYW1lTm9kZSIsInJlY3RUb0NsaWVudFJlY3QiLCJnZXRDbGllbnRSZWN0RnJvbU1peGVkVHlwZSIsImNsaXBwaW5nUGFyZW50IiwibmF2aWdhdG9yIiwicGxhdGZvcm0iLCJ3aW5TY3JvbGwiLCJkb2N1bWVudFJlY3QiLCJtYXgiLCJnZXRDbGlwcGluZ1JlY3QiLCJib3VuZGFyeSIsInJvb3RCb3VuZGFyeSIsImNsaXBwZXJFbGVtZW50IiwibWFpbkNsaXBwaW5nUGFyZW50cyIsImZpcnN0Q2xpcHBpbmdQYXJlbnQiLCJjbGlwcGluZ1JlY3QiLCJhY2NSZWN0IiwiZGVjb3JhdGlvbnMiLCJtaW4iLCJnZXRGcmVzaFNpZGVPYmplY3QiLCJtZXJnZVBhZGRpbmdPYmplY3QiLCJwYWRkaW5nT2JqZWN0IiwiZXhwYW5kVG9IYXNoTWFwIiwiaGFzaE1hcCIsImRldGVjdE92ZXJmbG93Iiwib2Zmc2V0IiwiX29wdGlvbnMkcGxhY2VtZW50IiwiX29wdGlvbnMkYm91bmRhcnkiLCJfb3B0aW9ucyRyb290Qm91bmRhcnkiLCJfb3B0aW9ucyRlbGVtZW50Q29udGUiLCJlbGVtZW50Q29udGV4dCIsIl9vcHRpb25zJGFsdEJvdW5kYXJ5IiwiYWx0Qm91bmRhcnkiLCJfb3B0aW9ucyRwYWRkaW5nIiwicGFkZGluZyIsImFsdENvbnRleHQiLCJyZWZlcmVuY2VFbGVtZW50IiwiY2xpcHBpbmdDbGllbnRSZWN0IiwicmVmZXJlbmNlQ2xpZW50UmVjdCIsInBvcHBlck9mZnNldHMiLCJwb3BwZXJDbGllbnRSZWN0IiwiZWxlbWVudENsaWVudFJlY3QiLCJvdmVyZmxvd09mZnNldHMiLCJvZmZzZXREYXRhIiwibXVsdGlwbHkiLCJheGlzIiwid2l0aGluIiwiZ2V0U2lkZU9mZnNldHMiLCJwcmV2ZW50ZWRPZmZzZXRzIiwiaXNBbnlTaWRlRnVsbHlDbGlwcGVkIiwic2lkZSIsIl9vcHRpb25zJHNjcm9sbCIsIl9vcHRpb25zJHJlc2l6ZSIsInJlc2l6ZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJ0cmFuc2l0aW9uUHJvcGVydHkiLCJfb3B0aW9ucyRncHVBY2NlbGVyYXQiLCJfb3B0aW9ucyRhZGFwdGl2ZSIsInByb3BlcnR5IiwiYXJyb3ciLCJkYXRhLXBvcHBlci1wbGFjZW1lbnQiLCJzdHlsZSIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsImluaXRpYWxTdHlsZXMiLCJhdHRyaWJ1dGUiLCJfb3B0aW9ucyRvZmZzZXQiLCJpbnZlcnREaXN0YW5jZSIsInNraWRkaW5nIiwiZGlzdGFuY2UiLCJfZGF0YSRzdGF0ZSRwbGFjZW1lbnQiLCJfc2tpcCIsIl9vcHRpb25zJG1haW5BeGlzIiwiY2hlY2tNYWluQXhpcyIsIl9vcHRpb25zJGFsdEF4aXMiLCJhbHRBeGlzIiwiY2hlY2tBbHRBeGlzIiwic3BlY2lmaWVkRmFsbGJhY2tQbGFjZW1lbnRzIiwiZmFsbGJhY2tQbGFjZW1lbnRzIiwiX29wdGlvbnMkZmxpcFZhcmlhdGlvIiwiZmxpcFZhcmlhdGlvbnMiLCJhbGxvd2VkQXV0b1BsYWNlbWVudHMiLCJwcmVmZXJyZWRQbGFjZW1lbnQiLCJvcHBvc2l0ZVBsYWNlbWVudCIsImdldEV4cGFuZGVkRmFsbGJhY2tQbGFjZW1lbnRzIiwiX29wdGlvbnMkYWxsb3dlZEF1dG9QIiwib3ZlcmZsb3dzIiwiYiIsImNvbXB1dGVBdXRvUGxhY2VtZW50IiwicmVmZXJlbmNlUmVjdCIsImNoZWNrc01hcCIsIm1ha2VGYWxsYmFja0NoZWNrcyIsImZpcnN0Rml0dGluZ1BsYWNlbWVudCIsIl9iYXNlUGxhY2VtZW50IiwiaXNTdGFydFZhcmlhdGlvbiIsImlzVmVydGljYWwiLCJtYWluVmFyaWF0aW9uU2lkZSIsImFsdFZhcmlhdGlvblNpZGUiLCJjaGVja3MiLCJldmVyeSIsImNoZWNrIiwiX2xvb3AiLCJfaSIsImZpdHRpbmdQbGFjZW1lbnQiLCJzbGljZSIsIm1haW5TaWRlIiwiYWx0U2lkZSIsImFkZGl0aXZlIiwibWluTGVuIiwibWF4TGVuIiwiYXJyb3dFbGVtZW50IiwiYXJyb3dSZWN0IiwiYXJyb3dQYWRkaW5nT2JqZWN0IiwiYXJyb3dQYWRkaW5nTWluIiwiYXJyb3dQYWRkaW5nTWF4IiwiYXJyb3dMZW4iLCJtaW5PZmZzZXQiLCJtYXhPZmZzZXQiLCJhcnJvd09mZnNldFBhcmVudCIsImNsaWVudE9mZnNldCIsIm9mZnNldE1vZGlmaWVyVmFsdWUiLCJ0ZXRoZXJNaW4iLCJ0ZXRoZXJNYXgiLCJwcmV2ZW50ZWRPZmZzZXQiLCJfbWFpblNpZGUiLCJfYWx0U2lkZSIsIl9vZmZzZXQiLCJfcHJldmVudGVkT2Zmc2V0IiwiX29wdGlvbnMkdGV0aGVyIiwidGV0aGVyIiwiX29wdGlvbnMkdGV0aGVyT2Zmc2V0IiwidGV0aGVyT2Zmc2V0IiwiaXNCYXNlUGxhY2VtZW50IiwidGV0aGVyT2Zmc2V0VmFsdWUiLCJfc3RhdGUkbW9kaWZpZXJzRGF0YSQiLCJtaW5Qcm9wIiwibWF4UHJvcCIsImVuZERpZmYiLCJzdGFydERpZmYiLCJjbGllbnRTaXplIiwiY2VudGVyVG9SZWZlcmVuY2UiLCJjZW50ZXIiLCJjZW50ZXJPZmZzZXQiLCJfb3B0aW9ucyRlbGVtZW50IiwicXVlcnlTZWxlY3RvciIsInByZXZlbnRPdmVyZmxvdyIsInJlZmVyZW5jZU92ZXJmbG93IiwicG9wcGVyQWx0T3ZlcmZsb3ciLCJyZWZlcmVuY2VDbGlwcGluZ09mZnNldHMiLCJwb3BwZXJFc2NhcGVPZmZzZXRzIiwiaXNSZWZlcmVuY2VIaWRkZW4iLCJoYXNQb3BwZXJFc2NhcGVkIiwiZGF0YS1wb3BwZXItcmVmZXJlbmNlLWhpZGRlbiIsImRhdGEtcG9wcGVyLWVzY2FwZWQiLCJjcmVhdGVQb3BwZXIiLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwiZGVmYXVsdFNldFRpbW91dCIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiZnVuIiwiY3VycmVudFF1ZXVlIiwicXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpblF1ZXVlIiwidGltZW91dCIsInJ1biIsIm1hcmtlciIsInJ1bkNsZWFyVGltZW91dCIsIkl0ZW0iLCJhcnJheSIsIm5vb3AiLCJuZXh0VGljayIsInByb3RvdHlwZSIsInRpdGxlIiwiYnJvd3NlciIsImFyZ3YiLCJ2ZXJzaW9uIiwidmVyc2lvbnMiLCJvbiIsImFkZExpc3RlbmVyIiwib25jZSIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW1pdCIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJsaXN0ZW5lcnMiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJkaXIiLCJ1bWFzayIsInJ1bnRpbWUiLCJPcCIsImhhc093biIsIiRTeW1ib2wiLCJTeW1ib2wiLCJpdGVyYXRvclN5bWJvbCIsIml0ZXJhdG9yIiwiYXN5bmNJdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJ0b1N0cmluZ1RhZ1N5bWJvbCIsInRvU3RyaW5nVGFnIiwiaW5uZXJGbiIsIm91dGVyRm4iLCJ0cnlMb2NzTGlzdCIsImNvbnRleHQiLCJwcm90b0dlbmVyYXRvciIsIkdlbmVyYXRvciIsImdlbmVyYXRvciIsImNyZWF0ZSIsIkNvbnRleHQiLCJfaW52b2tlIiwiR2VuU3RhdGVTdXNwZW5kZWRTdGFydCIsIkdlblN0YXRlRXhlY3V0aW5nIiwiR2VuU3RhdGVDb21wbGV0ZWQiLCJkb25lUmVzdWx0IiwiZGVsZWdhdGUiLCJkZWxlZ2F0ZVJlc3VsdCIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJDb250aW51ZVNlbnRpbmVsIiwic2VudCIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJyZWNvcmQiLCJ0cnlDYXRjaCIsInR5cGUiLCJHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiZ2V0UHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsIk5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlIiwidmFsdWVzIiwiR3AiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJBc3luY0l0ZXJhdG9yIiwiUHJvbWlzZUltcGwiLCJwcmV2aW91c1Byb21pc2UiLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsImludm9rZSIsIl9fYXdhaXQiLCJ1bndyYXBwZWQiLCJUeXBlRXJyb3IiLCJyZXN1bHROYW1lIiwibmV4dExvYyIsInB1c2hUcnlFbnRyeSIsImxvY3MiLCJlbnRyeSIsInRyeUxvYyIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFmdGVyTG9jIiwidHJ5RW50cmllcyIsInJlc2V0VHJ5RW50cnkiLCJjb21wbGV0aW9uIiwiaXRlcmFibGUiLCJpdGVyYXRvck1ldGhvZCIsImlzTmFOIiwiY29uc3RydWN0b3IiLCJkaXNwbGF5TmFtZSIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJjdG9yIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJhd3JhcCIsImFzeW5jIiwiaXRlciIsIm9iamVjdCIsInJldmVyc2UiLCJwb3AiLCJza2lwVGVtcFJlc2V0IiwiY2hhckF0Iiwicm9vdFJlY29yZCIsInJ2YWwiLCJleGNlcHRpb24iLCJoYW5kbGUiLCJsb2MiLCJjYXVnaHQiLCJoYXNDYXRjaCIsImhhc0ZpbmFsbHkiLCJmaW5hbGx5RW50cnkiLCJjb21wbGV0ZSIsImZpbmlzaCIsImNhdGNoIiwidGhyb3duIiwiZGVsZWdhdGVZaWVsZCIsInJlZ2VuZXJhdG9yUnVudGltZSIsImFjY2lkZW50YWxTdHJpY3RNb2RlIiwiRnVuY3Rpb24iLCJjb3JlIiwiUEFTU0lWRSIsIklPU19DTEFTUyIsIkNPTlRFTlRfQ0xBU1MiLCJCQUNLRFJPUF9DTEFTUyIsIkFSUk9XX0NMQVNTIiwiU1ZHX0FSUk9XX0NMQVNTIiwiZ2V0VmFsdWVBdEluZGV4T3JSZXR1cm4iLCJkZWZhdWx0VmFsdWUiLCJ2IiwiaXNUeXBlIiwiaW52b2tlV2l0aEFyZ3NPclJldHVybiIsImRlYm91bmNlIiwibXMiLCJyZW1vdmVQcm9wZXJ0aWVzIiwiY2xvbmUiLCJub3JtYWxpemVUb0FycmF5IiwicHVzaElmVW5pcXVlIiwiYXJyYXlGcm9tIiwiaXNNb3VzZUV2ZW50IiwiaXNSZWZlcmVuY2VFbGVtZW50IiwiZ2V0QXJyYXlPZkVsZW1lbnRzIiwicXVlcnlTZWxlY3RvckFsbCIsInNldFRyYW5zaXRpb25EdXJhdGlvbiIsImVscyIsImVsIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwic2V0VmlzaWJpbGl0eVN0YXRlIiwiZ2V0T3duZXJEb2N1bWVudCIsImVsZW1lbnRPckVsZW1lbnRzIiwidXBkYXRlVHJhbnNpdGlvbkVuZExpc3RlbmVyIiwiYm94IiwiYWN0aW9uIiwibGlzdGVuZXIiLCJjdXJyZW50SW5wdXQiLCJpc1RvdWNoIiwibGFzdE1vdXNlTW92ZVRpbWUiLCJvbkRvY3VtZW50VG91Y2hTdGFydCIsInBlcmZvcm1hbmNlIiwib25Eb2N1bWVudE1vdXNlTW92ZSIsIm5vdyIsIm9uV2luZG93Qmx1ciIsImFjdGl2ZUVsZW1lbnQiLCJibHVyIiwiaXNWaXNpYmxlIiwiaXNCcm93c2VyIiwidWEiLCJ1c2VyQWdlbnQiLCJpc0lFIiwiaXNJT1MiLCJjcmVhdGVNZW1vcnlMZWFrV2FybmluZyIsImNsZWFuIiwidHJpbSIsImdldEZvcm1hdHRlZE1lc3NhZ2UiLCJtZXNzYWdlIiwid2FybldoZW4iLCJjb25kaXRpb24iLCJfY29uc29sZSIsImVycm9yV2hlbiIsIl9jb25zb2xlMiIsInBsdWdpblByb3BzIiwiYW5pbWF0ZUZpbGwiLCJmb2xsb3dDdXJzb3IiLCJpbmxpbmVQb3NpdGlvbmluZyIsInN0aWNreSIsImRlZmF1bHRQcm9wcyIsImFwcGVuZFRvIiwiYXJpYSIsImV4cGFuZGVkIiwiZHVyYXRpb24iLCJnZXRSZWZlcmVuY2VDbGllbnRSZWN0IiwiaGlkZU9uQ2xpY2siLCJpZ25vcmVBdHRyaWJ1dGVzIiwiaW50ZXJhY3RpdmUiLCJpbnRlcmFjdGl2ZUJvcmRlciIsImludGVyYWN0aXZlRGVib3VuY2UiLCJtb3ZlVHJhbnNpdGlvbiIsIm9uQWZ0ZXJVcGRhdGUiLCJvbkJlZm9yZVVwZGF0ZSIsIm9uRGVzdHJveSIsIm9uSGlkZGVuIiwib25IaWRlIiwib25Nb3VudCIsIm9uU2hvd24iLCJvblRyaWdnZXIiLCJvblVudHJpZ2dlciIsIm9uQ2xpY2tPdXRzaWRlIiwicGx1Z2lucyIsInBvcHBlck9wdGlvbnMiLCJyZW5kZXIiLCJzaG93T25DcmVhdGUiLCJ0b3VjaCIsInRyaWdnZXIiLCJ0cmlnZ2VyVGFyZ2V0IiwiYW5pbWF0aW9uIiwiaW5lcnRpYSIsIm1heFdpZHRoIiwicm9sZSIsInRoZW1lIiwiekluZGV4IiwiZGVmYXVsdEtleXMiLCJnZXRFeHRlbmRlZFBhc3NlZFByb3BzIiwicGFzc2VkUHJvcHMiLCJwbHVnaW4iLCJldmFsdWF0ZVByb3BzIiwicHJvcHMiLCJvdXQiLCJ2YWx1ZUFzU3RyaW5nIiwiZ2V0QXR0cmlidXRlIiwidmFsaWRhdGVQcm9wcyIsInBhcnRpYWxQcm9wcyIsInByb3AiLCJub25QbHVnaW5Qcm9wcyIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiaHRtbCIsImNyZWF0ZUFycm93RWxlbWVudCIsImNsYXNzTmFtZSIsInRleHRDb250ZW50IiwiZ2V0Q2hpbGRyZW4iLCJmaXJzdEVsZW1lbnRDaGlsZCIsImJveENoaWxkcmVuIiwiY2hpbGRyZW4iLCJiYWNrZHJvcCIsIm9uVXBkYXRlIiwicHJldlByb3BzIiwibmV4dFByb3BzIiwiX2dldENoaWxkcmVuIiwicmVtb3ZlQ2hpbGQiLCIkJHRpcHB5IiwiaWRDb3VudGVyIiwibW91c2VNb3ZlTGlzdGVuZXJzIiwibW91bnRlZEluc3RhbmNlcyIsImNyZWF0ZVRpcHB5Iiwic2hvd1RpbWVvdXQiLCJoaWRlVGltZW91dCIsInNjaGVkdWxlSGlkZUFuaW1hdGlvbkZyYW1lIiwibGFzdFRyaWdnZXJFdmVudCIsImN1cnJlbnRUcmFuc2l0aW9uRW5kTGlzdGVuZXIiLCJpc1Zpc2libGVGcm9tQ2xpY2siLCJkaWRIaWRlRHVlVG9Eb2N1bWVudE1vdXNlRG93biIsImlnbm9yZU9uRmlyc3RVcGRhdGUiLCJkZWJvdW5jZWRPbk1vdXNlTW92ZSIsIm9uTW91c2VNb3ZlIiwiZG9jIiwiaWQiLCJwb3BwZXJJbnN0YW5jZSIsImlzRW5hYmxlZCIsImlzTW91bnRlZCIsImlzU2hvd24iLCJjbGVhckRlbGF5VGltZW91dHMiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImludm9rZUhvb2siLCJyZW1vdmVMaXN0ZW5lcnMiLCJhZGRMaXN0ZW5lcnMiLCJjbGVhbnVwSW50ZXJhY3RpdmVNb3VzZUxpc3RlbmVycyIsImhhbmRsZUFyaWFFeHBhbmRlZEF0dHJpYnV0ZSIsImhhbmRsZVN0eWxlcyIsImNyZWF0ZVBvcHBlckluc3RhbmNlIiwiZ2V0TmVzdGVkUG9wcGVyVHJlZSIsIm5lc3RlZFBvcHBlciIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImlzQWxyZWFkeVZpc2libGUiLCJpc0Rpc2FibGVkIiwiaXNUb3VjaEFuZFRvdWNoRGlzYWJsZWQiLCJnZXRDdXJyZW50VGFyZ2V0IiwiaGFzQXR0cmlidXRlIiwiZ2V0SXNEZWZhdWx0UmVuZGVyRm4iLCJ2aXNpYmlsaXR5IiwiYWRkRG9jdW1lbnRNb3VzZURvd25MaXN0ZW5lciIsInRyYW5zaXRpb24iLCJfZ2V0RGVmYXVsdFRlbXBsYXRlQ2gyIiwiZ2V0RGVmYXVsdFRlbXBsYXRlQ2hpbGRyZW4iLCJfZ2V0RGVmYXVsdFRlbXBsYXRlQ2gzIiwiX2JveCIsIl9jb250ZW50IiwiaGFuZGxlQXJpYUNvbnRlbnRBdHRyaWJ1dGUiLCJ1cGRhdGVJT1NDbGFzcyIsIm9uVHJhbnNpdGlvbkVuZCIsIm5leHRFbGVtZW50U2libGluZyIsIm1vdW50IiwiaXNBbHJlYWR5SGlkZGVuIiwiX2dldERlZmF1bHRUZW1wbGF0ZUNoNCIsInJlbW92ZURvY3VtZW50TW91c2VEb3duTGlzdGVuZXIiLCJjYWxsYmFjayIsIm9uVHJhbnNpdGlvbmVkT3V0IiwidW5tb3VudCIsImVuYWJsZSIsImRlc3Ryb3lQb3BwZXJJbnN0YW5jZSIsIl9wcm9wcyRyZW5kZXIiLCJwbHVnaW5zSG9va3MiLCJoYXNBcmlhRXhwYW5kZWQiLCJzY2hlZHVsZVNob3ciLCJnZXROb3JtYWxpemVkVG91Y2hTZXR0aW5ncyIsImdldElzQ3VzdG9tVG91Y2hCZWhhdmlvciIsIl9pbnN0YW5jZSRwcm9wcyRyZW5kZSIsImdldERlbGF5IiwiaXNTaG93IiwicG9pbnRlckV2ZW50cyIsImlzQWRkIiwic2hvdWxkQWRkIiwiaG9vayIsInNob3VsZEludm9rZVByb3BzSG9vayIsIl9pbnN0YW5jZSRwcm9wcyIsInBsdWdpbkhvb2tzIiwiYXR0ciIsIm5leHRWYWx1ZSIsImN1cnJlbnRWYWx1ZSIsInNjaGVkdWxlSGlkZSIsIm9uRG9jdW1lbnRNb3VzZURvd24iLCJldmVudFR5cGUiLCJoYW5kbGVyIiwib25Nb3VzZUxlYXZlIiwib25CbHVyT3JGb2N1c091dCIsIl9nZXROb3JtYWxpemVkVG91Y2hTZSIsInNob3VsZFNjaGVkdWxlQ2xpY2tIaWRlIiwiaXNFdmVudExpc3RlbmVyU3RvcHBlZCIsInBvcHBlclRyZWVEYXRhIiwiY2xpZW50WCIsImNsaWVudFkiLCJpc0N1cnNvck92ZXJSZWZlcmVuY2VPclBvcHBlciIsIl9pbnN0YW5jZSRwb3BwZXJJbnN0YSIsInBvcHBlclN0YXRlIiwidG9wRGlzdGFuY2UiLCJib3R0b21EaXN0YW5jZSIsImxlZnREaXN0YW5jZSIsInJpZ2h0RGlzdGFuY2UiLCJleGNlZWRzVG9wIiwiZXhjZWVkc0JvdHRvbSIsImV4Y2VlZHNMZWZ0IiwiZXhjZWVkc1JpZ2h0IiwicmVsYXRlZFRhcmdldCIsIl9pbnN0YW5jZSRwcm9wczIiLCJjb21wdXRlZFJlZmVyZW5jZSIsInRpcHB5TW9kaWZpZXIiLCJhcnJvd01vZGlmaWVyIiwidGlwcHkiLCJ0YXJnZXRzIiwib3B0aW9uYWxQcm9wcyIsImRpZFBhc3NGYWxzeVZhbHVlIiwiZGlkUGFzc1BsYWluT2JqZWN0IiwiY2FwdHVyZSIsImlzU2luZ2xlQ29udGVudEVsZW1lbnQiLCJpc01vcmVUaGFuT25lUmVmZXJlbmNlRWxlbWVudCIsImluc3RhbmNlcyIsInNldERlZmF1bHRQcm9wcyIsIkJVQkJMSU5HX0VWRU5UU19NQVAiLCJtb3VzZW92ZXIiLCJmb2N1c2luIiwiY2xpY2siLCJpbnNlcnRCZWZvcmUiLCJOdW1iZXIiLCJ0cmFuc2l0aW9uRGVsYXkiLCJpbml0aWFsTW91c2VDb29yZHMiLCJnZXRJc01hbnVhbCIsImdldElzRW5hYmxlZCIsImlzVmFsaWRNb3VzZUV2ZW50IiwidW5zZXRSZWZlcmVuY2VDbGllbnRSZWN0Iiwic2hvdWxkVW5zZXQiLCJoYW5kbGVNb3VzZU1vdmVMaXN0ZW5lciIsImlzQ3Vyc29yT3ZlclJlZmVyZW5jZSIsInJlbGF0aXZlWCIsInJlbGF0aXZlWSIsIl8iLCJjdXJyZW50QmFzZVBsYWNlbWVudCIsImJvdW5kaW5nUmVjdCIsImNsaWVudFJlY3RzIiwiZmlyc3RSZWN0IiwibGFzdFJlY3QiLCJpc1RvcCIsIm1pbkxlZnQiLCJtYXhSaWdodCIsIm1lYXN1cmVSZWN0cyIsIl90b3AiLCJfYm90dG9tIiwiZ2V0SW5saW5lQm91bmRpbmdDbGllbnRSZWN0IiwiZ2V0Q2xpZW50UmVjdHMiLCJfaW5zdGFuY2UkcHJvcHMkcG9wcGUiLCJzaG91bGRDaGVjayIsInByZXZSZWZSZWN0IiwicHJldlBvcFJlY3QiLCJ1cGRhdGVQb3NpdGlvbiIsImN1cnJlbnRSZWZSZWN0IiwiY3VycmVudFBvcFJlY3QiLCJhcmVSZWN0c0RpZmZlcmVudCIsInJlY3RBIiwicmVjdEIiLCJjcmVhdGVTaW5nbGV0b24iLCJ0aXBweUluc3RhbmNlcyIsInJlZmVyZW5jZXMiLCJzaW5nbGV0b24iLCJvdmVycmlkZVByb3BzIiwib3ZlcnJpZGVzIiwiY2hpbGRUaXBweUluc3RhbmNlcyIsIm5hdGl2ZVByb3BzIiwicGFyZW50UHJvcHMiLCJjaGlsZFByb3BzIiwicmV0dXJuVmFsdWUiLCJ0YXJnZXROb2RlIiwiY2xvc2VzdCIsIm9yaWdpbmFsRGVzdHJveSIsInNob3VsZERlc3Ryb3lDaGlsZEluc3RhbmNlcyIsImhpZGVBbGwiLCJfdGVtcCIsImV4Y2x1ZGVkUmVmZXJlbmNlT3JJbnN0YW5jZSIsImV4Y2x1ZGUiLCJvcmlnaW5hbER1cmF0aW9uIiwiaXNFeGNsdWRlZCIsInJvdW5kQXJyb3ciXSwibWFwcGluZ3MiOiJDQUFBLFNBQUFBLEVBQUFDLEVBQUFDLEVBQUFDLEdBQUEsU0FBQUMsRUFBQUMsRUFBQUMsR0FBQSxJQUFBSixFQUFBRyxHQUFBLENBQUEsSUFBQUosRUFBQUksR0FBQSxDQUFBLElBQUFFLEVBQUEsbUJBQUFDLFNBQUFBLFFBQUEsSUFBQUYsR0FBQUMsRUFBQSxPQUFBQSxFQUFBRixHQUFBLEdBQUEsR0FBQUksRUFBQSxPQUFBQSxFQUFBSixHQUFBLEdBQUEsSUFBQUssRUFBQSxJQUFBQyxNQUFBLHVCQUFBTixFQUFBLEtBQUEsTUFBQUssRUFBQUUsS0FBQSxtQkFBQUYsRUFBQSxJQUFBRyxFQUFBWCxFQUFBRyxHQUFBLENBQUFTLFFBQUEsSUFBQWIsRUFBQUksR0FBQSxHQUFBVSxLQUFBRixFQUFBQyxRQUFBLFNBQUFkLEdBQUEsT0FBQUksRUFBQUgsRUFBQUksR0FBQSxHQUFBTCxJQUFBQSxJQUFBYSxFQUFBQSxFQUFBQyxRQUFBZCxFQUFBQyxFQUFBQyxFQUFBQyxHQUFBLE9BQUFELEVBQUFHLEdBQUFTLFFBQUEsSUFBQSxJQUFBTCxFQUFBLG1CQUFBRCxTQUFBQSxRQUFBSCxFQUFBLEVBQUFBLEVBQUFGLEVBQUFhLE9BQUFYLElBQUFELEVBQUFELEVBQUFFLElBQUEsT0FBQUQsRUFBQSxD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cmxCQSxTQUFBQyxHQUNBLElBQUFqckIsT0FBQSxJQUFBaXJCLEVBQUEsR0FBQUEsRUFDQUMsRUFBQWxyQixFQUFBbXJCLFFBQ0EzTyxFQUFBeGMsRUFBQXdjLFNBRUE4RCxHQUFBaHZCLFFBQUEsU0FBQThCLEdBQ0EsSUFPQWc0QixFQVBBQyxHQUFBLEVBRUFILElBQ0FHLEVBQUE5UixFQUFBMlIsR0FBQTkzQixFQUFBZ0ksWUFBQTh2QixFQUFBOTNCLEVBQUErSCxTQUFBK3ZCLEVBQUEvdkIsUUFHQWt3QixJQUNBRCxFQUFBaDRCLEVBQUF3ckIsTUFBQXBDLFNBQ0FwcEIsRUFBQWUsU0FBQSxDQUNBcW9CLFNBQUFBLElBRUFwcEIsRUFBQVcsT0FFQVgsRUFBQWlMLE1BQUFRLGFBQ0F6TCxFQUFBZSxTQUFBLENBQ0Fxb0IsU0FBQTRPLFFBaWtCQTU3QixFQUFBMHNCLGtCQUFBQSxFQUNBMXNCLEVBQUE4N0IsV0Exa0VBLDJMQTJrRUE5N0IsRUFBQTJzQixPQUFBQSIsImZpbGUiOiJzY3JpcHQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwi77u/aW1wb3J0IHRpcHB5IGZyb20gJ3RpcHB5LmpzJztcclxuXHJcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgZnVuY3Rpb24gKCkge1xyXG4gICAgd2luZG93Lndpa2lBdXRvc3VnZ2VzdFhIUiA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xyXG5cclxuICAgIHZhciBzZWFyY2ggPSB0aGlzLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2VhcmNoSW5wdXRcIik7XHJcbiAgICBpZiAoc2VhcmNoKSB7XHJcbiAgICAgICAgc2VhcmNoLmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGlucHV0ID0gZXZlbnQudGFyZ2V0O1xyXG4gICAgICAgICAgICBpZiAoaW5wdXQudmFsdWUubGVuZ3RoIDwgMykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBzZWFyY2hTdWdnZXN0aW9ucyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2VhcmNoU3VnZ2VzdGlvbnNcIik7XHJcbiAgICAgICAgICAgIGlmIChzZWFyY2hTdWdnZXN0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgd2luZG93Lndpa2lBdXRvc3VnZ2VzdFhIUi5hYm9ydCgpO1xyXG4gICAgICAgICAgICAgICAgd2luZG93Lndpa2lBdXRvc3VnZ2VzdFhIUi5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucmVhZHlTdGF0ZSA9PSA0ICYmIHRoaXMuc3RhdHVzID09IDIwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzcG9uc2UgPSBKU09OLnBhcnNlKHRoaXMucmVzcG9uc2VUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VhcmNoU3VnZ2VzdGlvbnMuaW5uZXJIVE1MID0gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uLnZhbHVlID0gaXRlbTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlYXJjaFN1Z2dlc3Rpb25zLmFwcGVuZENoaWxkKG9wdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB3aW5kb3cud2lraUF1dG9zdWdnZXN0WEhSLm9wZW4oXCJHRVRcIiwgXCIvd2lraS9hcGkvc3VnZ2VzdD9zZWFyY2g9XCIgKyBlbmNvZGVVUklDb21wb25lbnQoaW5wdXQudmFsdWUpLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIHdpbmRvdy53aWtpQXV0b3N1Z2dlc3RYSFIuc2VuZCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0pO1xyXG5cclxud2luZG93Lndpa2ltdmMgPSB7XHJcbiAgICB0bXI6IC0xLFxyXG4gICAgc2hvd1ByZXZpZXc6IGFzeW5jIGZ1bmN0aW9uIChlLCBsaW5rKSB7XHJcbiAgICAgICAgZSA9IGUgfHwgd2luZG93LmV2ZW50O1xyXG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGUuY3VycmVudFRhcmdldDtcclxuXHJcbiAgICAgICAgaWYgKHRhcmdldCA9PSBudWxsIHx8IHRhcmdldC5fdGlwcHkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XHJcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdsaW5rJywgbGluayk7XHJcblxyXG4gICAgICAgIGxldCB0ID0gdGlwcHkodGFyZ2V0LCB7XHJcbiAgICAgICAgICAgIGNvbnRlbnQ6ICdMb2FkaW5nIHByZXZpZXcuLi4nLFxyXG4gICAgICAgICAgICBkZWxheTogWzE1MDAsIG51bGxdLFxyXG4gICAgICAgICAgICBwbGFjZW1lbnQ6ICdhdXRvJyxcclxuICAgICAgICAgICAgYWxsb3dIVE1MOiB0cnVlLFxyXG4gICAgICAgICAgICBvbkNyZWF0ZShpbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2UuX2lzRmV0Y2hpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlLl9sb2FkZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb25TaG93KGluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5zdGFuY2UuX2lzRmV0Y2hpbmcgfHwgaW5zdGFuY2UuX2xvYWRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5faXNGZXRjaGluZyA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgZmV0Y2goJy93aWtpL2FwaS9wcmV2aWV3Jywge1xyXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6IGZvcm1EYXRhLFxyXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGpzb24gPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoanNvbi5sZW5ndGggPCAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS5kaXNhYmxlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS5zZXRDb250ZW50KGpzb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmVycm9yKGVycm9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2Uuc2V0Q29udGVudCgnUHJldmlldyBmYWlsZWQgdG8gbG9hZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmZpbmFsbHkoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS5fbG9hZGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2UuX2lzRmV0Y2hpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2Uuc2V0UHJvcHMoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsYXk6IFs3NTAsIG51bGxdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB3aW5kb3cud2lraW12Yy50bXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdC5zaG93KCk7XHJcbiAgICAgICAgfSwgMTUwMCk7XHJcbiAgICB9LFxyXG5cclxuICAgIGhpZGVQcmV2aWV3OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHdpbmRvdy53aWtpbXZjLnRtciAhPT0gLTEpIHtcclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHdpbmRvdy53aWtpbXZjLnRtcik7XHJcbiAgICAgICAgICAgIHdpbmRvdy53aWtpbXZjLnRtciA9IC0xO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgc2hvd0hpZGVNZXNzYWdlOiBmdW5jdGlvbiAoZGl2KSB7XHJcbiAgICAgICAgbGV0IGhlaWdodCA9IHBhcnNlSW50KGdldENvbXB1dGVkU3R5bGUoZGl2KS5nZXRQcm9wZXJ0eVZhbHVlKFwiaGVpZ2h0XCIpKTtcclxuICAgICAgICBsZXQgbWF4SGVpZ2h0ID0gcGFyc2VJbnQoZ2V0Q29tcHV0ZWRTdHlsZShkaXYpLmdldFByb3BlcnR5VmFsdWUoXCJtYXgtaGVpZ2h0XCIpKTtcclxuICAgICAgICBpZiAoaGVpZ2h0IDwgbWF4SGVpZ2h0KSB7XHJcbiAgICAgICAgICAgIGRpdi5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJjb2xsYXBzaWJsZVwiKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG59O1xyXG4iLCJmdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7XG4gIHRyeSB7XG4gICAgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpO1xuICAgIHZhciB2YWx1ZSA9IGluZm8udmFsdWU7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmVqZWN0KGVycm9yKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoaW5mby5kb25lKSB7XG4gICAgcmVzb2x2ZSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICBhcmdzID0gYXJndW1lbnRzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgZ2VuID0gZm4uYXBwbHkoc2VsZiwgYXJncyk7XG5cbiAgICAgIGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7XG4gICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJuZXh0XCIsIHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gX3Rocm93KGVycikge1xuICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwidGhyb3dcIiwgZXJyKTtcbiAgICAgIH1cblxuICAgICAgX25leHQodW5kZWZpbmVkKTtcbiAgICB9KTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXN5bmNUb0dlbmVyYXRvcjsiLCJmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgIFwiZGVmYXVsdFwiOiBvYmpcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlZ2VuZXJhdG9yLXJ1bnRpbWVcIik7XG4iLCIvKipcbiAqIEBwb3BwZXJqcy9jb3JlIHYyLjQuMCAtIE1JVCBMaWNlbnNlXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5mdW5jdGlvbiBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudCkge1xuICB2YXIgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHJldHVybiB7XG4gICAgd2lkdGg6IHJlY3Qud2lkdGgsXG4gICAgaGVpZ2h0OiByZWN0LmhlaWdodCxcbiAgICB0b3A6IHJlY3QudG9wLFxuICAgIHJpZ2h0OiByZWN0LnJpZ2h0LFxuICAgIGJvdHRvbTogcmVjdC5ib3R0b20sXG4gICAgbGVmdDogcmVjdC5sZWZ0LFxuICAgIHg6IHJlY3QubGVmdCxcbiAgICB5OiByZWN0LnRvcFxuICB9O1xufVxuXG4vKjo6IGltcG9ydCB0eXBlIHsgV2luZG93IH0gZnJvbSAnLi4vdHlwZXMnOyAqL1xuXG4vKjo6IGRlY2xhcmUgZnVuY3Rpb24gZ2V0V2luZG93KG5vZGU6IE5vZGUgfCBXaW5kb3cpOiBXaW5kb3c7ICovXG5mdW5jdGlvbiBnZXRXaW5kb3cobm9kZSkge1xuICBpZiAobm9kZS50b1N0cmluZygpICE9PSAnW29iamVjdCBXaW5kb3ddJykge1xuICAgIHZhciBvd25lckRvY3VtZW50ID0gbm9kZS5vd25lckRvY3VtZW50O1xuICAgIHJldHVybiBvd25lckRvY3VtZW50ID8gb3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyA6IHdpbmRvdztcbiAgfVxuXG4gIHJldHVybiBub2RlO1xufVxuXG5mdW5jdGlvbiBnZXRXaW5kb3dTY3JvbGwobm9kZSkge1xuICB2YXIgd2luID0gZ2V0V2luZG93KG5vZGUpO1xuICB2YXIgc2Nyb2xsTGVmdCA9IHdpbi5wYWdlWE9mZnNldDtcbiAgdmFyIHNjcm9sbFRvcCA9IHdpbi5wYWdlWU9mZnNldDtcbiAgcmV0dXJuIHtcbiAgICBzY3JvbGxMZWZ0OiBzY3JvbGxMZWZ0LFxuICAgIHNjcm9sbFRvcDogc2Nyb2xsVG9wXG4gIH07XG59XG5cbi8qOjogZGVjbGFyZSBmdW5jdGlvbiBpc0VsZW1lbnQobm9kZTogbWl4ZWQpOiBib29sZWFuICVjaGVja3Mobm9kZSBpbnN0YW5jZW9mXG4gIEVsZW1lbnQpOyAqL1xuXG5mdW5jdGlvbiBpc0VsZW1lbnQobm9kZSkge1xuICB2YXIgT3duRWxlbWVudCA9IGdldFdpbmRvdyhub2RlKS5FbGVtZW50O1xuICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIE93bkVsZW1lbnQgfHwgbm9kZSBpbnN0YW5jZW9mIEVsZW1lbnQ7XG59XG4vKjo6IGRlY2xhcmUgZnVuY3Rpb24gaXNIVE1MRWxlbWVudChub2RlOiBtaXhlZCk6IGJvb2xlYW4gJWNoZWNrcyhub2RlIGluc3RhbmNlb2ZcbiAgSFRNTEVsZW1lbnQpOyAqL1xuXG5cbmZ1bmN0aW9uIGlzSFRNTEVsZW1lbnQobm9kZSkge1xuICB2YXIgT3duRWxlbWVudCA9IGdldFdpbmRvdyhub2RlKS5IVE1MRWxlbWVudDtcbiAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBPd25FbGVtZW50IHx8IG5vZGUgaW5zdGFuY2VvZiBIVE1MRWxlbWVudDtcbn1cblxuZnVuY3Rpb24gZ2V0SFRNTEVsZW1lbnRTY3JvbGwoZWxlbWVudCkge1xuICByZXR1cm4ge1xuICAgIHNjcm9sbExlZnQ6IGVsZW1lbnQuc2Nyb2xsTGVmdCxcbiAgICBzY3JvbGxUb3A6IGVsZW1lbnQuc2Nyb2xsVG9wXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldE5vZGVTY3JvbGwobm9kZSkge1xuICBpZiAobm9kZSA9PT0gZ2V0V2luZG93KG5vZGUpIHx8ICFpc0hUTUxFbGVtZW50KG5vZGUpKSB7XG4gICAgcmV0dXJuIGdldFdpbmRvd1Njcm9sbChub2RlKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZ2V0SFRNTEVsZW1lbnRTY3JvbGwobm9kZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0Tm9kZU5hbWUoZWxlbWVudCkge1xuICByZXR1cm4gZWxlbWVudCA/IChlbGVtZW50Lm5vZGVOYW1lIHx8ICcnKS50b0xvd2VyQ2FzZSgpIDogbnVsbDtcbn1cblxuZnVuY3Rpb24gZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpIHtcbiAgLy8gJEZsb3dGaXhNZTogYXNzdW1lIGJvZHkgaXMgYWx3YXlzIGF2YWlsYWJsZVxuICByZXR1cm4gKGlzRWxlbWVudChlbGVtZW50KSA/IGVsZW1lbnQub3duZXJEb2N1bWVudCA6IGVsZW1lbnQuZG9jdW1lbnQpLmRvY3VtZW50RWxlbWVudDtcbn1cblxuZnVuY3Rpb24gZ2V0V2luZG93U2Nyb2xsQmFyWChlbGVtZW50KSB7XG4gIC8vIElmIDxodG1sPiBoYXMgYSBDU1Mgd2lkdGggZ3JlYXRlciB0aGFuIHRoZSB2aWV3cG9ydCwgdGhlbiB0aGlzIHdpbGwgYmVcbiAgLy8gaW5jb3JyZWN0IGZvciBSVEwuXG4gIC8vIFBvcHBlciAxIGlzIGJyb2tlbiBpbiB0aGlzIGNhc2UgYW5kIG5ldmVyIGhhZCBhIGJ1ZyByZXBvcnQgc28gbGV0J3MgYXNzdW1lXG4gIC8vIGl0J3Mgbm90IGFuIGlzc3VlLiBJIGRvbid0IHRoaW5rIGFueW9uZSBldmVyIHNwZWNpZmllcyB3aWR0aCBvbiA8aHRtbD5cbiAgLy8gYW55d2F5LlxuICAvLyBCcm93c2VycyB3aGVyZSB0aGUgbGVmdCBzY3JvbGxiYXIgZG9lc24ndCBjYXVzZSBhbiBpc3N1ZSByZXBvcnQgYDBgIGZvclxuICAvLyB0aGlzIChlLmcuIEVkZ2UgMjAxOSwgSUUxMSwgU2FmYXJpKVxuICByZXR1cm4gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSkubGVmdCArIGdldFdpbmRvd1Njcm9sbChlbGVtZW50KS5zY3JvbGxMZWZ0O1xufVxuXG5mdW5jdGlvbiBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGdldFdpbmRvdyhlbGVtZW50KS5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xufVxuXG5mdW5jdGlvbiBpc1Njcm9sbFBhcmVudChlbGVtZW50KSB7XG4gIC8vIEZpcmVmb3ggd2FudHMgdXMgdG8gY2hlY2sgYC14YCBhbmQgYC15YCB2YXJpYXRpb25zIGFzIHdlbGxcbiAgdmFyIF9nZXRDb21wdXRlZFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KSxcbiAgICAgIG92ZXJmbG93ID0gX2dldENvbXB1dGVkU3R5bGUub3ZlcmZsb3csXG4gICAgICBvdmVyZmxvd1ggPSBfZ2V0Q29tcHV0ZWRTdHlsZS5vdmVyZmxvd1gsXG4gICAgICBvdmVyZmxvd1kgPSBfZ2V0Q29tcHV0ZWRTdHlsZS5vdmVyZmxvd1k7XG5cbiAgcmV0dXJuIC9hdXRvfHNjcm9sbHxvdmVybGF5fGhpZGRlbi8udGVzdChvdmVyZmxvdyArIG92ZXJmbG93WSArIG92ZXJmbG93WCk7XG59XG5cbi8vIENvbXBvc2l0ZSBtZWFucyBpdCB0YWtlcyBpbnRvIGFjY291bnQgdHJhbnNmb3JtcyBhcyB3ZWxsIGFzIGxheW91dC5cblxuZnVuY3Rpb24gZ2V0Q29tcG9zaXRlUmVjdChlbGVtZW50T3JWaXJ0dWFsRWxlbWVudCwgb2Zmc2V0UGFyZW50LCBpc0ZpeGVkKSB7XG4gIGlmIChpc0ZpeGVkID09PSB2b2lkIDApIHtcbiAgICBpc0ZpeGVkID0gZmFsc2U7XG4gIH1cblxuICB2YXIgZG9jdW1lbnRFbGVtZW50ID0gZ2V0RG9jdW1lbnRFbGVtZW50KG9mZnNldFBhcmVudCk7XG4gIHZhciByZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnRPclZpcnR1YWxFbGVtZW50KTtcbiAgdmFyIHNjcm9sbCA9IHtcbiAgICBzY3JvbGxMZWZ0OiAwLFxuICAgIHNjcm9sbFRvcDogMFxuICB9O1xuICB2YXIgb2Zmc2V0cyA9IHtcbiAgICB4OiAwLFxuICAgIHk6IDBcbiAgfTtcblxuICBpZiAoIWlzRml4ZWQpIHtcbiAgICBpZiAoZ2V0Tm9kZU5hbWUob2Zmc2V0UGFyZW50KSAhPT0gJ2JvZHknIHx8IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wb3BwZXJqcy9wb3BwZXItY29yZS9pc3N1ZXMvMTA3OFxuICAgIGlzU2Nyb2xsUGFyZW50KGRvY3VtZW50RWxlbWVudCkpIHtcbiAgICAgIHNjcm9sbCA9IGdldE5vZGVTY3JvbGwob2Zmc2V0UGFyZW50KTtcbiAgICB9XG5cbiAgICBpZiAoaXNIVE1MRWxlbWVudChvZmZzZXRQYXJlbnQpKSB7XG4gICAgICBvZmZzZXRzID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KG9mZnNldFBhcmVudCk7XG4gICAgICBvZmZzZXRzLnggKz0gb2Zmc2V0UGFyZW50LmNsaWVudExlZnQ7XG4gICAgICBvZmZzZXRzLnkgKz0gb2Zmc2V0UGFyZW50LmNsaWVudFRvcDtcbiAgICB9IGVsc2UgaWYgKGRvY3VtZW50RWxlbWVudCkge1xuICAgICAgb2Zmc2V0cy54ID0gZ2V0V2luZG93U2Nyb2xsQmFyWChkb2N1bWVudEVsZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgeDogcmVjdC5sZWZ0ICsgc2Nyb2xsLnNjcm9sbExlZnQgLSBvZmZzZXRzLngsXG4gICAgeTogcmVjdC50b3AgKyBzY3JvbGwuc2Nyb2xsVG9wIC0gb2Zmc2V0cy55LFxuICAgIHdpZHRoOiByZWN0LndpZHRoLFxuICAgIGhlaWdodDogcmVjdC5oZWlnaHRcbiAgfTtcbn1cblxuLy8gUmV0dXJucyB0aGUgbGF5b3V0IHJlY3Qgb2YgYW4gZWxlbWVudCByZWxhdGl2ZSB0byBpdHMgb2Zmc2V0UGFyZW50LiBMYXlvdXRcbi8vIG1lYW5zIGl0IGRvZXNuJ3QgdGFrZSBpbnRvIGFjY291bnQgdHJhbnNmb3Jtcy5cbmZ1bmN0aW9uIGdldExheW91dFJlY3QoZWxlbWVudCkge1xuICByZXR1cm4ge1xuICAgIHg6IGVsZW1lbnQub2Zmc2V0TGVmdCxcbiAgICB5OiBlbGVtZW50Lm9mZnNldFRvcCxcbiAgICB3aWR0aDogZWxlbWVudC5vZmZzZXRXaWR0aCxcbiAgICBoZWlnaHQ6IGVsZW1lbnQub2Zmc2V0SGVpZ2h0XG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldFBhcmVudE5vZGUoZWxlbWVudCkge1xuICBpZiAoZ2V0Tm9kZU5hbWUoZWxlbWVudCkgPT09ICdodG1sJykge1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG5cbiAgcmV0dXJuICgvLyAkRmxvd0ZpeE1lOiB0aGlzIGlzIGEgcXVpY2tlciAoYnV0IGxlc3MgdHlwZSBzYWZlKSB3YXkgdG8gc2F2ZSBxdWl0ZSBzb21lIGJ5dGVzIGZyb20gdGhlIGJ1bmRsZVxuICAgIGVsZW1lbnQuYXNzaWduZWRTbG90IHx8IC8vIHN0ZXAgaW50byB0aGUgc2hhZG93IERPTSBvZiB0aGUgcGFyZW50IG9mIGEgc2xvdHRlZCBub2RlXG4gICAgZWxlbWVudC5wYXJlbnROb2RlIHx8IC8vIERPTSBFbGVtZW50IGRldGVjdGVkXG4gICAgLy8gJEZsb3dGaXhNZTogbmVlZCBhIGJldHRlciB3YXkgdG8gaGFuZGxlIHRoaXMuLi5cbiAgICBlbGVtZW50Lmhvc3QgfHwgLy8gU2hhZG93Um9vdCBkZXRlY3RlZFxuICAgIC8vICRGbG93Rml4TWU6IEhUTUxFbGVtZW50IGlzIGEgTm9kZVxuICAgIGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSAvLyBmYWxsYmFja1xuXG4gICk7XG59XG5cbmZ1bmN0aW9uIGdldFNjcm9sbFBhcmVudChub2RlKSB7XG4gIGlmIChbJ2h0bWwnLCAnYm9keScsICcjZG9jdW1lbnQnXS5pbmRleE9mKGdldE5vZGVOYW1lKG5vZGUpKSA+PSAwKSB7XG4gICAgLy8gJEZsb3dGaXhNZTogYXNzdW1lIGJvZHkgaXMgYWx3YXlzIGF2YWlsYWJsZVxuICAgIHJldHVybiBub2RlLm93bmVyRG9jdW1lbnQuYm9keTtcbiAgfVxuXG4gIGlmIChpc0hUTUxFbGVtZW50KG5vZGUpICYmIGlzU2Nyb2xsUGFyZW50KG5vZGUpKSB7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cblxuICByZXR1cm4gZ2V0U2Nyb2xsUGFyZW50KGdldFBhcmVudE5vZGUobm9kZSkpO1xufVxuXG5mdW5jdGlvbiBsaXN0U2Nyb2xsUGFyZW50cyhlbGVtZW50LCBsaXN0KSB7XG4gIGlmIChsaXN0ID09PSB2b2lkIDApIHtcbiAgICBsaXN0ID0gW107XG4gIH1cblxuICB2YXIgc2Nyb2xsUGFyZW50ID0gZ2V0U2Nyb2xsUGFyZW50KGVsZW1lbnQpO1xuICB2YXIgaXNCb2R5ID0gZ2V0Tm9kZU5hbWUoc2Nyb2xsUGFyZW50KSA9PT0gJ2JvZHknO1xuICB2YXIgd2luID0gZ2V0V2luZG93KHNjcm9sbFBhcmVudCk7XG4gIHZhciB0YXJnZXQgPSBpc0JvZHkgPyBbd2luXS5jb25jYXQod2luLnZpc3VhbFZpZXdwb3J0IHx8IFtdLCBpc1Njcm9sbFBhcmVudChzY3JvbGxQYXJlbnQpID8gc2Nyb2xsUGFyZW50IDogW10pIDogc2Nyb2xsUGFyZW50O1xuICB2YXIgdXBkYXRlZExpc3QgPSBsaXN0LmNvbmNhdCh0YXJnZXQpO1xuICByZXR1cm4gaXNCb2R5ID8gdXBkYXRlZExpc3QgOiAvLyAkRmxvd0ZpeE1lOiBpc0JvZHkgdGVsbHMgdXMgdGFyZ2V0IHdpbGwgYmUgYW4gSFRNTEVsZW1lbnQgaGVyZVxuICB1cGRhdGVkTGlzdC5jb25jYXQobGlzdFNjcm9sbFBhcmVudHMoZ2V0UGFyZW50Tm9kZSh0YXJnZXQpKSk7XG59XG5cbmZ1bmN0aW9uIGlzVGFibGVFbGVtZW50KGVsZW1lbnQpIHtcbiAgcmV0dXJuIFsndGFibGUnLCAndGQnLCAndGgnXS5pbmRleE9mKGdldE5vZGVOYW1lKGVsZW1lbnQpKSA+PSAwO1xufVxuXG5mdW5jdGlvbiBnZXRUcnVlT2Zmc2V0UGFyZW50KGVsZW1lbnQpIHtcbiAgaWYgKCFpc0hUTUxFbGVtZW50KGVsZW1lbnQpIHx8IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wb3BwZXJqcy9wb3BwZXItY29yZS9pc3N1ZXMvODM3XG4gIGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkucG9zaXRpb24gPT09ICdmaXhlZCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBlbGVtZW50Lm9mZnNldFBhcmVudDtcbn1cblxuZnVuY3Rpb24gZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQpIHtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdyhlbGVtZW50KTtcbiAgdmFyIG9mZnNldFBhcmVudCA9IGdldFRydWVPZmZzZXRQYXJlbnQoZWxlbWVudCk7IC8vIEZpbmQgdGhlIG5lYXJlc3Qgbm9uLXRhYmxlIG9mZnNldFBhcmVudFxuXG4gIHdoaWxlIChvZmZzZXRQYXJlbnQgJiYgaXNUYWJsZUVsZW1lbnQob2Zmc2V0UGFyZW50KSkge1xuICAgIG9mZnNldFBhcmVudCA9IGdldFRydWVPZmZzZXRQYXJlbnQob2Zmc2V0UGFyZW50KTtcbiAgfVxuXG4gIGlmIChvZmZzZXRQYXJlbnQgJiYgZ2V0Tm9kZU5hbWUob2Zmc2V0UGFyZW50KSA9PT0gJ2JvZHknICYmIGdldENvbXB1dGVkU3R5bGUob2Zmc2V0UGFyZW50KS5wb3NpdGlvbiA9PT0gJ3N0YXRpYycpIHtcbiAgICByZXR1cm4gd2luZG93O1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldFBhcmVudCB8fCB3aW5kb3c7XG59XG5cbnZhciB0b3AgPSAndG9wJztcbnZhciBib3R0b20gPSAnYm90dG9tJztcbnZhciByaWdodCA9ICdyaWdodCc7XG52YXIgbGVmdCA9ICdsZWZ0JztcbnZhciBhdXRvID0gJ2F1dG8nO1xudmFyIGJhc2VQbGFjZW1lbnRzID0gW3RvcCwgYm90dG9tLCByaWdodCwgbGVmdF07XG52YXIgc3RhcnQgPSAnc3RhcnQnO1xudmFyIGVuZCA9ICdlbmQnO1xudmFyIGNsaXBwaW5nUGFyZW50cyA9ICdjbGlwcGluZ1BhcmVudHMnO1xudmFyIHZpZXdwb3J0ID0gJ3ZpZXdwb3J0JztcbnZhciBwb3BwZXIgPSAncG9wcGVyJztcbnZhciByZWZlcmVuY2UgPSAncmVmZXJlbmNlJztcbnZhciB2YXJpYXRpb25QbGFjZW1lbnRzID0gLyojX19QVVJFX18qL2Jhc2VQbGFjZW1lbnRzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIGFjYy5jb25jYXQoW3BsYWNlbWVudCArIFwiLVwiICsgc3RhcnQsIHBsYWNlbWVudCArIFwiLVwiICsgZW5kXSk7XG59LCBbXSk7XG52YXIgcGxhY2VtZW50cyA9IC8qI19fUFVSRV9fKi9bXS5jb25jYXQoYmFzZVBsYWNlbWVudHMsIFthdXRvXSkucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBsYWNlbWVudCkge1xuICByZXR1cm4gYWNjLmNvbmNhdChbcGxhY2VtZW50LCBwbGFjZW1lbnQgKyBcIi1cIiArIHN0YXJ0LCBwbGFjZW1lbnQgKyBcIi1cIiArIGVuZF0pO1xufSwgW10pOyAvLyBtb2RpZmllcnMgdGhhdCBuZWVkIHRvIHJlYWQgdGhlIERPTVxuXG52YXIgYmVmb3JlUmVhZCA9ICdiZWZvcmVSZWFkJztcbnZhciByZWFkID0gJ3JlYWQnO1xudmFyIGFmdGVyUmVhZCA9ICdhZnRlclJlYWQnOyAvLyBwdXJlLWxvZ2ljIG1vZGlmaWVyc1xuXG52YXIgYmVmb3JlTWFpbiA9ICdiZWZvcmVNYWluJztcbnZhciBtYWluID0gJ21haW4nO1xudmFyIGFmdGVyTWFpbiA9ICdhZnRlck1haW4nOyAvLyBtb2RpZmllciB3aXRoIHRoZSBwdXJwb3NlIHRvIHdyaXRlIHRvIHRoZSBET00gKG9yIHdyaXRlIGludG8gYSBmcmFtZXdvcmsgc3RhdGUpXG5cbnZhciBiZWZvcmVXcml0ZSA9ICdiZWZvcmVXcml0ZSc7XG52YXIgd3JpdGUgPSAnd3JpdGUnO1xudmFyIGFmdGVyV3JpdGUgPSAnYWZ0ZXJXcml0ZSc7XG52YXIgbW9kaWZpZXJQaGFzZXMgPSBbYmVmb3JlUmVhZCwgcmVhZCwgYWZ0ZXJSZWFkLCBiZWZvcmVNYWluLCBtYWluLCBhZnRlck1haW4sIGJlZm9yZVdyaXRlLCB3cml0ZSwgYWZ0ZXJXcml0ZV07XG5cbmZ1bmN0aW9uIG9yZGVyKG1vZGlmaWVycykge1xuICB2YXIgbWFwID0gbmV3IE1hcCgpO1xuICB2YXIgdmlzaXRlZCA9IG5ldyBTZXQoKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBtb2RpZmllcnMuZm9yRWFjaChmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICBtYXAuc2V0KG1vZGlmaWVyLm5hbWUsIG1vZGlmaWVyKTtcbiAgfSk7IC8vIE9uIHZpc2l0aW5nIG9iamVjdCwgY2hlY2sgZm9yIGl0cyBkZXBlbmRlbmNpZXMgYW5kIHZpc2l0IHRoZW0gcmVjdXJzaXZlbHlcblxuICBmdW5jdGlvbiBzb3J0KG1vZGlmaWVyKSB7XG4gICAgdmlzaXRlZC5hZGQobW9kaWZpZXIubmFtZSk7XG4gICAgdmFyIHJlcXVpcmVzID0gW10uY29uY2F0KG1vZGlmaWVyLnJlcXVpcmVzIHx8IFtdLCBtb2RpZmllci5yZXF1aXJlc0lmRXhpc3RzIHx8IFtdKTtcbiAgICByZXF1aXJlcy5mb3JFYWNoKGZ1bmN0aW9uIChkZXApIHtcbiAgICAgIGlmICghdmlzaXRlZC5oYXMoZGVwKSkge1xuICAgICAgICB2YXIgZGVwTW9kaWZpZXIgPSBtYXAuZ2V0KGRlcCk7XG5cbiAgICAgICAgaWYgKGRlcE1vZGlmaWVyKSB7XG4gICAgICAgICAgc29ydChkZXBNb2RpZmllcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXN1bHQucHVzaChtb2RpZmllcik7XG4gIH1cblxuICBtb2RpZmllcnMuZm9yRWFjaChmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICBpZiAoIXZpc2l0ZWQuaGFzKG1vZGlmaWVyLm5hbWUpKSB7XG4gICAgICAvLyBjaGVjayBmb3IgdmlzaXRlZCBvYmplY3RcbiAgICAgIHNvcnQobW9kaWZpZXIpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG9yZGVyTW9kaWZpZXJzKG1vZGlmaWVycykge1xuICAvLyBvcmRlciBiYXNlZCBvbiBkZXBlbmRlbmNpZXNcbiAgdmFyIG9yZGVyZWRNb2RpZmllcnMgPSBvcmRlcihtb2RpZmllcnMpOyAvLyBvcmRlciBiYXNlZCBvbiBwaGFzZVxuXG4gIHJldHVybiBtb2RpZmllclBoYXNlcy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGhhc2UpIHtcbiAgICByZXR1cm4gYWNjLmNvbmNhdChvcmRlcmVkTW9kaWZpZXJzLmZpbHRlcihmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICAgIHJldHVybiBtb2RpZmllci5waGFzZSA9PT0gcGhhc2U7XG4gICAgfSkpO1xuICB9LCBbXSk7XG59XG5cbmZ1bmN0aW9uIGRlYm91bmNlKGZuKSB7XG4gIHZhciBwZW5kaW5nO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghcGVuZGluZykge1xuICAgICAgcGVuZGluZyA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHBlbmRpbmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgcmVzb2x2ZShmbigpKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGVuZGluZztcbiAgfTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0KHN0cikge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gW10uY29uY2F0KGFyZ3MpLnJlZHVjZShmdW5jdGlvbiAocCwgYykge1xuICAgIHJldHVybiBwLnJlcGxhY2UoLyVzLywgYyk7XG4gIH0sIHN0cik7XG59XG5cbnZhciBJTlZBTElEX01PRElGSUVSX0VSUk9SID0gJ1BvcHBlcjogbW9kaWZpZXIgXCIlc1wiIHByb3ZpZGVkIGFuIGludmFsaWQgJXMgcHJvcGVydHksIGV4cGVjdGVkICVzIGJ1dCBnb3QgJXMnO1xudmFyIE1JU1NJTkdfREVQRU5ERU5DWV9FUlJPUiA9ICdQb3BwZXI6IG1vZGlmaWVyIFwiJXNcIiByZXF1aXJlcyBcIiVzXCIsIGJ1dCBcIiVzXCIgbW9kaWZpZXIgaXMgbm90IGF2YWlsYWJsZSc7XG52YXIgVkFMSURfUFJPUEVSVElFUyA9IFsnbmFtZScsICdlbmFibGVkJywgJ3BoYXNlJywgJ2ZuJywgJ2VmZmVjdCcsICdyZXF1aXJlcycsICdvcHRpb25zJ107XG5mdW5jdGlvbiB2YWxpZGF0ZU1vZGlmaWVycyhtb2RpZmllcnMpIHtcbiAgbW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgT2JqZWN0LmtleXMobW9kaWZpZXIpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgY2FzZSAnbmFtZSc6XG4gICAgICAgICAgaWYgKHR5cGVvZiBtb2RpZmllci5uYW1lICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihmb3JtYXQoSU5WQUxJRF9NT0RJRklFUl9FUlJPUiwgU3RyaW5nKG1vZGlmaWVyLm5hbWUpLCAnXCJuYW1lXCInLCAnXCJzdHJpbmdcIicsIFwiXFxcIlwiICsgU3RyaW5nKG1vZGlmaWVyLm5hbWUpICsgXCJcXFwiXCIpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdlbmFibGVkJzpcbiAgICAgICAgICBpZiAodHlwZW9mIG1vZGlmaWVyLmVuYWJsZWQgIT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihmb3JtYXQoSU5WQUxJRF9NT0RJRklFUl9FUlJPUiwgbW9kaWZpZXIubmFtZSwgJ1wiZW5hYmxlZFwiJywgJ1wiYm9vbGVhblwiJywgXCJcXFwiXCIgKyBTdHJpbmcobW9kaWZpZXIuZW5hYmxlZCkgKyBcIlxcXCJcIikpO1xuICAgICAgICAgIH1cblxuICAgICAgICBjYXNlICdwaGFzZSc6XG4gICAgICAgICAgaWYgKG1vZGlmaWVyUGhhc2VzLmluZGV4T2YobW9kaWZpZXIucGhhc2UpIDwgMCkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihmb3JtYXQoSU5WQUxJRF9NT0RJRklFUl9FUlJPUiwgbW9kaWZpZXIubmFtZSwgJ1wicGhhc2VcIicsIFwiZWl0aGVyIFwiICsgbW9kaWZpZXJQaGFzZXMuam9pbignLCAnKSwgXCJcXFwiXCIgKyBTdHJpbmcobW9kaWZpZXIucGhhc2UpICsgXCJcXFwiXCIpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdmbic6XG4gICAgICAgICAgaWYgKHR5cGVvZiBtb2RpZmllci5mbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihmb3JtYXQoSU5WQUxJRF9NT0RJRklFUl9FUlJPUiwgbW9kaWZpZXIubmFtZSwgJ1wiZm5cIicsICdcImZ1bmN0aW9uXCInLCBcIlxcXCJcIiArIFN0cmluZyhtb2RpZmllci5mbikgKyBcIlxcXCJcIikpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2VmZmVjdCc6XG4gICAgICAgICAgaWYgKHR5cGVvZiBtb2RpZmllci5lZmZlY3QgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZm9ybWF0KElOVkFMSURfTU9ESUZJRVJfRVJST1IsIG1vZGlmaWVyLm5hbWUsICdcImVmZmVjdFwiJywgJ1wiZnVuY3Rpb25cIicsIFwiXFxcIlwiICsgU3RyaW5nKG1vZGlmaWVyLmZuKSArIFwiXFxcIlwiKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAncmVxdWlyZXMnOlxuICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShtb2RpZmllci5yZXF1aXJlcykpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZm9ybWF0KElOVkFMSURfTU9ESUZJRVJfRVJST1IsIG1vZGlmaWVyLm5hbWUsICdcInJlcXVpcmVzXCInLCAnXCJhcnJheVwiJywgXCJcXFwiXCIgKyBTdHJpbmcobW9kaWZpZXIucmVxdWlyZXMpICsgXCJcXFwiXCIpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdyZXF1aXJlc0lmRXhpc3RzJzpcbiAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkobW9kaWZpZXIucmVxdWlyZXNJZkV4aXN0cykpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZm9ybWF0KElOVkFMSURfTU9ESUZJRVJfRVJST1IsIG1vZGlmaWVyLm5hbWUsICdcInJlcXVpcmVzSWZFeGlzdHNcIicsICdcImFycmF5XCInLCBcIlxcXCJcIiArIFN0cmluZyhtb2RpZmllci5yZXF1aXJlc0lmRXhpc3RzKSArIFwiXFxcIlwiKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnb3B0aW9ucyc6XG4gICAgICAgIGNhc2UgJ2RhdGEnOlxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcIlBvcHBlckpTOiBhbiBpbnZhbGlkIHByb3BlcnR5IGhhcyBiZWVuIHByb3ZpZGVkIHRvIHRoZSBcXFwiXCIgKyBtb2RpZmllci5uYW1lICsgXCJcXFwiIG1vZGlmaWVyLCB2YWxpZCBwcm9wZXJ0aWVzIGFyZSBcIiArIFZBTElEX1BST1BFUlRJRVMubWFwKGZ1bmN0aW9uIChzKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJcXFwiXCIgKyBzICsgXCJcXFwiXCI7XG4gICAgICAgICAgfSkuam9pbignLCAnKSArIFwiOyBidXQgXFxcIlwiICsga2V5ICsgXCJcXFwiIHdhcyBwcm92aWRlZC5cIik7XG4gICAgICB9XG5cbiAgICAgIG1vZGlmaWVyLnJlcXVpcmVzICYmIG1vZGlmaWVyLnJlcXVpcmVzLmZvckVhY2goZnVuY3Rpb24gKHJlcXVpcmVtZW50KSB7XG4gICAgICAgIGlmIChtb2RpZmllcnMuZmluZChmdW5jdGlvbiAobW9kKSB7XG4gICAgICAgICAgcmV0dXJuIG1vZC5uYW1lID09PSByZXF1aXJlbWVudDtcbiAgICAgICAgfSkgPT0gbnVsbCkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZm9ybWF0KE1JU1NJTkdfREVQRU5ERU5DWV9FUlJPUiwgU3RyaW5nKG1vZGlmaWVyLm5hbWUpLCByZXF1aXJlbWVudCwgcmVxdWlyZW1lbnQpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiB1bmlxdWVCeShhcnIsIGZuKSB7XG4gIHZhciBpZGVudGlmaWVycyA9IG5ldyBTZXQoKTtcbiAgcmV0dXJuIGFyci5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICB2YXIgaWRlbnRpZmllciA9IGZuKGl0ZW0pO1xuXG4gICAgaWYgKCFpZGVudGlmaWVycy5oYXMoaWRlbnRpZmllcikpIHtcbiAgICAgIGlkZW50aWZpZXJzLmFkZChpZGVudGlmaWVyKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHJldHVybiBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbn1cblxuZnVuY3Rpb24gbWVyZ2VCeU5hbWUobW9kaWZpZXJzKSB7XG4gIHZhciBtZXJnZWQgPSBtb2RpZmllcnMucmVkdWNlKGZ1bmN0aW9uIChtZXJnZWQsIGN1cnJlbnQpIHtcbiAgICB2YXIgZXhpc3RpbmcgPSBtZXJnZWRbY3VycmVudC5uYW1lXTtcbiAgICBtZXJnZWRbY3VycmVudC5uYW1lXSA9IGV4aXN0aW5nID8gT2JqZWN0LmFzc2lnbih7fSwgZXhpc3RpbmcsIHt9LCBjdXJyZW50LCB7XG4gICAgICBvcHRpb25zOiBPYmplY3QuYXNzaWduKHt9LCBleGlzdGluZy5vcHRpb25zLCB7fSwgY3VycmVudC5vcHRpb25zKSxcbiAgICAgIGRhdGE6IE9iamVjdC5hc3NpZ24oe30sIGV4aXN0aW5nLmRhdGEsIHt9LCBjdXJyZW50LmRhdGEpXG4gICAgfSkgOiBjdXJyZW50O1xuICAgIHJldHVybiBtZXJnZWQ7XG4gIH0sIHt9KTsgLy8gSUUxMSBkb2VzIG5vdCBzdXBwb3J0IE9iamVjdC52YWx1ZXNcblxuICByZXR1cm4gT2JqZWN0LmtleXMobWVyZ2VkKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBtZXJnZWRba2V5XTtcbiAgfSk7XG59XG5cbnZhciBJTlZBTElEX0VMRU1FTlRfRVJST1IgPSAnUG9wcGVyOiBJbnZhbGlkIHJlZmVyZW5jZSBvciBwb3BwZXIgYXJndW1lbnQgcHJvdmlkZWQuIFRoZXkgbXVzdCBiZSBlaXRoZXIgYSBET00gZWxlbWVudCBvciB2aXJ0dWFsIGVsZW1lbnQuJztcbnZhciBJTkZJTklURV9MT09QX0VSUk9SID0gJ1BvcHBlcjogQW4gaW5maW5pdGUgbG9vcCBpbiB0aGUgbW9kaWZpZXJzIGN5Y2xlIGhhcyBiZWVuIGRldGVjdGVkISBUaGUgY3ljbGUgaGFzIGJlZW4gaW50ZXJydXB0ZWQgdG8gcHJldmVudCBhIGJyb3dzZXIgY3Jhc2guJztcbnZhciBERUZBVUxUX09QVElPTlMgPSB7XG4gIHBsYWNlbWVudDogJ2JvdHRvbScsXG4gIG1vZGlmaWVyczogW10sXG4gIHN0cmF0ZWd5OiAnYWJzb2x1dGUnXG59O1xuXG5mdW5jdGlvbiBhcmVWYWxpZEVsZW1lbnRzKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuICFhcmdzLnNvbWUoZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gIShlbGVtZW50ICYmIHR5cGVvZiBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCA9PT0gJ2Z1bmN0aW9uJyk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBwb3BwZXJHZW5lcmF0b3IoZ2VuZXJhdG9yT3B0aW9ucykge1xuICBpZiAoZ2VuZXJhdG9yT3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgZ2VuZXJhdG9yT3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIF9nZW5lcmF0b3JPcHRpb25zID0gZ2VuZXJhdG9yT3B0aW9ucyxcbiAgICAgIF9nZW5lcmF0b3JPcHRpb25zJGRlZiA9IF9nZW5lcmF0b3JPcHRpb25zLmRlZmF1bHRNb2RpZmllcnMsXG4gICAgICBkZWZhdWx0TW9kaWZpZXJzID0gX2dlbmVyYXRvck9wdGlvbnMkZGVmID09PSB2b2lkIDAgPyBbXSA6IF9nZW5lcmF0b3JPcHRpb25zJGRlZixcbiAgICAgIF9nZW5lcmF0b3JPcHRpb25zJGRlZjIgPSBfZ2VuZXJhdG9yT3B0aW9ucy5kZWZhdWx0T3B0aW9ucyxcbiAgICAgIGRlZmF1bHRPcHRpb25zID0gX2dlbmVyYXRvck9wdGlvbnMkZGVmMiA9PT0gdm9pZCAwID8gREVGQVVMVF9PUFRJT05TIDogX2dlbmVyYXRvck9wdGlvbnMkZGVmMjtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNyZWF0ZVBvcHBlcihyZWZlcmVuY2UsIHBvcHBlciwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSBkZWZhdWx0T3B0aW9ucztcbiAgICB9XG5cbiAgICB2YXIgc3RhdGUgPSB7XG4gICAgICBwbGFjZW1lbnQ6ICdib3R0b20nLFxuICAgICAgb3JkZXJlZE1vZGlmaWVyczogW10sXG4gICAgICBvcHRpb25zOiBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX09QVElPTlMsIHt9LCBkZWZhdWx0T3B0aW9ucyksXG4gICAgICBtb2RpZmllcnNEYXRhOiB7fSxcbiAgICAgIGVsZW1lbnRzOiB7XG4gICAgICAgIHJlZmVyZW5jZTogcmVmZXJlbmNlLFxuICAgICAgICBwb3BwZXI6IHBvcHBlclxuICAgICAgfSxcbiAgICAgIGF0dHJpYnV0ZXM6IHt9LFxuICAgICAgc3R5bGVzOiB7fVxuICAgIH07XG4gICAgdmFyIGVmZmVjdENsZWFudXBGbnMgPSBbXTtcbiAgICB2YXIgaXNEZXN0cm95ZWQgPSBmYWxzZTtcbiAgICB2YXIgaW5zdGFuY2UgPSB7XG4gICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICBzZXRPcHRpb25zOiBmdW5jdGlvbiBzZXRPcHRpb25zKG9wdGlvbnMpIHtcbiAgICAgICAgY2xlYW51cE1vZGlmaWVyRWZmZWN0cygpO1xuICAgICAgICBzdGF0ZS5vcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdE9wdGlvbnMsIHt9LCBzdGF0ZS5vcHRpb25zLCB7fSwgb3B0aW9ucyk7XG4gICAgICAgIHN0YXRlLnNjcm9sbFBhcmVudHMgPSB7XG4gICAgICAgICAgcmVmZXJlbmNlOiBpc0VsZW1lbnQocmVmZXJlbmNlKSA/IGxpc3RTY3JvbGxQYXJlbnRzKHJlZmVyZW5jZSkgOiByZWZlcmVuY2UuY29udGV4dEVsZW1lbnQgPyBsaXN0U2Nyb2xsUGFyZW50cyhyZWZlcmVuY2UuY29udGV4dEVsZW1lbnQpIDogW10sXG4gICAgICAgICAgcG9wcGVyOiBsaXN0U2Nyb2xsUGFyZW50cyhwb3BwZXIpXG4gICAgICAgIH07IC8vIE9yZGVycyB0aGUgbW9kaWZpZXJzIGJhc2VkIG9uIHRoZWlyIGRlcGVuZGVuY2llcyBhbmQgYHBoYXNlYFxuICAgICAgICAvLyBwcm9wZXJ0aWVzXG5cbiAgICAgICAgdmFyIG9yZGVyZWRNb2RpZmllcnMgPSBvcmRlck1vZGlmaWVycyhtZXJnZUJ5TmFtZShbXS5jb25jYXQoZGVmYXVsdE1vZGlmaWVycywgc3RhdGUub3B0aW9ucy5tb2RpZmllcnMpKSk7IC8vIFN0cmlwIG91dCBkaXNhYmxlZCBtb2RpZmllcnNcblxuICAgICAgICBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzID0gb3JkZXJlZE1vZGlmaWVycy5maWx0ZXIoZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgICByZXR1cm4gbS5lbmFibGVkO1xuICAgICAgICB9KTsgLy8gVmFsaWRhdGUgdGhlIHByb3ZpZGVkIG1vZGlmaWVycyBzbyB0aGF0IHRoZSBjb25zdW1lciB3aWxsIGdldCB3YXJuZWRcbiAgICAgICAgLy8gaWYgb25lIG9mIHRoZSBtb2RpZmllcnMgaXMgaW52YWxpZCBmb3IgYW55IHJlYXNvblxuXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICB2YXIgbW9kaWZpZXJzID0gdW5pcXVlQnkoW10uY29uY2F0KG9yZGVyZWRNb2RpZmllcnMsIHN0YXRlLm9wdGlvbnMubW9kaWZpZXJzKSwgZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgICAgICAgIHZhciBuYW1lID0gX3JlZi5uYW1lO1xuICAgICAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdmFsaWRhdGVNb2RpZmllcnMobW9kaWZpZXJzKTtcblxuICAgICAgICAgIGlmIChnZXRCYXNlUGxhY2VtZW50KHN0YXRlLm9wdGlvbnMucGxhY2VtZW50KSA9PT0gYXV0bykge1xuICAgICAgICAgICAgdmFyIGZsaXBNb2RpZmllciA9IHN0YXRlLm9yZGVyZWRNb2RpZmllcnMuZmluZChmdW5jdGlvbiAoX3JlZjIpIHtcbiAgICAgICAgICAgICAgdmFyIG5hbWUgPSBfcmVmMi5uYW1lO1xuICAgICAgICAgICAgICByZXR1cm4gbmFtZSA9PT0gJ2ZsaXAnO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmICghZmxpcE1vZGlmaWVyKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoWydQb3BwZXI6IFwiYXV0b1wiIHBsYWNlbWVudHMgcmVxdWlyZSB0aGUgXCJmbGlwXCIgbW9kaWZpZXIgYmUnLCAncHJlc2VudCBhbmQgZW5hYmxlZCB0byB3b3JrLiddLmpvaW4oJyAnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIF9nZXRDb21wdXRlZFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShwb3BwZXIpLFxuICAgICAgICAgICAgICBtYXJnaW5Ub3AgPSBfZ2V0Q29tcHV0ZWRTdHlsZS5tYXJnaW5Ub3AsXG4gICAgICAgICAgICAgIG1hcmdpblJpZ2h0ID0gX2dldENvbXB1dGVkU3R5bGUubWFyZ2luUmlnaHQsXG4gICAgICAgICAgICAgIG1hcmdpbkJvdHRvbSA9IF9nZXRDb21wdXRlZFN0eWxlLm1hcmdpbkJvdHRvbSxcbiAgICAgICAgICAgICAgbWFyZ2luTGVmdCA9IF9nZXRDb21wdXRlZFN0eWxlLm1hcmdpbkxlZnQ7IC8vIFdlIG5vIGxvbmdlciB0YWtlIGludG8gYWNjb3VudCBgbWFyZ2luc2Agb24gdGhlIHBvcHBlciwgYW5kIGl0IGNhblxuICAgICAgICAgIC8vIGNhdXNlIGJ1Z3Mgd2l0aCBwb3NpdGlvbmluZywgc28gd2UnbGwgd2FybiB0aGUgY29uc3VtZXJcblxuXG4gICAgICAgICAgaWYgKFttYXJnaW5Ub3AsIG1hcmdpblJpZ2h0LCBtYXJnaW5Cb3R0b20sIG1hcmdpbkxlZnRdLnNvbWUoZnVuY3Rpb24gKG1hcmdpbikge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQobWFyZ2luKTtcbiAgICAgICAgICB9KSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFsnUG9wcGVyOiBDU1MgXCJtYXJnaW5cIiBzdHlsZXMgY2Fubm90IGJlIHVzZWQgdG8gYXBwbHkgcGFkZGluZycsICdiZXR3ZWVuIHRoZSBwb3BwZXIgYW5kIGl0cyByZWZlcmVuY2UgZWxlbWVudCBvciBib3VuZGFyeS4nLCAnVG8gcmVwbGljYXRlIG1hcmdpbiwgdXNlIHRoZSBgb2Zmc2V0YCBtb2RpZmllciwgYXMgd2VsbCBhcycsICd0aGUgYHBhZGRpbmdgIG9wdGlvbiBpbiB0aGUgYHByZXZlbnRPdmVyZmxvd2AgYW5kIGBmbGlwYCcsICdtb2RpZmllcnMuJ10uam9pbignICcpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBydW5Nb2RpZmllckVmZmVjdHMoKTtcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlLnVwZGF0ZSgpO1xuICAgICAgfSxcbiAgICAgIC8vIFN5bmMgdXBkYXRlIOKAkyBpdCB3aWxsIGFsd2F5cyBiZSBleGVjdXRlZCwgZXZlbiBpZiBub3QgbmVjZXNzYXJ5LiBUaGlzXG4gICAgICAvLyBpcyB1c2VmdWwgZm9yIGxvdyBmcmVxdWVuY3kgdXBkYXRlcyB3aGVyZSBzeW5jIGJlaGF2aW9yIHNpbXBsaWZpZXMgdGhlXG4gICAgICAvLyBsb2dpYy5cbiAgICAgIC8vIEZvciBoaWdoIGZyZXF1ZW5jeSB1cGRhdGVzIChlLmcuIGByZXNpemVgIGFuZCBgc2Nyb2xsYCBldmVudHMpLCBhbHdheXNcbiAgICAgIC8vIHByZWZlciB0aGUgYXN5bmMgUG9wcGVyI3VwZGF0ZSBtZXRob2RcbiAgICAgIGZvcmNlVXBkYXRlOiBmdW5jdGlvbiBmb3JjZVVwZGF0ZSgpIHtcbiAgICAgICAgaWYgKGlzRGVzdHJveWVkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIF9zdGF0ZSRlbGVtZW50cyA9IHN0YXRlLmVsZW1lbnRzLFxuICAgICAgICAgICAgcmVmZXJlbmNlID0gX3N0YXRlJGVsZW1lbnRzLnJlZmVyZW5jZSxcbiAgICAgICAgICAgIHBvcHBlciA9IF9zdGF0ZSRlbGVtZW50cy5wb3BwZXI7IC8vIERvbid0IHByb2NlZWQgaWYgYHJlZmVyZW5jZWAgb3IgYHBvcHBlcmAgYXJlIG5vdCB2YWxpZCBlbGVtZW50c1xuICAgICAgICAvLyBhbnltb3JlXG5cbiAgICAgICAgaWYgKCFhcmVWYWxpZEVsZW1lbnRzKHJlZmVyZW5jZSwgcG9wcGVyKSkge1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoSU5WQUxJRF9FTEVNRU5UX0VSUk9SKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gLy8gU3RvcmUgdGhlIHJlZmVyZW5jZSBhbmQgcG9wcGVyIHJlY3RzIHRvIGJlIHJlYWQgYnkgbW9kaWZpZXJzXG5cblxuICAgICAgICBzdGF0ZS5yZWN0cyA9IHtcbiAgICAgICAgICByZWZlcmVuY2U6IGdldENvbXBvc2l0ZVJlY3QocmVmZXJlbmNlLCBnZXRPZmZzZXRQYXJlbnQocG9wcGVyKSwgc3RhdGUub3B0aW9ucy5zdHJhdGVneSA9PT0gJ2ZpeGVkJyksXG4gICAgICAgICAgcG9wcGVyOiBnZXRMYXlvdXRSZWN0KHBvcHBlcilcbiAgICAgICAgfTsgLy8gTW9kaWZpZXJzIGhhdmUgdGhlIGFiaWxpdHkgdG8gcmVzZXQgdGhlIGN1cnJlbnQgdXBkYXRlIGN5Y2xlLiBUaGVcbiAgICAgICAgLy8gbW9zdCBjb21tb24gdXNlIGNhc2UgZm9yIHRoaXMgaXMgdGhlIGBmbGlwYCBtb2RpZmllciBjaGFuZ2luZyB0aGVcbiAgICAgICAgLy8gcGxhY2VtZW50LCB3aGljaCB0aGVuIG5lZWRzIHRvIHJlLXJ1biBhbGwgdGhlIG1vZGlmaWVycywgYmVjYXVzZSB0aGVcbiAgICAgICAgLy8gbG9naWMgd2FzIHByZXZpb3VzbHkgcmFuIGZvciB0aGUgcHJldmlvdXMgcGxhY2VtZW50IGFuZCBpcyB0aGVyZWZvcmVcbiAgICAgICAgLy8gc3RhbGUvaW5jb3JyZWN0XG5cbiAgICAgICAgc3RhdGUucmVzZXQgPSBmYWxzZTtcbiAgICAgICAgc3RhdGUucGxhY2VtZW50ID0gc3RhdGUub3B0aW9ucy5wbGFjZW1lbnQ7IC8vIE9uIGVhY2ggdXBkYXRlIGN5Y2xlLCB0aGUgYG1vZGlmaWVyc0RhdGFgIHByb3BlcnR5IGZvciBlYWNoIG1vZGlmaWVyXG4gICAgICAgIC8vIGlzIGZpbGxlZCB3aXRoIHRoZSBpbml0aWFsIGRhdGEgc3BlY2lmaWVkIGJ5IHRoZSBtb2RpZmllci4gVGhpcyBtZWFuc1xuICAgICAgICAvLyBpdCBkb2Vzbid0IHBlcnNpc3QgYW5kIGlzIGZyZXNoIG9uIGVhY2ggdXBkYXRlLlxuICAgICAgICAvLyBUbyBlbnN1cmUgcGVyc2lzdGVudCBkYXRhLCB1c2UgYCR7bmFtZX0jcGVyc2lzdGVudGBcblxuICAgICAgICBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgICAgICAgcmV0dXJuIHN0YXRlLm1vZGlmaWVyc0RhdGFbbW9kaWZpZXIubmFtZV0gPSBPYmplY3QuYXNzaWduKHt9LCBtb2RpZmllci5kYXRhKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBfX2RlYnVnX2xvb3BzX18gPSAwO1xuXG4gICAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgIF9fZGVidWdfbG9vcHNfXyArPSAxO1xuXG4gICAgICAgICAgICBpZiAoX19kZWJ1Z19sb29wc19fID4gMTAwKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoSU5GSU5JVEVfTE9PUF9FUlJPUik7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzdGF0ZS5yZXNldCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgc3RhdGUucmVzZXQgPSBmYWxzZTtcbiAgICAgICAgICAgIGluZGV4ID0gLTE7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgX3N0YXRlJG9yZGVyZWRNb2RpZmllID0gc3RhdGUub3JkZXJlZE1vZGlmaWVyc1tpbmRleF0sXG4gICAgICAgICAgICAgIGZuID0gX3N0YXRlJG9yZGVyZWRNb2RpZmllLmZuLFxuICAgICAgICAgICAgICBfc3RhdGUkb3JkZXJlZE1vZGlmaWUyID0gX3N0YXRlJG9yZGVyZWRNb2RpZmllLm9wdGlvbnMsXG4gICAgICAgICAgICAgIF9vcHRpb25zID0gX3N0YXRlJG9yZGVyZWRNb2RpZmllMiA9PT0gdm9pZCAwID8ge30gOiBfc3RhdGUkb3JkZXJlZE1vZGlmaWUyLFxuICAgICAgICAgICAgICBuYW1lID0gX3N0YXRlJG9yZGVyZWRNb2RpZmllLm5hbWU7XG5cbiAgICAgICAgICBpZiAodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IGZuKHtcbiAgICAgICAgICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAgICAgICAgICBvcHRpb25zOiBfb3B0aW9ucyxcbiAgICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgaW5zdGFuY2U6IGluc3RhbmNlXG4gICAgICAgICAgICB9KSB8fCBzdGF0ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyBBc3luYyBhbmQgb3B0aW1pc3RpY2FsbHkgb3B0aW1pemVkIHVwZGF0ZSDigJMgaXQgd2lsbCBub3QgYmUgZXhlY3V0ZWQgaWZcbiAgICAgIC8vIG5vdCBuZWNlc3NhcnkgKGRlYm91bmNlZCB0byBydW4gYXQgbW9zdCBvbmNlLXBlci10aWNrKVxuICAgICAgdXBkYXRlOiBkZWJvdW5jZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgIGluc3RhbmNlLmZvcmNlVXBkYXRlKCk7XG4gICAgICAgICAgcmVzb2x2ZShzdGF0ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSksXG4gICAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgICBjbGVhbnVwTW9kaWZpZXJFZmZlY3RzKCk7XG4gICAgICAgIGlzRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKCFhcmVWYWxpZEVsZW1lbnRzKHJlZmVyZW5jZSwgcG9wcGVyKSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICBjb25zb2xlLmVycm9yKElOVkFMSURfRUxFTUVOVF9FUlJPUik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICB9XG5cbiAgICBpbnN0YW5jZS5zZXRPcHRpb25zKG9wdGlvbnMpLnRoZW4oZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICBpZiAoIWlzRGVzdHJveWVkICYmIG9wdGlvbnMub25GaXJzdFVwZGF0ZSkge1xuICAgICAgICBvcHRpb25zLm9uRmlyc3RVcGRhdGUoc3RhdGUpO1xuICAgICAgfVxuICAgIH0pOyAvLyBNb2RpZmllcnMgaGF2ZSB0aGUgYWJpbGl0eSB0byBleGVjdXRlIGFyYml0cmFyeSBjb2RlIGJlZm9yZSB0aGUgZmlyc3RcbiAgICAvLyB1cGRhdGUgY3ljbGUgcnVucy4gVGhleSB3aWxsIGJlIGV4ZWN1dGVkIGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZSB1cGRhdGVcbiAgICAvLyBjeWNsZS4gVGhpcyBpcyB1c2VmdWwgd2hlbiBhIG1vZGlmaWVyIGFkZHMgc29tZSBwZXJzaXN0ZW50IGRhdGEgdGhhdFxuICAgIC8vIG90aGVyIG1vZGlmaWVycyBuZWVkIHRvIHVzZSwgYnV0IHRoZSBtb2RpZmllciBpcyBydW4gYWZ0ZXIgdGhlIGRlcGVuZGVudFxuICAgIC8vIG9uZS5cblxuICAgIGZ1bmN0aW9uIHJ1bk1vZGlmaWVyRWZmZWN0cygpIHtcbiAgICAgIHN0YXRlLm9yZGVyZWRNb2RpZmllcnMuZm9yRWFjaChmdW5jdGlvbiAoX3JlZjMpIHtcbiAgICAgICAgdmFyIG5hbWUgPSBfcmVmMy5uYW1lLFxuICAgICAgICAgICAgX3JlZjMkb3B0aW9ucyA9IF9yZWYzLm9wdGlvbnMsXG4gICAgICAgICAgICBvcHRpb25zID0gX3JlZjMkb3B0aW9ucyA9PT0gdm9pZCAwID8ge30gOiBfcmVmMyRvcHRpb25zLFxuICAgICAgICAgICAgZWZmZWN0ID0gX3JlZjMuZWZmZWN0O1xuXG4gICAgICAgIGlmICh0eXBlb2YgZWZmZWN0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdmFyIGNsZWFudXBGbiA9IGVmZmVjdCh7XG4gICAgICAgICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgaW5zdGFuY2U6IGluc3RhbmNlLFxuICAgICAgICAgICAgb3B0aW9uczogb3B0aW9uc1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgdmFyIG5vb3BGbiA9IGZ1bmN0aW9uIG5vb3BGbigpIHt9O1xuXG4gICAgICAgICAgZWZmZWN0Q2xlYW51cEZucy5wdXNoKGNsZWFudXBGbiB8fCBub29wRm4pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGVhbnVwTW9kaWZpZXJFZmZlY3RzKCkge1xuICAgICAgZWZmZWN0Q2xlYW51cEZucy5mb3JFYWNoKGZ1bmN0aW9uIChmbikge1xuICAgICAgICByZXR1cm4gZm4oKTtcbiAgICAgIH0pO1xuICAgICAgZWZmZWN0Q2xlYW51cEZucyA9IFtdO1xuICAgIH1cblxuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfTtcbn1cblxudmFyIHBhc3NpdmUgPSB7XG4gIHBhc3NpdmU6IHRydWVcbn07XG5cbmZ1bmN0aW9uIGVmZmVjdChfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBpbnN0YW5jZSA9IF9yZWYuaW5zdGFuY2UsXG4gICAgICBvcHRpb25zID0gX3JlZi5vcHRpb25zO1xuICB2YXIgX29wdGlvbnMkc2Nyb2xsID0gb3B0aW9ucy5zY3JvbGwsXG4gICAgICBzY3JvbGwgPSBfb3B0aW9ucyRzY3JvbGwgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRzY3JvbGwsXG4gICAgICBfb3B0aW9ucyRyZXNpemUgPSBvcHRpb25zLnJlc2l6ZSxcbiAgICAgIHJlc2l6ZSA9IF9vcHRpb25zJHJlc2l6ZSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJHJlc2l6ZTtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdyhzdGF0ZS5lbGVtZW50cy5wb3BwZXIpO1xuICB2YXIgc2Nyb2xsUGFyZW50cyA9IFtdLmNvbmNhdChzdGF0ZS5zY3JvbGxQYXJlbnRzLnJlZmVyZW5jZSwgc3RhdGUuc2Nyb2xsUGFyZW50cy5wb3BwZXIpO1xuXG4gIGlmIChzY3JvbGwpIHtcbiAgICBzY3JvbGxQYXJlbnRzLmZvckVhY2goZnVuY3Rpb24gKHNjcm9sbFBhcmVudCkge1xuICAgICAgc2Nyb2xsUGFyZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGluc3RhbmNlLnVwZGF0ZSwgcGFzc2l2ZSk7XG4gICAgfSk7XG4gIH1cblxuICBpZiAocmVzaXplKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGluc3RhbmNlLnVwZGF0ZSwgcGFzc2l2ZSk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmIChzY3JvbGwpIHtcbiAgICAgIHNjcm9sbFBhcmVudHMuZm9yRWFjaChmdW5jdGlvbiAoc2Nyb2xsUGFyZW50KSB7XG4gICAgICAgIHNjcm9sbFBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBpbnN0YW5jZS51cGRhdGUsIHBhc3NpdmUpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHJlc2l6ZSkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGluc3RhbmNlLnVwZGF0ZSwgcGFzc2l2ZSk7XG4gICAgfVxuICB9O1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxudmFyIGV2ZW50TGlzdGVuZXJzID0ge1xuICBuYW1lOiAnZXZlbnRMaXN0ZW5lcnMnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ3dyaXRlJyxcbiAgZm46IGZ1bmN0aW9uIGZuKCkge30sXG4gIGVmZmVjdDogZWZmZWN0LFxuICBkYXRhOiB7fVxufTtcblxuZnVuY3Rpb24gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudCkge1xuICByZXR1cm4gcGxhY2VtZW50LnNwbGl0KCctJylbMV07XG59XG5cbmZ1bmN0aW9uIGdldE1haW5BeGlzRnJvbVBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIFsndG9wJywgJ2JvdHRvbSddLmluZGV4T2YocGxhY2VtZW50KSA+PSAwID8gJ3gnIDogJ3knO1xufVxuXG5mdW5jdGlvbiBjb21wdXRlT2Zmc2V0cyhfcmVmKSB7XG4gIHZhciByZWZlcmVuY2UgPSBfcmVmLnJlZmVyZW5jZSxcbiAgICAgIGVsZW1lbnQgPSBfcmVmLmVsZW1lbnQsXG4gICAgICBwbGFjZW1lbnQgPSBfcmVmLnBsYWNlbWVudDtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBwbGFjZW1lbnQgPyBnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCkgOiBudWxsO1xuICB2YXIgdmFyaWF0aW9uID0gcGxhY2VtZW50ID8gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudCkgOiBudWxsO1xuICB2YXIgY29tbW9uWCA9IHJlZmVyZW5jZS54ICsgcmVmZXJlbmNlLndpZHRoIC8gMiAtIGVsZW1lbnQud2lkdGggLyAyO1xuICB2YXIgY29tbW9uWSA9IHJlZmVyZW5jZS55ICsgcmVmZXJlbmNlLmhlaWdodCAvIDIgLSBlbGVtZW50LmhlaWdodCAvIDI7XG4gIHZhciBvZmZzZXRzO1xuXG4gIHN3aXRjaCAoYmFzZVBsYWNlbWVudCkge1xuICAgIGNhc2UgdG9wOlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogY29tbW9uWCxcbiAgICAgICAgeTogcmVmZXJlbmNlLnkgLSBlbGVtZW50LmhlaWdodFxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBib3R0b206XG4gICAgICBvZmZzZXRzID0ge1xuICAgICAgICB4OiBjb21tb25YLFxuICAgICAgICB5OiByZWZlcmVuY2UueSArIHJlZmVyZW5jZS5oZWlnaHRcbiAgICAgIH07XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgcmlnaHQ6XG4gICAgICBvZmZzZXRzID0ge1xuICAgICAgICB4OiByZWZlcmVuY2UueCArIHJlZmVyZW5jZS53aWR0aCxcbiAgICAgICAgeTogY29tbW9uWVxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBsZWZ0OlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogcmVmZXJlbmNlLnggLSBlbGVtZW50LndpZHRoLFxuICAgICAgICB5OiBjb21tb25ZXG4gICAgICB9O1xuICAgICAgYnJlYWs7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogcmVmZXJlbmNlLngsXG4gICAgICAgIHk6IHJlZmVyZW5jZS55XG4gICAgICB9O1xuICB9XG5cbiAgdmFyIG1haW5BeGlzID0gYmFzZVBsYWNlbWVudCA/IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudChiYXNlUGxhY2VtZW50KSA6IG51bGw7XG5cbiAgaWYgKG1haW5BeGlzICE9IG51bGwpIHtcbiAgICB2YXIgbGVuID0gbWFpbkF4aXMgPT09ICd5JyA/ICdoZWlnaHQnIDogJ3dpZHRoJztcblxuICAgIHN3aXRjaCAodmFyaWF0aW9uKSB7XG4gICAgICBjYXNlIHN0YXJ0OlxuICAgICAgICBvZmZzZXRzW21haW5BeGlzXSA9IE1hdGguZmxvb3Iob2Zmc2V0c1ttYWluQXhpc10pIC0gTWF0aC5mbG9vcihyZWZlcmVuY2VbbGVuXSAvIDIgLSBlbGVtZW50W2xlbl0gLyAyKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgZW5kOlxuICAgICAgICBvZmZzZXRzW21haW5BeGlzXSA9IE1hdGguZmxvb3Iob2Zmc2V0c1ttYWluQXhpc10pICsgTWF0aC5jZWlsKHJlZmVyZW5jZVtsZW5dIC8gMiAtIGVsZW1lbnRbbGVuXSAvIDIpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0cztcbn1cblxuZnVuY3Rpb24gcG9wcGVyT2Zmc2V0cyhfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBuYW1lID0gX3JlZi5uYW1lO1xuICAvLyBPZmZzZXRzIGFyZSB0aGUgYWN0dWFsIHBvc2l0aW9uIHRoZSBwb3BwZXIgbmVlZHMgdG8gaGF2ZSB0byBiZVxuICAvLyBwcm9wZXJseSBwb3NpdGlvbmVkIG5lYXIgaXRzIHJlZmVyZW5jZSBlbGVtZW50XG4gIC8vIFRoaXMgaXMgdGhlIG1vc3QgYmFzaWMgcGxhY2VtZW50LCBhbmQgd2lsbCBiZSBhZGp1c3RlZCBieVxuICAvLyB0aGUgbW9kaWZpZXJzIGluIHRoZSBuZXh0IHN0ZXBcbiAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXSA9IGNvbXB1dGVPZmZzZXRzKHtcbiAgICByZWZlcmVuY2U6IHN0YXRlLnJlY3RzLnJlZmVyZW5jZSxcbiAgICBlbGVtZW50OiBzdGF0ZS5yZWN0cy5wb3BwZXIsXG4gICAgc3RyYXRlZ3k6ICdhYnNvbHV0ZScsXG4gICAgcGxhY2VtZW50OiBzdGF0ZS5wbGFjZW1lbnRcbiAgfSk7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG52YXIgcG9wcGVyT2Zmc2V0cyQxID0ge1xuICBuYW1lOiAncG9wcGVyT2Zmc2V0cycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAncmVhZCcsXG4gIGZuOiBwb3BwZXJPZmZzZXRzLFxuICBkYXRhOiB7fVxufTtcblxudmFyIHVuc2V0U2lkZXMgPSB7XG4gIHRvcDogJ2F1dG8nLFxuICByaWdodDogJ2F1dG8nLFxuICBib3R0b206ICdhdXRvJyxcbiAgbGVmdDogJ2F1dG8nXG59OyAvLyBSb3VuZCB0aGUgb2Zmc2V0cyB0byB0aGUgbmVhcmVzdCBzdWl0YWJsZSBzdWJwaXhlbCBiYXNlZCBvbiB0aGUgRFBSLlxuLy8gWm9vbWluZyBjYW4gY2hhbmdlIHRoZSBEUFIsIGJ1dCBpdCBzZWVtcyB0byByZXBvcnQgYSB2YWx1ZSB0aGF0IHdpbGxcbi8vIGNsZWFubHkgZGl2aWRlIHRoZSB2YWx1ZXMgaW50byB0aGUgYXBwcm9wcmlhdGUgc3VicGl4ZWxzLlxuXG5mdW5jdGlvbiByb3VuZE9mZnNldHMoX3JlZikge1xuICB2YXIgeCA9IF9yZWYueCxcbiAgICAgIHkgPSBfcmVmLnk7XG4gIHZhciB3aW4gPSB3aW5kb3c7XG4gIHZhciBkcHIgPSB3aW4uZGV2aWNlUGl4ZWxSYXRpbyB8fCAxO1xuICByZXR1cm4ge1xuICAgIHg6IE1hdGgucm91bmQoeCAqIGRwcikgLyBkcHIgfHwgMCxcbiAgICB5OiBNYXRoLnJvdW5kKHkgKiBkcHIpIC8gZHByIHx8IDBcbiAgfTtcbn1cblxuZnVuY3Rpb24gbWFwVG9TdHlsZXMoX3JlZjIpIHtcbiAgdmFyIF9PYmplY3QkYXNzaWduMjtcblxuICB2YXIgcG9wcGVyID0gX3JlZjIucG9wcGVyLFxuICAgICAgcG9wcGVyUmVjdCA9IF9yZWYyLnBvcHBlclJlY3QsXG4gICAgICBwbGFjZW1lbnQgPSBfcmVmMi5wbGFjZW1lbnQsXG4gICAgICBvZmZzZXRzID0gX3JlZjIub2Zmc2V0cyxcbiAgICAgIHBvc2l0aW9uID0gX3JlZjIucG9zaXRpb24sXG4gICAgICBncHVBY2NlbGVyYXRpb24gPSBfcmVmMi5ncHVBY2NlbGVyYXRpb24sXG4gICAgICBhZGFwdGl2ZSA9IF9yZWYyLmFkYXB0aXZlO1xuXG4gIHZhciBfcm91bmRPZmZzZXRzID0gcm91bmRPZmZzZXRzKG9mZnNldHMpLFxuICAgICAgeCA9IF9yb3VuZE9mZnNldHMueCxcbiAgICAgIHkgPSBfcm91bmRPZmZzZXRzLnk7XG5cbiAgdmFyIGhhc1ggPSBvZmZzZXRzLmhhc093blByb3BlcnR5KCd4Jyk7XG4gIHZhciBoYXNZID0gb2Zmc2V0cy5oYXNPd25Qcm9wZXJ0eSgneScpO1xuICB2YXIgc2lkZVggPSBsZWZ0O1xuICB2YXIgc2lkZVkgPSB0b3A7XG4gIHZhciB3aW4gPSB3aW5kb3c7XG5cbiAgaWYgKGFkYXB0aXZlKSB7XG4gICAgdmFyIG9mZnNldFBhcmVudCA9IGdldE9mZnNldFBhcmVudChwb3BwZXIpO1xuXG4gICAgaWYgKG9mZnNldFBhcmVudCA9PT0gZ2V0V2luZG93KHBvcHBlcikpIHtcbiAgICAgIG9mZnNldFBhcmVudCA9IGdldERvY3VtZW50RWxlbWVudChwb3BwZXIpO1xuICAgIH0gLy8gJEZsb3dGaXhNZTogZm9yY2UgdHlwZSByZWZpbmVtZW50LCB3ZSBjb21wYXJlIG9mZnNldFBhcmVudCB3aXRoIHdpbmRvdyBhYm92ZSwgYnV0IEZsb3cgZG9lc24ndCBkZXRlY3QgaXRcblxuICAgIC8qOjogb2Zmc2V0UGFyZW50ID0gKG9mZnNldFBhcmVudDogRWxlbWVudCk7ICovXG5cblxuICAgIGlmIChwbGFjZW1lbnQgPT09IHRvcCkge1xuICAgICAgc2lkZVkgPSBib3R0b207XG4gICAgICB5IC09IG9mZnNldFBhcmVudC5jbGllbnRIZWlnaHQgLSBwb3BwZXJSZWN0LmhlaWdodDtcbiAgICAgIHkgKj0gZ3B1QWNjZWxlcmF0aW9uID8gMSA6IC0xO1xuICAgIH1cblxuICAgIGlmIChwbGFjZW1lbnQgPT09IGxlZnQpIHtcbiAgICAgIHNpZGVYID0gcmlnaHQ7XG4gICAgICB4IC09IG9mZnNldFBhcmVudC5jbGllbnRXaWR0aCAtIHBvcHBlclJlY3Qud2lkdGg7XG4gICAgICB4ICo9IGdwdUFjY2VsZXJhdGlvbiA/IDEgOiAtMTtcbiAgICB9XG4gIH1cblxuICB2YXIgY29tbW9uU3R5bGVzID0gT2JqZWN0LmFzc2lnbih7XG4gICAgcG9zaXRpb246IHBvc2l0aW9uXG4gIH0sIGFkYXB0aXZlICYmIHVuc2V0U2lkZXMpO1xuXG4gIGlmIChncHVBY2NlbGVyYXRpb24pIHtcbiAgICB2YXIgX09iamVjdCRhc3NpZ247XG5cbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgY29tbW9uU3R5bGVzLCAoX09iamVjdCRhc3NpZ24gPSB7fSwgX09iamVjdCRhc3NpZ25bc2lkZVldID0gaGFzWSA/ICcwJyA6ICcnLCBfT2JqZWN0JGFzc2lnbltzaWRlWF0gPSBoYXNYID8gJzAnIDogJycsIF9PYmplY3QkYXNzaWduLnRyYW5zZm9ybSA9ICh3aW4uZGV2aWNlUGl4ZWxSYXRpbyB8fCAxKSA8IDIgPyBcInRyYW5zbGF0ZShcIiArIHggKyBcInB4LCBcIiArIHkgKyBcInB4KVwiIDogXCJ0cmFuc2xhdGUzZChcIiArIHggKyBcInB4LCBcIiArIHkgKyBcInB4LCAwKVwiLCBfT2JqZWN0JGFzc2lnbikpO1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGNvbW1vblN0eWxlcywgKF9PYmplY3QkYXNzaWduMiA9IHt9LCBfT2JqZWN0JGFzc2lnbjJbc2lkZVldID0gaGFzWSA/IHkgKyBcInB4XCIgOiAnJywgX09iamVjdCRhc3NpZ24yW3NpZGVYXSA9IGhhc1ggPyB4ICsgXCJweFwiIDogJycsIF9PYmplY3QkYXNzaWduMi50cmFuc2Zvcm0gPSAnJywgX09iamVjdCRhc3NpZ24yKSk7XG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVTdHlsZXMoX3JlZjMpIHtcbiAgdmFyIHN0YXRlID0gX3JlZjMuc3RhdGUsXG4gICAgICBvcHRpb25zID0gX3JlZjMub3B0aW9ucztcbiAgdmFyIF9vcHRpb25zJGdwdUFjY2VsZXJhdCA9IG9wdGlvbnMuZ3B1QWNjZWxlcmF0aW9uLFxuICAgICAgZ3B1QWNjZWxlcmF0aW9uID0gX29wdGlvbnMkZ3B1QWNjZWxlcmF0ID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkZ3B1QWNjZWxlcmF0LFxuICAgICAgX29wdGlvbnMkYWRhcHRpdmUgPSBvcHRpb25zLmFkYXB0aXZlLFxuICAgICAgYWRhcHRpdmUgPSBfb3B0aW9ucyRhZGFwdGl2ZSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJGFkYXB0aXZlO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICB2YXIgdHJhbnNpdGlvblByb3BlcnR5ID0gZ2V0Q29tcHV0ZWRTdHlsZShzdGF0ZS5lbGVtZW50cy5wb3BwZXIpLnRyYW5zaXRpb25Qcm9wZXJ0eSB8fCAnJztcblxuICAgIGlmIChhZGFwdGl2ZSAmJiBbJ3RyYW5zZm9ybScsICd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnXS5zb21lKGZ1bmN0aW9uIChwcm9wZXJ0eSkge1xuICAgICAgcmV0dXJuIHRyYW5zaXRpb25Qcm9wZXJ0eS5pbmRleE9mKHByb3BlcnR5KSA+PSAwO1xuICAgIH0pKSB7XG4gICAgICBjb25zb2xlLndhcm4oWydQb3BwZXI6IERldGVjdGVkIENTUyB0cmFuc2l0aW9ucyBvbiBhdCBsZWFzdCBvbmUgb2YgdGhlIGZvbGxvd2luZycsICdDU1MgcHJvcGVydGllczogXCJ0cmFuc2Zvcm1cIiwgXCJ0b3BcIiwgXCJyaWdodFwiLCBcImJvdHRvbVwiLCBcImxlZnRcIi4nLCAnXFxuXFxuJywgJ0Rpc2FibGUgdGhlIFwiY29tcHV0ZVN0eWxlc1wiIG1vZGlmaWVyXFwncyBgYWRhcHRpdmVgIG9wdGlvbiB0byBhbGxvdycsICdmb3Igc21vb3RoIHRyYW5zaXRpb25zLCBvciByZW1vdmUgdGhlc2UgcHJvcGVydGllcyBmcm9tIHRoZSBDU1MnLCAndHJhbnNpdGlvbiBkZWNsYXJhdGlvbiBvbiB0aGUgcG9wcGVyIGVsZW1lbnQgaWYgb25seSB0cmFuc2l0aW9uaW5nJywgJ29wYWNpdHkgb3IgYmFja2dyb3VuZC1jb2xvciBmb3IgZXhhbXBsZS4nLCAnXFxuXFxuJywgJ1dlIHJlY29tbWVuZCB1c2luZyB0aGUgcG9wcGVyIGVsZW1lbnQgYXMgYSB3cmFwcGVyIGFyb3VuZCBhbiBpbm5lcicsICdlbGVtZW50IHRoYXQgY2FuIGhhdmUgYW55IENTUyBwcm9wZXJ0eSB0cmFuc2l0aW9uZWQgZm9yIGFuaW1hdGlvbnMuJ10uam9pbignICcpKTtcbiAgICB9XG4gIH1cblxuICB2YXIgY29tbW9uU3R5bGVzID0ge1xuICAgIHBsYWNlbWVudDogZ2V0QmFzZVBsYWNlbWVudChzdGF0ZS5wbGFjZW1lbnQpLFxuICAgIHBvcHBlcjogc3RhdGUuZWxlbWVudHMucG9wcGVyLFxuICAgIHBvcHBlclJlY3Q6IHN0YXRlLnJlY3RzLnBvcHBlcixcbiAgICBncHVBY2NlbGVyYXRpb246IGdwdUFjY2VsZXJhdGlvblxuICB9O1xuXG4gIGlmIChzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMgIT0gbnVsbCkge1xuICAgIHN0YXRlLnN0eWxlcy5wb3BwZXIgPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZS5zdHlsZXMucG9wcGVyLCB7fSwgbWFwVG9TdHlsZXMoT2JqZWN0LmFzc2lnbih7fSwgY29tbW9uU3R5bGVzLCB7XG4gICAgICBvZmZzZXRzOiBzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMsXG4gICAgICBwb3NpdGlvbjogc3RhdGUub3B0aW9ucy5zdHJhdGVneSxcbiAgICAgIGFkYXB0aXZlOiBhZGFwdGl2ZVxuICAgIH0pKSk7XG4gIH1cblxuICBpZiAoc3RhdGUubW9kaWZpZXJzRGF0YS5hcnJvdyAhPSBudWxsKSB7XG4gICAgc3RhdGUuc3R5bGVzLmFycm93ID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUuc3R5bGVzLmFycm93LCB7fSwgbWFwVG9TdHlsZXMoT2JqZWN0LmFzc2lnbih7fSwgY29tbW9uU3R5bGVzLCB7XG4gICAgICBvZmZzZXRzOiBzdGF0ZS5tb2RpZmllcnNEYXRhLmFycm93LFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICBhZGFwdGl2ZTogZmFsc2VcbiAgICB9KSkpO1xuICB9XG5cbiAgc3RhdGUuYXR0cmlidXRlcy5wb3BwZXIgPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZS5hdHRyaWJ1dGVzLnBvcHBlciwge1xuICAgICdkYXRhLXBvcHBlci1wbGFjZW1lbnQnOiBzdGF0ZS5wbGFjZW1lbnRcbiAgfSk7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG52YXIgY29tcHV0ZVN0eWxlcyQxID0ge1xuICBuYW1lOiAnY29tcHV0ZVN0eWxlcycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnYmVmb3JlV3JpdGUnLFxuICBmbjogY29tcHV0ZVN0eWxlcyxcbiAgZGF0YToge31cbn07XG5cbi8vIGFuZCBhcHBsaWVzIHRoZW0gdG8gdGhlIEhUTUxFbGVtZW50cyBzdWNoIGFzIHBvcHBlciBhbmQgYXJyb3dcblxuZnVuY3Rpb24gYXBwbHlTdHlsZXMoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlO1xuICBPYmplY3Qua2V5cyhzdGF0ZS5lbGVtZW50cykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgIHZhciBzdHlsZSA9IHN0YXRlLnN0eWxlc1tuYW1lXSB8fCB7fTtcbiAgICB2YXIgYXR0cmlidXRlcyA9IHN0YXRlLmF0dHJpYnV0ZXNbbmFtZV0gfHwge307XG4gICAgdmFyIGVsZW1lbnQgPSBzdGF0ZS5lbGVtZW50c1tuYW1lXTsgLy8gYXJyb3cgaXMgb3B0aW9uYWwgKyB2aXJ0dWFsIGVsZW1lbnRzXG5cbiAgICBpZiAoIWlzSFRNTEVsZW1lbnQoZWxlbWVudCkgfHwgIWdldE5vZGVOYW1lKGVsZW1lbnQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBGbG93IGRvZXNuJ3Qgc3VwcG9ydCB0byBleHRlbmQgdGhpcyBwcm9wZXJ0eSwgYnV0IGl0J3MgdGhlIG1vc3RcbiAgICAvLyBlZmZlY3RpdmUgd2F5IHRvIGFwcGx5IHN0eWxlcyB0byBhbiBIVE1MRWxlbWVudFxuICAgIC8vICRGbG93Rml4TWVcblxuXG4gICAgT2JqZWN0LmFzc2lnbihlbGVtZW50LnN0eWxlLCBzdHlsZSk7XG4gICAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgdmFyIHZhbHVlID0gYXR0cmlidXRlc1tuYW1lXTtcblxuICAgICAgaWYgKHZhbHVlID09PSBmYWxzZSkge1xuICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlID09PSB0cnVlID8gJycgOiB2YWx1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBlZmZlY3QkMShfcmVmMikge1xuICB2YXIgc3RhdGUgPSBfcmVmMi5zdGF0ZTtcbiAgdmFyIGluaXRpYWxTdHlsZXMgPSB7XG4gICAgcG9wcGVyOiB7XG4gICAgICBwb3NpdGlvbjogc3RhdGUub3B0aW9ucy5zdHJhdGVneSxcbiAgICAgIGxlZnQ6ICcwJyxcbiAgICAgIHRvcDogJzAnLFxuICAgICAgbWFyZ2luOiAnMCdcbiAgICB9LFxuICAgIGFycm93OiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJ1xuICAgIH0sXG4gICAgcmVmZXJlbmNlOiB7fVxuICB9O1xuICBPYmplY3QuYXNzaWduKHN0YXRlLmVsZW1lbnRzLnBvcHBlci5zdHlsZSwgaW5pdGlhbFN0eWxlcy5wb3BwZXIpO1xuXG4gIGlmIChzdGF0ZS5lbGVtZW50cy5hcnJvdykge1xuICAgIE9iamVjdC5hc3NpZ24oc3RhdGUuZWxlbWVudHMuYXJyb3cuc3R5bGUsIGluaXRpYWxTdHlsZXMuYXJyb3cpO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBPYmplY3Qua2V5cyhzdGF0ZS5lbGVtZW50cykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgdmFyIGVsZW1lbnQgPSBzdGF0ZS5lbGVtZW50c1tuYW1lXTtcbiAgICAgIHZhciBhdHRyaWJ1dGVzID0gc3RhdGUuYXR0cmlidXRlc1tuYW1lXSB8fCB7fTtcbiAgICAgIHZhciBzdHlsZVByb3BlcnRpZXMgPSBPYmplY3Qua2V5cyhzdGF0ZS5zdHlsZXMuaGFzT3duUHJvcGVydHkobmFtZSkgPyBzdGF0ZS5zdHlsZXNbbmFtZV0gOiBpbml0aWFsU3R5bGVzW25hbWVdKTsgLy8gU2V0IGFsbCB2YWx1ZXMgdG8gYW4gZW1wdHkgc3RyaW5nIHRvIHVuc2V0IHRoZW1cblxuICAgICAgdmFyIHN0eWxlID0gc3R5bGVQcm9wZXJ0aWVzLnJlZHVjZShmdW5jdGlvbiAoc3R5bGUsIHByb3BlcnR5KSB7XG4gICAgICAgIHN0eWxlW3Byb3BlcnR5XSA9ICcnO1xuICAgICAgICByZXR1cm4gc3R5bGU7XG4gICAgICB9LCB7fSk7IC8vIGFycm93IGlzIG9wdGlvbmFsICsgdmlydHVhbCBlbGVtZW50c1xuXG4gICAgICBpZiAoIWlzSFRNTEVsZW1lbnQoZWxlbWVudCkgfHwgIWdldE5vZGVOYW1lKGVsZW1lbnQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gRmxvdyBkb2Vzbid0IHN1cHBvcnQgdG8gZXh0ZW5kIHRoaXMgcHJvcGVydHksIGJ1dCBpdCdzIHRoZSBtb3N0XG4gICAgICAvLyBlZmZlY3RpdmUgd2F5IHRvIGFwcGx5IHN0eWxlcyB0byBhbiBIVE1MRWxlbWVudFxuICAgICAgLy8gJEZsb3dGaXhNZVxuXG5cbiAgICAgIE9iamVjdC5hc3NpZ24oZWxlbWVudC5zdHlsZSwgc3R5bGUpO1xuICAgICAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoYXR0cmlidXRlKSB7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbnZhciBhcHBseVN0eWxlcyQxID0ge1xuICBuYW1lOiAnYXBwbHlTdHlsZXMnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ3dyaXRlJyxcbiAgZm46IGFwcGx5U3R5bGVzLFxuICBlZmZlY3Q6IGVmZmVjdCQxLFxuICByZXF1aXJlczogWydjb21wdXRlU3R5bGVzJ11cbn07XG5cbmZ1bmN0aW9uIGRpc3RhbmNlQW5kU2tpZGRpbmdUb1hZKHBsYWNlbWVudCwgcmVjdHMsIG9mZnNldCkge1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KTtcbiAgdmFyIGludmVydERpc3RhbmNlID0gW2xlZnQsIHRvcF0uaW5kZXhPZihiYXNlUGxhY2VtZW50KSA+PSAwID8gLTEgOiAxO1xuXG4gIHZhciBfcmVmID0gdHlwZW9mIG9mZnNldCA9PT0gJ2Z1bmN0aW9uJyA/IG9mZnNldChPYmplY3QuYXNzaWduKHt9LCByZWN0cywge1xuICAgIHBsYWNlbWVudDogcGxhY2VtZW50XG4gIH0pKSA6IG9mZnNldCxcbiAgICAgIHNraWRkaW5nID0gX3JlZlswXSxcbiAgICAgIGRpc3RhbmNlID0gX3JlZlsxXTtcblxuICBza2lkZGluZyA9IHNraWRkaW5nIHx8IDA7XG4gIGRpc3RhbmNlID0gKGRpc3RhbmNlIHx8IDApICogaW52ZXJ0RGlzdGFuY2U7XG4gIHJldHVybiBbbGVmdCwgcmlnaHRdLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgPj0gMCA/IHtcbiAgICB4OiBkaXN0YW5jZSxcbiAgICB5OiBza2lkZGluZ1xuICB9IDoge1xuICAgIHg6IHNraWRkaW5nLFxuICAgIHk6IGRpc3RhbmNlXG4gIH07XG59XG5cbmZ1bmN0aW9uIG9mZnNldChfcmVmMikge1xuICB2YXIgc3RhdGUgPSBfcmVmMi5zdGF0ZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmMi5vcHRpb25zLFxuICAgICAgbmFtZSA9IF9yZWYyLm5hbWU7XG4gIHZhciBfb3B0aW9ucyRvZmZzZXQgPSBvcHRpb25zLm9mZnNldCxcbiAgICAgIG9mZnNldCA9IF9vcHRpb25zJG9mZnNldCA9PT0gdm9pZCAwID8gWzAsIDBdIDogX29wdGlvbnMkb2Zmc2V0O1xuICB2YXIgZGF0YSA9IHBsYWNlbWVudHMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBsYWNlbWVudCkge1xuICAgIGFjY1twbGFjZW1lbnRdID0gZGlzdGFuY2VBbmRTa2lkZGluZ1RvWFkocGxhY2VtZW50LCBzdGF0ZS5yZWN0cywgb2Zmc2V0KTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG4gIHZhciBfZGF0YSRzdGF0ZSRwbGFjZW1lbnQgPSBkYXRhW3N0YXRlLnBsYWNlbWVudF0sXG4gICAgICB4ID0gX2RhdGEkc3RhdGUkcGxhY2VtZW50LngsXG4gICAgICB5ID0gX2RhdGEkc3RhdGUkcGxhY2VtZW50Lnk7XG5cbiAgaWYgKHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cyAhPSBudWxsKSB7XG4gICAgc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzLnggKz0geDtcbiAgICBzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMueSArPSB5O1xuICB9XG5cbiAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXSA9IGRhdGE7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG52YXIgb2Zmc2V0JDEgPSB7XG4gIG5hbWU6ICdvZmZzZXQnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ21haW4nLFxuICByZXF1aXJlczogWydwb3BwZXJPZmZzZXRzJ10sXG4gIGZuOiBvZmZzZXRcbn07XG5cbnZhciBoYXNoID0ge1xuICBsZWZ0OiAncmlnaHQnLFxuICByaWdodDogJ2xlZnQnLFxuICBib3R0b206ICd0b3AnLFxuICB0b3A6ICdib3R0b20nXG59O1xuZnVuY3Rpb24gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHJldHVybiBwbGFjZW1lbnQucmVwbGFjZSgvbGVmdHxyaWdodHxib3R0b218dG9wL2csIGZ1bmN0aW9uIChtYXRjaGVkKSB7XG4gICAgcmV0dXJuIGhhc2hbbWF0Y2hlZF07XG4gIH0pO1xufVxuXG52YXIgaGFzaCQxID0ge1xuICBzdGFydDogJ2VuZCcsXG4gIGVuZDogJ3N0YXJ0J1xufTtcbmZ1bmN0aW9uIGdldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50KHBsYWNlbWVudCkge1xuICByZXR1cm4gcGxhY2VtZW50LnJlcGxhY2UoL3N0YXJ0fGVuZC9nLCBmdW5jdGlvbiAobWF0Y2hlZCkge1xuICAgIHJldHVybiBoYXNoJDFbbWF0Y2hlZF07XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRWaWV3cG9ydFJlY3QoZWxlbWVudCkge1xuICB2YXIgd2luID0gZ2V0V2luZG93KGVsZW1lbnQpO1xuICB2YXIgdmlzdWFsVmlld3BvcnQgPSB3aW4udmlzdWFsVmlld3BvcnQ7XG4gIHZhciB3aWR0aCA9IHdpbi5pbm5lcldpZHRoO1xuICB2YXIgaGVpZ2h0ID0gd2luLmlubmVySGVpZ2h0OyAvLyBXZSBkb24ndCBrbm93IHdoaWNoIGJyb3dzZXJzIGhhdmUgYnVnZ3kgb3Igb2RkIGltcGxlbWVudGF0aW9ucyBvZiB0aGlzLCBzb1xuICAvLyBmb3Igbm93IHdlJ3JlIG9ubHkgYXBwbHlpbmcgaXQgdG8gaU9TIHRvIGZpeCB0aGUga2V5Ym9hcmQgaXNzdWUuXG4gIC8vIEludmVzdGlnYXRpb24gcmVxdWlyZWRcblxuICBpZiAodmlzdWFsVmlld3BvcnQgJiYgL2lQaG9uZXxpUG9kfGlQYWQvLnRlc3QobmF2aWdhdG9yLnBsYXRmb3JtKSkge1xuICAgIHdpZHRoID0gdmlzdWFsVmlld3BvcnQud2lkdGg7XG4gICAgaGVpZ2h0ID0gdmlzdWFsVmlld3BvcnQuaGVpZ2h0O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgeDogMCxcbiAgICB5OiAwXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldERvY3VtZW50UmVjdChlbGVtZW50KSB7XG4gIHZhciB3aW4gPSBnZXRXaW5kb3coZWxlbWVudCk7XG4gIHZhciB3aW5TY3JvbGwgPSBnZXRXaW5kb3dTY3JvbGwoZWxlbWVudCk7XG4gIHZhciBkb2N1bWVudFJlY3QgPSBnZXRDb21wb3NpdGVSZWN0KGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSwgd2luKTtcbiAgZG9jdW1lbnRSZWN0LmhlaWdodCA9IE1hdGgubWF4KGRvY3VtZW50UmVjdC5oZWlnaHQsIHdpbi5pbm5lckhlaWdodCk7XG4gIGRvY3VtZW50UmVjdC53aWR0aCA9IE1hdGgubWF4KGRvY3VtZW50UmVjdC53aWR0aCwgd2luLmlubmVyV2lkdGgpO1xuICBkb2N1bWVudFJlY3QueCA9IC13aW5TY3JvbGwuc2Nyb2xsTGVmdDtcbiAgZG9jdW1lbnRSZWN0LnkgPSAtd2luU2Nyb2xsLnNjcm9sbFRvcDtcbiAgcmV0dXJuIGRvY3VtZW50UmVjdDtcbn1cblxuZnVuY3Rpb24gdG9OdW1iZXIoY3NzVmFsdWUpIHtcbiAgcmV0dXJuIHBhcnNlRmxvYXQoY3NzVmFsdWUpIHx8IDA7XG59XG5cbmZ1bmN0aW9uIGdldEJvcmRlcnMoZWxlbWVudCkge1xuICB2YXIgY29tcHV0ZWRTdHlsZSA9IGlzSFRNTEVsZW1lbnQoZWxlbWVudCkgPyBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpIDoge307XG4gIHJldHVybiB7XG4gICAgdG9wOiB0b051bWJlcihjb21wdXRlZFN0eWxlLmJvcmRlclRvcFdpZHRoKSxcbiAgICByaWdodDogdG9OdW1iZXIoY29tcHV0ZWRTdHlsZS5ib3JkZXJSaWdodFdpZHRoKSxcbiAgICBib3R0b206IHRvTnVtYmVyKGNvbXB1dGVkU3R5bGUuYm9yZGVyQm90dG9tV2lkdGgpLFxuICAgIGxlZnQ6IHRvTnVtYmVyKGNvbXB1dGVkU3R5bGUuYm9yZGVyTGVmdFdpZHRoKVxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXREZWNvcmF0aW9ucyhlbGVtZW50KSB7XG4gIHZhciB3aW4gPSBnZXRXaW5kb3coZWxlbWVudCk7XG4gIHZhciBib3JkZXJzID0gZ2V0Qm9yZGVycyhlbGVtZW50KTtcbiAgdmFyIGlzSFRNTCA9IGdldE5vZGVOYW1lKGVsZW1lbnQpID09PSAnaHRtbCc7XG4gIHZhciB3aW5TY3JvbGxCYXJYID0gZ2V0V2luZG93U2Nyb2xsQmFyWChlbGVtZW50KTtcbiAgdmFyIHggPSBlbGVtZW50LmNsaWVudFdpZHRoICsgYm9yZGVycy5yaWdodDtcbiAgdmFyIHkgPSBlbGVtZW50LmNsaWVudEhlaWdodCArIGJvcmRlcnMuYm90dG9tOyAvLyBIQUNLOlxuICAvLyBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0IG9uIGlPUyByZXBvcnRzIHRoZSBoZWlnaHQgb2YgdGhlXG4gIC8vIHZpZXdwb3J0IGluY2x1ZGluZyB0aGUgYm90dG9tIGJhciwgZXZlbiBpZiB0aGUgYm90dG9tIGJhciBpc24ndCB2aXNpYmxlLlxuICAvLyBJZiB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHdpbmRvdyBpbm5lckhlaWdodCBhbmQgaHRtbCBjbGllbnRIZWlnaHQgaXMgbW9yZVxuICAvLyB0aGFuIDUwLCB3ZSBhc3N1bWUgaXQncyBhIG1vYmlsZSBib3R0b20gYmFyIGFuZCBpZ25vcmUgc2Nyb2xsYmFycy5cbiAgLy8gKiBBIDUwcHggdGhpY2sgc2Nyb2xsYmFyIGlzIGxpa2VseSBub24tZXhpc3RlbnQgKG1hY09TIGlzIDE1cHggYW5kIFdpbmRvd3NcbiAgLy8gICBpcyBhYm91dCAxN3B4KVxuICAvLyAqIFRoZSBtb2JpbGUgYmFyIGlzIDExNHB4IHRhbGxcblxuICBpZiAoaXNIVE1MICYmIHdpbi5pbm5lckhlaWdodCAtIGVsZW1lbnQuY2xpZW50SGVpZ2h0ID4gNTApIHtcbiAgICB5ID0gd2luLmlubmVySGVpZ2h0IC0gYm9yZGVycy5ib3R0b207XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHRvcDogaXNIVE1MID8gMCA6IGVsZW1lbnQuY2xpZW50VG9wLFxuICAgIHJpZ2h0OiAvLyBSVEwgc2Nyb2xsYmFyIChzY3JvbGxpbmcgY29udGFpbmVycyBvbmx5KVxuICAgIGVsZW1lbnQuY2xpZW50TGVmdCA+IGJvcmRlcnMubGVmdCA/IGJvcmRlcnMucmlnaHQgOiAvLyBMVFIgc2Nyb2xsYmFyXG4gICAgaXNIVE1MID8gd2luLmlubmVyV2lkdGggLSB4IC0gd2luU2Nyb2xsQmFyWCA6IGVsZW1lbnQub2Zmc2V0V2lkdGggLSB4LFxuICAgIGJvdHRvbTogaXNIVE1MID8gd2luLmlubmVySGVpZ2h0IC0geSA6IGVsZW1lbnQub2Zmc2V0SGVpZ2h0IC0geSxcbiAgICBsZWZ0OiBpc0hUTUwgPyB3aW5TY3JvbGxCYXJYIDogZWxlbWVudC5jbGllbnRMZWZ0XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbnRhaW5zKHBhcmVudCwgY2hpbGQpIHtcbiAgLy8gJEZsb3dGaXhNZTogaGFzT3duUHJvcGVydHkgZG9lc24ndCBzZWVtIHRvIHdvcmsgaW4gdGVzdHNcbiAgdmFyIGlzU2hhZG93ID0gQm9vbGVhbihjaGlsZC5nZXRSb290Tm9kZSAmJiBjaGlsZC5nZXRSb290Tm9kZSgpLmhvc3QpOyAvLyBGaXJzdCwgYXR0ZW1wdCB3aXRoIGZhc3RlciBuYXRpdmUgbWV0aG9kXG5cbiAgaWYgKHBhcmVudC5jb250YWlucyhjaGlsZCkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSAvLyB0aGVuIGZhbGxiYWNrIHRvIGN1c3RvbSBpbXBsZW1lbnRhdGlvbiB3aXRoIFNoYWRvdyBET00gc3VwcG9ydFxuICBlbHNlIGlmIChpc1NoYWRvdykge1xuICAgICAgdmFyIG5leHQgPSBjaGlsZDtcblxuICAgICAgZG8ge1xuICAgICAgICBpZiAobmV4dCAmJiBwYXJlbnQuaXNTYW1lTm9kZShuZXh0KSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IC8vICRGbG93Rml4TWU6IG5lZWQgYSBiZXR0ZXIgd2F5IHRvIGhhbmRsZSB0aGlzLi4uXG5cblxuICAgICAgICBuZXh0ID0gbmV4dC5wYXJlbnROb2RlIHx8IG5leHQuaG9zdDtcbiAgICAgIH0gd2hpbGUgKG5leHQpO1xuICAgIH0gLy8gR2l2ZSB1cCwgdGhlIHJlc3VsdCBpcyBmYWxzZVxuXG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiByZWN0VG9DbGllbnRSZWN0KHJlY3QpIHtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHJlY3QsIHtcbiAgICBsZWZ0OiByZWN0LngsXG4gICAgdG9wOiByZWN0LnksXG4gICAgcmlnaHQ6IHJlY3QueCArIHJlY3Qud2lkdGgsXG4gICAgYm90dG9tOiByZWN0LnkgKyByZWN0LmhlaWdodFxuICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0Q2xpZW50UmVjdEZyb21NaXhlZFR5cGUoZWxlbWVudCwgY2xpcHBpbmdQYXJlbnQpIHtcbiAgcmV0dXJuIGNsaXBwaW5nUGFyZW50ID09PSB2aWV3cG9ydCA/IHJlY3RUb0NsaWVudFJlY3QoZ2V0Vmlld3BvcnRSZWN0KGVsZW1lbnQpKSA6IGlzSFRNTEVsZW1lbnQoY2xpcHBpbmdQYXJlbnQpID8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGNsaXBwaW5nUGFyZW50KSA6IHJlY3RUb0NsaWVudFJlY3QoZ2V0RG9jdW1lbnRSZWN0KGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSkpO1xufSAvLyBBIFwiY2xpcHBpbmcgcGFyZW50XCIgaXMgYW4gb3ZlcmZsb3dhYmxlIGNvbnRhaW5lciB3aXRoIHRoZSBjaGFyYWN0ZXJpc3RpYyBvZlxuLy8gY2xpcHBpbmcgKG9yIGhpZGluZykgb3ZlcmZsb3dpbmcgZWxlbWVudHMgd2l0aCBhIHBvc2l0aW9uIGRpZmZlcmVudCBmcm9tXG4vLyBgaW5pdGlhbGBcblxuXG5mdW5jdGlvbiBnZXRDbGlwcGluZ1BhcmVudHMoZWxlbWVudCkge1xuICB2YXIgY2xpcHBpbmdQYXJlbnRzID0gbGlzdFNjcm9sbFBhcmVudHMoZWxlbWVudCk7XG4gIHZhciBjYW5Fc2NhcGVDbGlwcGluZyA9IFsnYWJzb2x1dGUnLCAnZml4ZWQnXS5pbmRleE9mKGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkucG9zaXRpb24pID49IDA7XG4gIHZhciBjbGlwcGVyRWxlbWVudCA9IGNhbkVzY2FwZUNsaXBwaW5nICYmIGlzSFRNTEVsZW1lbnQoZWxlbWVudCkgPyBnZXRPZmZzZXRQYXJlbnQoZWxlbWVudCkgOiBlbGVtZW50O1xuXG4gIGlmICghaXNFbGVtZW50KGNsaXBwZXJFbGVtZW50KSkge1xuICAgIHJldHVybiBbXTtcbiAgfSAvLyAkRmxvd0ZpeE1lOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvMTQxNFxuXG5cbiAgcmV0dXJuIGNsaXBwaW5nUGFyZW50cy5maWx0ZXIoZnVuY3Rpb24gKGNsaXBwaW5nUGFyZW50KSB7XG4gICAgcmV0dXJuIGlzRWxlbWVudChjbGlwcGluZ1BhcmVudCkgJiYgY29udGFpbnMoY2xpcHBpbmdQYXJlbnQsIGNsaXBwZXJFbGVtZW50KTtcbiAgfSk7XG59IC8vIEdldHMgdGhlIG1heGltdW0gYXJlYSB0aGF0IHRoZSBlbGVtZW50IGlzIHZpc2libGUgaW4gZHVlIHRvIGFueSBudW1iZXIgb2Zcbi8vIGNsaXBwaW5nIHBhcmVudHNcblxuXG5mdW5jdGlvbiBnZXRDbGlwcGluZ1JlY3QoZWxlbWVudCwgYm91bmRhcnksIHJvb3RCb3VuZGFyeSkge1xuICB2YXIgbWFpbkNsaXBwaW5nUGFyZW50cyA9IGJvdW5kYXJ5ID09PSAnY2xpcHBpbmdQYXJlbnRzJyA/IGdldENsaXBwaW5nUGFyZW50cyhlbGVtZW50KSA6IFtdLmNvbmNhdChib3VuZGFyeSk7XG4gIHZhciBjbGlwcGluZ1BhcmVudHMgPSBbXS5jb25jYXQobWFpbkNsaXBwaW5nUGFyZW50cywgW3Jvb3RCb3VuZGFyeV0pO1xuICB2YXIgZmlyc3RDbGlwcGluZ1BhcmVudCA9IGNsaXBwaW5nUGFyZW50c1swXTtcbiAgdmFyIGNsaXBwaW5nUmVjdCA9IGNsaXBwaW5nUGFyZW50cy5yZWR1Y2UoZnVuY3Rpb24gKGFjY1JlY3QsIGNsaXBwaW5nUGFyZW50KSB7XG4gICAgdmFyIHJlY3QgPSBnZXRDbGllbnRSZWN0RnJvbU1peGVkVHlwZShlbGVtZW50LCBjbGlwcGluZ1BhcmVudCk7XG4gICAgdmFyIGRlY29yYXRpb25zID0gZ2V0RGVjb3JhdGlvbnMoaXNIVE1MRWxlbWVudChjbGlwcGluZ1BhcmVudCkgPyBjbGlwcGluZ1BhcmVudCA6IGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSk7XG4gICAgYWNjUmVjdC50b3AgPSBNYXRoLm1heChyZWN0LnRvcCArIGRlY29yYXRpb25zLnRvcCwgYWNjUmVjdC50b3ApO1xuICAgIGFjY1JlY3QucmlnaHQgPSBNYXRoLm1pbihyZWN0LnJpZ2h0IC0gZGVjb3JhdGlvbnMucmlnaHQsIGFjY1JlY3QucmlnaHQpO1xuICAgIGFjY1JlY3QuYm90dG9tID0gTWF0aC5taW4ocmVjdC5ib3R0b20gLSBkZWNvcmF0aW9ucy5ib3R0b20sIGFjY1JlY3QuYm90dG9tKTtcbiAgICBhY2NSZWN0LmxlZnQgPSBNYXRoLm1heChyZWN0LmxlZnQgKyBkZWNvcmF0aW9ucy5sZWZ0LCBhY2NSZWN0LmxlZnQpO1xuICAgIHJldHVybiBhY2NSZWN0O1xuICB9LCBnZXRDbGllbnRSZWN0RnJvbU1peGVkVHlwZShlbGVtZW50LCBmaXJzdENsaXBwaW5nUGFyZW50KSk7XG4gIGNsaXBwaW5nUmVjdC53aWR0aCA9IGNsaXBwaW5nUmVjdC5yaWdodCAtIGNsaXBwaW5nUmVjdC5sZWZ0O1xuICBjbGlwcGluZ1JlY3QuaGVpZ2h0ID0gY2xpcHBpbmdSZWN0LmJvdHRvbSAtIGNsaXBwaW5nUmVjdC50b3A7XG4gIGNsaXBwaW5nUmVjdC54ID0gY2xpcHBpbmdSZWN0LmxlZnQ7XG4gIGNsaXBwaW5nUmVjdC55ID0gY2xpcHBpbmdSZWN0LnRvcDtcbiAgcmV0dXJuIGNsaXBwaW5nUmVjdDtcbn1cblxuZnVuY3Rpb24gZ2V0RnJlc2hTaWRlT2JqZWN0KCkge1xuICByZXR1cm4ge1xuICAgIHRvcDogMCxcbiAgICByaWdodDogMCxcbiAgICBib3R0b206IDAsXG4gICAgbGVmdDogMFxuICB9O1xufVxuXG5mdW5jdGlvbiBtZXJnZVBhZGRpbmdPYmplY3QocGFkZGluZ09iamVjdCkge1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgZ2V0RnJlc2hTaWRlT2JqZWN0KCksIHt9LCBwYWRkaW5nT2JqZWN0KTtcbn1cblxuZnVuY3Rpb24gZXhwYW5kVG9IYXNoTWFwKHZhbHVlLCBrZXlzKSB7XG4gIHJldHVybiBrZXlzLnJlZHVjZShmdW5jdGlvbiAoaGFzaE1hcCwga2V5KSB7XG4gICAgaGFzaE1hcFtrZXldID0gdmFsdWU7XG4gICAgcmV0dXJuIGhhc2hNYXA7XG4gIH0sIHt9KTtcbn1cblxuZnVuY3Rpb24gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICBfb3B0aW9ucyRwbGFjZW1lbnQgPSBfb3B0aW9ucy5wbGFjZW1lbnQsXG4gICAgICBwbGFjZW1lbnQgPSBfb3B0aW9ucyRwbGFjZW1lbnQgPT09IHZvaWQgMCA/IHN0YXRlLnBsYWNlbWVudCA6IF9vcHRpb25zJHBsYWNlbWVudCxcbiAgICAgIF9vcHRpb25zJGJvdW5kYXJ5ID0gX29wdGlvbnMuYm91bmRhcnksXG4gICAgICBib3VuZGFyeSA9IF9vcHRpb25zJGJvdW5kYXJ5ID09PSB2b2lkIDAgPyBjbGlwcGluZ1BhcmVudHMgOiBfb3B0aW9ucyRib3VuZGFyeSxcbiAgICAgIF9vcHRpb25zJHJvb3RCb3VuZGFyeSA9IF9vcHRpb25zLnJvb3RCb3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeSA9IF9vcHRpb25zJHJvb3RCb3VuZGFyeSA9PT0gdm9pZCAwID8gdmlld3BvcnQgOiBfb3B0aW9ucyRyb290Qm91bmRhcnksXG4gICAgICBfb3B0aW9ucyRlbGVtZW50Q29udGUgPSBfb3B0aW9ucy5lbGVtZW50Q29udGV4dCxcbiAgICAgIGVsZW1lbnRDb250ZXh0ID0gX29wdGlvbnMkZWxlbWVudENvbnRlID09PSB2b2lkIDAgPyBwb3BwZXIgOiBfb3B0aW9ucyRlbGVtZW50Q29udGUsXG4gICAgICBfb3B0aW9ucyRhbHRCb3VuZGFyeSA9IF9vcHRpb25zLmFsdEJvdW5kYXJ5LFxuICAgICAgYWx0Qm91bmRhcnkgPSBfb3B0aW9ucyRhbHRCb3VuZGFyeSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRhbHRCb3VuZGFyeSxcbiAgICAgIF9vcHRpb25zJHBhZGRpbmcgPSBfb3B0aW9ucy5wYWRkaW5nLFxuICAgICAgcGFkZGluZyA9IF9vcHRpb25zJHBhZGRpbmcgPT09IHZvaWQgMCA/IDAgOiBfb3B0aW9ucyRwYWRkaW5nO1xuICB2YXIgcGFkZGluZ09iamVjdCA9IG1lcmdlUGFkZGluZ09iamVjdCh0eXBlb2YgcGFkZGluZyAhPT0gJ251bWJlcicgPyBwYWRkaW5nIDogZXhwYW5kVG9IYXNoTWFwKHBhZGRpbmcsIGJhc2VQbGFjZW1lbnRzKSk7XG4gIHZhciBhbHRDb250ZXh0ID0gZWxlbWVudENvbnRleHQgPT09IHBvcHBlciA/IHJlZmVyZW5jZSA6IHBvcHBlcjtcbiAgdmFyIHJlZmVyZW5jZUVsZW1lbnQgPSBzdGF0ZS5lbGVtZW50cy5yZWZlcmVuY2U7XG4gIHZhciBwb3BwZXJSZWN0ID0gc3RhdGUucmVjdHMucG9wcGVyO1xuICB2YXIgZWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzW2FsdEJvdW5kYXJ5ID8gYWx0Q29udGV4dCA6IGVsZW1lbnRDb250ZXh0XTtcbiAgdmFyIGNsaXBwaW5nQ2xpZW50UmVjdCA9IGdldENsaXBwaW5nUmVjdChpc0VsZW1lbnQoZWxlbWVudCkgPyBlbGVtZW50IDogZWxlbWVudC5jb250ZXh0RWxlbWVudCB8fCBnZXREb2N1bWVudEVsZW1lbnQoc3RhdGUuZWxlbWVudHMucG9wcGVyKSwgYm91bmRhcnksIHJvb3RCb3VuZGFyeSk7XG4gIHZhciByZWZlcmVuY2VDbGllbnRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KHJlZmVyZW5jZUVsZW1lbnQpO1xuICB2YXIgcG9wcGVyT2Zmc2V0cyA9IGNvbXB1dGVPZmZzZXRzKHtcbiAgICByZWZlcmVuY2U6IHJlZmVyZW5jZUNsaWVudFJlY3QsXG4gICAgZWxlbWVudDogcG9wcGVyUmVjdCxcbiAgICBzdHJhdGVneTogJ2Fic29sdXRlJyxcbiAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudFxuICB9KTtcbiAgdmFyIHBvcHBlckNsaWVudFJlY3QgPSByZWN0VG9DbGllbnRSZWN0KE9iamVjdC5hc3NpZ24oe30sIHBvcHBlclJlY3QsIHt9LCBwb3BwZXJPZmZzZXRzKSk7XG4gIHZhciBlbGVtZW50Q2xpZW50UmVjdCA9IGVsZW1lbnRDb250ZXh0ID09PSBwb3BwZXIgPyBwb3BwZXJDbGllbnRSZWN0IDogcmVmZXJlbmNlQ2xpZW50UmVjdDsgLy8gcG9zaXRpdmUgPSBvdmVyZmxvd2luZyB0aGUgY2xpcHBpbmcgcmVjdFxuICAvLyAwIG9yIG5lZ2F0aXZlID0gd2l0aGluIHRoZSBjbGlwcGluZyByZWN0XG5cbiAgdmFyIG92ZXJmbG93T2Zmc2V0cyA9IHtcbiAgICB0b3A6IGNsaXBwaW5nQ2xpZW50UmVjdC50b3AgLSBlbGVtZW50Q2xpZW50UmVjdC50b3AgKyBwYWRkaW5nT2JqZWN0LnRvcCxcbiAgICBib3R0b206IGVsZW1lbnRDbGllbnRSZWN0LmJvdHRvbSAtIGNsaXBwaW5nQ2xpZW50UmVjdC5ib3R0b20gKyBwYWRkaW5nT2JqZWN0LmJvdHRvbSxcbiAgICBsZWZ0OiBjbGlwcGluZ0NsaWVudFJlY3QubGVmdCAtIGVsZW1lbnRDbGllbnRSZWN0LmxlZnQgKyBwYWRkaW5nT2JqZWN0LmxlZnQsXG4gICAgcmlnaHQ6IGVsZW1lbnRDbGllbnRSZWN0LnJpZ2h0IC0gY2xpcHBpbmdDbGllbnRSZWN0LnJpZ2h0ICsgcGFkZGluZ09iamVjdC5yaWdodFxuICB9O1xuICB2YXIgb2Zmc2V0RGF0YSA9IHN0YXRlLm1vZGlmaWVyc0RhdGEub2Zmc2V0OyAvLyBPZmZzZXRzIGNhbiBiZSBhcHBsaWVkIG9ubHkgdG8gdGhlIHBvcHBlciBlbGVtZW50XG5cbiAgaWYgKGVsZW1lbnRDb250ZXh0ID09PSBwb3BwZXIgJiYgb2Zmc2V0RGF0YSkge1xuICAgIHZhciBvZmZzZXQgPSBvZmZzZXREYXRhW3BsYWNlbWVudF07XG4gICAgT2JqZWN0LmtleXMob3ZlcmZsb3dPZmZzZXRzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHZhciBtdWx0aXBseSA9IFtyaWdodCwgYm90dG9tXS5pbmRleE9mKGtleSkgPj0gMCA/IDEgOiAtMTtcbiAgICAgIHZhciBheGlzID0gW3RvcCwgYm90dG9tXS5pbmRleE9mKGtleSkgPj0gMCA/ICd5JyA6ICd4JztcbiAgICAgIG92ZXJmbG93T2Zmc2V0c1trZXldICs9IG9mZnNldFtheGlzXSAqIG11bHRpcGx5O1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIG92ZXJmbG93T2Zmc2V0cztcbn1cblxuLyo6OiB0eXBlIE92ZXJmbG93c01hcCA9IHsgW0NvbXB1dGVkUGxhY2VtZW50XTogbnVtYmVyIH07ICovXG5cbi8qOzsgdHlwZSBPdmVyZmxvd3NNYXAgPSB7IFtrZXkgaW4gQ29tcHV0ZWRQbGFjZW1lbnRdOiBudW1iZXIgfTsgKi9cbmZ1bmN0aW9uIGNvbXB1dGVBdXRvUGxhY2VtZW50KHN0YXRlLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgcGxhY2VtZW50ID0gX29wdGlvbnMucGxhY2VtZW50LFxuICAgICAgYm91bmRhcnkgPSBfb3B0aW9ucy5ib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeSA9IF9vcHRpb25zLnJvb3RCb3VuZGFyeSxcbiAgICAgIHBhZGRpbmcgPSBfb3B0aW9ucy5wYWRkaW5nLFxuICAgICAgZmxpcFZhcmlhdGlvbnMgPSBfb3B0aW9ucy5mbGlwVmFyaWF0aW9ucyxcbiAgICAgIF9vcHRpb25zJGFsbG93ZWRBdXRvUCA9IF9vcHRpb25zLmFsbG93ZWRBdXRvUGxhY2VtZW50cyxcbiAgICAgIGFsbG93ZWRBdXRvUGxhY2VtZW50cyA9IF9vcHRpb25zJGFsbG93ZWRBdXRvUCA9PT0gdm9pZCAwID8gcGxhY2VtZW50cyA6IF9vcHRpb25zJGFsbG93ZWRBdXRvUDtcbiAgdmFyIHZhcmlhdGlvbiA9IGdldFZhcmlhdGlvbihwbGFjZW1lbnQpO1xuICB2YXIgcGxhY2VtZW50cyQxID0gKHZhcmlhdGlvbiA/IGZsaXBWYXJpYXRpb25zID8gdmFyaWF0aW9uUGxhY2VtZW50cyA6IHZhcmlhdGlvblBsYWNlbWVudHMuZmlsdGVyKGZ1bmN0aW9uIChwbGFjZW1lbnQpIHtcbiAgICByZXR1cm4gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudCkgPT09IHZhcmlhdGlvbjtcbiAgfSkgOiBiYXNlUGxhY2VtZW50cykuZmlsdGVyKGZ1bmN0aW9uIChwbGFjZW1lbnQpIHtcbiAgICByZXR1cm4gYWxsb3dlZEF1dG9QbGFjZW1lbnRzLmluZGV4T2YocGxhY2VtZW50KSA+PSAwO1xuICB9KTsgLy8gJEZsb3dGaXhNZTogRmxvdyBzZWVtcyB0byBoYXZlIHByb2JsZW1zIHdpdGggdHdvIGFycmF5IHVuaW9ucy4uLlxuXG4gIHZhciBvdmVyZmxvd3MgPSBwbGFjZW1lbnRzJDEucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBsYWNlbWVudCkge1xuICAgIGFjY1twbGFjZW1lbnRdID0gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIHtcbiAgICAgIHBsYWNlbWVudDogcGxhY2VtZW50LFxuICAgICAgYm91bmRhcnk6IGJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5OiByb290Qm91bmRhcnksXG4gICAgICBwYWRkaW5nOiBwYWRkaW5nXG4gICAgfSlbZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpXTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvdmVyZmxvd3MpLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gb3ZlcmZsb3dzW2FdIC0gb3ZlcmZsb3dzW2JdO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0RXhwYW5kZWRGYWxsYmFja1BsYWNlbWVudHMocGxhY2VtZW50KSB7XG4gIGlmIChnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCkgPT09IGF1dG8pIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICB2YXIgb3Bwb3NpdGVQbGFjZW1lbnQgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuICByZXR1cm4gW2dldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50KHBsYWNlbWVudCksIG9wcG9zaXRlUGxhY2VtZW50LCBnZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudChvcHBvc2l0ZVBsYWNlbWVudCldO1xufVxuXG5mdW5jdGlvbiBmbGlwKF9yZWYpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmLm9wdGlvbnMsXG4gICAgICBuYW1lID0gX3JlZi5uYW1lO1xuXG4gIGlmIChzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdLl9za2lwKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIF9vcHRpb25zJG1haW5BeGlzID0gb3B0aW9ucy5tYWluQXhpcyxcbiAgICAgIGNoZWNrTWFpbkF4aXMgPSBfb3B0aW9ucyRtYWluQXhpcyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJG1haW5BeGlzLFxuICAgICAgX29wdGlvbnMkYWx0QXhpcyA9IG9wdGlvbnMuYWx0QXhpcyxcbiAgICAgIGNoZWNrQWx0QXhpcyA9IF9vcHRpb25zJGFsdEF4aXMgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRhbHRBeGlzLFxuICAgICAgc3BlY2lmaWVkRmFsbGJhY2tQbGFjZW1lbnRzID0gb3B0aW9ucy5mYWxsYmFja1BsYWNlbWVudHMsXG4gICAgICBwYWRkaW5nID0gb3B0aW9ucy5wYWRkaW5nLFxuICAgICAgYm91bmRhcnkgPSBvcHRpb25zLmJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5ID0gb3B0aW9ucy5yb290Qm91bmRhcnksXG4gICAgICBhbHRCb3VuZGFyeSA9IG9wdGlvbnMuYWx0Qm91bmRhcnksXG4gICAgICBfb3B0aW9ucyRmbGlwVmFyaWF0aW8gPSBvcHRpb25zLmZsaXBWYXJpYXRpb25zLFxuICAgICAgZmxpcFZhcmlhdGlvbnMgPSBfb3B0aW9ucyRmbGlwVmFyaWF0aW8gPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRmbGlwVmFyaWF0aW8sXG4gICAgICBhbGxvd2VkQXV0b1BsYWNlbWVudHMgPSBvcHRpb25zLmFsbG93ZWRBdXRvUGxhY2VtZW50cztcbiAgdmFyIHByZWZlcnJlZFBsYWNlbWVudCA9IHN0YXRlLm9wdGlvbnMucGxhY2VtZW50O1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IGdldEJhc2VQbGFjZW1lbnQocHJlZmVycmVkUGxhY2VtZW50KTtcbiAgdmFyIGlzQmFzZVBsYWNlbWVudCA9IGJhc2VQbGFjZW1lbnQgPT09IHByZWZlcnJlZFBsYWNlbWVudDtcbiAgdmFyIGZhbGxiYWNrUGxhY2VtZW50cyA9IHNwZWNpZmllZEZhbGxiYWNrUGxhY2VtZW50cyB8fCAoaXNCYXNlUGxhY2VtZW50IHx8ICFmbGlwVmFyaWF0aW9ucyA/IFtnZXRPcHBvc2l0ZVBsYWNlbWVudChwcmVmZXJyZWRQbGFjZW1lbnQpXSA6IGdldEV4cGFuZGVkRmFsbGJhY2tQbGFjZW1lbnRzKHByZWZlcnJlZFBsYWNlbWVudCkpO1xuICB2YXIgcGxhY2VtZW50cyA9IFtwcmVmZXJyZWRQbGFjZW1lbnRdLmNvbmNhdChmYWxsYmFja1BsYWNlbWVudHMpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwbGFjZW1lbnQpIHtcbiAgICByZXR1cm4gYWNjLmNvbmNhdChnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCkgPT09IGF1dG8gPyBjb21wdXRlQXV0b1BsYWNlbWVudChzdGF0ZSwge1xuICAgICAgcGxhY2VtZW50OiBwbGFjZW1lbnQsXG4gICAgICBib3VuZGFyeTogYm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnk6IHJvb3RCb3VuZGFyeSxcbiAgICAgIHBhZGRpbmc6IHBhZGRpbmcsXG4gICAgICBmbGlwVmFyaWF0aW9uczogZmxpcFZhcmlhdGlvbnMsXG4gICAgICBhbGxvd2VkQXV0b1BsYWNlbWVudHM6IGFsbG93ZWRBdXRvUGxhY2VtZW50c1xuICAgIH0pIDogcGxhY2VtZW50KTtcbiAgfSwgW10pO1xuICB2YXIgcmVmZXJlbmNlUmVjdCA9IHN0YXRlLnJlY3RzLnJlZmVyZW5jZTtcbiAgdmFyIHBvcHBlclJlY3QgPSBzdGF0ZS5yZWN0cy5wb3BwZXI7XG4gIHZhciBjaGVja3NNYXAgPSBuZXcgTWFwKCk7XG4gIHZhciBtYWtlRmFsbGJhY2tDaGVja3MgPSB0cnVlO1xuICB2YXIgZmlyc3RGaXR0aW5nUGxhY2VtZW50ID0gcGxhY2VtZW50c1swXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBsYWNlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcGxhY2VtZW50ID0gcGxhY2VtZW50c1tpXTtcblxuICAgIHZhciBfYmFzZVBsYWNlbWVudCA9IGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KTtcblxuICAgIHZhciBpc1N0YXJ0VmFyaWF0aW9uID0gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudCkgPT09IHN0YXJ0O1xuICAgIHZhciBpc1ZlcnRpY2FsID0gW3RvcCwgYm90dG9tXS5pbmRleE9mKF9iYXNlUGxhY2VtZW50KSA+PSAwO1xuICAgIHZhciBsZW4gPSBpc1ZlcnRpY2FsID8gJ3dpZHRoJyA6ICdoZWlnaHQnO1xuICAgIHZhciBvdmVyZmxvdyA9IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudCxcbiAgICAgIGJvdW5kYXJ5OiBib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeTogcm9vdEJvdW5kYXJ5LFxuICAgICAgYWx0Qm91bmRhcnk6IGFsdEJvdW5kYXJ5LFxuICAgICAgcGFkZGluZzogcGFkZGluZ1xuICAgIH0pO1xuICAgIHZhciBtYWluVmFyaWF0aW9uU2lkZSA9IGlzVmVydGljYWwgPyBpc1N0YXJ0VmFyaWF0aW9uID8gcmlnaHQgOiBsZWZ0IDogaXNTdGFydFZhcmlhdGlvbiA/IGJvdHRvbSA6IHRvcDtcblxuICAgIGlmIChyZWZlcmVuY2VSZWN0W2xlbl0gPiBwb3BwZXJSZWN0W2xlbl0pIHtcbiAgICAgIG1haW5WYXJpYXRpb25TaWRlID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQobWFpblZhcmlhdGlvblNpZGUpO1xuICAgIH1cblxuICAgIHZhciBhbHRWYXJpYXRpb25TaWRlID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQobWFpblZhcmlhdGlvblNpZGUpO1xuICAgIHZhciBjaGVja3MgPSBbXTtcblxuICAgIGlmIChjaGVja01haW5BeGlzKSB7XG4gICAgICBjaGVja3MucHVzaChvdmVyZmxvd1tfYmFzZVBsYWNlbWVudF0gPD0gMCk7XG4gICAgfVxuXG4gICAgaWYgKGNoZWNrQWx0QXhpcykge1xuICAgICAgY2hlY2tzLnB1c2gob3ZlcmZsb3dbbWFpblZhcmlhdGlvblNpZGVdIDw9IDAsIG92ZXJmbG93W2FsdFZhcmlhdGlvblNpZGVdIDw9IDApO1xuICAgIH1cblxuICAgIGlmIChjaGVja3MuZXZlcnkoZnVuY3Rpb24gKGNoZWNrKSB7XG4gICAgICByZXR1cm4gY2hlY2s7XG4gICAgfSkpIHtcbiAgICAgIGZpcnN0Rml0dGluZ1BsYWNlbWVudCA9IHBsYWNlbWVudDtcbiAgICAgIG1ha2VGYWxsYmFja0NoZWNrcyA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgY2hlY2tzTWFwLnNldChwbGFjZW1lbnQsIGNoZWNrcyk7XG4gIH1cblxuICBpZiAobWFrZUZhbGxiYWNrQ2hlY2tzKSB7XG4gICAgLy8gYDJgIG1heSBiZSBkZXNpcmVkIGluIHNvbWUgY2FzZXMg4oCTIHJlc2VhcmNoIGxhdGVyXG4gICAgdmFyIG51bWJlck9mQ2hlY2tzID0gZmxpcFZhcmlhdGlvbnMgPyAzIDogMTtcblxuICAgIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKF9pKSB7XG4gICAgICB2YXIgZml0dGluZ1BsYWNlbWVudCA9IHBsYWNlbWVudHMuZmluZChmdW5jdGlvbiAocGxhY2VtZW50KSB7XG4gICAgICAgIHZhciBjaGVja3MgPSBjaGVja3NNYXAuZ2V0KHBsYWNlbWVudCk7XG5cbiAgICAgICAgaWYgKGNoZWNrcykge1xuICAgICAgICAgIHJldHVybiBjaGVja3Muc2xpY2UoMCwgX2kpLmV2ZXJ5KGZ1bmN0aW9uIChjaGVjaykge1xuICAgICAgICAgICAgcmV0dXJuIGNoZWNrO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgaWYgKGZpdHRpbmdQbGFjZW1lbnQpIHtcbiAgICAgICAgZmlyc3RGaXR0aW5nUGxhY2VtZW50ID0gZml0dGluZ1BsYWNlbWVudDtcbiAgICAgICAgcmV0dXJuIFwiYnJlYWtcIjtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZm9yICh2YXIgX2kgPSBudW1iZXJPZkNoZWNrczsgX2kgPiAwOyBfaS0tKSB7XG4gICAgICB2YXIgX3JldCA9IF9sb29wKF9pKTtcblxuICAgICAgaWYgKF9yZXQgPT09IFwiYnJlYWtcIikgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgaWYgKHN0YXRlLnBsYWNlbWVudCAhPT0gZmlyc3RGaXR0aW5nUGxhY2VtZW50KSB7XG4gICAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXS5fc2tpcCA9IHRydWU7XG4gICAgc3RhdGUucGxhY2VtZW50ID0gZmlyc3RGaXR0aW5nUGxhY2VtZW50O1xuICAgIHN0YXRlLnJlc2V0ID0gdHJ1ZTtcbiAgfVxufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxudmFyIGZsaXAkMSA9IHtcbiAgbmFtZTogJ2ZsaXAnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ21haW4nLFxuICBmbjogZmxpcCxcbiAgcmVxdWlyZXNJZkV4aXN0czogWydvZmZzZXQnXSxcbiAgZGF0YToge1xuICAgIF9za2lwOiBmYWxzZVxuICB9XG59O1xuXG5mdW5jdGlvbiBnZXRBbHRBeGlzKGF4aXMpIHtcbiAgcmV0dXJuIGF4aXMgPT09ICd4JyA/ICd5JyA6ICd4Jztcbn1cblxuZnVuY3Rpb24gd2l0aGluKG1pbiwgdmFsdWUsIG1heCkge1xuICByZXR1cm4gTWF0aC5tYXgobWluLCBNYXRoLm1pbih2YWx1ZSwgbWF4KSk7XG59XG5cbmZ1bmN0aW9uIHByZXZlbnRPdmVyZmxvdyhfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBvcHRpb25zID0gX3JlZi5vcHRpb25zLFxuICAgICAgbmFtZSA9IF9yZWYubmFtZTtcbiAgdmFyIF9vcHRpb25zJG1haW5BeGlzID0gb3B0aW9ucy5tYWluQXhpcyxcbiAgICAgIGNoZWNrTWFpbkF4aXMgPSBfb3B0aW9ucyRtYWluQXhpcyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJG1haW5BeGlzLFxuICAgICAgX29wdGlvbnMkYWx0QXhpcyA9IG9wdGlvbnMuYWx0QXhpcyxcbiAgICAgIGNoZWNrQWx0QXhpcyA9IF9vcHRpb25zJGFsdEF4aXMgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkYWx0QXhpcyxcbiAgICAgIGJvdW5kYXJ5ID0gb3B0aW9ucy5ib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeSA9IG9wdGlvbnMucm9vdEJvdW5kYXJ5LFxuICAgICAgYWx0Qm91bmRhcnkgPSBvcHRpb25zLmFsdEJvdW5kYXJ5LFxuICAgICAgcGFkZGluZyA9IG9wdGlvbnMucGFkZGluZyxcbiAgICAgIF9vcHRpb25zJHRldGhlciA9IG9wdGlvbnMudGV0aGVyLFxuICAgICAgdGV0aGVyID0gX29wdGlvbnMkdGV0aGVyID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkdGV0aGVyLFxuICAgICAgX29wdGlvbnMkdGV0aGVyT2Zmc2V0ID0gb3B0aW9ucy50ZXRoZXJPZmZzZXQsXG4gICAgICB0ZXRoZXJPZmZzZXQgPSBfb3B0aW9ucyR0ZXRoZXJPZmZzZXQgPT09IHZvaWQgMCA/IDAgOiBfb3B0aW9ucyR0ZXRoZXJPZmZzZXQ7XG4gIHZhciBvdmVyZmxvdyA9IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgYm91bmRhcnk6IGJvdW5kYXJ5LFxuICAgIHJvb3RCb3VuZGFyeTogcm9vdEJvdW5kYXJ5LFxuICAgIHBhZGRpbmc6IHBhZGRpbmcsXG4gICAgYWx0Qm91bmRhcnk6IGFsdEJvdW5kYXJ5XG4gIH0pO1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IGdldEJhc2VQbGFjZW1lbnQoc3RhdGUucGxhY2VtZW50KTtcbiAgdmFyIHZhcmlhdGlvbiA9IGdldFZhcmlhdGlvbihzdGF0ZS5wbGFjZW1lbnQpO1xuICB2YXIgaXNCYXNlUGxhY2VtZW50ID0gIXZhcmlhdGlvbjtcbiAgdmFyIG1haW5BeGlzID0gZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50KGJhc2VQbGFjZW1lbnQpO1xuICB2YXIgYWx0QXhpcyA9IGdldEFsdEF4aXMobWFpbkF4aXMpO1xuICB2YXIgcG9wcGVyT2Zmc2V0cyA9IHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cztcbiAgdmFyIHJlZmVyZW5jZVJlY3QgPSBzdGF0ZS5yZWN0cy5yZWZlcmVuY2U7XG4gIHZhciBwb3BwZXJSZWN0ID0gc3RhdGUucmVjdHMucG9wcGVyO1xuICB2YXIgdGV0aGVyT2Zmc2V0VmFsdWUgPSB0eXBlb2YgdGV0aGVyT2Zmc2V0ID09PSAnZnVuY3Rpb24nID8gdGV0aGVyT2Zmc2V0KE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLnJlY3RzLCB7XG4gICAgcGxhY2VtZW50OiBzdGF0ZS5wbGFjZW1lbnRcbiAgfSkpIDogdGV0aGVyT2Zmc2V0O1xuICB2YXIgZGF0YSA9IHtcbiAgICB4OiAwLFxuICAgIHk6IDBcbiAgfTtcblxuICBpZiAoIXBvcHBlck9mZnNldHMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoY2hlY2tNYWluQXhpcykge1xuICAgIHZhciBtYWluU2lkZSA9IG1haW5BeGlzID09PSAneScgPyB0b3AgOiBsZWZ0O1xuICAgIHZhciBhbHRTaWRlID0gbWFpbkF4aXMgPT09ICd5JyA/IGJvdHRvbSA6IHJpZ2h0O1xuICAgIHZhciBsZW4gPSBtYWluQXhpcyA9PT0gJ3knID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuICAgIHZhciBvZmZzZXQgPSBwb3BwZXJPZmZzZXRzW21haW5BeGlzXTtcbiAgICB2YXIgbWluID0gcG9wcGVyT2Zmc2V0c1ttYWluQXhpc10gKyBvdmVyZmxvd1ttYWluU2lkZV07XG4gICAgdmFyIG1heCA9IHBvcHBlck9mZnNldHNbbWFpbkF4aXNdIC0gb3ZlcmZsb3dbYWx0U2lkZV07XG4gICAgdmFyIGFkZGl0aXZlID0gdGV0aGVyID8gLXBvcHBlclJlY3RbbGVuXSAvIDIgOiAwO1xuICAgIHZhciBtaW5MZW4gPSB2YXJpYXRpb24gPT09IHN0YXJ0ID8gcmVmZXJlbmNlUmVjdFtsZW5dIDogcG9wcGVyUmVjdFtsZW5dO1xuICAgIHZhciBtYXhMZW4gPSB2YXJpYXRpb24gPT09IHN0YXJ0ID8gLXBvcHBlclJlY3RbbGVuXSA6IC1yZWZlcmVuY2VSZWN0W2xlbl07IC8vIFdlIG5lZWQgdG8gaW5jbHVkZSB0aGUgYXJyb3cgaW4gdGhlIGNhbGN1bGF0aW9uIHNvIHRoZSBhcnJvdyBkb2Vzbid0IGdvXG4gICAgLy8gb3V0c2lkZSB0aGUgcmVmZXJlbmNlIGJvdW5kc1xuXG4gICAgdmFyIGFycm93RWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzLmFycm93O1xuICAgIHZhciBhcnJvd1JlY3QgPSB0ZXRoZXIgJiYgYXJyb3dFbGVtZW50ID8gZ2V0TGF5b3V0UmVjdChhcnJvd0VsZW1lbnQpIDoge1xuICAgICAgd2lkdGg6IDAsXG4gICAgICBoZWlnaHQ6IDBcbiAgICB9O1xuICAgIHZhciBhcnJvd1BhZGRpbmdPYmplY3QgPSBzdGF0ZS5tb2RpZmllcnNEYXRhWydhcnJvdyNwZXJzaXN0ZW50J10gPyBzdGF0ZS5tb2RpZmllcnNEYXRhWydhcnJvdyNwZXJzaXN0ZW50J10ucGFkZGluZyA6IGdldEZyZXNoU2lkZU9iamVjdCgpO1xuICAgIHZhciBhcnJvd1BhZGRpbmdNaW4gPSBhcnJvd1BhZGRpbmdPYmplY3RbbWFpblNpZGVdO1xuICAgIHZhciBhcnJvd1BhZGRpbmdNYXggPSBhcnJvd1BhZGRpbmdPYmplY3RbYWx0U2lkZV07IC8vIElmIHRoZSByZWZlcmVuY2UgbGVuZ3RoIGlzIHNtYWxsZXIgdGhhbiB0aGUgYXJyb3cgbGVuZ3RoLCB3ZSBkb24ndCB3YW50XG4gICAgLy8gdG8gaW5jbHVkZSBpdHMgZnVsbCBzaXplIGluIHRoZSBjYWxjdWxhdGlvbi4gSWYgdGhlIHJlZmVyZW5jZSBpcyBzbWFsbFxuICAgIC8vIGFuZCBuZWFyIHRoZSBlZGdlIG9mIGEgYm91bmRhcnksIHRoZSBwb3BwZXIgY2FuIG92ZXJmbG93IGV2ZW4gaWYgdGhlXG4gICAgLy8gcmVmZXJlbmNlIGlzIG5vdCBvdmVyZmxvd2luZyBhcyB3ZWxsIChlLmcuIHZpcnR1YWwgZWxlbWVudHMgd2l0aCBub1xuICAgIC8vIHdpZHRoIG9yIGhlaWdodClcblxuICAgIHZhciBhcnJvd0xlbiA9IHdpdGhpbigwLCByZWZlcmVuY2VSZWN0W2xlbl0sIGFycm93UmVjdFtsZW5dKTtcbiAgICB2YXIgbWluT2Zmc2V0ID0gaXNCYXNlUGxhY2VtZW50ID8gcmVmZXJlbmNlUmVjdFtsZW5dIC8gMiAtIGFkZGl0aXZlIC0gYXJyb3dMZW4gLSBhcnJvd1BhZGRpbmdNaW4gLSB0ZXRoZXJPZmZzZXRWYWx1ZSA6IG1pbkxlbiAtIGFycm93TGVuIC0gYXJyb3dQYWRkaW5nTWluIC0gdGV0aGVyT2Zmc2V0VmFsdWU7XG4gICAgdmFyIG1heE9mZnNldCA9IGlzQmFzZVBsYWNlbWVudCA/IC1yZWZlcmVuY2VSZWN0W2xlbl0gLyAyICsgYWRkaXRpdmUgKyBhcnJvd0xlbiArIGFycm93UGFkZGluZ01heCArIHRldGhlck9mZnNldFZhbHVlIDogbWF4TGVuICsgYXJyb3dMZW4gKyBhcnJvd1BhZGRpbmdNYXggKyB0ZXRoZXJPZmZzZXRWYWx1ZTtcbiAgICB2YXIgYXJyb3dPZmZzZXRQYXJlbnQgPSBzdGF0ZS5lbGVtZW50cy5hcnJvdyAmJiBnZXRPZmZzZXRQYXJlbnQoc3RhdGUuZWxlbWVudHMuYXJyb3cpO1xuICAgIHZhciBjbGllbnRPZmZzZXQgPSBhcnJvd09mZnNldFBhcmVudCA/IG1haW5BeGlzID09PSAneScgPyBhcnJvd09mZnNldFBhcmVudC5jbGllbnRUb3AgfHwgMCA6IGFycm93T2Zmc2V0UGFyZW50LmNsaWVudExlZnQgfHwgMCA6IDA7XG4gICAgdmFyIG9mZnNldE1vZGlmaWVyVmFsdWUgPSBzdGF0ZS5tb2RpZmllcnNEYXRhLm9mZnNldCA/IHN0YXRlLm1vZGlmaWVyc0RhdGEub2Zmc2V0W3N0YXRlLnBsYWNlbWVudF1bbWFpbkF4aXNdIDogMDtcbiAgICB2YXIgdGV0aGVyTWluID0gcG9wcGVyT2Zmc2V0c1ttYWluQXhpc10gKyBtaW5PZmZzZXQgLSBvZmZzZXRNb2RpZmllclZhbHVlIC0gY2xpZW50T2Zmc2V0O1xuICAgIHZhciB0ZXRoZXJNYXggPSBwb3BwZXJPZmZzZXRzW21haW5BeGlzXSArIG1heE9mZnNldCAtIG9mZnNldE1vZGlmaWVyVmFsdWU7XG4gICAgdmFyIHByZXZlbnRlZE9mZnNldCA9IHdpdGhpbih0ZXRoZXIgPyBNYXRoLm1pbihtaW4sIHRldGhlck1pbikgOiBtaW4sIG9mZnNldCwgdGV0aGVyID8gTWF0aC5tYXgobWF4LCB0ZXRoZXJNYXgpIDogbWF4KTtcbiAgICBwb3BwZXJPZmZzZXRzW21haW5BeGlzXSA9IHByZXZlbnRlZE9mZnNldDtcbiAgICBkYXRhW21haW5BeGlzXSA9IHByZXZlbnRlZE9mZnNldCAtIG9mZnNldDtcbiAgfVxuXG4gIGlmIChjaGVja0FsdEF4aXMpIHtcbiAgICB2YXIgX21haW5TaWRlID0gbWFpbkF4aXMgPT09ICd4JyA/IHRvcCA6IGxlZnQ7XG5cbiAgICB2YXIgX2FsdFNpZGUgPSBtYWluQXhpcyA9PT0gJ3gnID8gYm90dG9tIDogcmlnaHQ7XG5cbiAgICB2YXIgX29mZnNldCA9IHBvcHBlck9mZnNldHNbYWx0QXhpc107XG5cbiAgICB2YXIgX21pbiA9IF9vZmZzZXQgKyBvdmVyZmxvd1tfbWFpblNpZGVdO1xuXG4gICAgdmFyIF9tYXggPSBfb2Zmc2V0IC0gb3ZlcmZsb3dbX2FsdFNpZGVdO1xuXG4gICAgdmFyIF9wcmV2ZW50ZWRPZmZzZXQgPSB3aXRoaW4oX21pbiwgX29mZnNldCwgX21heCk7XG5cbiAgICBwb3BwZXJPZmZzZXRzW2FsdEF4aXNdID0gX3ByZXZlbnRlZE9mZnNldDtcbiAgICBkYXRhW2FsdEF4aXNdID0gX3ByZXZlbnRlZE9mZnNldCAtIF9vZmZzZXQ7XG4gIH1cblxuICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdID0gZGF0YTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbnZhciBwcmV2ZW50T3ZlcmZsb3ckMSA9IHtcbiAgbmFtZTogJ3ByZXZlbnRPdmVyZmxvdycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnbWFpbicsXG4gIGZuOiBwcmV2ZW50T3ZlcmZsb3csXG4gIHJlcXVpcmVzSWZFeGlzdHM6IFsnb2Zmc2V0J11cbn07XG5cbmZ1bmN0aW9uIGFycm93KF9yZWYpIHtcbiAgdmFyIF9zdGF0ZSRtb2RpZmllcnNEYXRhJDtcblxuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgbmFtZSA9IF9yZWYubmFtZTtcbiAgdmFyIGFycm93RWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzLmFycm93O1xuICB2YXIgcG9wcGVyT2Zmc2V0cyA9IHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cztcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHN0YXRlLnBsYWNlbWVudCk7XG4gIHZhciBheGlzID0gZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50KGJhc2VQbGFjZW1lbnQpO1xuICB2YXIgaXNWZXJ0aWNhbCA9IFtsZWZ0LCByaWdodF0uaW5kZXhPZihiYXNlUGxhY2VtZW50KSA+PSAwO1xuICB2YXIgbGVuID0gaXNWZXJ0aWNhbCA/ICdoZWlnaHQnIDogJ3dpZHRoJztcblxuICBpZiAoIWFycm93RWxlbWVudCB8fCAhcG9wcGVyT2Zmc2V0cykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBwYWRkaW5nT2JqZWN0ID0gc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lICsgXCIjcGVyc2lzdGVudFwiXS5wYWRkaW5nO1xuICB2YXIgYXJyb3dSZWN0ID0gZ2V0TGF5b3V0UmVjdChhcnJvd0VsZW1lbnQpO1xuICB2YXIgbWluUHJvcCA9IGF4aXMgPT09ICd5JyA/IHRvcCA6IGxlZnQ7XG4gIHZhciBtYXhQcm9wID0gYXhpcyA9PT0gJ3knID8gYm90dG9tIDogcmlnaHQ7XG4gIHZhciBlbmREaWZmID0gc3RhdGUucmVjdHMucmVmZXJlbmNlW2xlbl0gKyBzdGF0ZS5yZWN0cy5yZWZlcmVuY2VbYXhpc10gLSBwb3BwZXJPZmZzZXRzW2F4aXNdIC0gc3RhdGUucmVjdHMucG9wcGVyW2xlbl07XG4gIHZhciBzdGFydERpZmYgPSBwb3BwZXJPZmZzZXRzW2F4aXNdIC0gc3RhdGUucmVjdHMucmVmZXJlbmNlW2F4aXNdO1xuICB2YXIgYXJyb3dPZmZzZXRQYXJlbnQgPSBnZXRPZmZzZXRQYXJlbnQoYXJyb3dFbGVtZW50KTtcbiAgdmFyIGNsaWVudFNpemUgPSBhcnJvd09mZnNldFBhcmVudCA/IGF4aXMgPT09ICd5JyA/IGFycm93T2Zmc2V0UGFyZW50LmNsaWVudEhlaWdodCB8fCAwIDogYXJyb3dPZmZzZXRQYXJlbnQuY2xpZW50V2lkdGggfHwgMCA6IDA7XG4gIHZhciBjZW50ZXJUb1JlZmVyZW5jZSA9IGVuZERpZmYgLyAyIC0gc3RhcnREaWZmIC8gMjsgLy8gTWFrZSBzdXJlIHRoZSBhcnJvdyBkb2Vzbid0IG92ZXJmbG93IHRoZSBwb3BwZXIgaWYgdGhlIGNlbnRlciBwb2ludCBpc1xuICAvLyBvdXRzaWRlIG9mIHRoZSBwb3BwZXIgYm91bmRzXG5cbiAgdmFyIG1pbiA9IHBhZGRpbmdPYmplY3RbbWluUHJvcF07XG4gIHZhciBtYXggPSBjbGllbnRTaXplIC0gYXJyb3dSZWN0W2xlbl0gLSBwYWRkaW5nT2JqZWN0W21heFByb3BdO1xuICB2YXIgY2VudGVyID0gY2xpZW50U2l6ZSAvIDIgLSBhcnJvd1JlY3RbbGVuXSAvIDIgKyBjZW50ZXJUb1JlZmVyZW5jZTtcbiAgdmFyIG9mZnNldCA9IHdpdGhpbihtaW4sIGNlbnRlciwgbWF4KTsgLy8gUHJldmVudHMgYnJlYWtpbmcgc3ludGF4IGhpZ2hsaWdodGluZy4uLlxuXG4gIHZhciBheGlzUHJvcCA9IGF4aXM7XG4gIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0gPSAoX3N0YXRlJG1vZGlmaWVyc0RhdGEkID0ge30sIF9zdGF0ZSRtb2RpZmllcnNEYXRhJFtheGlzUHJvcF0gPSBvZmZzZXQsIF9zdGF0ZSRtb2RpZmllcnNEYXRhJC5jZW50ZXJPZmZzZXQgPSBvZmZzZXQgLSBjZW50ZXIsIF9zdGF0ZSRtb2RpZmllcnNEYXRhJCk7XG59XG5cbmZ1bmN0aW9uIGVmZmVjdCQyKF9yZWYyKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYyLnN0YXRlLFxuICAgICAgb3B0aW9ucyA9IF9yZWYyLm9wdGlvbnMsXG4gICAgICBuYW1lID0gX3JlZjIubmFtZTtcbiAgdmFyIF9vcHRpb25zJGVsZW1lbnQgPSBvcHRpb25zLmVsZW1lbnQsXG4gICAgICBhcnJvd0VsZW1lbnQgPSBfb3B0aW9ucyRlbGVtZW50ID09PSB2b2lkIDAgPyAnW2RhdGEtcG9wcGVyLWFycm93XScgOiBfb3B0aW9ucyRlbGVtZW50LFxuICAgICAgX29wdGlvbnMkcGFkZGluZyA9IG9wdGlvbnMucGFkZGluZyxcbiAgICAgIHBhZGRpbmcgPSBfb3B0aW9ucyRwYWRkaW5nID09PSB2b2lkIDAgPyAwIDogX29wdGlvbnMkcGFkZGluZztcblxuICBpZiAoYXJyb3dFbGVtZW50ID09IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH0gLy8gQ1NTIHNlbGVjdG9yXG5cblxuICBpZiAodHlwZW9mIGFycm93RWxlbWVudCA9PT0gJ3N0cmluZycpIHtcbiAgICBhcnJvd0VsZW1lbnQgPSBzdGF0ZS5lbGVtZW50cy5wb3BwZXIucXVlcnlTZWxlY3RvcihhcnJvd0VsZW1lbnQpO1xuXG4gICAgaWYgKCFhcnJvd0VsZW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgaWYgKCFpc0hUTUxFbGVtZW50KGFycm93RWxlbWVudCkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoWydQb3BwZXI6IFwiYXJyb3dcIiBlbGVtZW50IG11c3QgYmUgYW4gSFRNTEVsZW1lbnQgKG5vdCBhbiBTVkdFbGVtZW50KS4nLCAnVG8gdXNlIGFuIFNWRyBhcnJvdywgd3JhcCBpdCBpbiBhbiBIVE1MRWxlbWVudCB0aGF0IHdpbGwgYmUgdXNlZCBhcycsICd0aGUgYXJyb3cuJ10uam9pbignICcpKTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWNvbnRhaW5zKHN0YXRlLmVsZW1lbnRzLnBvcHBlciwgYXJyb3dFbGVtZW50KSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoWydQb3BwZXI6IFwiYXJyb3dcIiBtb2RpZmllclxcJ3MgYGVsZW1lbnRgIG11c3QgYmUgYSBjaGlsZCBvZiB0aGUgcG9wcGVyJywgJ2VsZW1lbnQuJ10uam9pbignICcpKTtcbiAgICB9XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBzdGF0ZS5lbGVtZW50cy5hcnJvdyA9IGFycm93RWxlbWVudDtcbiAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lICsgXCIjcGVyc2lzdGVudFwiXSA9IHtcbiAgICBwYWRkaW5nOiBtZXJnZVBhZGRpbmdPYmplY3QodHlwZW9mIHBhZGRpbmcgIT09ICdudW1iZXInID8gcGFkZGluZyA6IGV4cGFuZFRvSGFzaE1hcChwYWRkaW5nLCBiYXNlUGxhY2VtZW50cykpXG4gIH07XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG52YXIgYXJyb3ckMSA9IHtcbiAgbmFtZTogJ2Fycm93JyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdtYWluJyxcbiAgZm46IGFycm93LFxuICBlZmZlY3Q6IGVmZmVjdCQyLFxuICByZXF1aXJlczogWydwb3BwZXJPZmZzZXRzJ10sXG4gIHJlcXVpcmVzSWZFeGlzdHM6IFsncHJldmVudE92ZXJmbG93J11cbn07XG5cbmZ1bmN0aW9uIGdldFNpZGVPZmZzZXRzKG92ZXJmbG93LCByZWN0LCBwcmV2ZW50ZWRPZmZzZXRzKSB7XG4gIGlmIChwcmV2ZW50ZWRPZmZzZXRzID09PSB2b2lkIDApIHtcbiAgICBwcmV2ZW50ZWRPZmZzZXRzID0ge1xuICAgICAgeDogMCxcbiAgICAgIHk6IDBcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0b3A6IG92ZXJmbG93LnRvcCAtIHJlY3QuaGVpZ2h0IC0gcHJldmVudGVkT2Zmc2V0cy55LFxuICAgIHJpZ2h0OiBvdmVyZmxvdy5yaWdodCAtIHJlY3Qud2lkdGggKyBwcmV2ZW50ZWRPZmZzZXRzLngsXG4gICAgYm90dG9tOiBvdmVyZmxvdy5ib3R0b20gLSByZWN0LmhlaWdodCArIHByZXZlbnRlZE9mZnNldHMueSxcbiAgICBsZWZ0OiBvdmVyZmxvdy5sZWZ0IC0gcmVjdC53aWR0aCAtIHByZXZlbnRlZE9mZnNldHMueFxuICB9O1xufVxuXG5mdW5jdGlvbiBpc0FueVNpZGVGdWxseUNsaXBwZWQob3ZlcmZsb3cpIHtcbiAgcmV0dXJuIFt0b3AsIHJpZ2h0LCBib3R0b20sIGxlZnRdLnNvbWUoZnVuY3Rpb24gKHNpZGUpIHtcbiAgICByZXR1cm4gb3ZlcmZsb3dbc2lkZV0gPj0gMDtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGhpZGUoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgbmFtZSA9IF9yZWYubmFtZTtcbiAgdmFyIHJlZmVyZW5jZVJlY3QgPSBzdGF0ZS5yZWN0cy5yZWZlcmVuY2U7XG4gIHZhciBwb3BwZXJSZWN0ID0gc3RhdGUucmVjdHMucG9wcGVyO1xuICB2YXIgcHJldmVudGVkT2Zmc2V0cyA9IHN0YXRlLm1vZGlmaWVyc0RhdGEucHJldmVudE92ZXJmbG93O1xuICB2YXIgcmVmZXJlbmNlT3ZlcmZsb3cgPSBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwge1xuICAgIGVsZW1lbnRDb250ZXh0OiAncmVmZXJlbmNlJ1xuICB9KTtcbiAgdmFyIHBvcHBlckFsdE92ZXJmbG93ID0gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIHtcbiAgICBhbHRCb3VuZGFyeTogdHJ1ZVxuICB9KTtcbiAgdmFyIHJlZmVyZW5jZUNsaXBwaW5nT2Zmc2V0cyA9IGdldFNpZGVPZmZzZXRzKHJlZmVyZW5jZU92ZXJmbG93LCByZWZlcmVuY2VSZWN0KTtcbiAgdmFyIHBvcHBlckVzY2FwZU9mZnNldHMgPSBnZXRTaWRlT2Zmc2V0cyhwb3BwZXJBbHRPdmVyZmxvdywgcG9wcGVyUmVjdCwgcHJldmVudGVkT2Zmc2V0cyk7XG4gIHZhciBpc1JlZmVyZW5jZUhpZGRlbiA9IGlzQW55U2lkZUZ1bGx5Q2xpcHBlZChyZWZlcmVuY2VDbGlwcGluZ09mZnNldHMpO1xuICB2YXIgaGFzUG9wcGVyRXNjYXBlZCA9IGlzQW55U2lkZUZ1bGx5Q2xpcHBlZChwb3BwZXJFc2NhcGVPZmZzZXRzKTtcbiAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXSA9IHtcbiAgICByZWZlcmVuY2VDbGlwcGluZ09mZnNldHM6IHJlZmVyZW5jZUNsaXBwaW5nT2Zmc2V0cyxcbiAgICBwb3BwZXJFc2NhcGVPZmZzZXRzOiBwb3BwZXJFc2NhcGVPZmZzZXRzLFxuICAgIGlzUmVmZXJlbmNlSGlkZGVuOiBpc1JlZmVyZW5jZUhpZGRlbixcbiAgICBoYXNQb3BwZXJFc2NhcGVkOiBoYXNQb3BwZXJFc2NhcGVkXG4gIH07XG4gIHN0YXRlLmF0dHJpYnV0ZXMucG9wcGVyID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUuYXR0cmlidXRlcy5wb3BwZXIsIHtcbiAgICAnZGF0YS1wb3BwZXItcmVmZXJlbmNlLWhpZGRlbic6IGlzUmVmZXJlbmNlSGlkZGVuLFxuICAgICdkYXRhLXBvcHBlci1lc2NhcGVkJzogaGFzUG9wcGVyRXNjYXBlZFxuICB9KTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbnZhciBoaWRlJDEgPSB7XG4gIG5hbWU6ICdoaWRlJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdtYWluJyxcbiAgcmVxdWlyZXNJZkV4aXN0czogWydwcmV2ZW50T3ZlcmZsb3cnXSxcbiAgZm46IGhpZGVcbn07XG5cbnZhciBkZWZhdWx0TW9kaWZpZXJzID0gW2V2ZW50TGlzdGVuZXJzLCBwb3BwZXJPZmZzZXRzJDEsIGNvbXB1dGVTdHlsZXMkMSwgYXBwbHlTdHlsZXMkMSwgb2Zmc2V0JDEsIGZsaXAkMSwgcHJldmVudE92ZXJmbG93JDEsIGFycm93JDEsIGhpZGUkMV07XG52YXIgY3JlYXRlUG9wcGVyID0gLyojX19QVVJFX18qL3BvcHBlckdlbmVyYXRvcih7XG4gIGRlZmF1bHRNb2RpZmllcnM6IGRlZmF1bHRNb2RpZmllcnNcbn0pOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbmV4cG9ydHMuY3JlYXRlUG9wcGVyID0gY3JlYXRlUG9wcGVyO1xuZXhwb3J0cy5kZWZhdWx0TW9kaWZpZXJzID0gZGVmYXVsdE1vZGlmaWVycztcbmV4cG9ydHMuZGV0ZWN0T3ZlcmZsb3cgPSBkZXRlY3RPdmVyZmxvdztcbmV4cG9ydHMucG9wcGVyR2VuZXJhdG9yID0gcG9wcGVyR2VuZXJhdG9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cG9wcGVyLmpzLm1hcFxuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxudmFyIHJ1bnRpbWUgPSAoZnVuY3Rpb24gKGV4cG9ydHMpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBleHBvcnRzLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBJdGVyYXRvclByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZVt0b1N0cmluZ1RhZ1N5bWJvbF0gPVxuICAgIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIHByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIGV4cG9ydHMubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgaWYgKCEodG9TdHJpbmdUYWdTeW1ib2wgaW4gZ2VuRnVuKSkge1xuICAgICAgICBnZW5GdW5bdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuICAgICAgfVxuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIilgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLlxuICBleHBvcnRzLmF3cmFwID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IsIFByb21pc2VJbXBsKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJuZXh0XCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIC8vIElmIGEgcmVqZWN0ZWQgUHJvbWlzZSB3YXMgeWllbGRlZCwgdGhyb3cgdGhlIHJlamVjdGlvbiBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIHNvIGl0IGNhbiBiZSBoYW5kbGVkIHRoZXJlLlxuICAgICAgICAgIHJldHVybiBpbnZva2UoXCJ0aHJvd1wiLCBlcnJvciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2VJbXBsKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPVxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxuICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXG4gICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XG4gICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsXG4gICAgICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmdcbiAgICAgICAgKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcbiAgQXN5bmNJdGVyYXRvci5wcm90b3R5cGVbYXN5bmNJdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIGV4cG9ydHMuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIGV4cG9ydHMuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCwgUHJvbWlzZUltcGwpIHtcbiAgICBpZiAoUHJvbWlzZUltcGwgPT09IHZvaWQgMCkgUHJvbWlzZUltcGwgPSBQcm9taXNlO1xuXG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpLFxuICAgICAgUHJvbWlzZUltcGxcbiAgICApO1xuXG4gICAgcmV0dXJuIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKVxuICAgICAgPyBpdGVyIC8vIElmIG91dGVyRm4gaXMgYSBnZW5lcmF0b3IsIHJldHVybiB0aGUgZnVsbCBpdGVyYXRvci5cbiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcbiAgICAgICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkge1xuICAgICAgICBpZiAobWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICB0aHJvdyBhcmc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCZSBmb3JnaXZpbmcsIHBlciAyNS4zLjMuMy4zIG9mIHRoZSBzcGVjOlxuICAgICAgICAvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtZ2VuZXJhdG9ycmVzdW1lXG4gICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQubWV0aG9kID0gbWV0aG9kO1xuICAgICAgY29udGV4dC5hcmcgPSBhcmc7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0ID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZVJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgLy8gU2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgICBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0KSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgICAgdGhyb3cgY29udGV4dC5hcmc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGNvbnRleHQuYXJnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlID0gR2VuU3RhdGVFeGVjdXRpbmc7XG5cbiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIpIHtcbiAgICAgICAgICAvLyBJZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGZyb20gaW5uZXJGbiwgd2UgbGVhdmUgc3RhdGUgPT09XG4gICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLlxuICAgICAgICAgIHN0YXRlID0gY29udGV4dC5kb25lXG4gICAgICAgICAgICA/IEdlblN0YXRlQ29tcGxldGVkXG4gICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XG5cbiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXG4gICAgICAgICAgfTtcblxuICAgICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgIC8vIERpc3BhdGNoIHRoZSBleGNlcHRpb24gYnkgbG9vcGluZyBiYWNrIGFyb3VuZCB0byB0aGVcbiAgICAgICAgICAvLyBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKSBjYWxsIGFib3ZlLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBDYWxsIGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXShjb250ZXh0LmFyZykgYW5kIGhhbmRsZSB0aGVcbiAgLy8gcmVzdWx0LCBlaXRoZXIgYnkgcmV0dXJuaW5nIGEgeyB2YWx1ZSwgZG9uZSB9IHJlc3VsdCBmcm9tIHRoZVxuICAvLyBkZWxlZ2F0ZSBpdGVyYXRvciwgb3IgYnkgbW9kaWZ5aW5nIGNvbnRleHQubWV0aG9kIGFuZCBjb250ZXh0LmFyZyxcbiAgLy8gc2V0dGluZyBjb250ZXh0LmRlbGVnYXRlIHRvIG51bGwsIGFuZCByZXR1cm5pbmcgdGhlIENvbnRpbnVlU2VudGluZWwuXG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdO1xuICAgIGlmIChtZXRob2QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQSAudGhyb3cgb3IgLnJldHVybiB3aGVuIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgbm8gLnRocm93XG4gICAgICAvLyBtZXRob2QgYWx3YXlzIHRlcm1pbmF0ZXMgdGhlIHlpZWxkKiBsb29wLlxuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIC8vIE5vdGU6IFtcInJldHVyblwiXSBtdXN0IGJlIHVzZWQgZm9yIEVTMyBwYXJzaW5nIGNvbXBhdGliaWxpdHkuXG4gICAgICAgIGlmIChkZWxlZ2F0ZS5pdGVyYXRvcltcInJldHVyblwiXSkge1xuICAgICAgICAgIC8vIElmIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgYSByZXR1cm4gbWV0aG9kLCBnaXZlIGl0IGFcbiAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIC8vIElmIG1heWJlSW52b2tlRGVsZWdhdGUoY29udGV4dCkgY2hhbmdlZCBjb250ZXh0Lm1ldGhvZCBmcm9tXG4gICAgICAgICAgICAvLyBcInJldHVyblwiIHRvIFwidGhyb3dcIiwgbGV0IHRoYXQgb3ZlcnJpZGUgdGhlIFR5cGVFcnJvciBiZWxvdy5cbiAgICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gobWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgY29udGV4dC5hcmcpO1xuXG4gICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7XG5cbiAgICBpZiAoISBpbmZvKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAvLyBBc3NpZ24gdGhlIHJlc3VsdCBvZiB0aGUgZmluaXNoZWQgZGVsZWdhdGUgdG8gdGhlIHRlbXBvcmFyeVxuICAgICAgLy8gdmFyaWFibGUgc3BlY2lmaWVkIGJ5IGRlbGVnYXRlLnJlc3VsdE5hbWUgKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlO1xuXG4gICAgICAvLyBSZXN1bWUgZXhlY3V0aW9uIGF0IHRoZSBkZXNpcmVkIGxvY2F0aW9uIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jO1xuXG4gICAgICAvLyBJZiBjb250ZXh0Lm1ldGhvZCB3YXMgXCJ0aHJvd1wiIGJ1dCB0aGUgZGVsZWdhdGUgaGFuZGxlZCB0aGVcbiAgICAgIC8vIGV4Y2VwdGlvbiwgbGV0IHRoZSBvdXRlciBnZW5lcmF0b3IgcHJvY2VlZCBub3JtYWxseS4gSWZcbiAgICAgIC8vIGNvbnRleHQubWV0aG9kIHdhcyBcIm5leHRcIiwgZm9yZ2V0IGNvbnRleHQuYXJnIHNpbmNlIGl0IGhhcyBiZWVuXG4gICAgICAvLyBcImNvbnN1bWVkXCIgYnkgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yLiBJZiBjb250ZXh0Lm1ldGhvZCB3YXNcbiAgICAgIC8vIFwicmV0dXJuXCIsIGFsbG93IHRoZSBvcmlnaW5hbCAucmV0dXJuIGNhbGwgdG8gY29udGludWUgaW4gdGhlXG4gICAgICAvLyBvdXRlciBnZW5lcmF0b3IuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgIT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmUteWllbGQgdGhlIHJlc3VsdCByZXR1cm5lZCBieSB0aGUgZGVsZWdhdGUgbWV0aG9kLlxuICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxuXG4gICAgLy8gVGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGlzIGZpbmlzaGVkLCBzbyBmb3JnZXQgaXQgYW5kIGNvbnRpbnVlIHdpdGhcbiAgICAvLyB0aGUgb3V0ZXIgZ2VuZXJhdG9yLlxuICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICB9XG5cbiAgLy8gRGVmaW5lIEdlbmVyYXRvci5wcm90b3R5cGUue25leHQsdGhyb3cscmV0dXJufSBpbiB0ZXJtcyBvZiB0aGVcbiAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLlxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApO1xuXG4gIEdwW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yXCI7XG5cbiAgLy8gQSBHZW5lcmF0b3Igc2hvdWxkIGFsd2F5cyByZXR1cm4gaXRzZWxmIGFzIHRoZSBpdGVyYXRvciBvYmplY3Qgd2hlbiB0aGVcbiAgLy8gQEBpdGVyYXRvciBmdW5jdGlvbiBpcyBjYWxsZWQgb24gaXQuIFNvbWUgYnJvd3NlcnMnIGltcGxlbWVudGF0aW9ucyBvZiB0aGVcbiAgLy8gaXRlcmF0b3IgcHJvdG90eXBlIGNoYWluIGluY29ycmVjdGx5IGltcGxlbWVudCB0aGlzLCBjYXVzaW5nIHRoZSBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0IHRvIG5vdCBiZSByZXR1cm5lZCBmcm9tIHRoaXMgY2FsbC4gVGhpcyBlbnN1cmVzIHRoYXQgZG9lc24ndCBoYXBwZW4uXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvaXNzdWVzLzI3NCBmb3IgbW9yZSBkZXRhaWxzLlxuICBHcFtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBHcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTtcblxuICAgIGlmICgxIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoMiBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXTtcbiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTtcbiAgICB9XG5cbiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiO1xuICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xuICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoXG4gICAgLy8gb3IgYSBmaW5hbGx5IGJsb2NrKSBnaXZlcyB1cyBhIHBsYWNlIHRvIHN0b3JlIHZhbHVlcyB0aHJvd24gZnJvbVxuICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6IFwicm9vdFwiIH1dO1xuICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTtcbiAgICB0aGlzLnJlc2V0KHRydWUpO1xuICB9XG5cbiAgZXhwb3J0cy5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAga2V5cy5yZXZlcnNlKCk7XG5cbiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcFxuICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWVcbiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzXG4gICAgICAvLyBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgbWluaWZpZXIgd2lsbCBub3QgYW5vbnltaXplIHRoZSBmdW5jdGlvbi5cbiAgICAgIG5leHQuZG9uZSA9IHRydWU7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYW4gaXRlcmF0b3Igd2l0aCBubyB2YWx1ZXMuXG4gICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O1xuICB9XG4gIGV4cG9ydHMudmFsdWVzID0gdmFsdWVzO1xuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG5cbiAgICByZXNldDogZnVuY3Rpb24oc2tpcFRlbXBSZXNldCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICAvLyBSZXNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcblxuICAgICAgICBpZiAoY2F1Z2h0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jayxcbiAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISEgY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG5cbiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpO1xuICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24odHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uXG4gICAgICAvLyBhcmd1bWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEga25vd24gY2F0Y2ggYmxvY2suXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcblxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSxcbiAgICAgICAgbmV4dExvYzogbmV4dExvY1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH07XG5cbiAgLy8gUmVnYXJkbGVzcyBvZiB3aGV0aGVyIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZVxuICAvLyBvciBub3QsIHJldHVybiB0aGUgcnVudGltZSBvYmplY3Qgc28gdGhhdCB3ZSBjYW4gZGVjbGFyZSB0aGUgdmFyaWFibGVcbiAgLy8gcmVnZW5lcmF0b3JSdW50aW1lIGluIHRoZSBvdXRlciBzY29wZSwgd2hpY2ggYWxsb3dzIHRoaXMgbW9kdWxlIHRvIGJlXG4gIC8vIGluamVjdGVkIGVhc2lseSBieSBgYmluL3JlZ2VuZXJhdG9yIC0taW5jbHVkZS1ydW50aW1lIHNjcmlwdC5qc2AuXG4gIHJldHVybiBleHBvcnRzO1xuXG59KFxuICAvLyBJZiB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGUsIHVzZSBtb2R1bGUuZXhwb3J0c1xuICAvLyBhcyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIG5hbWVzcGFjZS4gT3RoZXJ3aXNlIGNyZWF0ZSBhIG5ldyBlbXB0eVxuICAvLyBvYmplY3QuIEVpdGhlciB3YXksIHRoZSByZXN1bHRpbmcgb2JqZWN0IHdpbGwgYmUgdXNlZCB0byBpbml0aWFsaXplXG4gIC8vIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgdmFyaWFibGUgYXQgdGhlIHRvcCBvZiB0aGlzIGZpbGUuXG4gIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgPyBtb2R1bGUuZXhwb3J0cyA6IHt9XG4pKTtcblxudHJ5IHtcbiAgcmVnZW5lcmF0b3JSdW50aW1lID0gcnVudGltZTtcbn0gY2F0Y2ggKGFjY2lkZW50YWxTdHJpY3RNb2RlKSB7XG4gIC8vIFRoaXMgbW9kdWxlIHNob3VsZCBub3QgYmUgcnVubmluZyBpbiBzdHJpY3QgbW9kZSwgc28gdGhlIGFib3ZlXG4gIC8vIGFzc2lnbm1lbnQgc2hvdWxkIGFsd2F5cyB3b3JrIHVubGVzcyBzb21ldGhpbmcgaXMgbWlzY29uZmlndXJlZC4gSnVzdFxuICAvLyBpbiBjYXNlIHJ1bnRpbWUuanMgYWNjaWRlbnRhbGx5IHJ1bnMgaW4gc3RyaWN0IG1vZGUsIHdlIGNhbiBlc2NhcGVcbiAgLy8gc3RyaWN0IG1vZGUgdXNpbmcgYSBnbG9iYWwgRnVuY3Rpb24gY2FsbC4gVGhpcyBjb3VsZCBjb25jZWl2YWJseSBmYWlsXG4gIC8vIGlmIGEgQ29udGVudCBTZWN1cml0eSBQb2xpY3kgZm9yYmlkcyB1c2luZyBGdW5jdGlvbiwgYnV0IGluIHRoYXQgY2FzZVxuICAvLyB0aGUgcHJvcGVyIHNvbHV0aW9uIGlzIHRvIGZpeCB0aGUgYWNjaWRlbnRhbCBzdHJpY3QgbW9kZSBwcm9ibGVtLiBJZlxuICAvLyB5b3UndmUgbWlzY29uZmlndXJlZCB5b3VyIGJ1bmRsZXIgdG8gZm9yY2Ugc3RyaWN0IG1vZGUgYW5kIGFwcGxpZWQgYVxuICAvLyBDU1AgdG8gZm9yYmlkIEZ1bmN0aW9uLCBhbmQgeW91J3JlIG5vdCB3aWxsaW5nIHRvIGZpeCBlaXRoZXIgb2YgdGhvc2VcbiAgLy8gcHJvYmxlbXMsIHBsZWFzZSBkZXRhaWwgeW91ciB1bmlxdWUgcHJlZGljYW1lbnQgaW4gYSBHaXRIdWIgaXNzdWUuXG4gIEZ1bmN0aW9uKFwiclwiLCBcInJlZ2VuZXJhdG9yUnVudGltZSA9IHJcIikocnVudGltZSk7XG59XG4iLCIvKiohXG4qIHRpcHB5LmpzIHY2LjEuMFxuKiAoYykgMjAxNy0yMDIwIGF0b21pa3NcbiogTUlUIExpY2Vuc2VcbiovXG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbnZhciBjb3JlID0gcmVxdWlyZSgnQHBvcHBlcmpzL2NvcmUnKTtcblxudmFyIFBBU1NJVkUgPSB7XG4gIHBhc3NpdmU6IHRydWVcbn07XG52YXIgUk9VTkRfQVJST1cgPSAnPHN2ZyB3aWR0aD1cIjE2XCIgaGVpZ2h0PVwiNlwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj48cGF0aCBkPVwiTTAgNnMxLjc5Ni0uMDEzIDQuNjctMy42MTVDNS44NTEuOSA2LjkzLjAwNiA4IDBjMS4wNy0uMDA2IDIuMTQ4Ljg4NyAzLjM0MyAyLjM4NUMxNC4yMzMgNi4wMDUgMTYgNiAxNiA2SDB6XCI+PC9zdmc+JztcbnZhciBJT1NfQ0xBU1MgPSBcInRpcHB5LWlPU1wiO1xudmFyIEJPWF9DTEFTUyA9IFwidGlwcHktYm94XCI7XG52YXIgQ09OVEVOVF9DTEFTUyA9IFwidGlwcHktY29udGVudFwiO1xudmFyIEJBQ0tEUk9QX0NMQVNTID0gXCJ0aXBweS1iYWNrZHJvcFwiO1xudmFyIEFSUk9XX0NMQVNTID0gXCJ0aXBweS1hcnJvd1wiO1xudmFyIFNWR19BUlJPV19DTEFTUyA9IFwidGlwcHktc3ZnLWFycm93XCI7XG5cbmZ1bmN0aW9uIGhhc093blByb3BlcnR5KG9iaiwga2V5KSB7XG4gIHJldHVybiB7fS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KTtcbn1cbmZ1bmN0aW9uIGdldFZhbHVlQXRJbmRleE9yUmV0dXJuKHZhbHVlLCBpbmRleCwgZGVmYXVsdFZhbHVlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHZhciB2ID0gdmFsdWVbaW5kZXhdO1xuICAgIHJldHVybiB2ID09IG51bGwgPyBBcnJheS5pc0FycmF5KGRlZmF1bHRWYWx1ZSkgPyBkZWZhdWx0VmFsdWVbaW5kZXhdIDogZGVmYXVsdFZhbHVlIDogdjtcbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIGlzVHlwZSh2YWx1ZSwgdHlwZSkge1xuICB2YXIgc3RyID0ge30udG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIHJldHVybiBzdHIuaW5kZXhPZignW29iamVjdCcpID09PSAwICYmIHN0ci5pbmRleE9mKHR5cGUgKyBcIl1cIikgPiAtMTtcbn1cbmZ1bmN0aW9uIGludm9rZVdpdGhBcmdzT3JSZXR1cm4odmFsdWUsIGFyZ3MpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLmFwcGx5KHZvaWQgMCwgYXJncykgOiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIGRlYm91bmNlKGZuLCBtcykge1xuICAvLyBBdm9pZCB3cmFwcGluZyBpbiBgc2V0VGltZW91dGAgaWYgbXMgaXMgMCBhbnl3YXlcbiAgaWYgKG1zID09PSAwKSB7XG4gICAgcmV0dXJuIGZuO1xuICB9XG5cbiAgdmFyIHRpbWVvdXQ7XG4gIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGZuKGFyZyk7XG4gICAgfSwgbXMpO1xuICB9O1xufVxuZnVuY3Rpb24gcmVtb3ZlUHJvcGVydGllcyhvYmosIGtleXMpIHtcbiAgdmFyIGNsb25lID0gT2JqZWN0LmFzc2lnbih7fSwgb2JqKTtcbiAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBkZWxldGUgY2xvbmVba2V5XTtcbiAgfSk7XG4gIHJldHVybiBjbG9uZTtcbn1cbmZ1bmN0aW9uIHNwbGl0QnlTcGFjZXModmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlLnNwbGl0KC9cXHMrLykuZmlsdGVyKEJvb2xlYW4pO1xufVxuZnVuY3Rpb24gbm9ybWFsaXplVG9BcnJheSh2YWx1ZSkge1xuICByZXR1cm4gW10uY29uY2F0KHZhbHVlKTtcbn1cbmZ1bmN0aW9uIHB1c2hJZlVuaXF1ZShhcnIsIHZhbHVlKSB7XG4gIGlmIChhcnIuaW5kZXhPZih2YWx1ZSkgPT09IC0xKSB7XG4gICAgYXJyLnB1c2godmFsdWUpO1xuICB9XG59XG5mdW5jdGlvbiB1bmlxdWUoYXJyKSB7XG4gIHJldHVybiBhcnIuZmlsdGVyKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xuICAgIHJldHVybiBhcnIuaW5kZXhPZihpdGVtKSA9PT0gaW5kZXg7XG4gIH0pO1xufVxuZnVuY3Rpb24gZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xufVxuZnVuY3Rpb24gYXJyYXlGcm9tKHZhbHVlKSB7XG4gIHJldHVybiBbXS5zbGljZS5jYWxsKHZhbHVlKTtcbn1cblxuZnVuY3Rpb24gZGl2KCkge1xuICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG59XG5mdW5jdGlvbiBpc0VsZW1lbnQodmFsdWUpIHtcbiAgcmV0dXJuIGlzVHlwZSh2YWx1ZSwgJ0VsZW1lbnQnKTtcbn1cbmZ1bmN0aW9uIGlzTm9kZUxpc3QodmFsdWUpIHtcbiAgcmV0dXJuIGlzVHlwZSh2YWx1ZSwgJ05vZGVMaXN0Jyk7XG59XG5mdW5jdGlvbiBpc01vdXNlRXZlbnQodmFsdWUpIHtcbiAgcmV0dXJuIGlzVHlwZSh2YWx1ZSwgJ01vdXNlRXZlbnQnKTtcbn1cbmZ1bmN0aW9uIGlzUmVmZXJlbmNlRWxlbWVudCh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX3RpcHB5ICYmIHZhbHVlLl90aXBweS5yZWZlcmVuY2UgPT09IHZhbHVlKTtcbn1cbmZ1bmN0aW9uIGdldEFycmF5T2ZFbGVtZW50cyh2YWx1ZSkge1xuICBpZiAoaXNFbGVtZW50KHZhbHVlKSkge1xuICAgIHJldHVybiBbdmFsdWVdO1xuICB9XG5cbiAgaWYgKGlzTm9kZUxpc3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIGFycmF5RnJvbSh2YWx1ZSk7XG4gIH1cblxuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gYXJyYXlGcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodmFsdWUpKTtcbn1cbmZ1bmN0aW9uIHNldFRyYW5zaXRpb25EdXJhdGlvbihlbHMsIHZhbHVlKSB7XG4gIGVscy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgIGlmIChlbCkge1xuICAgICAgZWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gdmFsdWUgKyBcIm1zXCI7XG4gICAgfVxuICB9KTtcbn1cbmZ1bmN0aW9uIHNldFZpc2liaWxpdHlTdGF0ZShlbHMsIHN0YXRlKSB7XG4gIGVscy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgIGlmIChlbCkge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKCdkYXRhLXN0YXRlJywgc3RhdGUpO1xuICAgIH1cbiAgfSk7XG59XG5mdW5jdGlvbiBnZXRPd25lckRvY3VtZW50KGVsZW1lbnRPckVsZW1lbnRzKSB7XG4gIHZhciBfbm9ybWFsaXplVG9BcnJheSA9IG5vcm1hbGl6ZVRvQXJyYXkoZWxlbWVudE9yRWxlbWVudHMpLFxuICAgICAgZWxlbWVudCA9IF9ub3JtYWxpemVUb0FycmF5WzBdO1xuXG4gIHJldHVybiBlbGVtZW50ID8gZWxlbWVudC5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50IDogZG9jdW1lbnQ7XG59XG5mdW5jdGlvbiBpc0N1cnNvck91dHNpZGVJbnRlcmFjdGl2ZUJvcmRlcihwb3BwZXJUcmVlRGF0YSwgZXZlbnQpIHtcbiAgdmFyIGNsaWVudFggPSBldmVudC5jbGllbnRYLFxuICAgICAgY2xpZW50WSA9IGV2ZW50LmNsaWVudFk7XG4gIHJldHVybiBwb3BwZXJUcmVlRGF0YS5ldmVyeShmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBwb3BwZXJSZWN0ID0gX3JlZi5wb3BwZXJSZWN0LFxuICAgICAgICBwb3BwZXJTdGF0ZSA9IF9yZWYucG9wcGVyU3RhdGUsXG4gICAgICAgIHByb3BzID0gX3JlZi5wcm9wcztcbiAgICB2YXIgaW50ZXJhY3RpdmVCb3JkZXIgPSBwcm9wcy5pbnRlcmFjdGl2ZUJvcmRlcjtcbiAgICB2YXIgYmFzZVBsYWNlbWVudCA9IGdldEJhc2VQbGFjZW1lbnQocG9wcGVyU3RhdGUucGxhY2VtZW50KTtcbiAgICB2YXIgb2Zmc2V0RGF0YSA9IHBvcHBlclN0YXRlLm1vZGlmaWVyc0RhdGEub2Zmc2V0O1xuXG4gICAgaWYgKCFvZmZzZXREYXRhKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgdG9wRGlzdGFuY2UgPSBiYXNlUGxhY2VtZW50ID09PSAnYm90dG9tJyA/IG9mZnNldERhdGEudG9wLnkgOiAwO1xuICAgIHZhciBib3R0b21EaXN0YW5jZSA9IGJhc2VQbGFjZW1lbnQgPT09ICd0b3AnID8gb2Zmc2V0RGF0YS5ib3R0b20ueSA6IDA7XG4gICAgdmFyIGxlZnREaXN0YW5jZSA9IGJhc2VQbGFjZW1lbnQgPT09ICdyaWdodCcgPyBvZmZzZXREYXRhLmxlZnQueCA6IDA7XG4gICAgdmFyIHJpZ2h0RGlzdGFuY2UgPSBiYXNlUGxhY2VtZW50ID09PSAnbGVmdCcgPyBvZmZzZXREYXRhLnJpZ2h0LnggOiAwO1xuICAgIHZhciBleGNlZWRzVG9wID0gcG9wcGVyUmVjdC50b3AgLSBjbGllbnRZICsgdG9wRGlzdGFuY2UgPiBpbnRlcmFjdGl2ZUJvcmRlcjtcbiAgICB2YXIgZXhjZWVkc0JvdHRvbSA9IGNsaWVudFkgLSBwb3BwZXJSZWN0LmJvdHRvbSAtIGJvdHRvbURpc3RhbmNlID4gaW50ZXJhY3RpdmVCb3JkZXI7XG4gICAgdmFyIGV4Y2VlZHNMZWZ0ID0gcG9wcGVyUmVjdC5sZWZ0IC0gY2xpZW50WCArIGxlZnREaXN0YW5jZSA+IGludGVyYWN0aXZlQm9yZGVyO1xuICAgIHZhciBleGNlZWRzUmlnaHQgPSBjbGllbnRYIC0gcG9wcGVyUmVjdC5yaWdodCAtIHJpZ2h0RGlzdGFuY2UgPiBpbnRlcmFjdGl2ZUJvcmRlcjtcbiAgICByZXR1cm4gZXhjZWVkc1RvcCB8fCBleGNlZWRzQm90dG9tIHx8IGV4Y2VlZHNMZWZ0IHx8IGV4Y2VlZHNSaWdodDtcbiAgfSk7XG59XG5mdW5jdGlvbiB1cGRhdGVUcmFuc2l0aW9uRW5kTGlzdGVuZXIoYm94LCBhY3Rpb24sIGxpc3RlbmVyKSB7XG4gIHZhciBtZXRob2QgPSBhY3Rpb24gKyBcIkV2ZW50TGlzdGVuZXJcIjsgLy8gc29tZSBicm93c2VycyBhcHBhcmVudGx5IHN1cHBvcnQgYHRyYW5zaXRpb25gICh1bnByZWZpeGVkKSBidXQgb25seSBmaXJlXG4gIC8vIGB3ZWJraXRUcmFuc2l0aW9uRW5kYC4uLlxuXG4gIFsndHJhbnNpdGlvbmVuZCcsICd3ZWJraXRUcmFuc2l0aW9uRW5kJ10uZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBib3hbbWV0aG9kXShldmVudCwgbGlzdGVuZXIpO1xuICB9KTtcbn1cblxudmFyIGN1cnJlbnRJbnB1dCA9IHtcbiAgaXNUb3VjaDogZmFsc2Vcbn07XG52YXIgbGFzdE1vdXNlTW92ZVRpbWUgPSAwO1xuLyoqXG4gKiBXaGVuIGEgYHRvdWNoc3RhcnRgIGV2ZW50IGlzIGZpcmVkLCBpdCdzIGFzc3VtZWQgdGhlIHVzZXIgaXMgdXNpbmcgdG91Y2hcbiAqIGlucHV0LiBXZSdsbCBiaW5kIGEgYG1vdXNlbW92ZWAgZXZlbnQgbGlzdGVuZXIgdG8gbGlzdGVuIGZvciBtb3VzZSBpbnB1dCBpblxuICogdGhlIGZ1dHVyZS4gVGhpcyB3YXksIHRoZSBgaXNUb3VjaGAgcHJvcGVydHkgaXMgZnVsbHkgZHluYW1pYyBhbmQgd2lsbCBoYW5kbGVcbiAqIGh5YnJpZCBkZXZpY2VzIHRoYXQgdXNlIGEgbWl4IG9mIHRvdWNoICsgbW91c2UgaW5wdXQuXG4gKi9cblxuZnVuY3Rpb24gb25Eb2N1bWVudFRvdWNoU3RhcnQoKSB7XG4gIGlmIChjdXJyZW50SW5wdXQuaXNUb3VjaCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGN1cnJlbnRJbnB1dC5pc1RvdWNoID0gdHJ1ZTtcblxuICBpZiAod2luZG93LnBlcmZvcm1hbmNlKSB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgb25Eb2N1bWVudE1vdXNlTW92ZSk7XG4gIH1cbn1cbi8qKlxuICogV2hlbiB0d28gYG1vdXNlbW92ZWAgZXZlbnQgYXJlIGZpcmVkIGNvbnNlY3V0aXZlbHkgd2l0aGluIDIwbXMsIGl0J3MgYXNzdW1lZFxuICogdGhlIHVzZXIgaXMgdXNpbmcgbW91c2UgaW5wdXQgYWdhaW4uIGBtb3VzZW1vdmVgIGNhbiBmaXJlIG9uIHRvdWNoIGRldmljZXMgYXNcbiAqIHdlbGwsIGJ1dCB2ZXJ5IHJhcmVseSB0aGF0IHF1aWNrbHkuXG4gKi9cblxuZnVuY3Rpb24gb25Eb2N1bWVudE1vdXNlTW92ZSgpIHtcbiAgdmFyIG5vdyA9IHBlcmZvcm1hbmNlLm5vdygpO1xuXG4gIGlmIChub3cgLSBsYXN0TW91c2VNb3ZlVGltZSA8IDIwKSB7XG4gICAgY3VycmVudElucHV0LmlzVG91Y2ggPSBmYWxzZTtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBvbkRvY3VtZW50TW91c2VNb3ZlKTtcbiAgfVxuXG4gIGxhc3RNb3VzZU1vdmVUaW1lID0gbm93O1xufVxuLyoqXG4gKiBXaGVuIGFuIGVsZW1lbnQgaXMgaW4gZm9jdXMgYW5kIGhhcyBhIHRpcHB5LCBsZWF2aW5nIHRoZSB0YWIvd2luZG93IGFuZFxuICogcmV0dXJuaW5nIGNhdXNlcyBpdCB0byBzaG93IGFnYWluLiBGb3IgbW91c2UgdXNlcnMgdGhpcyBpcyB1bmV4cGVjdGVkLCBidXRcbiAqIGZvciBrZXlib2FyZCB1c2UgaXQgbWFrZXMgc2Vuc2UuXG4gKiBUT0RPOiBmaW5kIGEgYmV0dGVyIHRlY2huaXF1ZSB0byBzb2x2ZSB0aGlzIHByb2JsZW1cbiAqL1xuXG5mdW5jdGlvbiBvbldpbmRvd0JsdXIoKSB7XG4gIHZhciBhY3RpdmVFbGVtZW50ID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblxuICBpZiAoaXNSZWZlcmVuY2VFbGVtZW50KGFjdGl2ZUVsZW1lbnQpKSB7XG4gICAgdmFyIGluc3RhbmNlID0gYWN0aXZlRWxlbWVudC5fdGlwcHk7XG5cbiAgICBpZiAoYWN0aXZlRWxlbWVudC5ibHVyICYmICFpbnN0YW5jZS5zdGF0ZS5pc1Zpc2libGUpIHtcbiAgICAgIGFjdGl2ZUVsZW1lbnQuYmx1cigpO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gYmluZEdsb2JhbEV2ZW50TGlzdGVuZXJzKCkge1xuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0Jywgb25Eb2N1bWVudFRvdWNoU3RhcnQsIE9iamVjdC5hc3NpZ24oe30sIFBBU1NJVkUsIHtcbiAgICBjYXB0dXJlOiB0cnVlXG4gIH0pKTtcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBvbldpbmRvd0JsdXIpO1xufVxuXG52YXIgaXNCcm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJztcbnZhciB1YSA9IGlzQnJvd3NlciA/IG5hdmlnYXRvci51c2VyQWdlbnQgOiAnJztcbnZhciBpc0lFID0gL01TSUUgfFRyaWRlbnRcXC8vLnRlc3QodWEpO1xudmFyIGlzSU9TID0gaXNCcm93c2VyICYmIC9pUGhvbmV8aVBhZHxpUG9kLy50ZXN0KG5hdmlnYXRvci5wbGF0Zm9ybSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZU1lbW9yeUxlYWtXYXJuaW5nKG1ldGhvZCkge1xuICB2YXIgdHh0ID0gbWV0aG9kID09PSAnZGVzdHJveScgPyAnbiBhbHJlYWR5LScgOiAnICc7XG4gIHJldHVybiBbbWV0aG9kICsgXCIoKSB3YXMgY2FsbGVkIG9uIGFcIiArIHR4dCArIFwiZGVzdHJveWVkIGluc3RhbmNlLiBUaGlzIGlzIGEgbm8tb3AgYnV0XCIsICdpbmRpY2F0ZXMgYSBwb3RlbnRpYWwgbWVtb3J5IGxlYWsuJ10uam9pbignICcpO1xufVxuZnVuY3Rpb24gY2xlYW4odmFsdWUpIHtcbiAgdmFyIHNwYWNlc0FuZFRhYnMgPSAvWyBcXHRdezIsfS9nO1xuICB2YXIgbGluZVN0YXJ0V2l0aFNwYWNlcyA9IC9eWyBcXHRdKi9nbTtcbiAgcmV0dXJuIHZhbHVlLnJlcGxhY2Uoc3BhY2VzQW5kVGFicywgJyAnKS5yZXBsYWNlKGxpbmVTdGFydFdpdGhTcGFjZXMsICcnKS50cmltKCk7XG59XG5cbmZ1bmN0aW9uIGdldERldk1lc3NhZ2UobWVzc2FnZSkge1xuICByZXR1cm4gY2xlYW4oXCJcXG4gICVjdGlwcHkuanNcXG5cXG4gICVjXCIgKyBjbGVhbihtZXNzYWdlKSArIFwiXFxuXFxuICAlY1xcdUQ4M0RcXHVEQzc3XFx1MjAwRCBUaGlzIGlzIGEgZGV2ZWxvcG1lbnQtb25seSBtZXNzYWdlLiBJdCB3aWxsIGJlIHJlbW92ZWQgaW4gcHJvZHVjdGlvbi5cXG4gIFwiKTtcbn1cblxuZnVuY3Rpb24gZ2V0Rm9ybWF0dGVkTWVzc2FnZShtZXNzYWdlKSB7XG4gIHJldHVybiBbZ2V0RGV2TWVzc2FnZShtZXNzYWdlKSwgLy8gdGl0bGVcbiAgJ2NvbG9yOiAjMDBDNTg0OyBmb250LXNpemU6IDEuM2VtOyBmb250LXdlaWdodDogYm9sZDsnLCAvLyBtZXNzYWdlXG4gICdsaW5lLWhlaWdodDogMS41JywgLy8gZm9vdGVyXG4gICdjb2xvcjogI2E2YTA5NTsnXTtcbn1cbi8qKlxuICogSGVscGZ1bCB3cmFwcGVyIGFyb3VuZCBgY29uc29sZS53YXJuKClgLlxuICogVE9ETzogU2hvdWxkIHdlIHVzZSBhIGNhY2hlIHNvIGl0IG9ubHkgd2FybnMgYSBzaW5nbGUgdGltZSBhbmQgbm90IHNwYW0gdGhlXG4gKiBjb25zb2xlPyAoTmVlZCB0byBjb25zaWRlciBob3QgcmVsb2FkaW5nIGFuZCBpbnZhbGlkYXRpb24gdGhvdWdoKS4gQ2hyb21lXG4gKiBhbHJlYWR5IGJhdGNoZXMgd2FybmluZ3MgYXMgd2VsbC5cbiAqL1xuXG5mdW5jdGlvbiB3YXJuV2hlbihjb25kaXRpb24sIG1lc3NhZ2UpIHtcbiAgaWYgKGNvbmRpdGlvbikge1xuICAgIHZhciBfY29uc29sZTtcblxuICAgIChfY29uc29sZSA9IGNvbnNvbGUpLndhcm4uYXBwbHkoX2NvbnNvbGUsIGdldEZvcm1hdHRlZE1lc3NhZ2UobWVzc2FnZSkpO1xuICB9XG59XG4vKipcbiAqIEhlbHBmdWwgd3JhcHBlciBhcm91bmQgYGNvbnNvbGUuZXJyb3IoKWBcbiAqL1xuXG5mdW5jdGlvbiBlcnJvcldoZW4oY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gIGlmIChjb25kaXRpb24pIHtcbiAgICB2YXIgX2NvbnNvbGUyO1xuXG4gICAgKF9jb25zb2xlMiA9IGNvbnNvbGUpLmVycm9yLmFwcGx5KF9jb25zb2xlMiwgZ2V0Rm9ybWF0dGVkTWVzc2FnZShtZXNzYWdlKSk7XG4gIH1cbn1cbi8qKlxuICogVmFsaWRhdGVzIHRoZSBgdGFyZ2V0c2AgdmFsdWUgcGFzc2VkIHRvIGB0aXBweSgpYFxuICovXG5cbmZ1bmN0aW9uIHZhbGlkYXRlVGFyZ2V0cyh0YXJnZXRzKSB7XG4gIHZhciBkaWRQYXNzRmFsc3lWYWx1ZSA9ICF0YXJnZXRzO1xuICB2YXIgZGlkUGFzc1BsYWluT2JqZWN0ID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHRhcmdldHMpID09PSAnW29iamVjdCBPYmplY3RdJyAmJiAhdGFyZ2V0cy5hZGRFdmVudExpc3RlbmVyO1xuICBlcnJvcldoZW4oZGlkUGFzc0ZhbHN5VmFsdWUsIFsndGlwcHkoKSB3YXMgcGFzc2VkJywgJ2AnICsgU3RyaW5nKHRhcmdldHMpICsgJ2AnLCAnYXMgaXRzIHRhcmdldHMgKGZpcnN0KSBhcmd1bWVudC4gVmFsaWQgdHlwZXMgYXJlOiBTdHJpbmcsIEVsZW1lbnQsJywgJ0VsZW1lbnRbXSwgb3IgTm9kZUxpc3QuJ10uam9pbignICcpKTtcbiAgZXJyb3JXaGVuKGRpZFBhc3NQbGFpbk9iamVjdCwgWyd0aXBweSgpIHdhcyBwYXNzZWQgYSBwbGFpbiBvYmplY3Qgd2hpY2ggaXMgbm90IHN1cHBvcnRlZCBhcyBhbiBhcmd1bWVudCcsICdmb3IgdmlydHVhbCBwb3NpdGlvbmluZy4gVXNlIHByb3BzLmdldFJlZmVyZW5jZUNsaWVudFJlY3QgaW5zdGVhZC4nXS5qb2luKCcgJykpO1xufVxuXG52YXIgcGx1Z2luUHJvcHMgPSB7XG4gIGFuaW1hdGVGaWxsOiBmYWxzZSxcbiAgZm9sbG93Q3Vyc29yOiBmYWxzZSxcbiAgaW5saW5lUG9zaXRpb25pbmc6IGZhbHNlLFxuICBzdGlja3k6IGZhbHNlXG59O1xudmFyIHJlbmRlclByb3BzID0ge1xuICBhbGxvd0hUTUw6IGZhbHNlLFxuICBhbmltYXRpb246ICdmYWRlJyxcbiAgYXJyb3c6IHRydWUsXG4gIGNvbnRlbnQ6ICcnLFxuICBpbmVydGlhOiBmYWxzZSxcbiAgbWF4V2lkdGg6IDM1MCxcbiAgcm9sZTogJ3Rvb2x0aXAnLFxuICB0aGVtZTogJycsXG4gIHpJbmRleDogOTk5OVxufTtcbnZhciBkZWZhdWx0UHJvcHMgPSBPYmplY3QuYXNzaWduKHtcbiAgYXBwZW5kVG86IGZ1bmN0aW9uIGFwcGVuZFRvKCkge1xuICAgIHJldHVybiBkb2N1bWVudC5ib2R5O1xuICB9LFxuICBhcmlhOiB7XG4gICAgY29udGVudDogJ2F1dG8nLFxuICAgIGV4cGFuZGVkOiAnYXV0bydcbiAgfSxcbiAgY29udGVudDogJycsXG4gIGRlbGF5OiAwLFxuICBkdXJhdGlvbjogWzMwMCwgMjUwXSxcbiAgZ2V0UmVmZXJlbmNlQ2xpZW50UmVjdDogbnVsbCxcbiAgaGlkZU9uQ2xpY2s6IHRydWUsXG4gIGlnbm9yZUF0dHJpYnV0ZXM6IGZhbHNlLFxuICBpbnRlcmFjdGl2ZTogZmFsc2UsXG4gIGludGVyYWN0aXZlQm9yZGVyOiAyLFxuICBpbnRlcmFjdGl2ZURlYm91bmNlOiAwLFxuICBtb3ZlVHJhbnNpdGlvbjogJycsXG4gIG9mZnNldDogWzAsIDEwXSxcbiAgb25BZnRlclVwZGF0ZTogZnVuY3Rpb24gb25BZnRlclVwZGF0ZSgpIHt9LFxuICBvbkJlZm9yZVVwZGF0ZTogZnVuY3Rpb24gb25CZWZvcmVVcGRhdGUoKSB7fSxcbiAgb25DcmVhdGU6IGZ1bmN0aW9uIG9uQ3JlYXRlKCkge30sXG4gIG9uRGVzdHJveTogZnVuY3Rpb24gb25EZXN0cm95KCkge30sXG4gIG9uSGlkZGVuOiBmdW5jdGlvbiBvbkhpZGRlbigpIHt9LFxuICBvbkhpZGU6IGZ1bmN0aW9uIG9uSGlkZSgpIHt9LFxuICBvbk1vdW50OiBmdW5jdGlvbiBvbk1vdW50KCkge30sXG4gIG9uU2hvdzogZnVuY3Rpb24gb25TaG93KCkge30sXG4gIG9uU2hvd246IGZ1bmN0aW9uIG9uU2hvd24oKSB7fSxcbiAgb25UcmlnZ2VyOiBmdW5jdGlvbiBvblRyaWdnZXIoKSB7fSxcbiAgb25VbnRyaWdnZXI6IGZ1bmN0aW9uIG9uVW50cmlnZ2VyKCkge30sXG4gIG9uQ2xpY2tPdXRzaWRlOiBmdW5jdGlvbiBvbkNsaWNrT3V0c2lkZSgpIHt9LFxuICBwbGFjZW1lbnQ6ICd0b3AnLFxuICBwbHVnaW5zOiBbXSxcbiAgcG9wcGVyT3B0aW9uczoge30sXG4gIHJlbmRlcjogbnVsbCxcbiAgc2hvd09uQ3JlYXRlOiBmYWxzZSxcbiAgdG91Y2g6IHRydWUsXG4gIHRyaWdnZXI6ICdtb3VzZWVudGVyIGZvY3VzJyxcbiAgdHJpZ2dlclRhcmdldDogbnVsbFxufSwgcGx1Z2luUHJvcHMsIHt9LCByZW5kZXJQcm9wcyk7XG52YXIgZGVmYXVsdEtleXMgPSBPYmplY3Qua2V5cyhkZWZhdWx0UHJvcHMpO1xudmFyIHNldERlZmF1bHRQcm9wcyA9IGZ1bmN0aW9uIHNldERlZmF1bHRQcm9wcyhwYXJ0aWFsUHJvcHMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIHZhbGlkYXRlUHJvcHMocGFydGlhbFByb3BzLCBbXSk7XG4gIH1cblxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHBhcnRpYWxQcm9wcyk7XG4gIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgZGVmYXVsdFByb3BzW2tleV0gPSBwYXJ0aWFsUHJvcHNba2V5XTtcbiAgfSk7XG59O1xuZnVuY3Rpb24gZ2V0RXh0ZW5kZWRQYXNzZWRQcm9wcyhwYXNzZWRQcm9wcykge1xuICB2YXIgcGx1Z2lucyA9IHBhc3NlZFByb3BzLnBsdWdpbnMgfHwgW107XG4gIHZhciBwbHVnaW5Qcm9wcyA9IHBsdWdpbnMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBsdWdpbikge1xuICAgIHZhciBuYW1lID0gcGx1Z2luLm5hbWUsXG4gICAgICAgIGRlZmF1bHRWYWx1ZSA9IHBsdWdpbi5kZWZhdWx0VmFsdWU7XG5cbiAgICBpZiAobmFtZSkge1xuICAgICAgYWNjW25hbWVdID0gcGFzc2VkUHJvcHNbbmFtZV0gIT09IHVuZGVmaW5lZCA/IHBhc3NlZFByb3BzW25hbWVdIDogZGVmYXVsdFZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHBhc3NlZFByb3BzLCB7fSwgcGx1Z2luUHJvcHMpO1xufVxuZnVuY3Rpb24gZ2V0RGF0YUF0dHJpYnV0ZVByb3BzKHJlZmVyZW5jZSwgcGx1Z2lucykge1xuICB2YXIgcHJvcEtleXMgPSBwbHVnaW5zID8gT2JqZWN0LmtleXMoZ2V0RXh0ZW5kZWRQYXNzZWRQcm9wcyhPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0UHJvcHMsIHtcbiAgICBwbHVnaW5zOiBwbHVnaW5zXG4gIH0pKSkgOiBkZWZhdWx0S2V5cztcbiAgdmFyIHByb3BzID0gcHJvcEtleXMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGtleSkge1xuICAgIHZhciB2YWx1ZUFzU3RyaW5nID0gKHJlZmVyZW5jZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXRpcHB5LVwiICsga2V5KSB8fCAnJykudHJpbSgpO1xuXG4gICAgaWYgKCF2YWx1ZUFzU3RyaW5nKSB7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH1cblxuICAgIGlmIChrZXkgPT09ICdjb250ZW50Jykge1xuICAgICAgYWNjW2tleV0gPSB2YWx1ZUFzU3RyaW5nO1xuICAgIH0gZWxzZSB7XG4gICAgICB0cnkge1xuICAgICAgICBhY2Nba2V5XSA9IEpTT04ucGFyc2UodmFsdWVBc1N0cmluZyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGFjY1trZXldID0gdmFsdWVBc1N0cmluZztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG4gIHJldHVybiBwcm9wcztcbn1cbmZ1bmN0aW9uIGV2YWx1YXRlUHJvcHMocmVmZXJlbmNlLCBwcm9wcykge1xuICB2YXIgb3V0ID0gT2JqZWN0LmFzc2lnbih7fSwgcHJvcHMsIHtcbiAgICBjb250ZW50OiBpbnZva2VXaXRoQXJnc09yUmV0dXJuKHByb3BzLmNvbnRlbnQsIFtyZWZlcmVuY2VdKVxuICB9LCBwcm9wcy5pZ25vcmVBdHRyaWJ1dGVzID8ge30gOiBnZXREYXRhQXR0cmlidXRlUHJvcHMocmVmZXJlbmNlLCBwcm9wcy5wbHVnaW5zKSk7XG4gIG91dC5hcmlhID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdFByb3BzLmFyaWEsIHt9LCBvdXQuYXJpYSk7XG4gIG91dC5hcmlhID0ge1xuICAgIGV4cGFuZGVkOiBvdXQuYXJpYS5leHBhbmRlZCA9PT0gJ2F1dG8nID8gcHJvcHMuaW50ZXJhY3RpdmUgOiBvdXQuYXJpYS5leHBhbmRlZCxcbiAgICBjb250ZW50OiBvdXQuYXJpYS5jb250ZW50ID09PSAnYXV0bycgPyBwcm9wcy5pbnRlcmFjdGl2ZSA/IG51bGwgOiAnZGVzY3JpYmVkYnknIDogb3V0LmFyaWEuY29udGVudFxuICB9O1xuICByZXR1cm4gb3V0O1xufVxuZnVuY3Rpb24gdmFsaWRhdGVQcm9wcyhwYXJ0aWFsUHJvcHMsIHBsdWdpbnMpIHtcbiAgaWYgKHBhcnRpYWxQcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcGFydGlhbFByb3BzID0ge307XG4gIH1cblxuICBpZiAocGx1Z2lucyA9PT0gdm9pZCAwKSB7XG4gICAgcGx1Z2lucyA9IFtdO1xuICB9XG5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhwYXJ0aWFsUHJvcHMpO1xuICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICB2YXIgbm9uUGx1Z2luUHJvcHMgPSByZW1vdmVQcm9wZXJ0aWVzKGRlZmF1bHRQcm9wcywgT2JqZWN0LmtleXMocGx1Z2luUHJvcHMpKTtcbiAgICB2YXIgZGlkUGFzc1Vua25vd25Qcm9wID0gIWhhc093blByb3BlcnR5KG5vblBsdWdpblByb3BzLCBwcm9wKTsgLy8gQ2hlY2sgaWYgdGhlIHByb3AgZXhpc3RzIGluIGBwbHVnaW5zYFxuXG4gICAgaWYgKGRpZFBhc3NVbmtub3duUHJvcCkge1xuICAgICAgZGlkUGFzc1Vua25vd25Qcm9wID0gcGx1Z2lucy5maWx0ZXIoZnVuY3Rpb24gKHBsdWdpbikge1xuICAgICAgICByZXR1cm4gcGx1Z2luLm5hbWUgPT09IHByb3A7XG4gICAgICB9KS5sZW5ndGggPT09IDA7XG4gICAgfVxuXG4gICAgd2FybldoZW4oZGlkUGFzc1Vua25vd25Qcm9wLCBbXCJgXCIgKyBwcm9wICsgXCJgXCIsIFwiaXMgbm90IGEgdmFsaWQgcHJvcC4gWW91IG1heSBoYXZlIHNwZWxsZWQgaXQgaW5jb3JyZWN0bHksIG9yIGlmIGl0J3NcIiwgJ2EgcGx1Z2luLCBmb3Jnb3QgdG8gcGFzcyBpdCBpbiBhbiBhcnJheSBhcyBwcm9wcy5wbHVnaW5zLicsICdcXG5cXG4nLCAnQWxsIHByb3BzOiBodHRwczovL2F0b21pa3MuZ2l0aHViLmlvL3RpcHB5anMvdjYvYWxsLXByb3BzL1xcbicsICdQbHVnaW5zOiBodHRwczovL2F0b21pa3MuZ2l0aHViLmlvL3RpcHB5anMvdjYvcGx1Z2lucy8nXS5qb2luKCcgJykpO1xuICB9KTtcbn1cblxudmFyIGlubmVySFRNTCA9IGZ1bmN0aW9uIGlubmVySFRNTCgpIHtcbiAgcmV0dXJuICdpbm5lckhUTUwnO1xufTtcblxuZnVuY3Rpb24gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwoZWxlbWVudCwgaHRtbCkge1xuICBlbGVtZW50W2lubmVySFRNTCgpXSA9IGh0bWw7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUFycm93RWxlbWVudCh2YWx1ZSkge1xuICB2YXIgYXJyb3cgPSBkaXYoKTtcblxuICBpZiAodmFsdWUgPT09IHRydWUpIHtcbiAgICBhcnJvdy5jbGFzc05hbWUgPSBBUlJPV19DTEFTUztcbiAgfSBlbHNlIHtcbiAgICBhcnJvdy5jbGFzc05hbWUgPSBTVkdfQVJST1dfQ0xBU1M7XG5cbiAgICBpZiAoaXNFbGVtZW50KHZhbHVlKSkge1xuICAgICAgYXJyb3cuYXBwZW5kQ2hpbGQodmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTChhcnJvdywgdmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhcnJvdztcbn1cblxuZnVuY3Rpb24gc2V0Q29udGVudChjb250ZW50LCBwcm9wcykge1xuICBpZiAoaXNFbGVtZW50KHByb3BzLmNvbnRlbnQpKSB7XG4gICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwoY29udGVudCwgJycpO1xuICAgIGNvbnRlbnQuYXBwZW5kQ2hpbGQocHJvcHMuY29udGVudCk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb3BzLmNvbnRlbnQgIT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAocHJvcHMuYWxsb3dIVE1MKSB7XG4gICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTChjb250ZW50LCBwcm9wcy5jb250ZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29udGVudC50ZXh0Q29udGVudCA9IHByb3BzLmNvbnRlbnQ7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBnZXRDaGlsZHJlbihwb3BwZXIpIHtcbiAgdmFyIGJveCA9IHBvcHBlci5maXJzdEVsZW1lbnRDaGlsZDtcbiAgdmFyIGJveENoaWxkcmVuID0gYXJyYXlGcm9tKGJveC5jaGlsZHJlbik7XG4gIHJldHVybiB7XG4gICAgYm94OiBib3gsXG4gICAgY29udGVudDogYm94Q2hpbGRyZW4uZmluZChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgcmV0dXJuIG5vZGUuY2xhc3NMaXN0LmNvbnRhaW5zKENPTlRFTlRfQ0xBU1MpO1xuICAgIH0pLFxuICAgIGFycm93OiBib3hDaGlsZHJlbi5maW5kKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICByZXR1cm4gbm9kZS5jbGFzc0xpc3QuY29udGFpbnMoQVJST1dfQ0xBU1MpIHx8IG5vZGUuY2xhc3NMaXN0LmNvbnRhaW5zKFNWR19BUlJPV19DTEFTUyk7XG4gICAgfSksXG4gICAgYmFja2Ryb3A6IGJveENoaWxkcmVuLmZpbmQoZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIHJldHVybiBub2RlLmNsYXNzTGlzdC5jb250YWlucyhCQUNLRFJPUF9DTEFTUyk7XG4gICAgfSlcbiAgfTtcbn1cbmZ1bmN0aW9uIHJlbmRlcihpbnN0YW5jZSkge1xuICB2YXIgcG9wcGVyID0gZGl2KCk7XG4gIHZhciBib3ggPSBkaXYoKTtcbiAgYm94LmNsYXNzTmFtZSA9IEJPWF9DTEFTUztcbiAgYm94LnNldEF0dHJpYnV0ZSgnZGF0YS1zdGF0ZScsICdoaWRkZW4nKTtcbiAgYm94LnNldEF0dHJpYnV0ZSgndGFiaW5kZXgnLCAnLTEnKTtcbiAgdmFyIGNvbnRlbnQgPSBkaXYoKTtcbiAgY29udGVudC5jbGFzc05hbWUgPSBDT05URU5UX0NMQVNTO1xuICBjb250ZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1zdGF0ZScsICdoaWRkZW4nKTtcbiAgc2V0Q29udGVudChjb250ZW50LCBpbnN0YW5jZS5wcm9wcyk7XG4gIHBvcHBlci5hcHBlbmRDaGlsZChib3gpO1xuICBib3guYXBwZW5kQ2hpbGQoY29udGVudCk7XG4gIG9uVXBkYXRlKGluc3RhbmNlLnByb3BzLCBpbnN0YW5jZS5wcm9wcyk7XG5cbiAgZnVuY3Rpb24gb25VcGRhdGUocHJldlByb3BzLCBuZXh0UHJvcHMpIHtcbiAgICB2YXIgX2dldENoaWxkcmVuID0gZ2V0Q2hpbGRyZW4ocG9wcGVyKSxcbiAgICAgICAgYm94ID0gX2dldENoaWxkcmVuLmJveCxcbiAgICAgICAgY29udGVudCA9IF9nZXRDaGlsZHJlbi5jb250ZW50LFxuICAgICAgICBhcnJvdyA9IF9nZXRDaGlsZHJlbi5hcnJvdztcblxuICAgIGlmIChuZXh0UHJvcHMudGhlbWUpIHtcbiAgICAgIGJveC5zZXRBdHRyaWJ1dGUoJ2RhdGEtdGhlbWUnLCBuZXh0UHJvcHMudGhlbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBib3gucmVtb3ZlQXR0cmlidXRlKCdkYXRhLXRoZW1lJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBuZXh0UHJvcHMuYW5pbWF0aW9uID09PSAnc3RyaW5nJykge1xuICAgICAgYm94LnNldEF0dHJpYnV0ZSgnZGF0YS1hbmltYXRpb24nLCBuZXh0UHJvcHMuYW5pbWF0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYm94LnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1hbmltYXRpb24nKTtcbiAgICB9XG5cbiAgICBpZiAobmV4dFByb3BzLmluZXJ0aWEpIHtcbiAgICAgIGJveC5zZXRBdHRyaWJ1dGUoJ2RhdGEtaW5lcnRpYScsICcnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYm94LnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1pbmVydGlhJyk7XG4gICAgfVxuXG4gICAgYm94LnN0eWxlLm1heFdpZHRoID0gdHlwZW9mIG5leHRQcm9wcy5tYXhXaWR0aCA9PT0gJ251bWJlcicgPyBuZXh0UHJvcHMubWF4V2lkdGggKyBcInB4XCIgOiBuZXh0UHJvcHMubWF4V2lkdGg7XG5cbiAgICBpZiAobmV4dFByb3BzLnJvbGUpIHtcbiAgICAgIGJveC5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCBuZXh0UHJvcHMucm9sZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJveC5yZW1vdmVBdHRyaWJ1dGUoJ3JvbGUnKTtcbiAgICB9XG5cbiAgICBpZiAocHJldlByb3BzLmNvbnRlbnQgIT09IG5leHRQcm9wcy5jb250ZW50KSB7XG4gICAgICBzZXRDb250ZW50KGNvbnRlbnQsIGluc3RhbmNlLnByb3BzKTtcbiAgICB9XG5cbiAgICBpZiAobmV4dFByb3BzLmFycm93KSB7XG4gICAgICBpZiAoIWFycm93KSB7XG4gICAgICAgIGJveC5hcHBlbmRDaGlsZChjcmVhdGVBcnJvd0VsZW1lbnQobmV4dFByb3BzLmFycm93KSk7XG4gICAgICB9IGVsc2UgaWYgKHByZXZQcm9wcy5hcnJvdyAhPT0gbmV4dFByb3BzLmFycm93KSB7XG4gICAgICAgIGJveC5yZW1vdmVDaGlsZChhcnJvdyk7XG4gICAgICAgIGJveC5hcHBlbmRDaGlsZChjcmVhdGVBcnJvd0VsZW1lbnQobmV4dFByb3BzLmFycm93KSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChhcnJvdykge1xuICAgICAgYm94LnJlbW92ZUNoaWxkKGFycm93KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBvcHBlcjogcG9wcGVyLFxuICAgIG9uVXBkYXRlOiBvblVwZGF0ZVxuICB9O1xufSAvLyBSdW50aW1lIGNoZWNrIHRvIGlkZW50aWZ5IGlmIHRoZSByZW5kZXIgZnVuY3Rpb24gaXMgdGhlIGRlZmF1bHQgb25lOyB0aGlzXG4vLyB3YXkgd2UgY2FuIGFwcGx5IGRlZmF1bHQgQ1NTIHRyYW5zaXRpb25zIGxvZ2ljIGFuZCBpdCBjYW4gYmUgdHJlZS1zaGFrZW4gYXdheVxuXG5yZW5kZXIuJCR0aXBweSA9IHRydWU7XG5cbnZhciBpZENvdW50ZXIgPSAxO1xudmFyIG1vdXNlTW92ZUxpc3RlbmVycyA9IFtdOyAvLyBVc2VkIGJ5IGBoaWRlQWxsKClgXG5cbnZhciBtb3VudGVkSW5zdGFuY2VzID0gW107XG5mdW5jdGlvbiBjcmVhdGVUaXBweShyZWZlcmVuY2UsIHBhc3NlZFByb3BzKSB7XG4gIHZhciBwcm9wcyA9IGV2YWx1YXRlUHJvcHMocmVmZXJlbmNlLCBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0UHJvcHMsIHt9LCBnZXRFeHRlbmRlZFBhc3NlZFByb3BzKHBhc3NlZFByb3BzKSkpOyAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgLy8g8J+UkiBQcml2YXRlIG1lbWJlcnNcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIHNob3dUaW1lb3V0O1xuICB2YXIgaGlkZVRpbWVvdXQ7XG4gIHZhciBzY2hlZHVsZUhpZGVBbmltYXRpb25GcmFtZTtcbiAgdmFyIGlzVmlzaWJsZUZyb21DbGljayA9IGZhbHNlO1xuICB2YXIgZGlkSGlkZUR1ZVRvRG9jdW1lbnRNb3VzZURvd24gPSBmYWxzZTtcbiAgdmFyIGlnbm9yZU9uRmlyc3RVcGRhdGUgPSBmYWxzZTtcbiAgdmFyIGxhc3RUcmlnZ2VyRXZlbnQ7XG4gIHZhciBjdXJyZW50VHJhbnNpdGlvbkVuZExpc3RlbmVyO1xuICB2YXIgb25GaXJzdFVwZGF0ZTtcbiAgdmFyIGxpc3RlbmVycyA9IFtdO1xuICB2YXIgZGVib3VuY2VkT25Nb3VzZU1vdmUgPSBkZWJvdW5jZShvbk1vdXNlTW92ZSwgcHJvcHMuaW50ZXJhY3RpdmVEZWJvdW5jZSk7XG4gIHZhciBjdXJyZW50VGFyZ2V0O1xuICB2YXIgZG9jID0gZ2V0T3duZXJEb2N1bWVudChwcm9wcy50cmlnZ2VyVGFyZ2V0IHx8IHJlZmVyZW5jZSk7IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAvLyDwn5SRIFB1YmxpYyBtZW1iZXJzXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBpZCA9IGlkQ291bnRlcisrO1xuICB2YXIgcG9wcGVySW5zdGFuY2UgPSBudWxsO1xuICB2YXIgcGx1Z2lucyA9IHVuaXF1ZShwcm9wcy5wbHVnaW5zKTtcbiAgdmFyIHN0YXRlID0ge1xuICAgIC8vIElzIHRoZSBpbnN0YW5jZSBjdXJyZW50bHkgZW5hYmxlZD9cbiAgICBpc0VuYWJsZWQ6IHRydWUsXG4gICAgLy8gSXMgdGhlIHRpcHB5IGN1cnJlbnRseSBzaG93aW5nIGFuZCBub3QgdHJhbnNpdGlvbmluZyBvdXQ/XG4gICAgaXNWaXNpYmxlOiBmYWxzZSxcbiAgICAvLyBIYXMgdGhlIGluc3RhbmNlIGJlZW4gZGVzdHJveWVkP1xuICAgIGlzRGVzdHJveWVkOiBmYWxzZSxcbiAgICAvLyBJcyB0aGUgdGlwcHkgY3VycmVudGx5IG1vdW50ZWQgdG8gdGhlIERPTT9cbiAgICBpc01vdW50ZWQ6IGZhbHNlLFxuICAgIC8vIEhhcyB0aGUgdGlwcHkgZmluaXNoZWQgdHJhbnNpdGlvbmluZyBpbj9cbiAgICBpc1Nob3duOiBmYWxzZVxuICB9O1xuICB2YXIgaW5zdGFuY2UgPSB7XG4gICAgLy8gcHJvcGVydGllc1xuICAgIGlkOiBpZCxcbiAgICByZWZlcmVuY2U6IHJlZmVyZW5jZSxcbiAgICBwb3BwZXI6IGRpdigpLFxuICAgIHBvcHBlckluc3RhbmNlOiBwb3BwZXJJbnN0YW5jZSxcbiAgICBwcm9wczogcHJvcHMsXG4gICAgc3RhdGU6IHN0YXRlLFxuICAgIHBsdWdpbnM6IHBsdWdpbnMsXG4gICAgLy8gbWV0aG9kc1xuICAgIGNsZWFyRGVsYXlUaW1lb3V0czogY2xlYXJEZWxheVRpbWVvdXRzLFxuICAgIHNldFByb3BzOiBzZXRQcm9wcyxcbiAgICBzZXRDb250ZW50OiBzZXRDb250ZW50LFxuICAgIHNob3c6IHNob3csXG4gICAgaGlkZTogaGlkZSxcbiAgICBlbmFibGU6IGVuYWJsZSxcbiAgICBkaXNhYmxlOiBkaXNhYmxlLFxuICAgIHVubW91bnQ6IHVubW91bnQsXG4gICAgZGVzdHJveTogZGVzdHJveVxuICB9OyAvLyBUT0RPOiBJbnZlc3RpZ2F0ZSB3aHkgdGhpcyBlYXJseSByZXR1cm4gY2F1c2VzIGEgVERaIGVycm9yIGluIHRoZSB0ZXN0cyDigJRcbiAgLy8gaXQgZG9lc24ndCBzZWVtIHRvIGhhcHBlbiBpbiB0aGUgYnJvd3NlclxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuXG4gIGlmICghcHJvcHMucmVuZGVyKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgZXJyb3JXaGVuKHRydWUsICdyZW5kZXIoKSBmdW5jdGlvbiBoYXMgbm90IGJlZW4gc3VwcGxpZWQuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAvLyBJbml0aWFsIG11dGF0aW9uc1xuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuXG4gIHZhciBfcHJvcHMkcmVuZGVyID0gcHJvcHMucmVuZGVyKGluc3RhbmNlKSxcbiAgICAgIHBvcHBlciA9IF9wcm9wcyRyZW5kZXIucG9wcGVyLFxuICAgICAgb25VcGRhdGUgPSBfcHJvcHMkcmVuZGVyLm9uVXBkYXRlO1xuXG4gIHBvcHBlci5zZXRBdHRyaWJ1dGUoJ2RhdGEtdGlwcHktcm9vdCcsICcnKTtcbiAgcG9wcGVyLmlkID0gXCJ0aXBweS1cIiArIGluc3RhbmNlLmlkO1xuICBpbnN0YW5jZS5wb3BwZXIgPSBwb3BwZXI7XG4gIHJlZmVyZW5jZS5fdGlwcHkgPSBpbnN0YW5jZTtcbiAgcG9wcGVyLl90aXBweSA9IGluc3RhbmNlO1xuICB2YXIgcGx1Z2luc0hvb2tzID0gcGx1Z2lucy5tYXAoZnVuY3Rpb24gKHBsdWdpbikge1xuICAgIHJldHVybiBwbHVnaW4uZm4oaW5zdGFuY2UpO1xuICB9KTtcbiAgdmFyIGhhc0FyaWFFeHBhbmRlZCA9IHJlZmVyZW5jZS5oYXNBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnKTtcbiAgYWRkTGlzdGVuZXJzKCk7XG4gIGhhbmRsZUFyaWFFeHBhbmRlZEF0dHJpYnV0ZSgpO1xuICBoYW5kbGVTdHlsZXMoKTtcbiAgaW52b2tlSG9vaygnb25DcmVhdGUnLCBbaW5zdGFuY2VdKTtcblxuICBpZiAocHJvcHMuc2hvd09uQ3JlYXRlKSB7XG4gICAgc2NoZWR1bGVTaG93KCk7XG4gIH0gLy8gUHJldmVudCBhIHRpcHB5IHdpdGggYSBkZWxheSBmcm9tIGhpZGluZyBpZiB0aGUgY3Vyc29yIGxlZnQgdGhlbiByZXR1cm5lZFxuICAvLyBiZWZvcmUgaXQgc3RhcnRlZCBoaWRpbmdcblxuXG4gIHBvcHBlci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgZnVuY3Rpb24gKCkge1xuICAgIGlmIChpbnN0YW5jZS5wcm9wcy5pbnRlcmFjdGl2ZSAmJiBpbnN0YW5jZS5zdGF0ZS5pc1Zpc2libGUpIHtcbiAgICAgIGluc3RhbmNlLmNsZWFyRGVsYXlUaW1lb3V0cygpO1xuICAgIH1cbiAgfSk7XG4gIHBvcHBlci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgaWYgKGluc3RhbmNlLnByb3BzLmludGVyYWN0aXZlICYmIGluc3RhbmNlLnByb3BzLnRyaWdnZXIuaW5kZXhPZignbW91c2VlbnRlcicpID49IDApIHtcbiAgICAgIGRvYy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBkZWJvdW5jZWRPbk1vdXNlTW92ZSk7XG4gICAgICBkZWJvdW5jZWRPbk1vdXNlTW92ZShldmVudCk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGluc3RhbmNlOyAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgLy8g8J+UkiBQcml2YXRlIG1ldGhvZHNcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gZ2V0Tm9ybWFsaXplZFRvdWNoU2V0dGluZ3MoKSB7XG4gICAgdmFyIHRvdWNoID0gaW5zdGFuY2UucHJvcHMudG91Y2g7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodG91Y2gpID8gdG91Y2ggOiBbdG91Y2gsIDBdO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0SXNDdXN0b21Ub3VjaEJlaGF2aW9yKCkge1xuICAgIHJldHVybiBnZXROb3JtYWxpemVkVG91Y2hTZXR0aW5ncygpWzBdID09PSAnaG9sZCc7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRJc0RlZmF1bHRSZW5kZXJGbigpIHtcbiAgICB2YXIgX2luc3RhbmNlJHByb3BzJHJlbmRlO1xuXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHJldHVybiAhISgoX2luc3RhbmNlJHByb3BzJHJlbmRlID0gaW5zdGFuY2UucHJvcHMucmVuZGVyKSA9PSBudWxsID8gdm9pZCAwIDogX2luc3RhbmNlJHByb3BzJHJlbmRlLiQkdGlwcHkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0Q3VycmVudFRhcmdldCgpIHtcbiAgICByZXR1cm4gY3VycmVudFRhcmdldCB8fCByZWZlcmVuY2U7XG4gIH1cblxuICBmdW5jdGlvbiBnZXREZWZhdWx0VGVtcGxhdGVDaGlsZHJlbigpIHtcbiAgICByZXR1cm4gZ2V0Q2hpbGRyZW4ocG9wcGVyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldERlbGF5KGlzU2hvdykge1xuICAgIC8vIEZvciB0b3VjaCBvciBrZXlib2FyZCBpbnB1dCwgZm9yY2UgYDBgIGRlbGF5IGZvciBVWCByZWFzb25zXG4gICAgLy8gQWxzbyBpZiB0aGUgaW5zdGFuY2UgaXMgbW91bnRlZCBidXQgbm90IHZpc2libGUgKHRyYW5zaXRpb25pbmcgb3V0KSxcbiAgICAvLyBpZ25vcmUgZGVsYXlcbiAgICBpZiAoaW5zdGFuY2Uuc3RhdGUuaXNNb3VudGVkICYmICFpbnN0YW5jZS5zdGF0ZS5pc1Zpc2libGUgfHwgY3VycmVudElucHV0LmlzVG91Y2ggfHwgbGFzdFRyaWdnZXJFdmVudCAmJiBsYXN0VHJpZ2dlckV2ZW50LnR5cGUgPT09ICdmb2N1cycpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIHJldHVybiBnZXRWYWx1ZUF0SW5kZXhPclJldHVybihpbnN0YW5jZS5wcm9wcy5kZWxheSwgaXNTaG93ID8gMCA6IDEsIGRlZmF1bHRQcm9wcy5kZWxheSk7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVTdHlsZXMoKSB7XG4gICAgcG9wcGVyLnN0eWxlLnBvaW50ZXJFdmVudHMgPSBpbnN0YW5jZS5wcm9wcy5pbnRlcmFjdGl2ZSAmJiBpbnN0YW5jZS5zdGF0ZS5pc1Zpc2libGUgPyAnJyA6ICdub25lJztcbiAgICBwb3BwZXIuc3R5bGUuekluZGV4ID0gXCJcIiArIGluc3RhbmNlLnByb3BzLnpJbmRleDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUlPU0NsYXNzKGlzQWRkKSB7XG4gICAgdmFyIHNob3VsZEFkZCA9IGlzQWRkICYmIGlzSU9TICYmIGN1cnJlbnRJbnB1dC5pc1RvdWNoO1xuICAgIGRvYy5ib2R5LmNsYXNzTGlzdFtzaG91bGRBZGQgPyAnYWRkJyA6ICdyZW1vdmUnXShJT1NfQ0xBU1MpO1xuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlSG9vayhob29rLCBhcmdzLCBzaG91bGRJbnZva2VQcm9wc0hvb2spIHtcbiAgICBpZiAoc2hvdWxkSW52b2tlUHJvcHNIb29rID09PSB2b2lkIDApIHtcbiAgICAgIHNob3VsZEludm9rZVByb3BzSG9vayA9IHRydWU7XG4gICAgfVxuXG4gICAgcGx1Z2luc0hvb2tzLmZvckVhY2goZnVuY3Rpb24gKHBsdWdpbkhvb2tzKSB7XG4gICAgICBpZiAocGx1Z2luSG9va3NbaG9va10pIHtcbiAgICAgICAgcGx1Z2luSG9va3NbaG9va10uYXBwbHkodm9pZCAwLCBhcmdzKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChzaG91bGRJbnZva2VQcm9wc0hvb2spIHtcbiAgICAgIHZhciBfaW5zdGFuY2UkcHJvcHM7XG5cbiAgICAgIChfaW5zdGFuY2UkcHJvcHMgPSBpbnN0YW5jZS5wcm9wcylbaG9va10uYXBwbHkoX2luc3RhbmNlJHByb3BzLCBhcmdzKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVBcmlhQ29udGVudEF0dHJpYnV0ZSgpIHtcbiAgICB2YXIgYXJpYSA9IGluc3RhbmNlLnByb3BzLmFyaWE7XG5cbiAgICBpZiAoIWFyaWEuY29udGVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBhdHRyID0gXCJhcmlhLVwiICsgYXJpYS5jb250ZW50O1xuICAgIHZhciBpZCA9IHBvcHBlci5pZDtcbiAgICB2YXIgbm9kZXMgPSBub3JtYWxpemVUb0FycmF5KGluc3RhbmNlLnByb3BzLnRyaWdnZXJUYXJnZXQgfHwgcmVmZXJlbmNlKTtcbiAgICBub2Rlcy5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICB2YXIgY3VycmVudFZhbHVlID0gbm9kZS5nZXRBdHRyaWJ1dGUoYXR0cik7XG5cbiAgICAgIGlmIChpbnN0YW5jZS5zdGF0ZS5pc1Zpc2libGUpIHtcbiAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoYXR0ciwgY3VycmVudFZhbHVlID8gY3VycmVudFZhbHVlICsgXCIgXCIgKyBpZCA6IGlkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBuZXh0VmFsdWUgPSBjdXJyZW50VmFsdWUgJiYgY3VycmVudFZhbHVlLnJlcGxhY2UoaWQsICcnKS50cmltKCk7XG5cbiAgICAgICAgaWYgKG5leHRWYWx1ZSkge1xuICAgICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKGF0dHIsIG5leHRWYWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoYXR0cik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUFyaWFFeHBhbmRlZEF0dHJpYnV0ZSgpIHtcbiAgICBpZiAoaGFzQXJpYUV4cGFuZGVkIHx8ICFpbnN0YW5jZS5wcm9wcy5hcmlhLmV4cGFuZGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG5vZGVzID0gbm9ybWFsaXplVG9BcnJheShpbnN0YW5jZS5wcm9wcy50cmlnZ2VyVGFyZ2V0IHx8IHJlZmVyZW5jZSk7XG4gICAgbm9kZXMuZm9yRWFjaChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgaWYgKGluc3RhbmNlLnByb3BzLmludGVyYWN0aXZlKSB7XG4gICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgaW5zdGFuY2Uuc3RhdGUuaXNWaXNpYmxlICYmIG5vZGUgPT09IGdldEN1cnJlbnRUYXJnZXQoKSA/ICd0cnVlJyA6ICdmYWxzZScpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsZWFudXBJbnRlcmFjdGl2ZU1vdXNlTGlzdGVuZXJzKCkge1xuICAgIGRvYy5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCBzY2hlZHVsZUhpZGUpO1xuICAgIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBkZWJvdW5jZWRPbk1vdXNlTW92ZSk7XG4gICAgbW91c2VNb3ZlTGlzdGVuZXJzID0gbW91c2VNb3ZlTGlzdGVuZXJzLmZpbHRlcihmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBsaXN0ZW5lciAhPT0gZGVib3VuY2VkT25Nb3VzZU1vdmU7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBvbkRvY3VtZW50TW91c2VEb3duKGV2ZW50KSB7XG4gICAgLy8gQ2xpY2tlZCBvbiBpbnRlcmFjdGl2ZSBwb3BwZXJcbiAgICBpZiAoaW5zdGFuY2UucHJvcHMuaW50ZXJhY3RpdmUgJiYgcG9wcGVyLmNvbnRhaW5zKGV2ZW50LnRhcmdldCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIENsaWNrZWQgb24gdGhlIGV2ZW50IGxpc3RlbmVycyB0YXJnZXRcblxuXG4gICAgaWYgKGdldEN1cnJlbnRUYXJnZXQoKS5jb250YWlucyhldmVudC50YXJnZXQpKSB7XG4gICAgICBpZiAoY3VycmVudElucHV0LmlzVG91Y2gpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaW5zdGFuY2Uuc3RhdGUuaXNWaXNpYmxlICYmIGluc3RhbmNlLnByb3BzLnRyaWdnZXIuaW5kZXhPZignY2xpY2snKSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaW5zdGFuY2UucHJvcHMub25DbGlja091dHNpZGUoaW5zdGFuY2UsIGV2ZW50KTtcbiAgICB9XG5cbiAgICBpZiAoaW5zdGFuY2UucHJvcHMuaGlkZU9uQ2xpY2sgPT09IHRydWUpIHtcbiAgICAgIGlzVmlzaWJsZUZyb21DbGljayA9IGZhbHNlO1xuICAgICAgaW5zdGFuY2UuY2xlYXJEZWxheVRpbWVvdXRzKCk7XG4gICAgICBpbnN0YW5jZS5oaWRlKCk7IC8vIGBtb3VzZWRvd25gIGV2ZW50IGlzIGZpcmVkIHJpZ2h0IGJlZm9yZSBgZm9jdXNgIGlmIHByZXNzaW5nIHRoZVxuICAgICAgLy8gY3VycmVudFRhcmdldC4gVGhpcyBsZXRzIGEgdGlwcHkgd2l0aCBgZm9jdXNgIHRyaWdnZXIga25vdyB0aGF0IGl0XG4gICAgICAvLyBzaG91bGQgbm90IHNob3dcblxuICAgICAgZGlkSGlkZUR1ZVRvRG9jdW1lbnRNb3VzZURvd24gPSB0cnVlO1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGRpZEhpZGVEdWVUb0RvY3VtZW50TW91c2VEb3duID0gZmFsc2U7XG4gICAgICB9KTsgLy8gVGhlIGxpc3RlbmVyIGdldHMgYWRkZWQgaW4gYHNjaGVkdWxlU2hvdygpYCwgYnV0IHRoaXMgbWF5IGJlIGhpZGluZyBpdFxuICAgICAgLy8gYmVmb3JlIGl0IHNob3dzLCBhbmQgaGlkZSgpJ3MgZWFybHkgYmFpbC1vdXQgYmVoYXZpb3IgY2FuIHByZXZlbnQgaXRcbiAgICAgIC8vIGZyb20gYmVpbmcgY2xlYW5lZCB1cFxuXG4gICAgICBpZiAoIWluc3RhbmNlLnN0YXRlLmlzTW91bnRlZCkge1xuICAgICAgICByZW1vdmVEb2N1bWVudE1vdXNlRG93bkxpc3RlbmVyKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYWRkRG9jdW1lbnRNb3VzZURvd25MaXN0ZW5lcigpIHtcbiAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgb25Eb2N1bWVudE1vdXNlRG93biwgdHJ1ZSk7XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVEb2N1bWVudE1vdXNlRG93bkxpc3RlbmVyKCkge1xuICAgIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBvbkRvY3VtZW50TW91c2VEb3duLCB0cnVlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uVHJhbnNpdGlvbmVkT3V0KGR1cmF0aW9uLCBjYWxsYmFjaykge1xuICAgIG9uVHJhbnNpdGlvbkVuZChkdXJhdGlvbiwgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFpbnN0YW5jZS5zdGF0ZS5pc1Zpc2libGUgJiYgcG9wcGVyLnBhcmVudE5vZGUgJiYgcG9wcGVyLnBhcmVudE5vZGUuY29udGFpbnMocG9wcGVyKSkge1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gb25UcmFuc2l0aW9uZWRJbihkdXJhdGlvbiwgY2FsbGJhY2spIHtcbiAgICBvblRyYW5zaXRpb25FbmQoZHVyYXRpb24sIGNhbGxiYWNrKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uVHJhbnNpdGlvbkVuZChkdXJhdGlvbiwgY2FsbGJhY2spIHtcbiAgICB2YXIgYm94ID0gZ2V0RGVmYXVsdFRlbXBsYXRlQ2hpbGRyZW4oKS5ib3g7XG5cbiAgICBmdW5jdGlvbiBsaXN0ZW5lcihldmVudCkge1xuICAgICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gYm94KSB7XG4gICAgICAgIHVwZGF0ZVRyYW5zaXRpb25FbmRMaXN0ZW5lcihib3gsICdyZW1vdmUnLCBsaXN0ZW5lcik7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgfSAvLyBNYWtlIGNhbGxiYWNrIHN5bmNocm9ub3VzIGlmIGR1cmF0aW9uIGlzIDBcbiAgICAvLyBgdHJhbnNpdGlvbmVuZGAgd29uJ3QgZmlyZSBvdGhlcndpc2VcblxuXG4gICAgaWYgKGR1cmF0aW9uID09PSAwKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9XG5cbiAgICB1cGRhdGVUcmFuc2l0aW9uRW5kTGlzdGVuZXIoYm94LCAncmVtb3ZlJywgY3VycmVudFRyYW5zaXRpb25FbmRMaXN0ZW5lcik7XG4gICAgdXBkYXRlVHJhbnNpdGlvbkVuZExpc3RlbmVyKGJveCwgJ2FkZCcsIGxpc3RlbmVyKTtcbiAgICBjdXJyZW50VHJhbnNpdGlvbkVuZExpc3RlbmVyID0gbGlzdGVuZXI7XG4gIH1cblxuICBmdW5jdGlvbiBvbihldmVudFR5cGUsIGhhbmRsZXIsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIG5vZGVzID0gbm9ybWFsaXplVG9BcnJheShpbnN0YW5jZS5wcm9wcy50cmlnZ2VyVGFyZ2V0IHx8IHJlZmVyZW5jZSk7XG4gICAgbm9kZXMuZm9yRWFjaChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgaGFuZGxlciwgb3B0aW9ucyk7XG4gICAgICBsaXN0ZW5lcnMucHVzaCh7XG4gICAgICAgIG5vZGU6IG5vZGUsXG4gICAgICAgIGV2ZW50VHlwZTogZXZlbnRUeXBlLFxuICAgICAgICBoYW5kbGVyOiBoYW5kbGVyLFxuICAgICAgICBvcHRpb25zOiBvcHRpb25zXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZExpc3RlbmVycygpIHtcbiAgICBpZiAoZ2V0SXNDdXN0b21Ub3VjaEJlaGF2aW9yKCkpIHtcbiAgICAgIG9uKCd0b3VjaHN0YXJ0Jywgb25UcmlnZ2VyLCBQQVNTSVZFKTtcbiAgICAgIG9uKCd0b3VjaGVuZCcsIG9uTW91c2VMZWF2ZSwgUEFTU0lWRSk7XG4gICAgfVxuXG4gICAgc3BsaXRCeVNwYWNlcyhpbnN0YW5jZS5wcm9wcy50cmlnZ2VyKS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudFR5cGUpIHtcbiAgICAgIGlmIChldmVudFR5cGUgPT09ICdtYW51YWwnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgb24oZXZlbnRUeXBlLCBvblRyaWdnZXIpO1xuXG4gICAgICBzd2l0Y2ggKGV2ZW50VHlwZSkge1xuICAgICAgICBjYXNlICdtb3VzZWVudGVyJzpcbiAgICAgICAgICBvbignbW91c2VsZWF2ZScsIG9uTW91c2VMZWF2ZSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnZm9jdXMnOlxuICAgICAgICAgIG9uKGlzSUUgPyAnZm9jdXNvdXQnIDogJ2JsdXInLCBvbkJsdXJPckZvY3VzT3V0KTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdmb2N1c2luJzpcbiAgICAgICAgICBvbignZm9jdXNvdXQnLCBvbkJsdXJPckZvY3VzT3V0KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVycygpIHtcbiAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAoX3JlZikge1xuICAgICAgdmFyIG5vZGUgPSBfcmVmLm5vZGUsXG4gICAgICAgICAgZXZlbnRUeXBlID0gX3JlZi5ldmVudFR5cGUsXG4gICAgICAgICAgaGFuZGxlciA9IF9yZWYuaGFuZGxlcixcbiAgICAgICAgICBvcHRpb25zID0gX3JlZi5vcHRpb25zO1xuICAgICAgbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgaGFuZGxlciwgb3B0aW9ucyk7XG4gICAgfSk7XG4gICAgbGlzdGVuZXJzID0gW107XG4gIH1cblxuICBmdW5jdGlvbiBvblRyaWdnZXIoZXZlbnQpIHtcbiAgICB2YXIgc2hvdWxkU2NoZWR1bGVDbGlja0hpZGUgPSBmYWxzZTtcblxuICAgIGlmICghaW5zdGFuY2Uuc3RhdGUuaXNFbmFibGVkIHx8IGlzRXZlbnRMaXN0ZW5lclN0b3BwZWQoZXZlbnQpIHx8IGRpZEhpZGVEdWVUb0RvY3VtZW50TW91c2VEb3duKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGFzdFRyaWdnZXJFdmVudCA9IGV2ZW50O1xuICAgIGN1cnJlbnRUYXJnZXQgPSBldmVudC5jdXJyZW50VGFyZ2V0O1xuICAgIGhhbmRsZUFyaWFFeHBhbmRlZEF0dHJpYnV0ZSgpO1xuXG4gICAgaWYgKCFpbnN0YW5jZS5zdGF0ZS5pc1Zpc2libGUgJiYgaXNNb3VzZUV2ZW50KGV2ZW50KSkge1xuICAgICAgLy8gSWYgc2Nyb2xsaW5nLCBgbW91c2VlbnRlcmAgZXZlbnRzIGNhbiBiZSBmaXJlZCBpZiB0aGUgY3Vyc29yIGxhbmRzXG4gICAgICAvLyBvdmVyIGEgbmV3IHRhcmdldCwgYnV0IGBtb3VzZW1vdmVgIGV2ZW50cyBkb24ndCBnZXQgZmlyZWQuIFRoaXNcbiAgICAgIC8vIGNhdXNlcyBpbnRlcmFjdGl2ZSB0b29sdGlwcyB0byBnZXQgc3R1Y2sgb3BlbiB1bnRpbCB0aGUgY3Vyc29yIGlzXG4gICAgICAvLyBtb3ZlZFxuICAgICAgbW91c2VNb3ZlTGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICAgIHJldHVybiBsaXN0ZW5lcihldmVudCk7XG4gICAgICB9KTtcbiAgICB9IC8vIFRvZ2dsZSBzaG93L2hpZGUgd2hlbiBjbGlja2luZyBjbGljay10cmlnZ2VyZWQgdG9vbHRpcHNcblxuXG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICdjbGljaycgJiYgKGluc3RhbmNlLnByb3BzLnRyaWdnZXIuaW5kZXhPZignbW91c2VlbnRlcicpIDwgMCB8fCBpc1Zpc2libGVGcm9tQ2xpY2spICYmIGluc3RhbmNlLnByb3BzLmhpZGVPbkNsaWNrICE9PSBmYWxzZSAmJiBpbnN0YW5jZS5zdGF0ZS5pc1Zpc2libGUpIHtcbiAgICAgIHNob3VsZFNjaGVkdWxlQ2xpY2tIaWRlID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIF9nZXROb3JtYWxpemVkVG91Y2hTZSA9IGdldE5vcm1hbGl6ZWRUb3VjaFNldHRpbmdzKCksXG4gICAgICAgICAgdmFsdWUgPSBfZ2V0Tm9ybWFsaXplZFRvdWNoU2VbMF0sXG4gICAgICAgICAgZHVyYXRpb24gPSBfZ2V0Tm9ybWFsaXplZFRvdWNoU2VbMV07XG5cbiAgICAgIGlmIChjdXJyZW50SW5wdXQuaXNUb3VjaCAmJiB2YWx1ZSA9PT0gJ2hvbGQnICYmIGR1cmF0aW9uKSB7XG4gICAgICAgIC8vIFdlIGNhbiBoaWphY2sgdGhlIHNob3cgdGltZW91dCBoZXJlLCBpdCB3aWxsIGJlIGNsZWFyZWQgYnlcbiAgICAgICAgLy8gYHNjaGVkdWxlSGlkZSgpYCB3aGVuIG5lY2Vzc2FyeVxuICAgICAgICBzaG93VGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHNjaGVkdWxlU2hvdyhldmVudCk7XG4gICAgICAgIH0sIGR1cmF0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNjaGVkdWxlU2hvdyhldmVudCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICdjbGljaycpIHtcbiAgICAgIGlzVmlzaWJsZUZyb21DbGljayA9ICFzaG91bGRTY2hlZHVsZUNsaWNrSGlkZTtcbiAgICB9XG5cbiAgICBpZiAoc2hvdWxkU2NoZWR1bGVDbGlja0hpZGUpIHtcbiAgICAgIHNjaGVkdWxlSGlkZShldmVudCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25Nb3VzZU1vdmUoZXZlbnQpIHtcbiAgICB2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuICAgIHZhciBpc0N1cnNvck92ZXJSZWZlcmVuY2VPclBvcHBlciA9IHJlZmVyZW5jZS5jb250YWlucyh0YXJnZXQpIHx8IHBvcHBlci5jb250YWlucyh0YXJnZXQpO1xuXG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICdtb3VzZW1vdmUnICYmIGlzQ3Vyc29yT3ZlclJlZmVyZW5jZU9yUG9wcGVyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHBvcHBlclRyZWVEYXRhID0gZ2V0TmVzdGVkUG9wcGVyVHJlZSgpLmNvbmNhdChwb3BwZXIpLm1hcChmdW5jdGlvbiAocG9wcGVyKSB7XG4gICAgICB2YXIgX2luc3RhbmNlJHBvcHBlckluc3RhO1xuXG4gICAgICB2YXIgaW5zdGFuY2UgPSBwb3BwZXIuX3RpcHB5O1xuICAgICAgdmFyIHN0YXRlID0gKF9pbnN0YW5jZSRwb3BwZXJJbnN0YSA9IGluc3RhbmNlLnBvcHBlckluc3RhbmNlKSA9PSBudWxsID8gdm9pZCAwIDogX2luc3RhbmNlJHBvcHBlckluc3RhLnN0YXRlO1xuXG4gICAgICBpZiAoc3RhdGUpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBwb3BwZXJSZWN0OiBwb3BwZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICAgICAgcG9wcGVyU3RhdGU6IHN0YXRlLFxuICAgICAgICAgIHByb3BzOiBwcm9wc1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9KS5maWx0ZXIoQm9vbGVhbik7XG5cbiAgICBpZiAoaXNDdXJzb3JPdXRzaWRlSW50ZXJhY3RpdmVCb3JkZXIocG9wcGVyVHJlZURhdGEsIGV2ZW50KSkge1xuICAgICAgY2xlYW51cEludGVyYWN0aXZlTW91c2VMaXN0ZW5lcnMoKTtcbiAgICAgIHNjaGVkdWxlSGlkZShldmVudCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25Nb3VzZUxlYXZlKGV2ZW50KSB7XG4gICAgdmFyIHNob3VsZEJhaWwgPSBpc0V2ZW50TGlzdGVuZXJTdG9wcGVkKGV2ZW50KSB8fCBpbnN0YW5jZS5wcm9wcy50cmlnZ2VyLmluZGV4T2YoJ2NsaWNrJykgPj0gMCAmJiBpc1Zpc2libGVGcm9tQ2xpY2s7XG5cbiAgICBpZiAoc2hvdWxkQmFpbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpbnN0YW5jZS5wcm9wcy5pbnRlcmFjdGl2ZSkge1xuICAgICAgZG9jLmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIHNjaGVkdWxlSGlkZSk7XG4gICAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgZGVib3VuY2VkT25Nb3VzZU1vdmUpO1xuICAgICAgcHVzaElmVW5pcXVlKG1vdXNlTW92ZUxpc3RlbmVycywgZGVib3VuY2VkT25Nb3VzZU1vdmUpO1xuICAgICAgZGVib3VuY2VkT25Nb3VzZU1vdmUoZXZlbnQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHNjaGVkdWxlSGlkZShldmVudCk7XG4gIH1cblxuICBmdW5jdGlvbiBvbkJsdXJPckZvY3VzT3V0KGV2ZW50KSB7XG4gICAgaWYgKGluc3RhbmNlLnByb3BzLnRyaWdnZXIuaW5kZXhPZignZm9jdXNpbicpIDwgMCAmJiBldmVudC50YXJnZXQgIT09IGdldEN1cnJlbnRUYXJnZXQoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gSWYgZm9jdXMgd2FzIG1vdmVkIHRvIHdpdGhpbiB0aGUgcG9wcGVyXG5cblxuICAgIGlmIChpbnN0YW5jZS5wcm9wcy5pbnRlcmFjdGl2ZSAmJiBldmVudC5yZWxhdGVkVGFyZ2V0ICYmIHBvcHBlci5jb250YWlucyhldmVudC5yZWxhdGVkVGFyZ2V0KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHNjaGVkdWxlSGlkZShldmVudCk7XG4gIH1cblxuICBmdW5jdGlvbiBpc0V2ZW50TGlzdGVuZXJTdG9wcGVkKGV2ZW50KSB7XG4gICAgcmV0dXJuIGN1cnJlbnRJbnB1dC5pc1RvdWNoID8gZ2V0SXNDdXN0b21Ub3VjaEJlaGF2aW9yKCkgIT09IGV2ZW50LnR5cGUuaW5kZXhPZigndG91Y2gnKSA+PSAwIDogZmFsc2U7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVQb3BwZXJJbnN0YW5jZSgpIHtcbiAgICBkZXN0cm95UG9wcGVySW5zdGFuY2UoKTtcbiAgICB2YXIgX2luc3RhbmNlJHByb3BzMiA9IGluc3RhbmNlLnByb3BzLFxuICAgICAgICBwb3BwZXJPcHRpb25zID0gX2luc3RhbmNlJHByb3BzMi5wb3BwZXJPcHRpb25zLFxuICAgICAgICBwbGFjZW1lbnQgPSBfaW5zdGFuY2UkcHJvcHMyLnBsYWNlbWVudCxcbiAgICAgICAgb2Zmc2V0ID0gX2luc3RhbmNlJHByb3BzMi5vZmZzZXQsXG4gICAgICAgIGdldFJlZmVyZW5jZUNsaWVudFJlY3QgPSBfaW5zdGFuY2UkcHJvcHMyLmdldFJlZmVyZW5jZUNsaWVudFJlY3QsXG4gICAgICAgIG1vdmVUcmFuc2l0aW9uID0gX2luc3RhbmNlJHByb3BzMi5tb3ZlVHJhbnNpdGlvbjtcbiAgICB2YXIgYXJyb3cgPSBnZXRJc0RlZmF1bHRSZW5kZXJGbigpID8gZ2V0Q2hpbGRyZW4ocG9wcGVyKS5hcnJvdyA6IG51bGw7XG4gICAgdmFyIGNvbXB1dGVkUmVmZXJlbmNlID0gZ2V0UmVmZXJlbmNlQ2xpZW50UmVjdCA/IHtcbiAgICAgIGdldEJvdW5kaW5nQ2xpZW50UmVjdDogZ2V0UmVmZXJlbmNlQ2xpZW50UmVjdFxuICAgIH0gOiByZWZlcmVuY2U7XG4gICAgdmFyIHRpcHB5TW9kaWZpZXIgPSB7XG4gICAgICBuYW1lOiAnJCR0aXBweScsXG4gICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgcGhhc2U6ICdiZWZvcmVXcml0ZScsXG4gICAgICByZXF1aXJlczogWydjb21wdXRlU3R5bGVzJ10sXG4gICAgICBmbjogZnVuY3Rpb24gZm4oX3JlZjIpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gX3JlZjIuc3RhdGU7XG5cbiAgICAgICAgaWYgKGdldElzRGVmYXVsdFJlbmRlckZuKCkpIHtcbiAgICAgICAgICB2YXIgX2dldERlZmF1bHRUZW1wbGF0ZUNoID0gZ2V0RGVmYXVsdFRlbXBsYXRlQ2hpbGRyZW4oKSxcbiAgICAgICAgICAgICAgYm94ID0gX2dldERlZmF1bHRUZW1wbGF0ZUNoLmJveDtcblxuICAgICAgICAgIFsncGxhY2VtZW50JywgJ3JlZmVyZW5jZS1oaWRkZW4nLCAnZXNjYXBlZCddLmZvckVhY2goZnVuY3Rpb24gKGF0dHIpIHtcbiAgICAgICAgICAgIGlmIChhdHRyID09PSAncGxhY2VtZW50Jykge1xuICAgICAgICAgICAgICBib3guc2V0QXR0cmlidXRlKCdkYXRhLXBsYWNlbWVudCcsIHN0YXRlLnBsYWNlbWVudCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAoc3RhdGUuYXR0cmlidXRlcy5wb3BwZXJbXCJkYXRhLXBvcHBlci1cIiArIGF0dHJdKSB7XG4gICAgICAgICAgICAgICAgYm94LnNldEF0dHJpYnV0ZShcImRhdGEtXCIgKyBhdHRyLCAnJyk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYm94LnJlbW92ZUF0dHJpYnV0ZShcImRhdGEtXCIgKyBhdHRyKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHN0YXRlLmF0dHJpYnV0ZXMucG9wcGVyID0ge307XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciBhcnJvd01vZGlmaWVyID0ge1xuICAgICAgbmFtZTogJ2Fycm93JyxcbiAgICAgIGVuYWJsZWQ6ICEhYXJyb3csXG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIGVsZW1lbnQ6IGFycm93LFxuICAgICAgICBwYWRkaW5nOiAzXG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgbW9kaWZpZXJzID0gW3tcbiAgICAgIG5hbWU6ICdvZmZzZXQnLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICBvZmZzZXQ6IG9mZnNldFxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIG5hbWU6ICdwcmV2ZW50T3ZlcmZsb3cnLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICBwYWRkaW5nOiB7XG4gICAgICAgICAgdG9wOiAyLFxuICAgICAgICAgIGJvdHRvbTogMixcbiAgICAgICAgICBsZWZ0OiA1LFxuICAgICAgICAgIHJpZ2h0OiA1XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBuYW1lOiAnZmxpcCcsXG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIHBhZGRpbmc6IDVcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBuYW1lOiAnY29tcHV0ZVN0eWxlcycsXG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIGFkYXB0aXZlOiAhbW92ZVRyYW5zaXRpb25cbiAgICAgIH1cbiAgICB9XS5jb25jYXQoZ2V0SXNEZWZhdWx0UmVuZGVyRm4oKSA/IFthcnJvd01vZGlmaWVyXSA6IFtdLCAocG9wcGVyT3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogcG9wcGVyT3B0aW9ucy5tb2RpZmllcnMpIHx8IFtdLCBbdGlwcHlNb2RpZmllcl0pO1xuICAgIGluc3RhbmNlLnBvcHBlckluc3RhbmNlID0gY29yZS5jcmVhdGVQb3BwZXIoY29tcHV0ZWRSZWZlcmVuY2UsIHBvcHBlciwgT2JqZWN0LmFzc2lnbih7fSwgcG9wcGVyT3B0aW9ucywge1xuICAgICAgcGxhY2VtZW50OiBwbGFjZW1lbnQsXG4gICAgICBvbkZpcnN0VXBkYXRlOiBvbkZpcnN0VXBkYXRlLFxuICAgICAgbW9kaWZpZXJzOiBtb2RpZmllcnNcbiAgICB9KSk7XG4gIH1cblxuICBmdW5jdGlvbiBkZXN0cm95UG9wcGVySW5zdGFuY2UoKSB7XG4gICAgaWYgKGluc3RhbmNlLnBvcHBlckluc3RhbmNlKSB7XG4gICAgICBpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZS5kZXN0cm95KCk7XG4gICAgICBpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZSA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgdmFyIGFwcGVuZFRvID0gaW5zdGFuY2UucHJvcHMuYXBwZW5kVG87XG4gICAgdmFyIHBhcmVudE5vZGU7IC8vIEJ5IGRlZmF1bHQsIHdlJ2xsIGFwcGVuZCB0aGUgcG9wcGVyIHRvIHRoZSB0cmlnZ2VyVGFyZ2V0cydzIHBhcmVudE5vZGUgc29cbiAgICAvLyBpdCdzIGRpcmVjdGx5IGFmdGVyIHRoZSByZWZlcmVuY2UgZWxlbWVudCBzbyB0aGUgZWxlbWVudHMgaW5zaWRlIHRoZVxuICAgIC8vIHRpcHB5IGNhbiBiZSB0YWJiZWQgdG9cbiAgICAvLyBJZiB0aGVyZSBhcmUgY2xpcHBpbmcgaXNzdWVzLCB0aGUgdXNlciBjYW4gc3BlY2lmeSBhIGRpZmZlcmVudCBhcHBlbmRUb1xuICAgIC8vIGFuZCBlbnN1cmUgZm9jdXMgbWFuYWdlbWVudCBpcyBoYW5kbGVkIGNvcnJlY3RseSBtYW51YWxseVxuXG4gICAgdmFyIG5vZGUgPSBnZXRDdXJyZW50VGFyZ2V0KCk7XG5cbiAgICBpZiAoaW5zdGFuY2UucHJvcHMuaW50ZXJhY3RpdmUgJiYgYXBwZW5kVG8gPT09IGRlZmF1bHRQcm9wcy5hcHBlbmRUbyB8fCBhcHBlbmRUbyA9PT0gJ3BhcmVudCcpIHtcbiAgICAgIHBhcmVudE5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcmVudE5vZGUgPSBpbnZva2VXaXRoQXJnc09yUmV0dXJuKGFwcGVuZFRvLCBbbm9kZV0pO1xuICAgIH0gLy8gVGhlIHBvcHBlciBlbGVtZW50IG5lZWRzIHRvIGV4aXN0IG9uIHRoZSBET00gYmVmb3JlIGl0cyBwb3NpdGlvbiBjYW4gYmVcbiAgICAvLyB1cGRhdGVkIGFzIFBvcHBlciBuZWVkcyB0byByZWFkIGl0cyBkaW1lbnNpb25zXG5cblxuICAgIGlmICghcGFyZW50Tm9kZS5jb250YWlucyhwb3BwZXIpKSB7XG4gICAgICBwYXJlbnROb2RlLmFwcGVuZENoaWxkKHBvcHBlcik7XG4gICAgfVxuXG4gICAgY3JlYXRlUG9wcGVySW5zdGFuY2UoKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgLy8gQWNjZXNzaWJpbGl0eSBjaGVja1xuICAgICAgd2FybldoZW4oaW5zdGFuY2UucHJvcHMuaW50ZXJhY3RpdmUgJiYgYXBwZW5kVG8gPT09IGRlZmF1bHRQcm9wcy5hcHBlbmRUbyAmJiBub2RlLm5leHRFbGVtZW50U2libGluZyAhPT0gcG9wcGVyLCBbJ0ludGVyYWN0aXZlIHRpcHB5IGVsZW1lbnQgbWF5IG5vdCBiZSBhY2Nlc3NpYmxlIHZpYSBrZXlib2FyZCcsICduYXZpZ2F0aW9uIGJlY2F1c2UgaXQgaXMgbm90IGRpcmVjdGx5IGFmdGVyIHRoZSByZWZlcmVuY2UgZWxlbWVudCcsICdpbiB0aGUgRE9NIHNvdXJjZSBvcmRlci4nLCAnXFxuXFxuJywgJ1VzaW5nIGEgd3JhcHBlciA8ZGl2PiBvciA8c3Bhbj4gdGFnIGFyb3VuZCB0aGUgcmVmZXJlbmNlIGVsZW1lbnQnLCAnc29sdmVzIHRoaXMgYnkgY3JlYXRpbmcgYSBuZXcgcGFyZW50Tm9kZSBjb250ZXh0LicsICdcXG5cXG4nLCAnU3BlY2lmeWluZyBgYXBwZW5kVG86IGRvY3VtZW50LmJvZHlgIHNpbGVuY2VzIHRoaXMgd2FybmluZywgYnV0IGl0JywgJ2Fzc3VtZXMgeW91IGFyZSB1c2luZyBhIGZvY3VzIG1hbmFnZW1lbnQgc29sdXRpb24gdG8gaGFuZGxlJywgJ2tleWJvYXJkIG5hdmlnYXRpb24uJywgJ1xcblxcbicsICdTZWU6IGh0dHBzOi8vYXRvbWlrcy5naXRodWIuaW8vdGlwcHlqcy92Ni9hY2Nlc3NpYmlsaXR5LyNpbnRlcmFjdGl2aXR5J10uam9pbignICcpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXROZXN0ZWRQb3BwZXJUcmVlKCkge1xuICAgIHJldHVybiBhcnJheUZyb20ocG9wcGVyLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLXRpcHB5LXJvb3RdJykpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2NoZWR1bGVTaG93KGV2ZW50KSB7XG4gICAgaW5zdGFuY2UuY2xlYXJEZWxheVRpbWVvdXRzKCk7XG5cbiAgICBpZiAoZXZlbnQpIHtcbiAgICAgIGludm9rZUhvb2soJ29uVHJpZ2dlcicsIFtpbnN0YW5jZSwgZXZlbnRdKTtcbiAgICB9XG5cbiAgICBhZGREb2N1bWVudE1vdXNlRG93bkxpc3RlbmVyKCk7XG4gICAgdmFyIGRlbGF5ID0gZ2V0RGVsYXkodHJ1ZSk7XG5cbiAgICBpZiAoZGVsYXkpIHtcbiAgICAgIHNob3dUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGluc3RhbmNlLnNob3coKTtcbiAgICAgIH0sIGRlbGF5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5zdGFuY2Uuc2hvdygpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNjaGVkdWxlSGlkZShldmVudCkge1xuICAgIGluc3RhbmNlLmNsZWFyRGVsYXlUaW1lb3V0cygpO1xuICAgIGludm9rZUhvb2soJ29uVW50cmlnZ2VyJywgW2luc3RhbmNlLCBldmVudF0pO1xuXG4gICAgaWYgKCFpbnN0YW5jZS5zdGF0ZS5pc1Zpc2libGUpIHtcbiAgICAgIHJlbW92ZURvY3VtZW50TW91c2VEb3duTGlzdGVuZXIoKTtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIEZvciBpbnRlcmFjdGl2ZSB0aXBwaWVzLCBzY2hlZHVsZUhpZGUgaXMgYWRkZWQgdG8gYSBkb2N1bWVudC5ib2R5IGhhbmRsZXJcbiAgICAvLyBmcm9tIG9uTW91c2VMZWF2ZSBzbyBtdXN0IGludGVyY2VwdCBzY2hlZHVsZWQgaGlkZXMgZnJvbSBtb3VzZW1vdmUvbGVhdmVcbiAgICAvLyBldmVudHMgd2hlbiB0cmlnZ2VyIGNvbnRhaW5zIG1vdXNlZW50ZXIgYW5kIGNsaWNrLCBhbmQgdGhlIHRpcCBpc1xuICAgIC8vIGN1cnJlbnRseSBzaG93biBhcyBhIHJlc3VsdCBvZiBhIGNsaWNrLlxuXG5cbiAgICBpZiAoaW5zdGFuY2UucHJvcHMudHJpZ2dlci5pbmRleE9mKCdtb3VzZWVudGVyJykgPj0gMCAmJiBpbnN0YW5jZS5wcm9wcy50cmlnZ2VyLmluZGV4T2YoJ2NsaWNrJykgPj0gMCAmJiBbJ21vdXNlbGVhdmUnLCAnbW91c2Vtb3ZlJ10uaW5kZXhPZihldmVudC50eXBlKSA+PSAwICYmIGlzVmlzaWJsZUZyb21DbGljaykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBkZWxheSA9IGdldERlbGF5KGZhbHNlKTtcblxuICAgIGlmIChkZWxheSkge1xuICAgICAgaGlkZVRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZSkge1xuICAgICAgICAgIGluc3RhbmNlLmhpZGUoKTtcbiAgICAgICAgfVxuICAgICAgfSwgZGVsYXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBGaXhlcyBhIGB0cmFuc2l0aW9uZW5kYCBwcm9ibGVtIHdoZW4gaXQgZmlyZXMgMSBmcmFtZSB0b29cbiAgICAgIC8vIGxhdGUgc29tZXRpbWVzLCB3ZSBkb24ndCB3YW50IGhpZGUoKSB0byBiZSBjYWxsZWQuXG4gICAgICBzY2hlZHVsZUhpZGVBbmltYXRpb25GcmFtZSA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGluc3RhbmNlLmhpZGUoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgLy8g8J+UkSBQdWJsaWMgbWV0aG9kc1xuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuXG4gIGZ1bmN0aW9uIGVuYWJsZSgpIHtcbiAgICBpbnN0YW5jZS5zdGF0ZS5pc0VuYWJsZWQgPSB0cnVlO1xuICB9XG5cbiAgZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICAvLyBEaXNhYmxpbmcgdGhlIGluc3RhbmNlIHNob3VsZCBhbHNvIGhpZGUgaXRcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYXRvbWlrcy90aXBweS5qcy1yZWFjdC9pc3N1ZXMvMTA2XG4gICAgaW5zdGFuY2UuaGlkZSgpO1xuICAgIGluc3RhbmNlLnN0YXRlLmlzRW5hYmxlZCA9IGZhbHNlO1xuICB9XG5cbiAgZnVuY3Rpb24gY2xlYXJEZWxheVRpbWVvdXRzKCkge1xuICAgIGNsZWFyVGltZW91dChzaG93VGltZW91dCk7XG4gICAgY2xlYXJUaW1lb3V0KGhpZGVUaW1lb3V0KTtcbiAgICBjYW5jZWxBbmltYXRpb25GcmFtZShzY2hlZHVsZUhpZGVBbmltYXRpb25GcmFtZSk7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRQcm9wcyhwYXJ0aWFsUHJvcHMpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIHdhcm5XaGVuKGluc3RhbmNlLnN0YXRlLmlzRGVzdHJveWVkLCBjcmVhdGVNZW1vcnlMZWFrV2FybmluZygnc2V0UHJvcHMnKSk7XG4gICAgfVxuXG4gICAgaWYgKGluc3RhbmNlLnN0YXRlLmlzRGVzdHJveWVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaW52b2tlSG9vaygnb25CZWZvcmVVcGRhdGUnLCBbaW5zdGFuY2UsIHBhcnRpYWxQcm9wc10pO1xuICAgIHJlbW92ZUxpc3RlbmVycygpO1xuICAgIHZhciBwcmV2UHJvcHMgPSBpbnN0YW5jZS5wcm9wcztcbiAgICB2YXIgbmV4dFByb3BzID0gZXZhbHVhdGVQcm9wcyhyZWZlcmVuY2UsIE9iamVjdC5hc3NpZ24oe30sIGluc3RhbmNlLnByb3BzLCB7fSwgcGFydGlhbFByb3BzLCB7XG4gICAgICBpZ25vcmVBdHRyaWJ1dGVzOiB0cnVlXG4gICAgfSkpO1xuICAgIGluc3RhbmNlLnByb3BzID0gbmV4dFByb3BzO1xuICAgIGFkZExpc3RlbmVycygpO1xuXG4gICAgaWYgKHByZXZQcm9wcy5pbnRlcmFjdGl2ZURlYm91bmNlICE9PSBuZXh0UHJvcHMuaW50ZXJhY3RpdmVEZWJvdW5jZSkge1xuICAgICAgY2xlYW51cEludGVyYWN0aXZlTW91c2VMaXN0ZW5lcnMoKTtcbiAgICAgIGRlYm91bmNlZE9uTW91c2VNb3ZlID0gZGVib3VuY2Uob25Nb3VzZU1vdmUsIG5leHRQcm9wcy5pbnRlcmFjdGl2ZURlYm91bmNlKTtcbiAgICB9IC8vIEVuc3VyZSBzdGFsZSBhcmlhLWV4cGFuZGVkIGF0dHJpYnV0ZXMgYXJlIHJlbW92ZWRcblxuXG4gICAgaWYgKHByZXZQcm9wcy50cmlnZ2VyVGFyZ2V0ICYmICFuZXh0UHJvcHMudHJpZ2dlclRhcmdldCkge1xuICAgICAgbm9ybWFsaXplVG9BcnJheShwcmV2UHJvcHMudHJpZ2dlclRhcmdldCkuZm9yRWFjaChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChuZXh0UHJvcHMudHJpZ2dlclRhcmdldCkge1xuICAgICAgcmVmZXJlbmNlLnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcpO1xuICAgIH1cblxuICAgIGhhbmRsZUFyaWFFeHBhbmRlZEF0dHJpYnV0ZSgpO1xuICAgIGhhbmRsZVN0eWxlcygpO1xuXG4gICAgaWYgKG9uVXBkYXRlKSB7XG4gICAgICBvblVwZGF0ZShwcmV2UHJvcHMsIG5leHRQcm9wcyk7XG4gICAgfVxuXG4gICAgaWYgKGluc3RhbmNlLnBvcHBlckluc3RhbmNlKSB7XG4gICAgICBjcmVhdGVQb3BwZXJJbnN0YW5jZSgpOyAvLyBGaXhlcyBhbiBpc3N1ZSB3aXRoIG5lc3RlZCB0aXBwaWVzIGlmIHRoZXkgYXJlIGFsbCBnZXR0aW5nIHJlLXJlbmRlcmVkLFxuICAgICAgLy8gYW5kIHRoZSBuZXN0ZWQgb25lcyBnZXQgcmUtcmVuZGVyZWQgZmlyc3QuXG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYXRvbWlrcy90aXBweWpzLXJlYWN0L2lzc3Vlcy8xNzdcbiAgICAgIC8vIFRPRE86IGZpbmQgYSBjbGVhbmVyIC8gbW9yZSBlZmZpY2llbnQgc29sdXRpb24oISlcblxuICAgICAgZ2V0TmVzdGVkUG9wcGVyVHJlZSgpLmZvckVhY2goZnVuY3Rpb24gKG5lc3RlZFBvcHBlcikge1xuICAgICAgICAvLyBSZWFjdCAoYW5kIG90aGVyIFVJIGxpYnMgbGlrZWx5KSByZXF1aXJlcyBhIHJBRiB3cmFwcGVyIGFzIGl0IGZsdXNoZXNcbiAgICAgICAgLy8gaXRzIHdvcmsgaW4gb25lXG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShuZXN0ZWRQb3BwZXIuX3RpcHB5LnBvcHBlckluc3RhbmNlLmZvcmNlVXBkYXRlKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGludm9rZUhvb2soJ29uQWZ0ZXJVcGRhdGUnLCBbaW5zdGFuY2UsIHBhcnRpYWxQcm9wc10pO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0Q29udGVudChjb250ZW50KSB7XG4gICAgaW5zdGFuY2Uuc2V0UHJvcHMoe1xuICAgICAgY29udGVudDogY29udGVudFxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gc2hvdygpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIHdhcm5XaGVuKGluc3RhbmNlLnN0YXRlLmlzRGVzdHJveWVkLCBjcmVhdGVNZW1vcnlMZWFrV2FybmluZygnc2hvdycpKTtcbiAgICB9IC8vIEVhcmx5IGJhaWwtb3V0XG5cblxuICAgIHZhciBpc0FscmVhZHlWaXNpYmxlID0gaW5zdGFuY2Uuc3RhdGUuaXNWaXNpYmxlO1xuICAgIHZhciBpc0Rlc3Ryb3llZCA9IGluc3RhbmNlLnN0YXRlLmlzRGVzdHJveWVkO1xuICAgIHZhciBpc0Rpc2FibGVkID0gIWluc3RhbmNlLnN0YXRlLmlzRW5hYmxlZDtcbiAgICB2YXIgaXNUb3VjaEFuZFRvdWNoRGlzYWJsZWQgPSBjdXJyZW50SW5wdXQuaXNUb3VjaCAmJiAhaW5zdGFuY2UucHJvcHMudG91Y2g7XG4gICAgdmFyIGR1cmF0aW9uID0gZ2V0VmFsdWVBdEluZGV4T3JSZXR1cm4oaW5zdGFuY2UucHJvcHMuZHVyYXRpb24sIDAsIGRlZmF1bHRQcm9wcy5kdXJhdGlvbik7XG5cbiAgICBpZiAoaXNBbHJlYWR5VmlzaWJsZSB8fCBpc0Rlc3Ryb3llZCB8fCBpc0Rpc2FibGVkIHx8IGlzVG91Y2hBbmRUb3VjaERpc2FibGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBOb3JtYWxpemUgYGRpc2FibGVkYCBiZWhhdmlvciBhY3Jvc3MgYnJvd3NlcnMuXG4gICAgLy8gRmlyZWZveCBhbGxvd3MgZXZlbnRzIG9uIGRpc2FibGVkIGVsZW1lbnRzLCBidXQgQ2hyb21lIGRvZXNuJ3QuXG4gICAgLy8gVXNpbmcgYSB3cmFwcGVyIGVsZW1lbnQgKGkuZS4gPHNwYW4+KSBpcyByZWNvbW1lbmRlZC5cblxuXG4gICAgaWYgKGdldEN1cnJlbnRUYXJnZXQoKS5oYXNBdHRyaWJ1dGUoJ2Rpc2FibGVkJykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpbnZva2VIb29rKCdvblNob3cnLCBbaW5zdGFuY2VdLCBmYWxzZSk7XG5cbiAgICBpZiAoaW5zdGFuY2UucHJvcHMub25TaG93KGluc3RhbmNlKSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpbnN0YW5jZS5zdGF0ZS5pc1Zpc2libGUgPSB0cnVlO1xuXG4gICAgaWYgKGdldElzRGVmYXVsdFJlbmRlckZuKCkpIHtcbiAgICAgIHBvcHBlci5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xuICAgIH1cblxuICAgIGhhbmRsZVN0eWxlcygpO1xuICAgIGFkZERvY3VtZW50TW91c2VEb3duTGlzdGVuZXIoKTtcblxuICAgIGlmICghaW5zdGFuY2Uuc3RhdGUuaXNNb3VudGVkKSB7XG4gICAgICBwb3BwZXIuc3R5bGUudHJhbnNpdGlvbiA9ICdub25lJztcbiAgICB9IC8vIElmIGZsaXBwaW5nIHRvIHRoZSBvcHBvc2l0ZSBzaWRlIGFmdGVyIGhpZGluZyBhdCBsZWFzdCBvbmNlLCB0aGVcbiAgICAvLyBhbmltYXRpb24gd2lsbCB1c2UgdGhlIHdyb25nIHBsYWNlbWVudCB3aXRob3V0IHJlc2V0dGluZyB0aGUgZHVyYXRpb25cblxuXG4gICAgaWYgKGdldElzRGVmYXVsdFJlbmRlckZuKCkpIHtcbiAgICAgIHZhciBfZ2V0RGVmYXVsdFRlbXBsYXRlQ2gyID0gZ2V0RGVmYXVsdFRlbXBsYXRlQ2hpbGRyZW4oKSxcbiAgICAgICAgICBib3ggPSBfZ2V0RGVmYXVsdFRlbXBsYXRlQ2gyLmJveCxcbiAgICAgICAgICBjb250ZW50ID0gX2dldERlZmF1bHRUZW1wbGF0ZUNoMi5jb250ZW50O1xuXG4gICAgICBzZXRUcmFuc2l0aW9uRHVyYXRpb24oW2JveCwgY29udGVudF0sIDApO1xuICAgIH1cblxuICAgIG9uRmlyc3RVcGRhdGUgPSBmdW5jdGlvbiBvbkZpcnN0VXBkYXRlKCkge1xuICAgICAgaWYgKCFpbnN0YW5jZS5zdGF0ZS5pc1Zpc2libGUgfHwgaWdub3JlT25GaXJzdFVwZGF0ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlnbm9yZU9uRmlyc3RVcGRhdGUgPSB0cnVlOyAvLyByZWZsb3dcblxuICAgICAgdm9pZCBwb3BwZXIub2Zmc2V0SGVpZ2h0O1xuICAgICAgcG9wcGVyLnN0eWxlLnRyYW5zaXRpb24gPSBpbnN0YW5jZS5wcm9wcy5tb3ZlVHJhbnNpdGlvbjtcblxuICAgICAgaWYgKGdldElzRGVmYXVsdFJlbmRlckZuKCkgJiYgaW5zdGFuY2UucHJvcHMuYW5pbWF0aW9uKSB7XG4gICAgICAgIHZhciBfZ2V0RGVmYXVsdFRlbXBsYXRlQ2gzID0gZ2V0RGVmYXVsdFRlbXBsYXRlQ2hpbGRyZW4oKSxcbiAgICAgICAgICAgIF9ib3ggPSBfZ2V0RGVmYXVsdFRlbXBsYXRlQ2gzLmJveCxcbiAgICAgICAgICAgIF9jb250ZW50ID0gX2dldERlZmF1bHRUZW1wbGF0ZUNoMy5jb250ZW50O1xuXG4gICAgICAgIHNldFRyYW5zaXRpb25EdXJhdGlvbihbX2JveCwgX2NvbnRlbnRdLCBkdXJhdGlvbik7XG4gICAgICAgIHNldFZpc2liaWxpdHlTdGF0ZShbX2JveCwgX2NvbnRlbnRdLCAndmlzaWJsZScpO1xuICAgICAgfVxuXG4gICAgICBoYW5kbGVBcmlhQ29udGVudEF0dHJpYnV0ZSgpO1xuICAgICAgaGFuZGxlQXJpYUV4cGFuZGVkQXR0cmlidXRlKCk7XG4gICAgICBwdXNoSWZVbmlxdWUobW91bnRlZEluc3RhbmNlcywgaW5zdGFuY2UpO1xuICAgICAgdXBkYXRlSU9TQ2xhc3ModHJ1ZSk7XG4gICAgICBpbnN0YW5jZS5zdGF0ZS5pc01vdW50ZWQgPSB0cnVlO1xuICAgICAgaW52b2tlSG9vaygnb25Nb3VudCcsIFtpbnN0YW5jZV0pO1xuXG4gICAgICBpZiAoaW5zdGFuY2UucHJvcHMuYW5pbWF0aW9uICYmIGdldElzRGVmYXVsdFJlbmRlckZuKCkpIHtcbiAgICAgICAgb25UcmFuc2l0aW9uZWRJbihkdXJhdGlvbiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGluc3RhbmNlLnN0YXRlLmlzU2hvd24gPSB0cnVlO1xuICAgICAgICAgIGludm9rZUhvb2soJ29uU2hvd24nLCBbaW5zdGFuY2VdKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIG1vdW50KCk7XG4gIH1cblxuICBmdW5jdGlvbiBoaWRlKCkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgd2FybldoZW4oaW5zdGFuY2Uuc3RhdGUuaXNEZXN0cm95ZWQsIGNyZWF0ZU1lbW9yeUxlYWtXYXJuaW5nKCdoaWRlJykpO1xuICAgIH0gLy8gRWFybHkgYmFpbC1vdXRcblxuXG4gICAgdmFyIGlzQWxyZWFkeUhpZGRlbiA9ICFpbnN0YW5jZS5zdGF0ZS5pc1Zpc2libGU7XG4gICAgdmFyIGlzRGVzdHJveWVkID0gaW5zdGFuY2Uuc3RhdGUuaXNEZXN0cm95ZWQ7XG4gICAgdmFyIGlzRGlzYWJsZWQgPSAhaW5zdGFuY2Uuc3RhdGUuaXNFbmFibGVkO1xuICAgIHZhciBkdXJhdGlvbiA9IGdldFZhbHVlQXRJbmRleE9yUmV0dXJuKGluc3RhbmNlLnByb3BzLmR1cmF0aW9uLCAxLCBkZWZhdWx0UHJvcHMuZHVyYXRpb24pO1xuXG4gICAgaWYgKGlzQWxyZWFkeUhpZGRlbiB8fCBpc0Rlc3Ryb3llZCB8fCBpc0Rpc2FibGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaW52b2tlSG9vaygnb25IaWRlJywgW2luc3RhbmNlXSwgZmFsc2UpO1xuXG4gICAgaWYgKGluc3RhbmNlLnByb3BzLm9uSGlkZShpbnN0YW5jZSkgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaW5zdGFuY2Uuc3RhdGUuaXNWaXNpYmxlID0gZmFsc2U7XG4gICAgaW5zdGFuY2Uuc3RhdGUuaXNTaG93biA9IGZhbHNlO1xuICAgIGlnbm9yZU9uRmlyc3RVcGRhdGUgPSBmYWxzZTtcblxuICAgIGlmIChnZXRJc0RlZmF1bHRSZW5kZXJGbigpKSB7XG4gICAgICBwb3BwZXIuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuICAgIH1cblxuICAgIGNsZWFudXBJbnRlcmFjdGl2ZU1vdXNlTGlzdGVuZXJzKCk7XG4gICAgcmVtb3ZlRG9jdW1lbnRNb3VzZURvd25MaXN0ZW5lcigpO1xuICAgIGhhbmRsZVN0eWxlcygpO1xuXG4gICAgaWYgKGdldElzRGVmYXVsdFJlbmRlckZuKCkpIHtcbiAgICAgIHZhciBfZ2V0RGVmYXVsdFRlbXBsYXRlQ2g0ID0gZ2V0RGVmYXVsdFRlbXBsYXRlQ2hpbGRyZW4oKSxcbiAgICAgICAgICBib3ggPSBfZ2V0RGVmYXVsdFRlbXBsYXRlQ2g0LmJveCxcbiAgICAgICAgICBjb250ZW50ID0gX2dldERlZmF1bHRUZW1wbGF0ZUNoNC5jb250ZW50O1xuXG4gICAgICBpZiAoaW5zdGFuY2UucHJvcHMuYW5pbWF0aW9uKSB7XG4gICAgICAgIHNldFRyYW5zaXRpb25EdXJhdGlvbihbYm94LCBjb250ZW50XSwgZHVyYXRpb24pO1xuICAgICAgICBzZXRWaXNpYmlsaXR5U3RhdGUoW2JveCwgY29udGVudF0sICdoaWRkZW4nKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBoYW5kbGVBcmlhQ29udGVudEF0dHJpYnV0ZSgpO1xuICAgIGhhbmRsZUFyaWFFeHBhbmRlZEF0dHJpYnV0ZSgpO1xuXG4gICAgaWYgKGluc3RhbmNlLnByb3BzLmFuaW1hdGlvbikge1xuICAgICAgaWYgKGdldElzRGVmYXVsdFJlbmRlckZuKCkpIHtcbiAgICAgICAgb25UcmFuc2l0aW9uZWRPdXQoZHVyYXRpb24sIGluc3RhbmNlLnVubW91bnQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpbnN0YW5jZS51bm1vdW50KCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdW5tb3VudCgpIHtcbiAgICBpZiAoaW5zdGFuY2Uuc3RhdGUuaXNWaXNpYmxlKSB7XG4gICAgICBpbnN0YW5jZS5oaWRlKCk7XG4gICAgfVxuXG4gICAgaWYgKCFpbnN0YW5jZS5zdGF0ZS5pc01vdW50ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBkZXN0cm95UG9wcGVySW5zdGFuY2UoKTsgLy8gSWYgYSBwb3BwZXIgaXMgbm90IGludGVyYWN0aXZlLCBpdCB3aWxsIGJlIGFwcGVuZGVkIG91dHNpZGUgdGhlIHBvcHBlclxuICAgIC8vIHRyZWUgYnkgZGVmYXVsdC4gVGhpcyBzZWVtcyBtYWlubHkgZm9yIGludGVyYWN0aXZlIHRpcHBpZXMsIGJ1dCB3ZSBzaG91bGRcbiAgICAvLyBmaW5kIGEgd29ya2Fyb3VuZCBpZiBwb3NzaWJsZVxuXG4gICAgZ2V0TmVzdGVkUG9wcGVyVHJlZSgpLmZvckVhY2goZnVuY3Rpb24gKG5lc3RlZFBvcHBlcikge1xuICAgICAgbmVzdGVkUG9wcGVyLl90aXBweS51bm1vdW50KCk7XG4gICAgfSk7XG5cbiAgICBpZiAocG9wcGVyLnBhcmVudE5vZGUpIHtcbiAgICAgIHBvcHBlci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHBvcHBlcik7XG4gICAgfVxuXG4gICAgbW91bnRlZEluc3RhbmNlcyA9IG1vdW50ZWRJbnN0YW5jZXMuZmlsdGVyKGZ1bmN0aW9uIChpKSB7XG4gICAgICByZXR1cm4gaSAhPT0gaW5zdGFuY2U7XG4gICAgfSk7XG5cbiAgICBpZiAobW91bnRlZEluc3RhbmNlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHVwZGF0ZUlPU0NsYXNzKGZhbHNlKTtcbiAgICB9XG5cbiAgICBpbnN0YW5jZS5zdGF0ZS5pc01vdW50ZWQgPSBmYWxzZTtcbiAgICBpbnZva2VIb29rKCdvbkhpZGRlbicsIFtpbnN0YW5jZV0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIHdhcm5XaGVuKGluc3RhbmNlLnN0YXRlLmlzRGVzdHJveWVkLCBjcmVhdGVNZW1vcnlMZWFrV2FybmluZygnZGVzdHJveScpKTtcbiAgICB9XG5cbiAgICBpZiAoaW5zdGFuY2Uuc3RhdGUuaXNEZXN0cm95ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpbnN0YW5jZS5jbGVhckRlbGF5VGltZW91dHMoKTtcbiAgICBpbnN0YW5jZS51bm1vdW50KCk7XG4gICAgcmVtb3ZlTGlzdGVuZXJzKCk7XG4gICAgZGVsZXRlIHJlZmVyZW5jZS5fdGlwcHk7XG4gICAgaW5zdGFuY2Uuc3RhdGUuaXNEZXN0cm95ZWQgPSB0cnVlO1xuICAgIGludm9rZUhvb2soJ29uRGVzdHJveScsIFtpbnN0YW5jZV0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRpcHB5KHRhcmdldHMsIG9wdGlvbmFsUHJvcHMpIHtcbiAgaWYgKG9wdGlvbmFsUHJvcHMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbmFsUHJvcHMgPSB7fTtcbiAgfVxuXG4gIHZhciBwbHVnaW5zID0gZGVmYXVsdFByb3BzLnBsdWdpbnMuY29uY2F0KG9wdGlvbmFsUHJvcHMucGx1Z2lucyB8fCBbXSk7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIHZhbGlkYXRlVGFyZ2V0cyh0YXJnZXRzKTtcbiAgICB2YWxpZGF0ZVByb3BzKG9wdGlvbmFsUHJvcHMsIHBsdWdpbnMpO1xuICB9XG5cbiAgYmluZEdsb2JhbEV2ZW50TGlzdGVuZXJzKCk7XG4gIHZhciBwYXNzZWRQcm9wcyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbmFsUHJvcHMsIHtcbiAgICBwbHVnaW5zOiBwbHVnaW5zXG4gIH0pO1xuICB2YXIgZWxlbWVudHMgPSBnZXRBcnJheU9mRWxlbWVudHModGFyZ2V0cyk7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIHZhciBpc1NpbmdsZUNvbnRlbnRFbGVtZW50ID0gaXNFbGVtZW50KHBhc3NlZFByb3BzLmNvbnRlbnQpO1xuICAgIHZhciBpc01vcmVUaGFuT25lUmVmZXJlbmNlRWxlbWVudCA9IGVsZW1lbnRzLmxlbmd0aCA+IDE7XG4gICAgd2FybldoZW4oaXNTaW5nbGVDb250ZW50RWxlbWVudCAmJiBpc01vcmVUaGFuT25lUmVmZXJlbmNlRWxlbWVudCwgWyd0aXBweSgpIHdhcyBwYXNzZWQgYW4gRWxlbWVudCBhcyB0aGUgYGNvbnRlbnRgIHByb3AsIGJ1dCBtb3JlIHRoYW4nLCAnb25lIHRpcHB5IGluc3RhbmNlIHdhcyBjcmVhdGVkIGJ5IHRoaXMgaW52b2NhdGlvbi4gVGhpcyBtZWFucyB0aGUnLCAnY29udGVudCBlbGVtZW50IHdpbGwgb25seSBiZSBhcHBlbmRlZCB0byB0aGUgbGFzdCB0aXBweSBpbnN0YW5jZS4nLCAnXFxuXFxuJywgJ0luc3RlYWQsIHBhc3MgdGhlIC5pbm5lckhUTUwgb2YgdGhlIGVsZW1lbnQsIG9yIHVzZSBhIGZ1bmN0aW9uIHRoYXQnLCAncmV0dXJucyBhIGNsb25lZCB2ZXJzaW9uIG9mIHRoZSBlbGVtZW50IGluc3RlYWQuJywgJ1xcblxcbicsICcxKSBjb250ZW50OiBlbGVtZW50LmlubmVySFRNTFxcbicsICcyKSBjb250ZW50OiAoKSA9PiBlbGVtZW50LmNsb25lTm9kZSh0cnVlKSddLmpvaW4oJyAnKSk7XG4gIH1cblxuICB2YXIgaW5zdGFuY2VzID0gZWxlbWVudHMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHJlZmVyZW5jZSkge1xuICAgIHZhciBpbnN0YW5jZSA9IHJlZmVyZW5jZSAmJiBjcmVhdGVUaXBweShyZWZlcmVuY2UsIHBhc3NlZFByb3BzKTtcblxuICAgIGlmIChpbnN0YW5jZSkge1xuICAgICAgYWNjLnB1c2goaW5zdGFuY2UpO1xuICAgIH1cblxuICAgIHJldHVybiBhY2M7XG4gIH0sIFtdKTtcbiAgcmV0dXJuIGlzRWxlbWVudCh0YXJnZXRzKSA/IGluc3RhbmNlc1swXSA6IGluc3RhbmNlcztcbn1cblxudGlwcHkuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xudGlwcHkuc2V0RGVmYXVsdFByb3BzID0gc2V0RGVmYXVsdFByb3BzO1xudGlwcHkuY3VycmVudElucHV0ID0gY3VycmVudElucHV0O1xudmFyIGhpZGVBbGwgPSBmdW5jdGlvbiBoaWRlQWxsKF90ZW1wKSB7XG4gIHZhciBfcmVmID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAsXG4gICAgICBleGNsdWRlZFJlZmVyZW5jZU9ySW5zdGFuY2UgPSBfcmVmLmV4Y2x1ZGUsXG4gICAgICBkdXJhdGlvbiA9IF9yZWYuZHVyYXRpb247XG5cbiAgbW91bnRlZEluc3RhbmNlcy5mb3JFYWNoKGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgIHZhciBpc0V4Y2x1ZGVkID0gZmFsc2U7XG5cbiAgICBpZiAoZXhjbHVkZWRSZWZlcmVuY2VPckluc3RhbmNlKSB7XG4gICAgICBpc0V4Y2x1ZGVkID0gaXNSZWZlcmVuY2VFbGVtZW50KGV4Y2x1ZGVkUmVmZXJlbmNlT3JJbnN0YW5jZSkgPyBpbnN0YW5jZS5yZWZlcmVuY2UgPT09IGV4Y2x1ZGVkUmVmZXJlbmNlT3JJbnN0YW5jZSA6IGluc3RhbmNlLnBvcHBlciA9PT0gZXhjbHVkZWRSZWZlcmVuY2VPckluc3RhbmNlLnBvcHBlcjtcbiAgICB9XG5cbiAgICBpZiAoIWlzRXhjbHVkZWQpIHtcbiAgICAgIHZhciBvcmlnaW5hbER1cmF0aW9uID0gaW5zdGFuY2UucHJvcHMuZHVyYXRpb247XG4gICAgICBpbnN0YW5jZS5zZXRQcm9wcyh7XG4gICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvblxuICAgICAgfSk7XG4gICAgICBpbnN0YW5jZS5oaWRlKCk7XG5cbiAgICAgIGlmICghaW5zdGFuY2Uuc3RhdGUuaXNEZXN0cm95ZWQpIHtcbiAgICAgICAgaW5zdGFuY2Uuc2V0UHJvcHMoe1xuICAgICAgICAgIGR1cmF0aW9uOiBvcmlnaW5hbER1cmF0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59O1xuXG52YXIgY3JlYXRlU2luZ2xldG9uID0gZnVuY3Rpb24gY3JlYXRlU2luZ2xldG9uKHRpcHB5SW5zdGFuY2VzLCBvcHRpb25hbFByb3BzKSB7XG4gIGlmIChvcHRpb25hbFByb3BzID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25hbFByb3BzID0ge307XG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgZXJyb3JXaGVuKCFBcnJheS5pc0FycmF5KHRpcHB5SW5zdGFuY2VzKSwgWydUaGUgZmlyc3QgYXJndW1lbnQgcGFzc2VkIHRvIGNyZWF0ZVNpbmdsZXRvbigpIG11c3QgYmUgYW4gYXJyYXkgb2YnLCAndGlwcHkgaW5zdGFuY2VzLiBUaGUgcGFzc2VkIHZhbHVlIHdhcycsIFN0cmluZyh0aXBweUluc3RhbmNlcyldLmpvaW4oJyAnKSk7XG4gIH1cblxuICB0aXBweUluc3RhbmNlcy5mb3JFYWNoKGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgIGluc3RhbmNlLmRpc2FibGUoKTtcbiAgfSk7XG4gIHZhciBjdXJyZW50VGFyZ2V0O1xuICB2YXIgcmVmZXJlbmNlcyA9IHRpcHB5SW5zdGFuY2VzLm1hcChmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICByZXR1cm4gaW5zdGFuY2UucmVmZXJlbmNlO1xuICB9KTtcbiAgdmFyIHNpbmdsZXRvbiA9IHtcbiAgICBmbjogZnVuY3Rpb24gZm4oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBvbkRlc3Ryb3k6IGZ1bmN0aW9uIG9uRGVzdHJveSgpIHtcbiAgICAgICAgICB0aXBweUluc3RhbmNlcy5mb3JFYWNoKGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgICAgICAgICAgaW5zdGFuY2UuZW5hYmxlKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uVHJpZ2dlcjogZnVuY3Rpb24gb25UcmlnZ2VyKGluc3RhbmNlLCBldmVudCkge1xuICAgICAgICAgIHZhciB0YXJnZXQgPSBldmVudC5jdXJyZW50VGFyZ2V0O1xuICAgICAgICAgIHZhciBpbmRleCA9IHJlZmVyZW5jZXMuaW5kZXhPZih0YXJnZXQpOyAvLyBiYWlsLW91dFxuXG4gICAgICAgICAgaWYgKHRhcmdldCA9PT0gY3VycmVudFRhcmdldCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGN1cnJlbnRUYXJnZXQgPSB0YXJnZXQ7XG4gICAgICAgICAgdmFyIG92ZXJyaWRlUHJvcHMgPSAob3B0aW9uYWxQcm9wcy5vdmVycmlkZXMgfHwgW10pLmNvbmNhdCgnY29udGVudCcpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwcm9wKSB7XG4gICAgICAgICAgICBhY2NbcHJvcF0gPSB0aXBweUluc3RhbmNlc1tpbmRleF0ucHJvcHNbcHJvcF07XG4gICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICAgIH0sIHt9KTtcbiAgICAgICAgICBpbnN0YW5jZS5zZXRQcm9wcyhPYmplY3QuYXNzaWduKHt9LCBvdmVycmlkZVByb3BzLCB7XG4gICAgICAgICAgICBnZXRSZWZlcmVuY2VDbGllbnRSZWN0OiBmdW5jdGlvbiBnZXRSZWZlcmVuY2VDbGllbnRSZWN0KCkge1xuICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB0aXBweShkaXYoKSwgT2JqZWN0LmFzc2lnbih7fSwgcmVtb3ZlUHJvcGVydGllcyhvcHRpb25hbFByb3BzLCBbJ292ZXJyaWRlcyddKSwge1xuICAgIHBsdWdpbnM6IFtzaW5nbGV0b25dLmNvbmNhdChvcHRpb25hbFByb3BzLnBsdWdpbnMgfHwgW10pLFxuICAgIHRyaWdnZXJUYXJnZXQ6IHJlZmVyZW5jZXNcbiAgfSkpO1xufTtcblxudmFyIEJVQkJMSU5HX0VWRU5UU19NQVAgPSB7XG4gIG1vdXNlb3ZlcjogJ21vdXNlZW50ZXInLFxuICBmb2N1c2luOiAnZm9jdXMnLFxuICBjbGljazogJ2NsaWNrJ1xufTtcbi8qKlxuICogQ3JlYXRlcyBhIGRlbGVnYXRlIGluc3RhbmNlIHRoYXQgY29udHJvbHMgdGhlIGNyZWF0aW9uIG9mIHRpcHB5IGluc3RhbmNlc1xuICogZm9yIGNoaWxkIGVsZW1lbnRzIChgdGFyZ2V0YCBDU1Mgc2VsZWN0b3IpLlxuICovXG5cbmZ1bmN0aW9uIGRlbGVnYXRlKHRhcmdldHMsIHByb3BzKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBlcnJvcldoZW4oIShwcm9wcyAmJiBwcm9wcy50YXJnZXQpLCBbJ1lvdSBtdXN0IHNwZWNpdHkgYSBgdGFyZ2V0YCBwcm9wIGluZGljYXRpbmcgYSBDU1Mgc2VsZWN0b3Igc3RyaW5nIG1hdGNoaW5nJywgJ3RoZSB0YXJnZXQgZWxlbWVudHMgdGhhdCBzaG91bGQgcmVjZWl2ZSBhIHRpcHB5LiddLmpvaW4oJyAnKSk7XG4gIH1cblxuICB2YXIgbGlzdGVuZXJzID0gW107XG4gIHZhciBjaGlsZFRpcHB5SW5zdGFuY2VzID0gW107XG4gIHZhciB0YXJnZXQgPSBwcm9wcy50YXJnZXQ7XG4gIHZhciBuYXRpdmVQcm9wcyA9IHJlbW92ZVByb3BlcnRpZXMocHJvcHMsIFsndGFyZ2V0J10pO1xuICB2YXIgcGFyZW50UHJvcHMgPSBPYmplY3QuYXNzaWduKHt9LCBuYXRpdmVQcm9wcywge1xuICAgIHRyaWdnZXI6ICdtYW51YWwnXG4gIH0pO1xuICB2YXIgY2hpbGRQcm9wcyA9IE9iamVjdC5hc3NpZ24oe30sIG5hdGl2ZVByb3BzLCB7XG4gICAgc2hvd09uQ3JlYXRlOiB0cnVlXG4gIH0pO1xuICB2YXIgcmV0dXJuVmFsdWUgPSB0aXBweSh0YXJnZXRzLCBwYXJlbnRQcm9wcyk7XG4gIHZhciBub3JtYWxpemVkUmV0dXJuVmFsdWUgPSBub3JtYWxpemVUb0FycmF5KHJldHVyblZhbHVlKTtcblxuICBmdW5jdGlvbiBvblRyaWdnZXIoZXZlbnQpIHtcbiAgICBpZiAoIWV2ZW50LnRhcmdldCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB0YXJnZXROb2RlID0gZXZlbnQudGFyZ2V0LmNsb3Nlc3QodGFyZ2V0KTtcblxuICAgIGlmICghdGFyZ2V0Tm9kZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gR2V0IHJlbGV2YW50IHRyaWdnZXIgd2l0aCBmYWxsYmFja3M6XG4gICAgLy8gMS4gQ2hlY2sgYGRhdGEtdGlwcHktdHJpZ2dlcmAgYXR0cmlidXRlIG9uIHRhcmdldCBub2RlXG4gICAgLy8gMi4gRmFsbGJhY2sgdG8gYHRyaWdnZXJgIHBhc3NlZCB0byBgZGVsZWdhdGUoKWBcbiAgICAvLyAzLiBGYWxsYmFjayB0byBgZGVmYXVsdFByb3BzLnRyaWdnZXJgXG5cblxuICAgIHZhciB0cmlnZ2VyID0gdGFyZ2V0Tm9kZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdGlwcHktdHJpZ2dlcicpIHx8IHByb3BzLnRyaWdnZXIgfHwgZGVmYXVsdFByb3BzLnRyaWdnZXI7IC8vIE9ubHkgY3JlYXRlIHRoZSBpbnN0YW5jZSBpZiB0aGUgYnViYmxpbmcgZXZlbnQgbWF0Y2hlcyB0aGUgdHJpZ2dlciB0eXBlLFxuICAgIC8vIG9yIHRoZSBub2RlIGFscmVhZHkgaGFzIGEgdGlwcHkgaW5zdGFuY2UgYXR0YWNoZWRcblxuICAgIGlmICh0cmlnZ2VyLmluZGV4T2YoQlVCQkxJTkdfRVZFTlRTX01BUFtldmVudC50eXBlXSkgPCAwIHx8IC8vIEB0cy1pZ25vcmVcbiAgICB0YXJnZXROb2RlLl90aXBweSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBpbnN0YW5jZSA9IHRpcHB5KHRhcmdldE5vZGUsIGNoaWxkUHJvcHMpO1xuXG4gICAgaWYgKGluc3RhbmNlKSB7XG4gICAgICBjaGlsZFRpcHB5SW5zdGFuY2VzID0gY2hpbGRUaXBweUluc3RhbmNlcy5jb25jYXQoaW5zdGFuY2UpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uKG5vZGUsIGV2ZW50VHlwZSwgaGFuZGxlciwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgICBsaXN0ZW5lcnMucHVzaCh7XG4gICAgICBub2RlOiBub2RlLFxuICAgICAgZXZlbnRUeXBlOiBldmVudFR5cGUsXG4gICAgICBoYW5kbGVyOiBoYW5kbGVyLFxuICAgICAgb3B0aW9uczogb3B0aW9uc1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcnMoaW5zdGFuY2UpIHtcbiAgICB2YXIgcmVmZXJlbmNlID0gaW5zdGFuY2UucmVmZXJlbmNlO1xuICAgIG9uKHJlZmVyZW5jZSwgJ21vdXNlb3ZlcicsIG9uVHJpZ2dlcik7XG4gICAgb24ocmVmZXJlbmNlLCAnZm9jdXNpbicsIG9uVHJpZ2dlcik7XG4gICAgb24ocmVmZXJlbmNlLCAnY2xpY2snLCBvblRyaWdnZXIpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgbGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgIHZhciBub2RlID0gX3JlZi5ub2RlLFxuICAgICAgICAgIGV2ZW50VHlwZSA9IF9yZWYuZXZlbnRUeXBlLFxuICAgICAgICAgIGhhbmRsZXIgPSBfcmVmLmhhbmRsZXIsXG4gICAgICAgICAgb3B0aW9ucyA9IF9yZWYub3B0aW9ucztcbiAgICAgIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICAgIH0pO1xuICAgIGxpc3RlbmVycyA9IFtdO1xuICB9XG5cbiAgZnVuY3Rpb24gYXBwbHlNdXRhdGlvbnMoaW5zdGFuY2UpIHtcbiAgICB2YXIgb3JpZ2luYWxEZXN0cm95ID0gaW5zdGFuY2UuZGVzdHJveTtcblxuICAgIGluc3RhbmNlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoc2hvdWxkRGVzdHJveUNoaWxkSW5zdGFuY2VzKSB7XG4gICAgICBpZiAoc2hvdWxkRGVzdHJveUNoaWxkSW5zdGFuY2VzID09PSB2b2lkIDApIHtcbiAgICAgICAgc2hvdWxkRGVzdHJveUNoaWxkSW5zdGFuY2VzID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNob3VsZERlc3Ryb3lDaGlsZEluc3RhbmNlcykge1xuICAgICAgICBjaGlsZFRpcHB5SW5zdGFuY2VzLmZvckVhY2goZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgICAgICAgaW5zdGFuY2UuZGVzdHJveSgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgY2hpbGRUaXBweUluc3RhbmNlcyA9IFtdO1xuICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICAgIG9yaWdpbmFsRGVzdHJveSgpO1xuICAgIH07XG5cbiAgICBhZGRFdmVudExpc3RlbmVycyhpbnN0YW5jZSk7XG4gIH1cblxuICBub3JtYWxpemVkUmV0dXJuVmFsdWUuZm9yRWFjaChhcHBseU11dGF0aW9ucyk7XG4gIHJldHVybiByZXR1cm5WYWx1ZTtcbn1cblxudmFyIGFuaW1hdGVGaWxsID0ge1xuICBuYW1lOiAnYW5pbWF0ZUZpbGwnLFxuICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICBmbjogZnVuY3Rpb24gZm4oaW5zdGFuY2UpIHtcbiAgICB2YXIgX2luc3RhbmNlJHByb3BzJHJlbmRlO1xuXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGlmICghKChfaW5zdGFuY2UkcHJvcHMkcmVuZGUgPSBpbnN0YW5jZS5wcm9wcy5yZW5kZXIpID09IG51bGwgPyB2b2lkIDAgOiBfaW5zdGFuY2UkcHJvcHMkcmVuZGUuJCR0aXBweSkpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgZXJyb3JXaGVuKGluc3RhbmNlLnByb3BzLmFuaW1hdGVGaWxsLCAnVGhlIGBhbmltYXRlRmlsbGAgcGx1Z2luIHJlcXVpcmVzIHRoZSBkZWZhdWx0IHJlbmRlciBmdW5jdGlvbi4nKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cblxuICAgIHZhciBfZ2V0Q2hpbGRyZW4gPSBnZXRDaGlsZHJlbihpbnN0YW5jZS5wb3BwZXIpLFxuICAgICAgICBib3ggPSBfZ2V0Q2hpbGRyZW4uYm94LFxuICAgICAgICBjb250ZW50ID0gX2dldENoaWxkcmVuLmNvbnRlbnQ7XG5cbiAgICB2YXIgYmFja2Ryb3AgPSBpbnN0YW5jZS5wcm9wcy5hbmltYXRlRmlsbCA/IGNyZWF0ZUJhY2tkcm9wRWxlbWVudCgpIDogbnVsbDtcbiAgICByZXR1cm4ge1xuICAgICAgb25DcmVhdGU6IGZ1bmN0aW9uIG9uQ3JlYXRlKCkge1xuICAgICAgICBpZiAoYmFja2Ryb3ApIHtcbiAgICAgICAgICBib3guaW5zZXJ0QmVmb3JlKGJhY2tkcm9wLCBib3guZmlyc3RFbGVtZW50Q2hpbGQpO1xuICAgICAgICAgIGJveC5zZXRBdHRyaWJ1dGUoJ2RhdGEtYW5pbWF0ZWZpbGwnLCAnJyk7XG4gICAgICAgICAgYm94LnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XG4gICAgICAgICAgaW5zdGFuY2Uuc2V0UHJvcHMoe1xuICAgICAgICAgICAgYXJyb3c6IGZhbHNlLFxuICAgICAgICAgICAgYW5pbWF0aW9uOiAnc2hpZnQtYXdheSdcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9uTW91bnQ6IGZ1bmN0aW9uIG9uTW91bnQoKSB7XG4gICAgICAgIGlmIChiYWNrZHJvcCkge1xuICAgICAgICAgIHZhciB0cmFuc2l0aW9uRHVyYXRpb24gPSBib3guc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uO1xuICAgICAgICAgIHZhciBkdXJhdGlvbiA9IE51bWJlcih0cmFuc2l0aW9uRHVyYXRpb24ucmVwbGFjZSgnbXMnLCAnJykpOyAvLyBUaGUgY29udGVudCBzaG91bGQgZmFkZSBpbiBhZnRlciB0aGUgYmFja2Ryb3AgaGFzIG1vc3RseSBmaWxsZWQgdGhlXG4gICAgICAgICAgLy8gdG9vbHRpcCBlbGVtZW50LiBgY2xpcC1wYXRoYCBpcyB0aGUgb3RoZXIgYWx0ZXJuYXRpdmUgYnV0IGlzIG5vdFxuICAgICAgICAgIC8vIHdlbGwtc3VwcG9ydGVkIGFuZCBpcyBidWdneSBvbiBzb21lIGRldmljZXMuXG5cbiAgICAgICAgICBjb250ZW50LnN0eWxlLnRyYW5zaXRpb25EZWxheSA9IE1hdGgucm91bmQoZHVyYXRpb24gLyAxMCkgKyBcIm1zXCI7XG4gICAgICAgICAgYmFja2Ryb3Auc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gdHJhbnNpdGlvbkR1cmF0aW9uO1xuICAgICAgICAgIHNldFZpc2liaWxpdHlTdGF0ZShbYmFja2Ryb3BdLCAndmlzaWJsZScpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb25TaG93OiBmdW5jdGlvbiBvblNob3coKSB7XG4gICAgICAgIGlmIChiYWNrZHJvcCkge1xuICAgICAgICAgIGJhY2tkcm9wLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcwbXMnO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb25IaWRlOiBmdW5jdGlvbiBvbkhpZGUoKSB7XG4gICAgICAgIGlmIChiYWNrZHJvcCkge1xuICAgICAgICAgIHNldFZpc2liaWxpdHlTdGF0ZShbYmFja2Ryb3BdLCAnaGlkZGVuJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVCYWNrZHJvcEVsZW1lbnQoKSB7XG4gIHZhciBiYWNrZHJvcCA9IGRpdigpO1xuICBiYWNrZHJvcC5jbGFzc05hbWUgPSBCQUNLRFJPUF9DTEFTUztcbiAgc2V0VmlzaWJpbGl0eVN0YXRlKFtiYWNrZHJvcF0sICdoaWRkZW4nKTtcbiAgcmV0dXJuIGJhY2tkcm9wO1xufVxuXG52YXIgZm9sbG93Q3Vyc29yID0ge1xuICBuYW1lOiAnZm9sbG93Q3Vyc29yJyxcbiAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgZm46IGZ1bmN0aW9uIGZuKGluc3RhbmNlKSB7XG4gICAgdmFyIHJlZmVyZW5jZSA9IGluc3RhbmNlLnJlZmVyZW5jZTtcbiAgICB2YXIgZG9jID0gZ2V0T3duZXJEb2N1bWVudChpbnN0YW5jZS5wcm9wcy50cmlnZ2VyVGFyZ2V0IHx8IHJlZmVyZW5jZSk7XG4gICAgdmFyIGluaXRpYWxNb3VzZUNvb3JkcyA9IG51bGw7XG5cbiAgICBmdW5jdGlvbiBnZXRJc01hbnVhbCgpIHtcbiAgICAgIHJldHVybiBpbnN0YW5jZS5wcm9wcy50cmlnZ2VyLnRyaW0oKSA9PT0gJ21hbnVhbCc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0SXNFbmFibGVkKCkge1xuICAgICAgLy8gIzU5N1xuICAgICAgdmFyIGlzVmFsaWRNb3VzZUV2ZW50ID0gZ2V0SXNNYW51YWwoKSA/IHRydWUgOiAvLyBDaGVjayBpZiBhIGtleWJvYXJkIFwiY2xpY2tcIlxuICAgICAgaW5pdGlhbE1vdXNlQ29vcmRzICE9PSBudWxsICYmICEoaW5pdGlhbE1vdXNlQ29vcmRzLmNsaWVudFggPT09IDAgJiYgaW5pdGlhbE1vdXNlQ29vcmRzLmNsaWVudFkgPT09IDApO1xuICAgICAgcmV0dXJuIGluc3RhbmNlLnByb3BzLmZvbGxvd0N1cnNvciAmJiBpc1ZhbGlkTW91c2VFdmVudDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRJc0luaXRpYWxCZWhhdmlvcigpIHtcbiAgICAgIHJldHVybiBjdXJyZW50SW5wdXQuaXNUb3VjaCB8fCBpbnN0YW5jZS5wcm9wcy5mb2xsb3dDdXJzb3IgPT09ICdpbml0aWFsJyAmJiBpbnN0YW5jZS5zdGF0ZS5pc1Zpc2libGU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdW5zZXRSZWZlcmVuY2VDbGllbnRSZWN0KHNob3VsZFVuc2V0KSB7XG4gICAgICBpZiAoc2hvdWxkVW5zZXQpIHtcbiAgICAgICAgaW5zdGFuY2Uuc2V0UHJvcHMoe1xuICAgICAgICAgIGdldFJlZmVyZW5jZUNsaWVudFJlY3Q6IG51bGxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlTW91c2VNb3ZlTGlzdGVuZXIoKSB7XG4gICAgICBpZiAoZ2V0SXNFbmFibGVkKCkpIHtcbiAgICAgICAgYWRkTGlzdGVuZXIoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVuc2V0UmVmZXJlbmNlQ2xpZW50UmVjdChpbnN0YW5jZS5wcm9wcy5mb2xsb3dDdXJzb3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRyaWdnZXJMYXN0TW91c2VNb3ZlKCkge1xuICAgICAgaWYgKGdldElzRW5hYmxlZCgpKSB7XG4gICAgICAgIG9uTW91c2VNb3ZlKGluaXRpYWxNb3VzZUNvb3Jkcyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkTGlzdGVuZXIoKSB7XG4gICAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgb25Nb3VzZU1vdmUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVyKCkge1xuICAgICAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIG9uTW91c2VNb3ZlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbk1vdXNlTW92ZShldmVudCkge1xuICAgICAgaW5pdGlhbE1vdXNlQ29vcmRzID0ge1xuICAgICAgICBjbGllbnRYOiBldmVudC5jbGllbnRYLFxuICAgICAgICBjbGllbnRZOiBldmVudC5jbGllbnRZXG4gICAgICB9OyAvLyBJZiB0aGUgaW5zdGFuY2UgaXMgaW50ZXJhY3RpdmUsIGF2b2lkIHVwZGF0aW5nIHRoZSBwb3NpdGlvbiB1bmxlc3MgaXQnc1xuICAgICAgLy8gb3ZlciB0aGUgcmVmZXJlbmNlIGVsZW1lbnRcblxuICAgICAgdmFyIGlzQ3Vyc29yT3ZlclJlZmVyZW5jZSA9IGV2ZW50LnRhcmdldCA/IHJlZmVyZW5jZS5jb250YWlucyhldmVudC50YXJnZXQpIDogdHJ1ZTtcbiAgICAgIHZhciBmb2xsb3dDdXJzb3IgPSBpbnN0YW5jZS5wcm9wcy5mb2xsb3dDdXJzb3I7XG4gICAgICB2YXIgY2xpZW50WCA9IGV2ZW50LmNsaWVudFgsXG4gICAgICAgICAgY2xpZW50WSA9IGV2ZW50LmNsaWVudFk7XG4gICAgICB2YXIgcmVjdCA9IHJlZmVyZW5jZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIHZhciByZWxhdGl2ZVggPSBjbGllbnRYIC0gcmVjdC5sZWZ0O1xuICAgICAgdmFyIHJlbGF0aXZlWSA9IGNsaWVudFkgLSByZWN0LnRvcDtcblxuICAgICAgaWYgKGlzQ3Vyc29yT3ZlclJlZmVyZW5jZSB8fCAhaW5zdGFuY2UucHJvcHMuaW50ZXJhY3RpdmUpIHtcbiAgICAgICAgaW5zdGFuY2Uuc2V0UHJvcHMoe1xuICAgICAgICAgIGdldFJlZmVyZW5jZUNsaWVudFJlY3Q6IGZ1bmN0aW9uIGdldFJlZmVyZW5jZUNsaWVudFJlY3QoKSB7XG4gICAgICAgICAgICB2YXIgcmVjdCA9IHJlZmVyZW5jZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgIHZhciB4ID0gY2xpZW50WDtcbiAgICAgICAgICAgIHZhciB5ID0gY2xpZW50WTtcblxuICAgICAgICAgICAgaWYgKGZvbGxvd0N1cnNvciA9PT0gJ2luaXRpYWwnKSB7XG4gICAgICAgICAgICAgIHggPSByZWN0LmxlZnQgKyByZWxhdGl2ZVg7XG4gICAgICAgICAgICAgIHkgPSByZWN0LnRvcCArIHJlbGF0aXZlWTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHRvcCA9IGZvbGxvd0N1cnNvciA9PT0gJ2hvcml6b250YWwnID8gcmVjdC50b3AgOiB5O1xuICAgICAgICAgICAgdmFyIHJpZ2h0ID0gZm9sbG93Q3Vyc29yID09PSAndmVydGljYWwnID8gcmVjdC5yaWdodCA6IHg7XG4gICAgICAgICAgICB2YXIgYm90dG9tID0gZm9sbG93Q3Vyc29yID09PSAnaG9yaXpvbnRhbCcgPyByZWN0LmJvdHRvbSA6IHk7XG4gICAgICAgICAgICB2YXIgbGVmdCA9IGZvbGxvd0N1cnNvciA9PT0gJ3ZlcnRpY2FsJyA/IHJlY3QubGVmdCA6IHg7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICB3aWR0aDogcmlnaHQgLSBsZWZ0LFxuICAgICAgICAgICAgICBoZWlnaHQ6IGJvdHRvbSAtIHRvcCxcbiAgICAgICAgICAgICAgdG9wOiB0b3AsXG4gICAgICAgICAgICAgIHJpZ2h0OiByaWdodCxcbiAgICAgICAgICAgICAgYm90dG9tOiBib3R0b20sXG4gICAgICAgICAgICAgIGxlZnQ6IGxlZnRcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGdldElzSW5pdGlhbEJlaGF2aW9yKCkpIHtcbiAgICAgICAgcmVtb3ZlTGlzdGVuZXIoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgb25BZnRlclVwZGF0ZTogZnVuY3Rpb24gb25BZnRlclVwZGF0ZShfLCBfcmVmKSB7XG4gICAgICAgIHZhciBmb2xsb3dDdXJzb3IgPSBfcmVmLmZvbGxvd0N1cnNvcjtcblxuICAgICAgICBpZiAoZm9sbG93Q3Vyc29yICE9PSB1bmRlZmluZWQgJiYgIWZvbGxvd0N1cnNvcikge1xuICAgICAgICAgIHVuc2V0UmVmZXJlbmNlQ2xpZW50UmVjdCh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9uTW91bnQ6IGZ1bmN0aW9uIG9uTW91bnQoKSB7XG4gICAgICAgIHRyaWdnZXJMYXN0TW91c2VNb3ZlKCk7XG4gICAgICB9LFxuICAgICAgb25TaG93OiBmdW5jdGlvbiBvblNob3coKSB7XG4gICAgICAgIGlmIChnZXRJc01hbnVhbCgpKSB7XG4gICAgICAgICAgLy8gU2luY2UgdGhlcmUncyBubyB0cmlnZ2VyIGV2ZW50IHRvIHVzZSwgd2UgaGF2ZSB0byB1c2UgdGhlc2UgYXNcbiAgICAgICAgICAvLyBiYXNlbGluZSBjb29yZHNcbiAgICAgICAgICBpbml0aWFsTW91c2VDb29yZHMgPSB7XG4gICAgICAgICAgICBjbGllbnRYOiAwLFxuICAgICAgICAgICAgY2xpZW50WTogMFxuICAgICAgICAgIH07XG4gICAgICAgICAgaGFuZGxlTW91c2VNb3ZlTGlzdGVuZXIoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9uVHJpZ2dlcjogZnVuY3Rpb24gb25UcmlnZ2VyKF8sIGV2ZW50KSB7XG4gICAgICAgIC8vIFRhcHBpbmcgb24gdG91Y2ggZGV2aWNlcyBjYW4gdHJpZ2dlciBgbW91c2VlbnRlcmAgdGhlbiBgZm9jdXNgXG4gICAgICAgIGlmIChpbml0aWFsTW91c2VDb29yZHMpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNNb3VzZUV2ZW50KGV2ZW50KSkge1xuICAgICAgICAgIGluaXRpYWxNb3VzZUNvb3JkcyA9IHtcbiAgICAgICAgICAgIGNsaWVudFg6IGV2ZW50LmNsaWVudFgsXG4gICAgICAgICAgICBjbGllbnRZOiBldmVudC5jbGllbnRZXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGhhbmRsZU1vdXNlTW92ZUxpc3RlbmVyKCk7XG4gICAgICB9LFxuICAgICAgb25VbnRyaWdnZXI6IGZ1bmN0aW9uIG9uVW50cmlnZ2VyKCkge1xuICAgICAgICAvLyBJZiB1bnRyaWdnZXJlZCBiZWZvcmUgc2hvd2luZyAoYG9uSGlkZGVuYCB3aWxsIG5ldmVyIGJlIGludm9rZWQpXG4gICAgICAgIGlmICghaW5zdGFuY2Uuc3RhdGUuaXNWaXNpYmxlKSB7XG4gICAgICAgICAgcmVtb3ZlTGlzdGVuZXIoKTtcbiAgICAgICAgICBpbml0aWFsTW91c2VDb29yZHMgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb25IaWRkZW46IGZ1bmN0aW9uIG9uSGlkZGVuKCkge1xuICAgICAgICByZW1vdmVMaXN0ZW5lcigpO1xuICAgICAgICBpbml0aWFsTW91c2VDb29yZHMgPSBudWxsO1xuICAgICAgfVxuICAgIH07XG4gIH1cbn07XG5cbi8vIHBvc2l0aW9uLlxuXG52YXIgaW5saW5lUG9zaXRpb25pbmcgPSB7XG4gIG5hbWU6ICdpbmxpbmVQb3NpdGlvbmluZycsXG4gIGRlZmF1bHRWYWx1ZTogZmFsc2UsXG4gIGZuOiBmdW5jdGlvbiBmbihpbnN0YW5jZSkge1xuICAgIHZhciByZWZlcmVuY2UgPSBpbnN0YW5jZS5yZWZlcmVuY2U7XG5cbiAgICBmdW5jdGlvbiBpc0VuYWJsZWQoKSB7XG4gICAgICByZXR1cm4gISFpbnN0YW5jZS5wcm9wcy5pbmxpbmVQb3NpdGlvbmluZztcbiAgICB9XG5cbiAgICB2YXIgcGxhY2VtZW50O1xuICAgIHZhciBtb2RpZmllciA9IHtcbiAgICAgIG5hbWU6ICd0aXBweUlubGluZVBvc2l0aW9uaW5nJyxcbiAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICBwaGFzZTogJ2FmdGVyV3JpdGUnLFxuICAgICAgZm46IGZ1bmN0aW9uIGZuKF9yZWYpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZTtcblxuICAgICAgICBpZiAoaXNFbmFibGVkKCkpIHtcbiAgICAgICAgICBpZiAocGxhY2VtZW50ICE9PSBzdGF0ZS5wbGFjZW1lbnQpIHtcbiAgICAgICAgICAgIGluc3RhbmNlLnNldFByb3BzKHtcbiAgICAgICAgICAgICAgZ2V0UmVmZXJlbmNlQ2xpZW50UmVjdDogZnVuY3Rpb24gZ2V0UmVmZXJlbmNlQ2xpZW50UmVjdCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX2dldFJlZmVyZW5jZUNsaWVudFJlY3Qoc3RhdGUucGxhY2VtZW50KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcGxhY2VtZW50ID0gc3RhdGUucGxhY2VtZW50O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIF9nZXRSZWZlcmVuY2VDbGllbnRSZWN0KHBsYWNlbWVudCkge1xuICAgICAgcmV0dXJuIGdldElubGluZUJvdW5kaW5nQ2xpZW50UmVjdChnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCksIHJlZmVyZW5jZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwgYXJyYXlGcm9tKHJlZmVyZW5jZS5nZXRDbGllbnRSZWN0cygpKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIG9uQ3JlYXRlOiBmdW5jdGlvbiBvbkNyZWF0ZSgpIHtcbiAgICAgICAgdmFyIF9pbnN0YW5jZSRwcm9wcyRwb3BwZTtcblxuICAgICAgICBpbnN0YW5jZS5zZXRQcm9wcyh7XG4gICAgICAgICAgcG9wcGVyT3B0aW9uczogT2JqZWN0LmFzc2lnbih7fSwgaW5zdGFuY2UucHJvcHMucG9wcGVyT3B0aW9ucywge1xuICAgICAgICAgICAgbW9kaWZpZXJzOiBbXS5jb25jYXQoKChfaW5zdGFuY2UkcHJvcHMkcG9wcGUgPSBpbnN0YW5jZS5wcm9wcy5wb3BwZXJPcHRpb25zKSA9PSBudWxsID8gdm9pZCAwIDogX2luc3RhbmNlJHByb3BzJHBvcHBlLm1vZGlmaWVycykgfHwgW10sIFttb2RpZmllcl0pXG4gICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufTtcbmZ1bmN0aW9uIGdldElubGluZUJvdW5kaW5nQ2xpZW50UmVjdChjdXJyZW50QmFzZVBsYWNlbWVudCwgYm91bmRpbmdSZWN0LCBjbGllbnRSZWN0cykge1xuICAvLyBOb3QgYW4gaW5saW5lIGVsZW1lbnQsIG9yIHBsYWNlbWVudCBpcyBub3QgeWV0IGtub3duXG4gIGlmIChjbGllbnRSZWN0cy5sZW5ndGggPCAyIHx8IGN1cnJlbnRCYXNlUGxhY2VtZW50ID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGJvdW5kaW5nUmVjdDtcbiAgfVxuXG4gIHN3aXRjaCAoY3VycmVudEJhc2VQbGFjZW1lbnQpIHtcbiAgICBjYXNlICd0b3AnOlxuICAgIGNhc2UgJ2JvdHRvbSc6XG4gICAgICB7XG4gICAgICAgIHZhciBmaXJzdFJlY3QgPSBjbGllbnRSZWN0c1swXTtcbiAgICAgICAgdmFyIGxhc3RSZWN0ID0gY2xpZW50UmVjdHNbY2xpZW50UmVjdHMubGVuZ3RoIC0gMV07XG4gICAgICAgIHZhciBpc1RvcCA9IGN1cnJlbnRCYXNlUGxhY2VtZW50ID09PSAndG9wJztcbiAgICAgICAgdmFyIHRvcCA9IGZpcnN0UmVjdC50b3A7XG4gICAgICAgIHZhciBib3R0b20gPSBsYXN0UmVjdC5ib3R0b207XG4gICAgICAgIHZhciBsZWZ0ID0gaXNUb3AgPyBmaXJzdFJlY3QubGVmdCA6IGxhc3RSZWN0LmxlZnQ7XG4gICAgICAgIHZhciByaWdodCA9IGlzVG9wID8gZmlyc3RSZWN0LnJpZ2h0IDogbGFzdFJlY3QucmlnaHQ7XG4gICAgICAgIHZhciB3aWR0aCA9IHJpZ2h0IC0gbGVmdDtcbiAgICAgICAgdmFyIGhlaWdodCA9IGJvdHRvbSAtIHRvcDtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0b3A6IHRvcCxcbiAgICAgICAgICBib3R0b206IGJvdHRvbSxcbiAgICAgICAgICBsZWZ0OiBsZWZ0LFxuICAgICAgICAgIHJpZ2h0OiByaWdodCxcbiAgICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgICAgaGVpZ2h0OiBoZWlnaHRcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgIGNhc2UgJ2xlZnQnOlxuICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgIHtcbiAgICAgICAgdmFyIG1pbkxlZnQgPSBNYXRoLm1pbi5hcHBseShNYXRoLCBjbGllbnRSZWN0cy5tYXAoZnVuY3Rpb24gKHJlY3RzKSB7XG4gICAgICAgICAgcmV0dXJuIHJlY3RzLmxlZnQ7XG4gICAgICAgIH0pKTtcbiAgICAgICAgdmFyIG1heFJpZ2h0ID0gTWF0aC5tYXguYXBwbHkoTWF0aCwgY2xpZW50UmVjdHMubWFwKGZ1bmN0aW9uIChyZWN0cykge1xuICAgICAgICAgIHJldHVybiByZWN0cy5yaWdodDtcbiAgICAgICAgfSkpO1xuICAgICAgICB2YXIgbWVhc3VyZVJlY3RzID0gY2xpZW50UmVjdHMuZmlsdGVyKGZ1bmN0aW9uIChyZWN0KSB7XG4gICAgICAgICAgcmV0dXJuIGN1cnJlbnRCYXNlUGxhY2VtZW50ID09PSAnbGVmdCcgPyByZWN0LmxlZnQgPT09IG1pbkxlZnQgOiByZWN0LnJpZ2h0ID09PSBtYXhSaWdodDtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBfdG9wID0gbWVhc3VyZVJlY3RzWzBdLnRvcDtcbiAgICAgICAgdmFyIF9ib3R0b20gPSBtZWFzdXJlUmVjdHNbbWVhc3VyZVJlY3RzLmxlbmd0aCAtIDFdLmJvdHRvbTtcbiAgICAgICAgdmFyIF9sZWZ0ID0gbWluTGVmdDtcbiAgICAgICAgdmFyIF9yaWdodCA9IG1heFJpZ2h0O1xuXG4gICAgICAgIHZhciBfd2lkdGggPSBfcmlnaHQgLSBfbGVmdDtcblxuICAgICAgICB2YXIgX2hlaWdodCA9IF9ib3R0b20gLSBfdG9wO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdG9wOiBfdG9wLFxuICAgICAgICAgIGJvdHRvbTogX2JvdHRvbSxcbiAgICAgICAgICBsZWZ0OiBfbGVmdCxcbiAgICAgICAgICByaWdodDogX3JpZ2h0LFxuICAgICAgICAgIHdpZHRoOiBfd2lkdGgsXG4gICAgICAgICAgaGVpZ2h0OiBfaGVpZ2h0XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICBkZWZhdWx0OlxuICAgICAge1xuICAgICAgICByZXR1cm4gYm91bmRpbmdSZWN0O1xuICAgICAgfVxuICB9XG59XG5cbnZhciBzdGlja3kgPSB7XG4gIG5hbWU6ICdzdGlja3knLFxuICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICBmbjogZnVuY3Rpb24gZm4oaW5zdGFuY2UpIHtcbiAgICB2YXIgcmVmZXJlbmNlID0gaW5zdGFuY2UucmVmZXJlbmNlLFxuICAgICAgICBwb3BwZXIgPSBpbnN0YW5jZS5wb3BwZXI7XG5cbiAgICBmdW5jdGlvbiBnZXRSZWZlcmVuY2UoKSB7XG4gICAgICByZXR1cm4gaW5zdGFuY2UucG9wcGVySW5zdGFuY2UgPyBpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZS5zdGF0ZS5lbGVtZW50cy5yZWZlcmVuY2UgOiByZWZlcmVuY2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2hvdWxkQ2hlY2sodmFsdWUpIHtcbiAgICAgIHJldHVybiBpbnN0YW5jZS5wcm9wcy5zdGlja3kgPT09IHRydWUgfHwgaW5zdGFuY2UucHJvcHMuc3RpY2t5ID09PSB2YWx1ZTtcbiAgICB9XG5cbiAgICB2YXIgcHJldlJlZlJlY3QgPSBudWxsO1xuICAgIHZhciBwcmV2UG9wUmVjdCA9IG51bGw7XG5cbiAgICBmdW5jdGlvbiB1cGRhdGVQb3NpdGlvbigpIHtcbiAgICAgIHZhciBjdXJyZW50UmVmUmVjdCA9IHNob3VsZENoZWNrKCdyZWZlcmVuY2UnKSA/IGdldFJlZmVyZW5jZSgpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIDogbnVsbDtcbiAgICAgIHZhciBjdXJyZW50UG9wUmVjdCA9IHNob3VsZENoZWNrKCdwb3BwZXInKSA/IHBvcHBlci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSA6IG51bGw7XG5cbiAgICAgIGlmIChjdXJyZW50UmVmUmVjdCAmJiBhcmVSZWN0c0RpZmZlcmVudChwcmV2UmVmUmVjdCwgY3VycmVudFJlZlJlY3QpIHx8IGN1cnJlbnRQb3BSZWN0ICYmIGFyZVJlY3RzRGlmZmVyZW50KHByZXZQb3BSZWN0LCBjdXJyZW50UG9wUmVjdCkpIHtcbiAgICAgICAgaWYgKGluc3RhbmNlLnBvcHBlckluc3RhbmNlKSB7XG4gICAgICAgICAgaW5zdGFuY2UucG9wcGVySW5zdGFuY2UudXBkYXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcHJldlJlZlJlY3QgPSBjdXJyZW50UmVmUmVjdDtcbiAgICAgIHByZXZQb3BSZWN0ID0gY3VycmVudFBvcFJlY3Q7XG5cbiAgICAgIGlmIChpbnN0YW5jZS5zdGF0ZS5pc01vdW50ZWQpIHtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHVwZGF0ZVBvc2l0aW9uKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgb25Nb3VudDogZnVuY3Rpb24gb25Nb3VudCgpIHtcbiAgICAgICAgaWYgKGluc3RhbmNlLnByb3BzLnN0aWNreSkge1xuICAgICAgICAgIHVwZGF0ZVBvc2l0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG59O1xuXG5mdW5jdGlvbiBhcmVSZWN0c0RpZmZlcmVudChyZWN0QSwgcmVjdEIpIHtcbiAgaWYgKHJlY3RBICYmIHJlY3RCKSB7XG4gICAgcmV0dXJuIHJlY3RBLnRvcCAhPT0gcmVjdEIudG9wIHx8IHJlY3RBLnJpZ2h0ICE9PSByZWN0Qi5yaWdodCB8fCByZWN0QS5ib3R0b20gIT09IHJlY3RCLmJvdHRvbSB8fCByZWN0QS5sZWZ0ICE9PSByZWN0Qi5sZWZ0O1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbnRpcHB5LnNldERlZmF1bHRQcm9wcyh7XG4gIHJlbmRlcjogcmVuZGVyXG59KTtcblxuZXhwb3J0cy5hbmltYXRlRmlsbCA9IGFuaW1hdGVGaWxsO1xuZXhwb3J0cy5jcmVhdGVTaW5nbGV0b24gPSBjcmVhdGVTaW5nbGV0b247XG5leHBvcnRzLmRlZmF1bHQgPSB0aXBweTtcbmV4cG9ydHMuZGVsZWdhdGUgPSBkZWxlZ2F0ZTtcbmV4cG9ydHMuZm9sbG93Q3Vyc29yID0gZm9sbG93Q3Vyc29yO1xuZXhwb3J0cy5oaWRlQWxsID0gaGlkZUFsbDtcbmV4cG9ydHMuaW5saW5lUG9zaXRpb25pbmcgPSBpbmxpbmVQb3NpdGlvbmluZztcbmV4cG9ydHMucm91bmRBcnJvdyA9IFJPVU5EX0FSUk9XO1xuZXhwb3J0cy5zdGlja3kgPSBzdGlja3k7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aXBweS5janMuanMubWFwXG4iXX0=
