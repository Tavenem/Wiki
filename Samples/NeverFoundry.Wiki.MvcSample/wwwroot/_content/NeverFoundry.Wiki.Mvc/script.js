!function i(a,s,c){function u(t,e){if(!s[t]){if(!a[t]){var n="function"==typeof require&&require;if(!e&&n)return n(t,!0);if(p)return p(t,!0);var r=new Error("Cannot find module '"+t+"'");throw r.code="MODULE_NOT_FOUND",r}var o=s[t]={exports:{}};a[t][0].call(o.exports,function(e){return u(a[t][1][e]||e)},o,o.exports,i,a,s,c)}return s[t].exports}for(var p="function"==typeof require&&require,e=0;e<c.length;e++)u(c[e]);return u}({1:[function(e,t,n){"use strict";var r,o=e("@babel/runtime/helpers/interopRequireDefault"),a=o(e("@babel/runtime/regenerator")),i=o(e("@babel/runtime/helpers/asyncToGenerator")),s=o(e("tippy.js"));window.addEventListener("load",function(){window.wikiAutosuggestXHR=new XMLHttpRequest;var e=this.document.getElementById("searchInput");e&&e.addEventListener("keyup",function(e){var n,t=e.target;t.value.length<3||(n=document.getElementById("searchSuggestions"))&&(window.wikiAutosuggestXHR.abort(),window.wikiAutosuggestXHR.onreadystatechange=function(){var e;4==this.readyState&&200==this.status&&(e=JSON.parse(this.responseText),n.innerHTML="",e.forEach(function(e){var t=document.createElement("option");t.value=e,n.appendChild(t)}))},window.wikiAutosuggestXHR.open("GET","/wiki/api/suggest?search="+encodeURIComponent(t.value),!0),window.wikiAutosuggestXHR.send())})}),window.wikimvc={tmr:-1,showPreview:(r=(0,i.default)(a.default.mark(function e(t,n){var r,o,i;return a.default.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(t=t||window.event,null==(r=t.currentTarget)||r._tippy)return e.abrupt("return");e.next=4;break;case 4:(o=new FormData).append("link",n),i=(0,s.default)(r,{content:"Loading preview...",delay:[1500,null],placement:"auto",allowHTML:!0,onCreate:function(e){e._isFetching=!1,e._loaded=!1},onShow:function(t){t._isFetching||t._loaded||(t._isFetching=!0,fetch("/wiki/api/preview",{method:"POST",body:o,headers:{Accept:"application/json"}}).then(function(e){return e.json()}).then(function(e){e.length<1?(t.hide(),t.disable()):t.setContent(e)}).catch(function(e){t.setContent("Preview failed to load")}).finally(function(){t._loaded=!0,t._isFetching=!1,t.setProps({delay:[750,null]})}))}}),window.wikimvc.tmr=setTimeout(function(){i.show()},1500);case 8:case"end":return e.stop()}},e)})),function(e,t){return r.apply(this,arguments)}),hidePreview:function(){-1!==window.wikimvc.tmr&&(clearTimeout(window.wikimvc.tmr),window.wikimvc.tmr=-1)},showHideMessage:function(e){parseInt(getComputedStyle(e).getPropertyValue("height"))<parseInt(getComputedStyle(e).getPropertyValue("max-height"))&&e.parentElement.classList.remove("collapsible")}}},{"@babel/runtime/helpers/asyncToGenerator":2,"@babel/runtime/helpers/interopRequireDefault":3,"@babel/runtime/regenerator":4,"tippy.js":8}],2:[function(e,t,n){function c(e,t,n,r,o,i,a){try{var s=e[i](a),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(r,o)}t.exports=function(s){return function(){var e=this,a=arguments;return new Promise(function(t,n){var r=s.apply(e,a);function o(e){c(r,t,n,o,i,"next",e)}function i(e){c(r,t,n,o,i,"throw",e)}o(void 0)})}}},{}],3:[function(e,t,n){t.exports=function(e){return e&&e.__esModule?e:{default:e}}},{}],4:[function(e,t,n){t.exports=e("regenerator-runtime")},{"regenerator-runtime":7}],5:[function(e,t,c){(function(w){"use strict";function D(e){var t=e.getBoundingClientRect();return{width:t.width,height:t.height,top:t.top,right:t.right,bottom:t.bottom,left:t.left,x:t.left,y:t.top}}function T(e){if("[object Window]"===e.toString())return e;var t=e.ownerDocument;return t?t.defaultView:window}function p(e){var t=T(e);return{scrollLeft:t.pageXOffset,scrollTop:t.pageYOffset}}function k(e){return e instanceof T(e).Element||e instanceof Element}function f(e){return e instanceof T(e).HTMLElement||e instanceof HTMLElement}function u(e){return e?(e.nodeName||"").toLowerCase():null}function A(e){return(k(e)?e.ownerDocument:e.document).documentElement}function l(e){return D(A(e)).left+p(e).scrollLeft}function E(e){return T(e).getComputedStyle(e)}function d(e){var t=E(e),n=t.overflow,r=t.overflowX,o=t.overflowY;return/auto|scroll|overlay|hidden/.test(n+o+r)}function x(e,t,n){void 0===n&&(n=!1);var r,o,i=A(t),a=D(e),s={scrollLeft:0,scrollTop:0},c={x:0,y:0};return n||("body"===u(t)&&!d(i)||(s=(r=t)!==T(r)&&f(r)?{scrollLeft:(o=r).scrollLeft,scrollTop:o.scrollTop}:p(r)),f(t)?((c=D(t)).x+=t.clientLeft,c.y+=t.clientTop):i&&(c.x=l(i))),{x:a.left+s.scrollLeft-c.x,y:a.top+s.scrollTop-c.y,width:a.width,height:a.height}}function ee(e){return{x:e.offsetLeft,y:e.offsetTop,width:e.offsetWidth,height:e.offsetHeight}}function s(e){return"html"===u(e)?e:e.assignedSlot||e.parentNode||e.host||A(e)}function O(e,t){void 0===t&&(t=[]);var n=function e(t){return 0<=["html","body","#document"].indexOf(u(t))?t.ownerDocument.body:f(t)&&d(t)?t:e(s(t))}(e),r="body"===u(n),o=T(n),i=r?[o].concat(o.visualViewport||[],d(n)?n:[]):n,a=t.concat(i);return r?a:a.concat(O(s(i)))}function r(e){return f(e)&&"fixed"!==E(e).position?e.offsetParent:null}function te(e){for(var t=T(e),n=r(e);n&&0<=["table","td","th"].indexOf(u(n));)n=r(n);return(!n||"body"!==u(n)||"static"!==E(n).position)&&n||t}Object.defineProperty(c,"__esModule",{value:!0});var ne="top",re="bottom",oe="right",ie="left",R="auto",I=[ne,re,oe,ie],ae="start",h="end",N="clippingParents",S="viewport",C="popper",P="reference",H=I.reduce(function(e,t){return e.concat([t+"-"+ae,t+"-"+h])},[]),q=[].concat(I,[R]).reduce(function(e,t){return e.concat([t,t+"-"+ae,t+"-"+h])},[]),L=["beforeRead","read","afterRead","beforeMain","main","afterMain","beforeWrite","write","afterWrite"];function j(e){var r=new Map,o=new Set,t=[];return e.forEach(function(e){r.set(e.name,e)}),e.forEach(function(e){o.has(e.name)||!function n(e){o.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach(function(e){var t;o.has(e)||(t=r.get(e))&&n(t)}),t.push(e)}(e)}),t}function M(e){for(var t=arguments.length,n=new Array(1<t?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return[].concat(n).reduce(function(e,t){return e.replace(/%s/,t)},e)}var _='Popper: modifier "%s" provided an invalid %s property, expected %s but got %s',V='Popper: modifier "%s" requires "%s", but "%s" modifier is not available',B=["name","enabled","phase","fn","effect","requires","options"];function se(e){return e.split("-")[0]}var F="Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.",o={placement:"bottom",modifiers:[],strategy:"absolute"};function W(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return!t.some(function(e){return!(e&&"function"==typeof e.getBoundingClientRect)})}function e(e){void 0===e&&(e={});var t=e.defaultModifiers,y=void 0===t?[]:t,n=e.defaultOptions,b=void 0===n?o:n;return function(l,d,t){void 0===t&&(t=b);var n,r,h={placement:"bottom",orderedModifiers:[],options:Object.assign({},o,{},b),modifiersData:{},elements:{reference:l,popper:d},attributes:{},styles:{}},m=[],p=!1,v={state:h,setOptions:function(e){g(),h.options=Object.assign({},b,{},h.options,{},e),h.scrollParents={reference:k(l)?O(l):l.contextElement?O(l.contextElement):[],popper:O(d)};var t,n,r,o,i,a,s,c,u,p,f=(r=[].concat(y,h.options.modifiers),o=r.reduce(function(e,t){var n=e[t.name];return e[t.name]=n?Object.assign({},n,{},t,{options:Object.assign({},n.options,{},t.options),data:Object.assign({},n.data,{},t.data)}):t,e},{}),t=Object.keys(o).map(function(e){return o[e]}),n=j(t),L.reduce(function(e,t){return e.concat(n.filter(function(e){return e.phase===t}))},[]));return h.orderedModifiers=f.filter(function(e){return e.enabled}),"production"!==w.env.NODE_ENV&&(c=[].concat(f,h.options.modifiers),u=function(e){return e.name},p=new Set,i=c.filter(function(e){var t=u(e);if(!p.has(t))return p.add(t),!0}),(s=i).forEach(function(n){Object.keys(n).forEach(function(e){switch(e){case"name":"string"!=typeof n.name&&console.error(M(_,String(n.name),'"name"','"string"','"'+String(n.name)+'"'));break;case"enabled":"boolean"!=typeof n.enabled&&console.error(M(_,n.name,'"enabled"','"boolean"','"'+String(n.enabled)+'"'));case"phase":L.indexOf(n.phase)<0&&console.error(M(_,n.name,'"phase"',"either "+L.join(", "),'"'+String(n.phase)+'"'));break;case"fn":"function"!=typeof n.fn&&console.error(M(_,n.name,'"fn"','"function"','"'+String(n.fn)+'"'));break;case"effect":"function"!=typeof n.effect&&console.error(M(_,n.name,'"effect"','"function"','"'+String(n.fn)+'"'));break;case"requires":Array.isArray(n.requires)||console.error(M(_,n.name,'"requires"','"array"','"'+String(n.requires)+'"'));break;case"requiresIfExists":Array.isArray(n.requiresIfExists)||console.error(M(_,n.name,'"requiresIfExists"','"array"','"'+String(n.requiresIfExists)+'"'));break;case"options":case"data":break;default:console.error('PopperJS: an invalid property has been provided to the "'+n.name+'" modifier, valid properties are '+B.map(function(e){return'"'+e+'"'}).join(", ")+'; but "'+e+'" was provided.')}n.requires&&n.requires.forEach(function(t){null==s.find(function(e){return e.name===t})&&console.error(M(V,String(n.name),t,t))})})}),se(h.options.placement)===R&&(h.orderedModifiers.find(function(e){return"flip"===e.name})||console.error(['Popper: "auto" placements require the "flip" modifier be',"present and enabled to work."].join(" "))),[(a=E(d)).marginTop,a.marginRight,a.marginBottom,a.marginLeft].some(function(e){return parseFloat(e)})&&console.warn(['Popper: CSS "margin" styles cannot be used to apply padding',"between the popper and its reference element or boundary.","To replicate margin, use the `offset` modifier, as well as","the `padding` option in the `preventOverflow` and `flip`","modifiers."].join(" "))),h.orderedModifiers.forEach(function(e){var t,n=e.name,r=e.options,o=void 0===r?{}:r,i=e.effect;"function"==typeof i&&(t=i({state:h,name:n,instance:v,options:o}),m.push(t||function(){}))}),v.update()},forceUpdate:function(){if(!p){var e=h.elements,t=e.reference,n=e.popper;if(W(t,n)){h.rects={reference:x(t,te(n),"fixed"===h.options.strategy),popper:ee(n)},h.reset=!1,h.placement=h.options.placement,h.orderedModifiers.forEach(function(e){return h.modifiersData[e.name]=Object.assign({},e.data)});for(var r,o,i,a,s,c=0,u=0;u<h.orderedModifiers.length;u++){if("production"!==w.env.NODE_ENV&&100<(c+=1)){console.error("Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.");break}!0!==h.reset?(o=(r=h.orderedModifiers[u]).fn,a=void 0===(i=r.options)?{}:i,s=r.name,"function"==typeof o&&(h=o({state:h,options:a,name:s,instance:v})||h)):(h.reset=!1,u=-1)}}else"production"!==w.env.NODE_ENV&&console.error(F)}},update:(n=function(){return new Promise(function(e){v.forceUpdate(),e(h)})},function(){return r=r||new Promise(function(e){Promise.resolve().then(function(){r=void 0,e(n())})})}),destroy:function(){g(),p=!0}};if(!W(l,d))return"production"!==w.env.NODE_ENV&&console.error(F),v;function g(){m.forEach(function(e){return e()}),m=[]}return v.setOptions(t).then(function(e){!p&&t.onFirstUpdate&&t.onFirstUpdate(e)}),v}}var m={passive:!0};function ce(e){return e.split("-")[1]}function ue(e){return 0<=["top","bottom"].indexOf(e)?"x":"y"}function U(e){var t,n=e.reference,r=e.element,o=e.placement,i=o?se(o):null,a=o?ce(o):null,s=n.x+n.width/2-r.width/2,c=n.y+n.height/2-r.height/2;switch(i){case ne:t={x:s,y:n.y-r.height};break;case re:t={x:s,y:n.y+n.height};break;case oe:t={x:n.x+n.width,y:c};break;case ie:t={x:n.x-r.width,y:c};break;default:t={x:n.x,y:n.y}}var u=i?ue(i):null;if(null!=u){var p="y"===u?"height":"width";switch(a){case ae:t[u]=Math.floor(t[u])-Math.floor(n[p]/2-r[p]/2);break;case h:t[u]=Math.floor(t[u])+Math.ceil(n[p]/2-r[p]/2)}}return t}var X={top:"auto",right:"auto",bottom:"auto",left:"auto"};function v(e){var t,n,r,o,i,a,s=e.popper,c=e.popperRect,u=e.placement,p=e.offsets,f=e.position,l=e.gpuAcceleration,d=e.adaptive,h=(r=(n=p).x,o=n.y,i=window.devicePixelRatio||1,{x:Math.round(r*i)/i||0,y:Math.round(o*i)/i||0}),m=h.x,v=h.y,g=p.hasOwnProperty("x"),y=p.hasOwnProperty("y"),b=ie,w=ne,E=window;d&&((a=te(s))===T(s)&&(a=A(s)),u===ne&&(w=re,v-=a.clientHeight-c.height,v*=l?1:-1),u===ie&&(b=oe,m-=a.clientWidth-c.width,m*=l?1:-1));var x,O=Object.assign({position:f},d&&X);return l?Object.assign({},O,((x={})[w]=y?"0":"",x[b]=g?"0":"",x.transform=(E.devicePixelRatio||1)<2?"translate("+m+"px, "+v+"px)":"translate3d("+m+"px, "+v+"px, 0)",x)):Object.assign({},O,((t={})[w]=y?v+"px":"",t[b]=g?m+"px":"",t.transform="",t))}var t={left:"right",right:"left",bottom:"top",top:"bottom"};function Y(e){return e.replace(/left|right|bottom|top/g,function(e){return t[e]})}var n={start:"end",end:"start"};function G(e){return e.replace(/start|end/g,function(e){return n[e]})}function g(e){return parseFloat(e)||0}function y(e){var t,n,r=T(e),o={top:g((n=f(t=e)?E(t):{}).borderTopWidth),right:g(n.borderRightWidth),bottom:g(n.borderBottomWidth),left:g(n.borderLeftWidth)},i="html"===u(e),a=l(e),s=e.clientWidth+o.right,c=e.clientHeight+o.bottom;return i&&50<r.innerHeight-e.clientHeight&&(c=r.innerHeight-o.bottom),{top:i?0:e.clientTop,right:e.clientLeft>o.left?o.right:i?r.innerWidth-s-a:e.offsetWidth-s,bottom:i?r.innerHeight-c:e.offsetHeight-c,left:i?a:e.clientLeft}}function b(e,t){var n=Boolean(t.getRootNode&&t.getRootNode().host);if(e.contains(t))return!0;if(n){var r=t;do{if(r&&e.isSameNode(r))return!0;r=r.parentNode||r.host}while(r)}return!1}function z(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function $(e,t){return t===S?z((a=T(e),s=a.visualViewport,c=a.innerWidth,u=a.innerHeight,s&&/iPhone|iPod|iPad/.test(navigator.platform)&&(c=s.width,u=s.height),{width:c,height:u,x:0,y:0})):f(t)?D(t):z((n=A(e),r=T(n),o=p(n),(i=x(A(n),r)).height=Math.max(i.height,r.innerHeight),i.width=Math.max(i.width,r.innerWidth),i.x=-o.scrollLeft,i.y=-o.scrollTop,i));var n,r,o,i,a,s,c,u}function J(o,e,t){var n,r,i,a="clippingParents"===e?(r=O(n=o),k(i=0<=["absolute","fixed"].indexOf(E(n).position)&&f(n)?te(n):n)?r.filter(function(e){return k(e)&&b(e,i)}):[]):[].concat(e),s=[].concat(a,[t]),c=s[0],u=s.reduce(function(e,t){var n=$(o,t),r=y(f(t)?t:A(o));return e.top=Math.max(n.top+r.top,e.top),e.right=Math.min(n.right-r.right,e.right),e.bottom=Math.min(n.bottom-r.bottom,e.bottom),e.left=Math.max(n.left+r.left,e.left),e},$(o,c));return u.width=u.right-u.left,u.height=u.bottom-u.top,u.x=u.left,u.y=u.top,u}function pe(){return{top:0,right:0,bottom:0,left:0}}function K(e){return Object.assign({},pe(),{},e)}function Q(n,e){return e.reduce(function(e,t){return e[t]=n,e},{})}function fe(e,t){void 0===t&&(t={});var r,n=t.placement,o=void 0===n?e.placement:n,i=t.boundary,a=void 0===i?N:i,s=t.rootBoundary,c=void 0===s?S:s,u=t.elementContext,p=void 0===u?C:u,f=t.altBoundary,l=void 0!==f&&f,d=t.padding,h=void 0===d?0:d,m=K("number"!=typeof h?h:Q(h,I)),v=p===C?P:C,g=e.elements.reference,y=e.rects.popper,b=e.elements[l?v:p],w=J(k(b)?b:b.contextElement||A(e.elements.popper),a,c),E=D(g),x=U({reference:E,element:y,strategy:"absolute",placement:o}),O=z(Object.assign({},y,{},x)),T=p===C?O:E,L={top:w.top-T.top+m.top,bottom:T.bottom-w.bottom+m.bottom,left:w.left-T.left+m.left,right:T.right-w.right+m.right},j=e.modifiersData.offset;return p===C&&j&&(r=j[o],Object.keys(L).forEach(function(e){var t=0<=[oe,re].indexOf(e)?1:-1,n=0<=[ne,re].indexOf(e)?"y":"x";L[e]+=r[n]*t})),L}function le(e,t,n){return Math.max(e,Math.min(t,n))}function Z(e,t,n){return void 0===n&&(n={x:0,y:0}),{top:e.top-t.height-n.y,right:e.right-t.width+n.x,bottom:e.bottom-t.height+n.y,left:e.left-t.width-n.x}}function de(t){return[ne,oe,re,ie].some(function(e){return 0<=t[e]})}var i=[{name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var t=e.state,n=e.instance,r=e.options,o=r.scroll,i=void 0===o||o,a=r.resize,s=void 0===a||a,c=T(t.elements.popper),u=[].concat(t.scrollParents.reference,t.scrollParents.popper);return i&&u.forEach(function(e){e.addEventListener("scroll",n.update,m)}),s&&c.addEventListener("resize",n.update,m),function(){i&&u.forEach(function(e){e.removeEventListener("scroll",n.update,m)}),s&&c.removeEventListener("resize",n.update,m)}},data:{}},{name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,n=e.name;t.modifiersData[n]=U({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}},{name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t,n=e.state,r=e.options,o=r.gpuAcceleration,i=void 0===o||o,a=r.adaptive,s=void 0===a||a;"production"!==w.env.NODE_ENV&&(t=E(n.elements.popper).transitionProperty||"",s&&["transform","top","right","bottom","left"].some(function(e){return 0<=t.indexOf(e)})&&console.warn(["Popper: Detected CSS transitions on at least one of the following",'CSS properties: "transform", "top", "right", "bottom", "left".',"\n\n",'Disable the "computeStyles" modifier\'s `adaptive` option to allow',"for smooth transitions, or remove these properties from the CSS","transition declaration on the popper element if only transitioning","opacity or background-color for example.","\n\n","We recommend using the popper element as a wrapper around an inner","element that can have any CSS property transitioned for animations."].join(" ")));var c={placement:se(n.placement),popper:n.elements.popper,popperRect:n.rects.popper,gpuAcceleration:i};null!=n.modifiersData.popperOffsets&&(n.styles.popper=Object.assign({},n.styles.popper,{},v(Object.assign({},c,{offsets:n.modifiersData.popperOffsets,position:n.options.strategy,adaptive:s})))),null!=n.modifiersData.arrow&&(n.styles.arrow=Object.assign({},n.styles.arrow,{},v(Object.assign({},c,{offsets:n.modifiersData.arrow,position:"absolute",adaptive:!1})))),n.attributes.popper=Object.assign({},n.attributes.popper,{"data-popper-placement":n.placement})},data:{}},{name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var o=e.state;Object.keys(o.elements).forEach(function(e){var t=o.styles[e]||{},n=o.attributes[e]||{},r=o.elements[e];f(r)&&u(r)&&(Object.assign(r.style,t),Object.keys(n).forEach(function(e){var t=n[e];!1===t?r.removeAttribute(e):r.setAttribute(e,!0===t?"":t)}))})},effect:function(e){var o=e.state,i={popper:{position:o.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(o.elements.popper.style,i.popper),o.elements.arrow&&Object.assign(o.elements.arrow.style,i.arrow),function(){Object.keys(o.elements).forEach(function(e){var t=o.elements[e],n=o.attributes[e]||{},r=Object.keys(o.styles.hasOwnProperty(e)?o.styles[e]:i[e]).reduce(function(e,t){return e[t]="",e},{});f(t)&&u(t)&&(Object.assign(t.style,r),Object.keys(n).forEach(function(e){t.removeAttribute(e)}))})}},requires:["computeStyles"]},{name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var p=e.state,t=e.options,n=e.name,r=t.offset,f=void 0===r?[0,0]:r,o=q.reduce(function(e,t){var n,r,o,i,a,s,c,u;return e[t]=(n=t,r=p.rects,o=f,i=se(n),a=0<=[ie,ne].indexOf(i)?-1:1,s="function"==typeof o?o(Object.assign({},r,{placement:n})):o,c=(c=s[0])||0,u=((u=s[1])||0)*a,0<=[ie,oe].indexOf(i)?{x:u,y:c}:{x:c,y:u}),e},{}),i=o[p.placement],a=i.x,s=i.y;null!=p.modifiersData.popperOffsets&&(p.modifiersData.popperOffsets.x+=a,p.modifiersData.popperOffsets.y+=s),p.modifiersData[n]=o}},{name:"flip",enabled:!0,phase:"main",fn:function(e){var n=e.state,t=e.options,r=e.name;if(!n.modifiersData[r]._skip){for(var o=t.mainAxis,i=void 0===o||o,a=t.altAxis,s=void 0===a||a,c=t.fallbackPlacements,u=t.padding,p=t.boundary,f=t.rootBoundary,l=t.altBoundary,d=t.flipVariations,h=void 0===d||d,m=t.allowedAutoPlacements,v=n.options.placement,g=se(v),y=c||(g===v||!h?[Y(v)]:function(e){if(se(e)===R)return[];var t=Y(e);return[G(e),t,G(t)]}(v)),b=[v].concat(y).reduce(function(e,t){return e.concat(se(t)===R?function(n,e){void 0===e&&(e={});var t=e.placement,r=e.boundary,o=e.rootBoundary,i=e.padding,a=e.flipVariations,s=e.allowedAutoPlacements,c=void 0===s?q:s,u=ce(t),p=(u?a?H:H.filter(function(e){return ce(e)===u}):I).filter(function(e){return 0<=c.indexOf(e)}).reduce(function(e,t){return e[t]=fe(n,{placement:t,boundary:r,rootBoundary:o,padding:i})[se(t)],e},{});return Object.keys(p).sort(function(e,t){return p[e]-p[t]})}(n,{placement:t,boundary:p,rootBoundary:f,padding:u,flipVariations:h,allowedAutoPlacements:m}):t)},[]),w=n.rects.reference,E=n.rects.popper,x=new Map,O=!0,T=b[0],L=0;L<b.length;L++){var j=b[L],D=se(j),k=ce(j)===ae,A=0<=[ne,re].indexOf(D),N=A?"width":"height",S=fe(n,{placement:j,boundary:p,rootBoundary:f,altBoundary:l,padding:u}),C=A?k?oe:ie:k?re:ne;w[N]>E[N]&&(C=Y(C));var P=Y(C),M=[];if(i&&M.push(S[D]<=0),s&&M.push(S[C]<=0,S[P]<=0),M.every(function(e){return e})){T=j,O=!1;break}x.set(j,M)}if(O)for(var _=function(n){var e=b.find(function(e){var t=x.get(e);if(t)return t.slice(0,n).every(function(e){return e})});if(e)return T=e,"break"},V=h?3:1;0<V;V--){if("break"===_(V))break}n.placement!==T&&(n.modifiersData[r]._skip=!0,n.placement=T,n.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}},{name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var t,n,r,o,i,a,s,c,u,p,f,l,d,h,m,v,g,y,b,w,E,x,O,T,L,j,D,k=e.state,A=e.options,N=e.name,S=A.mainAxis,C=void 0===S||S,P=A.altAxis,M=void 0!==P&&P,_=A.boundary,V=A.rootBoundary,R=A.altBoundary,I=A.padding,H=A.tether,q=void 0===H||H,B=A.tetherOffset,F=void 0===B?0:B,W=fe(k,{boundary:_,rootBoundary:V,padding:I,altBoundary:R}),U=se(k.placement),X=ce(k.placement),Y=!X,G=ue(U),z="x"===G?"y":"x",$=k.modifiersData.popperOffsets,J=k.rects.reference,K=k.rects.popper,Q="function"==typeof F?F(Object.assign({},k.rects,{placement:k.placement})):F,Z={x:0,y:0};$&&(C&&(t="y"===G?ne:ie,n="y"===G?re:oe,r="y"===G?"height":"width",o=$[G],i=$[G]+W[t],a=$[G]-W[n],s=q?-K[r]/2:0,c=X===ae?J[r]:K[r],u=X===ae?-K[r]:-J[r],p=k.elements.arrow,f=q&&p?ee(p):{width:0,height:0},d=(l=k.modifiersData["arrow#persistent"]?k.modifiersData["arrow#persistent"].padding:pe())[t],h=l[n],m=le(0,J[r],f[r]),v=Y?J[r]/2-s-m-d-Q:c-m-d-Q,g=Y?-J[r]/2+s+m+h+Q:u+m+h+Q,b=(y=k.elements.arrow&&te(k.elements.arrow))?"y"===G?y.clientTop||0:y.clientLeft||0:0,w=k.modifiersData.offset?k.modifiersData.offset[k.placement][G]:0,E=$[G]+v-w-b,x=$[G]+g-w,O=le(q?Math.min(i,E):i,o,q?Math.max(a,x):a),$[G]=O,Z[G]=O-o),M&&(T="x"===G?ne:ie,L="x"===G?re:oe,D=le((j=$[z])+W[T],j,j-W[L]),$[z]=D,Z[z]=D-j),k.modifiersData[N]=Z)},requiresIfExists:["offset"]},{name:"arrow",enabled:!0,phase:"main",fn:function(e){var t,n,r,o,i,a,s,c,u,p,f,l,d,h,m=e.state,v=e.name,g=m.elements.arrow,y=m.modifiersData.popperOffsets,b=se(m.placement),w=ue(b),E=0<=[ie,oe].indexOf(b)?"height":"width";g&&y&&(n=m.modifiersData[v+"#persistent"].padding,r=ee(g),o="y"===w?ne:ie,i="y"===w?re:oe,a=m.rects.reference[E]+m.rects.reference[w]-y[w]-m.rects.popper[E],s=y[w]-m.rects.reference[w],u=(c=te(g))?"y"===w?c.clientHeight||0:c.clientWidth||0:0,p=a/2-s/2,f=n[o],l=u-r[E]-n[i],h=le(f,d=u/2-r[E]/2+p,l),m.modifiersData[v]=((t={})[w]=h,t.centerOffset=h-d,t))},effect:function(e){var t=e.state,n=e.options,r=e.name,o=n.element,i=void 0===o?"[data-popper-arrow]":o,a=n.padding,s=void 0===a?0:a;null!=i&&("string"==typeof i&&!(i=t.elements.popper.querySelector(i))||("production"!==w.env.NODE_ENV&&(f(i)||console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).',"To use an SVG arrow, wrap it in an HTMLElement that will be used as","the arrow."].join(" "))),b(t.elements.popper,i)?(t.elements.arrow=i,t.modifiersData[r+"#persistent"]={padding:K("number"!=typeof s?s:Q(s,I))}):"production"!==w.env.NODE_ENV&&console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper',"element."].join(" "))))},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]},{name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,n=e.name,r=t.rects.reference,o=t.rects.popper,i=t.modifiersData.preventOverflow,a=fe(t,{elementContext:"reference"}),s=fe(t,{altBoundary:!0}),c=Z(a,r),u=Z(s,o,i),p=de(c),f=de(u);t.modifiersData[n]={referenceClippingOffsets:c,popperEscapeOffsets:u,isReferenceHidden:p,hasPopperEscaped:f},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":p,"data-popper-escaped":f})}}],a=e({defaultModifiers:i});c.createPopper=a,c.defaultModifiers=i,c.detectOverflow=fe,c.popperGenerator=e}).call(this,e("_process"))},{_process:6}],6:[function(e,t,n){var r,o,i=t.exports={};function a(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function c(t){if(r===setTimeout)return setTimeout(t,0);if((r===a||!r)&&setTimeout)return r=setTimeout,setTimeout(t,0);try{return r(t,0)}catch(e){try{return r.call(null,t,0)}catch(e){return r.call(this,t,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:a}catch(e){r=a}try{o="function"==typeof clearTimeout?clearTimeout:s}catch(e){o=s}}();var u,p=[],f=!1,l=-1;function d(){f&&u&&(f=!1,u.length?p=u.concat(p):l=-1,p.length&&h())}function h(){if(!f){var e=c(d);f=!0;for(var t=p.length;t;){for(u=p,p=[];++l<t;)u&&u[l].run();l=-1,t=p.length}u=null,f=!1,function(t){if(o===clearTimeout)return clearTimeout(t);if((o===s||!o)&&clearTimeout)return o=clearTimeout,clearTimeout(t);try{o(t)}catch(e){try{return o.call(null,t)}catch(e){return o.call(this,t)}}}(e)}}function m(e,t){this.fun=e,this.array=t}function v(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(1<arguments.length)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];p.push(new m(e,t)),1!==p.length||f||c(h)},m.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=v,i.addListener=v,i.once=v,i.off=v,i.removeListener=v,i.removeAllListeners=v,i.emit=v,i.prependListener=v,i.prependOnceListener=v,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},{}],7:[function(e,t,n){var r=function(a){"use strict";var c,e=Object.prototype,p=e.hasOwnProperty,t="function"==typeof Symbol?Symbol:{},o=t.iterator||"@@iterator",n=t.asyncIterator||"@@asyncIterator",r=t.toStringTag||"@@toStringTag";function s(e,t,n,r){var i,a,s,c,o=t&&t.prototype instanceof g?t:g,u=Object.create(o.prototype),p=new D(r||[]);return u._invoke=(i=e,a=n,s=p,c=l,function(e,t){if(c===h)throw new Error("Generator is already running");if(c===m){if("throw"===e)throw t;return A()}for(s.method=e,s.arg=t;;){var n=s.delegate;if(n){var r=T(n,s);if(r){if(r===v)continue;return r}}if("next"===s.method)s.sent=s._sent=s.arg;else if("throw"===s.method){if(c===l)throw c=m,s.arg;s.dispatchException(s.arg)}else"return"===s.method&&s.abrupt("return",s.arg);c=h;var o=f(i,a,s);if("normal"===o.type){if(c=s.done?m:d,o.arg===v)continue;return{value:o.arg,done:s.done}}"throw"===o.type&&(c=m,s.method="throw",s.arg=o.arg)}}),u}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}a.wrap=s;var l="suspendedStart",d="suspendedYield",h="executing",m="completed",v={};function g(){}function i(){}function u(){}var y={};y[o]=function(){return this};var b=Object.getPrototypeOf,w=b&&b(b(k([])));w&&w!==e&&p.call(w,o)&&(y=w);var E=u.prototype=g.prototype=Object.create(y);function x(e){["next","throw","return"].forEach(function(t){e[t]=function(e){return this._invoke(t,e)}})}function O(c,u){var t;this._invoke=function(n,r){function e(){return new u(function(e,t){!function t(e,n,r,o){var i=f(c[e],c,n);if("throw"!==i.type){var a=i.arg,s=a.value;return s&&"object"==typeof s&&p.call(s,"__await")?u.resolve(s.__await).then(function(e){t("next",e,r,o)},function(e){t("throw",e,r,o)}):u.resolve(s).then(function(e){a.value=e,r(a)},function(e){return t("throw",e,r,o)})}o(i.arg)}(n,r,e,t)})}return t=t?t.then(e,e):e()}}function T(e,t){var n=e.iterator[t.method];if(n===c){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=c,T(e,t),"throw"===t.method))return v;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var r=f(n,e.iterator,t.arg);if("throw"===r.type)return t.method="throw",t.arg=r.arg,t.delegate=null,v;var o=r.arg;return o?o.done?(t[e.resultName]=o.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=c),t.delegate=null,v):o:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,v)}function L(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function D(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(L,this),this.reset(!0)}function k(t){if(t){var e=t[o];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,r=function e(){for(;++n<t.length;)if(p.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=c,e.done=!0,e};return r.next=r}}return{next:A}}function A(){return{value:c,done:!0}}return i.prototype=E.constructor=u,u.constructor=i,u[r]=i.displayName="GeneratorFunction",a.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===i||"GeneratorFunction"===(t.displayName||t.name))},a.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,u):(e.__proto__=u,r in e||(e[r]="GeneratorFunction")),e.prototype=Object.create(E),e},a.awrap=function(e){return{__await:e}},x(O.prototype),O.prototype[n]=function(){return this},a.AsyncIterator=O,a.async=function(e,t,n,r,o){void 0===o&&(o=Promise);var i=new O(s(e,t,n,r),o);return a.isGeneratorFunction(t)?i:i.next().then(function(e){return e.done?e.value:i.next()})},x(E),E[r]="Generator",E[o]=function(){return this},E.toString=function(){return"[object Generator]"},a.keys=function(n){var r=[];for(var e in n)r.push(e);return r.reverse(),function e(){for(;r.length;){var t=r.pop();if(t in n)return e.value=t,e.done=!1,e}return e.done=!0,e}},a.values=k,D.prototype={constructor:D,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=c,this.done=!1,this.delegate=null,this.method="next",this.arg=c,this.tryEntries.forEach(j),!e)for(var t in this)"t"===t.charAt(0)&&p.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=c)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(n){if(this.done)throw n;var r=this;function e(e,t){return i.type="throw",i.arg=n,r.next=e,t&&(r.method="next",r.arg=c),!!t}for(var t=this.tryEntries.length-1;0<=t;--t){var o=this.tryEntries[t],i=o.completion;if("root"===o.tryLoc)return e("end");if(o.tryLoc<=this.prev){var a=p.call(o,"catchLoc"),s=p.call(o,"finallyLoc");if(a&&s){if(this.prev<o.catchLoc)return e(o.catchLoc,!0);if(this.prev<o.finallyLoc)return e(o.finallyLoc)}else if(a){if(this.prev<o.catchLoc)return e(o.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return e(o.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;0<=n;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&p.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var o=r;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=e,i.arg=t,o?(this.method="next",this.next=o.finallyLoc,v):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;0<=t;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),j(n),v}},catch:function(e){for(var t=this.tryEntries.length-1;0<=t;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r,o=n.completion;return"throw"===o.type&&(r=o.arg,j(n)),r}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:k(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=c),v}},a}("object"==typeof t?t.exports:{});try{regeneratorRuntime=r}catch(e){Function("r","regeneratorRuntime = r")(r)}},{}],8:[function(P,e,M){(function(ne){"use strict";Object.defineProperty(M,"__esModule",{value:!0});var re=P("@popperjs/core"),r="tippy-content",s="tippy-backdrop",o="tippy-arrow",i="tippy-svg-arrow",oe={passive:!0,capture:!0};function ie(e,t,n){if(Array.isArray(e)){var r=e[t];return null==r?Array.isArray(n)?n[t]:n:r}return e}function n(e,t){var n={}.toString.call(e);return 0===n.indexOf("[object")&&-1<n.indexOf(t+"]")}function ae(e,t){return"function"==typeof e?e.apply(void 0,t):e}function se(t,n){return 0===n?t:function(e){clearTimeout(r),r=setTimeout(function(){t(e)},n)};var r}function f(e,t){var n=Object.assign({},e);return t.forEach(function(e){delete n[e]}),n}function ce(e){return[].concat(e)}function ue(e,t){-1===e.indexOf(t)&&e.push(t)}function pe(e){return e.split("-")[0]}function fe(e){return[].slice.call(e)}function le(){return document.createElement("div")}function l(t){return["Element","Fragment"].some(function(e){return n(t,e)})}function de(e){return n(e,"MouseEvent")}function a(e){return e&&e._tippy&&e._tippy.reference===e}function d(e){return l(e)?[e]:n(e,"NodeList")?fe(e):Array.isArray(e)?e:fe(document.querySelectorAll(e))}function he(e,t){e.forEach(function(e){e&&(e.style.transitionDuration=t+"ms")})}function me(e,t){e.forEach(function(e){e&&e.setAttribute("data-state",t)})}function ve(e){var t=ce(e)[0];return t&&t.ownerDocument||document}function ge(t,e,n){var r=e+"EventListener";["transitionend","webkitTransitionEnd"].forEach(function(e){t[r](e,n)})}var ye={isTouch:!1},t=0;function h(){ye.isTouch||(ye.isTouch=!0,window.performance&&document.addEventListener("mousemove",c))}function c(){var e=performance.now();e-t<20&&(ye.isTouch=!1,document.removeEventListener("mousemove",c)),t=e}function m(){var e,t=document.activeElement;a(t)&&(e=t._tippy,t.blur&&!e.state.isVisible&&t.blur())}var u,e="undefined"!=typeof window&&"undefined"!=typeof document?navigator.userAgent:"",be=/MSIE |Trident\//.test(e);function we(e){return[e+"() was called on a"+("destroy"===e?"n already-":" ")+"destroyed instance. This is a no-op but","indicates a potential memory leak."].join(" ")}function p(e){return e.replace(/[ \t]{2,}/g," ").replace(/^[ \t]*/gm,"").trim()}function v(e){return[p("\n  %ctippy.js\n\n  %c"+p(e)+"\n\n  %c👷‍ This is a development-only message. It will be removed in production.\n  "),"color: #00C584; font-size: 1.3em; font-weight: bold;","line-height: 1.5","color: #a6a095;"]}function Ee(e,t){var n;e&&!u.has(t)&&(u.add(t),(n=console).warn.apply(n,v(t)))}function xe(e,t){var n;e&&!u.has(t)&&(u.add(t),(n=console).error.apply(n,v(t)))}"production"!==ne.env.NODE_ENV&&(u=new Set);var g={animateFill:!1,followCursor:!1,inlinePositioning:!1,sticky:!1},Oe=Object.assign({appendTo:function(){return document.body},aria:{content:"auto",expanded:"auto"},delay:0,duration:[300,250],getReferenceClientRect:null,hideOnClick:!0,ignoreAttributes:!1,interactive:!1,interactiveBorder:2,interactiveDebounce:0,moveTransition:"",offset:[0,10],onAfterUpdate:function(){},onBeforeUpdate:function(){},onCreate:function(){},onDestroy:function(){},onHidden:function(){},onHide:function(){},onMount:function(){},onShow:function(){},onShown:function(){},onTrigger:function(){},onUntrigger:function(){},onClickOutside:function(){},placement:"top",plugins:[],popperOptions:{},render:null,showOnCreate:!1,touch:!0,trigger:"mouseenter focus",triggerTarget:null},g,{},{allowHTML:!1,animation:"fade",arrow:!0,content:"",inertia:!1,maxWidth:350,role:"tooltip",theme:"",zIndex:9999}),y=Object.keys(Oe);function Te(o){var e=(o.plugins||[]).reduce(function(e,t){var n=t.name,r=t.defaultValue;return n&&(e[n]=void 0!==o[n]?o[n]:r),e},{});return Object.assign({},o,{},e)}function Le(e,t){var o,n,r=Object.assign({},t,{content:ae(t.content,[e])},t.ignoreAttributes?{}:(o=e,((n=t.plugins)?Object.keys(Te(Object.assign({},Oe,{plugins:n}))):y).reduce(function(t,n){var r=(o.getAttribute("data-tippy-"+n)||"").trim();if(!r)return t;if("content"===n)t[n]=r;else try{t[n]=JSON.parse(r)}catch(e){t[n]=r}return t},{})));return r.aria=Object.assign({},Oe.aria,{},r.aria),r.aria={expanded:"auto"===r.aria.expanded?t.interactive:r.aria.expanded,content:"auto"===r.aria.content?t.interactive?null:"describedby":r.aria.content},r}function b(e,o){void 0===e&&(e={}),void 0===o&&(o=[]),Object.keys(e).forEach(function(t){var e,n,r=f(Oe,Object.keys(g));Ee((e=r,n=t,!{}.hasOwnProperty.call(e,n))&&0===o.filter(function(e){return e.name===t}).length,["`"+t+"`","is not a valid prop. You may have spelled it incorrectly, or if it's","a plugin, forgot to pass it in an array as props.plugins.","\n\n","All props: https://atomiks.github.io/tippyjs/v6/all-props/\n","Plugins: https://atomiks.github.io/tippyjs/v6/plugins/"].join(" "))})}var w=function(){return"innerHTML"};function E(e,t){e[w()]=t}function x(e){var t=le();return!0===e?t.className=o:(t.className=i,l(e)?t.appendChild(e):E(t,e)),t}function O(e,t){l(t.content)?(E(e,""),e.appendChild(t.content)):"function"!=typeof t.content&&(t.allowHTML?E(e,t.content):e.textContent=t.content)}function je(e){var t=e.firstElementChild,n=fe(t.children);return{box:t,content:n.find(function(e){return e.classList.contains(r)}),arrow:n.find(function(e){return e.classList.contains(o)||e.classList.contains(i)}),backdrop:n.find(function(e){return e.classList.contains(s)})}}function T(a){var s=le(),e=le();e.className="tippy-box",e.setAttribute("data-state","hidden"),e.setAttribute("tabindex","-1");var t=le();function n(e,t){var n=je(s),r=n.box,o=n.content,i=n.arrow;t.theme?r.setAttribute("data-theme",t.theme):r.removeAttribute("data-theme"),"string"==typeof t.animation?r.setAttribute("data-animation",t.animation):r.removeAttribute("data-animation"),t.inertia?r.setAttribute("data-inertia",""):r.removeAttribute("data-inertia"),r.style.maxWidth="number"==typeof t.maxWidth?t.maxWidth+"px":t.maxWidth,t.role?r.setAttribute("role",t.role):r.removeAttribute("role"),e.content===t.content&&e.allowHTML===t.allowHTML||O(o,a.props),t.arrow?i?e.arrow!==t.arrow&&(r.removeChild(i),r.appendChild(x(t.arrow))):r.appendChild(x(t.arrow)):i&&r.removeChild(i)}return t.className=r,t.setAttribute("data-state","hidden"),O(t,a.props),s.appendChild(e),e.appendChild(t),n(a.props,a.props),{popper:s,onUpdate:n}}T.$$tippy=!0;var De=1,ke=[],Ae=[];function L(u,e){var i,n,r,o,a,p,s,c,f=Le(u,Object.assign({},Oe,{},Te(e))),l=!1,d=!1,t=!1,h=!1,m=[],v=se(G,f.interactiveDebounce),g=ve(f.triggerTarget||u),y=De++,b=(c=f.plugins).filter(function(e,t){return c.indexOf(e)===t}),w={id:y,reference:u,popper:le(),popperInstance:null,props:f,state:{isEnabled:!0,isVisible:!1,isDestroyed:!1,isMounted:!1,isShown:!1},plugins:b,clearDelayTimeouts:function(){clearTimeout(i),clearTimeout(n),cancelAnimationFrame(r)},setProps:function(e){"production"!==ne.env.NODE_ENV&&Ee(w.state.isDestroyed,we("setProps"));if(w.state.isDestroyed)return;P("onBeforeUpdate",[w,e]),X();var t=w.props,n=Le(u,Object.assign({},w.props,{},e,{ignoreAttributes:!0}));w.props=n,U(),t.interactiveDebounce!==n.interactiveDebounce&&(V(),v=se(G,n.interactiveDebounce));t.triggerTarget&&!n.triggerTarget?ce(t.triggerTarget).forEach(function(e){e.removeAttribute("aria-expanded")}):n.triggerTarget&&u.removeAttribute("aria-expanded");_(),C(),O&&O(t,n);w.popperInstance&&(K(),Z().forEach(function(e){requestAnimationFrame(e._tippy.popperInstance.forceUpdate)}));P("onAfterUpdate",[w,e])},setContent:function(e){w.setProps({content:e})},show:function(){"production"!==ne.env.NODE_ENV&&Ee(w.state.isDestroyed,we("show"));var e=w.state.isVisible,t=w.state.isDestroyed,n=!w.state.isEnabled,r=ye.isTouch&&!w.props.touch,o=ie(w.props.duration,0,Oe.duration);if(e||t||n||r)return;if(A().hasAttribute("disabled"))return;if(P("onShow",[w],!1),!1===w.props.onShow(w))return;w.state.isVisible=!0,k()&&(x.style.visibility="visible");C(),q(),w.state.isMounted||(x.style.transition="none");{var i,a,s;k()&&(i=N(),a=i.box,s=i.content,he([a,s],0))}p=function(){var e,t,n;w.state.isVisible&&!h&&(h=!0,x.offsetHeight,x.style.transition=w.props.moveTransition,k()&&w.props.animation&&(he([t=(e=N()).box,n=e.content],o),me([t,n],"visible")),M(),_(),ue(Ae,w),w.state.isMounted=!0,P("onMount",[w]),w.props.animation&&k()&&F(o,function(){w.state.isShown=!0,P("onShown",[w])}))},function(){var e,t=w.props.appendTo,n=A();e=w.props.interactive&&t===Oe.appendTo||"parent"===t?n.parentNode:ae(t,[n]);e.contains(x)||e.appendChild(x);K(),"production"!==ne.env.NODE_ENV&&Ee(w.props.interactive&&t===Oe.appendTo&&n.nextElementSibling!==x,["Interactive tippy element may not be accessible via keyboard","navigation because it is not directly after the reference element","in the DOM source order.","\n\n","Using a wrapper <div> or <span> tag around the reference element","solves this by creating a new parentNode context.","\n\n","Specifying `appendTo: document.body` silences this warning, but it","assumes you are using a focus management solution to handle","keyboard navigation.","\n\n","See: https://atomiks.github.io/tippyjs/v6/accessibility/#interactivity"].join(" "))}()},hide:function(){"production"!==ne.env.NODE_ENV&&Ee(w.state.isDestroyed,we("hide"));var e=!w.state.isVisible,t=w.state.isDestroyed,n=!w.state.isEnabled,r=ie(w.props.duration,1,Oe.duration);if(e||t||n)return;if(P("onHide",[w],!1),!1===w.props.onHide(w))return;w.state.isVisible=!1,w.state.isShown=!1,h=!1,k()&&(x.style.visibility="hidden");{var o,i,a;V(),B(),C(),k()&&(o=N(),i=o.box,a=o.content,w.props.animation&&(he([i,a],r),me([i,a],"hidden")))}M(),_(),w.props.animation?k()&&function(e,t){F(e,function(){!w.state.isVisible&&x.parentNode&&x.parentNode.contains(x)&&t()})}(r,w.unmount):w.unmount()},hideWithInteractivity:function(e){"production"!==ne.env.NODE_ENV&&Ee(w.state.isDestroyed,we("hideWithInteractivity"));g.body.addEventListener("mouseleave",te),g.addEventListener("mousemove",v),ue(ke,v),v(e)},enable:function(){w.state.isEnabled=!0},disable:function(){w.hide(),w.state.isEnabled=!1},unmount:function(){"production"!==ne.env.NODE_ENV&&Ee(w.state.isDestroyed,we("unmount"));w.state.isVisible&&w.hide();if(!w.state.isMounted)return;Q(),Z().forEach(function(e){e._tippy.unmount()}),x.parentNode&&x.parentNode.removeChild(x);Ae=Ae.filter(function(e){return e!==w}),w.state.isMounted=!1,P("onHidden",[w])},destroy:function(){"production"!==ne.env.NODE_ENV&&Ee(w.state.isDestroyed,we("destroy"));if(w.state.isDestroyed)return;w.clearDelayTimeouts(),w.unmount(),X(),delete u._tippy,w.state.isDestroyed=!0,P("onDestroy",[w])}};if(!f.render)return"production"!==ne.env.NODE_ENV&&xe(!0,"render() function has not been supplied."),w;var E=f.render(w),x=E.popper,O=E.onUpdate;x.setAttribute("data-tippy-root",""),x.id="tippy-"+w.id,w.popper=x,u._tippy=w,x._tippy=w;var T=b.map(function(e){return e.fn(w)}),L=u.hasAttribute("aria-expanded");return U(),_(),C(),P("onCreate",[w]),f.showOnCreate&&ee(),x.addEventListener("mouseenter",function(){w.props.interactive&&w.state.isVisible&&w.clearDelayTimeouts()}),x.addEventListener("mouseleave",function(e){w.props.interactive&&0<=w.props.trigger.indexOf("mouseenter")&&(g.addEventListener("mousemove",v),v(e))}),w;function j(){var e=w.props.touch;return Array.isArray(e)?e:[e,0]}function D(){return"hold"===j()[0]}function k(){var e;return null!=(e=w.props.render)&&e.$$tippy}function A(){return s||u}function N(){return je(x)}function S(e){return w.state.isMounted&&!w.state.isVisible||ye.isTouch||o&&"focus"===o.type?0:ie(w.props.delay,e?0:1,Oe.delay)}function C(){x.style.pointerEvents=w.props.interactive&&w.state.isVisible?"":"none",x.style.zIndex=""+w.props.zIndex}function P(t,n,e){var r;void 0===e&&(e=!0),T.forEach(function(e){e[t]&&e[t].apply(void 0,n)}),e&&(r=w.props)[t].apply(r,n)}function M(){var r,o,e=w.props.aria;e.content&&(r="aria-"+e.content,o=x.id,ce(w.props.triggerTarget||u).forEach(function(e){var t,n=e.getAttribute(r);w.state.isVisible?e.setAttribute(r,n?n+" "+o:o):(t=n&&n.replace(o,"").trim())?e.setAttribute(r,t):e.removeAttribute(r)}))}function _(){!L&&w.props.aria.expanded&&ce(w.props.triggerTarget||u).forEach(function(e){w.props.interactive?e.setAttribute("aria-expanded",w.state.isVisible&&e===A()?"true":"false"):e.removeAttribute("aria-expanded")})}function V(){g.body.removeEventListener("mouseleave",te),g.removeEventListener("mousemove",v),ke=ke.filter(function(e){return e!==v})}function R(e){if(!(ye.isTouch&&(t||"mousedown"===e.type)||w.props.interactive&&x.contains(e.target))){if(A().contains(e.target)){if(ye.isTouch)return;if(w.state.isVisible&&0<=w.props.trigger.indexOf("click"))return}else P("onClickOutside",[w,e]);!0===w.props.hideOnClick&&(l=!1,w.clearDelayTimeouts(),w.hide(),d=!0,setTimeout(function(){d=!1}),w.state.isMounted||B())}}function I(){t=!0}function H(){t=!1}function q(){g.addEventListener("mousedown",R,!0),g.addEventListener("touchend",R,oe),g.addEventListener("touchstart",H,oe),g.addEventListener("touchmove",I,oe)}function B(){g.removeEventListener("mousedown",R,!0),g.removeEventListener("touchend",R,oe),g.removeEventListener("touchstart",H,oe),g.removeEventListener("touchmove",I,oe)}function F(e,t){var n=N().box;function r(e){e.target===n&&(ge(n,"remove",r),t())}if(0===e)return t();ge(n,"remove",a),ge(n,"add",r),a=r}function W(t,n,r){void 0===r&&(r=!1),ce(w.props.triggerTarget||u).forEach(function(e){e.addEventListener(t,n,r),m.push({node:e,eventType:t,handler:n,options:r})})}function U(){D()&&(W("touchstart",Y,{passive:!0}),W("touchend",z,{passive:!0})),w.props.trigger.split(/\s+/).filter(Boolean).forEach(function(e){if("manual"!==e)switch(W(e,Y),e){case"mouseenter":W("mouseleave",z);break;case"focus":W(be?"focusout":"blur",$);break;case"focusin":W("focusout",$)}})}function X(){m.forEach(function(e){var t=e.node,n=e.eventType,r=e.handler,o=e.options;t.removeEventListener(n,r,o)}),m=[]}function Y(t){var e,n=!1;!w.state.isEnabled||J(t)||d||(e="focus"===(null==o?void 0:o.type),s=(o=t).currentTarget,_(),!w.state.isVisible&&de(t)&&ke.forEach(function(e){return e(t)}),"click"===t.type&&(w.props.trigger.indexOf("mouseenter")<0||l)&&!1!==w.props.hideOnClick&&w.state.isVisible?n=!0:ee(t),"click"===t.type&&(l=!n),n&&!e&&te(t))}function G(e){var t,n,r,h,m,o=e.target,i=u.contains(o)||x.contains(o);"mousemove"===e.type&&i||(t=Z().concat(x).map(function(e){var t,n=null==(t=e._tippy.popperInstance)?void 0:t.state;return n?{popperRect:e.getBoundingClientRect(),popperState:n,props:f}:null}).filter(Boolean),n=t,h=(r=e).clientX,m=r.clientY,n.every(function(e){var t=e.popperRect,n=e.popperState,r=e.props.interactiveBorder,o=pe(n.placement),i=n.modifiersData.offset;if(!i)return!0;var a="bottom"===o?i.top.y:0,s="top"===o?i.bottom.y:0,c="right"===o?i.left.x:0,u="left"===o?i.right.x:0,p=t.top-m+a>r,f=m-t.bottom-s>r,l=t.left-h+c>r,d=h-t.right-u>r;return p||f||l||d})&&(V(),te(e)))}function z(e){J(e)||0<=w.props.trigger.indexOf("click")&&l||(w.props.interactive?w.hideWithInteractivity(e):te(e))}function $(e){w.props.trigger.indexOf("focusin")<0&&e.target!==A()||w.props.interactive&&e.relatedTarget&&x.contains(e.relatedTarget)||te(e)}function J(e){return!!ye.isTouch&&D()!==0<=e.type.indexOf("touch")}function K(){Q();var e=w.props,t=e.popperOptions,n=e.placement,r=e.offset,o=e.getReferenceClientRect,i=e.moveTransition,a=k()?je(x).arrow:null,s=o?{getBoundingClientRect:o,contextElement:o.contextElement||A()}:u,c=[{name:"offset",options:{offset:r}},{name:"preventOverflow",options:{padding:{top:2,bottom:2,left:5,right:5}}},{name:"flip",options:{padding:5}},{name:"computeStyles",options:{adaptive:!i}},{name:"$$tippy",enabled:!0,phase:"beforeWrite",requires:["computeStyles"],fn:function(e){var t,n=e.state;k()&&(t=N().box,["placement","reference-hidden","escaped"].forEach(function(e){"placement"===e?t.setAttribute("data-placement",n.placement):n.attributes.popper["data-popper-"+e]?t.setAttribute("data-"+e,""):t.removeAttribute("data-"+e)}),n.attributes.popper={})}}];k()&&a&&c.push({name:"arrow",options:{element:a,padding:3}}),c.push.apply(c,(null==t?void 0:t.modifiers)||[]),w.popperInstance=re.createPopper(s,x,Object.assign({},t,{placement:n,onFirstUpdate:p,modifiers:c}))}function Q(){w.popperInstance&&(w.popperInstance.destroy(),w.popperInstance=null)}function Z(){return fe(x.querySelectorAll("[data-tippy-root]"))}function ee(e){w.clearDelayTimeouts(),e&&P("onTrigger",[w,e]),q();var t=S(!0),n=j(),r=n[0],o=n[1];ye.isTouch&&"hold"===r&&o&&(t=o),t?i=setTimeout(function(){w.show()},t):w.show()}function te(e){var t;w.clearDelayTimeouts(),P("onUntrigger",[w,e]),w.state.isVisible?0<=w.props.trigger.indexOf("mouseenter")&&0<=w.props.trigger.indexOf("click")&&0<=["mouseleave","mousemove"].indexOf(e.type)&&l||((t=S(!1))?n=setTimeout(function(){w.state.isVisible&&w.hide()},t):r=requestAnimationFrame(function(){w.hide()})):B()}}function j(e,t){void 0===t&&(t={});var n,r,o,i=Oe.plugins.concat(t.plugins||[]);"production"!==ne.env.NODE_ENV&&(r=!(n=e),o="[object Object]"===Object.prototype.toString.call(n)&&!n.addEventListener,xe(r,["tippy() was passed","`"+String(n)+"`","as its targets (first) argument. Valid types are: String, Element,","Element[], or NodeList."].join(" ")),xe(o,["tippy() was passed a plain object which is not supported as an argument","for virtual positioning. Use props.getReferenceClientRect instead."].join(" ")),b(t,i)),document.addEventListener("touchstart",h,oe),window.addEventListener("blur",m);var a,s,c=Object.assign({},t,{plugins:i}),u=d(e);"production"!==ne.env.NODE_ENV&&(a=l(c.content),s=1<u.length,Ee(a&&s,["tippy() was passed an Element as the `content` prop, but more than","one tippy instance was created by this invocation. This means the","content element will only be appended to the last tippy instance.","\n\n","Instead, pass the .innerHTML of the element, or use a function that","returns a cloned version of the element instead.","\n\n","1) content: element.innerHTML\n","2) content: () => element.cloneNode(true)"].join(" ")));var p=u.reduce(function(e,t){var n=t&&L(t,c);return n&&e.push(n),e},[]);return l(e)?p[0]:p}j.defaultProps=Oe,j.setDefaultProps=function(t){"production"!==ne.env.NODE_ENV&&b(t,[]),Object.keys(t).forEach(function(e){Oe[e]=t[e]})},j.currentInput=ye;var D={mouseover:"mouseenter",focusin:"focus",click:"click"};var k={name:"animateFill",defaultValue:!1,fn:function(e){var t;if(null==(t=e.props.render)||!t.$$tippy)return"production"!==ne.env.NODE_ENV&&xe(e.props.animateFill,"The `animateFill` plugin requires the default render function."),{};var n,r=je(e.popper),o=r.box,i=r.content,a=e.props.animateFill?((n=le()).className=s,me([n],"hidden"),n):null;return{onCreate:function(){a&&(o.insertBefore(a,o.firstElementChild),o.setAttribute("data-animatefill",""),o.style.overflow="hidden",e.setProps({arrow:!1,animation:"shift-away"}))},onMount:function(){var e,t;a&&(e=o.style.transitionDuration,t=Number(e.replace("ms","")),i.style.transitionDelay=Math.round(t/10)+"ms",a.style.transitionDuration=e,me([a],"visible"))},onShow:function(){a&&(a.style.transitionDuration="0ms")},onHide:function(){a&&me([a],"hidden")}}}};var A={name:"followCursor",defaultValue:!1,fn:function(r){var l=r.reference,e=ve(r.props.triggerTarget||l),o=null;function t(){return"manual"===r.props.trigger.trim()}function n(){var e=!!t()||null!==o&&!(0===o.clientX&&0===o.clientY);return r.props.followCursor&&e}function i(e){e&&r.setProps({getReferenceClientRect:null})}function a(){n()?e.addEventListener("mousemove",s):i(r.props.followCursor)}function d(){e.removeEventListener("mousemove",s)}function s(e){o={clientX:e.clientX,clientY:e.clientY};var t=!e.target||l.contains(e.target),s=r.props.followCursor,c=e.clientX,u=e.clientY,n=l.getBoundingClientRect(),p=c-n.left,f=u-n.top;!t&&r.props.interactive||r.setProps({getReferenceClientRect:function(){var e=l.getBoundingClientRect(),t=c,n=u;"initial"===s&&(t=e.left+p,n=e.top+f);var r="horizontal"===s?e.top:n,o="vertical"===s?e.right:t,i="horizontal"===s?e.bottom:n,a="vertical"===s?e.left:t;return{width:o-a,height:i-r,top:r,right:o,bottom:i,left:a}}}),(ye.isTouch||"initial"===r.props.followCursor&&r.state.isVisible)&&d()}return{onAfterUpdate:function(e,t){var n=t.followCursor;void 0===n||n||i(!0)},onMount:function(){n()&&s(o)},onShow:function(){t()&&(o={clientX:0,clientY:0},a())},onTrigger:function(e,t){o||(de(t)&&(o={clientX:t.clientX,clientY:t.clientY}),a())},onUntrigger:function(){r.state.isVisible||(d(),o=null)},onHidden:function(){d(),o=null}}}};var N={name:"inlinePositioning",defaultValue:!1,fn:function(o){var n,r=o.reference;var i=-1,a=!1,s={name:"tippyInlinePositioning",enabled:!0,phase:"afterWrite",fn:function(e){var t=e.state;o.props.inlinePositioning&&(n!==t.placement&&o.setProps({getReferenceClientRect:function(){return function(t,e,n,r){if(n.length<2||null===t)return e;if(2===n.length&&0<=r&&n[0].left>n[1].right)return n[r]||e;switch(t){case"top":case"bottom":var o=n[0],i=n[n.length-1],a="top"===t,s=o.top,c=i.bottom,u=a?o.left:i.left,p=a?o.right:i.right;return{top:s,bottom:c,left:u,right:p,width:p-u,height:c-s};case"left":case"right":var f=Math.min.apply(Math,n.map(function(e){return e.left})),l=Math.max.apply(Math,n.map(function(e){return e.right})),d=n.filter(function(e){return"left"===t?e.left===f:e.right===l}),h=d[0].top,m=d[d.length-1].bottom;return{top:h,bottom:m,left:f,right:l,width:l-f,height:m-h};default:return e}}(pe(t.placement),r.getBoundingClientRect(),fe(r.getClientRects()),i)}}),n=t.placement)}};function e(){var e,t,n,r;a||(t=o.props,n=s,e={popperOptions:Object.assign({},t.popperOptions,{modifiers:[].concat(((null==(r=t.popperOptions)?void 0:r.modifiers)||[]).filter(function(e){return e.name!==n.name}),[n])})},a=!0,o.setProps(e),a=!1)}return{onCreate:e,onAfterUpdate:e,onTrigger:function(e,t){var n,r;de(t)&&(r=(n=fe(o.reference.getClientRects())).find(function(e){return e.left-2<=t.clientX&&e.right+2>=t.clientX&&e.top-2<=t.clientY&&e.bottom+2>=t.clientY}),i=n.indexOf(r))},onUntrigger:function(){i=-1}}}};var S={name:"sticky",defaultValue:!1,fn:function(n){var r=n.reference,o=n.popper;function i(e){return!0===n.props.sticky||n.props.sticky===e}var a=null,s=null;function c(){var e=i("reference")?(n.popperInstance?n.popperInstance.state.elements.reference:r).getBoundingClientRect():null,t=i("popper")?o.getBoundingClientRect():null;(e&&C(a,e)||t&&C(s,t))&&n.popperInstance&&n.popperInstance.update(),a=e,s=t,n.state.isMounted&&requestAnimationFrame(c)}return{onMount:function(){n.props.sticky&&c()}}}};function C(e,t){return!e||!t||(e.top!==t.top||e.right!==t.right||e.bottom!==t.bottom||e.left!==t.left)}j.setDefaultProps({render:T}),M.animateFill=k,M.createSingleton=function(e,t){void 0===t&&(t={}),"production"!==ne.env.NODE_ENV&&xe(!Array.isArray(e),["The first argument passed to createSingleton() must be an array of","tippy instances. The passed value was",String(e)].join(" "));var i,a=e,s=[],c=t.overrides;function n(){s=a.map(function(e){return e.reference})}function r(t){a.forEach(function(e){t?e.enable():e.disable()})}r(!1),n();var o={fn:function(){return{onDestroy:function(){r(!0)},onTrigger:function(e,t){var n,r=t.currentTarget,o=s.indexOf(r);r!==i&&(i=r,n=(c||[]).concat("content").reduce(function(e,t){return e[t]=a[o].props[t],e},{}),e.setProps(Object.assign({},n,{getReferenceClientRect:function(){return r.getBoundingClientRect()}})))}}}},u=j(le(),Object.assign({},f(t,["overrides"]),{plugins:[o].concat(t.plugins||[]),triggerTarget:s})),p=u.setProps;return u.setProps=function(e){c=e.overrides||c,p(e)},u.setInstances=function(e){r(!0),a=e,r(!1),n(),u.setProps({triggerTarget:s})},u},M.default=j,M.delegate=function(e,o){"production"!==ne.env.NODE_ENV&&xe(!(o&&o.target),["You must specity a `target` prop indicating a CSS selector string matching","the target elements that should receive a tippy."].join(" "));var i=[],a=[],s=o.target,t=f(o,["target"]),n=Object.assign({},t,{trigger:"manual",touch:!1}),c=Object.assign({},t,{showOnCreate:!0}),r=j(e,n);function u(e){var t,n,r;!e.target||(t=e.target.closest(s))&&(n=t.getAttribute("data-tippy-trigger")||o.trigger||Oe.trigger,t._tippy||"touchstart"===e.type&&"boolean"==typeof c.touch||"touchstart"!==e.type&&n.indexOf(D[e.type])||(r=j(t,c))&&(a=a.concat(r)))}function p(e,t,n,r){void 0===r&&(r=!1),e.addEventListener(t,n,r),i.push({node:e,eventType:t,handler:n,options:r})}return ce(r).forEach(function(e){var t,n=e.destroy;e.destroy=function(e){void 0===e&&(e=!0),e&&a.forEach(function(e){e.destroy()}),a=[],i.forEach(function(e){var t=e.node,n=e.eventType,r=e.handler,o=e.options;t.removeEventListener(n,r,o)}),i=[],n()},p(t=e.reference,"touchstart",u),p(t,"mouseover",u),p(t,"focusin",u),p(t,"click",u)}),r},M.followCursor=A,M.hideAll=function(e){var t=void 0===e?{}:e,r=t.exclude,o=t.duration;Ae.forEach(function(e){var t,n=!1;r&&(n=a(r)?e.reference===r:e.popper===r.popper),n||(t=e.props.duration,e.setProps({duration:o}),e.hide(),e.state.isDestroyed||e.setProps({duration:t}))})},M.inlinePositioning=N,M.roundArrow='<svg width="16" height="6" xmlns="http://www.w3.org/2000/svg"><path d="M0 6s1.796-.013 4.67-3.615C5.851.9 6.93.006 8 0c1.07-.006 2.148.887 3.343 2.385C14.233 6.005 16 6 16 6H0z"></svg>',M.sticky=S}).call(this,P("_process"))},{"@popperjs/core":5,_process:6}]},{},[1]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
