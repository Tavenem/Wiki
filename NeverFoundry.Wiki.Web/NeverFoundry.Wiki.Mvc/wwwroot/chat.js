!function i(u,s,a){function c(t,e){if(!s[t]){if(!u[t]){var n="function"==typeof require&&require;if(!e&&n)return n(t,!0);if(l)return l(t,!0);var r=new Error("Cannot find module '"+t+"'");throw r.code="MODULE_NOT_FOUND",r}var o=s[t]={exports:{}};u[t][0].call(o.exports,function(e){return c(u[t][1][e]||e)},o,o.exports,i,u,s,a)}return s[t].exports}for(var l="function"==typeof require&&require,e=0;e<a.length;e++)c(a[e]);return c}({1:[function(t,n,r){"use strict";function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var o,s=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==u(e)&&"function"!=typeof e)return{default:e};var t=a();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e){var i;Object.prototype.hasOwnProperty.call(e,o)&&((i=r?Object.getOwnPropertyDescriptor(e,o):null)&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o])}n.default=e,t&&t.set(e,n);return n}(t("@microsoft/signalr")),l=(o=t("tippy.js"))&&o.__esModule?o:{default:o};function a(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return a=function(){return e},e}var c=document.getElementById("wiki-talk-send");c&&(c.disabled=!0);var D=document.getElementById("wiki-talk-newmessage-input");window.wikimvcchat={connection:null,messageListUl:null,userNamespace:"Users",init:function(e,t,n,r){if(window.wikimvcchat.userNamespace=t,null!=document.getElementById("wiki-talk-messages")){var o=document.createElement("ul");window.wikimvcchat.messageListUl=o,r=JSON.parse(r)||[];for(var i,u=0;u<r.length;u++)window.wikimvcchat.addMessage(r[u]);0<r.length&&(null!=(i=document.getElementById("wiki-message-div-".concat(r[r.length-1].id)))&&i.classList.contains("wiki-message-thread")&&i.classList.add("expanded")),e&&e.length&&n&&n.length&&(window.wikimvcchat.connection=(new s.HubConnectionBuilder).withUrl(e).withAutomaticReconnect().build(),window.wikimvcchat.connection.on("Receive",window.wikimvcchat.addMessage),window.wikimvcchat.connection.start().then(function(){c.disabled=!1}).catch(function(e){return console.error("An error occurred while connecting to chat")}),c.addEventListener("click",function(e){var t=D.value;t&&t.length&&connection.invoke("Send",{markdown:t,topicId:n}).catch(function(e){return console.error("An error occurred while sending a chat message")}),e.preventDefault(),e.stopPropagation()}))}},addMessage:function(t){var n,r,o,i,u,s,a,c,l,D,p,f,h,d,g,v,m,y,F,E,b,C,w,B;null!=t&&null!=t.content&&null!=t.content.length&&0<t.content.length&&((n=null!=t.replyMessageId&&null!=t.replyMessageId.length&&0<t.replyMessageId.length)&&/(?:\uD83D(?:\uDD73\uFE0F?|\uDC41(?:(?:\uFE0F(?:\u200D\uD83D\uDDE8\uFE0F?)?|\u200D\uD83D\uDDE8\uFE0F?))?|[\uDDE8\uDDEF]\uFE0F?|\uDC4B(?:\uD83C[\uDFFB-\uDFFF])?|\uDD90(?:(?:\uD83C[\uDFFB-\uDFFF]|\uFE0F))?|[\uDD96\uDC4C\uDC48\uDC49\uDC46\uDD95\uDC47\uDC4D\uDC4E\uDC4A\uDC4F\uDE4C\uDC50\uDE4F\uDC85\uDCAA\uDC42\uDC43\uDC76\uDC66\uDC67](?:\uD83C[\uDFFB-\uDFFF])?|\uDC71(?:(?:\uD83C(?:[\uDFFB-\uDFFF](?:\u200D(?:[\u2640\u2642]\uFE0F?))?)|\u200D(?:[\u2640\u2642]\uFE0F?)))?|\uDC68(?:(?:\uD83C(?:\uDFFB(?:\u200D(?:\uD83E(?:\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFC-\uDFFF]|[\uDDB0\uDDB1\uDDB3\uDDB2\uDDAF\uDDBC\uDDBD])|\u2695\uFE0F?|\uD83C[\uDF93\uDFEB\uDF3E\uDF73\uDFED\uDFA4\uDFA8]|\u2696\uFE0F?|\uD83D[\uDD27\uDCBC\uDD2C\uDCBB\uDE80\uDE92]|\u2708\uFE0F?))?|\uDFFC(?:\u200D(?:\uD83E(?:\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB\uDFFD-\uDFFF]|[\uDDB0\uDDB1\uDDB3\uDDB2\uDDAF\uDDBC\uDDBD])|\u2695\uFE0F?|\uD83C[\uDF93\uDFEB\uDF3E\uDF73\uDFED\uDFA4\uDFA8]|\u2696\uFE0F?|\uD83D[\uDD27\uDCBC\uDD2C\uDCBB\uDE80\uDE92]|\u2708\uFE0F?))?|\uDFFD(?:\u200D(?:\uD83E(?:\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF]|[\uDDB0\uDDB1\uDDB3\uDDB2\uDDAF\uDDBC\uDDBD])|\u2695\uFE0F?|\uD83C[\uDF93\uDFEB\uDF3E\uDF73\uDFED\uDFA4\uDFA8]|\u2696\uFE0F?|\uD83D[\uDD27\uDCBC\uDD2C\uDCBB\uDE80\uDE92]|\u2708\uFE0F?))?|\uDFFE(?:\u200D(?:\uD83E(?:\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB-\uDFFD\uDFFF]|[\uDDB0\uDDB1\uDDB3\uDDB2\uDDAF\uDDBC\uDDBD])|\u2695\uFE0F?|\uD83C[\uDF93\uDFEB\uDF3E\uDF73\uDFED\uDFA4\uDFA8]|\u2696\uFE0F?|\uD83D[\uDD27\uDCBC\uDD2C\uDCBB\uDE80\uDE92]|\u2708\uFE0F?))?|\uDFFF(?:\u200D(?:\uD83E(?:\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB-\uDFFE]|[\uDDB0\uDDB1\uDDB3\uDDB2\uDDAF\uDDBC\uDDBD])|\u2695\uFE0F?|\uD83C[\uDF93\uDFEB\uDF3E\uDF73\uDFED\uDFA4\uDFA8]|\u2696\uFE0F?|\uD83D[\uDD27\uDCBC\uDD2C\uDCBB\uDE80\uDE92]|\u2708\uFE0F?))?)|\u200D(?:\uD83E[\uDDB0\uDDB1\uDDB3\uDDB2\uDDAF\uDDBC\uDDBD]|\u2695\uFE0F?|\uD83C[\uDF93\uDFEB\uDF3E\uDF73\uDFED\uDFA4\uDFA8]|\u2696\uFE0F?|\uD83D(?:\uDC69\u200D\uD83D(?:\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?)|\uDC68\u200D\uD83D(?:\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?)|\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?|[\uDD27\uDCBC\uDD2C\uDCBB\uDE80\uDE92])|\u2708\uFE0F?|\u2764(?:\uFE0F\u200D\uD83D(?:\uDC8B\u200D\uD83D\uDC68|\uDC68)|\u200D\uD83D(?:\uDC8B\u200D\uD83D\uDC68|\uDC68)))))?|\uDC69(?:(?:\uD83C(?:\uDFFB(?:\u200D(?:\uD83E(?:\uDD1D\u200D\uD83D(?:\uDC69\uD83C[\uDFFC-\uDFFF]|\uDC68\uD83C[\uDFFC-\uDFFF])|[\uDDB0\uDDB1\uDDB3\uDDB2\uDDAF\uDDBC\uDDBD])|\u2695\uFE0F?|\uD83C[\uDF93\uDFEB\uDF3E\uDF73\uDFED\uDFA4\uDFA8]|\u2696\uFE0F?|\uD83D[\uDD27\uDCBC\uDD2C\uDCBB\uDE80\uDE92]|\u2708\uFE0F?))?|\uDFFC(?:\u200D(?:\uD83E(?:\uDD1D\u200D\uD83D(?:\uDC69\uD83C[\uDFFB\uDFFD-\uDFFF]|\uDC68\uD83C[\uDFFB\uDFFD-\uDFFF])|[\uDDB0\uDDB1\uDDB3\uDDB2\uDDAF\uDDBC\uDDBD])|\u2695\uFE0F?|\uD83C[\uDF93\uDFEB\uDF3E\uDF73\uDFED\uDFA4\uDFA8]|\u2696\uFE0F?|\uD83D[\uDD27\uDCBC\uDD2C\uDCBB\uDE80\uDE92]|\u2708\uFE0F?))?|\uDFFD(?:\u200D(?:\uD83E(?:\uDD1D\u200D\uD83D(?:\uDC69\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF]|\uDC68\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])|[\uDDB0\uDDB1\uDDB3\uDDB2\uDDAF\uDDBC\uDDBD])|\u2695\uFE0F?|\uD83C[\uDF93\uDFEB\uDF3E\uDF73\uDFED\uDFA4\uDFA8]|\u2696\uFE0F?|\uD83D[\uDD27\uDCBC\uDD2C\uDCBB\uDE80\uDE92]|\u2708\uFE0F?))?|\uDFFE(?:\u200D(?:\uD83E(?:\uDD1D\u200D\uD83D(?:\uDC69\uD83C[\uDFFB-\uDFFD\uDFFF]|\uDC68\uD83C[\uDFFB-\uDFFD\uDFFF])|[\uDDB0\uDDB1\uDDB3\uDDB2\uDDAF\uDDBC\uDDBD])|\u2695\uFE0F?|\uD83C[\uDF93\uDFEB\uDF3E\uDF73\uDFED\uDFA4\uDFA8]|\u2696\uFE0F?|\uD83D[\uDD27\uDCBC\uDD2C\uDCBB\uDE80\uDE92]|\u2708\uFE0F?))?|\uDFFF(?:\u200D(?:\uD83E(?:\uDD1D\u200D\uD83D(?:\uDC69\uD83C[\uDFFB-\uDFFE]|\uDC68\uD83C[\uDFFB-\uDFFE])|[\uDDB0\uDDB1\uDDB3\uDDB2\uDDAF\uDDBC\uDDBD])|\u2695\uFE0F?|\uD83C[\uDF93\uDFEB\uDF3E\uDF73\uDFED\uDFA4\uDFA8]|\u2696\uFE0F?|\uD83D[\uDD27\uDCBC\uDD2C\uDCBB\uDE80\uDE92]|\u2708\uFE0F?))?)|\u200D(?:\uD83E[\uDDB0\uDDB1\uDDB3\uDDB2\uDDAF\uDDBC\uDDBD]|\u2695\uFE0F?|\uD83C[\uDF93\uDFEB\uDF3E\uDF73\uDFED\uDFA4\uDFA8]|\u2696\uFE0F?|\uD83D(?:\uDC69\u200D\uD83D(?:\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?)|\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?|[\uDD27\uDCBC\uDD2C\uDCBB\uDE80\uDE92])|\u2708\uFE0F?|\u2764(?:\uFE0F\u200D\uD83D(?:\uDC8B\u200D\uD83D[\uDC68\uDC69]|[\uDC68\uDC69])|\u200D\uD83D(?:\uDC8B\u200D\uD83D[\uDC68\uDC69]|[\uDC68\uDC69])))))?|[\uDC74\uDC75](?:\uD83C[\uDFFB-\uDFFF])?|[\uDE4D\uDE4E\uDE45\uDE46\uDC81\uDE4B\uDE47\uDC6E](?:(?:\uD83C(?:[\uDFFB-\uDFFF](?:\u200D(?:[\u2642\u2640]\uFE0F?))?)|\u200D(?:[\u2642\u2640]\uFE0F?)))?|\uDD75(?:(?:\uFE0F(?:\u200D(?:[\u2642\u2640]\uFE0F?))?|\uD83C(?:[\uDFFB-\uDFFF](?:\u200D(?:[\u2642\u2640]\uFE0F?))?)|\u200D(?:[\u2642\u2640]\uFE0F?)))?|[\uDC82\uDC77](?:(?:\uD83C(?:[\uDFFB-\uDFFF](?:\u200D(?:[\u2642\u2640]\uFE0F?))?)|\u200D(?:[\u2642\u2640]\uFE0F?)))?|\uDC78(?:\uD83C[\uDFFB-\uDFFF])?|\uDC73(?:(?:\uD83C(?:[\uDFFB-\uDFFF](?:\u200D(?:[\u2642\u2640]\uFE0F?))?)|\u200D(?:[\u2642\u2640]\uFE0F?)))?|[\uDC72\uDC70\uDC7C](?:\uD83C[\uDFFB-\uDFFF])?|[\uDC86\uDC87\uDEB6](?:(?:\uD83C(?:[\uDFFB-\uDFFF](?:\u200D(?:[\u2642\u2640]\uFE0F?))?)|\u200D(?:[\u2642\u2640]\uFE0F?)))?|[\uDC83\uDD7A](?:\uD83C[\uDFFB-\uDFFF])?|\uDD74(?:(?:\uD83C[\uDFFB-\uDFFF]|\uFE0F))?|\uDC6F(?:\u200D(?:[\u2642\u2640]\uFE0F?))?|[\uDEA3\uDEB4\uDEB5](?:(?:\uD83C(?:[\uDFFB-\uDFFF](?:\u200D(?:[\u2642\u2640]\uFE0F?))?)|\u200D(?:[\u2642\u2640]\uFE0F?)))?|[\uDEC0\uDECC\uDC6D\uDC6B\uDC6C](?:\uD83C[\uDFFB-\uDFFF])?|\uDDE3\uFE0F?|\uDC15(?:\u200D\uD83E\uDDBA)?|[\uDC3F\uDD4A\uDD77\uDD78\uDDFA\uDEE3\uDEE4\uDEE2\uDEF3\uDEE5\uDEE9\uDEF0\uDECE\uDD70\uDD79\uDDBC\uDD76\uDECD\uDDA5\uDDA8\uDDB1\uDDB2\uDCFD\uDD6F\uDDDE\uDDF3\uDD8B\uDD8A\uDD8C\uDD8D\uDDC2\uDDD2\uDDD3\uDD87\uDDC3\uDDC4\uDDD1\uDDDD\uDEE0\uDDE1\uDEE1\uDDDC\uDECF\uDECB\uDD49]\uFE0F?|[\uDE00\uDE03\uDE04\uDE01\uDE06\uDE05\uDE02\uDE42\uDE43\uDE09\uDE0A\uDE07\uDE0D\uDE18\uDE17\uDE1A\uDE19\uDE0B\uDE1B-\uDE1D\uDE10\uDE11\uDE36\uDE0F\uDE12\uDE44\uDE2C\uDE0C\uDE14\uDE2A\uDE34\uDE37\uDE35\uDE0E\uDE15\uDE1F\uDE41\uDE2E\uDE2F\uDE32\uDE33\uDE26-\uDE28\uDE30\uDE25\uDE22\uDE2D\uDE31\uDE16\uDE23\uDE1E\uDE13\uDE29\uDE2B\uDE24\uDE21\uDE20\uDE08\uDC7F\uDC80\uDCA9\uDC79-\uDC7B\uDC7D\uDC7E\uDE3A\uDE38\uDE39\uDE3B-\uDE3D\uDE40\uDE3F\uDE3E\uDE48-\uDE4A\uDC8B\uDC8C\uDC98\uDC9D\uDC96\uDC97\uDC93\uDC9E\uDC95\uDC9F\uDC94\uDC9B\uDC9A\uDC99\uDC9C\uDDA4\uDCAF\uDCA2\uDCA5\uDCAB\uDCA6\uDCA8\uDCA3\uDCAC\uDCAD\uDCA4\uDC40\uDC45\uDC44\uDC8F\uDC91\uDC6A\uDC64\uDC65\uDC63\uDC35\uDC12\uDC36\uDC29\uDC3A\uDC31\uDC08\uDC2F\uDC05\uDC06\uDC34\uDC0E\uDC2E\uDC02-\uDC04\uDC37\uDC16\uDC17\uDC3D\uDC0F\uDC11\uDC10\uDC2A\uDC2B\uDC18\uDC2D\uDC01\uDC00\uDC39\uDC30\uDC07\uDC3B\uDC28\uDC3C\uDC3E\uDC14\uDC13\uDC23-\uDC27\uDC38\uDC0A\uDC22\uDC0D\uDC32\uDC09\uDC33\uDC0B\uDC2C\uDC1F-\uDC21\uDC19\uDC1A\uDC0C\uDC1B-\uDC1E\uDC90\uDCAE\uDD2A\uDDFE\uDDFB\uDC92\uDDFC\uDDFD\uDD4C\uDED5\uDD4D\uDD4B\uDC88\uDE82-\uDE8A\uDE9D\uDE9E\uDE8B-\uDE8E\uDE90-\uDE9C\uDEF5\uDEFA\uDEB2\uDEF4\uDEF9\uDE8F\uDEA8\uDEA5\uDEA6\uDED1\uDEA7\uDEF6\uDEA4\uDEA2\uDEEB\uDEEC\uDCBA\uDE81\uDE9F-\uDEA1\uDE80\uDEF8\uDD5B\uDD67\uDD50\uDD5C\uDD51\uDD5D\uDD52\uDD5E\uDD53\uDD5F\uDD54\uDD60\uDD55\uDD61\uDD56\uDD62\uDD57\uDD63\uDD58\uDD64\uDD59\uDD65\uDD5A\uDD66\uDD25\uDCA7\uDEF7\uDD2E\uDC53-\uDC62\uDC51\uDC52\uDCFF\uDC84\uDC8D\uDC8E\uDD07-\uDD0A\uDCE2\uDCE3\uDCEF\uDD14\uDD15\uDCFB\uDCF1\uDCF2\uDCDE-\uDCE0\uDD0B\uDD0C\uDCBB\uDCBD-\uDCC0\uDCFA\uDCF7-\uDCF9\uDCFC\uDD0D\uDD0E\uDCA1\uDD26\uDCD4-\uDCDA\uDCD3\uDCD2\uDCC3\uDCDC\uDCC4\uDCF0\uDCD1\uDD16\uDCB0\uDCB4-\uDCB8\uDCB3\uDCB9\uDCB1\uDCB2\uDCE7-\uDCE9\uDCE4-\uDCE6\uDCEB\uDCEA\uDCEC-\uDCEE\uDCDD\uDCBC\uDCC1\uDCC2\uDCC5-\uDCD0\uDD12\uDD13\uDD0F-\uDD11\uDD28\uDD2B\uDD27\uDD29\uDD17\uDD2C\uDD2D\uDCE1\uDC89\uDC8A\uDEAA\uDEBD\uDEBF\uDEC1\uDED2\uDEAC\uDDFF\uDEAE\uDEB0\uDEB9-\uDEBC\uDEBE\uDEC2-\uDEC5\uDEB8\uDEAB\uDEB3\uDEAD\uDEAF\uDEB1\uDEB7\uDCF5\uDD1E\uDD03\uDD04\uDD19-\uDD1D\uDED0\uDD4E\uDD2F\uDD00-\uDD02\uDD3C\uDD3D\uDD05\uDD06\uDCF6\uDCF3\uDCF4\uDD31\uDCDB\uDD30\uDD1F-\uDD24\uDD34\uDFE0-\uDFE2\uDD35\uDFE3-\uDFE5\uDFE7-\uDFE9\uDFE6\uDFEA\uDFEB\uDD36-\uDD3B\uDCA0\uDD18\uDD33\uDD32\uDEA9])|\uD83E(?:[\uDD1A\uDD0F\uDD1E\uDD1F\uDD18\uDD19\uDD1B\uDD1C\uDD32\uDD33\uDDB5\uDDB6\uDDBB\uDDD2](?:\uD83C[\uDFFB-\uDFFF])?|\uDDD1(?:(?:\uD83C(?:[\uDFFB-\uDFFF](?:\u200D(?:\uD83E(?:\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF]|[\uDDB0\uDDB1\uDDB3\uDDB2\uDDAF\uDDBC\uDDBD])|\u2695\uFE0F?|\uD83C[\uDF93\uDFEB\uDF3E\uDF73\uDFED\uDFA4\uDFA8]|\u2696\uFE0F?|\uD83D[\uDD27\uDCBC\uDD2C\uDCBB\uDE80\uDE92]|\u2708\uFE0F?))?)|\u200D(?:\uD83E(?:\uDD1D\u200D\uD83E\uDDD1|[\uDDB0\uDDB1\uDDB3\uDDB2\uDDAF\uDDBC\uDDBD])|\u2695\uFE0F?|\uD83C[\uDF93\uDFEB\uDF3E\uDF73\uDFED\uDFA4\uDFA8]|\u2696\uFE0F?|\uD83D[\uDD27\uDCBC\uDD2C\uDCBB\uDE80\uDE92]|\u2708\uFE0F?)))?|[\uDDD4\uDDD3](?:\uD83C[\uDFFB-\uDFFF])?|[\uDDCF\uDD26\uDD37](?:(?:\uD83C(?:[\uDFFB-\uDFFF](?:\u200D(?:[\u2642\u2640]\uFE0F?))?)|\u200D(?:[\u2642\u2640]\uFE0F?)))?|[\uDD34\uDDD5\uDD35\uDD30\uDD31\uDD36](?:\uD83C[\uDFFB-\uDFFF])?|[\uDDB8\uDDB9\uDDD9-\uDDDD](?:(?:\uD83C(?:[\uDFFB-\uDFFF](?:\u200D(?:[\u2642\u2640]\uFE0F?))?)|\u200D(?:[\u2642\u2640]\uFE0F?)))?|[\uDDDE\uDDDF](?:\u200D(?:[\u2642\u2640]\uFE0F?))?|[\uDDCD\uDDCE\uDDD6\uDDD7\uDD38](?:(?:\uD83C(?:[\uDFFB-\uDFFF](?:\u200D(?:[\u2642\u2640]\uFE0F?))?)|\u200D(?:[\u2642\u2640]\uFE0F?)))?|\uDD3C(?:\u200D(?:[\u2642\u2640]\uFE0F?))?|[\uDD3D\uDD3E\uDD39\uDDD8](?:(?:\uD83C(?:[\uDFFB-\uDFFF](?:\u200D(?:[\u2642\u2640]\uFE0F?))?)|\u200D(?:[\u2642\u2640]\uFE0F?)))?|[\uDD23\uDD70\uDD29\uDD2A\uDD11\uDD17\uDD2D\uDD2B\uDD14\uDD10\uDD28\uDD25\uDD24\uDD12\uDD15\uDD22\uDD2E\uDD27\uDD75\uDD76\uDD74\uDD2F\uDD20\uDD73\uDD13\uDDD0\uDD7A\uDD71\uDD2C\uDD21\uDD16\uDDE1\uDD0E\uDD0D\uDD1D\uDDBE\uDDBF\uDDE0\uDDB7\uDDB4\uDD3A\uDDB0\uDDB1\uDDB3\uDDB2\uDD8D\uDDA7\uDDAE\uDD8A\uDD9D\uDD81\uDD84\uDD93\uDD8C\uDD99\uDD92\uDD8F\uDD9B\uDD94\uDD87\uDDA5\uDDA6\uDDA8\uDD98\uDDA1\uDD83\uDD85\uDD86\uDDA2\uDD89\uDDA9\uDD9A\uDD9C\uDD8E\uDD95\uDD96\uDD88\uDD8B\uDD97\uDD82\uDD9F\uDDA0\uDD40\uDD6D\uDD5D\uDD65\uDD51\uDD54\uDD55\uDD52\uDD6C\uDD66\uDDC4\uDDC5\uDD5C\uDD50\uDD56\uDD68\uDD6F\uDD5E\uDDC7\uDDC0\uDD69\uDD53\uDD6A\uDD59\uDDC6\uDD5A\uDD58\uDD63\uDD57\uDDC8\uDDC2\uDD6B\uDD6E\uDD5F-\uDD61\uDD80\uDD9E\uDD90\uDD91\uDDAA\uDDC1\uDD67\uDD5B\uDD42\uDD43\uDD64\uDDC3\uDDC9\uDDCA\uDD62\uDD44\uDDED\uDDF1\uDDBD\uDDBC\uDE82\uDDF3\uDE90\uDDE8\uDDE7\uDD47-\uDD49\uDD4E\uDD4F\uDD4D\uDD4A\uDD4B\uDD45\uDD3F\uDD4C\uDE80\uDE81\uDDFF\uDDE9\uDDF8\uDDF5\uDDF6\uDD7D\uDD7C\uDDBA\uDDE3-\uDDE6\uDD7B\uDE71-\uDE73\uDD7E\uDD7F\uDE70\uDDE2\uDE95\uDD41\uDDEE\uDE94\uDDFE\uDE93\uDDAF\uDDF0\uDDF2\uDDEA-\uDDEC\uDE78-\uDE7A\uDE91\uDE92\uDDF4\uDDF7\uDDF9-\uDDFD\uDDEF])|[\u263A\u2639\u2620\u2763\u2764]\uFE0F?|\u270B(?:\uD83C[\uDFFB-\uDFFF])?|[\u270C\u261D](?:(?:\uD83C[\uDFFB-\uDFFF]|\uFE0F))?|\u270A(?:\uD83C[\uDFFB-\uDFFF])?|\u270D(?:(?:\uD83C[\uDFFB-\uDFFF]|\uFE0F))?|\uD83C(?:\uDF85(?:\uD83C[\uDFFB-\uDFFF])?|\uDFC3(?:(?:\uD83C(?:[\uDFFB-\uDFFF](?:\u200D(?:[\u2642\u2640]\uFE0F?))?)|\u200D(?:[\u2642\u2640]\uFE0F?)))?|[\uDFC7\uDFC2](?:\uD83C[\uDFFB-\uDFFF])?|\uDFCC(?:(?:\uFE0F(?:\u200D(?:[\u2642\u2640]\uFE0F?))?|\uD83C(?:[\uDFFB-\uDFFF](?:\u200D(?:[\u2642\u2640]\uFE0F?))?)|\u200D(?:[\u2642\u2640]\uFE0F?)))?|[\uDFC4\uDFCA](?:(?:\uD83C(?:[\uDFFB-\uDFFF](?:\u200D(?:[\u2642\u2640]\uFE0F?))?)|\u200D(?:[\u2642\u2640]\uFE0F?)))?|\uDFCB(?:(?:\uFE0F(?:\u200D(?:[\u2642\u2640]\uFE0F?))?|\uD83C(?:[\uDFFB-\uDFFF](?:\u200D(?:[\u2642\u2640]\uFE0F?))?)|\u200D(?:[\u2642\u2640]\uFE0F?)))?|[\uDFF5\uDF36\uDF7D\uDFD4-\uDFD6\uDFDC-\uDFDF\uDFDB\uDFD7\uDFD8\uDFDA\uDFD9\uDFCE\uDFCD\uDF21\uDF24-\uDF2C\uDF97\uDF9F\uDF96\uDF99-\uDF9B\uDF9E\uDFF7\uDD70\uDD71\uDD7E\uDD7F\uDE02\uDE37]\uFE0F?|\uDFF4(?:(?:\u200D\u2620\uFE0F?|\uDB40\uDC67\uDB40\uDC62\uDB40(?:\uDC65\uDB40\uDC6E\uDB40\uDC67\uDB40\uDC7F|\uDC73\uDB40\uDC63\uDB40\uDC74\uDB40\uDC7F|\uDC77\uDB40\uDC6C\uDB40\uDC73\uDB40\uDC7F)))?|\uDFF3(?:(?:\uFE0F(?:\u200D\uD83C\uDF08)?|\u200D\uD83C\uDF08))?|\uDDE6\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF]|\uDDE7\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF]|\uDDE8\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF]|\uDDE9\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF]|\uDDEA\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA]|\uDDEB\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7]|\uDDEC\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE]|\uDDED\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA]|\uDDEE\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9]|\uDDEF\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5]|\uDDF0\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF]|\uDDF1\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE]|\uDDF2\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF]|\uDDF3\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF]|\uDDF4\uD83C\uDDF2|\uDDF5\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE]|\uDDF6\uD83C\uDDE6|\uDDF7\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC]|\uDDF8\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF]|\uDDF9\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF]|\uDDFA\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF]|\uDDFB\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA]|\uDDFC\uD83C[\uDDEB\uDDF8]|\uDDFD\uD83C\uDDF0|\uDDFE\uD83C[\uDDEA\uDDF9]|\uDDFF\uD83C[\uDDE6\uDDF2\uDDFC]|[\uDFFB-\uDFFF\uDF38-\uDF3C\uDF37\uDF31-\uDF35\uDF3E-\uDF43\uDF47-\uDF53\uDF45\uDF46\uDF3D\uDF44\uDF30\uDF5E\uDF56\uDF57\uDF54\uDF5F\uDF55\uDF2D-\uDF2F\uDF73\uDF72\uDF7F\uDF71\uDF58-\uDF5D\uDF60\uDF62-\uDF65\uDF61\uDF66-\uDF6A\uDF82\uDF70\uDF6B-\uDF6F\uDF7C\uDF75\uDF76\uDF7E\uDF77-\uDF7B\uDF74\uDFFA\uDF0D-\uDF10\uDF0B\uDFE0-\uDFE6\uDFE8-\uDFED\uDFEF\uDFF0\uDF01\uDF03-\uDF07\uDF09\uDFA0-\uDFA2\uDFAA\uDF11-\uDF20\uDF0C\uDF00\uDF08\uDF02\uDF0A\uDF83\uDF84\uDF86-\uDF8B\uDF8D-\uDF91\uDF80\uDF81\uDFAB\uDFC6\uDFC5\uDFC0\uDFD0\uDFC8\uDFC9\uDFBE\uDFB3\uDFCF\uDFD1-\uDFD3\uDFF8\uDFA3\uDFBD\uDFBF\uDFAF\uDFB1\uDFAE\uDFB0\uDFB2\uDCCF\uDC04\uDFB4\uDFAD\uDFA8\uDF92\uDFA9\uDF93\uDFBC\uDFB5\uDFB6\uDFA4\uDFA7\uDFB7-\uDFBB\uDFA5\uDFAC\uDFEE\uDFF9\uDFE7\uDFA6\uDD8E\uDD91-\uDD9A\uDE01\uDE36\uDE2F\uDE50\uDE39\uDE1A\uDE32\uDE51\uDE38\uDE34\uDE33\uDE3A\uDE35\uDFC1\uDF8C])|\u26F7\uFE0F?|\u26F9(?:(?:\uFE0F(?:\u200D(?:[\u2642\u2640]\uFE0F?))?|\uD83C(?:[\uDFFB-\uDFFF](?:\u200D(?:[\u2642\u2640]\uFE0F?))?)|\u200D(?:[\u2642\u2640]\uFE0F?)))?|[\u2618\u26F0\u26E9\u2668\u26F4\u2708\u23F1\u23F2\u2600\u2601\u26C8\u2602\u26F1\u2744\u2603\u2604\u26F8\u2660\u2665\u2666\u2663\u265F\u26D1\u260E\u2328\u2709\u270F\u2712\u2702\u26CF\u2692\u2694\u2699\u2696\u26D3\u2697\u26B0\u26B1\u26A0\u2622\u2623\u2B06\u2197\u27A1\u2198\u2B07\u2199\u2B05\u2196\u2195\u2194\u21A9\u21AA\u2934\u2935\u269B\u2721\u2638\u262F\u271D\u2626\u262A\u262E\u25B6\u23ED\u23EF\u25C0\u23EE\u23F8-\u23FA\u23CF\u2640\u2642\u2695\u267E\u267B\u269C\u2611\u2714\u2716\u303D\u2733\u2734\u2747\u203C\u2049\u3030\u00A9\u00AE\u2122]\uFE0F?|[\u0023\u002A\u0030-\u0039](?:\uFE0F\u20E3|\u20E3)|[\u2139\u24C2\u3297\u3299\u25FC\u25FB\u25AA\u25AB]\uFE0F?|[\u2615\u26EA\u26F2\u26FA\u26FD\u2693\u26F5\u231B\u23F3\u231A\u23F0\u2B50\u26C5\u2614\u26A1\u26C4\u2728\u26BD\u26BE\u26F3\u267F\u26D4\u2648-\u2653\u26CE\u23E9-\u23EC\u2B55\u2705\u274C\u274E\u2795-\u2797\u27B0\u27BF\u2753-\u2755\u2757\u26AB\u26AA\u2B1B\u2B1C\u25FE\u25FD])/.test(t.content)?this.addReaction(t):(null!=(r=document.getElementById("wiki-talk-nomessages"))&&r.remove(),(o=document.createElement("li")).id="wiki-message-".concat(t.id),i=document.createElement("div"),o.appendChild(i),i.id="wiki-message-div-".concat(t.id),i.classList.add("wiki-message","collapsible","collapsed"),u=document.createElement("div"),i.appendChild(u),u.classList.add("wiki-message-header"),s=document.createElement("span"),u.appendChild(s),s.classList.add("wiki-message-sender"),a=document.createTextNode(t.senderName),t.senderExists?(c=document.createElement("a"),s.appendChild(c),c.classList.add("wiki-username","wiki-username-link"),c.href="/".concat(window.wikimvcchat.userNamespace,":").concat(t.senderId),c.title="Visit the user page for ".concat(t.senderName),c.appendChild(a)):(l=document.createElement("span"),s.appendChild(l),userLink.classList.add("wiki-username","wiki-username-nolink"),userLink.appendChild(a)),D=document.createElement("span"),u.appendChild(D),D.classList.add("wiki-message-reactions","wiki-message-reactions-".concat(t.id)),p=document.createElement("span"),u.appendChild(p),p.classList.add("wiki-message-timestamp"),f=document.createTextNode(new Date(t.timestamp/1e4-22089888e5).toLocaleString()),p.appendChild(f),h=document.createElement("div"),u.appendChild(h),h.classList.add("wiki-message-thread-toggler"),h.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" width="12" height="12"><path d="M4 1.533v9.671l4.752-4.871z" /></svg >',h.onclick=function(e){e.target.parentElement.parentElement.classList.toggle("expanded")},d=document.createElement("div"),i.appendChild(d),d.classList.add("wiki-message-content"),g=document.createTextNode(t.content),d.appendChild(g),v=document.createElement("div"),i.appendChild(v),v.classList.add("wiki-message-collapse-toggler"),m=document.createElement("a"),v.appendChild(m),m.href="javascript: void(0);",m.onclick=function(e){e.target.parentElement.parentElement.classList.toggle("collapsed")},n?null!=(y=document.getElementById("wiki-message-div-".concat(t.replyMessageId)))&&(y.classList.add("wiki-message-thread"),null==(F=y.getElementsByTagName("ul"))&&(F=document.createElement("ul"),y.appendChild(F)),F.appendChild(o)):(E=document.createElement("div"),i.appendChild(E),E.classList.add("wiki-talk-reply"),b=document.createElement("div"),E.appendChild(b),b.classList.add("form-group"),C=document.createElement("label"),b.appendChild(C),C.htmlFor="wiki-talk-message-input-".concat(t.id),C.textContent="Reply",w=document.createElement("textarea"),b.appendChild(w),w.id="wiki-talk-message-input-".concat(t.id),b.classList.add("form-control"),B=document.createElement("button"),E.appendChild(B),B.id="wiki-talk-reply-button-".concat(t.id),B.type="button",B.classList.add("btn","btn-primary"),B.textContent="Post",B.addEventListener("click",function(t){t=t||window.event;var n,r,o=(e.target||e.srcElement).id;null==o||null==o.length||o.length<=23||(o=o.substr(23),null==(n=document.getElementById("wiki-talk-message-input-".concat(o)))||null!=(r=n.value)&&null!=r.length&&0<r.length&&(window.wikimvcchat.connection.invoke("Send",{markdown:r,topicId:topicId,messageId:o}).catch(function(e){return console.error("An error occurred while sending a chat message")}),t.preventDefault(),t.stopPropagation()))}),window.wikimvcchat.messageListUl.appendChild(o)),parseInt(getComputedStyle(d).getPropertyValue("height"))<parseInt(getComputedStyle(d).getPropertyValue("max-height"))&&i.classList.remove("collapsible")))},addReaction:function(e){var t,n;null==e||null==e.messageId||!(null!=e.replyMessageId||null!=e.replyMessageId.length||0<e.replyMessageId.length)||null!=(t=document.getElementById("wiki-message-reactions-".concat(e.replyMessageId)))&&(n=e.content.replace(/[^a-zA-Z]/g,""),null==t.getElementById("wiki-message-reactions-".concat(n,"-").concat(e.messageId))&&window.wikimvcchat.addReactionList(e.replyMessageId,e.topicId,t,n,e.content),window.wikimvcchat.addReactionToList(e,n))},addReactionList:function(t,n,e,r,o){var i=document.createElement("span");e.appendChild(i),i.id="wiki-message-reactions-".concat(r,"-").concat(t),i.classList.add("wiki-message-reactions");var u=document.createElement("span");i.appendChild(u),u.classList.add("wiki-message-reaction-icon"),u.onclick=function(e){window.wikimvcchat.connection.invoke("Send",{markdown:o,topicId:n,messageId:t}).catch(function(e){return console.error("An error occurred while attempting to send a chat reaction")}),e.preventDefault(),e.stopPropagation()};var s=document.createElement("span");i.appendChild(s),i.id="wiki-message-reaction-count-".concat(r,"-").concat(t),s.classList.add("wiki-message-reaction-count");var a=document.createTextNode("0");s.appendChild(a);var c=document.createElement("ul");return i.appendChild(c),c.id="wiki-message-reaction-list-".concat(r,"-").concat(t),c.classList.add("wiki-message-reaction-list"),c.style.display="none",(0,l.default)(i,{content:function(){return document.getElementById("wiki-message-reaction-list-".concat(r,"-").concat(t)).innerHTML},placement:"auto",allowHTML:!0}),i},addReactionToList:function(e,t){var n,r=document.getElementById("wiki-message-reaction-count-".concat(t,"-").concat(e.replyMessageId));null!=r&&(n=parseInt(r.textContent),n++,r.textContent=n.toLocaleString());var o=document.getElementById("wiki-message-reaction-list-".concat(t,"-").concat(e.replyMessageId));null!=o&&window.wikimvcchat.addReactionToList(o,e);var u=document.createElement("li");o.appendChild(u);var s,a,c=document.createTextNode(e.senderName);e.senderExists?(s=document.createElement("a"),u.appendChild(s),s.classList.add("wiki-username","wiki-username-link"),s.href="/".concat(window.wikimvcchat.userNamespace,":").concat(e.senderId),s.title="Visit the user page for ".concat(e.senderName),s.appendChild(c)):(a=document.createElement("span"),u.appendChild(a),a.classList.add("wiki-username","wiki-username-nolink"),a.appendChild(c));var l=document.createElement("span");u.appendChild(l);var D=document.createTextNode(new Date(list[i].timestamp/1e4-22089888e5).toLocaleString());l.appendChild(D)}}},{"@microsoft/signalr":24,"tippy.js":30}],2:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=(o.prototype.abort=function(){this.isAborted||(this.isAborted=!0,this.onabort&&this.onabort())},Object.defineProperty(o.prototype,"signal",{get:function(){return this},enumerable:!0,configurable:!0}),Object.defineProperty(o.prototype,"aborted",{get:function(){return this.isAborted},enumerable:!0,configurable:!0}),o);function o(){this.isAborted=!1,this.onabort=null}n.AbortController=r},{}],3:[function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(n,"__esModule",{value:!0});var i,u=e("./Errors"),s=e("./HttpClient"),a=e("./NodeHttpClient"),c=e("./XhrHttpClient"),l=(i=s.HttpClient,o(D,i),D.prototype.send=function(e){return e.abortSignal&&e.abortSignal.aborted?Promise.reject(new u.AbortError):e.method?e.url?this.httpClient.send(e):Promise.reject(new Error("No url defined.")):Promise.reject(new Error("No method defined."))},D.prototype.getCookieString=function(e){return this.httpClient.getCookieString(e)},D);function D(e){var t=i.call(this)||this;return"undefined"!=typeof XMLHttpRequest?t.httpClient=new c.XhrHttpClient(e):t.httpClient=new a.NodeHttpClient(e),t}n.DefaultHttpClient=l},{"./Errors":5,"./HttpClient":7,"./NodeHttpClient":17,"./XhrHttpClient":23}],4:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=[0,2e3,1e4,3e4,null],o=(i.prototype.nextRetryDelayInMilliseconds=function(e){return this.retryDelays[e.previousRetryCount]},i);function i(e){this.retryDelays=void 0!==e?e.concat([null]):r}n.DefaultReconnectPolicy=o},{}],5:[function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(n,"__esModule",{value:!0});var i,u=(i=Error,o(s,i),s);function s(e,t){var n=this,r=this.constructor.prototype;return(n=i.call(this,e)||this).statusCode=t,n.__proto__=r,n}n.HttpError=u;var a,c=(a=Error,o(l,a),l);function l(e){void 0===e&&(e="A timeout occurred.");var t=this,n=this.constructor.prototype;return(t=a.call(this,e)||this).__proto__=n,t}n.TimeoutError=c;var D,p=(D=Error,o(f,D),f);function f(e){void 0===e&&(e="An abort occurred.");var t=this,n=this.constructor.prototype;return(t=D.call(this,e)||this).__proto__=n,t}n.AbortError=p},{}],6:[function(n,e,r){(function(c){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var l=n("./TextMessageFormat"),D=n("./Utils"),e=(t.prototype.writeHandshakeRequest=function(e){return l.TextMessageFormat.write(JSON.stringify(e))},t.prototype.parseHandshakeResponse=function(e){if(D.isArrayBuffer(e)||void 0!==c&&e instanceof c){var t=new Uint8Array(e);if(-1===(i=t.indexOf(l.TextMessageFormat.RecordSeparatorCode)))throw new Error("Message is incomplete.");var n=i+1,r=String.fromCharCode.apply(null,t.slice(0,n)),o=t.byteLength>n?t.slice(n).buffer:null}else{var i,u=e;if(-1===(i=u.indexOf(l.TextMessageFormat.RecordSeparator)))throw new Error("Message is incomplete.");n=i+1,r=u.substring(0,n),o=u.length>n?u.substring(n):null}var s=l.TextMessageFormat.parse(r),a=JSON.parse(s[0]);if(a.type)throw new Error("Expected a handshake response from the server.");return[o,a]},t);function t(){}r.HandshakeProtocol=e}).call(this,n("buffer").Buffer)},{"./TextMessageFormat":20,"./Utils":21,buffer:27}],7:[function(e,t,n){"use strict";var r=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e};Object.defineProperty(n,"__esModule",{value:!0});function o(e,t,n){this.statusCode=e,this.statusText=t,this.content=n}n.HttpResponse=o;var i=(u.prototype.get=function(e,t){return this.send(r({},t,{method:"GET",url:e}))},u.prototype.post=function(e,t){return this.send(r({},t,{method:"POST",url:e}))},u.prototype.delete=function(e,t){return this.send(r({},t,{method:"DELETE",url:e}))},u.prototype.getCookieString=function(e){return""},u);function u(){}n.HttpClient=i},{}],8:[function(e,t,n){"use strict";var o=this&&this.__awaiter||function(i,u,s,a){return new(s=s||Promise)(function(e,t){function n(e){try{o(a.next(e))}catch(e){t(e)}}function r(e){try{o(a.throw(e))}catch(e){t(e)}}function o(t){t.done?e(t.value):new s(function(e){e(t.value)}).then(n,r)}o((a=a.apply(i,u||[])).next())})},g=this&&this.__generator||function(n,r){var o,i,u,s={label:0,sent:function(){if(1&u[0])throw u[1];return u[1]},trys:[],ops:[]},e={next:t(0),throw:t(1),return:t(2)};return"function"==typeof Symbol&&(e[Symbol.iterator]=function(){return this}),e;function t(t){return function(e){return function(t){if(o)throw new TypeError("Generator is already executing.");for(;s;)try{if(o=1,i&&(u=2&t[0]?i.return:t[0]?i.throw||((u=i.return)&&u.call(i),0):i.next)&&!(u=u.call(i,t[1])).done)return u;switch(i=0,u&&(t=[2&t[0],u.value]),t[0]){case 0:case 1:u=t;break;case 4:return s.label++,{value:t[1],done:!1};case 5:s.label++,i=t[1],t=[0];continue;case 7:t=s.ops.pop(),s.trys.pop();continue;default:if(!(u=0<(u=s.trys).length&&u[u.length-1])&&(6===t[0]||2===t[0])){s=0;continue}if(3===t[0]&&(!u||t[1]>u[0]&&t[1]<u[3])){s.label=t[1];break}if(6===t[0]&&s.label<u[1]){s.label=u[1],u=t;break}if(u&&s.label<u[2]){s.label=u[2],s.ops.push(t);break}u[2]&&s.ops.pop(),s.trys.pop();continue}t=r.call(n,s)}catch(e){t=[6,e],i=0}finally{o=u=0}if(5&t[0])throw t[1];return{value:t[0]?t[1]:void 0,done:!0}}([t,e])}}};Object.defineProperty(n,"__esModule",{value:!0});var r,i=e("./DefaultHttpClient"),v=e("./ILogger"),a=e("./ITransport"),c=e("./LongPollingTransport"),u=e("./ServerSentEventsTransport"),s=e("./Utils"),l=e("./WebSocketTransport"),D=null,p=null;s.Platform.isNode&&void 0!==e&&(r="function"==typeof __webpack_require__?__non_webpack_require__:e,D=r("ws"),p=r("eventsource"));var f=(h.prototype.start=function(n){return o(this,void 0,void 0,function(){var t;return g(this,function(e){switch(e.label){case 0:return n=n||a.TransferFormat.Binary,s.Arg.isIn(n,a.TransferFormat,"transferFormat"),this.logger.log(v.LogLevel.Debug,"Starting connection with transfer format '"+a.TransferFormat[n]+"'."),"Disconnected"!==this.connectionState?[2,Promise.reject(new Error("Cannot start an HttpConnection that is not in the 'Disconnected' state."))]:(this.connectionState="Connecting ",this.startInternalPromise=this.startInternal(n),[4,this.startInternalPromise]);case 1:return e.sent(),"Disconnecting"!==this.connectionState?[3,3]:(t="Failed to start the HttpConnection before stop() was called.",this.logger.log(v.LogLevel.Error,t),[4,this.stopPromise]);case 2:return e.sent(),[2,Promise.reject(new Error(t))];case 3:if("Connected"!==this.connectionState)return t="HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!",this.logger.log(v.LogLevel.Error,t),[2,Promise.reject(new Error(t))];e.label=4;case 4:return this.connectionStarted=!0,[2]}})})},h.prototype.send=function(e){return"Connected"!==this.connectionState?Promise.reject(new Error("Cannot send data if the connection is not in the 'Connected' State.")):(this.sendQueue||(this.sendQueue=new d(this.transport)),this.sendQueue.send(e))},h.prototype.stop=function(n){return o(this,void 0,void 0,function(){var t=this;return g(this,function(e){switch(e.label){case 0:return"Disconnected"===this.connectionState?(this.logger.log(v.LogLevel.Debug,"Call to HttpConnection.stop("+n+") ignored because the connection is already in the disconnected state."),[2,Promise.resolve()]):"Disconnecting"===this.connectionState?(this.logger.log(v.LogLevel.Debug,"Call to HttpConnection.stop("+n+") ignored because the connection is already in the disconnecting state."),[2,this.stopPromise]):(this.connectionState="Disconnecting",this.stopPromise=new Promise(function(e){t.stopPromiseResolver=e}),[4,this.stopInternal(n)]);case 1:return e.sent(),[4,this.stopPromise];case 2:return e.sent(),[2]}})})},h.prototype.stopInternal=function(r){return o(this,void 0,void 0,function(){var t,n;return g(this,function(e){switch(e.label){case 0:this.stopError=r,e.label=1;case 1:return e.trys.push([1,3,,4]),[4,this.startInternalPromise];case 2:case 3:return e.sent(),[3,4];case 4:if(!this.sendQueue)return[3,9];e.label=5;case 5:return e.trys.push([5,7,,8]),[4,this.sendQueue.stop()];case 6:return e.sent(),[3,8];case 7:return t=e.sent(),this.logger.log(v.LogLevel.Error,"TransportSendQueue.stop() threw error '"+t+"'."),[3,8];case 8:this.sendQueue=void 0,e.label=9;case 9:if(!this.transport)return[3,14];e.label=10;case 10:return e.trys.push([10,12,,13]),[4,this.transport.stop()];case 11:return e.sent(),[3,13];case 12:return n=e.sent(),this.logger.log(v.LogLevel.Error,"HttpConnection.transport.stop() threw error '"+n+"'."),this.stopConnection(),[3,13];case 13:return this.transport=void 0,[3,15];case 14:this.logger.log(v.LogLevel.Debug,"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed."),this.stopConnection(),e.label=15;case 15:return[2]}})})},h.prototype.startInternal=function(s){return o(this,void 0,void 0,function(){var n,r,o,t,i,u;return g(this,function(e){switch(e.label){case 0:n=this.baseUrl,this.accessTokenFactory=this.options.accessTokenFactory,e.label=1;case 1:return e.trys.push([1,12,,13]),this.options.skipNegotiation?this.options.transport!==a.HttpTransportType.WebSockets?[3,3]:(this.transport=this.constructTransport(a.HttpTransportType.WebSockets),[4,this.startTransport(n,s)]):[3,5];case 2:return e.sent(),[3,4];case 3:throw new Error("Negotiation can only be skipped when using the WebSocket transport directly.");case 4:return[3,11];case 5:r=null,o=0,t=function(){var t;return g(this,function(e){switch(e.label){case 0:return[4,i.getNegotiationResponse(n)];case 1:if(r=e.sent(),"Disconnecting"===i.connectionState||"Disconnected"===i.connectionState)throw new Error("The connection was stopped during negotiation.");if(r.error)throw new Error(r.error);if(r.ProtocolVersion)throw new Error("Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.");return r.url&&(n=r.url),r.accessToken&&(t=r.accessToken,i.accessTokenFactory=function(){return t}),o++,[2]}})},i=this,e.label=6;case 6:return[5,t()];case 7:e.sent(),e.label=8;case 8:if(r.url&&o<100)return[3,6];e.label=9;case 9:if(100===o&&r.url)throw new Error("Negotiate redirection limit exceeded.");return[4,this.createTransport(n,this.options.transport,r,s)];case 10:e.sent(),e.label=11;case 11:return this.transport instanceof c.LongPollingTransport&&(this.features.inherentKeepAlive=!0),"Connecting "===this.connectionState&&(this.logger.log(v.LogLevel.Debug,"The HttpConnection connected successfully."),this.connectionState="Connected"),[3,13];case 12:return u=e.sent(),this.logger.log(v.LogLevel.Error,"Failed to start the connection: "+u),this.connectionState="Disconnected",this.transport=void 0,[2,Promise.reject(u)];case 13:return[2]}})})},h.prototype.getNegotiationResponse=function(a){return o(this,void 0,void 0,function(){var t,n,r,o,i,u,s;return g(this,function(e){switch(e.label){case 0:return this.accessTokenFactory?[4,this.accessTokenFactory()]:[3,2];case 1:(r=e.sent())&&((t={}).Authorization="Bearer "+r,n=t),e.label=2;case 2:o=this.resolveNegotiateUrl(a),this.logger.log(v.LogLevel.Debug,"Sending negotiation request: "+o+"."),e.label=3;case 3:return e.trys.push([3,5,,6]),[4,this.httpClient.post(o,{content:"",headers:n})];case 4:return 200!==(i=e.sent()).statusCode?[2,Promise.reject(new Error("Unexpected status code returned from negotiate "+i.statusCode))]:((!(u=JSON.parse(i.content)).negotiateVersion||u.negotiateVersion<1)&&(u.connectionToken=u.connectionId),[2,u]);case 5:return s=e.sent(),this.logger.log(v.LogLevel.Error,"Failed to complete negotiation with the server: "+s),[2,Promise.reject(s)];case 6:return[2]}})})},h.prototype.createConnectUrl=function(e,t){return t?e+(-1===e.indexOf("?")?"?":"&")+"id="+t:e},h.prototype.createTransport=function(p,f,h,d){return o(this,void 0,void 0,function(){var t,n,r,o,i,u,s,a,c,l,D;return g(this,function(e){switch(e.label){case 0:return t=this.createConnectUrl(p,h.connectionToken),this.isITransport(f)?(this.logger.log(v.LogLevel.Debug,"Connection was provided an instance of ITransport, using that directly."),this.transport=f,[4,this.startTransport(t,d)]):[3,2];case 1:return e.sent(),this.connectionId=h.connectionId,[2];case 2:n=[],r=h.availableTransports||[],o=h,i=0,u=r,e.label=3;case 3:return i<u.length?(s=u[i],(a=this.resolveTransportOrError(s,f,d))instanceof Error?(n.push(s.transport+" failed: "+a),[3,12]):[3,4]):[3,13];case 4:if(!this.isITransport(a))return[3,12];if(this.transport=a,o)return[3,9];e.label=5;case 5:return e.trys.push([5,7,,8]),[4,this.getNegotiationResponse(p)];case 6:return o=e.sent(),[3,8];case 7:return c=e.sent(),[2,Promise.reject(c)];case 8:t=this.createConnectUrl(p,o.connectionToken),e.label=9;case 9:return e.trys.push([9,11,,12]),[4,this.startTransport(t,d)];case 10:return e.sent(),this.connectionId=o.connectionId,[2];case 11:return l=e.sent(),this.logger.log(v.LogLevel.Error,"Failed to start the transport '"+s.transport+"': "+l),o=void 0,n.push(s.transport+" failed: "+l),"Connecting "!==this.connectionState?(D="Failed to select transport before stop() was called.",this.logger.log(v.LogLevel.Debug,D),[2,Promise.reject(new Error(D))]):[3,12];case 12:return i++,[3,3];case 13:return 0<n.length?[2,Promise.reject(new Error("Unable to connect to the server with any of the available transports. "+n.join(" ")))]:[2,Promise.reject(new Error("None of the transports supported by the client are supported by the server."))]}})})},h.prototype.constructTransport=function(e){switch(e){case a.HttpTransportType.WebSockets:if(!this.options.WebSocket)throw new Error("'WebSocket' is not supported in your environment.");return new l.WebSocketTransport(this.httpClient,this.accessTokenFactory,this.logger,this.options.logMessageContent||!1,this.options.WebSocket);case a.HttpTransportType.ServerSentEvents:if(!this.options.EventSource)throw new Error("'EventSource' is not supported in your environment.");return new u.ServerSentEventsTransport(this.httpClient,this.accessTokenFactory,this.logger,this.options.logMessageContent||!1,this.options.EventSource);case a.HttpTransportType.LongPolling:return new c.LongPollingTransport(this.httpClient,this.accessTokenFactory,this.logger,this.options.logMessageContent||!1);default:throw new Error("Unknown transport: "+e+".")}},h.prototype.startTransport=function(e,t){var n=this;return this.transport.onreceive=this.onreceive,this.transport.onclose=function(e){return n.stopConnection(e)},this.transport.connect(e,t)},h.prototype.resolveTransportOrError=function(e,t,n){var r,o,i=a.HttpTransportType[e.transport];if(null==i)return this.logger.log(v.LogLevel.Debug,"Skipping transport '"+e.transport+"' because it is not supported by this client."),new Error("Skipping transport '"+e.transport+"' because it is not supported by this client.");if(o=i,(r=t)&&0==(o&r))return this.logger.log(v.LogLevel.Debug,"Skipping transport '"+a.HttpTransportType[i]+"' because it was disabled by the client."),new Error("'"+a.HttpTransportType[i]+"' is disabled by the client.");if(!(0<=e.transferFormats.map(function(e){return a.TransferFormat[e]}).indexOf(n)))return this.logger.log(v.LogLevel.Debug,"Skipping transport '"+a.HttpTransportType[i]+"' because it does not support the requested transfer format '"+a.TransferFormat[n]+"'."),new Error("'"+a.HttpTransportType[i]+"' does not support "+a.TransferFormat[n]+".");if(i===a.HttpTransportType.WebSockets&&!this.options.WebSocket||i===a.HttpTransportType.ServerSentEvents&&!this.options.EventSource)return this.logger.log(v.LogLevel.Debug,"Skipping transport '"+a.HttpTransportType[i]+"' because it is not supported in your environment.'"),new Error("'"+a.HttpTransportType[i]+"' is not supported in your environment.");this.logger.log(v.LogLevel.Debug,"Selecting transport '"+a.HttpTransportType[i]+"'.");try{return this.constructTransport(i)}catch(e){return e}},h.prototype.isITransport=function(e){return e&&"object"==typeof e&&"connect"in e},h.prototype.stopConnection=function(t){if(this.logger.log(v.LogLevel.Debug,"HttpConnection.stopConnection("+t+") called while in state "+this.connectionState+"."),this.transport=void 0,t=this.stopError||t,this.stopError=void 0,"Disconnected"!==this.connectionState)if("Connecting "!==this.connectionState){if("Disconnecting"===this.connectionState&&this.stopPromiseResolver(),t?this.logger.log(v.LogLevel.Error,"Connection disconnected with error '"+t+"'."):this.logger.log(v.LogLevel.Information,"Connection disconnected."),this.connectionId=void 0,this.connectionState="Disconnected",this.onclose&&this.connectionStarted){this.connectionStarted=!1;try{this.onclose(t)}catch(e){this.logger.log(v.LogLevel.Error,"HttpConnection.onclose("+t+") threw error '"+e+"'.")}}}else this.logger.log(v.LogLevel.Warning,"Call to HttpConnection.stopConnection("+t+") was ignored because the connection hasn't yet left the in the connecting state.");else this.logger.log(v.LogLevel.Debug,"Call to HttpConnection.stopConnection("+t+") was ignored because the connection is already in the disconnected state.")},h.prototype.resolveUrl=function(e){if(0===e.lastIndexOf("https://",0)||0===e.lastIndexOf("http://",0))return e;if(!s.Platform.isBrowser||!window.document)throw new Error("Cannot resolve '"+e+"'.");var t=window.document.createElement("a");return t.href=e,this.logger.log(v.LogLevel.Information,"Normalizing '"+e+"' to '"+t.href+"'."),t.href},h.prototype.resolveNegotiateUrl=function(e){var t=e.indexOf("?"),n=e.substring(0,-1===t?e.length:t);return"/"!==n[n.length-1]&&(n+="/"),n+="negotiate",-1===(n+=-1===t?"":e.substring(t)).indexOf("negotiateVersion")&&(n+=-1===t?"?":"&",n+="negotiateVersion="+this.negotiateVersion),n},h);function h(e,t){void 0===t&&(t={}),this.features={},this.negotiateVersion=1,s.Arg.isRequired(e,"url"),this.logger=s.createLogger(t.logger),this.baseUrl=this.resolveUrl(e),(t=t||{}).logMessageContent=t.logMessageContent||!1,s.Platform.isNode||"undefined"==typeof WebSocket||t.WebSocket?s.Platform.isNode&&!t.WebSocket&&D&&(t.WebSocket=D):t.WebSocket=WebSocket,s.Platform.isNode||"undefined"==typeof EventSource||t.EventSource?s.Platform.isNode&&!t.EventSource&&void 0!==p&&(t.EventSource=p):t.EventSource=EventSource,this.httpClient=t.httpClient||new i.DefaultHttpClient(this.logger),this.connectionState="Disconnected",this.connectionStarted=!1,this.options=t,this.onreceive=null,this.onclose=null}n.HttpConnection=f;var d=(m.prototype.send=function(e){return this.bufferData(e),this.transportResult||(this.transportResult=new y),this.transportResult.promise},m.prototype.stop=function(){return this.executing=!1,this.sendBufferedData.resolve(),this.sendLoopPromise},m.prototype.bufferData=function(e){if(this.buffer.length&&typeof this.buffer[0]!=typeof e)throw new Error("Expected data to be of type "+typeof this.buffer+" but was of type "+typeof e);this.buffer.push(e),this.sendBufferedData.resolve()},m.prototype.sendLoop=function(){return o(this,void 0,void 0,function(){var t,n,r;return g(this,function(e){switch(e.label){case 0:return[4,this.sendBufferedData.promise];case 1:if(e.sent(),!this.executing)return this.transportResult&&this.transportResult.reject("Connection stopped."),[3,6];this.sendBufferedData=new y,t=this.transportResult,this.transportResult=void 0,n="string"==typeof this.buffer[0]?this.buffer.join(""):m.concatBuffers(this.buffer),this.buffer.length=0,e.label=2;case 2:return e.trys.push([2,4,,5]),[4,this.transport.send(n)];case 3:return e.sent(),t.resolve(),[3,5];case 4:return r=e.sent(),t.reject(r),[3,5];case 5:return[3,0];case 6:return[2]}})})},m.concatBuffers=function(e){for(var t=e.map(function(e){return e.byteLength}).reduce(function(e,t){return e+t}),n=new Uint8Array(t),r=0,o=0,i=e;o<i.length;o++){var u=i[o];n.set(new Uint8Array(u),r),r+=u.byteLength}return n},m);function m(e){this.transport=e,this.buffer=[],this.executing=!0,this.sendBufferedData=new y,this.transportResult=new y,this.sendLoopPromise=this.sendLoop()}n.TransportSendQueue=d;var y=(F.prototype.resolve=function(){this.resolver()},F.prototype.reject=function(e){this.rejecter(e)},F);function F(){var r=this;this.promise=new Promise(function(e,t){var n=[e,t];return r.resolver=n[0],r.rejecter=n[1],n})}},{"./DefaultHttpClient":3,"./ILogger":12,"./ITransport":13,"./LongPollingTransport":16,"./ServerSentEventsTransport":18,"./Utils":21,"./WebSocketTransport":22}],9:[function(e,t,n){"use strict";var r=this&&this.__awaiter||function(i,u,s,a){return new(s=s||Promise)(function(e,t){function n(e){try{o(a.next(e))}catch(e){t(e)}}function r(e){try{o(a.throw(e))}catch(e){t(e)}}function o(t){t.done?e(t.value):new s(function(e){e(t.value)}).then(n,r)}o((a=a.apply(i,u||[])).next())})},a=this&&this.__generator||function(n,r){var o,i,u,s={label:0,sent:function(){if(1&u[0])throw u[1];return u[1]},trys:[],ops:[]},e={next:t(0),throw:t(1),return:t(2)};return"function"==typeof Symbol&&(e[Symbol.iterator]=function(){return this}),e;function t(t){return function(e){return function(t){if(o)throw new TypeError("Generator is already executing.");for(;s;)try{if(o=1,i&&(u=2&t[0]?i.return:t[0]?i.throw||((u=i.return)&&u.call(i),0):i.next)&&!(u=u.call(i,t[1])).done)return u;switch(i=0,u&&(t=[2&t[0],u.value]),t[0]){case 0:case 1:u=t;break;case 4:return s.label++,{value:t[1],done:!1};case 5:s.label++,i=t[1],t=[0];continue;case 7:t=s.ops.pop(),s.trys.pop();continue;default:if(!(u=0<(u=s.trys).length&&u[u.length-1])&&(6===t[0]||2===t[0])){s=0;continue}if(3===t[0]&&(!u||t[1]>u[0]&&t[1]<u[3])){s.label=t[1];break}if(6===t[0]&&s.label<u[1]){s.label=u[1],u=t;break}if(u&&s.label<u[2]){s.label=u[2],s.ops.push(t);break}u[2]&&s.ops.pop(),s.trys.pop();continue}t=r.call(n,s)}catch(e){t=[6,e],i=0}finally{o=u=0}if(5&t[0])throw t[1];return{value:t[0]?t[1]:void 0,done:!0}}([t,e])}}};Object.defineProperty(n,"__esModule",{value:!0});var c,o,i=e("./HandshakeProtocol"),l=e("./IHubProtocol"),D=e("./ILogger"),p=e("./Subject"),u=e("./Utils");(o=c=n.HubConnectionState||(n.HubConnectionState={})).Disconnected="Disconnected",o.Connecting="Connecting",o.Connected="Connected",o.Disconnecting="Disconnecting",o.Reconnecting="Reconnecting";var s=(f.create=function(e,t,n,r){return new f(e,t,n,r)},Object.defineProperty(f.prototype,"state",{get:function(){return this.connectionState},enumerable:!0,configurable:!0}),Object.defineProperty(f.prototype,"connectionId",{get:function(){return this.connection&&this.connection.connectionId||null},enumerable:!0,configurable:!0}),Object.defineProperty(f.prototype,"baseUrl",{get:function(){return this.connection.baseUrl||""},set:function(e){if(this.connectionState!==c.Disconnected&&this.connectionState!==c.Reconnecting)throw new Error("The HubConnection must be in the Disconnected or Reconnecting state to change the url.");if(!e)throw new Error("The HubConnection url must be a valid url.");this.connection.baseUrl=e},enumerable:!0,configurable:!0}),f.prototype.start=function(){return this.startPromise=this.startWithStateTransitions(),this.startPromise},f.prototype.startWithStateTransitions=function(){return r(this,void 0,void 0,function(){var t;return a(this,function(e){switch(e.label){case 0:if(this.connectionState!==c.Disconnected)return[2,Promise.reject(new Error("Cannot start a HubConnection that is not in the 'Disconnected' state."))];this.connectionState=c.Connecting,this.logger.log(D.LogLevel.Debug,"Starting HubConnection."),e.label=1;case 1:return e.trys.push([1,3,,4]),[4,this.startInternal()];case 2:return e.sent(),this.connectionState=c.Connected,this.connectionStarted=!0,this.logger.log(D.LogLevel.Debug,"HubConnection connected successfully."),[3,4];case 3:return t=e.sent(),this.connectionState=c.Disconnected,this.logger.log(D.LogLevel.Debug,"HubConnection failed to start successfully because of error '"+t+"'."),[2,Promise.reject(t)];case 4:return[2]}})})},f.prototype.startInternal=function(){return r(this,void 0,void 0,function(){var t,n,r,o=this;return a(this,function(e){switch(e.label){case 0:return this.stopDuringStartError=void 0,this.receivedHandshakeResponse=!1,t=new Promise(function(e,t){o.handshakeResolver=e,o.handshakeRejecter=t}),[4,this.connection.start(this.protocol.transferFormat)];case 1:e.sent(),e.label=2;case 2:return e.trys.push([2,5,,7]),n={protocol:this.protocol.name,version:this.protocol.version},this.logger.log(D.LogLevel.Debug,"Sending handshake request."),[4,this.sendMessage(this.handshakeProtocol.writeHandshakeRequest(n))];case 3:return e.sent(),this.logger.log(D.LogLevel.Information,"Using HubProtocol '"+this.protocol.name+"'."),this.cleanupTimeout(),this.resetTimeoutPeriod(),this.resetKeepAliveInterval(),[4,t];case 4:if(e.sent(),this.stopDuringStartError)throw this.stopDuringStartError;return[3,7];case 5:return r=e.sent(),this.logger.log(D.LogLevel.Debug,"Hub handshake failed with error '"+r+"' during start(). Stopping HubConnection."),this.cleanupTimeout(),this.cleanupPingTimer(),[4,this.connection.stop(r)];case 6:throw e.sent(),r;case 7:return[2]}})})},f.prototype.stop=function(){return r(this,void 0,void 0,function(){var t;return a(this,function(e){switch(e.label){case 0:return t=this.startPromise,this.stopPromise=this.stopInternal(),[4,this.stopPromise];case 1:e.sent(),e.label=2;case 2:return e.trys.push([2,4,,5]),[4,t];case 3:case 4:return e.sent(),[3,5];case 5:return[2]}})})},f.prototype.stopInternal=function(e){return this.connectionState===c.Disconnected?(this.logger.log(D.LogLevel.Debug,"Call to HubConnection.stop("+e+") ignored because it is already in the disconnected state."),Promise.resolve()):this.connectionState===c.Disconnecting?(this.logger.log(D.LogLevel.Debug,"Call to HttpConnection.stop("+e+") ignored because the connection is already in the disconnecting state."),this.stopPromise):(this.connectionState=c.Disconnecting,this.logger.log(D.LogLevel.Debug,"Stopping HubConnection."),this.reconnectDelayHandle?(this.logger.log(D.LogLevel.Debug,"Connection stopped during reconnect delay. Done reconnecting."),clearTimeout(this.reconnectDelayHandle),this.reconnectDelayHandle=void 0,this.completeClose(),Promise.resolve()):(this.cleanupTimeout(),this.cleanupPingTimer(),this.stopDuringStartError=e||new Error("The connection was stopped before the hub handshake could complete."),this.connection.stop(e)))},f.prototype.stream=function(e){for(var t=this,n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];var o,i=this.replaceStreamingParams(n),u=i[0],s=i[1],a=this.createStreamInvocation(e,n,s),c=new p.Subject;return c.cancelCallback=function(){var e=t.createCancelInvocation(a.invocationId);return delete t.callbacks[a.invocationId],o.then(function(){return t.sendWithProtocol(e)})},this.callbacks[a.invocationId]=function(e,t){t?c.error(t):e&&(e.type===l.MessageType.Completion?e.error?c.error(new Error(e.error)):c.complete():c.next(e.item))},o=this.sendWithProtocol(a).catch(function(e){c.error(e),delete t.callbacks[a.invocationId]}),this.launchStreams(u,o),c},f.prototype.sendMessage=function(e){return this.resetKeepAliveInterval(),this.connection.send(e)},f.prototype.sendWithProtocol=function(e){return this.sendMessage(this.protocol.writeMessage(e))},f.prototype.send=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var r=this.replaceStreamingParams(t),o=r[0],i=r[1],u=this.sendWithProtocol(this.createInvocation(e,t,!0,i));return this.launchStreams(o,u),u},f.prototype.invoke=function(e){for(var t=this,n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];var o=this.replaceStreamingParams(n),i=o[0],u=o[1],s=this.createInvocation(e,n,!1,u);return new Promise(function(n,r){t.callbacks[s.invocationId]=function(e,t){t?r(t):e&&(e.type===l.MessageType.Completion?e.error?r(new Error(e.error)):n(e.result):r(new Error("Unexpected message type: "+e.type)))};var e=t.sendWithProtocol(s).catch(function(e){r(e),delete t.callbacks[s.invocationId]});t.launchStreams(i,e)})},f.prototype.on=function(e,t){e&&t&&(e=e.toLowerCase(),this.methods[e]||(this.methods[e]=[]),-1===this.methods[e].indexOf(t)&&this.methods[e].push(t))},f.prototype.off=function(e,t){var n,r;e&&(e=e.toLowerCase(),(n=this.methods[e])&&(t?-1!==(r=n.indexOf(t))&&(n.splice(r,1),0===n.length&&delete this.methods[e]):delete this.methods[e]))},f.prototype.onclose=function(e){e&&this.closedCallbacks.push(e)},f.prototype.onreconnecting=function(e){e&&this.reconnectingCallbacks.push(e)},f.prototype.onreconnected=function(e){e&&this.reconnectedCallbacks.push(e)},f.prototype.processIncomingData=function(e){if(this.cleanupTimeout(),this.receivedHandshakeResponse||(e=this.processHandshakeResponse(e),this.receivedHandshakeResponse=!0),e)for(var t=0,n=this.protocol.parseMessages(e,this.logger);t<n.length;t++){var r=n[t];switch(r.type){case l.MessageType.Invocation:this.invokeClientMethod(r);break;case l.MessageType.StreamItem:case l.MessageType.Completion:var o=this.callbacks[r.invocationId];o&&(r.type===l.MessageType.Completion&&delete this.callbacks[r.invocationId],o(r));break;case l.MessageType.Ping:break;case l.MessageType.Close:this.logger.log(D.LogLevel.Information,"Close message received from server.");var i=r.error?new Error("Server returned an error on close: "+r.error):void 0;!0===r.allowReconnect?this.connection.stop(i):this.stopPromise=this.stopInternal(i);break;default:this.logger.log(D.LogLevel.Warning,"Invalid message type: "+r.type+".")}}this.resetTimeoutPeriod()},f.prototype.processHandshakeResponse=function(e){var t,n,r;try{r=(t=this.handshakeProtocol.parseHandshakeResponse(e))[0],n=t[1]}catch(e){var o="Error parsing handshake response: "+e;this.logger.log(D.LogLevel.Error,o);var i=new Error(o);throw this.handshakeRejecter(i),i}if(n.error)throw o="Server returned handshake error: "+n.error,this.logger.log(D.LogLevel.Error,o),i=new Error(o),this.handshakeRejecter(i),i;return this.logger.log(D.LogLevel.Debug,"Server handshake complete."),this.handshakeResolver(),r},f.prototype.resetKeepAliveInterval=function(){var e=this;this.cleanupPingTimer(),this.pingServerHandle=setTimeout(function(){return r(e,void 0,void 0,function(){return a(this,function(e){switch(e.label){case 0:if(this.connectionState!==c.Connected)return[3,4];e.label=1;case 1:return e.trys.push([1,3,,4]),[4,this.sendMessage(this.cachedPingMessage)];case 2:return e.sent(),[3,4];case 3:return e.sent(),this.cleanupPingTimer(),[3,4];case 4:return[2]}})})},this.keepAliveIntervalInMilliseconds)},f.prototype.resetTimeoutPeriod=function(){var e=this;this.connection.features&&this.connection.features.inherentKeepAlive||(this.timeoutHandle=setTimeout(function(){return e.serverTimeout()},this.serverTimeoutInMilliseconds))},f.prototype.serverTimeout=function(){this.connection.stop(new Error("Server timeout elapsed without receiving a message from the server."))},f.prototype.invokeClientMethod=function(t){var e,n=this,r=this.methods[t.target.toLowerCase()];if(r){try{r.forEach(function(e){return e.apply(n,t.arguments)})}catch(e){this.logger.log(D.LogLevel.Error,"A callback for the method "+t.target.toLowerCase()+" threw error '"+e+"'.")}t.invocationId&&(e="Server requested a response, which is not supported in this version of the client.",this.logger.log(D.LogLevel.Error,e),this.stopPromise=this.stopInternal(new Error(e)))}else this.logger.log(D.LogLevel.Warning,"No client method with the name '"+t.target+"' found.")},f.prototype.connectionClosed=function(e){this.logger.log(D.LogLevel.Debug,"HubConnection.connectionClosed("+e+") called while in state "+this.connectionState+"."),this.stopDuringStartError=this.stopDuringStartError||e||new Error("The underlying connection was closed before the hub handshake could complete."),this.handshakeResolver&&this.handshakeResolver(),this.cancelCallbacksWithError(e||new Error("Invocation canceled due to the underlying connection being closed.")),this.cleanupTimeout(),this.cleanupPingTimer(),this.connectionState===c.Disconnecting?this.completeClose(e):this.connectionState===c.Connected&&this.reconnectPolicy?this.reconnect(e):this.connectionState===c.Connected&&this.completeClose(e)},f.prototype.completeClose=function(t){var n=this;if(this.connectionStarted){this.connectionState=c.Disconnected,this.connectionStarted=!1;try{this.closedCallbacks.forEach(function(e){return e.apply(n,[t])})}catch(e){this.logger.log(D.LogLevel.Error,"An onclose callback called with error '"+t+"' threw error '"+e+"'.")}}},f.prototype.reconnect=function(s){return r(this,void 0,void 0,function(){var t,n,r,o,i,u=this;return a(this,function(e){switch(e.label){case 0:if(t=Date.now(),r=void(n=0)!==s?s:new Error("Attempting to reconnect due to a unknown error."),null===(o=this.getNextRetryDelay(n++,0,r)))return this.logger.log(D.LogLevel.Debug,"Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt."),this.completeClose(s),[2];if(this.connectionState=c.Reconnecting,s?this.logger.log(D.LogLevel.Information,"Connection reconnecting because of error '"+s+"'."):this.logger.log(D.LogLevel.Information,"Connection reconnecting."),this.onreconnecting){try{this.reconnectingCallbacks.forEach(function(e){return e.apply(u,[s])})}catch(e){this.logger.log(D.LogLevel.Error,"An onreconnecting callback called with error '"+s+"' threw error '"+e+"'.")}if(this.connectionState!==c.Reconnecting)return this.logger.log(D.LogLevel.Debug,"Connection left the reconnecting state in onreconnecting callback. Done reconnecting."),[2]}e.label=1;case 1:return null===o?[3,7]:(this.logger.log(D.LogLevel.Information,"Reconnect attempt number "+n+" will start in "+o+" ms."),[4,new Promise(function(e){u.reconnectDelayHandle=setTimeout(e,o)})]);case 2:if(e.sent(),this.reconnectDelayHandle=void 0,this.connectionState!==c.Reconnecting)return this.logger.log(D.LogLevel.Debug,"Connection left the reconnecting state during reconnect delay. Done reconnecting."),[2];e.label=3;case 3:return e.trys.push([3,5,,6]),[4,this.startInternal()];case 4:if(e.sent(),this.connectionState=c.Connected,this.logger.log(D.LogLevel.Information,"HubConnection reconnected successfully."),this.onreconnected)try{this.reconnectedCallbacks.forEach(function(e){return e.apply(u,[u.connection.connectionId])})}catch(e){this.logger.log(D.LogLevel.Error,"An onreconnected callback called with connectionId '"+this.connection.connectionId+"; threw error '"+e+"'.")}return[2];case 5:return i=e.sent(),this.logger.log(D.LogLevel.Information,"Reconnect attempt failed because of error '"+i+"'."),this.connectionState!==c.Reconnecting?(this.logger.log(D.LogLevel.Debug,"Connection left the reconnecting state during reconnect attempt. Done reconnecting."),[2]):(r=i instanceof Error?i:new Error(i.toString()),o=this.getNextRetryDelay(n++,Date.now()-t,r),[3,6]);case 6:return[3,1];case 7:return this.logger.log(D.LogLevel.Information,"Reconnect retries have been exhausted after "+(Date.now()-t)+" ms and "+n+" failed attempts. Connection disconnecting."),this.completeClose(),[2]}})})},f.prototype.getNextRetryDelay=function(t,n,e){try{return this.reconnectPolicy.nextRetryDelayInMilliseconds({elapsedMilliseconds:n,previousRetryCount:t,retryReason:e})}catch(e){return this.logger.log(D.LogLevel.Error,"IRetryPolicy.nextRetryDelayInMilliseconds("+t+", "+n+") threw error '"+e+"'."),null}},f.prototype.cancelCallbacksWithError=function(t){var n=this.callbacks;this.callbacks={},Object.keys(n).forEach(function(e){(0,n[e])(null,t)})},f.prototype.cleanupPingTimer=function(){this.pingServerHandle&&clearTimeout(this.pingServerHandle)},f.prototype.cleanupTimeout=function(){this.timeoutHandle&&clearTimeout(this.timeoutHandle)},f.prototype.createInvocation=function(e,t,n,r){if(n)return{arguments:t,streamIds:r,target:e,type:l.MessageType.Invocation};var o=this.invocationId;return this.invocationId++,{arguments:t,invocationId:o.toString(),streamIds:r,target:e,type:l.MessageType.Invocation}},f.prototype.launchStreams=function(e,r){var o=this;if(0!==e.length){r=r||Promise.resolve();var t=function(n){e[n].subscribe({complete:function(){r=r.then(function(){return o.sendWithProtocol(o.createCompletionMessage(n))})},error:function(e){var t=e instanceof Error?e.message:e&&e.toString?e.toString():"Unknown error";r=r.then(function(){return o.sendWithProtocol(o.createCompletionMessage(n,t))})},next:function(e){r=r.then(function(){return o.sendWithProtocol(o.createStreamItemMessage(n,e))})}})};for(var n in e)t(n)}},f.prototype.replaceStreamingParams=function(e){for(var t=[],n=[],r=0;r<e.length;r++){var o,i=e[r];this.isObservable(i)&&(o=this.invocationId,this.invocationId++,t[o]=i,n.push(o.toString()),e.splice(r,1))}return[t,n]},f.prototype.isObservable=function(e){return e&&e.subscribe&&"function"==typeof e.subscribe},f.prototype.createStreamInvocation=function(e,t,n){var r=this.invocationId;return this.invocationId++,{arguments:t,invocationId:r.toString(),streamIds:n,target:e,type:l.MessageType.StreamInvocation}},f.prototype.createCancelInvocation=function(e){return{invocationId:e,type:l.MessageType.CancelInvocation}},f.prototype.createStreamItemMessage=function(e,t){return{invocationId:e,item:t,type:l.MessageType.StreamItem}},f.prototype.createCompletionMessage=function(e,t,n){return t?{error:t,invocationId:e,type:l.MessageType.Completion}:{invocationId:e,result:n,type:l.MessageType.Completion}},f);function f(e,t,n,r){var o=this;u.Arg.isRequired(e,"connection"),u.Arg.isRequired(t,"logger"),u.Arg.isRequired(n,"protocol"),this.serverTimeoutInMilliseconds=3e4,this.keepAliveIntervalInMilliseconds=15e3,this.logger=t,this.protocol=n,this.connection=e,this.reconnectPolicy=r,this.handshakeProtocol=new i.HandshakeProtocol,this.connection.onreceive=function(e){return o.processIncomingData(e)},this.connection.onclose=function(e){return o.connectionClosed(e)},this.callbacks={},this.methods={},this.closedCallbacks=[],this.reconnectingCallbacks=[],this.reconnectedCallbacks=[],this.invocationId=0,this.receivedHandshakeResponse=!1,this.connectionState=c.Disconnected,this.connectionStarted=!1,this.cachedPingMessage=this.protocol.writeMessage({type:l.MessageType.Ping})}n.HubConnection=s},{"./HandshakeProtocol":6,"./IHubProtocol":11,"./ILogger":12,"./Subject":19,"./Utils":21}],10:[function(e,t,n){"use strict";var r=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e};Object.defineProperty(n,"__esModule",{value:!0});var o=e("./DefaultReconnectPolicy"),i=e("./HttpConnection"),u=e("./HubConnection"),s=e("./ILogger"),a=e("./JsonHubProtocol"),c=e("./Loggers"),l=e("./Utils"),D={trace:s.LogLevel.Trace,debug:s.LogLevel.Debug,info:s.LogLevel.Information,information:s.LogLevel.Information,warn:s.LogLevel.Warning,warning:s.LogLevel.Warning,error:s.LogLevel.Error,critical:s.LogLevel.Critical,none:s.LogLevel.None};var p=(f.prototype.configureLogging=function(e){var t;return l.Arg.isRequired(e,"logging"),void 0!==e.log?this.logger=e:"string"==typeof e?(t=function(e){var t=D[e.toLowerCase()];if(void 0!==t)return t;throw new Error("Unknown log level: "+e)}(e),this.logger=new l.ConsoleLogger(t)):this.logger=new l.ConsoleLogger(e),this},f.prototype.withUrl=function(e,t){return l.Arg.isRequired(e,"url"),this.url=e,this.httpConnectionOptions=r({},this.httpConnectionOptions,"object"==typeof t?t:{transport:t}),this},f.prototype.withHubProtocol=function(e){return l.Arg.isRequired(e,"protocol"),this.protocol=e,this},f.prototype.withAutomaticReconnect=function(e){if(this.reconnectPolicy)throw new Error("A reconnectPolicy has already been set.");return e?Array.isArray(e)?this.reconnectPolicy=new o.DefaultReconnectPolicy(e):this.reconnectPolicy=e:this.reconnectPolicy=new o.DefaultReconnectPolicy,this},f.prototype.build=function(){var e=this.httpConnectionOptions||{};if(void 0===e.logger&&(e.logger=this.logger),!this.url)throw new Error("The 'HubConnectionBuilder.withUrl' method must be called before building the connection.");var t=new i.HttpConnection(this.url,e);return u.HubConnection.create(t,this.logger||c.NullLogger.instance,this.protocol||new a.JsonHubProtocol,this.reconnectPolicy)},f);function f(){}n.HubConnectionBuilder=p},{"./DefaultReconnectPolicy":4,"./HttpConnection":8,"./HubConnection":9,"./ILogger":12,"./JsonHubProtocol":14,"./Loggers":15,"./Utils":21}],11:[function(e,t,n){"use strict";var r;Object.defineProperty(n,"__esModule",{value:!0}),(r=n.MessageType||(n.MessageType={}))[r.Invocation=1]="Invocation",r[r.StreamItem=2]="StreamItem",r[r.Completion=3]="Completion",r[r.StreamInvocation=4]="StreamInvocation",r[r.CancelInvocation=5]="CancelInvocation",r[r.Ping=6]="Ping",r[r.Close=7]="Close"},{}],12:[function(e,t,n){"use strict";var r;Object.defineProperty(n,"__esModule",{value:!0}),(r=n.LogLevel||(n.LogLevel={}))[r.Trace=0]="Trace",r[r.Debug=1]="Debug",r[r.Information=2]="Information",r[r.Warning=3]="Warning",r[r.Error=4]="Error",r[r.Critical=5]="Critical",r[r.None=6]="None"},{}],13:[function(e,t,n){"use strict";var r,o;Object.defineProperty(n,"__esModule",{value:!0}),(r=n.HttpTransportType||(n.HttpTransportType={}))[r.None=0]="None",r[r.WebSockets=1]="WebSockets",r[r.ServerSentEvents=2]="ServerSentEvents",r[r.LongPolling=4]="LongPolling",(o=n.TransferFormat||(n.TransferFormat={}))[o.Text=1]="Text",o[o.Binary=2]="Binary"},{}],14:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var s=e("./IHubProtocol"),a=e("./ILogger"),r=e("./ITransport"),c=e("./Loggers"),l=e("./TextMessageFormat"),o=(i.prototype.parseMessages=function(e,t){if("string"!=typeof e)throw new Error("Invalid input for JSON hub protocol. Expected a string.");if(!e)return[];null===t&&(t=c.NullLogger.instance);for(var n=[],r=0,o=l.TextMessageFormat.parse(e);r<o.length;r++){var i=o[r],u=JSON.parse(i);if("number"!=typeof u.type)throw new Error("Invalid payload.");switch(u.type){case s.MessageType.Invocation:this.isInvocationMessage(u);break;case s.MessageType.StreamItem:this.isStreamItemMessage(u);break;case s.MessageType.Completion:this.isCompletionMessage(u);break;case s.MessageType.Ping:case s.MessageType.Close:break;default:t.log(a.LogLevel.Information,"Unknown message type '"+u.type+"' ignored.");continue}n.push(u)}return n},i.prototype.writeMessage=function(e){return l.TextMessageFormat.write(JSON.stringify(e))},i.prototype.isInvocationMessage=function(e){this.assertNotEmptyString(e.target,"Invalid payload for Invocation message."),void 0!==e.invocationId&&this.assertNotEmptyString(e.invocationId,"Invalid payload for Invocation message.")},i.prototype.isStreamItemMessage=function(e){if(this.assertNotEmptyString(e.invocationId,"Invalid payload for StreamItem message."),void 0===e.item)throw new Error("Invalid payload for StreamItem message.")},i.prototype.isCompletionMessage=function(e){if(e.result&&e.error)throw new Error("Invalid payload for Completion message.");!e.result&&e.error&&this.assertNotEmptyString(e.error,"Invalid payload for Completion message."),this.assertNotEmptyString(e.invocationId,"Invalid payload for Completion message.")},i.prototype.assertNotEmptyString=function(e,t){if("string"!=typeof e||""===e)throw new Error(t)},i);function i(){this.name="json",this.version=1,this.transferFormat=r.TransferFormat.Text}n.JsonHubProtocol=o},{"./IHubProtocol":11,"./ILogger":12,"./ITransport":13,"./Loggers":15,"./TextMessageFormat":20}],15:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=(o.prototype.log=function(e,t){},o.instance=new o,o);function o(){}n.NullLogger=r},{}],16:[function(e,t,n){"use strict";var r=this&&this.__awaiter||function(i,u,s,a){return new(s=s||Promise)(function(e,t){function n(e){try{o(a.next(e))}catch(e){t(e)}}function r(e){try{o(a.throw(e))}catch(e){t(e)}}function o(t){t.done?e(t.value):new s(function(e){e(t.value)}).then(n,r)}o((a=a.apply(i,u||[])).next())})},s=this&&this.__generator||function(n,r){var o,i,u,s={label:0,sent:function(){if(1&u[0])throw u[1];return u[1]},trys:[],ops:[]},e={next:t(0),throw:t(1),return:t(2)};return"function"==typeof Symbol&&(e[Symbol.iterator]=function(){return this}),e;function t(t){return function(e){return function(t){if(o)throw new TypeError("Generator is already executing.");for(;s;)try{if(o=1,i&&(u=2&t[0]?i.return:t[0]?i.throw||((u=i.return)&&u.call(i),0):i.next)&&!(u=u.call(i,t[1])).done)return u;switch(i=0,u&&(t=[2&t[0],u.value]),t[0]){case 0:case 1:u=t;break;case 4:return s.label++,{value:t[1],done:!1};case 5:s.label++,i=t[1],t=[0];continue;case 7:t=s.ops.pop(),s.trys.pop();continue;default:if(!(u=0<(u=s.trys).length&&u[u.length-1])&&(6===t[0]||2===t[0])){s=0;continue}if(3===t[0]&&(!u||t[1]>u[0]&&t[1]<u[3])){s.label=t[1];break}if(6===t[0]&&s.label<u[1]){s.label=u[1],u=t;break}if(u&&s.label<u[2]){s.label=u[2],s.ops.push(t);break}u[2]&&s.ops.pop(),s.trys.pop();continue}t=r.call(n,s)}catch(e){t=[6,e],i=0}finally{o=u=0}if(5&t[0])throw t[1];return{value:t[0]?t[1]:void 0,done:!0}}([t,e])}}};Object.defineProperty(n,"__esModule",{value:!0});var o=e("./AbortController"),a=e("./Errors"),c=e("./ILogger"),l=e("./ITransport"),D=e("./Utils"),i=(Object.defineProperty(u.prototype,"pollAborted",{get:function(){return this.pollAbort.aborted},enumerable:!0,configurable:!0}),u.prototype.connect=function(i,u){return r(this,void 0,void 0,function(){var t,n,r,o;return s(this,function(e){switch(e.label){case 0:if(D.Arg.isRequired(i,"url"),D.Arg.isRequired(u,"transferFormat"),D.Arg.isIn(u,l.TransferFormat,"transferFormat"),this.url=i,this.logger.log(c.LogLevel.Trace,"(LongPolling transport) Connecting."),u===l.TransferFormat.Binary&&"undefined"!=typeof XMLHttpRequest&&"string"!=typeof(new XMLHttpRequest).responseType)throw new Error("Binary protocols over XmlHttpRequest not implementing advanced features are not supported.");return t={abortSignal:this.pollAbort.signal,headers:{},timeout:1e5},u===l.TransferFormat.Binary&&(t.responseType="arraybuffer"),[4,this.getAccessToken()];case 1:return n=e.sent(),this.updateHeaderToken(t,n),r=i+"&_="+Date.now(),this.logger.log(c.LogLevel.Trace,"(LongPolling transport) polling: "+r+"."),[4,this.httpClient.get(r,t)];case 2:return 200!==(o=e.sent()).statusCode?(this.logger.log(c.LogLevel.Error,"(LongPolling transport) Unexpected response code: "+o.statusCode+"."),this.closeError=new a.HttpError(o.statusText||"",o.statusCode),this.running=!1):this.running=!0,this.receiving=this.poll(this.url,t),[2]}})})},u.prototype.getAccessToken=function(){return r(this,void 0,void 0,function(){return s(this,function(e){switch(e.label){case 0:return this.accessTokenFactory?[4,this.accessTokenFactory()]:[3,2];case 1:return[2,e.sent()];case 2:return[2,null]}})})},u.prototype.updateHeaderToken=function(e,t){e.headers||(e.headers={}),t?e.headers.Authorization="Bearer "+t:e.headers.Authorization&&delete e.headers.Authorization},u.prototype.poll=function(i,u){return r(this,void 0,void 0,function(){var t,n,r,o;return s(this,function(e){switch(e.label){case 0:e.trys.push([0,,8,9]),e.label=1;case 1:return this.running?[4,this.getAccessToken()]:[3,7];case 2:t=e.sent(),this.updateHeaderToken(u,t),e.label=3;case 3:return e.trys.push([3,5,,6]),n=i+"&_="+Date.now(),this.logger.log(c.LogLevel.Trace,"(LongPolling transport) polling: "+n+"."),[4,this.httpClient.get(n,u)];case 4:return 204===(r=e.sent()).statusCode?(this.logger.log(c.LogLevel.Information,"(LongPolling transport) Poll terminated by server."),this.running=!1):200!==r.statusCode?(this.logger.log(c.LogLevel.Error,"(LongPolling transport) Unexpected response code: "+r.statusCode+"."),this.closeError=new a.HttpError(r.statusText||"",r.statusCode),this.running=!1):r.content?(this.logger.log(c.LogLevel.Trace,"(LongPolling transport) data received. "+D.getDataDetail(r.content,this.logMessageContent)+"."),this.onreceive&&this.onreceive(r.content)):this.logger.log(c.LogLevel.Trace,"(LongPolling transport) Poll timed out, reissuing."),[3,6];case 5:return o=e.sent(),this.running?o instanceof a.TimeoutError?this.logger.log(c.LogLevel.Trace,"(LongPolling transport) Poll timed out, reissuing."):(this.closeError=o,this.running=!1):this.logger.log(c.LogLevel.Trace,"(LongPolling transport) Poll errored after shutdown: "+o.message),[3,6];case 6:return[3,1];case 7:return[3,9];case 8:return this.logger.log(c.LogLevel.Trace,"(LongPolling transport) Polling complete."),this.pollAborted||this.raiseOnClose(),[7];case 9:return[2]}})})},u.prototype.send=function(t){return r(this,void 0,void 0,function(){return s(this,function(e){return this.running?[2,D.sendMessage(this.logger,"LongPolling",this.httpClient,this.url,this.accessTokenFactory,t,this.logMessageContent)]:[2,Promise.reject(new Error("Cannot send until the transport is connected"))]})})},u.prototype.stop=function(){return r(this,void 0,void 0,function(){var t,n;return s(this,function(e){switch(e.label){case 0:this.logger.log(c.LogLevel.Trace,"(LongPolling transport) Stopping polling."),this.running=!1,this.pollAbort.abort(),e.label=1;case 1:return e.trys.push([1,,5,6]),[4,this.receiving];case 2:return e.sent(),this.logger.log(c.LogLevel.Trace,"(LongPolling transport) sending DELETE request to "+this.url+"."),t={headers:{}},[4,this.getAccessToken()];case 3:return n=e.sent(),this.updateHeaderToken(t,n),[4,this.httpClient.delete(this.url,t)];case 4:return e.sent(),this.logger.log(c.LogLevel.Trace,"(LongPolling transport) DELETE request sent."),[3,6];case 5:return this.logger.log(c.LogLevel.Trace,"(LongPolling transport) Stop finished."),this.raiseOnClose(),[7];case 6:return[2]}})})},u.prototype.raiseOnClose=function(){var e;this.onclose&&(e="(LongPolling transport) Firing onclose event.",this.closeError&&(e+=" Error: "+this.closeError),this.logger.log(c.LogLevel.Trace,e),this.onclose(this.closeError))},u);function u(e,t,n,r){this.httpClient=e,this.accessTokenFactory=t,this.logger=n,this.pollAbort=new o.AbortController,this.logMessageContent=r,this.running=!1,this.onreceive=null,this.onclose=null}n.LongPollingTransport=i},{"./AbortController":2,"./Errors":5,"./ILogger":12,"./ITransport":13,"./Utils":21}],17:[function(p,e,f){(function(n){"use strict";var r,e=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),s=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e};Object.defineProperty(f,"__esModule",{value:!0});var o,a=p("./Errors"),c=p("./HttpClient"),l=p("./ILogger"),D=p("./Utils");"undefined"==typeof XMLHttpRequest&&(o=("function"==typeof __webpack_require__?__non_webpack_require__:p)("request"));var i,t=(i=c.HttpClient,e(u,i),u.prototype.send=function(i){var u=this;return new Promise(function(r,o){var e=D.isArrayBuffer(i.content)?n.from(i.content):i.content||"",t=u.request(i.url,{body:e,encoding:"arraybuffer"===i.responseType?null:"utf8",headers:s({"X-Requested-With":"XMLHttpRequest"},i.headers),method:i.method,timeout:i.timeout},function(e,t,n){if(i.abortSignal&&(i.abortSignal.onabort=null),e)return"ETIMEDOUT"===e.code&&(u.logger.log(l.LogLevel.Warning,"Timeout from HTTP request."),o(new a.TimeoutError)),u.logger.log(l.LogLevel.Warning,"Error from HTTP request. "+e),void o(e);200<=t.statusCode&&t.statusCode<300?r(new c.HttpResponse(t.statusCode,t.statusMessage||"",n)):o(new a.HttpError(t.statusMessage||"",t.statusCode||0))});i.abortSignal&&(i.abortSignal.onabort=function(){t.abort(),o(new a.AbortError)})})},u.prototype.getCookieString=function(e){return this.cookieJar.getCookieString(e)},u);function u(e){var t=i.call(this)||this;if(void 0===o)throw new Error("The 'request' module could not be loaded.");return t.logger=e,t.cookieJar=o.jar(),t.request=o.defaults({jar:t.cookieJar}),t}f.NodeHttpClient=t}).call(this,p("buffer").Buffer)},{"./Errors":5,"./HttpClient":7,"./ILogger":12,"./Utils":21,buffer:27}],18:[function(e,t,n){"use strict";var r=this&&this.__awaiter||function(i,u,s,a){return new(s=s||Promise)(function(e,t){function n(e){try{o(a.next(e))}catch(e){t(e)}}function r(e){try{o(a.throw(e))}catch(e){t(e)}}function o(t){t.done?e(t.value):new s(function(e){e(t.value)}).then(n,r)}o((a=a.apply(i,u||[])).next())})},o=this&&this.__generator||function(n,r){var o,i,u,s={label:0,sent:function(){if(1&u[0])throw u[1];return u[1]},trys:[],ops:[]},e={next:t(0),throw:t(1),return:t(2)};return"function"==typeof Symbol&&(e[Symbol.iterator]=function(){return this}),e;function t(t){return function(e){return function(t){if(o)throw new TypeError("Generator is already executing.");for(;s;)try{if(o=1,i&&(u=2&t[0]?i.return:t[0]?i.throw||((u=i.return)&&u.call(i),0):i.next)&&!(u=u.call(i,t[1])).done)return u;switch(i=0,u&&(t=[2&t[0],u.value]),t[0]){case 0:case 1:u=t;break;case 4:return s.label++,{value:t[1],done:!1};case 5:s.label++,i=t[1],t=[0];continue;case 7:t=s.ops.pop(),s.trys.pop();continue;default:if(!(u=0<(u=s.trys).length&&u[u.length-1])&&(6===t[0]||2===t[0])){s=0;continue}if(3===t[0]&&(!u||t[1]>u[0]&&t[1]<u[3])){s.label=t[1];break}if(6===t[0]&&s.label<u[1]){s.label=u[1],u=t;break}if(u&&s.label<u[2]){s.label=u[2],s.ops.push(t);break}u[2]&&s.ops.pop(),s.trys.pop();continue}t=r.call(n,s)}catch(e){t=[6,e],i=0}finally{o=u=0}if(5&t[0])throw t[1];return{value:t[0]?t[1]:void 0,done:!0}}([t,e])}}};Object.defineProperty(n,"__esModule",{value:!0});var a=e("./ILogger"),c=e("./ITransport"),l=e("./Utils"),i=(u.prototype.connect=function(u,s){return r(this,void 0,void 0,function(){var t,i=this;return o(this,function(e){switch(e.label){case 0:return l.Arg.isRequired(u,"url"),l.Arg.isRequired(s,"transferFormat"),l.Arg.isIn(s,c.TransferFormat,"transferFormat"),this.logger.log(a.LogLevel.Trace,"(SSE transport) Connecting."),this.url=u,this.accessTokenFactory?[4,this.accessTokenFactory()]:[3,2];case 1:(t=e.sent())&&(u+=(u.indexOf("?")<0?"?":"&")+"access_token="+encodeURIComponent(t)),e.label=2;case 2:return[2,new Promise(function(e,n){var t,r,o=!1;if(s===c.TransferFormat.Text){r=l.Platform.isBrowser||l.Platform.isWebWorker?new i.eventSourceConstructor(u,{withCredentials:!0}):(t=i.httpClient.getCookieString(u),new i.eventSourceConstructor(u,{withCredentials:!0,headers:{Cookie:t}}));try{r.onmessage=function(e){if(i.onreceive)try{i.logger.log(a.LogLevel.Trace,"(SSE transport) data received. "+l.getDataDetail(e.data,i.logMessageContent)+"."),i.onreceive(e.data)}catch(e){return void i.close(e)}},r.onerror=function(e){var t=new Error(e.data||"Error occurred");o?i.close(t):n(t)},r.onopen=function(){i.logger.log(a.LogLevel.Information,"SSE connected to "+i.url),i.eventSource=r,o=!0,e()}}catch(e){return void n(e)}}else n(new Error("The Server-Sent Events transport only supports the 'Text' transfer format"))})]}})})},u.prototype.send=function(t){return r(this,void 0,void 0,function(){return o(this,function(e){return this.eventSource?[2,l.sendMessage(this.logger,"SSE",this.httpClient,this.url,this.accessTokenFactory,t,this.logMessageContent)]:[2,Promise.reject(new Error("Cannot send until the transport is connected"))]})})},u.prototype.stop=function(){return this.close(),Promise.resolve()},u.prototype.close=function(e){this.eventSource&&(this.eventSource.close(),this.eventSource=void 0,this.onclose&&this.onclose(e))},u);function u(e,t,n,r,o){this.httpClient=e,this.accessTokenFactory=t,this.logger=n,this.logMessageContent=r,this.eventSourceConstructor=o,this.onreceive=null,this.onclose=null}n.ServerSentEventsTransport=i},{"./ILogger":12,"./ITransport":13,"./Utils":21}],19:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e("./Utils"),o=(i.prototype.next=function(e){for(var t=0,n=this.observers;t<n.length;t++)n[t].next(e)},i.prototype.error=function(e){for(var t=0,n=this.observers;t<n.length;t++){var r=n[t];r.error&&r.error(e)}},i.prototype.complete=function(){for(var e=0,t=this.observers;e<t.length;e++){var n=t[e];n.complete&&n.complete()}},i.prototype.subscribe=function(e){return this.observers.push(e),new r.SubjectSubscription(this,e)},i);function i(){this.observers=[]}n.Subject=o},{"./Utils":21}],20:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=(o.write=function(e){return""+e+o.RecordSeparator},o.parse=function(e){if(e[e.length-1]!==o.RecordSeparator)throw new Error("Message is incomplete.");var t=e.split(o.RecordSeparator);return t.pop(),t},o.RecordSeparatorCode=30,o.RecordSeparator=String.fromCharCode(o.RecordSeparatorCode),o);function o(){}n.TextMessageFormat=r},{}],21:[function(e,t,n){"use strict";var r=this&&this.__awaiter||function(i,u,s,a){return new(s=s||Promise)(function(e,t){function n(e){try{o(a.next(e))}catch(e){t(e)}}function r(e){try{o(a.throw(e))}catch(e){t(e)}}function o(t){t.done?e(t.value):new s(function(e){e(t.value)}).then(n,r)}o((a=a.apply(i,u||[])).next())})},f=this&&this.__generator||function(n,r){var o,i,u,s={label:0,sent:function(){if(1&u[0])throw u[1];return u[1]},trys:[],ops:[]},e={next:t(0),throw:t(1),return:t(2)};return"function"==typeof Symbol&&(e[Symbol.iterator]=function(){return this}),e;function t(t){return function(e){return function(t){if(o)throw new TypeError("Generator is already executing.");for(;s;)try{if(o=1,i&&(u=2&t[0]?i.return:t[0]?i.throw||((u=i.return)&&u.call(i),0):i.next)&&!(u=u.call(i,t[1])).done)return u;switch(i=0,u&&(t=[2&t[0],u.value]),t[0]){case 0:case 1:u=t;break;case 4:return s.label++,{value:t[1],done:!1};case 5:s.label++,i=t[1],t=[0];continue;case 7:t=s.ops.pop(),s.trys.pop();continue;default:if(!(u=0<(u=s.trys).length&&u[u.length-1])&&(6===t[0]||2===t[0])){s=0;continue}if(3===t[0]&&(!u||t[1]>u[0]&&t[1]<u[3])){s.label=t[1];break}if(6===t[0]&&s.label<u[1]){s.label=u[1],u=t;break}if(u&&s.label<u[2]){s.label=u[2],s.ops.push(t);break}u[2]&&s.ops.pop(),s.trys.pop();continue}t=r.call(n,s)}catch(e){t=[6,e],i=0}finally{o=u=0}if(5&t[0])throw t[1];return{value:t[0]?t[1]:void 0,done:!0}}([t,e])}}};Object.defineProperty(n,"__esModule",{value:!0});var h=e("./ILogger"),o=e("./Loggers"),i=(u.isRequired=function(e,t){if(null==e)throw new Error("The '"+t+"' argument is required.")},u.isIn=function(e,t,n){if(!(e in t))throw new Error("Unknown "+n+" value: "+e+".")},u);function u(){}n.Arg=i;var s=(Object.defineProperty(a,"isBrowser",{get:function(){return"object"==typeof window},enumerable:!0,configurable:!0}),Object.defineProperty(a,"isWebWorker",{get:function(){return"object"==typeof self&&"importScripts"in self},enumerable:!0,configurable:!0}),Object.defineProperty(a,"isNode",{get:function(){return!this.isBrowser&&!this.isWebWorker},enumerable:!0,configurable:!0}),a);function a(){}function d(e,t){var n="";return g(e)?(n="Binary data of length "+e.byteLength,t&&(n+=". Content: '"+c(e)+"'")):"string"==typeof e&&(n="String data of length "+e.length,t&&(n+=". Content: '"+e+"'")),n}function c(e){var t=new Uint8Array(e),n="";return t.forEach(function(e){n+="0x"+(e<16?"0":"")+e.toString(16)+" "}),n.substr(0,n.length-1)}function g(e){return e&&"undefined"!=typeof ArrayBuffer&&(e instanceof ArrayBuffer||e.constructor&&"ArrayBuffer"===e.constructor.name)}n.Platform=s,n.getDataDetail=d,n.formatArrayBuffer=c,n.isArrayBuffer=g,n.sendMessage=function(u,s,a,c,l,D,p){return r(this,void 0,void 0,function(){var t,n,r,o,i;return f(this,function(e){switch(e.label){case 0:return l?[4,l()]:[3,2];case 1:(r=e.sent())&&((t={}).Authorization="Bearer "+r,n=t),e.label=2;case 2:return u.log(h.LogLevel.Trace,"("+s+" transport) sending data. "+d(D,p)+"."),o=g(D)?"arraybuffer":"text",[4,a.post(c,{content:D,headers:n,responseType:o})];case 3:return i=e.sent(),u.log(h.LogLevel.Trace,"("+s+" transport) request complete. Response status: "+i.statusCode+"."),[2]}})})},n.createLogger=function(e){return void 0===e?new p(h.LogLevel.Information):null===e?o.NullLogger.instance:e.log?e:new p(e)};var l=(D.prototype.dispose=function(){var e=this.subject.observers.indexOf(this.observer);-1<e&&this.subject.observers.splice(e,1),0===this.subject.observers.length&&this.subject.cancelCallback&&this.subject.cancelCallback().catch(function(e){})},D);function D(e,t){this.subject=e,this.observer=t}n.SubjectSubscription=l;var p=(v.prototype.log=function(e,t){if(e>=this.minimumLogLevel)switch(e){case h.LogLevel.Critical:case h.LogLevel.Error:this.outputConsole.error("["+(new Date).toISOString()+"] "+h.LogLevel[e]+": "+t);break;case h.LogLevel.Warning:this.outputConsole.warn("["+(new Date).toISOString()+"] "+h.LogLevel[e]+": "+t);break;case h.LogLevel.Information:this.outputConsole.info("["+(new Date).toISOString()+"] "+h.LogLevel[e]+": "+t);break;default:this.outputConsole.log("["+(new Date).toISOString()+"] "+h.LogLevel[e]+": "+t)}},v);function v(e){this.minimumLogLevel=e,this.outputConsole=console}n.ConsoleLogger=p},{"./ILogger":12,"./Loggers":15}],22:[function(e,t,n){"use strict";var r=this&&this.__awaiter||function(i,u,s,a){return new(s=s||Promise)(function(e,t){function n(e){try{o(a.next(e))}catch(e){t(e)}}function r(e){try{o(a.throw(e))}catch(e){t(e)}}function o(t){t.done?e(t.value):new s(function(e){e(t.value)}).then(n,r)}o((a=a.apply(i,u||[])).next())})},o=this&&this.__generator||function(n,r){var o,i,u,s={label:0,sent:function(){if(1&u[0])throw u[1];return u[1]},trys:[],ops:[]},e={next:t(0),throw:t(1),return:t(2)};return"function"==typeof Symbol&&(e[Symbol.iterator]=function(){return this}),e;function t(t){return function(e){return function(t){if(o)throw new TypeError("Generator is already executing.");for(;s;)try{if(o=1,i&&(u=2&t[0]?i.return:t[0]?i.throw||((u=i.return)&&u.call(i),0):i.next)&&!(u=u.call(i,t[1])).done)return u;switch(i=0,u&&(t=[2&t[0],u.value]),t[0]){case 0:case 1:u=t;break;case 4:return s.label++,{value:t[1],done:!1};case 5:s.label++,i=t[1],t=[0];continue;case 7:t=s.ops.pop(),s.trys.pop();continue;default:if(!(u=0<(u=s.trys).length&&u[u.length-1])&&(6===t[0]||2===t[0])){s=0;continue}if(3===t[0]&&(!u||t[1]>u[0]&&t[1]<u[3])){s.label=t[1];break}if(6===t[0]&&s.label<u[1]){s.label=u[1],u=t;break}if(u&&s.label<u[2]){s.label=u[2],s.ops.push(t);break}u[2]&&s.ops.pop(),s.trys.pop();continue}t=r.call(n,s)}catch(e){t=[6,e],i=0}finally{o=u=0}if(5&t[0])throw t[1];return{value:t[0]?t[1]:void 0,done:!0}}([t,e])}}};Object.defineProperty(n,"__esModule",{value:!0});var a=e("./ILogger"),c=e("./ITransport"),l=e("./Utils"),i=(u.prototype.connect=function(u,s){return r(this,void 0,void 0,function(){var t,i=this;return o(this,function(e){switch(e.label){case 0:return l.Arg.isRequired(u,"url"),l.Arg.isRequired(s,"transferFormat"),l.Arg.isIn(s,c.TransferFormat,"transferFormat"),this.logger.log(a.LogLevel.Trace,"(WebSockets transport) Connecting."),this.accessTokenFactory?[4,this.accessTokenFactory()]:[3,2];case 1:(t=e.sent())&&(u+=(u.indexOf("?")<0?"?":"&")+"access_token="+encodeURIComponent(t)),e.label=2;case 2:return[2,new Promise(function(t,n){var r;u=u.replace(/^http/,"ws");var e=i.httpClient.getCookieString(u),o=!1;l.Platform.isNode&&e&&(r=new i.webSocketConstructor(u,void 0,{headers:{Cookie:""+e}})),r=r||new i.webSocketConstructor(u),s===c.TransferFormat.Binary&&(r.binaryType="arraybuffer"),r.onopen=function(e){i.logger.log(a.LogLevel.Information,"WebSocket connected to "+u+"."),i.webSocket=r,o=!0,t()},r.onerror=function(e){var t=null,t="undefined"!=typeof ErrorEvent&&e instanceof ErrorEvent?e.error:new Error("There was an error with the transport.");n(t)},r.onmessage=function(e){i.logger.log(a.LogLevel.Trace,"(WebSockets transport) data received. "+l.getDataDetail(e.data,i.logMessageContent)+"."),i.onreceive&&i.onreceive(e.data)},r.onclose=function(e){var t;o?i.close(e):(t=null,t="undefined"!=typeof ErrorEvent&&e instanceof ErrorEvent?e.error:new Error("There was an error with the transport."),n(t))}})]}})})},u.prototype.send=function(e){return this.webSocket&&this.webSocket.readyState===this.webSocketConstructor.OPEN?(this.logger.log(a.LogLevel.Trace,"(WebSockets transport) sending data. "+l.getDataDetail(e,this.logMessageContent)+"."),this.webSocket.send(e),Promise.resolve()):Promise.reject("WebSocket is not in the OPEN state")},u.prototype.stop=function(){return this.webSocket&&(this.webSocket.onclose=function(){},this.webSocket.onmessage=function(){},this.webSocket.onerror=function(){},this.webSocket.close(),this.webSocket=void 0,this.close(void 0)),Promise.resolve()},u.prototype.close=function(e){this.logger.log(a.LogLevel.Trace,"(WebSockets transport) socket closed."),this.onclose&&(!e||!1!==e.wasClean&&1e3===e.code?this.onclose():this.onclose(new Error("WebSocket closed with status code: "+e.code+" ("+e.reason+").")))},u);function u(e,t,n,r,o){this.logger=n,this.accessTokenFactory=t,this.logMessageContent=r,this.webSocketConstructor=o,this.httpClient=e,this.onreceive=null,this.onclose=null}n.WebSocketTransport=i},{"./ILogger":12,"./ITransport":13,"./Utils":21}],23:[function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(n,"__esModule",{value:!0});var i,u=e("./Errors"),s=e("./HttpClient"),a=e("./ILogger"),c=(i=s.HttpClient,o(l,i),l.prototype.send=function(o){var i=this;return o.abortSignal&&o.abortSignal.aborted?Promise.reject(new u.AbortError):o.method?o.url?new Promise(function(e,t){var n=new XMLHttpRequest;n.open(o.method,o.url,!0),n.withCredentials=!0,n.setRequestHeader("X-Requested-With","XMLHttpRequest"),n.setRequestHeader("Content-Type","text/plain;charset=UTF-8");var r=o.headers;r&&Object.keys(r).forEach(function(e){n.setRequestHeader(e,r[e])}),o.responseType&&(n.responseType=o.responseType),o.abortSignal&&(o.abortSignal.onabort=function(){n.abort(),t(new u.AbortError)}),o.timeout&&(n.timeout=o.timeout),n.onload=function(){o.abortSignal&&(o.abortSignal.onabort=null),200<=n.status&&n.status<300?e(new s.HttpResponse(n.status,n.statusText,n.response||n.responseText)):t(new u.HttpError(n.statusText,n.status))},n.onerror=function(){i.logger.log(a.LogLevel.Warning,"Error from HTTP request. "+n.status+": "+n.statusText+"."),t(new u.HttpError(n.statusText,n.status))},n.ontimeout=function(){i.logger.log(a.LogLevel.Warning,"Timeout from HTTP request."),t(new u.TimeoutError)},n.send(o.content||"")}):Promise.reject(new Error("No url defined.")):Promise.reject(new Error("No method defined."))},l);function l(e){var t=i.call(this)||this;return t.logger=e,t}n.XhrHttpClient=c},{"./Errors":5,"./HttpClient":7,"./ILogger":12}],24:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.VERSION="3.1.3";var r=e("./Errors");n.AbortError=r.AbortError,n.HttpError=r.HttpError,n.TimeoutError=r.TimeoutError;var o=e("./HttpClient");n.HttpClient=o.HttpClient,n.HttpResponse=o.HttpResponse;var i=e("./DefaultHttpClient");n.DefaultHttpClient=i.DefaultHttpClient;var u=e("./HubConnection");n.HubConnection=u.HubConnection,n.HubConnectionState=u.HubConnectionState;var s=e("./HubConnectionBuilder");n.HubConnectionBuilder=s.HubConnectionBuilder;var a=e("./IHubProtocol");n.MessageType=a.MessageType;var c=e("./ILogger");n.LogLevel=c.LogLevel;var l=e("./ITransport");n.HttpTransportType=l.HttpTransportType,n.TransferFormat=l.TransferFormat;var D=e("./Loggers");n.NullLogger=D.NullLogger;var p=e("./JsonHubProtocol");n.JsonHubProtocol=p.JsonHubProtocol;var f=e("./Subject");n.Subject=f.Subject},{"./DefaultHttpClient":3,"./Errors":5,"./HttpClient":7,"./HubConnection":9,"./HubConnectionBuilder":10,"./IHubProtocol":11,"./ILogger":12,"./ITransport":13,"./JsonHubProtocol":14,"./Loggers":15,"./Subject":19}],25:[function(e,t,a){(function(F){"use strict";function T(e){var t=e.getBoundingClientRect();return{width:t.width,height:t.height,top:t.top,right:t.right,bottom:t.bottom,left:t.left,x:t.left,y:t.top}}function w(e){if("[object Window]"===e.toString())return e;var t=e.ownerDocument;return t?t.defaultView:window}function l(e){var t=w(e);return{scrollLeft:t.pageXOffset,scrollTop:t.pageYOffset}}function A(e){return e instanceof w(e).Element||e instanceof Element}function D(e){return e instanceof w(e).HTMLElement||e instanceof HTMLElement}function c(e){return e?(e.nodeName||"").toLowerCase():null}function S(e){return(A(e)?e.ownerDocument:e.document).documentElement}function p(e){return T(S(e)).left+l(e).scrollLeft}function E(e){return w(e).getComputedStyle(e)}function f(e){var t=E(e),n=t.overflow,r=t.overflowX,o=t.overflowY;return/auto|scroll|overlay|hidden/.test(n+o+r)}function b(e,t,n){void 0===n&&(n=!1);var r,o,i=S(t),u=T(e),s={scrollLeft:0,scrollTop:0},a={x:0,y:0};return n||("body"===c(t)&&!f(i)||(s=(r=t)!==w(r)&&D(r)?{scrollLeft:(o=r).scrollLeft,scrollTop:o.scrollTop}:l(r)),D(t)?((a=T(t)).x+=t.clientLeft,a.y+=t.clientTop):i&&(a.x=p(i))),{x:u.left+s.scrollLeft-a.x,y:u.top+s.scrollTop-a.y,width:u.width,height:u.height}}function ee(e){return{x:e.offsetLeft,y:e.offsetTop,width:e.offsetWidth,height:e.offsetHeight}}function s(e){return"html"===c(e)?e:e.assignedSlot||e.parentNode||e.host||S(e)}function C(e,t){void 0===t&&(t=[]);var n=function e(t){return 0<=["html","body","#document"].indexOf(c(t))?t.ownerDocument.body:D(t)&&f(t)?t:e(s(t))}(e),r="body"===c(n),o=w(n),i=r?[o].concat(o.visualViewport||[],f(n)?n:[]):n,u=t.concat(i);return r?u:u.concat(C(s(i)))}function r(e){return D(e)&&"fixed"!==E(e).position?e.offsetParent:null}function te(e){for(var t=w(e),n=r(e);n&&0<=["table","td","th"].indexOf(c(n));)n=r(n);return(!n||"body"!==c(n)||"static"!==E(n).position)&&n||t}Object.defineProperty(a,"__esModule",{value:!0});var ne="top",re="bottom",oe="right",ie="left",_="auto",H=[ne,re,oe,ie],ue="start",h="end",k="clippingParents",P="viewport",I="popper",O="reference",R=H.reduce(function(e,t){return e.concat([t+"-"+ue,t+"-"+h])},[]),N=[].concat(H,[_]).reduce(function(e,t){return e.concat([t,t+"-"+ue,t+"-"+h])},[]),B=["beforeRead","read","afterRead","beforeMain","main","afterMain","beforeWrite","write","afterWrite"];function L(e){var r=new Map,o=new Set,t=[];return e.forEach(function(e){r.set(e.name,e)}),e.forEach(function(e){o.has(e.name)||!function n(e){o.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach(function(e){var t;o.has(e)||(t=r.get(e))&&n(t)}),t.push(e)}(e)}),t}function x(e){for(var t=arguments.length,n=new Array(1<t?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return[].concat(n).reduce(function(e,t){return e.replace(/%s/,t)},e)}var M='Popper: modifier "%s" provided an invalid %s property, expected %s but got %s',j='Popper: modifier "%s" requires "%s", but "%s" modifier is not available',U=["name","enabled","phase","fn","effect","requires","options"];function se(e){return e.split("-")[0]}var W="Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.",o={placement:"bottom",modifiers:[],strategy:"absolute"};function q(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return!t.some(function(e){return!(e&&"function"==typeof e.getBoundingClientRect)})}function e(e){void 0===e&&(e={});var t=e.defaultModifiers,m=void 0===t?[]:t,n=e.defaultOptions,y=void 0===n?o:n;return function(p,f,t){void 0===t&&(t=y);var n,r,h={placement:"bottom",orderedModifiers:[],options:Object.assign({},o,{},y),modifiersData:{},elements:{reference:p,popper:f},attributes:{},styles:{}},d=[],l=!1,g={state:h,setOptions:function(e){v(),h.options=Object.assign({},y,{},h.options,{},e),h.scrollParents={reference:A(p)?C(p):p.contextElement?C(p.contextElement):[],popper:C(f)};var t,n,r,o,i,u,s,a,c,l,D=(r=[].concat(m,h.options.modifiers),o=r.reduce(function(e,t){var n=e[t.name];return e[t.name]=n?Object.assign({},n,{},t,{options:Object.assign({},n.options,{},t.options),data:Object.assign({},n.data,{},t.data)}):t,e},{}),t=Object.keys(o).map(function(e){return o[e]}),n=L(t),B.reduce(function(e,t){return e.concat(n.filter(function(e){return e.phase===t}))},[]));return h.orderedModifiers=D.filter(function(e){return e.enabled}),"production"!==F.env.NODE_ENV&&(a=[].concat(D,h.options.modifiers),c=function(e){return e.name},l=new Set,i=a.filter(function(e){var t=c(e);if(!l.has(t))return l.add(t),!0}),(s=i).forEach(function(n){Object.keys(n).forEach(function(e){switch(e){case"name":"string"!=typeof n.name&&console.error(x(M,String(n.name),'"name"','"string"','"'+String(n.name)+'"'));break;case"enabled":"boolean"!=typeof n.enabled&&console.error(x(M,n.name,'"enabled"','"boolean"','"'+String(n.enabled)+'"'));case"phase":B.indexOf(n.phase)<0&&console.error(x(M,n.name,'"phase"',"either "+B.join(", "),'"'+String(n.phase)+'"'));break;case"fn":"function"!=typeof n.fn&&console.error(x(M,n.name,'"fn"','"function"','"'+String(n.fn)+'"'));break;case"effect":"function"!=typeof n.effect&&console.error(x(M,n.name,'"effect"','"function"','"'+String(n.fn)+'"'));break;case"requires":Array.isArray(n.requires)||console.error(x(M,n.name,'"requires"','"array"','"'+String(n.requires)+'"'));break;case"requiresIfExists":Array.isArray(n.requiresIfExists)||console.error(x(M,n.name,'"requiresIfExists"','"array"','"'+String(n.requiresIfExists)+'"'));break;case"options":case"data":break;default:console.error('PopperJS: an invalid property has been provided to the "'+n.name+'" modifier, valid properties are '+U.map(function(e){return'"'+e+'"'}).join(", ")+'; but "'+e+'" was provided.')}n.requires&&n.requires.forEach(function(t){null==s.find(function(e){return e.name===t})&&console.error(x(j,String(n.name),t,t))})})}),se(h.options.placement)===_&&(h.orderedModifiers.find(function(e){return"flip"===e.name})||console.error(['Popper: "auto" placements require the "flip" modifier be',"present and enabled to work."].join(" "))),[(u=E(f)).marginTop,u.marginRight,u.marginBottom,u.marginLeft].some(function(e){return parseFloat(e)})&&console.warn(['Popper: CSS "margin" styles cannot be used to apply padding',"between the popper and its reference element or boundary.","To replicate margin, use the `offset` modifier, as well as","the `padding` option in the `preventOverflow` and `flip`","modifiers."].join(" "))),h.orderedModifiers.forEach(function(e){var t,n=e.name,r=e.options,o=void 0===r?{}:r,i=e.effect;"function"==typeof i&&(t=i({state:h,name:n,instance:g,options:o}),d.push(t||function(){}))}),g.update()},forceUpdate:function(){if(!l){var e=h.elements,t=e.reference,n=e.popper;if(q(t,n)){h.rects={reference:b(t,te(n),"fixed"===h.options.strategy),popper:ee(n)},h.reset=!1,h.placement=h.options.placement,h.orderedModifiers.forEach(function(e){return h.modifiersData[e.name]=Object.assign({},e.data)});for(var r,o,i,u,s,a=0,c=0;c<h.orderedModifiers.length;c++){if("production"!==F.env.NODE_ENV&&100<(a+=1)){console.error("Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.");break}!0!==h.reset?(o=(r=h.orderedModifiers[c]).fn,u=void 0===(i=r.options)?{}:i,s=r.name,"function"==typeof o&&(h=o({state:h,options:u,name:s,instance:g})||h)):(h.reset=!1,c=-1)}}else"production"!==F.env.NODE_ENV&&console.error(W)}},update:(n=function(){return new Promise(function(e){g.forceUpdate(),e(h)})},function(){return r=r||new Promise(function(e){Promise.resolve().then(function(){r=void 0,e(n())})})}),destroy:function(){v(),l=!0}};if(!q(p,f))return"production"!==F.env.NODE_ENV&&console.error(W),g;function v(){d.forEach(function(e){return e()}),d=[]}return g.setOptions(t).then(function(e){!l&&t.onFirstUpdate&&t.onFirstUpdate(e)}),g}}var d={passive:!0};function ae(e){return e.split("-")[1]}function ce(e){return 0<=["top","bottom"].indexOf(e)?"x":"y"}function V(e){var t,n=e.reference,r=e.element,o=e.placement,i=o?se(o):null,u=o?ae(o):null,s=n.x+n.width/2-r.width/2,a=n.y+n.height/2-r.height/2;switch(i){case ne:t={x:s,y:n.y-r.height};break;case re:t={x:s,y:n.y+n.height};break;case oe:t={x:n.x+n.width,y:a};break;case ie:t={x:n.x-r.width,y:a};break;default:t={x:n.x,y:n.y}}var c=i?ce(i):null;if(null!=c){var l="y"===c?"height":"width";switch(u){case ue:t[c]=Math.floor(t[c])-Math.floor(n[l]/2-r[l]/2);break;case h:t[c]=Math.floor(t[c])+Math.ceil(n[l]/2-r[l]/2)}}return t}var z={top:"auto",right:"auto",bottom:"auto",left:"auto"};function g(e){var t,n,r,o,i,u,s=e.popper,a=e.popperRect,c=e.placement,l=e.offsets,D=e.position,p=e.gpuAcceleration,f=e.adaptive,h=(r=(n=l).x,o=n.y,i=window.devicePixelRatio||1,{x:Math.round(r*i)/i||0,y:Math.round(o*i)/i||0}),d=h.x,g=h.y,v=l.hasOwnProperty("x"),m=l.hasOwnProperty("y"),y=ie,F=ne,E=window;f&&((u=te(s))===w(s)&&(u=S(s)),c===ne&&(F=re,g-=u.clientHeight-a.height,g*=p?1:-1),c===ie&&(y=oe,d-=u.clientWidth-a.width,d*=p?1:-1));var b,C=Object.assign({position:D},f&&z);return p?Object.assign({},C,((b={})[F]=m?"0":"",b[y]=v?"0":"",b.transform=(E.devicePixelRatio||1)<2?"translate("+d+"px, "+g+"px)":"translate3d("+d+"px, "+g+"px, 0)",b)):Object.assign({},C,((t={})[F]=m?g+"px":"",t[y]=v?d+"px":"",t.transform="",t))}var t={left:"right",right:"left",bottom:"top",top:"bottom"};function X(e){return e.replace(/left|right|bottom|top/g,function(e){return t[e]})}var n={start:"end",end:"start"};function J(e){return e.replace(/start|end/g,function(e){return n[e]})}function v(e){return parseFloat(e)||0}function m(e){var t,n,r=w(e),o={top:v((n=D(t=e)?E(t):{}).borderTopWidth),right:v(n.borderRightWidth),bottom:v(n.borderBottomWidth),left:v(n.borderLeftWidth)},i="html"===c(e),u=p(e),s=e.clientWidth+o.right,a=e.clientHeight+o.bottom;return i&&50<r.innerHeight-e.clientHeight&&(a=r.innerHeight-o.bottom),{top:i?0:e.clientTop,right:e.clientLeft>o.left?o.right:i?r.innerWidth-s-u:e.offsetWidth-s,bottom:i?r.innerHeight-a:e.offsetHeight-a,left:i?u:e.clientLeft}}function y(e,t){var n=Boolean(t.getRootNode&&t.getRootNode().host);if(e.contains(t))return!0;if(n){var r=t;do{if(r&&e.isSameNode(r))return!0;r=r.parentNode||r.host}while(r)}return!1}function Y(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function G(e,t){return t===P?Y((u=w(e),s=u.visualViewport,a=u.innerWidth,c=u.innerHeight,s&&/iPhone|iPod|iPad/.test(navigator.platform)&&(a=s.width,c=s.height),{width:a,height:c,x:0,y:0})):D(t)?T(t):Y((n=S(e),r=w(n),o=l(n),(i=b(S(n),r)).height=Math.max(i.height,r.innerHeight),i.width=Math.max(i.width,r.innerWidth),i.x=-o.scrollLeft,i.y=-o.scrollTop,i));var n,r,o,i,u,s,a,c}function Q(o,e,t){var n,r,i,u="clippingParents"===e?(r=C(n=o),A(i=0<=["absolute","fixed"].indexOf(E(n).position)&&D(n)?te(n):n)?r.filter(function(e){return A(e)&&y(e,i)}):[]):[].concat(e),s=[].concat(u,[t]),a=s[0],c=s.reduce(function(e,t){var n=G(o,t),r=m(D(t)?t:S(o));return e.top=Math.max(n.top+r.top,e.top),e.right=Math.min(n.right-r.right,e.right),e.bottom=Math.min(n.bottom-r.bottom,e.bottom),e.left=Math.max(n.left+r.left,e.left),e},G(o,a));return c.width=c.right-c.left,c.height=c.bottom-c.top,c.x=c.left,c.y=c.top,c}function le(){return{top:0,right:0,bottom:0,left:0}}function $(e){return Object.assign({},le(),{},e)}function K(n,e){return e.reduce(function(e,t){return e[t]=n,e},{})}function De(e,t){void 0===t&&(t={});var r,n=t.placement,o=void 0===n?e.placement:n,i=t.boundary,u=void 0===i?k:i,s=t.rootBoundary,a=void 0===s?P:s,c=t.elementContext,l=void 0===c?I:c,D=t.altBoundary,p=void 0!==D&&D,f=t.padding,h=void 0===f?0:f,d=$("number"!=typeof h?h:K(h,H)),g=l===I?O:I,v=e.elements.reference,m=e.rects.popper,y=e.elements[p?g:l],F=Q(A(y)?y:y.contextElement||S(e.elements.popper),u,a),E=T(v),b=V({reference:E,element:m,strategy:"absolute",placement:o}),C=Y(Object.assign({},m,{},b)),w=l===I?C:E,B={top:F.top-w.top+d.top,bottom:w.bottom-F.bottom+d.bottom,left:F.left-w.left+d.left,right:w.right-F.right+d.right},L=e.modifiersData.offset;return l===I&&L&&(r=L[o],Object.keys(B).forEach(function(e){var t=0<=[oe,re].indexOf(e)?1:-1,n=0<=[ne,re].indexOf(e)?"y":"x";B[e]+=r[n]*t})),B}function pe(e,t,n){return Math.max(e,Math.min(t,n))}function Z(e,t,n){return void 0===n&&(n={x:0,y:0}),{top:e.top-t.height-n.y,right:e.right-t.width+n.x,bottom:e.bottom-t.height+n.y,left:e.left-t.width-n.x}}function fe(t){return[ne,oe,re,ie].some(function(e){return 0<=t[e]})}var i=[{name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var t=e.state,n=e.instance,r=e.options,o=r.scroll,i=void 0===o||o,u=r.resize,s=void 0===u||u,a=w(t.elements.popper),c=[].concat(t.scrollParents.reference,t.scrollParents.popper);return i&&c.forEach(function(e){e.addEventListener("scroll",n.update,d)}),s&&a.addEventListener("resize",n.update,d),function(){i&&c.forEach(function(e){e.removeEventListener("scroll",n.update,d)}),s&&a.removeEventListener("resize",n.update,d)}},data:{}},{name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,n=e.name;t.modifiersData[n]=V({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}},{name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t,n=e.state,r=e.options,o=r.gpuAcceleration,i=void 0===o||o,u=r.adaptive,s=void 0===u||u;"production"!==F.env.NODE_ENV&&(t=E(n.elements.popper).transitionProperty||"",s&&["transform","top","right","bottom","left"].some(function(e){return 0<=t.indexOf(e)})&&console.warn(["Popper: Detected CSS transitions on at least one of the following",'CSS properties: "transform", "top", "right", "bottom", "left".',"\n\n",'Disable the "computeStyles" modifier\'s `adaptive` option to allow',"for smooth transitions, or remove these properties from the CSS","transition declaration on the popper element if only transitioning","opacity or background-color for example.","\n\n","We recommend using the popper element as a wrapper around an inner","element that can have any CSS property transitioned for animations."].join(" ")));var a={placement:se(n.placement),popper:n.elements.popper,popperRect:n.rects.popper,gpuAcceleration:i};null!=n.modifiersData.popperOffsets&&(n.styles.popper=Object.assign({},n.styles.popper,{},g(Object.assign({},a,{offsets:n.modifiersData.popperOffsets,position:n.options.strategy,adaptive:s})))),null!=n.modifiersData.arrow&&(n.styles.arrow=Object.assign({},n.styles.arrow,{},g(Object.assign({},a,{offsets:n.modifiersData.arrow,position:"absolute",adaptive:!1})))),n.attributes.popper=Object.assign({},n.attributes.popper,{"data-popper-placement":n.placement})},data:{}},{name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var o=e.state;Object.keys(o.elements).forEach(function(e){var t=o.styles[e]||{},n=o.attributes[e]||{},r=o.elements[e];D(r)&&c(r)&&(Object.assign(r.style,t),Object.keys(n).forEach(function(e){var t=n[e];!1===t?r.removeAttribute(e):r.setAttribute(e,!0===t?"":t)}))})},effect:function(e){var o=e.state,i={popper:{position:o.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(o.elements.popper.style,i.popper),o.elements.arrow&&Object.assign(o.elements.arrow.style,i.arrow),function(){Object.keys(o.elements).forEach(function(e){var t=o.elements[e],n=o.attributes[e]||{},r=Object.keys(o.styles.hasOwnProperty(e)?o.styles[e]:i[e]).reduce(function(e,t){return e[t]="",e},{});D(t)&&c(t)&&(Object.assign(t.style,r),Object.keys(n).forEach(function(e){t.removeAttribute(e)}))})}},requires:["computeStyles"]},{name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var l=e.state,t=e.options,n=e.name,r=t.offset,D=void 0===r?[0,0]:r,o=N.reduce(function(e,t){var n,r,o,i,u,s,a,c;return e[t]=(n=t,r=l.rects,o=D,i=se(n),u=0<=[ie,ne].indexOf(i)?-1:1,s="function"==typeof o?o(Object.assign({},r,{placement:n})):o,a=(a=s[0])||0,c=((c=s[1])||0)*u,0<=[ie,oe].indexOf(i)?{x:c,y:a}:{x:a,y:c}),e},{}),i=o[l.placement],u=i.x,s=i.y;null!=l.modifiersData.popperOffsets&&(l.modifiersData.popperOffsets.x+=u,l.modifiersData.popperOffsets.y+=s),l.modifiersData[n]=o}},{name:"flip",enabled:!0,phase:"main",fn:function(e){var n=e.state,t=e.options,r=e.name;if(!n.modifiersData[r]._skip){for(var o=t.mainAxis,i=void 0===o||o,u=t.altAxis,s=void 0===u||u,a=t.fallbackPlacements,c=t.padding,l=t.boundary,D=t.rootBoundary,p=t.altBoundary,f=t.flipVariations,h=void 0===f||f,d=t.allowedAutoPlacements,g=n.options.placement,v=se(g),m=a||(v===g||!h?[X(g)]:function(e){if(se(e)===_)return[];var t=X(e);return[J(e),t,J(t)]}(g)),y=[g].concat(m).reduce(function(e,t){return e.concat(se(t)===_?function(n,e){void 0===e&&(e={});var t=e.placement,r=e.boundary,o=e.rootBoundary,i=e.padding,u=e.flipVariations,s=e.allowedAutoPlacements,a=void 0===s?N:s,c=ae(t),l=(c?u?R:R.filter(function(e){return ae(e)===c}):H).filter(function(e){return 0<=a.indexOf(e)}).reduce(function(e,t){return e[t]=De(n,{placement:t,boundary:r,rootBoundary:o,padding:i})[se(t)],e},{});return Object.keys(l).sort(function(e,t){return l[e]-l[t]})}(n,{placement:t,boundary:l,rootBoundary:D,padding:c,flipVariations:h,allowedAutoPlacements:d}):t)},[]),F=n.rects.reference,E=n.rects.popper,b=new Map,C=!0,w=y[0],B=0;B<y.length;B++){var L=y[B],T=se(L),A=ae(L)===ue,S=0<=[ne,re].indexOf(T),k=S?"width":"height",P=De(n,{placement:L,boundary:l,rootBoundary:D,altBoundary:p,padding:c}),I=S?A?oe:ie:A?re:ne;F[k]>E[k]&&(I=X(I));var O=X(I),x=[];if(i&&x.push(P[T]<=0),s&&x.push(P[I]<=0,P[O]<=0),x.every(function(e){return e})){w=L,C=!1;break}b.set(L,x)}if(C)for(var M=function(n){var e=y.find(function(e){var t=b.get(e);if(t)return t.slice(0,n).every(function(e){return e})});if(e)return w=e,"break"},j=h?3:1;0<j;j--){if("break"===M(j))break}n.placement!==w&&(n.modifiersData[r]._skip=!0,n.placement=w,n.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}},{name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var t,n,r,o,i,u,s,a,c,l,D,p,f,h,d,g,v,m,y,F,E,b,C,w,B,L,T,A=e.state,S=e.options,k=e.name,P=S.mainAxis,I=void 0===P||P,O=S.altAxis,x=void 0!==O&&O,M=S.boundary,j=S.rootBoundary,_=S.altBoundary,H=S.padding,R=S.tether,N=void 0===R||R,U=S.tetherOffset,W=void 0===U?0:U,q=De(A,{boundary:M,rootBoundary:j,padding:H,altBoundary:_}),V=se(A.placement),z=ae(A.placement),X=!z,J=ce(V),Y="x"===J?"y":"x",G=A.modifiersData.popperOffsets,Q=A.rects.reference,$=A.rects.popper,K="function"==typeof W?W(Object.assign({},A.rects,{placement:A.placement})):W,Z={x:0,y:0};G&&(I&&(t="y"===J?ne:ie,n="y"===J?re:oe,r="y"===J?"height":"width",o=G[J],i=G[J]+q[t],u=G[J]-q[n],s=N?-$[r]/2:0,a=z===ue?Q[r]:$[r],c=z===ue?-$[r]:-Q[r],l=A.elements.arrow,D=N&&l?ee(l):{width:0,height:0},f=(p=A.modifiersData["arrow#persistent"]?A.modifiersData["arrow#persistent"].padding:le())[t],h=p[n],d=pe(0,Q[r],D[r]),g=X?Q[r]/2-s-d-f-K:a-d-f-K,v=X?-Q[r]/2+s+d+h+K:c+d+h+K,y=(m=A.elements.arrow&&te(A.elements.arrow))?"y"===J?m.clientTop||0:m.clientLeft||0:0,F=A.modifiersData.offset?A.modifiersData.offset[A.placement][J]:0,E=G[J]+g-F-y,b=G[J]+v-F,C=pe(N?Math.min(i,E):i,o,N?Math.max(u,b):u),G[J]=C,Z[J]=C-o),x&&(w="x"===J?ne:ie,B="x"===J?re:oe,T=pe((L=G[Y])+q[w],L,L-q[B]),G[Y]=T,Z[Y]=T-L),A.modifiersData[k]=Z)},requiresIfExists:["offset"]},{name:"arrow",enabled:!0,phase:"main",fn:function(e){var t,n,r,o,i,u,s,a,c,l,D,p,f,h,d=e.state,g=e.name,v=d.elements.arrow,m=d.modifiersData.popperOffsets,y=se(d.placement),F=ce(y),E=0<=[ie,oe].indexOf(y)?"height":"width";v&&m&&(n=d.modifiersData[g+"#persistent"].padding,r=ee(v),o="y"===F?ne:ie,i="y"===F?re:oe,u=d.rects.reference[E]+d.rects.reference[F]-m[F]-d.rects.popper[E],s=m[F]-d.rects.reference[F],c=(a=te(v))?"y"===F?a.clientHeight||0:a.clientWidth||0:0,l=u/2-s/2,D=n[o],p=c-r[E]-n[i],h=pe(D,f=c/2-r[E]/2+l,p),d.modifiersData[g]=((t={})[F]=h,t.centerOffset=h-f,t))},effect:function(e){var t=e.state,n=e.options,r=e.name,o=n.element,i=void 0===o?"[data-popper-arrow]":o,u=n.padding,s=void 0===u?0:u;null!=i&&("string"==typeof i&&!(i=t.elements.popper.querySelector(i))||("production"!==F.env.NODE_ENV&&(D(i)||console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).',"To use an SVG arrow, wrap it in an HTMLElement that will be used as","the arrow."].join(" "))),y(t.elements.popper,i)?(t.elements.arrow=i,t.modifiersData[r+"#persistent"]={padding:$("number"!=typeof s?s:K(s,H))}):"production"!==F.env.NODE_ENV&&console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper',"element."].join(" "))))},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]},{name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,n=e.name,r=t.rects.reference,o=t.rects.popper,i=t.modifiersData.preventOverflow,u=De(t,{elementContext:"reference"}),s=De(t,{altBoundary:!0}),a=Z(u,r),c=Z(s,o,i),l=fe(a),D=fe(c);t.modifiersData[n]={referenceClippingOffsets:a,popperEscapeOffsets:c,isReferenceHidden:l,hasPopperEscaped:D},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":l,"data-popper-escaped":D})}}],u=e({defaultModifiers:i});a.createPopper=u,a.defaultModifiers=i,a.detectOverflow=De,a.popperGenerator=e}).call(this,e("_process"))},{_process:29}],26:[function(e,t,n){"use strict";n.byteLength=function(e){var t=D(e),n=t[0],r=t[1];return 3*(n+r)/4-r},n.toByteArray=function(e){var t,n,r=D(e),o=r[0],i=r[1],u=new l(function(e,t){return 3*(e+t)/4-t}(o,i)),s=0,a=0<i?o-4:o;for(n=0;n<a;n+=4)t=c[e.charCodeAt(n)]<<18|c[e.charCodeAt(n+1)]<<12|c[e.charCodeAt(n+2)]<<6|c[e.charCodeAt(n+3)],u[s++]=t>>16&255,u[s++]=t>>8&255,u[s++]=255&t;2===i&&(t=c[e.charCodeAt(n)]<<2|c[e.charCodeAt(n+1)]>>4,u[s++]=255&t);1===i&&(t=c[e.charCodeAt(n)]<<10|c[e.charCodeAt(n+1)]<<4|c[e.charCodeAt(n+2)]>>2,u[s++]=t>>8&255,u[s++]=255&t);return u},n.fromByteArray=function(e){for(var t,n=e.length,r=n%3,o=[],i=0,u=n-r;i<u;i+=16383)o.push(a(e,i,u<i+16383?u:i+16383));1==r?(t=e[n-1],o.push(s[t>>2]+s[t<<4&63]+"==")):2==r&&(t=(e[n-2]<<8)+e[n-1],o.push(s[t>>10]+s[t>>4&63]+s[t<<2&63]+"="));return o.join("")};for(var s=[],c=[],l="undefined"!=typeof Uint8Array?Uint8Array:Array,r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",o=0,i=r.length;o<i;++o)s[o]=r[o],c[r.charCodeAt(o)]=o;function D(e){var t=e.length;if(0<t%4)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function a(e,t,n){for(var r,o,i=[],u=t;u<n;u+=3)r=(e[u]<<16&16711680)+(e[u+1]<<8&65280)+(255&e[u+2]),i.push(s[(o=r)>>18&63]+s[o>>12&63]+s[o>>6&63]+s[63&o]);return i.join("")}c["-".charCodeAt(0)]=62,c["_".charCodeAt(0)]=63},{}],27:[function(H,e,R){(function(D){"use strict";var r=H("base64-js"),i=H("ieee754"),e="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;R.Buffer=D,R.SlowBuffer=function(e){+e!=e&&(e=0);return D.alloc(+e)},R.INSPECT_MAX_BYTES=50;var n=2147483647;function u(e){if(n<e)throw new RangeError('The value "'+e+'" is invalid for option "size"');var t=new Uint8Array(e);return Object.setPrototypeOf(t,D.prototype),t}function D(e,t,n){if("number"!=typeof e)return o(e,t,n);if("string"==typeof t)throw new TypeError('The "string" argument must be of type string. Received type number');return a(e)}function o(e,t,n){if("string"==typeof e)return function(e,t){"string"==typeof t&&""!==t||(t="utf8");if(!D.isEncoding(t))throw new TypeError("Unknown encoding: "+t);var n=0|f(e,t),r=u(n),o=r.write(e,t);o!==n&&(r=r.slice(0,o));return r}(e,t);if(ArrayBuffer.isView(e))return c(e);if(null==e)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(M(e,ArrayBuffer)||e&&M(e.buffer,ArrayBuffer))return l(e,t,n);if("undefined"!=typeof SharedArrayBuffer&&(M(e,SharedArrayBuffer)||e&&M(e.buffer,SharedArrayBuffer)))return l(e,t,n);if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type number');var r=e.valueOf&&e.valueOf();if(null!=r&&r!==e)return D.from(r,t,n);var o=function(e){if(D.isBuffer(e)){var t=0|p(e.length),n=u(t);return 0===n.length?n:(e.copy(n,0,0,t),n)}if(void 0!==e.length)return"number"!=typeof e.length||j(e.length)?u(0):c(e);if("Buffer"===e.type&&Array.isArray(e.data))return c(e.data)}(e);if(o)return o;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return D.from(e[Symbol.toPrimitive]("string"),t,n);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function s(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function a(e){return s(e),u(e<0?0:0|p(e))}function c(e){for(var t=e.length<0?0:0|p(e.length),n=u(t),r=0;r<t;r+=1)n[r]=255&e[r];return n}function l(e,t,n){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(n||0))throw new RangeError('"length" is outside of buffer bounds');var r=void 0===t&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,t):new Uint8Array(e,t,n);return Object.setPrototypeOf(r,D.prototype),r}function p(e){if(n<=e)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+n.toString(16)+" bytes");return 0|e}function f(e,t){if(D.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||M(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);var n=e.length,r=2<arguments.length&&!0===arguments[2];if(!r&&0===n)return 0;for(var o=!1;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":return I(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return O(e).length;default:if(o)return r?-1:I(e).length;t=(""+t).toLowerCase(),o=!0}}function h(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function d(e,t,n,r,o){if(0===e.length)return-1;if("string"==typeof n?(r=n,n=0):2147483647<n?n=2147483647:n<-2147483648&&(n=-2147483648),j(n=+n)&&(n=o?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(o)return-1;n=e.length-1}else if(n<0){if(!o)return-1;n=0}if("string"==typeof t&&(t=D.from(t,r)),D.isBuffer(t))return 0===t.length?-1:g(e,t,n,r,o);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):g(e,[t],n,r,o);throw new TypeError("val must be string, number or Buffer")}function g(e,t,n,r,o){var i=1,u=e.length,s=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;u/=i=2,s/=2,n/=2}function a(e,t){return 1===i?e[t]:e.readUInt16BE(t*i)}if(o)for(var c=-1,l=n;l<u;l++)if(a(e,l)===a(t,-1===c?0:l-c)){if(-1===c&&(c=l),l-c+1===s)return c*i}else-1!==c&&(l-=l-c),c=-1;else for(u<n+s&&(n=u-s),l=n;0<=l;l--){for(var D=!0,p=0;p<s;p++)if(a(e,l+p)!==a(t,p)){D=!1;break}if(D)return l}return-1}function v(e,t,n,r){n=Number(n)||0;var o=e.length-n;(!r||o<(r=Number(r)))&&(r=o);var i=t.length;i/2<r&&(r=i/2);for(var u=0;u<r;++u){var s=parseInt(t.substr(2*u,2),16);if(j(s))return u;e[n+u]=s}return u}function m(e,t,n,r){return x(function(e){for(var t=[],n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,r)}function y(e,t,n,r){return x(function(e,t){for(var n,r,o,i=[],u=0;u<e.length&&!((t-=2)<0);++u)n=e.charCodeAt(u),r=n>>8,o=n%256,i.push(o),i.push(r);return i}(t,e.length-n),e,n,r)}function F(e,t,n){return 0===t&&n===e.length?r.fromByteArray(e):r.fromByteArray(e.slice(t,n))}function E(e,t,n){n=Math.min(e.length,n);for(var r=[],o=t;o<n;){var i,u,s,a,c=e[o],l=null,D=239<c?4:223<c?3:191<c?2:1;if(o+D<=n)switch(D){case 1:c<128&&(l=c);break;case 2:128==(192&(i=e[o+1]))&&127<(a=(31&c)<<6|63&i)&&(l=a);break;case 3:i=e[o+1],u=e[o+2],128==(192&i)&&128==(192&u)&&2047<(a=(15&c)<<12|(63&i)<<6|63&u)&&(a<55296||57343<a)&&(l=a);break;case 4:i=e[o+1],u=e[o+2],s=e[o+3],128==(192&i)&&128==(192&u)&&128==(192&s)&&65535<(a=(15&c)<<18|(63&i)<<12|(63&u)<<6|63&s)&&a<1114112&&(l=a)}null===l?(l=65533,D=1):65535<l&&(l-=65536,r.push(l>>>10&1023|55296),l=56320|1023&l),r.push(l),o+=D}return function(e){var t=e.length;if(t<=b)return String.fromCharCode.apply(String,e);var n="",r=0;for(;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=b));return n}(r)}R.kMaxLength=n,(D.TYPED_ARRAY_SUPPORT=function(){try{var e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}())||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(D.prototype,"parent",{enumerable:!0,get:function(){if(D.isBuffer(this))return this.buffer}}),Object.defineProperty(D.prototype,"offset",{enumerable:!0,get:function(){if(D.isBuffer(this))return this.byteOffset}}),D.poolSize=8192,D.from=o,Object.setPrototypeOf(D.prototype,Uint8Array.prototype),Object.setPrototypeOf(D,Uint8Array),D.alloc=function(e,t,n){return o=t,i=n,s(r=e),r<=0||void 0===o?u(r):"string"==typeof i?u(r).fill(o,i):u(r).fill(o);var r,o,i},D.allocUnsafe=a,D.allocUnsafeSlow=a,D.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==D.prototype},D.compare=function(e,t){if(M(e,Uint8Array)&&(e=D.from(e,e.offset,e.byteLength)),M(t,Uint8Array)&&(t=D.from(t,t.offset,t.byteLength)),!D.isBuffer(e)||!D.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;for(var n=e.length,r=t.length,o=0,i=Math.min(n,r);o<i;++o)if(e[o]!==t[o]){n=e[o],r=t[o];break}return n<r?-1:r<n?1:0},D.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},D.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return D.alloc(0);if(void 0===t)for(o=t=0;o<e.length;++o)t+=e[o].length;for(var n=D.allocUnsafe(t),r=0,o=0;o<e.length;++o){var i=e[o];if(M(i,Uint8Array)&&(i=D.from(i)),!D.isBuffer(i))throw new TypeError('"list" argument must be an Array of Buffers');i.copy(n,r),r+=i.length}return n},D.byteLength=f,D.prototype._isBuffer=!0,D.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)h(this,t,t+1);return this},D.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)h(this,t,t+3),h(this,t+1,t+2);return this},D.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)h(this,t,t+7),h(this,t+1,t+6),h(this,t+2,t+5),h(this,t+3,t+4);return this},D.prototype.toLocaleString=D.prototype.toString=function(){var e=this.length;return 0===e?"":0===arguments.length?E(this,0,e):function(e,t,n){var r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e=e||"utf8";;)switch(e){case"hex":return B(this,t,n);case"utf8":case"utf-8":return E(this,t,n);case"ascii":return C(this,t,n);case"latin1":case"binary":return w(this,t,n);case"base64":return F(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return L(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}.apply(this,arguments)},D.prototype.equals=function(e){if(!D.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===D.compare(this,e)},D.prototype.inspect=function(){var e="",t=R.INSPECT_MAX_BYTES,e=this.toString("hex",0,t).replace(/(.{2})/g,"$1 ").trim();return this.length>t&&(e+=" ... "),"<Buffer "+e+">"},e&&(D.prototype[e]=D.prototype.inspect),D.prototype.compare=function(e,t,n,r,o){if(M(e,Uint8Array)&&(e=D.from(e,e.offset,e.byteLength)),!D.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===r&&(r=0),void 0===o&&(o=this.length),t<0||n>e.length||r<0||o>this.length)throw new RangeError("out of range index");if(o<=r&&n<=t)return 0;if(o<=r)return-1;if(n<=t)return 1;if(this===e)return 0;for(var i=(o>>>=0)-(r>>>=0),u=(n>>>=0)-(t>>>=0),s=Math.min(i,u),a=this.slice(r,o),c=e.slice(t,n),l=0;l<s;++l)if(a[l]!==c[l]){i=a[l],u=c[l];break}return i<u?-1:u<i?1:0},D.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},D.prototype.indexOf=function(e,t,n){return d(this,e,t,n,!0)},D.prototype.lastIndexOf=function(e,t,n){return d(this,e,t,n,!1)},D.prototype.write=function(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(n)?(n>>>=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var o=this.length-t;if((void 0===n||o<n)&&(n=o),0<e.length&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r=r||"utf8";for(var i,u,s,a,c,l,D=!1;;)switch(r){case"hex":return v(this,e,t,n);case"utf8":case"utf-8":return c=t,l=n,x(I(e,(a=this).length-c),a,c,l);case"ascii":return m(this,e,t,n);case"latin1":case"binary":return m(this,e,t,n);case"base64":return i=this,u=t,s=n,x(O(e),i,u,s);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return y(this,e,t,n);default:if(D)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),D=!0}},D.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var b=4096;function C(e,t,n){var r="";n=Math.min(e.length,n);for(var o=t;o<n;++o)r+=String.fromCharCode(127&e[o]);return r}function w(e,t,n){var r="";n=Math.min(e.length,n);for(var o=t;o<n;++o)r+=String.fromCharCode(e[o]);return r}function B(e,t,n){var r=e.length;(!t||t<0)&&(t=0),(!n||n<0||r<n)&&(n=r);for(var o="",i=t;i<n;++i)o+=_[e[i]];return o}function L(e,t,n){for(var r=e.slice(t,n),o="",i=0;i<r.length;i+=2)o+=String.fromCharCode(r[i]+256*r[i+1]);return o}function T(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(n<e+t)throw new RangeError("Trying to access beyond buffer length")}function A(e,t,n,r,o,i){if(!D.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(o<t||t<i)throw new RangeError('"value" argument is out of bounds');if(n+r>e.length)throw new RangeError("Index out of range")}function S(e,t,n,r){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function k(e,t,n,r,o){return t=+t,n>>>=0,o||S(e,0,n,4),i.write(e,t,n,r,23,4),n+4}function P(e,t,n,r,o){return t=+t,n>>>=0,o||S(e,0,n,8),i.write(e,t,n,r,52,8),n+8}D.prototype.slice=function(e,t){var n=this.length;(e=~~e)<0?(e+=n)<0&&(e=0):n<e&&(e=n),(t=void 0===t?n:~~t)<0?(t+=n)<0&&(t=0):n<t&&(t=n),t<e&&(t=e);var r=this.subarray(e,t);return Object.setPrototypeOf(r,D.prototype),r},D.prototype.readUIntLE=function(e,t,n){e>>>=0,t>>>=0,n||T(e,t,this.length);for(var r=this[e],o=1,i=0;++i<t&&(o*=256);)r+=this[e+i]*o;return r},D.prototype.readUIntBE=function(e,t,n){e>>>=0,t>>>=0,n||T(e,t,this.length);for(var r=this[e+--t],o=1;0<t&&(o*=256);)r+=this[e+--t]*o;return r},D.prototype.readUInt8=function(e,t){return e>>>=0,t||T(e,1,this.length),this[e]},D.prototype.readUInt16LE=function(e,t){return e>>>=0,t||T(e,2,this.length),this[e]|this[e+1]<<8},D.prototype.readUInt16BE=function(e,t){return e>>>=0,t||T(e,2,this.length),this[e]<<8|this[e+1]},D.prototype.readUInt32LE=function(e,t){return e>>>=0,t||T(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},D.prototype.readUInt32BE=function(e,t){return e>>>=0,t||T(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},D.prototype.readIntLE=function(e,t,n){e>>>=0,t>>>=0,n||T(e,t,this.length);for(var r=this[e],o=1,i=0;++i<t&&(o*=256);)r+=this[e+i]*o;return(o*=128)<=r&&(r-=Math.pow(2,8*t)),r},D.prototype.readIntBE=function(e,t,n){e>>>=0,t>>>=0,n||T(e,t,this.length);for(var r=t,o=1,i=this[e+--r];0<r&&(o*=256);)i+=this[e+--r]*o;return(o*=128)<=i&&(i-=Math.pow(2,8*t)),i},D.prototype.readInt8=function(e,t){return e>>>=0,t||T(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},D.prototype.readInt16LE=function(e,t){e>>>=0,t||T(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},D.prototype.readInt16BE=function(e,t){e>>>=0,t||T(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},D.prototype.readInt32LE=function(e,t){return e>>>=0,t||T(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},D.prototype.readInt32BE=function(e,t){return e>>>=0,t||T(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},D.prototype.readFloatLE=function(e,t){return e>>>=0,t||T(e,4,this.length),i.read(this,e,!0,23,4)},D.prototype.readFloatBE=function(e,t){return e>>>=0,t||T(e,4,this.length),i.read(this,e,!1,23,4)},D.prototype.readDoubleLE=function(e,t){return e>>>=0,t||T(e,8,this.length),i.read(this,e,!0,52,8)},D.prototype.readDoubleBE=function(e,t){return e>>>=0,t||T(e,8,this.length),i.read(this,e,!1,52,8)},D.prototype.writeUIntLE=function(e,t,n,r){e=+e,t>>>=0,n>>>=0,r||A(this,e,t,n,Math.pow(2,8*n)-1,0);var o=1,i=0;for(this[t]=255&e;++i<n&&(o*=256);)this[t+i]=e/o&255;return t+n},D.prototype.writeUIntBE=function(e,t,n,r){e=+e,t>>>=0,n>>>=0,r||A(this,e,t,n,Math.pow(2,8*n)-1,0);var o=n-1,i=1;for(this[t+o]=255&e;0<=--o&&(i*=256);)this[t+o]=e/i&255;return t+n},D.prototype.writeUInt8=function(e,t,n){return e=+e,t>>>=0,n||A(this,e,t,1,255,0),this[t]=255&e,t+1},D.prototype.writeUInt16LE=function(e,t,n){return e=+e,t>>>=0,n||A(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},D.prototype.writeUInt16BE=function(e,t,n){return e=+e,t>>>=0,n||A(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},D.prototype.writeUInt32LE=function(e,t,n){return e=+e,t>>>=0,n||A(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},D.prototype.writeUInt32BE=function(e,t,n){return e=+e,t>>>=0,n||A(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},D.prototype.writeIntLE=function(e,t,n,r){var o;e=+e,t>>>=0,r||A(this,e,t,n,(o=Math.pow(2,8*n-1))-1,-o);var i=0,u=1,s=0;for(this[t]=255&e;++i<n&&(u*=256);)e<0&&0===s&&0!==this[t+i-1]&&(s=1),this[t+i]=(e/u>>0)-s&255;return t+n},D.prototype.writeIntBE=function(e,t,n,r){var o;e=+e,t>>>=0,r||A(this,e,t,n,(o=Math.pow(2,8*n-1))-1,-o);var i=n-1,u=1,s=0;for(this[t+i]=255&e;0<=--i&&(u*=256);)e<0&&0===s&&0!==this[t+i+1]&&(s=1),this[t+i]=(e/u>>0)-s&255;return t+n},D.prototype.writeInt8=function(e,t,n){return e=+e,t>>>=0,n||A(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},D.prototype.writeInt16LE=function(e,t,n){return e=+e,t>>>=0,n||A(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},D.prototype.writeInt16BE=function(e,t,n){return e=+e,t>>>=0,n||A(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},D.prototype.writeInt32LE=function(e,t,n){return e=+e,t>>>=0,n||A(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},D.prototype.writeInt32BE=function(e,t,n){return e=+e,t>>>=0,n||A(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},D.prototype.writeFloatLE=function(e,t,n){return k(this,e,t,!0,n)},D.prototype.writeFloatBE=function(e,t,n){return k(this,e,t,!1,n)},D.prototype.writeDoubleLE=function(e,t,n){return P(this,e,t,!0,n)},D.prototype.writeDoubleBE=function(e,t,n){return P(this,e,t,!1,n)},D.prototype.copy=function(e,t,n,r){if(!D.isBuffer(e))throw new TypeError("argument should be a Buffer");if(n=n||0,r||0===r||(r=this.length),t>=e.length&&(t=e.length),t=t||0,0<r&&r<n&&(r=n),r===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);var o=r-n;if(this===e&&"function"==typeof Uint8Array.prototype.copyWithin)this.copyWithin(t,n,r);else if(this===e&&n<t&&t<r)for(var i=o-1;0<=i;--i)e[i+t]=this[i+n];else Uint8Array.prototype.set.call(e,this.subarray(n,r),t);return o},D.prototype.fill=function(e,t,n,r){if("string"==typeof e){if("string"==typeof t?(r=t,t=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!D.isEncoding(r))throw new TypeError("Unknown encoding: "+r);var o;1===e.length&&(o=e.charCodeAt(0),("utf8"===r&&o<128||"latin1"===r)&&(e=o))}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;var i;if(t>>>=0,n=void 0===n?this.length:n>>>0,"number"==typeof(e=e||0))for(i=t;i<n;++i)this[i]=e;else{var u=D.isBuffer(e)?e:D.from(e,r),s=u.length;if(0===s)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(i=0;i<n-t;++i)this[i+t]=u[i%s]}return this};var t=/[^+/0-9A-Za-z-_]/g;function I(e,t){var n;t=t||1/0;for(var r=e.length,o=null,i=[],u=0;u<r;++u){if(55295<(n=e.charCodeAt(u))&&n<57344){if(!o){if(56319<n){-1<(t-=3)&&i.push(239,191,189);continue}if(u+1===r){-1<(t-=3)&&i.push(239,191,189);continue}o=n;continue}if(n<56320){-1<(t-=3)&&i.push(239,191,189),o=n;continue}n=65536+(o-55296<<10|n-56320)}else o&&-1<(t-=3)&&i.push(239,191,189);if(o=null,n<128){if(--t<0)break;i.push(n)}else if(n<2048){if((t-=2)<0)break;i.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;i.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;i.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return i}function O(e){return r.toByteArray(function(e){if((e=(e=e.split("=")[0]).trim().replace(t,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function x(e,t,n,r){for(var o=0;o<r&&!(o+n>=t.length||o>=e.length);++o)t[o+n]=e[o];return o}function M(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function j(e){return e!=e}var _=function(){for(var e="0123456789abcdef",t=new Array(256),n=0;n<16;++n)for(var r=16*n,o=0;o<16;++o)t[r+o]=e[n]+e[o];return t}()}).call(this,H("buffer").Buffer)},{"base64-js":26,buffer:27,ieee754:28}],28:[function(e,t,n){n.read=function(e,t,n,r,o){var i,u,s=8*o-r-1,a=(1<<s)-1,c=a>>1,l=-7,D=n?o-1:0,p=n?-1:1,f=e[t+D];for(D+=p,i=f&(1<<-l)-1,f>>=-l,l+=s;0<l;i=256*i+e[t+D],D+=p,l-=8);for(u=i&(1<<-l)-1,i>>=-l,l+=r;0<l;u=256*u+e[t+D],D+=p,l-=8);if(0===i)i=1-c;else{if(i===a)return u?NaN:1/0*(f?-1:1);u+=Math.pow(2,r),i-=c}return(f?-1:1)*u*Math.pow(2,i-r)},n.write=function(e,t,n,r,o,i){var u,s,a,c=8*i-o-1,l=(1<<c)-1,D=l>>1,p=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,f=r?0:i-1,h=r?1:-1,d=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(s=isNaN(t)?1:0,u=l):(u=Math.floor(Math.log(t)/Math.LN2),t*(a=Math.pow(2,-u))<1&&(u--,a*=2),2<=(t+=1<=u+D?p/a:p*Math.pow(2,1-D))*a&&(u++,a/=2),l<=u+D?(s=0,u=l):1<=u+D?(s=(t*a-1)*Math.pow(2,o),u+=D):(s=t*Math.pow(2,D-1)*Math.pow(2,o),u=0));8<=o;e[n+f]=255&s,f+=h,s/=256,o-=8);for(u=u<<o|s,c+=o;0<c;e[n+f]=255&u,f+=h,u/=256,c-=8);e[n+f-h]|=128*d}},{}],29:[function(e,t,n){var r,o,i=t.exports={};function u(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(t){if(r===setTimeout)return setTimeout(t,0);if((r===u||!r)&&setTimeout)return r=setTimeout,setTimeout(t,0);try{return r(t,0)}catch(e){try{return r.call(null,t,0)}catch(e){return r.call(this,t,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:u}catch(e){r=u}try{o="function"==typeof clearTimeout?clearTimeout:s}catch(e){o=s}}();var c,l=[],D=!1,p=-1;function f(){D&&c&&(D=!1,c.length?l=c.concat(l):p=-1,l.length&&h())}function h(){if(!D){var e=a(f);D=!0;for(var t=l.length;t;){for(c=l,l=[];++p<t;)c&&c[p].run();p=-1,t=l.length}c=null,D=!1,function(t){if(o===clearTimeout)return clearTimeout(t);if((o===s||!o)&&clearTimeout)return o=clearTimeout,clearTimeout(t);try{o(t)}catch(e){try{return o.call(null,t)}catch(e){return o.call(this,t)}}}(e)}}function d(e,t){this.fun=e,this.array=t}function g(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(1<arguments.length)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];l.push(new d(e,t)),1!==l.length||D||a(h)},d.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=g,i.addListener=g,i.once=g,i.off=g,i.removeListener=g,i.removeAllListeners=g,i.emit=g,i.prependListener=g,i.prependOnceListener=g,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},{}],30:[function(O,e,x){(function(ee){"use strict";Object.defineProperty(x,"__esModule",{value:!0});var te=O("@popperjs/core"),ne={passive:!0},re="tippy-iOS",r="tippy-content",s="tippy-backdrop",o="tippy-arrow",i="tippy-svg-arrow";function oe(e,t,n){if(Array.isArray(e)){var r=e[t];return null==r?Array.isArray(n)?n[t]:n:r}return e}function t(e,t){var n={}.toString.call(e);return 0===n.indexOf("[object")&&-1<n.indexOf(t+"]")}function ie(e,t){return"function"==typeof e?e.apply(void 0,t):e}function ue(t,n){return 0===n?t:function(e){clearTimeout(r),r=setTimeout(function(){t(e)},n)};var r}function D(e,t){var n=Object.assign({},e);return t.forEach(function(e){delete n[e]}),n}function se(e){return[].concat(e)}function ae(e,t){-1===e.indexOf(t)&&e.push(t)}function ce(e){return e.split("-")[0]}function le(e){return[].slice.call(e)}function De(){return document.createElement("div")}function p(e){return t(e,"Element")}function pe(e){return t(e,"MouseEvent")}function u(e){return e&&e._tippy&&e._tippy.reference===e}function f(e){return p(e)?[e]:t(e,"NodeList")?le(e):Array.isArray(e)?e:le(document.querySelectorAll(e))}function fe(e,t){e.forEach(function(e){e&&(e.style.transitionDuration=t+"ms")})}function he(e,t){e.forEach(function(e){e&&e.setAttribute("data-state",t)})}function de(e){var t=se(e)[0];return t&&t.ownerDocument||document}function ge(t,e,n){var r=e+"EventListener";["transitionend","webkitTransitionEnd"].forEach(function(e){t[r](e,n)})}var ve={isTouch:!1},n=0;function h(){ve.isTouch||(ve.isTouch=!0,window.performance&&document.addEventListener("mousemove",a))}function a(){var e=performance.now();e-n<20&&(ve.isTouch=!1,document.removeEventListener("mousemove",a)),n=e}function d(){var e,t=document.activeElement;u(t)&&(e=t._tippy,t.blur&&!e.state.isVisible&&t.blur())}var e="undefined"!=typeof window&&"undefined"!=typeof document,c=e?navigator.userAgent:"",me=/MSIE |Trident\//.test(c),ye=e&&/iPhone|iPad|iPod/.test(navigator.platform);function Fe(e){return[e+"() was called on a"+("destroy"===e?"n already-":" ")+"destroyed instance. This is a no-op but","indicates a potential memory leak."].join(" ")}function l(e){return e.replace(/[ \t]{2,}/g," ").replace(/^[ \t]*/gm,"").trim()}function g(e){return[l("\n  %ctippy.js\n\n  %c"+l(e)+"\n\n  %c👷‍ This is a development-only message. It will be removed in production.\n  "),"color: #00C584; font-size: 1.3em; font-weight: bold;","line-height: 1.5","color: #a6a095;"]}function Ee(e,t){var n;e&&(n=console).warn.apply(n,g(t))}function be(e,t){var n;e&&(n=console).error.apply(n,g(t))}var v={animateFill:!1,followCursor:!1,inlinePositioning:!1,sticky:!1},Ce=Object.assign({appendTo:function(){return document.body},aria:{content:"auto",expanded:"auto"},content:"",delay:0,duration:[300,250],getReferenceClientRect:null,hideOnClick:!0,ignoreAttributes:!1,interactive:!1,interactiveBorder:2,interactiveDebounce:0,moveTransition:"",offset:[0,10],onAfterUpdate:function(){},onBeforeUpdate:function(){},onCreate:function(){},onDestroy:function(){},onHidden:function(){},onHide:function(){},onMount:function(){},onShow:function(){},onShown:function(){},onTrigger:function(){},onUntrigger:function(){},onClickOutside:function(){},placement:"top",plugins:[],popperOptions:{},render:null,showOnCreate:!1,touch:!0,trigger:"mouseenter focus",triggerTarget:null},v,{},{allowHTML:!1,animation:"fade",arrow:!0,content:"",inertia:!1,maxWidth:350,role:"tooltip",theme:"",zIndex:9999}),m=Object.keys(Ce);function we(o){var e=(o.plugins||[]).reduce(function(e,t){var n=t.name,r=t.defaultValue;return n&&(e[n]=void 0!==o[n]?o[n]:r),e},{});return Object.assign({},o,{},e)}function Be(e,t){var o,n,r=Object.assign({},t,{content:ie(t.content,[e])},t.ignoreAttributes?{}:(o=e,((n=t.plugins)?Object.keys(we(Object.assign({},Ce,{plugins:n}))):m).reduce(function(t,n){var r=(o.getAttribute("data-tippy-"+n)||"").trim();if(!r)return t;if("content"===n)t[n]=r;else try{t[n]=JSON.parse(r)}catch(e){t[n]=r}return t},{})));return r.aria=Object.assign({},Ce.aria,{},r.aria),r.aria={expanded:"auto"===r.aria.expanded?t.interactive:r.aria.expanded,content:"auto"===r.aria.content?t.interactive?null:"describedby":r.aria.content},r}function y(e,o){void 0===e&&(e={}),void 0===o&&(o=[]),Object.keys(e).forEach(function(t){var e,n,r=D(Ce,Object.keys(v));Ee((e=r,n=t,!{}.hasOwnProperty.call(e,n))&&0===o.filter(function(e){return e.name===t}).length,["`"+t+"`","is not a valid prop. You may have spelled it incorrectly, or if it's","a plugin, forgot to pass it in an array as props.plugins.","\n\n","All props: https://atomiks.github.io/tippyjs/v6/all-props/\n","Plugins: https://atomiks.github.io/tippyjs/v6/plugins/"].join(" "))})}var F=function(){return"innerHTML"};function E(e,t){e[F()]=t}function b(e){var t=De();return!0===e?t.className=o:(t.className=i,p(e)?t.appendChild(e):E(t,e)),t}function C(e,t){p(t.content)?(E(e,""),e.appendChild(t.content)):"function"!=typeof t.content&&(t.allowHTML?E(e,t.content):e.textContent=t.content)}function Le(e){var t=e.firstElementChild,n=le(t.children);return{box:t,content:n.find(function(e){return e.classList.contains(r)}),arrow:n.find(function(e){return e.classList.contains(o)||e.classList.contains(i)}),backdrop:n.find(function(e){return e.classList.contains(s)})}}function w(u){var s=De(),e=De();e.className="tippy-box",e.setAttribute("data-state","hidden"),e.setAttribute("tabindex","-1");var t=De();function n(e,t){var n=Le(s),r=n.box,o=n.content,i=n.arrow;t.theme?r.setAttribute("data-theme",t.theme):r.removeAttribute("data-theme"),"string"==typeof t.animation?r.setAttribute("data-animation",t.animation):r.removeAttribute("data-animation"),t.inertia?r.setAttribute("data-inertia",""):r.removeAttribute("data-inertia"),r.style.maxWidth="number"==typeof t.maxWidth?t.maxWidth+"px":t.maxWidth,t.role?r.setAttribute("role",t.role):r.removeAttribute("role"),e.content!==t.content&&C(o,u.props),t.arrow?i?e.arrow!==t.arrow&&(r.removeChild(i),r.appendChild(b(t.arrow))):r.appendChild(b(t.arrow)):i&&r.removeChild(i)}return t.className=r,t.setAttribute("data-state","hidden"),C(t,u.props),s.appendChild(e),e.appendChild(t),n(u.props,u.props),{popper:s,onUpdate:n}}w.$$tippy=!0;var Te=1,Ae=[],Se=[];function B(D,e){var i,n,r,u,o,p,s,a,c=Be(D,Object.assign({},Ce,{},we(e))),l=!1,f=!1,h=!1,d=[],g=ue(z,c.interactiveDebounce),v=de(c.triggerTarget||D),t=Te++,m=(a=c.plugins).filter(function(e,t){return a.indexOf(e)===t}),y={id:t,reference:D,popper:De(),popperInstance:null,props:c,state:{isEnabled:!0,isVisible:!1,isDestroyed:!1,isMounted:!1,isShown:!1},plugins:m,clearDelayTimeouts:function(){clearTimeout(i),clearTimeout(n),cancelAnimationFrame(r)},setProps:function(e){"production"!==ee.env.NODE_ENV&&Ee(y.state.isDestroyed,Fe("setProps"));if(y.state.isDestroyed)return;O("onBeforeUpdate",[y,e]),q();var t=y.props,n=Be(D,Object.assign({},y.props,{},e,{ignoreAttributes:!0}));y.props=n,W(),t.interactiveDebounce!==n.interactiveDebounce&&(j(),g=ue(z,n.interactiveDebounce));t.triggerTarget&&!n.triggerTarget?se(t.triggerTarget).forEach(function(e){e.removeAttribute("aria-expanded")}):n.triggerTarget&&D.removeAttribute("aria-expanded");M(),P(),b&&b(t,n);y.popperInstance&&(G(),$().forEach(function(e){requestAnimationFrame(e._tippy.popperInstance.forceUpdate)}));O("onAfterUpdate",[y,e])},setContent:function(e){y.setProps({content:e})},show:function(){"production"!==ee.env.NODE_ENV&&Ee(y.state.isDestroyed,Fe("show"));var e=y.state.isVisible,t=y.state.isDestroyed,n=!y.state.isEnabled,r=ve.isTouch&&!y.props.touch,o=oe(y.props.duration,0,Ce.duration);if(e||t||n||r)return;if(A().hasAttribute("disabled"))return;if(O("onShow",[y],!1),!1===y.props.onShow(y))return;y.state.isVisible=!0,T()&&(E.style.visibility="visible");P(),H(),y.state.isMounted||(E.style.transition="none");{var i,u,s;T()&&(i=S(),u=i.box,s=i.content,fe([u,s],0))}p=function(){var e,t,n;y.state.isVisible&&!h&&(h=!0,E.offsetHeight,E.style.transition=y.props.moveTransition,T()&&y.props.animation&&(fe([t=(e=S()).box,n=e.content],o),he([t,n],"visible")),x(),M(),ae(Se,y),I(!0),y.state.isMounted=!0,O("onMount",[y]),y.props.animation&&T()&&N(o,function(){y.state.isShown=!0,O("onShown",[y])}))},function(){var e,t=y.props.appendTo,n=A();e=y.props.interactive&&t===Ce.appendTo||"parent"===t?n.parentNode:ie(t,[n]);e.contains(E)||e.appendChild(E);G(),"production"!==ee.env.NODE_ENV&&Ee(y.props.interactive&&t===Ce.appendTo&&n.nextElementSibling!==E,["Interactive tippy element may not be accessible via keyboard","navigation because it is not directly after the reference element","in the DOM source order.","\n\n","Using a wrapper <div> or <span> tag around the reference element","solves this by creating a new parentNode context.","\n\n","Specifying `appendTo: document.body` silences this warning, but it","assumes you are using a focus management solution to handle","keyboard navigation.","\n\n","See: https://atomiks.github.io/tippyjs/v6/accessibility/#interactivity"].join(" "))}()},hide:function(){"production"!==ee.env.NODE_ENV&&Ee(y.state.isDestroyed,Fe("hide"));var e=!y.state.isVisible,t=y.state.isDestroyed,n=!y.state.isEnabled,r=oe(y.props.duration,1,Ce.duration);if(e||t||n)return;if(O("onHide",[y],!1),!1===y.props.onHide(y))return;y.state.isVisible=!1,y.state.isShown=!1,h=!1,T()&&(E.style.visibility="hidden");{var o,i,u;j(),R(),P(),T()&&(o=S(),i=o.box,u=o.content,y.props.animation&&(fe([i,u],r),he([i,u],"hidden")))}x(),M(),y.props.animation?T()&&function(e,t){N(e,function(){!y.state.isVisible&&E.parentNode&&E.parentNode.contains(E)&&t()})}(r,y.unmount):y.unmount()},enable:function(){y.state.isEnabled=!0},disable:function(){y.hide(),y.state.isEnabled=!1},unmount:function(){y.state.isVisible&&y.hide();if(!y.state.isMounted)return;Q(),$().forEach(function(e){e._tippy.unmount()}),E.parentNode&&E.parentNode.removeChild(E);0===(Se=Se.filter(function(e){return e!==y})).length&&I(!1);y.state.isMounted=!1,O("onHidden",[y])},destroy:function(){"production"!==ee.env.NODE_ENV&&Ee(y.state.isDestroyed,Fe("destroy"));if(y.state.isDestroyed)return;y.clearDelayTimeouts(),y.unmount(),q(),delete D._tippy,y.state.isDestroyed=!0,O("onDestroy",[y])}};if(!c.render)return"production"!==ee.env.NODE_ENV&&be(!0,"render() function has not been supplied."),y;var F=c.render(y),E=F.popper,b=F.onUpdate;E.setAttribute("data-tippy-root",""),E.id="tippy-"+y.id,y.popper=E,D._tippy=y,E._tippy=y;var C=m.map(function(e){return e.fn(y)}),w=D.hasAttribute("aria-expanded");return W(),M(),P(),O("onCreate",[y]),c.showOnCreate&&K(),E.addEventListener("mouseenter",function(){y.props.interactive&&y.state.isVisible&&y.clearDelayTimeouts()}),E.addEventListener("mouseleave",function(e){y.props.interactive&&0<=y.props.trigger.indexOf("mouseenter")&&(v.addEventListener("mousemove",g),g(e))}),y;function B(){var e=y.props.touch;return Array.isArray(e)?e:[e,0]}function L(){return"hold"===B()[0]}function T(){var e;return null!=(e=y.props.render)&&e.$$tippy}function A(){return s||D}function S(){return Le(E)}function k(e){return y.state.isMounted&&!y.state.isVisible||ve.isTouch||u&&"focus"===u.type?0:oe(y.props.delay,e?0:1,Ce.delay)}function P(){E.style.pointerEvents=y.props.interactive&&y.state.isVisible?"":"none",E.style.zIndex=""+y.props.zIndex}function I(e){var t=e&&ye&&ve.isTouch;v.body.classList[t?"add":"remove"](re)}function O(t,n,e){var r;void 0===e&&(e=!0),C.forEach(function(e){e[t]&&e[t].apply(void 0,n)}),e&&(r=y.props)[t].apply(r,n)}function x(){var r,o,e=y.props.aria;e.content&&(r="aria-"+e.content,o=E.id,se(y.props.triggerTarget||D).forEach(function(e){var t,n=e.getAttribute(r);y.state.isVisible?e.setAttribute(r,n?n+" "+o:o):(t=n&&n.replace(o,"").trim())?e.setAttribute(r,t):e.removeAttribute(r)}))}function M(){!w&&y.props.aria.expanded&&se(y.props.triggerTarget||D).forEach(function(e){y.props.interactive?e.setAttribute("aria-expanded",y.state.isVisible&&e===A()?"true":"false"):e.removeAttribute("aria-expanded")})}function j(){v.body.removeEventListener("mouseleave",Z),v.removeEventListener("mousemove",g),Ae=Ae.filter(function(e){return e!==g})}function _(e){if(!y.props.interactive||!E.contains(e.target)){if(A().contains(e.target)){if(ve.isTouch)return;if(y.state.isVisible&&0<=y.props.trigger.indexOf("click"))return}else y.props.onClickOutside(y,e);!0===y.props.hideOnClick&&(l=!1,y.clearDelayTimeouts(),y.hide(),f=!0,setTimeout(function(){f=!1}),y.state.isMounted||R())}}function H(){v.addEventListener("mousedown",_,!0)}function R(){v.removeEventListener("mousedown",_,!0)}function N(e,t){var n=S().box;function r(e){e.target===n&&(ge(n,"remove",r),t())}if(0===e)return t();ge(n,"remove",o),ge(n,"add",r),o=r}function U(t,n,r){void 0===r&&(r=!1),se(y.props.triggerTarget||D).forEach(function(e){e.addEventListener(t,n,r),d.push({node:e,eventType:t,handler:n,options:r})})}function W(){L()&&(U("touchstart",V,ne),U("touchend",X,ne)),y.props.trigger.split(/\s+/).filter(Boolean).forEach(function(e){if("manual"!==e)switch(U(e,V),e){case"mouseenter":U("mouseleave",X);break;case"focus":U(me?"focusout":"blur",J);break;case"focusin":U("focusout",J)}})}function q(){d.forEach(function(e){var t=e.node,n=e.eventType,r=e.handler,o=e.options;t.removeEventListener(n,r,o)}),d=[]}function V(t){var e,n,r,o=!1;!y.state.isEnabled||Y(t)||f||(s=(u=t).currentTarget,M(),!y.state.isVisible&&pe(t)&&Ae.forEach(function(e){return e(t)}),"click"===t.type&&(y.props.trigger.indexOf("mouseenter")<0||l)&&!1!==y.props.hideOnClick&&y.state.isVisible?o=!0:(n=(e=B())[0],r=e[1],ve.isTouch&&"hold"===n&&r?i=setTimeout(function(){K(t)},r):K(t)),"click"===t.type&&(l=!o),o&&Z(t))}function z(e){var t,n,r,h,d,o=e.target,i=D.contains(o)||E.contains(o);"mousemove"===e.type&&i||(t=$().concat(E).map(function(e){var t,n=null==(t=e._tippy.popperInstance)?void 0:t.state;return n?{popperRect:e.getBoundingClientRect(),popperState:n,props:c}:null}).filter(Boolean),n=t,h=(r=e).clientX,d=r.clientY,n.every(function(e){var t=e.popperRect,n=e.popperState,r=e.props.interactiveBorder,o=ce(n.placement),i=n.modifiersData.offset;if(!i)return!0;var u="bottom"===o?i.top.y:0,s="top"===o?i.bottom.y:0,a="right"===o?i.left.x:0,c="left"===o?i.right.x:0,l=t.top-d+u>r,D=d-t.bottom-s>r,p=t.left-h+a>r,f=h-t.right-c>r;return l||D||p||f})&&(j(),Z(e)))}function X(e){if(!(Y(e)||0<=y.props.trigger.indexOf("click")&&l))return y.props.interactive?(v.body.addEventListener("mouseleave",Z),v.addEventListener("mousemove",g),ae(Ae,g),void g(e)):void Z(e)}function J(e){y.props.trigger.indexOf("focusin")<0&&e.target!==A()||y.props.interactive&&e.relatedTarget&&E.contains(e.relatedTarget)||Z(e)}function Y(e){return!!ve.isTouch&&L()!==0<=e.type.indexOf("touch")}function G(){Q();var e=y.props,t=e.popperOptions,n=e.placement,r=e.offset,o=e.getReferenceClientRect,i=e.moveTransition,u=T()?Le(E).arrow:null,s=o?{getBoundingClientRect:o}:D,a={name:"$$tippy",enabled:!0,phase:"beforeWrite",requires:["computeStyles"],fn:function(e){var t,n=e.state;T()&&(t=S().box,["placement","reference-hidden","escaped"].forEach(function(e){"placement"===e?t.setAttribute("data-placement",n.placement):n.attributes.popper["data-popper-"+e]?t.setAttribute("data-"+e,""):t.removeAttribute("data-"+e)}),n.attributes.popper={})}},c={name:"arrow",enabled:!!u,options:{element:u,padding:3}},l=[{name:"offset",options:{offset:r}},{name:"preventOverflow",options:{padding:{top:2,bottom:2,left:5,right:5}}},{name:"flip",options:{padding:5}},{name:"computeStyles",options:{adaptive:!i}}].concat(T()?[c]:[],(null==t?void 0:t.modifiers)||[],[a]);y.popperInstance=te.createPopper(s,E,Object.assign({},t,{placement:n,onFirstUpdate:p,modifiers:l}))}function Q(){y.popperInstance&&(y.popperInstance.destroy(),y.popperInstance=null)}function $(){return le(E.querySelectorAll("[data-tippy-root]"))}function K(e){y.clearDelayTimeouts(),e&&O("onTrigger",[y,e]),H();var t=k(!0);t?i=setTimeout(function(){y.show()},t):y.show()}function Z(e){var t;y.clearDelayTimeouts(),O("onUntrigger",[y,e]),y.state.isVisible?0<=y.props.trigger.indexOf("mouseenter")&&0<=y.props.trigger.indexOf("click")&&0<=["mouseleave","mousemove"].indexOf(e.type)&&l||((t=k(!1))?n=setTimeout(function(){y.state.isVisible&&y.hide()},t):r=requestAnimationFrame(function(){y.hide()})):R()}}function L(e,t){void 0===t&&(t={});var n,r,o,i=Ce.plugins.concat(t.plugins||[]);"production"!==ee.env.NODE_ENV&&(r=!(n=e),o="[object Object]"===Object.prototype.toString.call(n)&&!n.addEventListener,be(r,["tippy() was passed","`"+String(n)+"`","as its targets (first) argument. Valid types are: String, Element,","Element[], or NodeList."].join(" ")),be(o,["tippy() was passed a plain object which is not supported as an argument","for virtual positioning. Use props.getReferenceClientRect instead."].join(" ")),y(t,i)),document.addEventListener("touchstart",h,Object.assign({},ne,{capture:!0})),window.addEventListener("blur",d);var u,s,a=Object.assign({},t,{plugins:i}),c=f(e);"production"!==ee.env.NODE_ENV&&(u=p(a.content),s=1<c.length,Ee(u&&s,["tippy() was passed an Element as the `content` prop, but more than","one tippy instance was created by this invocation. This means the","content element will only be appended to the last tippy instance.","\n\n","Instead, pass the .innerHTML of the element, or use a function that","returns a cloned version of the element instead.","\n\n","1) content: element.innerHTML\n","2) content: () => element.cloneNode(true)"].join(" ")));var l=c.reduce(function(e,t){var n=t&&B(t,a);return n&&e.push(n),e},[]);return p(e)?l[0]:l}L.defaultProps=Ce,L.setDefaultProps=function(t){"production"!==ee.env.NODE_ENV&&y(t,[]),Object.keys(t).forEach(function(e){Ce[e]=t[e]})},L.currentInput=ve;var T={mouseover:"mouseenter",focusin:"focus",click:"click"};var A={name:"animateFill",defaultValue:!1,fn:function(e){var t;if(null==(t=e.props.render)||!t.$$tippy)return"production"!==ee.env.NODE_ENV&&be(e.props.animateFill,"The `animateFill` plugin requires the default render function."),{};var n,r=Le(e.popper),o=r.box,i=r.content,u=e.props.animateFill?((n=De()).className=s,he([n],"hidden"),n):null;return{onCreate:function(){u&&(o.insertBefore(u,o.firstElementChild),o.setAttribute("data-animatefill",""),o.style.overflow="hidden",e.setProps({arrow:!1,animation:"shift-away"}))},onMount:function(){var e,t;u&&(e=o.style.transitionDuration,t=Number(e.replace("ms","")),i.style.transitionDelay=Math.round(t/10)+"ms",u.style.transitionDuration=e,he([u],"visible"))},onShow:function(){u&&(u.style.transitionDuration="0ms")},onHide:function(){u&&he([u],"hidden")}}}};var S={name:"followCursor",defaultValue:!1,fn:function(r){var p=r.reference,e=de(r.props.triggerTarget||p),o=null;function t(){return"manual"===r.props.trigger.trim()}function n(){var e=!!t()||null!==o&&!(0===o.clientX&&0===o.clientY);return r.props.followCursor&&e}function i(e){e&&r.setProps({getReferenceClientRect:null})}function u(){n()?e.addEventListener("mousemove",s):i(r.props.followCursor)}function f(){e.removeEventListener("mousemove",s)}function s(e){o={clientX:e.clientX,clientY:e.clientY};var t=!e.target||p.contains(e.target),s=r.props.followCursor,a=e.clientX,c=e.clientY,n=p.getBoundingClientRect(),l=a-n.left,D=c-n.top;!t&&r.props.interactive||r.setProps({getReferenceClientRect:function(){var e=p.getBoundingClientRect(),t=a,n=c;"initial"===s&&(t=e.left+l,n=e.top+D);var r="horizontal"===s?e.top:n,o="vertical"===s?e.right:t,i="horizontal"===s?e.bottom:n,u="vertical"===s?e.left:t;return{width:o-u,height:i-r,top:r,right:o,bottom:i,left:u}}}),(ve.isTouch||"initial"===r.props.followCursor&&r.state.isVisible)&&f()}return{onAfterUpdate:function(e,t){var n=t.followCursor;void 0===n||n||i(!0)},onMount:function(){n()&&s(o)},onShow:function(){t()&&(o={clientX:0,clientY:0},u())},onTrigger:function(e,t){o||(pe(t)&&(o={clientX:t.clientX,clientY:t.clientY}),u())},onUntrigger:function(){r.state.isVisible||(f(),o=null)},onHidden:function(){f(),o=null}}}},k={name:"inlinePositioning",defaultValue:!1,fn:function(n){var r,o=n.reference;var t={name:"tippyInlinePositioning",enabled:!0,phase:"afterWrite",fn:function(e){var t=e.state;n.props.inlinePositioning&&(r!==t.placement&&n.setProps({getReferenceClientRect:function(){return function(t,e,n){if(n.length<2||null===t)return e;switch(t){case"top":case"bottom":var r=n[0],o=n[n.length-1],i="top"===t,u=r.top,s=o.bottom,a=i?r.left:o.left,c=i?r.right:o.right;return{top:u,bottom:s,left:a,right:c,width:c-a,height:s-u};case"left":case"right":var l=Math.min.apply(Math,n.map(function(e){return e.left})),D=Math.max.apply(Math,n.map(function(e){return e.right})),p=n.filter(function(e){return"left"===t?e.left===l:e.right===D}),f=p[0].top,h=p[p.length-1].bottom;return{top:f,bottom:h,left:l,right:D,width:D-l,height:h-f};default:return e}}(ce(t.placement),o.getBoundingClientRect(),le(o.getClientRects()))}}),r=t.placement)}};return{onCreate:function(){var e;n.setProps({popperOptions:Object.assign({},n.props.popperOptions,{modifiers:[].concat((null==(e=n.props.popperOptions)?void 0:e.modifiers)||[],[t])})})}}}};var P={name:"sticky",defaultValue:!1,fn:function(n){var r=n.reference,o=n.popper;function i(e){return!0===n.props.sticky||n.props.sticky===e}var u=null,s=null;function a(){var e=i("reference")?(n.popperInstance?n.popperInstance.state.elements.reference:r).getBoundingClientRect():null,t=i("popper")?o.getBoundingClientRect():null;(e&&I(u,e)||t&&I(s,t))&&n.popperInstance&&n.popperInstance.update(),u=e,s=t,n.state.isMounted&&requestAnimationFrame(a)}return{onMount:function(){n.props.sticky&&a()}}}};function I(e,t){return!e||!t||(e.top!==t.top||e.right!==t.right||e.bottom!==t.bottom||e.left!==t.left)}L.setDefaultProps({render:w}),x.animateFill=A,x.createSingleton=function(i,u){var s;void 0===u&&(u={}),"production"!==ee.env.NODE_ENV&&be(!Array.isArray(i),["The first argument passed to createSingleton() must be an array of","tippy instances. The passed value was",String(i)].join(" ")),i.forEach(function(e){e.disable()});var a=i.map(function(e){return e.reference}),e={fn:function(){return{onDestroy:function(){i.forEach(function(e){e.enable()})},onTrigger:function(e,t){var n,r=t.currentTarget,o=a.indexOf(r);r!==s&&(s=r,n=(u.overrides||[]).concat("content").reduce(function(e,t){return e[t]=i[o].props[t],e},{}),e.setProps(Object.assign({},n,{getReferenceClientRect:function(){return r.getBoundingClientRect()}})))}}}};return L(De(),Object.assign({},D(u,["overrides"]),{plugins:[e].concat(u.plugins||[]),triggerTarget:a}))},x.default=L,x.delegate=function(e,r){"production"!==ee.env.NODE_ENV&&be(!(r&&r.target),["You must specity a `target` prop indicating a CSS selector string matching","the target elements that should receive a tippy."].join(" "));var o=[],i=[],u=r.target,t=D(r,["target"]),n=Object.assign({},t,{trigger:"manual"}),s=Object.assign({},t,{showOnCreate:!0}),a=L(e,n);function c(e){var t,n;!e.target||(t=e.target.closest(u))&&((t.getAttribute("data-tippy-trigger")||r.trigger||Ce.trigger).indexOf(T[e.type])<0||t._tippy||(n=L(t,s))&&(i=i.concat(n)))}function l(e,t,n,r){void 0===r&&(r=!1),e.addEventListener(t,n,r),o.push({node:e,eventType:t,handler:n,options:r})}return se(a).forEach(function(e){var t,n=e.destroy;e.destroy=function(e){void 0===e&&(e=!0),e&&i.forEach(function(e){e.destroy()}),i=[],o.forEach(function(e){var t=e.node,n=e.eventType,r=e.handler,o=e.options;t.removeEventListener(n,r,o)}),o=[],n()},l(t=e.reference,"mouseover",c),l(t,"focusin",c),l(t,"click",c)}),a},x.followCursor=S,x.hideAll=function(e){var t=void 0===e?{}:e,r=t.exclude,o=t.duration;Se.forEach(function(e){var t,n=!1;r&&(n=u(r)?e.reference===r:e.popper===r.popper),n||(t=e.props.duration,e.setProps({duration:o}),e.hide(),e.state.isDestroyed||e.setProps({duration:t}))})},x.inlinePositioning=k,x.roundArrow='<svg width="16" height="6" xmlns="http://www.w3.org/2000/svg"><path d="M0 6s1.796-.013 4.67-3.615C5.851.9 6.93.006 8 0c1.07-.006 2.148.887 3.343 2.385C14.233 6.005 16 6 16 6H0z"></svg>',x.sticky=P}).call(this,O("_process"))},{"@popperjs/core":25,_process:29}]},{},[1]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJjb250ZW50L2NoYXQuanMiLCJub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9zaWduYWxyL2Rpc3QvY2pzL0Fib3J0Q29udHJvbGxlci5qcyIsIm5vZGVfbW9kdWxlcy9AbWljcm9zb2Z0L3NpZ25hbHIvZGlzdC9janMvRGVmYXVsdEh0dHBDbGllbnQuanMiLCJub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9zaWduYWxyL2Rpc3QvY2pzL0RlZmF1bHRSZWNvbm5lY3RQb2xpY3kuanMiLCJub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9zaWduYWxyL2Rpc3QvY2pzL0Vycm9ycy5qcyIsIm5vZGVfbW9kdWxlcy9AbWljcm9zb2Z0L3NpZ25hbHIvZGlzdC9janMvSGFuZHNoYWtlUHJvdG9jb2wuanMiLCJub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9zaWduYWxyL2Rpc3QvY2pzL0h0dHBDbGllbnQuanMiLCJub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9zaWduYWxyL2Rpc3QvY2pzL0h0dHBDb25uZWN0aW9uLmpzIiwibm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvc2lnbmFsci9kaXN0L2Nqcy9IdWJDb25uZWN0aW9uLmpzIiwibm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvc2lnbmFsci9kaXN0L2Nqcy9IdWJDb25uZWN0aW9uQnVpbGRlci5qcyIsIm5vZGVfbW9kdWxlcy9AbWljcm9zb2Z0L3NpZ25hbHIvZGlzdC9janMvSUh1YlByb3RvY29sLmpzIiwibm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvc2lnbmFsci9kaXN0L2Nqcy9JTG9nZ2VyLmpzIiwibm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvc2lnbmFsci9kaXN0L2Nqcy9JVHJhbnNwb3J0LmpzIiwibm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvc2lnbmFsci9kaXN0L2Nqcy9Kc29uSHViUHJvdG9jb2wuanMiLCJub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9zaWduYWxyL2Rpc3QvY2pzL0xvZ2dlcnMuanMiLCJub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9zaWduYWxyL2Rpc3QvY2pzL0xvbmdQb2xsaW5nVHJhbnNwb3J0LmpzIiwibm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvc2lnbmFsci9kaXN0L2Nqcy9Ob2RlSHR0cENsaWVudC5qcyIsIm5vZGVfbW9kdWxlcy9AbWljcm9zb2Z0L3NpZ25hbHIvZGlzdC9janMvU2VydmVyU2VudEV2ZW50c1RyYW5zcG9ydC5qcyIsIm5vZGVfbW9kdWxlcy9AbWljcm9zb2Z0L3NpZ25hbHIvZGlzdC9janMvU3ViamVjdC5qcyIsIm5vZGVfbW9kdWxlcy9AbWljcm9zb2Z0L3NpZ25hbHIvZGlzdC9janMvVGV4dE1lc3NhZ2VGb3JtYXQuanMiLCJub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9zaWduYWxyL2Rpc3QvY2pzL1V0aWxzLmpzIiwibm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvc2lnbmFsci9kaXN0L2Nqcy9XZWJTb2NrZXRUcmFuc3BvcnQuanMiLCJub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9zaWduYWxyL2Rpc3QvY2pzL1hockh0dHBDbGllbnQuanMiLCJub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9zaWduYWxyL2Rpc3QvY2pzL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2Rpc3QvY2pzL3BvcHBlci5qcyIsIm5vZGVfbW9kdWxlcy9iYXNlNjQtanMvaW5kZXguanMiLCJub2RlX21vZHVsZXMvYnVmZmVyL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2llZWU3NTQvaW5kZXguanMiLCJub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL3RpcHB5LmpzL2Rpc3QvdGlwcHkuY2pzLmpzIl0sIm5hbWVzIjpbInIiLCJlIiwibiIsInQiLCJvIiwiaSIsImYiLCJjIiwicmVxdWlyZSIsInUiLCJhIiwiRXJyb3IiLCJjb2RlIiwicCIsImV4cG9ydHMiLCJjYWxsIiwibGVuZ3RoIiwiMSIsIm1vZHVsZSIsInNpZ25hbFIiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl90aXBweSIsInNlbmRCdXR0b24iLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiZGlzYWJsZWQiLCJjaGF0SW5wdXQiLCJ3aW5kb3ciLCJ3aWtpbXZjY2hhdCIsImNvbm5lY3Rpb24iLCJtZXNzYWdlTGlzdFVsIiwidXNlck5hbWVzcGFjZSIsImluaXQiLCJ1cmwiLCJ0b3BpY0lkIiwibWVzc2FnZXMiLCJ1bCIsImNyZWF0ZUVsZW1lbnQiLCJKU09OIiwicGFyc2UiLCJsYXN0IiwiX2kiLCJhZGRNZXNzYWdlIiwiY29uY2F0IiwiaWQiLCJjbGFzc0xpc3QiLCJjb250YWlucyIsImFkZCIsIkh1YkNvbm5lY3Rpb25CdWlsZGVyIiwid2l0aFVybCIsIndpdGhBdXRvbWF0aWNSZWNvbm5lY3QiLCJidWlsZCIsIm9uIiwic3RhcnQiLCJ0aGVuIiwiZXJyIiwiY29uc29sZSIsImVycm9yIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwibWVzc2FnZSIsInZhbHVlIiwiaW52b2tlIiwibWFya2Rvd24iLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsImlzUmVwbHkiLCJub21lc3NhZ2VzIiwibWVzc2FnZUxpIiwibWVzc2FnZURpdiIsIm1lc3NhZ2VIZWFkZXIiLCJzZW5kZXIiLCJ1c2VybmFtZSIsIl91c2VyTGluayIsInVzZXJTcGFuIiwicmVhY3Rpb25zU3BhbiIsIm1lc3NhZ2VUaW1lc3RhbXAiLCJ0aW1lc3RhbXAiLCJ0aHJlYWRUb2dnbGVyIiwibWVzc2FnZUNvbnRlbnQiLCJjb250ZW50IiwiY29sbGFwc2VUb2dnbGVyIiwidG9nZ2xlTGluayIsInBhcmVudCIsImNoaWxkTWVzc2FnZUxpc3QiLCJyZXBseURpdiIsImZvcm1EaXYiLCJmb3JtTGFiZWwiLCJmb3JtVGV4dEFyZWEiLCJyZXBseUJ1dHRvbiIsInJlcGx5TWVzc2FnZUlkIiwidGVzdCIsInRoaXMiLCJhZGRSZWFjdGlvbiIsInJlbW92ZSIsImFwcGVuZENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJzZW5kZXJOYW1lIiwic2VuZGVyRXhpc3RzIiwiaHJlZiIsInNlbmRlcklkIiwidGl0bGUiLCJ1c2VyTGluayIsIkRhdGUiLCJ0b0xvY2FsZVN0cmluZyIsImlubmVySFRNTCIsIm9uY2xpY2siLCJ0YXJnZXQiLCJwYXJlbnRFbGVtZW50IiwidG9nZ2xlIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJodG1sRm9yIiwidGV4dENvbnRlbnQiLCJ0eXBlIiwicmVwbHkiLCJzcmNFbGVtZW50Iiwic3Vic3RyIiwibWVzc2FnZUlkIiwicGFyc2VJbnQiLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsInJlYWN0aW9uIiwicGFyZW50UmVhY3Rpb25TcGFuIiwidHlwZU5hbWUiLCJyZXBsYWNlIiwiYWRkUmVhY3Rpb25MaXN0IiwiYWRkUmVhY3Rpb25Ub0xpc3QiLCJzcGFuIiwicmVhY3Rpb25UeXBlU3BhbiIsInJlYWN0aW9uSWNvblNwYW4iLCJyZWFjdGlvbkNvdW50U3BhbiIsInJlYWN0aW9uQ291bnQiLCJyZWFjdGlvbkxpc3QiLCJzdHlsZSIsImRpc3BsYXkiLCJwbGFjZW1lbnQiLCJhbGxvd0hUTUwiLCJjb3VudCIsImNvdW50U3BhbiIsInJlYWN0aW9uTGlzdEl0ZW0iLCJfdXNlckxpbmsyIiwicmVhY3Rpb25UaW1lc3RhbXAiLCJsaXN0IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJBYm9ydENvbnRyb2xsZXIiLCJwcm90b3R5cGUiLCJhYm9ydCIsImlzQWJvcnRlZCIsIm9uYWJvcnQiLCJnZXQiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwiZXh0ZW5kU3RhdGljcyIsIl9fZXh0ZW5kcyIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiQXJyYXkiLCJkIiwiYiIsImhhc093blByb3BlcnR5IiwiX18iLCJjb25zdHJ1Y3RvciIsImNyZWF0ZSIsIl9zdXBlciIsIkVycm9yc18xIiwiSHR0cENsaWVudF8xIiwiTm9kZUh0dHBDbGllbnRfMSIsIlhockh0dHBDbGllbnRfMSIsIkRlZmF1bHRIdHRwQ2xpZW50IiwiSHR0cENsaWVudCIsInNlbmQiLCJyZXF1ZXN0IiwiYWJvcnRTaWduYWwiLCJhYm9ydGVkIiwiUHJvbWlzZSIsInJlamVjdCIsIkFib3J0RXJyb3IiLCJtZXRob2QiLCJodHRwQ2xpZW50IiwiZ2V0Q29va2llU3RyaW5nIiwibG9nZ2VyIiwiX3RoaXMiLCJYTUxIdHRwUmVxdWVzdCIsIlhockh0dHBDbGllbnQiLCJOb2RlSHR0cENsaWVudCIsIkRFRkFVTFRfUkVUUllfREVMQVlTX0lOX01JTExJU0VDT05EUyIsIkRlZmF1bHRSZWNvbm5lY3RQb2xpY3kiLCJuZXh0UmV0cnlEZWxheUluTWlsbGlzZWNvbmRzIiwicmV0cnlDb250ZXh0IiwicmV0cnlEZWxheXMiLCJwcmV2aW91c1JldHJ5Q291bnQiLCJ1bmRlZmluZWQiLCJIdHRwRXJyb3IiLCJlcnJvck1lc3NhZ2UiLCJzdGF0dXNDb2RlIiwidHJ1ZVByb3RvIiwiVGltZW91dEVycm9yIiwiVGV4dE1lc3NhZ2VGb3JtYXRfMSIsIlV0aWxzXzEiLCJIYW5kc2hha2VQcm90b2NvbCIsIndyaXRlSGFuZHNoYWtlUmVxdWVzdCIsImhhbmRzaGFrZVJlcXVlc3QiLCJUZXh0TWVzc2FnZUZvcm1hdCIsIndyaXRlIiwic3RyaW5naWZ5IiwicGFyc2VIYW5kc2hha2VSZXNwb25zZSIsImRhdGEiLCJpc0FycmF5QnVmZmVyIiwiQnVmZmVyIiwiYmluYXJ5RGF0YSIsIlVpbnQ4QXJyYXkiLCJzZXBhcmF0b3JJbmRleCIsImluZGV4T2YiLCJSZWNvcmRTZXBhcmF0b3JDb2RlIiwicmVzcG9uc2VMZW5ndGgiLCJtZXNzYWdlRGF0YSIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImFwcGx5Iiwic2xpY2UiLCJyZW1haW5pbmdEYXRhIiwiYnl0ZUxlbmd0aCIsImJ1ZmZlciIsInRleHREYXRhIiwiUmVjb3JkU2VwYXJhdG9yIiwic3Vic3RyaW5nIiwicmVzcG9uc2UiLCJfX2Fzc2lnbiIsImFzc2lnbiIsInMiLCJhcmd1bWVudHMiLCJIdHRwUmVzcG9uc2UiLCJzdGF0dXNUZXh0Iiwib3B0aW9ucyIsInBvc3QiLCJkZWxldGUiLCJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJyZXNvbHZlIiwiZnVsZmlsbGVkIiwic3RlcCIsIm5leHQiLCJyZWplY3RlZCIsInJlc3VsdCIsImRvbmUiLCJfX2dlbmVyYXRvciIsImJvZHkiLCJ5IiwiXyIsImxhYmVsIiwic2VudCIsInRyeXMiLCJvcHMiLCJnIiwidmVyYiIsInRocm93IiwicmV0dXJuIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJ2Iiwib3AiLCJUeXBlRXJyb3IiLCJwb3AiLCJwdXNoIiwicmVxdWlyZUZ1bmMiLCJEZWZhdWx0SHR0cENsaWVudF8xIiwiSUxvZ2dlcl8xIiwiSVRyYW5zcG9ydF8xIiwiTG9uZ1BvbGxpbmdUcmFuc3BvcnRfMSIsIlNlcnZlclNlbnRFdmVudHNUcmFuc3BvcnRfMSIsIldlYlNvY2tldFRyYW5zcG9ydF8xIiwiV2ViU29ja2V0TW9kdWxlIiwiRXZlbnRTb3VyY2VNb2R1bGUiLCJQbGF0Zm9ybSIsImlzTm9kZSIsIl9fd2VicGFja19yZXF1aXJlX18iLCJfX25vbl93ZWJwYWNrX3JlcXVpcmVfXyIsIkh0dHBDb25uZWN0aW9uIiwidHJhbnNmZXJGb3JtYXQiLCJfYSIsIlRyYW5zZmVyRm9ybWF0IiwiQmluYXJ5IiwiQXJnIiwiaXNJbiIsImxvZyIsIkxvZ0xldmVsIiwiRGVidWciLCJjb25uZWN0aW9uU3RhdGUiLCJzdGFydEludGVybmFsUHJvbWlzZSIsInN0YXJ0SW50ZXJuYWwiLCJzdG9wUHJvbWlzZSIsImNvbm5lY3Rpb25TdGFydGVkIiwic2VuZFF1ZXVlIiwiVHJhbnNwb3J0U2VuZFF1ZXVlIiwidHJhbnNwb3J0Iiwic3RvcCIsInN0b3BQcm9taXNlUmVzb2x2ZXIiLCJzdG9wSW50ZXJuYWwiLCJlXzIiLCJlXzMiLCJzdG9wRXJyb3IiLCJzdG9wQ29ubmVjdGlvbiIsIm5lZ290aWF0ZVJlc3BvbnNlIiwicmVkaXJlY3RzIiwiX2xvb3BfMSIsInRoaXNfMSIsImVfNCIsImJhc2VVcmwiLCJhY2Nlc3NUb2tlbkZhY3RvcnkiLCJza2lwTmVnb3RpYXRpb24iLCJIdHRwVHJhbnNwb3J0VHlwZSIsIldlYlNvY2tldHMiLCJjb25zdHJ1Y3RUcmFuc3BvcnQiLCJzdGFydFRyYW5zcG9ydCIsImFjY2Vzc1Rva2VuXzEiLCJnZXROZWdvdGlhdGlvblJlc3BvbnNlIiwiUHJvdG9jb2xWZXJzaW9uIiwiYWNjZXNzVG9rZW4iLCJjcmVhdGVUcmFuc3BvcnQiLCJMb25nUG9sbGluZ1RyYW5zcG9ydCIsImZlYXR1cmVzIiwiaW5oZXJlbnRLZWVwQWxpdmUiLCJoZWFkZXJzIiwidG9rZW4iLCJuZWdvdGlhdGVVcmwiLCJlXzUiLCJfYiIsInJlc29sdmVOZWdvdGlhdGVVcmwiLCJuZWdvdGlhdGVWZXJzaW9uIiwiY29ubmVjdGlvblRva2VuIiwiY29ubmVjdGlvbklkIiwiY3JlYXRlQ29ubmVjdFVybCIsInJlcXVlc3RlZFRyYW5zcG9ydCIsInJlcXVlc3RlZFRyYW5zZmVyRm9ybWF0IiwiY29ubmVjdFVybCIsInRyYW5zcG9ydEV4Y2VwdGlvbnMiLCJ0cmFuc3BvcnRzIiwibmVnb3RpYXRlIiwidHJhbnNwb3J0c18xIiwiZW5kcG9pbnQiLCJ0cmFuc3BvcnRPckVycm9yIiwiZXhfMSIsImV4XzIiLCJpc0lUcmFuc3BvcnQiLCJhdmFpbGFibGVUcmFuc3BvcnRzIiwicmVzb2x2ZVRyYW5zcG9ydE9yRXJyb3IiLCJqb2luIiwiV2ViU29ja2V0IiwiV2ViU29ja2V0VHJhbnNwb3J0IiwibG9nTWVzc2FnZUNvbnRlbnQiLCJTZXJ2ZXJTZW50RXZlbnRzIiwiRXZlbnRTb3VyY2UiLCJTZXJ2ZXJTZW50RXZlbnRzVHJhbnNwb3J0IiwiTG9uZ1BvbGxpbmciLCJvbnJlY2VpdmUiLCJvbmNsb3NlIiwiY29ubmVjdCIsImFjdHVhbFRyYW5zcG9ydCIsInRyYW5zZmVyRm9ybWF0cyIsIm1hcCIsImV4IiwiSW5mb3JtYXRpb24iLCJXYXJuaW5nIiwicmVzb2x2ZVVybCIsImxhc3RJbmRleE9mIiwiaXNCcm93c2VyIiwiYVRhZyIsImluZGV4IiwiaXNSZXF1aXJlZCIsImNyZWF0ZUxvZ2dlciIsImJ1ZmZlckRhdGEiLCJ0cmFuc3BvcnRSZXN1bHQiLCJQcm9taXNlU291cmNlIiwicHJvbWlzZSIsImV4ZWN1dGluZyIsInNlbmRCdWZmZXJlZERhdGEiLCJzZW5kTG9vcFByb21pc2UiLCJzZW5kTG9vcCIsImVycm9yXzEiLCJjb25jYXRCdWZmZXJzIiwiYXJyYXlCdWZmZXJzIiwidG90YWxMZW5ndGgiLCJyZWR1Y2UiLCJvZmZzZXQiLCJhcnJheUJ1ZmZlcnNfMSIsIml0ZW0iLCJzZXQiLCJyZXNvbHZlciIsInJlYXNvbiIsInJlamVjdGVyIiwiSHViQ29ubmVjdGlvblN0YXRlIiwiSGFuZHNoYWtlUHJvdG9jb2xfMSIsIklIdWJQcm90b2NvbF8xIiwiU3ViamVjdF8xIiwiSHViQ29ubmVjdGlvbiIsInByb3RvY29sIiwicmVjb25uZWN0UG9saWN5IiwiRGlzY29ubmVjdGVkIiwiUmVjb25uZWN0aW5nIiwic3RhcnRQcm9taXNlIiwic3RhcnRXaXRoU3RhdGVUcmFuc2l0aW9ucyIsImVfMSIsIkNvbm5lY3RpbmciLCJDb25uZWN0ZWQiLCJoYW5kc2hha2VQcm9taXNlIiwic3RvcER1cmluZ1N0YXJ0RXJyb3IiLCJyZWNlaXZlZEhhbmRzaGFrZVJlc3BvbnNlIiwiaGFuZHNoYWtlUmVzb2x2ZXIiLCJoYW5kc2hha2VSZWplY3RlciIsIm5hbWUiLCJ2ZXJzaW9uIiwic2VuZE1lc3NhZ2UiLCJoYW5kc2hha2VQcm90b2NvbCIsImNsZWFudXBUaW1lb3V0IiwicmVzZXRUaW1lb3V0UGVyaW9kIiwicmVzZXRLZWVwQWxpdmVJbnRlcnZhbCIsImNsZWFudXBQaW5nVGltZXIiLCJEaXNjb25uZWN0aW5nIiwicmVjb25uZWN0RGVsYXlIYW5kbGUiLCJjbGVhclRpbWVvdXQiLCJjb21wbGV0ZUNsb3NlIiwic3RyZWFtIiwibWV0aG9kTmFtZSIsImFyZ3MiLCJwcm9taXNlUXVldWUiLCJyZXBsYWNlU3RyZWFtaW5nUGFyYW1zIiwic3RyZWFtcyIsInN0cmVhbUlkcyIsImludm9jYXRpb25EZXNjcmlwdG9yIiwiY3JlYXRlU3RyZWFtSW52b2NhdGlvbiIsInN1YmplY3QiLCJTdWJqZWN0IiwiY2FuY2VsQ2FsbGJhY2siLCJjYW5jZWxJbnZvY2F0aW9uIiwiY3JlYXRlQ2FuY2VsSW52b2NhdGlvbiIsImludm9jYXRpb25JZCIsImNhbGxiYWNrcyIsInNlbmRXaXRoUHJvdG9jb2wiLCJpbnZvY2F0aW9uRXZlbnQiLCJNZXNzYWdlVHlwZSIsIkNvbXBsZXRpb24iLCJjb21wbGV0ZSIsImNhdGNoIiwibGF1bmNoU3RyZWFtcyIsIndyaXRlTWVzc2FnZSIsInNlbmRQcm9taXNlIiwiY3JlYXRlSW52b2NhdGlvbiIsIm5ld01ldGhvZCIsInRvTG93ZXJDYXNlIiwibWV0aG9kcyIsIm9mZiIsImhhbmRsZXJzIiwicmVtb3ZlSWR4Iiwic3BsaWNlIiwiY2FsbGJhY2siLCJjbG9zZWRDYWxsYmFja3MiLCJvbnJlY29ubmVjdGluZyIsInJlY29ubmVjdGluZ0NhbGxiYWNrcyIsIm9ucmVjb25uZWN0ZWQiLCJyZWNvbm5lY3RlZENhbGxiYWNrcyIsInByb2Nlc3NJbmNvbWluZ0RhdGEiLCJwcm9jZXNzSGFuZHNoYWtlUmVzcG9uc2UiLCJtZXNzYWdlc18xIiwicGFyc2VNZXNzYWdlcyIsIkludm9jYXRpb24iLCJpbnZva2VDbGllbnRNZXRob2QiLCJTdHJlYW1JdGVtIiwiUGluZyIsIkNsb3NlIiwiYWxsb3dSZWNvbm5lY3QiLCJyZXNwb25zZU1lc3NhZ2UiLCJwaW5nU2VydmVySGFuZGxlIiwic2V0VGltZW91dCIsImNhY2hlZFBpbmdNZXNzYWdlIiwia2VlcEFsaXZlSW50ZXJ2YWxJbk1pbGxpc2Vjb25kcyIsInRpbWVvdXRIYW5kbGUiLCJzZXJ2ZXJUaW1lb3V0Iiwic2VydmVyVGltZW91dEluTWlsbGlzZWNvbmRzIiwiaW52b2NhdGlvbk1lc3NhZ2UiLCJmb3JFYWNoIiwibSIsImNvbm5lY3Rpb25DbG9zZWQiLCJjYW5jZWxDYWxsYmFja3NXaXRoRXJyb3IiLCJyZWNvbm5lY3QiLCJyZWNvbm5lY3RTdGFydFRpbWUiLCJwcmV2aW91c1JlY29ubmVjdEF0dGVtcHRzIiwicmV0cnlFcnJvciIsIm5leHRSZXRyeURlbGF5Iiwibm93IiwiZ2V0TmV4dFJldHJ5RGVsYXkiLCJ0b1N0cmluZyIsImVsYXBzZWRNaWxsaXNlY29uZHMiLCJyZXRyeVJlYXNvbiIsImtleXMiLCJrZXkiLCJub25ibG9ja2luZyIsInN0cmVhbUlkIiwic3Vic2NyaWJlIiwiY3JlYXRlQ29tcGxldGlvbk1lc3NhZ2UiLCJjcmVhdGVTdHJlYW1JdGVtTWVzc2FnZSIsImFyZ3VtZW50IiwiaXNPYnNlcnZhYmxlIiwiYXJnIiwiU3RyZWFtSW52b2NhdGlvbiIsIkNhbmNlbEludm9jYXRpb24iLCJEZWZhdWx0UmVjb25uZWN0UG9saWN5XzEiLCJIdHRwQ29ubmVjdGlvbl8xIiwiSHViQ29ubmVjdGlvbl8xIiwiSnNvbkh1YlByb3RvY29sXzEiLCJMb2dnZXJzXzEiLCJMb2dMZXZlbE5hbWVNYXBwaW5nIiwidHJhY2UiLCJUcmFjZSIsImRlYnVnIiwiaW5mbyIsImluZm9ybWF0aW9uIiwid2FybiIsIndhcm5pbmciLCJjcml0aWNhbCIsIkNyaXRpY2FsIiwibm9uZSIsIk5vbmUiLCJjb25maWd1cmVMb2dnaW5nIiwibG9nZ2luZyIsImxvZ0xldmVsIiwibWFwcGluZyIsInBhcnNlTG9nTGV2ZWwiLCJDb25zb2xlTG9nZ2VyIiwidHJhbnNwb3J0VHlwZU9yT3B0aW9ucyIsImh0dHBDb25uZWN0aW9uT3B0aW9ucyIsIndpdGhIdWJQcm90b2NvbCIsInJldHJ5RGVsYXlzT3JSZWNvbm5lY3RQb2xpY3kiLCJpc0FycmF5IiwiTnVsbExvZ2dlciIsImluc3RhbmNlIiwiSnNvbkh1YlByb3RvY29sIiwiaW5wdXQiLCJodWJNZXNzYWdlcyIsInBhcnNlZE1lc3NhZ2UiLCJpc0ludm9jYXRpb25NZXNzYWdlIiwiaXNTdHJlYW1JdGVtTWVzc2FnZSIsImlzQ29tcGxldGlvbk1lc3NhZ2UiLCJhc3NlcnROb3RFbXB0eVN0cmluZyIsIlRleHQiLCJfbG9nTGV2ZWwiLCJfbWVzc2FnZSIsIkFib3J0Q29udHJvbGxlcl8xIiwicG9sbEFib3J0IiwicG9sbE9wdGlvbnMiLCJwb2xsVXJsIiwicmVzcG9uc2VUeXBlIiwic2lnbmFsIiwidGltZW91dCIsImdldEFjY2Vzc1Rva2VuIiwidXBkYXRlSGVhZGVyVG9rZW4iLCJjbG9zZUVycm9yIiwicnVubmluZyIsInJlY2VpdmluZyIsInBvbGwiLCJnZXREYXRhRGV0YWlsIiwicG9sbEFib3J0ZWQiLCJyYWlzZU9uQ2xvc2UiLCJkZWxldGVPcHRpb25zIiwibG9nTWVzc2FnZSIsInJlcXVlc3RNb2R1bGUiLCJodHRwUmVxdWVzdCIsInJlcXVlc3RCb2R5IiwiZnJvbSIsImN1cnJlbnRSZXF1ZXN0IiwiZW5jb2RpbmciLCJYLVJlcXVlc3RlZC1XaXRoIiwic3RhdHVzTWVzc2FnZSIsImNvb2tpZUphciIsImphciIsImRlZmF1bHRzIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiY29va2llcyIsImV2ZW50U291cmNlIiwib3BlbmVkIiwiaXNXZWJXb3JrZXIiLCJldmVudFNvdXJjZUNvbnN0cnVjdG9yIiwid2l0aENyZWRlbnRpYWxzIiwiQ29va2llIiwib25tZXNzYWdlIiwiY2xvc2UiLCJvbmVycm9yIiwib25vcGVuIiwib2JzZXJ2ZXJzIiwib2JzZXJ2ZXIiLCJTdWJqZWN0U3Vic2NyaXB0aW9uIiwib3V0cHV0Iiwic3BsaXQiLCJ2YWwiLCJ2YWx1ZXMiLCJzZWxmIiwiaW5jbHVkZUNvbnRlbnQiLCJkZXRhaWwiLCJmb3JtYXRBcnJheUJ1ZmZlciIsInZpZXciLCJzdHIiLCJudW0iLCJBcnJheUJ1ZmZlciIsInRyYW5zcG9ydE5hbWUiLCJkaXNwb3NlIiwibWluaW11bUxvZ0xldmVsIiwib3V0cHV0Q29uc29sZSIsInRvSVNPU3RyaW5nIiwid2ViU29ja2V0Iiwid2ViU29ja2V0Q29uc3RydWN0b3IiLCJiaW5hcnlUeXBlIiwiX2V2ZW50IiwiRXJyb3JFdmVudCIsInJlYWR5U3RhdGUiLCJPUEVOIiwid2FzQ2xlYW4iLCJ4aHIiLCJvcGVuIiwic2V0UmVxdWVzdEhlYWRlciIsImhlYWRlciIsIm9ubG9hZCIsInN0YXR1cyIsInJlc3BvbnNlVGV4dCIsIm9udGltZW91dCIsIlZFUlNJT04iLCJIdWJDb25uZWN0aW9uQnVpbGRlcl8xIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiZWxlbWVudCIsInJlY3QiLCJ3aWR0aCIsImhlaWdodCIsInRvcCIsInJpZ2h0IiwiYm90dG9tIiwibGVmdCIsIngiLCJnZXRXaW5kb3ciLCJub2RlIiwib3duZXJEb2N1bWVudCIsImRlZmF1bHRWaWV3IiwiZ2V0V2luZG93U2Nyb2xsIiwid2luIiwic2Nyb2xsTGVmdCIsInBhZ2VYT2Zmc2V0Iiwic2Nyb2xsVG9wIiwicGFnZVlPZmZzZXQiLCJpc0VsZW1lbnQiLCJFbGVtZW50IiwiaXNIVE1MRWxlbWVudCIsIkhUTUxFbGVtZW50IiwiZ2V0Tm9kZU5hbWUiLCJub2RlTmFtZSIsImdldERvY3VtZW50RWxlbWVudCIsImRvY3VtZW50RWxlbWVudCIsImdldFdpbmRvd1Njcm9sbEJhclgiLCJpc1Njcm9sbFBhcmVudCIsIl9nZXRDb21wdXRlZFN0eWxlIiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJnZXRDb21wb3NpdGVSZWN0IiwiZWxlbWVudE9yVmlydHVhbEVsZW1lbnQiLCJvZmZzZXRQYXJlbnQiLCJpc0ZpeGVkIiwic2Nyb2xsIiwib2Zmc2V0cyIsImNsaWVudExlZnQiLCJjbGllbnRUb3AiLCJnZXRMYXlvdXRSZWN0Iiwib2Zmc2V0TGVmdCIsIm9mZnNldFRvcCIsIm9mZnNldFdpZHRoIiwib2Zmc2V0SGVpZ2h0IiwiZ2V0UGFyZW50Tm9kZSIsImFzc2lnbmVkU2xvdCIsInBhcmVudE5vZGUiLCJob3N0IiwibGlzdFNjcm9sbFBhcmVudHMiLCJzY3JvbGxQYXJlbnQiLCJnZXRTY3JvbGxQYXJlbnQiLCJpc0JvZHkiLCJ2aXN1YWxWaWV3cG9ydCIsInVwZGF0ZWRMaXN0IiwiZ2V0VHJ1ZU9mZnNldFBhcmVudCIsInBvc2l0aW9uIiwiZ2V0T2Zmc2V0UGFyZW50IiwiYXV0byIsImJhc2VQbGFjZW1lbnRzIiwiZW5kIiwiY2xpcHBpbmdQYXJlbnRzIiwidmlld3BvcnQiLCJwb3BwZXIiLCJyZWZlcmVuY2UiLCJ2YXJpYXRpb25QbGFjZW1lbnRzIiwiYWNjIiwicGxhY2VtZW50cyIsIm1vZGlmaWVyUGhhc2VzIiwib3JkZXIiLCJtb2RpZmllcnMiLCJNYXAiLCJ2aXNpdGVkIiwiU2V0IiwibW9kaWZpZXIiLCJoYXMiLCJzb3J0IiwicmVxdWlyZXMiLCJyZXF1aXJlc0lmRXhpc3RzIiwiZGVwIiwiZGVwTW9kaWZpZXIiLCJmb3JtYXQiLCJfbGVuIiwiX2tleSIsIklOVkFMSURfTU9ESUZJRVJfRVJST1IiLCJNSVNTSU5HX0RFUEVOREVOQ1lfRVJST1IiLCJWQUxJRF9QUk9QRVJUSUVTIiwiZ2V0QmFzZVBsYWNlbWVudCIsIklOVkFMSURfRUxFTUVOVF9FUlJPUiIsIkRFRkFVTFRfT1BUSU9OUyIsInN0cmF0ZWd5IiwiYXJlVmFsaWRFbGVtZW50cyIsInNvbWUiLCJwb3BwZXJHZW5lcmF0b3IiLCJnZW5lcmF0b3JPcHRpb25zIiwiX2dlbmVyYXRvck9wdGlvbnMkZGVmIiwiZGVmYXVsdE1vZGlmaWVycyIsIl9nZW5lcmF0b3JPcHRpb25zJGRlZjIiLCJkZWZhdWx0T3B0aW9ucyIsImZuIiwicGVuZGluZyIsInN0YXRlIiwib3JkZXJlZE1vZGlmaWVycyIsIm1vZGlmaWVyc0RhdGEiLCJlbGVtZW50cyIsImF0dHJpYnV0ZXMiLCJzdHlsZXMiLCJlZmZlY3RDbGVhbnVwRm5zIiwiaXNEZXN0cm95ZWQiLCJzZXRPcHRpb25zIiwiY2xlYW51cE1vZGlmaWVyRWZmZWN0cyIsInNjcm9sbFBhcmVudHMiLCJjb250ZXh0RWxlbWVudCIsIm1lcmdlZCIsImFyciIsImlkZW50aWZpZXJzIiwiY3VycmVudCIsImV4aXN0aW5nIiwicGhhc2UiLCJmaWx0ZXIiLCJlbmFibGVkIiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwiX3JlZiIsImlkZW50aWZpZXIiLCJlZmZlY3QiLCJyZXF1aXJlbWVudCIsImZpbmQiLCJtb2QiLCJfcmVmMiIsIm1hcmdpblRvcCIsIm1hcmdpblJpZ2h0IiwibWFyZ2luQm90dG9tIiwibWFyZ2luTGVmdCIsIm1hcmdpbiIsInBhcnNlRmxvYXQiLCJfcmVmMyIsImNsZWFudXBGbiIsIl9yZWYzJG9wdGlvbnMiLCJ1cGRhdGUiLCJmb3JjZVVwZGF0ZSIsIl9zdGF0ZSRlbGVtZW50cyIsInJlY3RzIiwicmVzZXQiLCJfc3RhdGUkb3JkZXJlZE1vZGlmaWUiLCJfc3RhdGUkb3JkZXJlZE1vZGlmaWUyIiwiX29wdGlvbnMiLCJfX2RlYnVnX2xvb3BzX18iLCJkZXN0cm95Iiwib25GaXJzdFVwZGF0ZSIsInBhc3NpdmUiLCJnZXRWYXJpYXRpb24iLCJnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQiLCJjb21wdXRlT2Zmc2V0cyIsImJhc2VQbGFjZW1lbnQiLCJ2YXJpYXRpb24iLCJjb21tb25YIiwiY29tbW9uWSIsIm1haW5BeGlzIiwibGVuIiwiTWF0aCIsImZsb29yIiwiY2VpbCIsInVuc2V0U2lkZXMiLCJtYXBUb1N0eWxlcyIsIl9PYmplY3QkYXNzaWduMiIsImRwciIsInBvcHBlclJlY3QiLCJncHVBY2NlbGVyYXRpb24iLCJhZGFwdGl2ZSIsIl9yb3VuZE9mZnNldHMiLCJkZXZpY2VQaXhlbFJhdGlvIiwicm91bmQiLCJoYXNYIiwiaGFzWSIsInNpZGVYIiwic2lkZVkiLCJjbGllbnRIZWlnaHQiLCJjbGllbnRXaWR0aCIsIl9PYmplY3QkYXNzaWduIiwiY29tbW9uU3R5bGVzIiwidHJhbnNmb3JtIiwiaGFzaCIsImdldE9wcG9zaXRlUGxhY2VtZW50IiwibWF0Y2hlZCIsImhhc2gkMSIsImdldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50IiwidG9OdW1iZXIiLCJjc3NWYWx1ZSIsImdldERlY29yYXRpb25zIiwiY29tcHV0ZWRTdHlsZSIsImJvcmRlcnMiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlclJpZ2h0V2lkdGgiLCJib3JkZXJCb3R0b21XaWR0aCIsImJvcmRlckxlZnRXaWR0aCIsImlzSFRNTCIsIndpblNjcm9sbEJhclgiLCJpbm5lckhlaWdodCIsImlubmVyV2lkdGgiLCJjaGlsZCIsImlzU2hhZG93IiwiQm9vbGVhbiIsImdldFJvb3ROb2RlIiwiaXNTYW1lTm9kZSIsInJlY3RUb0NsaWVudFJlY3QiLCJnZXRDbGllbnRSZWN0RnJvbU1peGVkVHlwZSIsImNsaXBwaW5nUGFyZW50IiwibmF2aWdhdG9yIiwicGxhdGZvcm0iLCJ3aW5TY3JvbGwiLCJkb2N1bWVudFJlY3QiLCJtYXgiLCJnZXRDbGlwcGluZ1JlY3QiLCJib3VuZGFyeSIsInJvb3RCb3VuZGFyeSIsImNsaXBwZXJFbGVtZW50IiwibWFpbkNsaXBwaW5nUGFyZW50cyIsImZpcnN0Q2xpcHBpbmdQYXJlbnQiLCJjbGlwcGluZ1JlY3QiLCJhY2NSZWN0IiwiZGVjb3JhdGlvbnMiLCJtaW4iLCJnZXRGcmVzaFNpZGVPYmplY3QiLCJtZXJnZVBhZGRpbmdPYmplY3QiLCJwYWRkaW5nT2JqZWN0IiwiZXhwYW5kVG9IYXNoTWFwIiwiaGFzaE1hcCIsImRldGVjdE92ZXJmbG93IiwiX29wdGlvbnMkcGxhY2VtZW50IiwiX29wdGlvbnMkYm91bmRhcnkiLCJfb3B0aW9ucyRyb290Qm91bmRhcnkiLCJfb3B0aW9ucyRlbGVtZW50Q29udGUiLCJlbGVtZW50Q29udGV4dCIsIl9vcHRpb25zJGFsdEJvdW5kYXJ5IiwiYWx0Qm91bmRhcnkiLCJfb3B0aW9ucyRwYWRkaW5nIiwicGFkZGluZyIsImFsdENvbnRleHQiLCJyZWZlcmVuY2VFbGVtZW50IiwiY2xpcHBpbmdDbGllbnRSZWN0IiwicmVmZXJlbmNlQ2xpZW50UmVjdCIsInBvcHBlck9mZnNldHMiLCJwb3BwZXJDbGllbnRSZWN0IiwiZWxlbWVudENsaWVudFJlY3QiLCJvdmVyZmxvd09mZnNldHMiLCJvZmZzZXREYXRhIiwibXVsdGlwbHkiLCJheGlzIiwid2l0aGluIiwiZ2V0U2lkZU9mZnNldHMiLCJwcmV2ZW50ZWRPZmZzZXRzIiwiaXNBbnlTaWRlRnVsbHlDbGlwcGVkIiwic2lkZSIsIl9vcHRpb25zJHNjcm9sbCIsIl9vcHRpb25zJHJlc2l6ZSIsInJlc2l6ZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJ0cmFuc2l0aW9uUHJvcGVydHkiLCJfb3B0aW9ucyRncHVBY2NlbGVyYXQiLCJfb3B0aW9ucyRhZGFwdGl2ZSIsInByb3BlcnR5IiwiYXJyb3ciLCJkYXRhLXBvcHBlci1wbGFjZW1lbnQiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJpbml0aWFsU3R5bGVzIiwiYXR0cmlidXRlIiwiX29wdGlvbnMkb2Zmc2V0IiwiaW52ZXJ0RGlzdGFuY2UiLCJza2lkZGluZyIsImRpc3RhbmNlIiwiX2RhdGEkc3RhdGUkcGxhY2VtZW50IiwiX3NraXAiLCJfb3B0aW9ucyRtYWluQXhpcyIsImNoZWNrTWFpbkF4aXMiLCJfb3B0aW9ucyRhbHRBeGlzIiwiYWx0QXhpcyIsImNoZWNrQWx0QXhpcyIsInNwZWNpZmllZEZhbGxiYWNrUGxhY2VtZW50cyIsImZhbGxiYWNrUGxhY2VtZW50cyIsIl9vcHRpb25zJGZsaXBWYXJpYXRpbyIsImZsaXBWYXJpYXRpb25zIiwiYWxsb3dlZEF1dG9QbGFjZW1lbnRzIiwicHJlZmVycmVkUGxhY2VtZW50Iiwib3Bwb3NpdGVQbGFjZW1lbnQiLCJnZXRFeHBhbmRlZEZhbGxiYWNrUGxhY2VtZW50cyIsIl9vcHRpb25zJGFsbG93ZWRBdXRvUCIsIm92ZXJmbG93cyIsImNvbXB1dGVBdXRvUGxhY2VtZW50IiwicmVmZXJlbmNlUmVjdCIsImNoZWNrc01hcCIsIm1ha2VGYWxsYmFja0NoZWNrcyIsImZpcnN0Rml0dGluZ1BsYWNlbWVudCIsIl9iYXNlUGxhY2VtZW50IiwiaXNTdGFydFZhcmlhdGlvbiIsImlzVmVydGljYWwiLCJtYWluVmFyaWF0aW9uU2lkZSIsImFsdFZhcmlhdGlvblNpZGUiLCJjaGVja3MiLCJldmVyeSIsImNoZWNrIiwiX2xvb3AiLCJmaXR0aW5nUGxhY2VtZW50IiwibWFpblNpZGUiLCJhbHRTaWRlIiwiYWRkaXRpdmUiLCJtaW5MZW4iLCJtYXhMZW4iLCJhcnJvd0VsZW1lbnQiLCJhcnJvd1JlY3QiLCJhcnJvd1BhZGRpbmdPYmplY3QiLCJhcnJvd1BhZGRpbmdNaW4iLCJhcnJvd1BhZGRpbmdNYXgiLCJhcnJvd0xlbiIsIm1pbk9mZnNldCIsIm1heE9mZnNldCIsImFycm93T2Zmc2V0UGFyZW50IiwiY2xpZW50T2Zmc2V0Iiwib2Zmc2V0TW9kaWZpZXJWYWx1ZSIsInRldGhlck1pbiIsInRldGhlck1heCIsInByZXZlbnRlZE9mZnNldCIsIl9tYWluU2lkZSIsIl9hbHRTaWRlIiwiX29mZnNldCIsIl9wcmV2ZW50ZWRPZmZzZXQiLCJfb3B0aW9ucyR0ZXRoZXIiLCJ0ZXRoZXIiLCJfb3B0aW9ucyR0ZXRoZXJPZmZzZXQiLCJ0ZXRoZXJPZmZzZXQiLCJpc0Jhc2VQbGFjZW1lbnQiLCJ0ZXRoZXJPZmZzZXRWYWx1ZSIsIl9zdGF0ZSRtb2RpZmllcnNEYXRhJCIsIm1pblByb3AiLCJtYXhQcm9wIiwiZW5kRGlmZiIsInN0YXJ0RGlmZiIsImNsaWVudFNpemUiLCJjZW50ZXJUb1JlZmVyZW5jZSIsImNlbnRlciIsImNlbnRlck9mZnNldCIsIl9vcHRpb25zJGVsZW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwicHJldmVudE92ZXJmbG93IiwicmVmZXJlbmNlT3ZlcmZsb3ciLCJwb3BwZXJBbHRPdmVyZmxvdyIsInJlZmVyZW5jZUNsaXBwaW5nT2Zmc2V0cyIsInBvcHBlckVzY2FwZU9mZnNldHMiLCJpc1JlZmVyZW5jZUhpZGRlbiIsImhhc1BvcHBlckVzY2FwZWQiLCJkYXRhLXBvcHBlci1yZWZlcmVuY2UtaGlkZGVuIiwiZGF0YS1wb3BwZXItZXNjYXBlZCIsImNyZWF0ZVBvcHBlciIsImI2NCIsImxlbnMiLCJnZXRMZW5zIiwidmFsaWRMZW4iLCJwbGFjZUhvbGRlcnNMZW4iLCJ0b0J5dGVBcnJheSIsInRtcCIsIkFyciIsIl9ieXRlTGVuZ3RoIiwiY3VyQnl0ZSIsInJldkxvb2t1cCIsImNoYXJDb2RlQXQiLCJmcm9tQnl0ZUFycmF5IiwidWludDgiLCJleHRyYUJ5dGVzIiwicGFydHMiLCJsZW4yIiwiZW5jb2RlQ2h1bmsiLCJsb29rdXAiLCJiYXNlNjQiLCJpZWVlNzU0IiwiY3VzdG9tSW5zcGVjdFN5bWJvbCIsImZvciIsIlNsb3dCdWZmZXIiLCJhbGxvYyIsIklOU1BFQ1RfTUFYX0JZVEVTIiwiS19NQVhfTEVOR1RIIiwiY3JlYXRlQnVmZmVyIiwiUmFuZ2VFcnJvciIsImJ1ZiIsImVuY29kaW5nT3JPZmZzZXQiLCJhbGxvY1Vuc2FmZSIsInN0cmluZyIsImlzRW5jb2RpbmciLCJhY3R1YWwiLCJmcm9tU3RyaW5nIiwiaXNWaWV3IiwiZnJvbUFycmF5TGlrZSIsImlzSW5zdGFuY2UiLCJmcm9tQXJyYXlCdWZmZXIiLCJTaGFyZWRBcnJheUJ1ZmZlciIsInZhbHVlT2YiLCJvYmoiLCJpc0J1ZmZlciIsImNoZWNrZWQiLCJjb3B5IiwibnVtYmVySXNOYU4iLCJmcm9tT2JqZWN0IiwidG9QcmltaXRpdmUiLCJhc3NlcnRTaXplIiwic2l6ZSIsImFycmF5IiwiYnl0ZU9mZnNldCIsIm11c3RNYXRjaCIsImxvd2VyZWRDYXNlIiwidXRmOFRvQnl0ZXMiLCJiYXNlNjRUb0J5dGVzIiwic3dhcCIsImJpZGlyZWN0aW9uYWxJbmRleE9mIiwiZGlyIiwiYXJyYXlJbmRleE9mIiwiaW5kZXhTaXplIiwiYXJyTGVuZ3RoIiwidmFsTGVuZ3RoIiwicmVhZCIsInJlYWRVSW50MTZCRSIsImZvdW5kSW5kZXgiLCJmb3VuZCIsImoiLCJoZXhXcml0ZSIsIk51bWJlciIsInJlbWFpbmluZyIsInN0ckxlbiIsInBhcnNlZCIsImFzY2lpV3JpdGUiLCJibGl0QnVmZmVyIiwiYnl0ZUFycmF5IiwiYXNjaWlUb0J5dGVzIiwidWNzMldyaXRlIiwidW5pdHMiLCJoaSIsImxvIiwidXRmMTZsZVRvQnl0ZXMiLCJiYXNlNjRTbGljZSIsInV0ZjhTbGljZSIsInJlcyIsInNlY29uZEJ5dGUiLCJ0aGlyZEJ5dGUiLCJmb3VydGhCeXRlIiwidGVtcENvZGVQb2ludCIsImZpcnN0Qnl0ZSIsImNvZGVQb2ludCIsImJ5dGVzUGVyU2VxdWVuY2UiLCJjb2RlUG9pbnRzIiwiTUFYX0FSR1VNRU5UU19MRU5HVEgiLCJkZWNvZGVDb2RlUG9pbnRzQXJyYXkiLCJrTWF4TGVuZ3RoIiwiVFlQRURfQVJSQVlfU1VQUE9SVCIsInByb3RvIiwiZm9vIiwidHlwZWRBcnJheVN1cHBvcnQiLCJwb29sU2l6ZSIsImZpbGwiLCJhbGxvY1Vuc2FmZVNsb3ciLCJfaXNCdWZmZXIiLCJjb21wYXJlIiwicG9zIiwic3dhcDE2Iiwic3dhcDMyIiwic3dhcDY0IiwiaGV4U2xpY2UiLCJhc2NpaVNsaWNlIiwibGF0aW4xU2xpY2UiLCJ1dGYxNmxlU2xpY2UiLCJlcXVhbHMiLCJpbnNwZWN0IiwidHJpbSIsInRoaXNTdGFydCIsInRoaXNFbmQiLCJ0aGlzQ29weSIsInRhcmdldENvcHkiLCJpbmNsdWRlcyIsImlzRmluaXRlIiwidG9KU09OIiwiX2FyciIsInJldCIsIm91dCIsImhleFNsaWNlTG9va3VwVGFibGUiLCJieXRlcyIsImNoZWNrT2Zmc2V0IiwiZXh0IiwiY2hlY2tJbnQiLCJjaGVja0lFRUU3NTQiLCJ3cml0ZUZsb2F0IiwibGl0dGxlRW5kaWFuIiwibm9Bc3NlcnQiLCJ3cml0ZURvdWJsZSIsIm5ld0J1ZiIsInN1YmFycmF5IiwicmVhZFVJbnRMRSIsIm11bCIsInJlYWRVSW50QkUiLCJyZWFkVUludDgiLCJyZWFkVUludDE2TEUiLCJyZWFkVUludDMyTEUiLCJyZWFkVUludDMyQkUiLCJyZWFkSW50TEUiLCJwb3ciLCJyZWFkSW50QkUiLCJyZWFkSW50OCIsInJlYWRJbnQxNkxFIiwicmVhZEludDE2QkUiLCJyZWFkSW50MzJMRSIsInJlYWRJbnQzMkJFIiwicmVhZEZsb2F0TEUiLCJyZWFkRmxvYXRCRSIsInJlYWREb3VibGVMRSIsInJlYWREb3VibGVCRSIsIndyaXRlVUludExFIiwid3JpdGVVSW50QkUiLCJ3cml0ZVVJbnQ4Iiwid3JpdGVVSW50MTZMRSIsIndyaXRlVUludDE2QkUiLCJ3cml0ZVVJbnQzMkxFIiwid3JpdGVVSW50MzJCRSIsIndyaXRlSW50TEUiLCJsaW1pdCIsInN1YiIsIndyaXRlSW50QkUiLCJ3cml0ZUludDgiLCJ3cml0ZUludDE2TEUiLCJ3cml0ZUludDE2QkUiLCJ3cml0ZUludDMyTEUiLCJ3cml0ZUludDMyQkUiLCJ3cml0ZUZsb2F0TEUiLCJ3cml0ZUZsb2F0QkUiLCJ3cml0ZURvdWJsZUxFIiwid3JpdGVEb3VibGVCRSIsInRhcmdldFN0YXJ0IiwiY29weVdpdGhpbiIsIklOVkFMSURfQkFTRTY0X1JFIiwiSW5maW5pdHkiLCJsZWFkU3Vycm9nYXRlIiwiYmFzZTY0Y2xlYW4iLCJzcmMiLCJkc3QiLCJhbHBoYWJldCIsInRhYmxlIiwiaTE2IiwiaXNMRSIsIm1MZW4iLCJuQnl0ZXMiLCJlTGVuIiwiZU1heCIsImVCaWFzIiwibkJpdHMiLCJOYU4iLCJydCIsImFicyIsImlzTmFOIiwiTE4yIiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsImN1cnJlbnRRdWV1ZSIsInF1ZXVlIiwiZHJhaW5pbmciLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiZHJhaW5RdWV1ZSIsInJ1biIsIm1hcmtlciIsInJ1bkNsZWFyVGltZW91dCIsIkl0ZW0iLCJub29wIiwibmV4dFRpY2siLCJicm93c2VyIiwiYXJndiIsInZlcnNpb25zIiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImxpc3RlbmVycyIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsInVtYXNrIiwiY29yZSIsIlBBU1NJVkUiLCJJT1NfQ0xBU1MiLCJDT05URU5UX0NMQVNTIiwiQkFDS0RST1BfQ0xBU1MiLCJBUlJPV19DTEFTUyIsIlNWR19BUlJPV19DTEFTUyIsImdldFZhbHVlQXRJbmRleE9yUmV0dXJuIiwiZGVmYXVsdFZhbHVlIiwiaXNUeXBlIiwiaW52b2tlV2l0aEFyZ3NPclJldHVybiIsImRlYm91bmNlIiwibXMiLCJyZW1vdmVQcm9wZXJ0aWVzIiwiY2xvbmUiLCJub3JtYWxpemVUb0FycmF5IiwicHVzaElmVW5pcXVlIiwiYXJyYXlGcm9tIiwiZGl2IiwiaXNNb3VzZUV2ZW50IiwiaXNSZWZlcmVuY2VFbGVtZW50IiwiZ2V0QXJyYXlPZkVsZW1lbnRzIiwicXVlcnlTZWxlY3RvckFsbCIsInNldFRyYW5zaXRpb25EdXJhdGlvbiIsImVscyIsImVsIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwic2V0VmlzaWJpbGl0eVN0YXRlIiwiZ2V0T3duZXJEb2N1bWVudCIsImVsZW1lbnRPckVsZW1lbnRzIiwidXBkYXRlVHJhbnNpdGlvbkVuZExpc3RlbmVyIiwiYm94IiwiYWN0aW9uIiwibGlzdGVuZXIiLCJjdXJyZW50SW5wdXQiLCJpc1RvdWNoIiwibGFzdE1vdXNlTW92ZVRpbWUiLCJvbkRvY3VtZW50VG91Y2hTdGFydCIsInBlcmZvcm1hbmNlIiwib25Eb2N1bWVudE1vdXNlTW92ZSIsIm9uV2luZG93Qmx1ciIsImFjdGl2ZUVsZW1lbnQiLCJibHVyIiwiaXNWaXNpYmxlIiwidWEiLCJ1c2VyQWdlbnQiLCJpc0lFIiwiaXNJT1MiLCJjcmVhdGVNZW1vcnlMZWFrV2FybmluZyIsImNsZWFuIiwiZ2V0Rm9ybWF0dGVkTWVzc2FnZSIsIndhcm5XaGVuIiwiY29uZGl0aW9uIiwiX2NvbnNvbGUiLCJlcnJvcldoZW4iLCJfY29uc29sZTIiLCJwbHVnaW5Qcm9wcyIsImFuaW1hdGVGaWxsIiwiZm9sbG93Q3Vyc29yIiwiaW5saW5lUG9zaXRpb25pbmciLCJzdGlja3kiLCJkZWZhdWx0UHJvcHMiLCJhcHBlbmRUbyIsImFyaWEiLCJleHBhbmRlZCIsImRlbGF5IiwiZHVyYXRpb24iLCJnZXRSZWZlcmVuY2VDbGllbnRSZWN0IiwiaGlkZU9uQ2xpY2siLCJpZ25vcmVBdHRyaWJ1dGVzIiwiaW50ZXJhY3RpdmUiLCJpbnRlcmFjdGl2ZUJvcmRlciIsImludGVyYWN0aXZlRGVib3VuY2UiLCJtb3ZlVHJhbnNpdGlvbiIsIm9uQWZ0ZXJVcGRhdGUiLCJvbkJlZm9yZVVwZGF0ZSIsIm9uQ3JlYXRlIiwib25EZXN0cm95Iiwib25IaWRkZW4iLCJvbkhpZGUiLCJvbk1vdW50Iiwib25TaG93Iiwib25TaG93biIsIm9uVHJpZ2dlciIsIm9uVW50cmlnZ2VyIiwib25DbGlja091dHNpZGUiLCJwbHVnaW5zIiwicG9wcGVyT3B0aW9ucyIsInJlbmRlciIsInNob3dPbkNyZWF0ZSIsInRvdWNoIiwidHJpZ2dlciIsInRyaWdnZXJUYXJnZXQiLCJhbmltYXRpb24iLCJpbmVydGlhIiwibWF4V2lkdGgiLCJyb2xlIiwidGhlbWUiLCJ6SW5kZXgiLCJkZWZhdWx0S2V5cyIsImdldEV4dGVuZGVkUGFzc2VkUHJvcHMiLCJwYXNzZWRQcm9wcyIsInBsdWdpbiIsImV2YWx1YXRlUHJvcHMiLCJwcm9wcyIsInZhbHVlQXNTdHJpbmciLCJnZXRBdHRyaWJ1dGUiLCJ2YWxpZGF0ZVByb3BzIiwicGFydGlhbFByb3BzIiwicHJvcCIsIm5vblBsdWdpblByb3BzIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJodG1sIiwiY3JlYXRlQXJyb3dFbGVtZW50IiwiY2xhc3NOYW1lIiwic2V0Q29udGVudCIsImdldENoaWxkcmVuIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJib3hDaGlsZHJlbiIsImNoaWxkcmVuIiwiYmFja2Ryb3AiLCJvblVwZGF0ZSIsInByZXZQcm9wcyIsIm5leHRQcm9wcyIsIl9nZXRDaGlsZHJlbiIsInJlbW92ZUNoaWxkIiwiJCR0aXBweSIsImlkQ291bnRlciIsIm1vdXNlTW92ZUxpc3RlbmVycyIsIm1vdW50ZWRJbnN0YW5jZXMiLCJjcmVhdGVUaXBweSIsInNob3dUaW1lb3V0IiwiaGlkZVRpbWVvdXQiLCJzY2hlZHVsZUhpZGVBbmltYXRpb25GcmFtZSIsImxhc3RUcmlnZ2VyRXZlbnQiLCJjdXJyZW50VHJhbnNpdGlvbkVuZExpc3RlbmVyIiwiY3VycmVudFRhcmdldCIsImlzVmlzaWJsZUZyb21DbGljayIsImRpZEhpZGVEdWVUb0RvY3VtZW50TW91c2VEb3duIiwiaWdub3JlT25GaXJzdFVwZGF0ZSIsImRlYm91bmNlZE9uTW91c2VNb3ZlIiwib25Nb3VzZU1vdmUiLCJkb2MiLCJwb3BwZXJJbnN0YW5jZSIsImlzRW5hYmxlZCIsImlzTW91bnRlZCIsImlzU2hvd24iLCJjbGVhckRlbGF5VGltZW91dHMiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInNldFByb3BzIiwiaW52b2tlSG9vayIsInJlbW92ZUxpc3RlbmVycyIsImFkZExpc3RlbmVycyIsImNsZWFudXBJbnRlcmFjdGl2ZU1vdXNlTGlzdGVuZXJzIiwiaGFuZGxlQXJpYUV4cGFuZGVkQXR0cmlidXRlIiwiaGFuZGxlU3R5bGVzIiwiY3JlYXRlUG9wcGVySW5zdGFuY2UiLCJnZXROZXN0ZWRQb3BwZXJUcmVlIiwibmVzdGVkUG9wcGVyIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwic2hvdyIsImlzQWxyZWFkeVZpc2libGUiLCJpc0Rpc2FibGVkIiwiaXNUb3VjaEFuZFRvdWNoRGlzYWJsZWQiLCJnZXRDdXJyZW50VGFyZ2V0IiwiaGFzQXR0cmlidXRlIiwiZ2V0SXNEZWZhdWx0UmVuZGVyRm4iLCJ2aXNpYmlsaXR5IiwiYWRkRG9jdW1lbnRNb3VzZURvd25MaXN0ZW5lciIsInRyYW5zaXRpb24iLCJfZ2V0RGVmYXVsdFRlbXBsYXRlQ2gyIiwiZ2V0RGVmYXVsdFRlbXBsYXRlQ2hpbGRyZW4iLCJfZ2V0RGVmYXVsdFRlbXBsYXRlQ2gzIiwiX2JveCIsIl9jb250ZW50IiwiaGFuZGxlQXJpYUNvbnRlbnRBdHRyaWJ1dGUiLCJ1cGRhdGVJT1NDbGFzcyIsIm9uVHJhbnNpdGlvbkVuZCIsIm5leHRFbGVtZW50U2libGluZyIsIm1vdW50IiwiaGlkZSIsImlzQWxyZWFkeUhpZGRlbiIsIl9nZXREZWZhdWx0VGVtcGxhdGVDaDQiLCJyZW1vdmVEb2N1bWVudE1vdXNlRG93bkxpc3RlbmVyIiwib25UcmFuc2l0aW9uZWRPdXQiLCJ1bm1vdW50IiwiZW5hYmxlIiwiZGlzYWJsZSIsImRlc3Ryb3lQb3BwZXJJbnN0YW5jZSIsIl9wcm9wcyRyZW5kZXIiLCJwbHVnaW5zSG9va3MiLCJoYXNBcmlhRXhwYW5kZWQiLCJzY2hlZHVsZVNob3ciLCJnZXROb3JtYWxpemVkVG91Y2hTZXR0aW5ncyIsImdldElzQ3VzdG9tVG91Y2hCZWhhdmlvciIsIl9pbnN0YW5jZSRwcm9wcyRyZW5kZSIsImdldERlbGF5IiwiaXNTaG93IiwicG9pbnRlckV2ZW50cyIsImlzQWRkIiwic2hvdWxkQWRkIiwiaG9vayIsInNob3VsZEludm9rZVByb3BzSG9vayIsIl9pbnN0YW5jZSRwcm9wcyIsInBsdWdpbkhvb2tzIiwiYXR0ciIsIm5leHRWYWx1ZSIsImN1cnJlbnRWYWx1ZSIsInNjaGVkdWxlSGlkZSIsIm9uRG9jdW1lbnRNb3VzZURvd24iLCJldmVudFR5cGUiLCJoYW5kbGVyIiwib25Nb3VzZUxlYXZlIiwib25CbHVyT3JGb2N1c091dCIsIl9nZXROb3JtYWxpemVkVG91Y2hTZSIsInNob3VsZFNjaGVkdWxlQ2xpY2tIaWRlIiwiaXNFdmVudExpc3RlbmVyU3RvcHBlZCIsInBvcHBlclRyZWVEYXRhIiwiY2xpZW50WCIsImNsaWVudFkiLCJpc0N1cnNvck92ZXJSZWZlcmVuY2VPclBvcHBlciIsIl9pbnN0YW5jZSRwb3BwZXJJbnN0YSIsInBvcHBlclN0YXRlIiwidG9wRGlzdGFuY2UiLCJib3R0b21EaXN0YW5jZSIsImxlZnREaXN0YW5jZSIsInJpZ2h0RGlzdGFuY2UiLCJleGNlZWRzVG9wIiwiZXhjZWVkc0JvdHRvbSIsImV4Y2VlZHNMZWZ0IiwiZXhjZWVkc1JpZ2h0IiwicmVsYXRlZFRhcmdldCIsIl9pbnN0YW5jZSRwcm9wczIiLCJjb21wdXRlZFJlZmVyZW5jZSIsInRpcHB5TW9kaWZpZXIiLCJhcnJvd01vZGlmaWVyIiwidGlwcHkiLCJ0YXJnZXRzIiwib3B0aW9uYWxQcm9wcyIsImRpZFBhc3NGYWxzeVZhbHVlIiwiZGlkUGFzc1BsYWluT2JqZWN0IiwiY2FwdHVyZSIsImlzU2luZ2xlQ29udGVudEVsZW1lbnQiLCJpc01vcmVUaGFuT25lUmVmZXJlbmNlRWxlbWVudCIsImluc3RhbmNlcyIsInNldERlZmF1bHRQcm9wcyIsIkJVQkJMSU5HX0VWRU5UU19NQVAiLCJtb3VzZW92ZXIiLCJmb2N1c2luIiwiY2xpY2siLCJpbnNlcnRCZWZvcmUiLCJ0cmFuc2l0aW9uRGVsYXkiLCJpbml0aWFsTW91c2VDb29yZHMiLCJnZXRJc01hbnVhbCIsImdldElzRW5hYmxlZCIsImlzVmFsaWRNb3VzZUV2ZW50IiwidW5zZXRSZWZlcmVuY2VDbGllbnRSZWN0Iiwic2hvdWxkVW5zZXQiLCJoYW5kbGVNb3VzZU1vdmVMaXN0ZW5lciIsImlzQ3Vyc29yT3ZlclJlZmVyZW5jZSIsInJlbGF0aXZlWCIsInJlbGF0aXZlWSIsImN1cnJlbnRCYXNlUGxhY2VtZW50IiwiYm91bmRpbmdSZWN0IiwiY2xpZW50UmVjdHMiLCJmaXJzdFJlY3QiLCJsYXN0UmVjdCIsImlzVG9wIiwibWluTGVmdCIsIm1heFJpZ2h0IiwibWVhc3VyZVJlY3RzIiwiX3RvcCIsIl9ib3R0b20iLCJnZXRJbmxpbmVCb3VuZGluZ0NsaWVudFJlY3QiLCJnZXRDbGllbnRSZWN0cyIsIl9pbnN0YW5jZSRwcm9wcyRwb3BwZSIsInNob3VsZENoZWNrIiwicHJldlJlZlJlY3QiLCJwcmV2UG9wUmVjdCIsInVwZGF0ZVBvc2l0aW9uIiwiY3VycmVudFJlZlJlY3QiLCJjdXJyZW50UG9wUmVjdCIsImFyZVJlY3RzRGlmZmVyZW50IiwicmVjdEEiLCJyZWN0QiIsImNyZWF0ZVNpbmdsZXRvbiIsInRpcHB5SW5zdGFuY2VzIiwicmVmZXJlbmNlcyIsInNpbmdsZXRvbiIsIm92ZXJyaWRlUHJvcHMiLCJvdmVycmlkZXMiLCJkZWZhdWx0IiwiZGVsZWdhdGUiLCJjaGlsZFRpcHB5SW5zdGFuY2VzIiwibmF0aXZlUHJvcHMiLCJwYXJlbnRQcm9wcyIsImNoaWxkUHJvcHMiLCJyZXR1cm5WYWx1ZSIsInRhcmdldE5vZGUiLCJjbG9zZXN0Iiwib3JpZ2luYWxEZXN0cm95Iiwic2hvdWxkRGVzdHJveUNoaWxkSW5zdGFuY2VzIiwiaGlkZUFsbCIsIl90ZW1wIiwiZXhjbHVkZWRSZWZlcmVuY2VPckluc3RhbmNlIiwiZXhjbHVkZSIsIm9yaWdpbmFsRHVyYXRpb24iLCJpc0V4Y2x1ZGVkIiwicm91bmRBcnJvdyJdLCJtYXBwaW5ncyI6IkNBQUEsU0FBQUEsRUFBQUMsRUFBQUMsRUFBQUMsR0FBQSxTQUFBQyxFQUFBQyxFQUFBQyxHQUFBLElBQUFKLEVBQUFHLEdBQUEsQ0FBQSxJQUFBSixFQUFBSSxHQUFBLENBQUEsSUFBQUUsRUFBQSxtQkFBQUMsU0FBQUEsUUFBQSxJQUFBRixHQUFBQyxFQUFBLE9BQUFBLEVBQUFGLEdBQUEsR0FBQSxHQUFBSSxFQUFBLE9BQUFBLEVBQUFKLEdBQUEsR0FBQSxJQUFBSyxFQUFBLElBQUFDLE1BQUEsdUJBQUFOLEVBQUEsS0FBQSxNQUFBSyxFQUFBRSxLQUFBLG1CQUFBRixFQUFBLElBQUFHLEVBQUFYLEVBQUFHLEdBQUEsQ0FBQVMsUUFBQSxJQUFBYixFQUFBSSxHQUFBLEdBQUFVLEtBQUFGLEVBQUFDLFFBQUEsU0FBQWQsR0FBQSxPQUFBSSxFQUFBSCxFQUFBSSxHQUFBLEdBQUFMLElBQUFBLElBQUFhLEVBQUFBLEVBQUFDLFFBQUFkLEVBQUFDLEVBQUFDLEVBQUFDLEdBQUEsT0FBQUQsRUFBQUcsR0FBQVMsUUFBQSxJQUFBLElBQUFMLEVBQUEsbUJBQUFELFNBQUFBLFFBQUFILEVBQUEsRUFBQUEsRUFBQUYsRUFBQWEsT0FBQVgsSUFBQUQsRUFBQUQsRUFBQUUsSUFBQSxPQUFBRCxFQUFBLENBQUEsQ0FBQWEsRUFBQSxDQUFBLFNBQUFULEVBQUFVLEVBQUFKLGdCLHFPQ0FDLEksRUFBQUssRSxxYUFBQUMsQ0FBQVosRUFBQSx1QkFDRGEsRyxFQUFBYixFQUFBLGMsb0lBRUEsSUFBTWMsRUFBYUMsU0FBU0MsZUFBZSxrQkFDdkNGLElBQ0FBLEVBQVdHLFVBQVcsR0FFMUIsSUFBTUMsRUFBWUgsU0FBU0MsZUFBZSw4QkFFMUNHLE9BQU9DLFlBQWMsQ0FDakJDLFdBQVksS0FDWkMsY0FBZSxLQUNmQyxjQUFlLFFBRWZDLEtBQU0sU0FBVUMsRUFBS0YsRUFBZUcsRUFBU0MsR0FJekMsR0FIQVIsT0FBT0MsWUFBWUcsY0FBZ0JBLEVBR2hCLE1BRERSLFNBQVNDLGVBQWUsc0JBQzFDLENBR0EsSUFBSVksRUFBS2IsU0FBU2MsY0FBYyxNQUNoQ1YsT0FBT0MsWUFBWUUsY0FBZ0JNLEVBRW5DRCxFQUFXRyxLQUFLQyxNQUFNSixJQUFhLEdBQ25DLElBQUssSUFJR0ssRUFKQ0MsRUFBSSxFQUFHQSxFQUFJTixFQUFTbkIsT0FBUXlCLElBQ2pDZCxPQUFPQyxZQUFZYyxXQUFXUCxFQUFTTSxJQUVyQixFQUFsQk4sRUFBU25CLFNBRUcsT0FEUndCLEVBQU9qQixTQUFTQyxlQUFULG9CQUFBbUIsT0FBNENSLEVBQVNBLEVBQVNuQixPQUFTLEdBQUc0QixPQUNqRUosRUFBS0ssVUFBVUMsU0FBUyx3QkFDeENOLEVBQUtLLFVBQVVFLElBQUksYUFJdkJkLEdBQU9BLEVBQUlqQixRQUFVa0IsR0FBV0EsRUFBUWxCLFNBQ3hDVyxPQUFPQyxZQUFZQyxZQUFhLElBQUlWLEVBQy9CNkIsc0JBQ0FDLFFBQVFoQixHQUNSaUIseUJBQ0FDLFFBRUx4QixPQUFPQyxZQUFZQyxXQUFXdUIsR0FBRyxVQUFXekIsT0FBT0MsWUFBWWMsWUFFL0RmLE9BQU9DLFlBQVlDLFdBQVd3QixRQUFRQyxLQUFLLFdBQ3ZDaEMsRUFBV0csVUFBVyxJQUQxQixNQUVTLFNBQVU4QixHQUVmLE9BQU9DLFFBQVFDLE1BQU0sZ0RBR3pCbkMsRUFBV29DLGlCQUFpQixRQUFTLFNBQVVDLEdBQzNDLElBQUlDLEVBQVVsQyxFQUFVbUMsTUFDcEJELEdBQVdBLEVBQVE1QyxRQUNuQmEsV0FBV2lDLE9BQU8sT0FBUSxDQUN0QkMsU0FBVUgsRUFDVjFCLFFBQVNBLElBRmIsTUFHUyxTQUFVcUIsR0FFZixPQUFPQyxRQUFRQyxNQUFNLG9EQUc3QkUsRUFBTUssaUJBQ05MLEVBQU1NLHVCQUtsQnZCLFdBQVksU0FBVWtCLEdBQ2xCLElBSUlNLEVBT0FDLEVBS0FDLEVBR0FDLEVBS0FDLEVBSUFDLEVBSUFDLEVBR0lDLEVBT0FDLEVBTUpDLEVBSUFDLEVBSUFDLEVBR0FDLEVBUUFDLEVBSUFDLEVBR0FDLEVBSUFDLEVBOERJQyxFQUdJQyxFQXpESkMsRUFJQUMsRUFJQUMsRUFLQUMsRUFLQUMsRUF4R08sTUFBWDdCLEdBQXNDLE1BQW5CQSxFQUFRb0IsU0FBNkMsTUFBMUJwQixFQUFRb0IsUUFBUWhFLFFBQTZDLEVBQXpCNEMsRUFBUW9CLFFBQVFoRSxVQUlsR2tELEVBQW9DLE1BQTFCTixFQUFROEIsZ0JBQTJELE1BQWpDOUIsRUFBUThCLGVBQWUxRSxRQUFrRCxFQUFoQzRDLEVBQVE4QixlQUFlMUUsU0FDOUYscThkQUNTMkUsS0FBSy9CLEVBQVFvQixTQUNwQ1ksS0FBS0MsWUFBWWpDLElBS0gsT0FEZE8sRUFBYTVDLFNBQVNDLGVBQWUsMEJBRXJDMkMsRUFBVzJCLFVBR1gxQixFQUFZN0MsU0FBU2MsY0FBYyxPQUM3Qk8sR0FBVixnQkFBQUQsT0FBK0JpQixFQUFRaEIsSUFFbkN5QixFQUFhOUMsU0FBU2MsY0FBYyxPQUN4QytCLEVBQVUyQixZQUFZMUIsR0FDdEJBLEVBQVd6QixHQUFYLG9CQUFBRCxPQUFvQ2lCLEVBQVFoQixJQUM1Q3lCLEVBQVd4QixVQUFVRSxJQUFJLGVBQWdCLGNBQWUsYUFFcER1QixFQUFnQi9DLFNBQVNjLGNBQWMsT0FDM0NnQyxFQUFXMEIsWUFBWXpCLEdBQ3ZCQSxFQUFjekIsVUFBVUUsSUFBSSx1QkFFeEJ3QixFQUFTaEQsU0FBU2MsY0FBYyxRQUNwQ2lDLEVBQWN5QixZQUFZeEIsR0FDMUJBLEVBQU8xQixVQUFVRSxJQUFJLHVCQUVqQnlCLEVBQVdqRCxTQUFTeUUsZUFBZXBDLEVBQVFxQyxZQUUzQ3JDLEVBQVFzQyxjQUNKekIsRUFBV2xELFNBQVNjLGNBQWMsS0FDdENrQyxFQUFPd0IsWUFBWXRCLEdBQ25CQSxFQUFTNUIsVUFBVUUsSUFBSSxnQkFBaUIsc0JBQ3hDMEIsRUFBUzBCLEtBQVQsSUFBQXhELE9BQW9CaEIsT0FBT0MsWUFBWUcsY0FBdkMsS0FBQVksT0FBd0RpQixFQUFRd0MsVUFDaEUzQixFQUFTNEIsTUFBVCwyQkFBQTFELE9BQTRDaUIsRUFBUXFDLFlBQ3BEeEIsRUFBU3NCLFlBQVl2QixLQUVqQkUsRUFBV25ELFNBQVNjLGNBQWMsUUFDdENrQyxFQUFPd0IsWUFBWXJCLEdBQ25CNEIsU0FBU3pELFVBQVVFLElBQUksZ0JBQWlCLHdCQUN4Q3VELFNBQVNQLFlBQVl2QixJQUdyQkcsRUFBZ0JwRCxTQUFTYyxjQUFjLFFBQzNDaUMsRUFBY3lCLFlBQVlwQixHQUMxQkEsRUFBYzlCLFVBQVVFLElBQUkseUJBQTVCLDBCQUFBSixPQUFnRmlCLEVBQVFoQixLQUVwRmdDLEVBQW1CckQsU0FBU2MsY0FBYyxRQUM5Q2lDLEVBQWN5QixZQUFZbkIsR0FDMUJBLEVBQWlCL0IsVUFBVUUsSUFBSSwwQkFFM0I4QixFQUFZdEQsU0FBU3lFLGVBQWUsSUFBSU8sS0FBTTNDLEVBQVFpQixVQUFZLElBQVMsWUFBZTJCLGtCQUM5RjVCLEVBQWlCbUIsWUFBWWxCLEdBRXpCQyxFQUFnQnZELFNBQVNjLGNBQWMsT0FDM0NpQyxFQUFjeUIsWUFBWWpCLEdBQzFCQSxFQUFjakMsVUFBVUUsSUFBSSwrQkFDNUIrQixFQUFjMkIsVUFBWSxpSEFDMUIzQixFQUFjNEIsUUFBVSxTQUFVL0MsR0FDOUJBLEVBQU1nRCxPQUFPQyxjQUFjQSxjQUFjL0QsVUFBVWdFLE9BQU8sYUFHMUQ5QixFQUFpQnhELFNBQVNjLGNBQWMsT0FDNUNnQyxFQUFXMEIsWUFBWWhCLEdBQ3ZCQSxFQUFlbEMsVUFBVUUsSUFBSSx3QkFFekJpQyxFQUFVekQsU0FBU3lFLGVBQWVwQyxFQUFRb0IsU0FDOUNELEVBQWVnQixZQUFZZixHQUV2QkMsRUFBa0IxRCxTQUFTYyxjQUFjLE9BQzdDZ0MsRUFBVzBCLFlBQVlkLEdBQ3ZCQSxFQUFnQnBDLFVBQVVFLElBQUksaUNBRTFCbUMsRUFBYTNELFNBQVNjLGNBQWMsS0FDeEM0QyxFQUFnQmMsWUFBWWIsR0FDNUJBLEVBQVdpQixLQUFPLHVCQUNsQmpCLEVBQVd3QixRQUFVLFNBQVUvQyxHQUMzQkEsRUFBTWdELE9BQU9DLGNBQWNBLGNBQWMvRCxVQUFVZ0UsT0FBTyxjQUd6RDNDLEVBd0RhLE9BRFZpQixFQUFTNUQsU0FBU0MsZUFBVCxvQkFBQW1CLE9BQTRDaUIsRUFBUThCLG9CQUU3RFAsRUFBT3RDLFVBQVVFLElBQUksdUJBRUcsT0FEcEJxQyxFQUFtQkQsRUFBTzJCLHFCQUFxQixTQUUvQzFCLEVBQW1CN0QsU0FBU2MsY0FBYyxNQUMxQzhDLEVBQU9ZLFlBQVlYLElBRXZCQSxFQUFpQlcsWUFBWTNCLEtBOUQ3QmlCLEVBQVc5RCxTQUFTYyxjQUFjLE9BQ3RDZ0MsRUFBVzBCLFlBQVlWLEdBQ3ZCQSxFQUFTeEMsVUFBVUUsSUFBSSxtQkFFbkJ1QyxFQUFVL0QsU0FBU2MsY0FBYyxPQUNyQ2dELEVBQVNVLFlBQVlULEdBQ3JCQSxFQUFRekMsVUFBVUUsSUFBSSxjQUVsQndDLEVBQVloRSxTQUFTYyxjQUFjLFNBQ3ZDaUQsRUFBUVMsWUFBWVIsR0FDcEJBLEVBQVV3QixRQUFWLDJCQUFBcEUsT0FBK0NpQixFQUFRaEIsSUFDdkQyQyxFQUFVeUIsWUFBYyxRQUVwQnhCLEVBQWVqRSxTQUFTYyxjQUFjLFlBQzFDaUQsRUFBUVMsWUFBWVAsR0FDcEJBLEVBQWE1QyxHQUFiLDJCQUFBRCxPQUE2Q2lCLEVBQVFoQixJQUNyRDBDLEVBQVF6QyxVQUFVRSxJQUFJLGdCQUVsQjBDLEVBQWNsRSxTQUFTYyxjQUFjLFVBQ3pDZ0QsRUFBU1UsWUFBWU4sR0FDckJBLEVBQVk3QyxHQUFaLDBCQUFBRCxPQUEyQ2lCLEVBQVFoQixJQUNuRDZDLEVBQVl3QixLQUFPLFNBQ25CeEIsRUFBWTVDLFVBQVVFLElBQUksTUFBTyxlQUNqQzBDLEVBQVl1QixZQUFjLE9BQzFCdkIsRUFBWS9CLGlCQUFpQixRQUFTLFNBQVVDLEdBQzVDQSxFQUFRQSxHQUFTaEMsT0FBT2dDLE1BQ3hCLElBTUlqQyxFQUlBd0YsRUFUQXRFLEdBRFMzQyxFQUFFMEcsUUFBVTFHLEVBQUVrSCxZQUNYdkUsR0FDTixNQUFOQSxHQUEyQixNQUFiQSxFQUFHNUIsUUFBa0I0QixFQUFHNUIsUUFBVSxLQUdwRDRCLEVBQUtBLEVBQUd3RSxPQUFPLElBRUUsT0FEYjFGLEVBQVlILFNBQVNDLGVBQVQsMkJBQUFtQixPQUFtREMsTUFLdEQsT0FEVHNFLEVBQVF4RixFQUFVbUMsUUFDZSxNQUFoQnFELEVBQU1sRyxRQUFtQyxFQUFma0csRUFBTWxHLFNBR3JEVyxPQUFPQyxZQUFZQyxXQUFXaUMsT0FBTyxPQUFRLENBQ3pDQyxTQUFVbUQsRUFDVmhGLFFBQVNBLFFBQ1RtRixVQUFXekUsSUFIZixNQUlTLFNBQVVXLEdBRWYsT0FBT0MsUUFBUUMsTUFBTSxvREFFekJFLEVBQU1LLGlCQUNOTCxFQUFNTSxzQkFHVnRDLE9BQU9DLFlBQVlFLGNBQWNpRSxZQUFZM0IsSUFjcENrRCxTQUFTQyxpQkFBaUJ4QyxHQUFnQnlDLGlCQUFpQixXQUN4REYsU0FBU0MsaUJBQWlCeEMsR0FBZ0J5QyxpQkFBaUIsZ0JBRXZFbkQsRUFBV3hCLFVBQVVpRCxPQUFPLGtCQUlwQ0QsWUFBYSxTQUFVNEIsR0FDbkIsSUFJSUMsRUFLQUMsRUFUWSxNQUFaRixHQUEwQyxNQUF0QkEsRUFBU0osYUFBZ0QsTUFBM0JJLEVBQVMvQixnQkFBNEQsTUFBbEMrQixFQUFTL0IsZUFBZTFFLFFBQXFELEVBQWpDeUcsRUFBUy9CLGVBQWUxRSxTQUtuSSxPQUR0QjBHLEVBQXFCbkcsU0FBU0MsZUFBVCwwQkFBQW1CLE9BQWtEOEUsRUFBUy9CLG9CQUtoRmlDLEVBQVdGLEVBQVN6QyxRQUFRNEMsUUFBUSxhQUFjLElBRXJDLE1BRERGLEVBQW1CbEcsZUFBbkIsMEJBQUFtQixPQUE0RGdGLEVBQTVELEtBQUFoRixPQUF3RThFLEVBQVNKLGFBRWpGMUYsT0FBT0MsWUFBWWlHLGdCQUFnQkosRUFBUy9CLGVBQWdCK0IsRUFBU3ZGLFFBQVN3RixFQUFvQkMsRUFBVUYsRUFBU3pDLFNBR3JJckQsT0FBT0MsWUFBWWtHLGtCQUFrQkwsRUFBVUUsS0FHbkRFLGdCQUFpQixTQUFVUixFQUFXbkYsRUFBUzZGLEVBQU1KLEVBQVUzQyxHQUMzRCxJQUFJZ0QsRUFBbUJ6RyxTQUFTYyxjQUFjLFFBQzlDMEYsRUFBS2hDLFlBQVlpQyxHQUNqQkEsRUFBaUJwRixHQUFqQiwwQkFBQUQsT0FBZ0RnRixFQUFoRCxLQUFBaEYsT0FBNEQwRSxHQUM1RFcsRUFBaUJuRixVQUFVRSxJQUFJLDBCQUUvQixJQUFJa0YsRUFBbUIxRyxTQUFTYyxjQUFjLFFBQzlDMkYsRUFBaUJqQyxZQUFZa0MsR0FDN0JBLEVBQWlCcEYsVUFBVUUsSUFBSSw4QkFDL0JrRixFQUFpQnZCLFFBQVUsU0FBVS9DLEdBQ2pDaEMsT0FBT0MsWUFBWUMsV0FBV2lDLE9BQU8sT0FBUSxDQUN6Q0MsU0FBVWlCLEVBQ1Y5QyxRQUFTQSxFQUNUbUYsVUFBV0EsSUFIZixNQUlTLFNBQVU5RCxHQUVmLE9BQU9DLFFBQVFDLE1BQU0sZ0VBRXpCRSxFQUFNSyxpQkFDTkwsRUFBTU0sbUJBR1YsSUFBSWlFLEVBQW9CM0csU0FBU2MsY0FBYyxRQUMvQzJGLEVBQWlCakMsWUFBWW1DLEdBQzdCRixFQUFpQnBGLEdBQWpCLCtCQUFBRCxPQUFxRGdGLEVBQXJELEtBQUFoRixPQUFpRTBFLEdBQ2pFYSxFQUFrQnJGLFVBQVVFLElBQUksK0JBRWhDLElBQUlvRixFQUFnQjVHLFNBQVN5RSxlQUFlLEtBQzVDa0MsRUFBa0JuQyxZQUFZb0MsR0FFOUIsSUFBSUMsRUFBZTdHLFNBQVNjLGNBQWMsTUFjMUMsT0FiQTJGLEVBQWlCakMsWUFBWXFDLEdBQzdCQSxFQUFheEYsR0FBYiw4QkFBQUQsT0FBZ0RnRixFQUFoRCxLQUFBaEYsT0FBNEQwRSxHQUM1RGUsRUFBYXZGLFVBQVVFLElBQUksOEJBQzNCcUYsRUFBYUMsTUFBTUMsUUFBVSxRQUU3QixFQUFBakgsRUFBQSxTQUFNMkcsRUFBa0IsQ0FDcEJoRCxRQURvQixXQUVoQixPQUFPekQsU0FBU0MsZUFBVCw4QkFBQW1CLE9BQXNEZ0YsRUFBdEQsS0FBQWhGLE9BQWtFMEUsSUFBYVosV0FFMUY4QixVQUFXLE9BQ1hDLFdBQVcsSUFHUlIsR0FHWEYsa0JBN1JpQixTQTZSQ0wsRUFBVUUsR0FDeEIsSUFFUWMsRUFGSkMsRUFBWW5ILFNBQVNDLGVBQVQsK0JBQUFtQixPQUF1RGdGLEVBQXZELEtBQUFoRixPQUFtRThFLEVBQVMvQixpQkFDM0UsTUFBYmdELElBQ0lELEVBQVFuQixTQUFTb0IsRUFBVTFCLGFBQy9CeUIsSUFDQUMsRUFBVTFCLFlBQWN5QixFQUFNakMsa0JBR2xDLElBQUk0QixFQUFlN0csU0FBU0MsZUFBVCw4QkFBQW1CLE9BQXNEZ0YsRUFBdEQsS0FBQWhGLE9BQWtFOEUsRUFBUy9CLGlCQUMxRSxNQUFoQjBDLEdBQ0F6RyxPQUFPQyxZQUFZa0csa0JBQWtCTSxFQUFjWCxHQUd2RCxJQUFJa0IsRUFBbUJwSCxTQUFTYyxjQUFjLE1BQzlDK0YsRUFBYXJDLFlBQVk0QyxHQUV6QixJQUVRQyxFQU9BbEUsRUFUSkYsRUFBV2pELFNBQVN5RSxlQUFleUIsRUFBU3hCLFlBQzVDd0IsRUFBU3ZCLGNBQ0wwQyxFQUFXckgsU0FBU2MsY0FBYyxLQUN0Q3NHLEVBQWlCNUMsWUFBWTZDLEdBQzdCQSxFQUFTL0YsVUFBVUUsSUFBSSxnQkFBaUIsc0JBQ3hDNkYsRUFBU3pDLEtBQVQsSUFBQXhELE9BQW9CaEIsT0FBT0MsWUFBWUcsY0FBdkMsS0FBQVksT0FBd0Q4RSxFQUFTckIsVUFDakV3QyxFQUFTdkMsTUFBVCwyQkFBQTFELE9BQTRDOEUsRUFBU3hCLFlBQ3JEMkMsRUFBUzdDLFlBQVl2QixLQUVqQkUsRUFBV25ELFNBQVNjLGNBQWMsUUFDdENzRyxFQUFpQjVDLFlBQVlyQixHQUM3QkEsRUFBUzdCLFVBQVVFLElBQUksZ0JBQWlCLHdCQUN4QzJCLEVBQVNxQixZQUFZdkIsSUFHekIsSUFBSXFFLEVBQW9CdEgsU0FBU2MsY0FBYyxRQUMvQ3NHLEVBQWlCNUMsWUFBWThDLEdBRTdCLElBQUloRSxFQUFZdEQsU0FBU3lFLGVBQWUsSUFBSU8sS0FBTXVDLEtBQUt6SSxHQUFHd0UsVUFBWSxJQUFTLFlBQWUyQixrQkFDOUZxQyxFQUFrQjlDLFlBQVlsQixNLHlFQ3RVdENrRSxPQUFBQyxlQUFBbEksRUFBQSxhQUFBLENBQUErQyxPQUFBLElBTUEsSUFBQW9GLEdBS0FBLEVBQUFDLFVBQUFDLE1BQUEsV0FDQXZELEtBQUF3RCxZQUNBeEQsS0FBQXdELFdBQUEsRUFDQXhELEtBQUF5RCxTQUNBekQsS0FBQXlELFlBSUFOLE9BQUFDLGVBQUFDLEVBQUFDLFVBQUEsU0FBQSxDQUNBSSxJQUFBLFdBQ0EsT0FBQTFELE1BRUEyRCxZQUFBLEVBQ0FDLGNBQUEsSUFFQVQsT0FBQUMsZUFBQUMsRUFBQUMsVUFBQSxVQUFBLENBQ0FJLElBQUEsV0FDQSxPQUFBMUQsS0FBQXdELFdBRUFHLFlBQUEsRUFDQUMsY0FBQSxJQUVBUCxHQTFCQSxTQUFBQSxJQUNBckQsS0FBQXdELFdBQUEsRUFDQXhELEtBQUF5RCxRQUFBLEtBMEJBdkksRUFBQW1JLGdCQUFBQSxHLG9DQ25DQSxJQUNBUSxFQURBQyxFQUFBOUQsTUFBQUEsS0FBQThELFlBQ0FELEVBQUFWLE9BQUFZLGdCQUNBLENBQUFDLFVBQUEsY0FBQUMsT0FBQSxTQUFBQyxFQUFBQyxHQUFBRCxFQUFBRixVQUFBRyxJQUNBLFNBQUFELEVBQUFDLEdBQUEsSUFBQSxJQUFBbEosS0FBQWtKLEVBQUFBLEVBQUFDLGVBQUFuSixLQUFBaUosRUFBQWpKLEdBQUFrSixFQUFBbEosS0FDQSxTQUFBaUosRUFBQUMsR0FFQSxTQUFBRSxJQUFBckUsS0FBQXNFLFlBQUFKLEVBREFMLEVBQUFLLEVBQUFDLEdBRUFELEVBQUFaLFVBQUEsT0FBQWEsRUFBQWhCLE9BQUFvQixPQUFBSixJQUFBRSxFQUFBZixVQUFBYSxFQUFBYixVQUFBLElBQUFlLEtBR0FsQixPQUFBQyxlQUFBbEksRUFBQSxhQUFBLENBQUErQyxPQUFBLElBQ0EsSUFLQXVHLEVBTEFDLEVBQUE3SixFQUFBLFlBQ0E4SixFQUFBOUosRUFBQSxnQkFDQStKLEVBQUEvSixFQUFBLG9CQUNBZ0ssRUFBQWhLLEVBQUEsbUJBRUFpSyxHQUFBTCxFQStCQUUsRUFBQUksV0E5QkFoQixFQUFBZSxFQUFBTCxHQWFBSyxFQUFBdkIsVUFBQXlCLEtBQUEsU0FBQUMsR0FFQSxPQUFBQSxFQUFBQyxhQUFBRCxFQUFBQyxZQUFBQyxRQUNBQyxRQUFBQyxPQUFBLElBQUFYLEVBQUFZLFlBRUFMLEVBQUFNLE9BR0FOLEVBQUEzSSxJQUdBMkQsS0FBQXVGLFdBQUFSLEtBQUFDLEdBRkFHLFFBQUFDLE9BQUEsSUFBQXJLLE1BQUEsb0JBSEFvSyxRQUFBQyxPQUFBLElBQUFySyxNQUFBLHdCQU9BOEosRUFBQXZCLFVBQUFrQyxnQkFBQSxTQUFBbkosR0FDQSxPQUFBMkQsS0FBQXVGLFdBQUFDLGdCQUFBbkosSUFFQXdJLEdBM0JBLFNBQUFBLEVBQUFZLEdBQ0EsSUFBQUMsRUFBQWxCLEVBQUFySixLQUFBNkUsT0FBQUEsS0FPQSxNQU5BLG9CQUFBMkYsZUFDQUQsRUFBQUgsV0FBQSxJQUFBWCxFQUFBZ0IsY0FBQUgsR0FHQUMsRUFBQUgsV0FBQSxJQUFBWixFQUFBa0IsZUFBQUosR0FFQUMsRUFxQkF4SyxFQUFBMkosa0JBQUFBLEcsNEdDaERBMUIsT0FBQUMsZUFBQWxJLEVBQUEsYUFBQSxDQUFBK0MsT0FBQSxJQUVBLElBQUE2SCxFQUFBLENBQUEsRUFBQSxJQUFBLElBQUEsSUFBQSxNQUVBQyxHQUlBQSxFQUFBekMsVUFBQTBDLDZCQUFBLFNBQUFDLEdBQ0EsT0FBQWpHLEtBQUFrRyxZQUFBRCxFQUFBRSxxQkFFQUosR0FOQSxTQUFBQSxFQUFBRyxHQUNBbEcsS0FBQWtHLGlCQUFBRSxJQUFBRixFQUFBQSxFQUFBbkosT0FBQSxDQUFBLE9BQUErSSxFQU9BNUssRUFBQTZLLHVCQUFBQSxHLG9DQ2JBLElBQ0FsQyxFQURBQyxFQUFBOUQsTUFBQUEsS0FBQThELFlBQ0FELEVBQUFWLE9BQUFZLGdCQUNBLENBQUFDLFVBQUEsY0FBQUMsT0FBQSxTQUFBQyxFQUFBQyxHQUFBRCxFQUFBRixVQUFBRyxJQUNBLFNBQUFELEVBQUFDLEdBQUEsSUFBQSxJQUFBbEosS0FBQWtKLEVBQUFBLEVBQUFDLGVBQUFuSixLQUFBaUosRUFBQWpKLEdBQUFrSixFQUFBbEosS0FDQSxTQUFBaUosRUFBQUMsR0FFQSxTQUFBRSxJQUFBckUsS0FBQXNFLFlBQUFKLEVBREFMLEVBQUFLLEVBQUFDLEdBRUFELEVBQUFaLFVBQUEsT0FBQWEsRUFBQWhCLE9BQUFvQixPQUFBSixJQUFBRSxFQUFBZixVQUFBYSxFQUFBYixVQUFBLElBQUFlLEtBR0FsQixPQUFBQyxlQUFBbEksRUFBQSxhQUFBLENBQUErQyxPQUFBLElBRUEsSUFBQXVHLEVBQUE2QixHQUFBN0IsRUFtQkF6SixNQWxCQStJLEVBQUF1QyxFQUFBN0IsR0FpQkE2QixHQVhBLFNBQUFBLEVBQUFDLEVBQUFDLEdBQ0EsSUFDQWIsRUFBQTFGLEtBQ0F3RyxFQUZBeEcsS0FBQXNFLFlBRUFoQixVQU1BLE9BTEFvQyxFQUFBbEIsRUFBQXJKLEtBQUE2RSxLQUFBc0csSUFBQXRHLE1BQ0F1RyxXQUFBQSxFQUdBYixFQUFBMUIsVUFBQXdDLEVBQ0FkLEVBSUF4SyxFQUFBbUwsVUFBQUEsRUFFQSxJQUFBN0IsRUFBQWlDLEdBQUFqQyxFQWtCQXpKLE1BakJBK0ksRUFBQTJDLEVBQUFqQyxHQWdCQWlDLEdBWEEsU0FBQUEsRUFBQUgsUUFFQSxJQUFBQSxJQUFBQSxFQUFBLHVCQUNBLElBQUFaLEVBQUExRixLQUNBd0csRUFIQXhHLEtBQUFzRSxZQUdBaEIsVUFLQSxPQUpBb0MsRUFBQWxCLEVBQUFySixLQUFBNkUsS0FBQXNHLElBQUF0RyxNQUdBZ0UsVUFBQXdDLEVBQ0FkLEVBSUF4SyxFQUFBdUwsYUFBQUEsRUFFQSxJQUFBakMsRUFBQWEsR0FBQWIsRUFrQkF6SixNQWpCQStJLEVBQUF1QixFQUFBYixHQWdCQWEsR0FYQSxTQUFBQSxFQUFBaUIsUUFFQSxJQUFBQSxJQUFBQSxFQUFBLHNCQUNBLElBQUFaLEVBQUExRixLQUNBd0csRUFIQXhHLEtBQUFzRSxZQUdBaEIsVUFLQSxPQUpBb0MsRUFBQWxCLEVBQUFySixLQUFBNkUsS0FBQXNHLElBQUF0RyxNQUdBZ0UsVUFBQXdDLEVBQ0FkLEVBSUF4SyxFQUFBbUssV0FBQUEsRyxpREMxRUFsQyxPQUFBQyxlQUFBbEksRUFBQSxhQUFBLENBQUErQyxPQUFBLElBQ0EsSUFBQXlJLEVBQUE5TCxFQUFBLHVCQUNBK0wsRUFBQS9MLEVBQUEsV0FFQWdNLEdBSUFBLEVBQUF0RCxVQUFBdUQsc0JBQUEsU0FBQUMsR0FDQSxPQUFBSixFQUFBSyxrQkFBQUMsTUFBQXRLLEtBQUF1SyxVQUFBSCxLQUVBRixFQUFBdEQsVUFBQTRELHVCQUFBLFNBQUFDLEdBSUEsR0FBQVIsRUFBQVMsY0FBQUQsU0FBQSxJQUFBRSxHQUFBRixhQUFBRSxFQUFBLENBRUEsSUFBQUMsRUFBQSxJQUFBQyxXQUFBSixHQUVBLElBQUEsS0FEQUssRUFBQUYsRUFBQUcsUUFBQWYsRUFBQUssa0JBQUFXLHNCQUVBLE1BQUEsSUFBQTNNLE1BQUEsMEJBSUEsSUFBQTRNLEVBQUFILEVBQUEsRUFDQUksRUFBQUMsT0FBQUMsYUFBQUMsTUFBQSxLQUFBVCxFQUFBVSxNQUFBLEVBQUFMLElBQ0FNLEVBQUFYLEVBQUFZLFdBQUFQLEVBQUFMLEVBQUFVLE1BQUFMLEdBQUFRLE9BQUEsU0FFQSxDQUNBLElBQ0FYLEVBREFZLEVBQUFqQixFQUVBLElBQUEsS0FEQUssRUFBQVksRUFBQVgsUUFBQWYsRUFBQUssa0JBQUFzQixrQkFFQSxNQUFBLElBQUF0TixNQUFBLDBCQUlBNE0sRUFBQUgsRUFBQSxFQUNBSSxFQUFBUSxFQUFBRSxVQUFBLEVBQUFYLEdBQ0FNLEVBQUFHLEVBQUFoTixPQUFBdU0sRUFBQVMsRUFBQUUsVUFBQVgsR0FBQSxLQUdBLElBQUFwTCxFQUFBbUssRUFBQUssa0JBQUFwSyxNQUFBaUwsR0FDQVcsRUFBQTdMLEtBQUFDLE1BQUFKLEVBQUEsSUFDQSxHQUFBZ00sRUFBQWxILEtBQ0EsTUFBQSxJQUFBdEcsTUFBQSxrREFLQSxNQUFBLENBQUFrTixFQUhBTSxJQUtBM0IsR0E5Q0EsU0FBQUEsS0FnREExTCxFQUFBMEwsa0JBQUFBLEksa0hDckRBLElBQUE0QixFQUFBeEksTUFBQUEsS0FBQXdJLFVBQUFyRixPQUFBc0YsUUFBQSxTQUFBbE8sR0FDQSxJQUFBLElBQUFtTyxFQUFBak8sRUFBQSxFQUFBSCxFQUFBcU8sVUFBQXZOLE9BQUFYLEVBQUFILEVBQUFHLElBRUEsSUFBQSxJQUFBUSxLQURBeU4sRUFBQUMsVUFBQWxPLEdBQ0EwSSxPQUFBRyxVQUFBYyxlQUFBakosS0FBQXVOLEVBQUF6TixLQUNBVixFQUFBVSxHQUFBeU4sRUFBQXpOLElBRUEsT0FBQVYsR0FFQTRJLE9BQUFDLGVBQUFsSSxFQUFBLGFBQUEsQ0FBQStDLE9BQUEsSUFHQSxTQURBMkssRUFDQXJDLEVBQUFzQyxFQUFBekosR0FDQVksS0FBQXVHLFdBQUFBLEVBQ0F2RyxLQUFBNkksV0FBQUEsRUFDQTdJLEtBQUFaLFFBQUFBLEVBSUFsRSxFQUFBME4sYUFBQUEsRUFLQSxJQUFBOUQsR0FHQUEsRUFBQXhCLFVBQUFJLElBQUEsU0FBQXJILEVBQUF5TSxHQUNBLE9BQUE5SSxLQUFBK0UsS0FBQXlELEVBQUEsR0FBQU0sRUFBQSxDQUFBeEQsT0FBQSxNQUFBakosSUFBQUEsTUFFQXlJLEVBQUF4QixVQUFBeUYsS0FBQSxTQUFBMU0sRUFBQXlNLEdBQ0EsT0FBQTlJLEtBQUErRSxLQUFBeUQsRUFBQSxHQUFBTSxFQUFBLENBQUF4RCxPQUFBLE9BQUFqSixJQUFBQSxNQUVBeUksRUFBQXhCLFVBQUEwRixPQUFBLFNBQUEzTSxFQUFBeU0sR0FDQSxPQUFBOUksS0FBQStFLEtBQUF5RCxFQUFBLEdBQUFNLEVBQUEsQ0FBQXhELE9BQUEsU0FBQWpKLElBQUFBLE1BUUF5SSxFQUFBeEIsVUFBQWtDLGdCQUFBLFNBQUFuSixHQUNBLE1BQUEsSUFFQXlJLEdBcEJBLFNBQUFBLEtBc0JBNUosRUFBQTRKLFdBQUFBLEcsb0NDOUNBLElBQUFtRSxFQUFBakosTUFBQUEsS0FBQWlKLFdBQUEsU0FBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FDQSxPQUFBLElBQUFELEVBQUFBLEdBQUFqRSxTQUFBLFNBQUFtRSxFQUFBbEUsR0FDQSxTQUFBbUUsRUFBQXRMLEdBQUEsSUFBQXVMLEVBQUFILEVBQUFJLEtBQUF4TCxJQUFBLE1BQUE1RCxHQUFBK0ssRUFBQS9LLElBQ0EsU0FBQXFQLEVBQUF6TCxHQUFBLElBQUF1TCxFQUFBSCxFQUFBLE1BQUFwTCxJQUFBLE1BQUE1RCxHQUFBK0ssRUFBQS9LLElBQ0EsU0FBQW1QLEVBQUFHLEdBQUFBLEVBQUFDLEtBQUFOLEVBQUFLLEVBQUExTCxPQUFBLElBQUFtTCxFQUFBLFNBQUFFLEdBQUFBLEVBQUFLLEVBQUExTCxTQUFBUCxLQUFBNkwsRUFBQUcsR0FDQUYsR0FBQUgsRUFBQUEsRUFBQXRCLE1BQUFtQixFQUFBQyxHQUFBLEtBQUFNLFdBR0FJLEVBQUE3SixNQUFBQSxLQUFBNkosYUFBQSxTQUFBWCxFQUFBWSxHQUNBLElBQUFwUCxFQUFBcVAsRUFBQXhQLEVBQUF5UCxFQUFBLENBQUFDLE1BQUEsRUFBQUMsS0FBQSxXQUFBLEdBQUEsRUFBQTNQLEVBQUEsR0FBQSxNQUFBQSxFQUFBLEdBQUEsT0FBQUEsRUFBQSxJQUFBNFAsS0FBQSxHQUFBQyxJQUFBLElBQ0FDLEVBQUEsQ0FBQVosS0FBQWEsRUFBQSxHQUFBQyxNQUFBRCxFQUFBLEdBQUFFLE9BQUFGLEVBQUEsSUFBQSxNQUFBLG1CQUFBRyxTQUFBSixFQUFBSSxPQUFBQyxVQUFBLFdBQUEsT0FBQTFLLE9BQUFxSyxFQUNBLFNBQUFDLEVBQUFoUSxHQUFBLE9BQUEsU0FBQXFRLEdBQUEsT0FDQSxTQUFBQyxHQUNBLEdBQUFsUSxFQUFBLE1BQUEsSUFBQW1RLFVBQUEsbUNBQ0EsS0FBQWIsR0FBQSxJQUNBLEdBQUF0UCxFQUFBLEVBQUFxUCxJQUFBeFAsRUFBQSxFQUFBcVEsRUFBQSxHQUFBYixFQUFBLE9BQUFhLEVBQUEsR0FBQWIsRUFBQSxTQUFBeFAsRUFBQXdQLEVBQUEsU0FBQXhQLEVBQUFZLEtBQUE0TyxHQUFBLEdBQUFBLEVBQUFOLFNBQUFsUCxFQUFBQSxFQUFBWSxLQUFBNE8sRUFBQWEsRUFBQSxLQUFBaEIsS0FBQSxPQUFBclAsRUFFQSxPQURBd1AsRUFBQSxFQUFBeFAsSUFBQXFRLEVBQUEsQ0FBQSxFQUFBQSxFQUFBLEdBQUFyUSxFQUFBMEQsUUFDQTJNLEVBQUEsSUFDQSxLQUFBLEVBQUEsS0FBQSxFQUFBclEsRUFBQXFRLEVBQUEsTUFDQSxLQUFBLEVBQUEsT0FBQVosRUFBQUMsUUFBQSxDQUFBaE0sTUFBQTJNLEVBQUEsR0FBQWhCLE1BQUEsR0FDQSxLQUFBLEVBQUFJLEVBQUFDLFFBQUFGLEVBQUFhLEVBQUEsR0FBQUEsRUFBQSxDQUFBLEdBQUEsU0FDQSxLQUFBLEVBQUFBLEVBQUFaLEVBQUFJLElBQUFVLE1BQUFkLEVBQUFHLEtBQUFXLE1BQUEsU0FDQSxRQUNBLEtBQUF2USxFQUFBLEdBQUFBLEVBQUF5UCxFQUFBRyxNQUFBL08sUUFBQWIsRUFBQUEsRUFBQWEsT0FBQSxNQUFBLElBQUF3UCxFQUFBLElBQUEsSUFBQUEsRUFBQSxJQUFBLENBQUFaLEVBQUEsRUFBQSxTQUNBLEdBQUEsSUFBQVksRUFBQSxNQUFBclEsR0FBQXFRLEVBQUEsR0FBQXJRLEVBQUEsSUFBQXFRLEVBQUEsR0FBQXJRLEVBQUEsSUFBQSxDQUFBeVAsRUFBQUMsTUFBQVcsRUFBQSxHQUFBLE1BQ0EsR0FBQSxJQUFBQSxFQUFBLElBQUFaLEVBQUFDLE1BQUExUCxFQUFBLEdBQUEsQ0FBQXlQLEVBQUFDLE1BQUExUCxFQUFBLEdBQUFBLEVBQUFxUSxFQUFBLE1BQ0EsR0FBQXJRLEdBQUF5UCxFQUFBQyxNQUFBMVAsRUFBQSxHQUFBLENBQUF5UCxFQUFBQyxNQUFBMVAsRUFBQSxHQUFBeVAsRUFBQUksSUFBQVcsS0FBQUgsR0FBQSxNQUNBclEsRUFBQSxJQUFBeVAsRUFBQUksSUFBQVUsTUFDQWQsRUFBQUcsS0FBQVcsTUFBQSxTQUVBRixFQUFBZCxFQUFBM08sS0FBQStOLEVBQUFjLEdBQ0EsTUFBQTNQLEdBQUF1USxFQUFBLENBQUEsRUFBQXZRLEdBQUEwUCxFQUFBLEVBQUEsUUFBQXJQLEVBQUFILEVBQUEsRUFDQSxHQUFBLEVBQUFxUSxFQUFBLEdBQUEsTUFBQUEsRUFBQSxHQUFBLE1BQUEsQ0FBQTNNLE1BQUEyTSxFQUFBLEdBQUFBLEVBQUEsUUFBQSxFQUFBaEIsTUFBQSxHQXJCQUosQ0FBQSxDQUFBbFAsRUFBQXFRLE9Bd0JBeEgsT0FBQUMsZUFBQWxJLEVBQUEsYUFBQSxDQUFBK0MsT0FBQSxJQUNBLElBYUErTSxFQWJBQyxFQUFBclEsRUFBQSx1QkFDQXNRLEVBQUF0USxFQUFBLGFBQ0F1USxFQUFBdlEsRUFBQSxnQkFDQXdRLEVBQUF4USxFQUFBLDBCQUNBeVEsRUFBQXpRLEVBQUEsK0JBQ0ErTCxFQUFBL0wsRUFBQSxXQUNBMFEsRUFBQTFRLEVBQUEsd0JBRUEyUSxFQUFBLEtBQ0FDLEVBQUEsS0FDQTdFLEVBQUE4RSxTQUFBQyxhQUFBLElBQUE5USxJQUdBb1EsRUFBQSxtQkFBQVcsb0JBQUFDLHdCQUFBaFIsRUFDQTJRLEVBQUFQLEVBQUEsTUFDQVEsRUFBQVIsRUFBQSxnQkFHQSxJQUFBYSxHQWlDQUEsRUFBQXZJLFVBQUE3RixNQUFBLFNBQUFxTyxHQUNBLE9BQUE3QyxFQUFBakosVUFBQSxPQUFBLEVBQUEsV0FDQSxJQUFBaEMsRUFDQSxPQUFBNkwsRUFBQTdKLEtBQUEsU0FBQStMLEdBQ0EsT0FBQUEsRUFBQTlCLE9BQ0EsS0FBQSxFQUlBLE9BSEE2QixFQUFBQSxHQUFBWCxFQUFBYSxlQUFBQyxPQUNBdEYsRUFBQXVGLElBQUFDLEtBQUFMLEVBQUFYLEVBQUFhLGVBQUEsa0JBQ0FoTSxLQUFBeUYsT0FBQTJHLElBQUFsQixFQUFBbUIsU0FBQUMsTUFBQSw2Q0FBQW5CLEVBQUFhLGVBQUFGLEdBQUEsTUFDQSxpQkFBQTlMLEtBQUF1TSxnQkFDQSxDQUFBLEVBQUFwSCxRQUFBQyxPQUFBLElBQUFySyxNQUFBLDhFQUVBaUYsS0FBQXVNLGdCQUFBLGNBQ0F2TSxLQUFBd00scUJBQUF4TSxLQUFBeU0sY0FBQVgsR0FDQSxDQUFBLEVBQUE5TCxLQUFBd00sdUJBQ0EsS0FBQSxFQUVBLE9BREFULEVBQUE3QixPQUNBLGtCQUFBbEssS0FBQXVNLGdCQUFBLENBQUEsRUFBQSxJQUNBdk8sRUFBQSwrREFDQWdDLEtBQUF5RixPQUFBMkcsSUFBQWxCLEVBQUFtQixTQUFBdFIsTUFBQWlELEdBRUEsQ0FBQSxFQUFBZ0MsS0FBQTBNLGNBQ0EsS0FBQSxFQUdBLE9BREFYLEVBQUE3QixPQUNBLENBQUEsRUFBQS9FLFFBQUFDLE9BQUEsSUFBQXJLLE1BQUFpRCxLQUNBLEtBQUEsRUFDQSxHQUFBLGNBQUFnQyxLQUFBdU0sZ0JBR0EsT0FGQXZPLEVBQUEsOEdBQ0FnQyxLQUFBeUYsT0FBQTJHLElBQUFsQixFQUFBbUIsU0FBQXRSLE1BQUFpRCxHQUNBLENBQUEsRUFBQW1ILFFBQUFDLE9BQUEsSUFBQXJLLE1BQUFpRCxLQUVBK04sRUFBQTlCLE1BQUEsRUFDQSxLQUFBLEVBRUEsT0FEQWpLLEtBQUEyTSxtQkFBQSxFQUNBLENBQUEsU0FLQWQsRUFBQXZJLFVBQUF5QixLQUFBLFNBQUFvQyxHQUNBLE1BQUEsY0FBQW5ILEtBQUF1TSxnQkFDQXBILFFBQUFDLE9BQUEsSUFBQXJLLE1BQUEseUVBRUFpRixLQUFBNE0sWUFDQTVNLEtBQUE0TSxVQUFBLElBQUFDLEVBQUE3TSxLQUFBOE0sWUFHQTlNLEtBQUE0TSxVQUFBN0gsS0FBQW9DLEtBRUEwRSxFQUFBdkksVUFBQXlKLEtBQUEsU0FBQWxQLEdBQ0EsT0FBQW9MLEVBQUFqSixVQUFBLE9BQUEsRUFBQSxXQUNBLElBQUEwRixFQUFBMUYsS0FDQSxPQUFBNkosRUFBQTdKLEtBQUEsU0FBQStMLEdBQ0EsT0FBQUEsRUFBQTlCLE9BQ0EsS0FBQSxFQUNBLE1BQUEsaUJBQUFqSyxLQUFBdU0saUJBQ0F2TSxLQUFBeUYsT0FBQTJHLElBQUFsQixFQUFBbUIsU0FBQUMsTUFBQSwrQkFBQXpPLEVBQUEsMEVBQ0EsQ0FBQSxFQUFBc0gsUUFBQW1FLFlBRUEsa0JBQUF0SixLQUFBdU0saUJBQ0F2TSxLQUFBeUYsT0FBQTJHLElBQUFsQixFQUFBbUIsU0FBQUMsTUFBQSwrQkFBQXpPLEVBQUEsMkVBQ0EsQ0FBQSxFQUFBbUMsS0FBQTBNLGVBRUExTSxLQUFBdU0sZ0JBQUEsZ0JBQ0F2TSxLQUFBME0sWUFBQSxJQUFBdkgsUUFBQSxTQUFBbUUsR0FFQTVELEVBQUFzSCxvQkFBQTFELElBR0EsQ0FBQSxFQUFBdEosS0FBQWlOLGFBQUFwUCxLQUNBLEtBQUEsRUFHQSxPQURBa08sRUFBQTdCLE9BQ0EsQ0FBQSxFQUFBbEssS0FBQTBNLGFBQ0EsS0FBQSxFQUVBLE9BREFYLEVBQUE3QixPQUNBLENBQUEsU0FLQTJCLEVBQUF2SSxVQUFBMkosYUFBQSxTQUFBcFAsR0FDQSxPQUFBb0wsRUFBQWpKLFVBQUEsT0FBQSxFQUFBLFdBQ0EsSUFBQWtOLEVBQUFDLEVBQ0EsT0FBQXRELEVBQUE3SixLQUFBLFNBQUErTCxHQUNBLE9BQUFBLEVBQUE5QixPQUNBLEtBQUEsRUFJQWpLLEtBQUFvTixVQUFBdlAsRUFDQWtPLEVBQUE5QixNQUFBLEVBQ0EsS0FBQSxFQUVBLE9BREE4QixFQUFBNUIsS0FBQVksS0FBQSxDQUFBLEVBQUEsRUFBQSxDQUFBLElBQ0EsQ0FBQSxFQUFBL0ssS0FBQXdNLHNCQUNBLEtBQUEsRUFHQSxLQUFBLEVBRUEsT0FEQVQsRUFBQTdCLE9BQ0EsQ0FBQSxFQUFBLEdBQ0EsS0FBQSxFQUNBLElBQUFsSyxLQUFBNE0sVUFBQSxNQUFBLENBQUEsRUFBQSxHQUNBYixFQUFBOUIsTUFBQSxFQUNBLEtBQUEsRUFFQSxPQURBOEIsRUFBQTVCLEtBQUFZLEtBQUEsQ0FBQSxFQUFBLEVBQUEsQ0FBQSxJQUNBLENBQUEsRUFBQS9LLEtBQUE0TSxVQUFBRyxRQUNBLEtBQUEsRUFFQSxPQURBaEIsRUFBQTdCLE9BQ0EsQ0FBQSxFQUFBLEdBQ0EsS0FBQSxFQUdBLE9BRkFnRCxFQUFBbkIsRUFBQTdCLE9BQ0FsSyxLQUFBeUYsT0FBQTJHLElBQUFsQixFQUFBbUIsU0FBQXRSLE1BQUEsMENBQUFtUyxFQUFBLE1BQ0EsQ0FBQSxFQUFBLEdBQ0EsS0FBQSxFQUNBbE4sS0FBQTRNLGVBQUF4RyxFQUNBMkYsRUFBQTlCLE1BQUEsRUFDQSxLQUFBLEVBQ0EsSUFBQWpLLEtBQUE4TSxVQUFBLE1BQUEsQ0FBQSxFQUFBLElBQ0FmLEVBQUE5QixNQUFBLEdBQ0EsS0FBQSxHQUVBLE9BREE4QixFQUFBNUIsS0FBQVksS0FBQSxDQUFBLEdBQUEsR0FBQSxDQUFBLEtBQ0EsQ0FBQSxFQUFBL0ssS0FBQThNLFVBQUFDLFFBQ0EsS0FBQSxHQUVBLE9BREFoQixFQUFBN0IsT0FDQSxDQUFBLEVBQUEsSUFDQSxLQUFBLEdBSUEsT0FIQWlELEVBQUFwQixFQUFBN0IsT0FDQWxLLEtBQUF5RixPQUFBMkcsSUFBQWxCLEVBQUFtQixTQUFBdFIsTUFBQSxnREFBQW9TLEVBQUEsTUFDQW5OLEtBQUFxTixpQkFDQSxDQUFBLEVBQUEsSUFDQSxLQUFBLEdBRUEsT0FEQXJOLEtBQUE4TSxlQUFBMUcsRUFDQSxDQUFBLEVBQUEsSUFDQSxLQUFBLEdBQ0FwRyxLQUFBeUYsT0FBQTJHLElBQUFsQixFQUFBbUIsU0FBQUMsTUFBQSwwRkFDQXRNLEtBQUFxTixpQkFDQXRCLEVBQUE5QixNQUFBLEdBQ0EsS0FBQSxHQUFBLE1BQUEsQ0FBQSxTQUtBNEIsRUFBQXZJLFVBQUFtSixjQUFBLFNBQUFYLEdBQ0EsT0FBQTdDLEVBQUFqSixVQUFBLE9BQUEsRUFBQSxXQUNBLElBQUEzRCxFQUFBaVIsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFDQSxPQUFBN0QsRUFBQTdKLEtBQUEsU0FBQStMLEdBQ0EsT0FBQUEsRUFBQTlCLE9BQ0EsS0FBQSxFQUNBNU4sRUFBQTJELEtBQUEyTixRQUNBM04sS0FBQTROLG1CQUFBNU4sS0FBQThJLFFBQUE4RSxtQkFDQTdCLEVBQUE5QixNQUFBLEVBQ0EsS0FBQSxFQUVBLE9BREE4QixFQUFBNUIsS0FBQVksS0FBQSxDQUFBLEVBQUEsR0FBQSxDQUFBLEtBQ0EvSyxLQUFBOEksUUFBQStFLGdCQUNBN04sS0FBQThJLFFBQUFnRSxZQUFBM0IsRUFBQTJDLGtCQUFBQyxXQUFBLENBQUEsRUFBQSxJQUVBL04sS0FBQThNLFVBQUE5TSxLQUFBZ08sbUJBQUE3QyxFQUFBMkMsa0JBQUFDLFlBR0EsQ0FBQSxFQUFBL04sS0FBQWlPLGVBQUE1UixFQUFBeVAsS0FOQSxDQUFBLEVBQUEsR0FPQSxLQUFBLEVBSUEsT0FEQUMsRUFBQTdCLE9BQ0EsQ0FBQSxFQUFBLEdBQ0EsS0FBQSxFQUFBLE1BQUEsSUFBQW5QLE1BQUEsZ0ZBQ0EsS0FBQSxFQUFBLE1BQUEsQ0FBQSxFQUFBLElBQ0EsS0FBQSxFQUNBdVMsRUFBQSxLQUNBQyxFQUFBLEVBQ0FDLEVBQUEsV0FDQSxJQUFBVSxFQUNBLE9BQUFyRSxFQUFBN0osS0FBQSxTQUFBK0wsR0FDQSxPQUFBQSxFQUFBOUIsT0FDQSxLQUFBLEVBQUEsTUFBQSxDQUFBLEVBQUF3RCxFQUFBVSx1QkFBQTlSLElBQ0EsS0FBQSxFQUdBLEdBRkFpUixFQUFBdkIsRUFBQTdCLE9BRUEsa0JBQUF1RCxFQUFBbEIsaUJBQUEsaUJBQUFrQixFQUFBbEIsZ0JBQ0EsTUFBQSxJQUFBeFIsTUFBQSxrREFFQSxHQUFBdVMsRUFBQXpQLE1BQ0EsTUFBQSxJQUFBOUMsTUFBQXVTLEVBQUF6UCxPQUVBLEdBQUF5UCxFQUFBYyxnQkFDQSxNQUFBLElBQUFyVCxNQUFBLGdNQVVBLE9BUkF1UyxFQUFBalIsTUFDQUEsRUFBQWlSLEVBQUFqUixLQUVBaVIsRUFBQWUsY0FDQUgsRUFBQVosRUFBQWUsWUFDQVosRUFBQUcsbUJBQUEsV0FBQSxPQUFBTSxJQUVBWCxJQUNBLENBQUEsT0FJQUUsRUFBQXpOLEtBQ0ErTCxFQUFBOUIsTUFBQSxFQUNBLEtBQUEsRUFBQSxNQUFBLENBQUEsRUFBQXVELEtBQ0EsS0FBQSxFQUNBekIsRUFBQTdCLE9BQ0E2QixFQUFBOUIsTUFBQSxFQUNBLEtBQUEsRUFDQSxHQUFBcUQsRUFBQWpSLEtBQUFrUixFQTVQQSxJQTRQQSxNQUFBLENBQUEsRUFBQSxHQUNBeEIsRUFBQTlCLE1BQUEsRUFDQSxLQUFBLEVBQ0EsR0EvUEEsTUErUEFzRCxHQUFBRCxFQUFBalIsSUFDQSxNQUFBLElBQUF0QixNQUFBLHlDQUVBLE1BQUEsQ0FBQSxFQUFBaUYsS0FBQXNPLGdCQUFBalMsRUFBQTJELEtBQUE4SSxRQUFBZ0UsVUFBQVEsRUFBQXhCLElBQ0EsS0FBQSxHQUNBQyxFQUFBN0IsT0FDQTZCLEVBQUE5QixNQUFBLEdBQ0EsS0FBQSxHQVVBLE9BVEFqSyxLQUFBOE0scUJBQUExQixFQUFBbUQsdUJBQ0F2TyxLQUFBd08sU0FBQUMsbUJBQUEsR0FFQSxnQkFBQXpPLEtBQUF1TSxrQkFHQXZNLEtBQUF5RixPQUFBMkcsSUFBQWxCLEVBQUFtQixTQUFBQyxNQUFBLDhDQUNBdE0sS0FBQXVNLGdCQUFBLGFBRUEsQ0FBQSxFQUFBLElBQ0EsS0FBQSxHQUtBLE9BSkFtQixFQUFBM0IsRUFBQTdCLE9BQ0FsSyxLQUFBeUYsT0FBQTJHLElBQUFsQixFQUFBbUIsU0FBQXRSLE1BQUEsbUNBQUEyUyxHQUNBMU4sS0FBQXVNLGdCQUFBLGVBQ0F2TSxLQUFBOE0sZUFBQTFHLEVBQ0EsQ0FBQSxFQUFBakIsUUFBQUMsT0FBQXNJLElBQ0EsS0FBQSxHQUFBLE1BQUEsQ0FBQSxTQUtBN0IsRUFBQXZJLFVBQUE2Syx1QkFBQSxTQUFBOVIsR0FDQSxPQUFBNE0sRUFBQWpKLFVBQUEsT0FBQSxFQUFBLFdBQ0EsSUFBQStMLEVBQUEyQyxFQUFBQyxFQUFBQyxFQUFBckcsRUFBQStFLEVBQUF1QixFQUNBLE9BQUFoRixFQUFBN0osS0FBQSxTQUFBOE8sR0FDQSxPQUFBQSxFQUFBN0UsT0FDQSxLQUFBLEVBQ0EsT0FBQWpLLEtBQUE0TixtQkFDQSxDQUFBLEVBQUE1TixLQUFBNE4sc0JBREEsQ0FBQSxFQUFBLEdBRUEsS0FBQSxHQUNBZSxFQUFBRyxFQUFBNUUsV0FFQTZCLEVBQUEsSUFDQSxjQUFBLFVBQUE0QyxFQURBRCxFQUVBM0MsR0FFQStDLEVBQUE3RSxNQUFBLEVBQ0EsS0FBQSxFQUNBMkUsRUFBQTVPLEtBQUErTyxvQkFBQTFTLEdBQ0EyRCxLQUFBeUYsT0FBQTJHLElBQUFsQixFQUFBbUIsU0FBQUMsTUFBQSxnQ0FBQXNDLEVBQUEsS0FDQUUsRUFBQTdFLE1BQUEsRUFDQSxLQUFBLEVBRUEsT0FEQTZFLEVBQUEzRSxLQUFBWSxLQUFBLENBQUEsRUFBQSxFQUFBLENBQUEsSUFDQSxDQUFBLEVBQUEvSyxLQUFBdUYsV0FBQXdELEtBQUE2RixFQUFBLENBQ0F4UCxRQUFBLEdBQ0FzUCxRQUFBQSxLQUVBLEtBQUEsRUFFQSxPQUFBLE9BREFuRyxFQUFBdUcsRUFBQTVFLFFBQ0EzRCxXQUNBLENBQUEsRUFBQXBCLFFBQUFDLE9BQUEsSUFBQXJLLE1BQUEsa0RBQUF3TixFQUFBaEMsa0JBRUErRyxFQUFBNVEsS0FBQUMsTUFBQTRMLEVBQUFuSixVQUNBNFAsa0JBQUExQixFQUFBMEIsaUJBQUEsS0FHQTFCLEVBQUEyQixnQkFBQTNCLEVBQUE0QixjQUVBLENBQUEsRUFBQTVCLElBQ0EsS0FBQSxFQUdBLE9BRkF1QixFQUFBQyxFQUFBNUUsT0FDQWxLLEtBQUF5RixPQUFBMkcsSUFBQWxCLEVBQUFtQixTQUFBdFIsTUFBQSxtREFBQThULEdBQ0EsQ0FBQSxFQUFBMUosUUFBQUMsT0FBQXlKLElBQ0EsS0FBQSxFQUFBLE1BQUEsQ0FBQSxTQUtBaEQsRUFBQXZJLFVBQUE2TCxpQkFBQSxTQUFBOVMsRUFBQTRTLEdBQ0EsT0FBQUEsRUFHQTVTLElBQUEsSUFBQUEsRUFBQW9MLFFBQUEsS0FBQSxJQUFBLEtBQUEsTUFBQXdILEVBRkE1UyxHQUlBd1AsRUFBQXZJLFVBQUFnTCxnQkFBQSxTQUFBalMsRUFBQStTLEVBQUE5QixFQUFBK0IsR0FDQSxPQUFBcEcsRUFBQWpKLFVBQUEsT0FBQSxFQUFBLFdBQ0EsSUFBQXNQLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUE1UyxFQUFBNlMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQTlSLEVBQ0EsT0FBQTZMLEVBQUE3SixLQUFBLFNBQUErTCxHQUNBLE9BQUFBLEVBQUE5QixPQUNBLEtBQUEsRUFFQSxPQURBcUYsRUFBQXRQLEtBQUFtUCxpQkFBQTlTLEVBQUFpUixFQUFBMkIsaUJBQ0FqUCxLQUFBK1AsYUFBQVgsSUFDQXBQLEtBQUF5RixPQUFBMkcsSUFBQWxCLEVBQUFtQixTQUFBQyxNQUFBLDJFQUNBdE0sS0FBQThNLFVBQUFzQyxFQUNBLENBQUEsRUFBQXBQLEtBQUFpTyxlQUFBcUIsRUFBQUQsS0FIQSxDQUFBLEVBQUEsR0FJQSxLQUFBLEVBR0EsT0FGQXRELEVBQUE3QixPQUNBbEssS0FBQWtQLGFBQUE1QixFQUFBNEIsYUFDQSxDQUFBLEdBQ0EsS0FBQSxFQUNBSyxFQUFBLEdBQ0FDLEVBQUFsQyxFQUFBMEMscUJBQUEsR0FDQVAsRUFBQW5DLEVBQ0F6USxFQUFBLEVBQUE2UyxFQUFBRixFQUNBekQsRUFBQTlCLE1BQUEsRUFDQSxLQUFBLEVBQ0EsT0FBQXBOLEVBQUE2UyxFQUFBdFUsUUFDQXVVLEVBQUFELEVBQUE3UyxJQUNBK1MsRUFBQTVQLEtBQUFpUSx3QkFBQU4sRUFBQVAsRUFBQUMsY0FDQXRVLE9BRUF3VSxFQUFBeEUsS0FBQTRFLEVBQUE3QyxVQUFBLFlBQUE4QyxHQUNBLENBQUEsRUFBQSxLQUhBLENBQUEsRUFBQSxJQUhBLENBQUEsRUFBQSxJQU9BLEtBQUEsRUFDQSxJQUFBNVAsS0FBQStQLGFBQUFILEdBQUEsTUFBQSxDQUFBLEVBQUEsSUFFQSxHQURBNVAsS0FBQThNLFVBQUE4QyxFQUNBSCxFQUFBLE1BQUEsQ0FBQSxFQUFBLEdBQ0ExRCxFQUFBOUIsTUFBQSxFQUNBLEtBQUEsRUFFQSxPQURBOEIsRUFBQTVCLEtBQUFZLEtBQUEsQ0FBQSxFQUFBLEVBQUEsQ0FBQSxJQUNBLENBQUEsRUFBQS9LLEtBQUFtTyx1QkFBQTlSLElBQ0EsS0FBQSxFQUVBLE9BREFvVCxFQUFBMUQsRUFBQTdCLE9BQ0EsQ0FBQSxFQUFBLEdBQ0EsS0FBQSxFQUVBLE9BREEyRixFQUFBOUQsRUFBQTdCLE9BQ0EsQ0FBQSxFQUFBL0UsUUFBQUMsT0FBQXlLLElBQ0EsS0FBQSxFQUNBUCxFQUFBdFAsS0FBQW1QLGlCQUFBOVMsRUFBQW9ULEVBQUFSLGlCQUNBbEQsRUFBQTlCLE1BQUEsRUFDQSxLQUFBLEVBRUEsT0FEQThCLEVBQUE1QixLQUFBWSxLQUFBLENBQUEsRUFBQSxHQUFBLENBQUEsS0FDQSxDQUFBLEVBQUEvSyxLQUFBaU8sZUFBQXFCLEVBQUFELElBQ0EsS0FBQSxHQUdBLE9BRkF0RCxFQUFBN0IsT0FDQWxLLEtBQUFrUCxhQUFBTyxFQUFBUCxhQUNBLENBQUEsR0FDQSxLQUFBLEdBS0EsT0FKQVksRUFBQS9ELEVBQUE3QixPQUNBbEssS0FBQXlGLE9BQUEyRyxJQUFBbEIsRUFBQW1CLFNBQUF0UixNQUFBLGtDQUFBNFUsRUFBQTdDLFVBQUEsTUFBQWdELEdBQ0FMLE9BQUFySixFQUNBbUosRUFBQXhFLEtBQUE0RSxFQUFBN0MsVUFBQSxZQUFBZ0QsR0FDQSxnQkFBQTlQLEtBQUF1TSxpQkFDQXZPLEVBQUEsdURBQ0FnQyxLQUFBeUYsT0FBQTJHLElBQUFsQixFQUFBbUIsU0FBQUMsTUFBQXRPLEdBQ0EsQ0FBQSxFQUFBbUgsUUFBQUMsT0FBQSxJQUFBckssTUFBQWlELE1BRUEsQ0FBQSxFQUFBLElBQ0EsS0FBQSxHQUVBLE9BREFuQixJQUNBLENBQUEsRUFBQSxHQUNBLEtBQUEsR0FDQSxPQUFBLEVBQUEwUyxFQUFBblUsT0FDQSxDQUFBLEVBQUErSixRQUFBQyxPQUFBLElBQUFySyxNQUFBLHlFQUFBd1UsRUFBQVcsS0FBQSxRQUVBLENBQUEsRUFBQS9LLFFBQUFDLE9BQUEsSUFBQXJLLE1BQUEsdUZBS0E4USxFQUFBdkksVUFBQTBLLG1CQUFBLFNBQUFsQixHQUNBLE9BQUFBLEdBQ0EsS0FBQTNCLEVBQUEyQyxrQkFBQUMsV0FDQSxJQUFBL04sS0FBQThJLFFBQUFxSCxVQUNBLE1BQUEsSUFBQXBWLE1BQUEscURBRUEsT0FBQSxJQUFBdVEsRUFBQThFLG1CQUFBcFEsS0FBQXVGLFdBQUF2RixLQUFBNE4sbUJBQUE1TixLQUFBeUYsT0FBQXpGLEtBQUE4SSxRQUFBdUgsb0JBQUEsRUFBQXJRLEtBQUE4SSxRQUFBcUgsV0FDQSxLQUFBaEYsRUFBQTJDLGtCQUFBd0MsaUJBQ0EsSUFBQXRRLEtBQUE4SSxRQUFBeUgsWUFDQSxNQUFBLElBQUF4VixNQUFBLHVEQUVBLE9BQUEsSUFBQXNRLEVBQUFtRiwwQkFBQXhRLEtBQUF1RixXQUFBdkYsS0FBQTROLG1CQUFBNU4sS0FBQXlGLE9BQUF6RixLQUFBOEksUUFBQXVILG9CQUFBLEVBQUFyUSxLQUFBOEksUUFBQXlILGFBQ0EsS0FBQXBGLEVBQUEyQyxrQkFBQTJDLFlBQ0EsT0FBQSxJQUFBckYsRUFBQW1ELHFCQUFBdk8sS0FBQXVGLFdBQUF2RixLQUFBNE4sbUJBQUE1TixLQUFBeUYsT0FBQXpGLEtBQUE4SSxRQUFBdUgsb0JBQUEsR0FDQSxRQUNBLE1BQUEsSUFBQXRWLE1BQUEsc0JBQUErUixFQUFBLE9BR0FqQixFQUFBdkksVUFBQTJLLGVBQUEsU0FBQTVSLEVBQUF5UCxHQUNBLElBQUFwRyxFQUFBMUYsS0FHQSxPQUZBQSxLQUFBOE0sVUFBQTRELFVBQUExUSxLQUFBMFEsVUFDQTFRLEtBQUE4TSxVQUFBNkQsUUFBQSxTQUFBdFcsR0FBQSxPQUFBcUwsRUFBQTJILGVBQUFoVCxJQUNBMkYsS0FBQThNLFVBQUE4RCxRQUFBdlUsRUFBQXlQLElBRUFELEVBQUF2SSxVQUFBMk0sd0JBQUEsU0FBQU4sRUFBQVAsRUFBQUMsR0FDQSxJQThHQUQsRUFBQXlCLEVBOUdBL0QsRUFBQTNCLEVBQUEyQyxrQkFBQTZCLEVBQUE3QyxXQUNBLEdBQUFBLE1BQUFBLEVBRUEsT0FEQTlNLEtBQUF5RixPQUFBMkcsSUFBQWxCLEVBQUFtQixTQUFBQyxNQUFBLHVCQUFBcUQsRUFBQTdDLFVBQUEsaURBQ0EsSUFBQS9SLE1BQUEsdUJBQUE0VSxFQUFBN0MsVUFBQSxpREFHQSxHQXdHQStELEVBeEdBL0QsR0F3R0FzQyxFQXhHQUEsSUF5R0EsSUFBQXlCLEVBQUF6QixHQWhGQSxPQURBcFAsS0FBQXlGLE9BQUEyRyxJQUFBbEIsRUFBQW1CLFNBQUFDLE1BQUEsdUJBQUFuQixFQUFBMkMsa0JBQUFoQixHQUFBLDRDQUNBLElBQUEvUixNQUFBLElBQUFvUSxFQUFBMkMsa0JBQUFoQixHQUFBLGdDQXZCQSxLQUFBLEdBREE2QyxFQUFBbUIsZ0JBQUFDLElBQUEsU0FBQXJJLEdBQUEsT0FBQXlDLEVBQUFhLGVBQUF0RCxLQUNBakIsUUFBQTRILElBa0JBLE9BREFyUCxLQUFBeUYsT0FBQTJHLElBQUFsQixFQUFBbUIsU0FBQUMsTUFBQSx1QkFBQW5CLEVBQUEyQyxrQkFBQWhCLEdBQUEsZ0VBQUEzQixFQUFBYSxlQUFBcUQsR0FBQSxNQUNBLElBQUF0VSxNQUFBLElBQUFvUSxFQUFBMkMsa0JBQUFoQixHQUFBLHNCQUFBM0IsRUFBQWEsZUFBQXFELEdBQUEsS0FqQkEsR0FBQXZDLElBQUEzQixFQUFBMkMsa0JBQUFDLGFBQUEvTixLQUFBOEksUUFBQXFILFdBQ0FyRCxJQUFBM0IsRUFBQTJDLGtCQUFBd0MsbUJBQUF0USxLQUFBOEksUUFBQXlILFlBRUEsT0FEQXZRLEtBQUF5RixPQUFBMkcsSUFBQWxCLEVBQUFtQixTQUFBQyxNQUFBLHVCQUFBbkIsRUFBQTJDLGtCQUFBaEIsR0FBQSx1REFDQSxJQUFBL1IsTUFBQSxJQUFBb1EsRUFBQTJDLGtCQUFBaEIsR0FBQSwyQ0FHQTlNLEtBQUF5RixPQUFBMkcsSUFBQWxCLEVBQUFtQixTQUFBQyxNQUFBLHdCQUFBbkIsRUFBQTJDLGtCQUFBaEIsR0FBQSxNQUNBLElBQ0EsT0FBQTlNLEtBQUFnTyxtQkFBQWxCLEdBRUEsTUFBQWtFLEdBQ0EsT0FBQUEsSUFlQW5GLEVBQUF2SSxVQUFBeU0sYUFBQSxTQUFBakQsR0FDQSxPQUFBQSxHQUFBLGlCQUFBLEdBQUEsWUFBQUEsR0FFQWpCLEVBQUF2SSxVQUFBK0osZUFBQSxTQUFBeFAsR0FNQSxHQUxBbUMsS0FBQXlGLE9BQUEyRyxJQUFBbEIsRUFBQW1CLFNBQUFDLE1BQUEsaUNBQUF6TyxFQUFBLDJCQUFBbUMsS0FBQXVNLGdCQUFBLEtBQ0F2TSxLQUFBOE0sZUFBQTFHLEVBRUF2SSxFQUFBbUMsS0FBQW9OLFdBQUF2UCxFQUNBbUMsS0FBQW9OLGVBQUFoSCxFQUNBLGlCQUFBcEcsS0FBQXVNLGdCQUlBLEdBQUEsZ0JBQUF2TSxLQUFBdU0saUJBaUJBLEdBYkEsa0JBQUF2TSxLQUFBdU0saUJBR0F2TSxLQUFBZ04sc0JBRUFuUCxFQUNBbUMsS0FBQXlGLE9BQUEyRyxJQUFBbEIsRUFBQW1CLFNBQUF0UixNQUFBLHVDQUFBOEMsRUFBQSxNQUdBbUMsS0FBQXlGLE9BQUEyRyxJQUFBbEIsRUFBQW1CLFNBQUE0RSxZQUFBLDRCQUVBalIsS0FBQWtQLGtCQUFBOUksRUFDQXBHLEtBQUF1TSxnQkFBQSxlQUNBdk0sS0FBQTJRLFNBQUEzUSxLQUFBMk0sa0JBQUEsQ0FDQTNNLEtBQUEyTSxtQkFBQSxFQUNBLElBQ0EzTSxLQUFBMlEsUUFBQTlTLEdBRUEsTUFBQXhELEdBQ0EyRixLQUFBeUYsT0FBQTJHLElBQUFsQixFQUFBbUIsU0FBQXRSLE1BQUEsMEJBQUE4QyxFQUFBLGtCQUFBeEQsRUFBQSxhQXRCQTJGLEtBQUF5RixPQUFBMkcsSUFBQWxCLEVBQUFtQixTQUFBNkUsUUFBQSx5Q0FBQXJULEVBQUEsMEZBSkFtQyxLQUFBeUYsT0FBQTJHLElBQUFsQixFQUFBbUIsU0FBQUMsTUFBQSx5Q0FBQXpPLEVBQUEsK0VBOEJBZ08sRUFBQXZJLFVBQUE2TixXQUFBLFNBQUE5VSxHQUVBLEdBQUEsSUFBQUEsRUFBQStVLFlBQUEsV0FBQSxJQUFBLElBQUEvVSxFQUFBK1UsWUFBQSxVQUFBLEdBQ0EsT0FBQS9VLEVBRUEsSUFBQXNLLEVBQUE4RSxTQUFBNEYsWUFBQXRWLE9BQUFKLFNBQ0EsTUFBQSxJQUFBWixNQUFBLG1CQUFBc0IsRUFBQSxNQU9BLElBQUFpVixFQUFBdlYsT0FBQUosU0FBQWMsY0FBQSxLQUdBLE9BRkE2VSxFQUFBL1EsS0FBQWxFLEVBQ0EyRCxLQUFBeUYsT0FBQTJHLElBQUFsQixFQUFBbUIsU0FBQTRFLFlBQUEsZ0JBQUE1VSxFQUFBLFNBQUFpVixFQUFBL1EsS0FBQSxNQUNBK1EsRUFBQS9RLE1BRUFzTCxFQUFBdkksVUFBQXlMLG9CQUFBLFNBQUExUyxHQUNBLElBQUFrVixFQUFBbFYsRUFBQW9MLFFBQUEsS0FDQW1ILEVBQUF2UyxFQUFBaU0sVUFBQSxHQUFBLElBQUFpSixFQUFBbFYsRUFBQWpCLE9BQUFtVyxHQVVBLE1BVEEsTUFBQTNDLEVBQUFBLEVBQUF4VCxPQUFBLEtBQ0F3VCxHQUFBLEtBRUFBLEdBQUEsYUFFQSxLQURBQSxJQUFBLElBQUEyQyxFQUFBLEdBQUFsVixFQUFBaU0sVUFBQWlKLElBQ0E5SixRQUFBLHNCQUNBbUgsSUFBQSxJQUFBMkMsRUFBQSxJQUFBLElBQ0EzQyxHQUFBLG9CQUFBNU8sS0FBQWdQLGtCQUVBSixHQUVBL0MsR0FyaEJBLFNBQUFBLEVBQUF4UCxFQUFBeU0sUUFDQSxJQUFBQSxJQUFBQSxFQUFBLElBQ0E5SSxLQUFBd08sU0FBQSxHQUNBeE8sS0FBQWdQLGlCQUFBLEVBQ0FySSxFQUFBdUYsSUFBQXNGLFdBQUFuVixFQUFBLE9BQ0EyRCxLQUFBeUYsT0FBQWtCLEVBQUE4SyxhQUFBM0ksRUFBQXJELFFBQ0F6RixLQUFBMk4sUUFBQTNOLEtBQUFtUixXQUFBOVUsSUFDQXlNLEVBQUFBLEdBQUEsSUFDQXVILGtCQUFBdkgsRUFBQXVILG9CQUFBLEVBQ0ExSixFQUFBOEUsU0FBQUMsUUFBQSxvQkFBQXlFLFdBQUFySCxFQUFBcUgsVUFHQXhKLEVBQUE4RSxTQUFBQyxTQUFBNUMsRUFBQXFILFdBQ0E1RSxJQUNBekMsRUFBQXFILFVBQUE1RSxHQUpBekMsRUFBQXFILFVBQUFBLFVBT0F4SixFQUFBOEUsU0FBQUMsUUFBQSxvQkFBQTZFLGFBQUF6SCxFQUFBeUgsWUFHQTVKLEVBQUE4RSxTQUFBQyxTQUFBNUMsRUFBQXlILGtCQUNBLElBQUEvRSxJQUNBMUMsRUFBQXlILFlBQUEvRSxHQUpBMUMsRUFBQXlILFlBQUFBLFlBT0F2USxLQUFBdUYsV0FBQXVELEVBQUF2RCxZQUFBLElBQUEwRixFQUFBcEcsa0JBQUE3RSxLQUFBeUYsUUFDQXpGLEtBQUF1TSxnQkFBQSxlQUNBdk0sS0FBQTJNLG1CQUFBLEVBQ0EzTSxLQUFBOEksUUFBQUEsRUFDQTlJLEtBQUEwUSxVQUFBLEtBQ0ExUSxLQUFBMlEsUUFBQSxLQXlmQXpWLEVBQUEyUSxlQUFBQSxFQUtBLElBQUFnQixHQVNBQSxFQUFBdkosVUFBQXlCLEtBQUEsU0FBQW9DLEdBS0EsT0FKQW5ILEtBQUEwUixXQUFBdkssR0FDQW5ILEtBQUEyUixrQkFDQTNSLEtBQUEyUixnQkFBQSxJQUFBQyxHQUVBNVIsS0FBQTJSLGdCQUFBRSxTQUVBaEYsRUFBQXZKLFVBQUF5SixLQUFBLFdBR0EsT0FGQS9NLEtBQUE4UixXQUFBLEVBQ0E5UixLQUFBK1IsaUJBQUF6SSxVQUNBdEosS0FBQWdTLGlCQUVBbkYsRUFBQXZKLFVBQUFvTyxXQUFBLFNBQUF2SyxHQUNBLEdBQUFuSCxLQUFBbUksT0FBQS9NLGVBQUE0RSxLQUFBbUksT0FBQSxXQUFBLEVBQ0EsTUFBQSxJQUFBcE4sTUFBQSxzQ0FBQWlGLEtBQUEsT0FBQSwyQkFBQSxHQUVBQSxLQUFBbUksT0FBQTRDLEtBQUE1RCxHQUNBbkgsS0FBQStSLGlCQUFBekksV0FFQXVELEVBQUF2SixVQUFBMk8sU0FBQSxXQUNBLE9BQUFoSixFQUFBakosVUFBQSxPQUFBLEVBQUEsV0FDQSxJQUFBMlIsRUFBQXhLLEVBQUErSyxFQUNBLE9BQUFySSxFQUFBN0osS0FBQSxTQUFBK0wsR0FDQSxPQUFBQSxFQUFBOUIsT0FDQSxLQUFBLEVBRUEsTUFBQSxDQUFBLEVBQUFqSyxLQUFBK1IsaUJBQUFGLFNBQ0EsS0FBQSxFQUVBLEdBREE5RixFQUFBN0IsUUFDQWxLLEtBQUE4UixVQUlBLE9BSEE5UixLQUFBMlIsaUJBQ0EzUixLQUFBMlIsZ0JBQUF2TSxPQUFBLHVCQUVBLENBQUEsRUFBQSxHQUVBcEYsS0FBQStSLGlCQUFBLElBQUFILEVBQ0FELEVBQUEzUixLQUFBMlIsZ0JBQ0EzUixLQUFBMlIscUJBQUF2TCxFQUNBZSxFQUFBLGlCQUFBbkgsS0FBQW1JLE9BQUEsR0FDQW5JLEtBQUFtSSxPQUFBK0gsS0FBQSxJQUNBckQsRUFBQXNGLGNBQUFuUyxLQUFBbUksUUFDQW5JLEtBQUFtSSxPQUFBL00sT0FBQSxFQUNBMlEsRUFBQTlCLE1BQUEsRUFDQSxLQUFBLEVBRUEsT0FEQThCLEVBQUE1QixLQUFBWSxLQUFBLENBQUEsRUFBQSxFQUFBLENBQUEsSUFDQSxDQUFBLEVBQUEvSyxLQUFBOE0sVUFBQS9ILEtBQUFvQyxJQUNBLEtBQUEsRUFHQSxPQUZBNEUsRUFBQTdCLE9BQ0F5SCxFQUFBckksVUFDQSxDQUFBLEVBQUEsR0FDQSxLQUFBLEVBR0EsT0FGQTRJLEVBQUFuRyxFQUFBN0IsT0FDQXlILEVBQUF2TSxPQUFBOE0sR0FDQSxDQUFBLEVBQUEsR0FDQSxLQUFBLEVBQUEsTUFBQSxDQUFBLEVBQUEsR0FDQSxLQUFBLEVBQUEsTUFBQSxDQUFBLFNBS0FyRixFQUFBc0YsY0FBQSxTQUFBQyxHQUlBLElBSEEsSUFBQUMsRUFBQUQsRUFBQXJCLElBQUEsU0FBQTVNLEdBQUEsT0FBQUEsRUFBQStELGFBQUFvSyxPQUFBLFNBQUF4WCxFQUFBcUosR0FBQSxPQUFBckosRUFBQXFKLElBQ0F3RixFQUFBLElBQUFwQyxXQUFBOEssR0FDQUUsRUFBQSxFQUNBMVYsRUFBQSxFQUFBMlYsRUFBQUosRUFBQXZWLEVBQUEyVixFQUFBcFgsT0FBQXlCLElBQUEsQ0FDQSxJQUFBNFYsRUFBQUQsRUFBQTNWLEdBQ0E4TSxFQUFBK0ksSUFBQSxJQUFBbkwsV0FBQWtMLEdBQUFGLEdBQ0FBLEdBQUFFLEVBQUF2SyxXQUVBLE9BQUF5QixHQUVBa0QsR0EvRUEsU0FBQUEsRUFBQUMsR0FDQTlNLEtBQUE4TSxVQUFBQSxFQUNBOU0sS0FBQW1JLE9BQUEsR0FDQW5JLEtBQUE4UixXQUFBLEVBQ0E5UixLQUFBK1IsaUJBQUEsSUFBQUgsRUFDQTVSLEtBQUEyUixnQkFBQSxJQUFBQyxFQUNBNVIsS0FBQWdTLGdCQUFBaFMsS0FBQWlTLFdBMkVBL1csRUFBQTJSLG1CQUFBQSxFQUNBLElBQUErRSxHQVFBQSxFQUFBdE8sVUFBQWdHLFFBQUEsV0FDQXRKLEtBQUEyUyxZQUVBZixFQUFBdE8sVUFBQThCLE9BQUEsU0FBQXdOLEdBQ0E1UyxLQUFBNlMsU0FBQUQsSUFFQWhCLEdBYkEsU0FBQUEsSUFDQSxJQUFBbE0sRUFBQTFGLEtBQ0FBLEtBQUE2UixRQUFBLElBQUExTSxRQUFBLFNBQUFtRSxFQUFBbEUsR0FDQSxJQUNBMkcsRUFBQSxDQUFBekMsRUFBQWxFLEdBQUEsT0FBQU0sRUFBQWlOLFNBQUE1RyxFQUFBLEdBQUFyRyxFQUFBbU4sU0FBQTlHLEVBQUEsR0FBQUEsTSxnTUMzcUJBLElBQUE5QyxFQUFBakosTUFBQUEsS0FBQWlKLFdBQUEsU0FBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FDQSxPQUFBLElBQUFELEVBQUFBLEdBQUFqRSxTQUFBLFNBQUFtRSxFQUFBbEUsR0FDQSxTQUFBbUUsRUFBQXRMLEdBQUEsSUFBQXVMLEVBQUFILEVBQUFJLEtBQUF4TCxJQUFBLE1BQUE1RCxHQUFBK0ssRUFBQS9LLElBQ0EsU0FBQXFQLEVBQUF6TCxHQUFBLElBQUF1TCxFQUFBSCxFQUFBLE1BQUFwTCxJQUFBLE1BQUE1RCxHQUFBK0ssRUFBQS9LLElBQ0EsU0FBQW1QLEVBQUFHLEdBQUFBLEVBQUFDLEtBQUFOLEVBQUFLLEVBQUExTCxPQUFBLElBQUFtTCxFQUFBLFNBQUFFLEdBQUFBLEVBQUFLLEVBQUExTCxTQUFBUCxLQUFBNkwsRUFBQUcsR0FDQUYsR0FBQUgsRUFBQUEsRUFBQXRCLE1BQUFtQixFQUFBQyxHQUFBLEtBQUFNLFdBR0FJLEVBQUE3SixNQUFBQSxLQUFBNkosYUFBQSxTQUFBWCxFQUFBWSxHQUNBLElBQUFwUCxFQUFBcVAsRUFBQXhQLEVBQUF5UCxFQUFBLENBQUFDLE1BQUEsRUFBQUMsS0FBQSxXQUFBLEdBQUEsRUFBQTNQLEVBQUEsR0FBQSxNQUFBQSxFQUFBLEdBQUEsT0FBQUEsRUFBQSxJQUFBNFAsS0FBQSxHQUFBQyxJQUFBLElBQ0FDLEVBQUEsQ0FBQVosS0FBQWEsRUFBQSxHQUFBQyxNQUFBRCxFQUFBLEdBQUFFLE9BQUFGLEVBQUEsSUFBQSxNQUFBLG1CQUFBRyxTQUFBSixFQUFBSSxPQUFBQyxVQUFBLFdBQUEsT0FBQTFLLE9BQUFxSyxFQUNBLFNBQUFDLEVBQUFoUSxHQUFBLE9BQUEsU0FBQXFRLEdBQUEsT0FDQSxTQUFBQyxHQUNBLEdBQUFsUSxFQUFBLE1BQUEsSUFBQW1RLFVBQUEsbUNBQ0EsS0FBQWIsR0FBQSxJQUNBLEdBQUF0UCxFQUFBLEVBQUFxUCxJQUFBeFAsRUFBQSxFQUFBcVEsRUFBQSxHQUFBYixFQUFBLE9BQUFhLEVBQUEsR0FBQWIsRUFBQSxTQUFBeFAsRUFBQXdQLEVBQUEsU0FBQXhQLEVBQUFZLEtBQUE0TyxHQUFBLEdBQUFBLEVBQUFOLFNBQUFsUCxFQUFBQSxFQUFBWSxLQUFBNE8sRUFBQWEsRUFBQSxLQUFBaEIsS0FBQSxPQUFBclAsRUFFQSxPQURBd1AsRUFBQSxFQUFBeFAsSUFBQXFRLEVBQUEsQ0FBQSxFQUFBQSxFQUFBLEdBQUFyUSxFQUFBMEQsUUFDQTJNLEVBQUEsSUFDQSxLQUFBLEVBQUEsS0FBQSxFQUFBclEsRUFBQXFRLEVBQUEsTUFDQSxLQUFBLEVBQUEsT0FBQVosRUFBQUMsUUFBQSxDQUFBaE0sTUFBQTJNLEVBQUEsR0FBQWhCLE1BQUEsR0FDQSxLQUFBLEVBQUFJLEVBQUFDLFFBQUFGLEVBQUFhLEVBQUEsR0FBQUEsRUFBQSxDQUFBLEdBQUEsU0FDQSxLQUFBLEVBQUFBLEVBQUFaLEVBQUFJLElBQUFVLE1BQUFkLEVBQUFHLEtBQUFXLE1BQUEsU0FDQSxRQUNBLEtBQUF2USxFQUFBLEdBQUFBLEVBQUF5UCxFQUFBRyxNQUFBL08sUUFBQWIsRUFBQUEsRUFBQWEsT0FBQSxNQUFBLElBQUF3UCxFQUFBLElBQUEsSUFBQUEsRUFBQSxJQUFBLENBQUFaLEVBQUEsRUFBQSxTQUNBLEdBQUEsSUFBQVksRUFBQSxNQUFBclEsR0FBQXFRLEVBQUEsR0FBQXJRLEVBQUEsSUFBQXFRLEVBQUEsR0FBQXJRLEVBQUEsSUFBQSxDQUFBeVAsRUFBQUMsTUFBQVcsRUFBQSxHQUFBLE1BQ0EsR0FBQSxJQUFBQSxFQUFBLElBQUFaLEVBQUFDLE1BQUExUCxFQUFBLEdBQUEsQ0FBQXlQLEVBQUFDLE1BQUExUCxFQUFBLEdBQUFBLEVBQUFxUSxFQUFBLE1BQ0EsR0FBQXJRLEdBQUF5UCxFQUFBQyxNQUFBMVAsRUFBQSxHQUFBLENBQUF5UCxFQUFBQyxNQUFBMVAsRUFBQSxHQUFBeVAsRUFBQUksSUFBQVcsS0FBQUgsR0FBQSxNQUNBclEsRUFBQSxJQUFBeVAsRUFBQUksSUFBQVUsTUFDQWQsRUFBQUcsS0FBQVcsTUFBQSxTQUVBRixFQUFBZCxFQUFBM08sS0FBQStOLEVBQUFjLEdBQ0EsTUFBQTNQLEdBQUF1USxFQUFBLENBQUEsRUFBQXZRLEdBQUEwUCxFQUFBLEVBQUEsUUFBQXJQLEVBQUFILEVBQUEsRUFDQSxHQUFBLEVBQUFxUSxFQUFBLEdBQUEsTUFBQUEsRUFBQSxHQUFBLE1BQUEsQ0FBQTNNLE1BQUEyTSxFQUFBLEdBQUFBLEVBQUEsUUFBQSxFQUFBaEIsTUFBQSxHQXJCQUosQ0FBQSxDQUFBbFAsRUFBQXFRLE9Bd0JBeEgsT0FBQUMsZUFBQWxJLEVBQUEsYUFBQSxDQUFBK0MsT0FBQSxJQUNBLElBUUE2VSxFQUNBQSxFQVRBQyxFQUFBblksRUFBQSx1QkFDQW9ZLEVBQUFwWSxFQUFBLGtCQUNBc1EsRUFBQXRRLEVBQUEsYUFDQXFZLEVBQUFyWSxFQUFBLGFBQ0ErTCxFQUFBL0wsRUFBQSxZQUtBa1ksRUFXQUEsRUFBQTVYLEVBQUE0WCxxQkFBQTVYLEVBQUE0WCxtQkFBQSxLQVRBLGFBQUEsZUFFQUEsRUFBQSxXQUFBLGFBRUFBLEVBQUEsVUFBQSxZQUVBQSxFQUFBLGNBQUEsZ0JBRUFBLEVBQUEsYUFBQSxlQUdBLElBQUFJLEdBK0JBQSxFQUFBM08sT0FBQSxTQUFBdEksRUFBQXdKLEVBQUEwTixFQUFBQyxHQUNBLE9BQUEsSUFBQUYsRUFBQWpYLEVBQUF3SixFQUFBME4sRUFBQUMsSUFFQWpRLE9BQUFDLGVBQUE4UCxFQUFBNVAsVUFBQSxRQUFBLENBRUFJLElBQUEsV0FDQSxPQUFBMUQsS0FBQXVNLGlCQUVBNUksWUFBQSxFQUNBQyxjQUFBLElBRUFULE9BQUFDLGVBQUE4UCxFQUFBNVAsVUFBQSxlQUFBLENBSUFJLElBQUEsV0FDQSxPQUFBMUQsS0FBQS9ELFlBQUErRCxLQUFBL0QsV0FBQWlULGNBQUEsTUFFQXZMLFlBQUEsRUFDQUMsY0FBQSxJQUVBVCxPQUFBQyxlQUFBOFAsRUFBQTVQLFVBQUEsVUFBQSxDQUVBSSxJQUFBLFdBQ0EsT0FBQTFELEtBQUEvRCxXQUFBMFIsU0FBQSxJQU9BK0UsSUFBQSxTQUFBclcsR0FDQSxHQUFBMkQsS0FBQXVNLGtCQUFBdUcsRUFBQU8sY0FBQXJULEtBQUF1TSxrQkFBQXVHLEVBQUFRLGFBQ0EsTUFBQSxJQUFBdlksTUFBQSwwRkFFQSxJQUFBc0IsRUFDQSxNQUFBLElBQUF0QixNQUFBLDhDQUVBaUYsS0FBQS9ELFdBQUEwUixRQUFBdFIsR0FFQXNILFlBQUEsRUFDQUMsY0FBQSxJQU1Bc1AsRUFBQTVQLFVBQUE3RixNQUFBLFdBRUEsT0FEQXVDLEtBQUF1VCxhQUFBdlQsS0FBQXdULDRCQUNBeFQsS0FBQXVULGNBRUFMLEVBQUE1UCxVQUFBa1EsMEJBQUEsV0FDQSxPQUFBdkssRUFBQWpKLFVBQUEsT0FBQSxFQUFBLFdBQ0EsSUFBQXlULEVBQ0EsT0FBQTVKLEVBQUE3SixLQUFBLFNBQUErTCxHQUNBLE9BQUFBLEVBQUE5QixPQUNBLEtBQUEsRUFDQSxHQUFBakssS0FBQXVNLGtCQUFBdUcsRUFBQU8sYUFDQSxNQUFBLENBQUEsRUFBQWxPLFFBQUFDLE9BQUEsSUFBQXJLLE1BQUEsMkVBRUFpRixLQUFBdU0sZ0JBQUF1RyxFQUFBWSxXQUNBMVQsS0FBQXlGLE9BQUEyRyxJQUFBbEIsRUFBQW1CLFNBQUFDLE1BQUEsMkJBQ0FQLEVBQUE5QixNQUFBLEVBQ0EsS0FBQSxFQUVBLE9BREE4QixFQUFBNUIsS0FBQVksS0FBQSxDQUFBLEVBQUEsRUFBQSxDQUFBLElBQ0EsQ0FBQSxFQUFBL0ssS0FBQXlNLGlCQUNBLEtBQUEsRUFLQSxPQUpBVixFQUFBN0IsT0FDQWxLLEtBQUF1TSxnQkFBQXVHLEVBQUFhLFVBQ0EzVCxLQUFBMk0sbUJBQUEsRUFDQTNNLEtBQUF5RixPQUFBMkcsSUFBQWxCLEVBQUFtQixTQUFBQyxNQUFBLHlDQUNBLENBQUEsRUFBQSxHQUNBLEtBQUEsRUFJQSxPQUhBbUgsRUFBQTFILEVBQUE3QixPQUNBbEssS0FBQXVNLGdCQUFBdUcsRUFBQU8sYUFDQXJULEtBQUF5RixPQUFBMkcsSUFBQWxCLEVBQUFtQixTQUFBQyxNQUFBLGdFQUFBbUgsRUFBQSxNQUNBLENBQUEsRUFBQXRPLFFBQUFDLE9BQUFxTyxJQUNBLEtBQUEsRUFBQSxNQUFBLENBQUEsU0FLQVAsRUFBQTVQLFVBQUFtSixjQUFBLFdBQ0EsT0FBQXhELEVBQUFqSixVQUFBLE9BQUEsRUFBQSxXQUNBLElBQUE0VCxFQUFBOU0sRUFBQW9HLEVBQ0F4SCxFQUFBMUYsS0FDQSxPQUFBNkosRUFBQTdKLEtBQUEsU0FBQStMLEdBQ0EsT0FBQUEsRUFBQTlCLE9BQ0EsS0FBQSxFQU9BLE9BTkFqSyxLQUFBNlQsMEJBQUF6TixFQUNBcEcsS0FBQThULDJCQUFBLEVBQ0FGLEVBQUEsSUFBQXpPLFFBQUEsU0FBQW1FLEVBQUFsRSxHQUNBTSxFQUFBcU8sa0JBQUF6SyxFQUNBNUQsRUFBQXNPLGtCQUFBNU8sSUFFQSxDQUFBLEVBQUFwRixLQUFBL0QsV0FBQXdCLE1BQUF1QyxLQUFBbVQsU0FBQXJILGlCQUNBLEtBQUEsRUFDQUMsRUFBQTdCLE9BQ0E2QixFQUFBOUIsTUFBQSxFQUNBLEtBQUEsRUFPQSxPQU5BOEIsRUFBQTVCLEtBQUFZLEtBQUEsQ0FBQSxFQUFBLEVBQUEsQ0FBQSxJQUNBakUsRUFBQSxDQUNBcU0sU0FBQW5ULEtBQUFtVCxTQUFBYyxLQUNBQyxRQUFBbFUsS0FBQW1ULFNBQUFlLFNBRUFsVSxLQUFBeUYsT0FBQTJHLElBQUFsQixFQUFBbUIsU0FBQUMsTUFBQSw4QkFDQSxDQUFBLEVBQUF0TSxLQUFBbVUsWUFBQW5VLEtBQUFvVSxrQkFBQXZOLHNCQUFBQyxLQUNBLEtBQUEsRUFPQSxPQU5BaUYsRUFBQTdCLE9BQ0FsSyxLQUFBeUYsT0FBQTJHLElBQUFsQixFQUFBbUIsU0FBQTRFLFlBQUEsc0JBQUFqUixLQUFBbVQsU0FBQWMsS0FBQSxNQUVBalUsS0FBQXFVLGlCQUNBclUsS0FBQXNVLHFCQUNBdFUsS0FBQXVVLHlCQUNBLENBQUEsRUFBQVgsR0FDQSxLQUFBLEVBS0EsR0FKQTdILEVBQUE3QixPQUlBbEssS0FBQTZULHFCQUlBLE1BQUE3VCxLQUFBNlQscUJBRUEsTUFBQSxDQUFBLEVBQUEsR0FDQSxLQUFBLEVBT0EsT0FOQTNHLEVBQUFuQixFQUFBN0IsT0FDQWxLLEtBQUF5RixPQUFBMkcsSUFBQWxCLEVBQUFtQixTQUFBQyxNQUFBLG9DQUFBWSxFQUFBLDZDQUNBbE4sS0FBQXFVLGlCQUNBclUsS0FBQXdVLG1CQUdBLENBQUEsRUFBQXhVLEtBQUEvRCxXQUFBOFEsS0FBQUcsSUFDQSxLQUFBLEVBSUEsTUFEQW5CLEVBQUE3QixPQUNBZ0QsRUFDQSxLQUFBLEVBQUEsTUFBQSxDQUFBLFNBU0FnRyxFQUFBNVAsVUFBQXlKLEtBQUEsV0FDQSxPQUFBOUQsRUFBQWpKLFVBQUEsT0FBQSxFQUFBLFdBQ0EsSUFBQXVULEVBQ0EsT0FBQTFKLEVBQUE3SixLQUFBLFNBQUErTCxHQUNBLE9BQUFBLEVBQUE5QixPQUNBLEtBQUEsRUFHQSxPQUZBc0osRUFBQXZULEtBQUF1VCxhQUNBdlQsS0FBQTBNLFlBQUExTSxLQUFBaU4sZUFDQSxDQUFBLEVBQUFqTixLQUFBME0sYUFDQSxLQUFBLEVBQ0FYLEVBQUE3QixPQUNBNkIsRUFBQTlCLE1BQUEsRUFDQSxLQUFBLEVBR0EsT0FGQThCLEVBQUE1QixLQUFBWSxLQUFBLENBQUEsRUFBQSxFQUFBLENBQUEsSUFFQSxDQUFBLEVBQUF3SSxHQUNBLEtBQUEsRUFJQSxLQUFBLEVBRUEsT0FEQXhILEVBQUE3QixPQUNBLENBQUEsRUFBQSxHQUNBLEtBQUEsRUFBQSxNQUFBLENBQUEsU0FLQWdKLEVBQUE1UCxVQUFBMkosYUFBQSxTQUFBcFAsR0FDQSxPQUFBbUMsS0FBQXVNLGtCQUFBdUcsRUFBQU8sY0FDQXJULEtBQUF5RixPQUFBMkcsSUFBQWxCLEVBQUFtQixTQUFBQyxNQUFBLDhCQUFBek8sRUFBQSw4REFDQXNILFFBQUFtRSxXQUVBdEosS0FBQXVNLGtCQUFBdUcsRUFBQTJCLGVBQ0F6VSxLQUFBeUYsT0FBQTJHLElBQUFsQixFQUFBbUIsU0FBQUMsTUFBQSwrQkFBQXpPLEVBQUEsMkVBQ0FtQyxLQUFBME0sY0FFQTFNLEtBQUF1TSxnQkFBQXVHLEVBQUEyQixjQUNBelUsS0FBQXlGLE9BQUEyRyxJQUFBbEIsRUFBQW1CLFNBQUFDLE1BQUEsMkJBQ0F0TSxLQUFBMFUsc0JBSUExVSxLQUFBeUYsT0FBQTJHLElBQUFsQixFQUFBbUIsU0FBQUMsTUFBQSxpRUFDQXFJLGFBQUEzVSxLQUFBMFUsc0JBQ0ExVSxLQUFBMFUsMEJBQUF0TyxFQUNBcEcsS0FBQTRVLGdCQUNBelAsUUFBQW1FLFlBRUF0SixLQUFBcVUsaUJBQ0FyVSxLQUFBd1UsbUJBQ0F4VSxLQUFBNlQscUJBQUFoVyxHQUFBLElBQUE5QyxNQUFBLHVFQUlBaUYsS0FBQS9ELFdBQUE4USxLQUFBbFAsTUFTQXFWLEVBQUE1UCxVQUFBdVIsT0FBQSxTQUFBQyxHQUdBLElBRkEsSUFBQXBQLEVBQUExRixLQUNBK1UsRUFBQSxHQUNBbFksRUFBQSxFQUFBQSxFQUFBOEwsVUFBQXZOLE9BQUF5QixJQUNBa1ksRUFBQWxZLEVBQUEsR0FBQThMLFVBQUE5TCxHQUVBLElBRUFtWSxFQUZBakosRUFBQS9MLEtBQUFpVix1QkFBQUYsR0FBQUcsRUFBQW5KLEVBQUEsR0FBQW9KLEVBQUFwSixFQUFBLEdBQ0FxSixFQUFBcFYsS0FBQXFWLHVCQUFBUCxFQUFBQyxFQUFBSSxHQUVBRyxFQUFBLElBQUFyQyxFQUFBc0MsUUFrQ0EsT0FqQ0FELEVBQUFFLGVBQUEsV0FDQSxJQUFBQyxFQUFBL1AsRUFBQWdRLHVCQUFBTixFQUFBTyxjQUVBLGNBREFqUSxFQUFBa1EsVUFBQVIsRUFBQU8sY0FDQVgsRUFBQXRYLEtBQUEsV0FDQSxPQUFBZ0ksRUFBQW1RLGlCQUFBSixNQUdBelYsS0FBQTRWLFVBQUFSLEVBQUFPLGNBQUEsU0FBQUcsRUFBQWpZLEdBQ0FBLEVBQ0F5WCxFQUFBelgsTUFBQUEsR0FHQWlZLElBRUFBLEVBQUF6VSxPQUFBMlIsRUFBQStDLFlBQUFDLFdBQ0FGLEVBQUFqWSxNQUNBeVgsRUFBQXpYLE1BQUEsSUFBQTlDLE1BQUErYSxFQUFBalksUUFHQXlYLEVBQUFXLFdBSUFYLEVBQUE3TCxLQUFBcU0sRUFBQSxRQUlBZCxFQUFBaFYsS0FBQTZWLGlCQUFBVCxHQUNBYyxNQUFBLFNBQUE3YixHQUNBaWIsRUFBQXpYLE1BQUF4RCxVQUNBcUwsRUFBQWtRLFVBQUFSLEVBQUFPLGdCQUVBM1YsS0FBQW1XLGNBQUFqQixFQUFBRixHQUNBTSxHQUVBcEMsRUFBQTVQLFVBQUE2USxZQUFBLFNBQUFuVyxHQUVBLE9BREFnQyxLQUFBdVUseUJBQ0F2VSxLQUFBL0QsV0FBQThJLEtBQUEvRyxJQU1Ba1YsRUFBQTVQLFVBQUF1UyxpQkFBQSxTQUFBN1gsR0FDQSxPQUFBZ0MsS0FBQW1VLFlBQUFuVSxLQUFBbVQsU0FBQWlELGFBQUFwWSxLQVdBa1YsRUFBQTVQLFVBQUF5QixLQUFBLFNBQUErUCxHQUVBLElBREEsSUFBQUMsRUFBQSxHQUNBbFksRUFBQSxFQUFBQSxFQUFBOEwsVUFBQXZOLE9BQUF5QixJQUNBa1ksRUFBQWxZLEVBQUEsR0FBQThMLFVBQUE5TCxHQUVBLElBQUFrUCxFQUFBL0wsS0FBQWlWLHVCQUFBRixHQUFBRyxFQUFBbkosRUFBQSxHQUFBb0osRUFBQXBKLEVBQUEsR0FDQXNLLEVBQUFyVyxLQUFBNlYsaUJBQUE3VixLQUFBc1csaUJBQUF4QixFQUFBQyxHQUFBLEVBQUFJLElBRUEsT0FEQW5WLEtBQUFtVyxjQUFBakIsRUFBQW1CLEdBQ0FBLEdBYUFuRCxFQUFBNVAsVUFBQXBGLE9BQUEsU0FBQTRXLEdBR0EsSUFGQSxJQUFBcFAsRUFBQTFGLEtBQ0ErVSxFQUFBLEdBQ0FsWSxFQUFBLEVBQUFBLEVBQUE4TCxVQUFBdk4sT0FBQXlCLElBQ0FrWSxFQUFBbFksRUFBQSxHQUFBOEwsVUFBQTlMLEdBRUEsSUFBQWtQLEVBQUEvTCxLQUFBaVYsdUJBQUFGLEdBQUFHLEVBQUFuSixFQUFBLEdBQUFvSixFQUFBcEosRUFBQSxHQUNBcUosRUFBQXBWLEtBQUFzVyxpQkFBQXhCLEVBQUFDLEdBQUEsRUFBQUksR0ErQkEsT0E5QkEsSUFBQWhRLFFBQUEsU0FBQW1FLEVBQUFsRSxHQUVBTSxFQUFBa1EsVUFBQVIsRUFBQU8sY0FBQSxTQUFBRyxFQUFBalksR0FDQUEsRUFDQXVILEVBQUF2SCxHQUdBaVksSUFFQUEsRUFBQXpVLE9BQUEyUixFQUFBK0MsWUFBQUMsV0FDQUYsRUFBQWpZLE1BQ0F1SCxFQUFBLElBQUFySyxNQUFBK2EsRUFBQWpZLFFBR0F5TCxFQUFBd00sRUFBQW5NLFFBSUF2RSxFQUFBLElBQUFySyxNQUFBLDRCQUFBK2EsRUFBQXpVLFNBSUEsSUFBQTJULEVBQUF0UCxFQUFBbVEsaUJBQUFULEdBQ0FjLE1BQUEsU0FBQTdiLEdBQ0ErSyxFQUFBL0ssVUFFQXFMLEVBQUFrUSxVQUFBUixFQUFBTyxnQkFFQWpRLEVBQUF5USxjQUFBakIsRUFBQUYsTUFTQTlCLEVBQUE1UCxVQUFBOUYsR0FBQSxTQUFBc1gsRUFBQXlCLEdBQ0F6QixHQUFBeUIsSUFHQXpCLEVBQUFBLEVBQUEwQixjQUNBeFcsS0FBQXlXLFFBQUEzQixLQUNBOVUsS0FBQXlXLFFBQUEzQixHQUFBLEtBR0EsSUFBQTlVLEtBQUF5VyxRQUFBM0IsR0FBQXJOLFFBQUE4TyxJQUdBdlcsS0FBQXlXLFFBQUEzQixHQUFBL0osS0FBQXdMLEtBRUFyRCxFQUFBNVAsVUFBQW9ULElBQUEsU0FBQTVCLEVBQUF4UCxHQUNBLElBSUFxUixFQUtBQyxFQVRBOUIsSUFHQUEsRUFBQUEsRUFBQTBCLGVBQ0FHLEVBQUEzVyxLQUFBeVcsUUFBQTNCLE1BSUF4UCxHQUVBLEtBREFzUixFQUFBRCxFQUFBbFAsUUFBQW5DLE1BRUFxUixFQUFBRSxPQUFBRCxFQUFBLEdBQ0EsSUFBQUQsRUFBQXZiLGVBQ0E0RSxLQUFBeVcsUUFBQTNCLFdBS0E5VSxLQUFBeVcsUUFBQTNCLE1BT0E1QixFQUFBNVAsVUFBQXFOLFFBQUEsU0FBQW1HLEdBQ0FBLEdBQ0E5VyxLQUFBK1csZ0JBQUFoTSxLQUFBK0wsSUFPQTVELEVBQUE1UCxVQUFBMFQsZUFBQSxTQUFBRixHQUNBQSxHQUNBOVcsS0FBQWlYLHNCQUFBbE0sS0FBQStMLElBT0E1RCxFQUFBNVAsVUFBQTRULGNBQUEsU0FBQUosR0FDQUEsR0FDQTlXLEtBQUFtWCxxQkFBQXBNLEtBQUErTCxJQUdBNUQsRUFBQTVQLFVBQUE4VCxvQkFBQSxTQUFBalEsR0FPQSxHQU5BbkgsS0FBQXFVLGlCQUNBclUsS0FBQThULDRCQUNBM00sRUFBQW5ILEtBQUFxWCx5QkFBQWxRLEdBQ0FuSCxLQUFBOFQsMkJBQUEsR0FHQTNNLEVBR0EsSUFEQSxJQUNBdEssRUFBQSxFQUFBeWEsRUFEQXRYLEtBQUFtVCxTQUFBb0UsY0FBQXBRLEVBQUFuSCxLQUFBeUYsUUFDQTVJLEVBQUF5YSxFQUFBbGMsT0FBQXlCLElBQUEsQ0FDQSxJQUFBbUIsRUFBQXNaLEVBQUF6YSxHQUNBLE9BQUFtQixFQUFBcUQsTUFDQSxLQUFBMlIsRUFBQStDLFlBQUF5QixXQUNBeFgsS0FBQXlYLG1CQUFBelosR0FDQSxNQUNBLEtBQUFnVixFQUFBK0MsWUFBQTJCLFdBQ0EsS0FBQTFFLEVBQUErQyxZQUFBQyxXQUNBLElBQUFjLEVBQUE5VyxLQUFBNFYsVUFBQTVYLEVBQUEyWCxjQUNBbUIsSUFDQTlZLEVBQUFxRCxPQUFBMlIsRUFBQStDLFlBQUFDLG1CQUNBaFcsS0FBQTRWLFVBQUE1WCxFQUFBMlgsY0FFQW1CLEVBQUE5WSxJQUVBLE1BQ0EsS0FBQWdWLEVBQUErQyxZQUFBNEIsS0FFQSxNQUNBLEtBQUEzRSxFQUFBK0MsWUFBQTZCLE1BQ0E1WCxLQUFBeUYsT0FBQTJHLElBQUFsQixFQUFBbUIsU0FBQTRFLFlBQUEsdUNBQ0EsSUFBQXBULEVBQUFHLEVBQUFILE1BQUEsSUFBQTlDLE1BQUEsc0NBQUFpRCxFQUFBSCxZQUFBdUksR0FDQSxJQUFBcEksRUFBQTZaLGVBSUE3WCxLQUFBL0QsV0FBQThRLEtBQUFsUCxHQUlBbUMsS0FBQTBNLFlBQUExTSxLQUFBaU4sYUFBQXBQLEdBRUEsTUFDQSxRQUNBbUMsS0FBQXlGLE9BQUEyRyxJQUFBbEIsRUFBQW1CLFNBQUE2RSxRQUFBLHlCQUFBbFQsRUFBQXFELEtBQUEsTUFLQXJCLEtBQUFzVSxzQkFFQXBCLEVBQUE1UCxVQUFBK1QseUJBQUEsU0FBQWxRLEdBQ0EsSUFBQTRFLEVBQ0ErTCxFQUNBN1AsRUFDQSxJQUNBQSxHQUFBOEQsRUFBQS9MLEtBQUFvVSxrQkFBQWxOLHVCQUFBQyxJQUFBLEdBQUEyUSxFQUFBL0wsRUFBQSxHQUVBLE1BQUExUixHQUNBLElBQUEyRCxFQUFBLHFDQUFBM0QsRUFDQTJGLEtBQUF5RixPQUFBMkcsSUFBQWxCLEVBQUFtQixTQUFBdFIsTUFBQWlELEdBQ0EsSUFBQUgsRUFBQSxJQUFBOUMsTUFBQWlELEdBRUEsTUFEQWdDLEtBQUFnVSxrQkFBQW5XLEdBQ0FBLEVBRUEsR0FBQWlhLEVBQUFqYSxNQUtBLE1BSkFHLEVBQUEsb0NBQUE4WixFQUFBamEsTUFDQW1DLEtBQUF5RixPQUFBMkcsSUFBQWxCLEVBQUFtQixTQUFBdFIsTUFBQWlELEdBQ0FILEVBQUEsSUFBQTlDLE1BQUFpRCxHQUNBZ0MsS0FBQWdVLGtCQUFBblcsR0FDQUEsRUFNQSxPQUhBbUMsS0FBQXlGLE9BQUEyRyxJQUFBbEIsRUFBQW1CLFNBQUFDLE1BQUEsOEJBRUF0TSxLQUFBK1Qsb0JBQ0E5TCxHQUVBaUwsRUFBQTVQLFVBQUFpUix1QkFBQSxXQUNBLElBQUE3TyxFQUFBMUYsS0FDQUEsS0FBQXdVLG1CQUNBeFUsS0FBQStYLGlCQUFBQyxXQUFBLFdBQUEsT0FBQS9PLEVBQUF2RCxPQUFBLE9BQUEsRUFBQSxXQUVBLE9BQUFtRSxFQUFBN0osS0FBQSxTQUFBOE8sR0FDQSxPQUFBQSxFQUFBN0UsT0FDQSxLQUFBLEVBQ0EsR0FBQWpLLEtBQUF1TSxrQkFBQXVHLEVBQUFhLFVBQUEsTUFBQSxDQUFBLEVBQUEsR0FDQTdFLEVBQUE3RSxNQUFBLEVBQ0EsS0FBQSxFQUVBLE9BREE2RSxFQUFBM0UsS0FBQVksS0FBQSxDQUFBLEVBQUEsRUFBQSxDQUFBLElBQ0EsQ0FBQSxFQUFBL0ssS0FBQW1VLFlBQUFuVSxLQUFBaVksb0JBQ0EsS0FBQSxFQUVBLE9BREFuSixFQUFBNUUsT0FDQSxDQUFBLEVBQUEsR0FDQSxLQUFBLEVBS0EsT0FKQTRFLEVBQUE1RSxPQUdBbEssS0FBQXdVLG1CQUNBLENBQUEsRUFBQSxHQUNBLEtBQUEsRUFBQSxNQUFBLENBQUEsU0FHQXhVLEtBQUFrWSxrQ0FFQWhGLEVBQUE1UCxVQUFBZ1IsbUJBQUEsV0FDQSxJQUFBNU8sRUFBQTFGLEtBQ0FBLEtBQUEvRCxXQUFBdVMsVUFBQXhPLEtBQUEvRCxXQUFBdVMsU0FBQUMsb0JBRUF6TyxLQUFBbVksY0FBQUgsV0FBQSxXQUFBLE9BQUF0UyxFQUFBMFMsaUJBQUFwWSxLQUFBcVksK0JBR0FuRixFQUFBNVAsVUFBQThVLGNBQUEsV0FJQXBZLEtBQUEvRCxXQUFBOFEsS0FBQSxJQUFBaFMsTUFBQSx5RUFFQW1ZLEVBQUE1UCxVQUFBbVUsbUJBQUEsU0FBQWEsR0FDQSxJQVdBdGEsRUFYQTBILEVBQUExRixLQUNBeVcsRUFBQXpXLEtBQUF5VyxRQUFBNkIsRUFBQXZYLE9BQUF5VixlQUNBLEdBQUFDLEVBQUEsQ0FDQSxJQUNBQSxFQUFBOEIsUUFBQSxTQUFBQyxHQUFBLE9BQUFBLEVBQUF6USxNQUFBckMsRUFBQTRTLEVBQUEzUCxhQUVBLE1BQUF0TyxHQUNBMkYsS0FBQXlGLE9BQUEyRyxJQUFBbEIsRUFBQW1CLFNBQUF0UixNQUFBLDZCQUFBdWQsRUFBQXZYLE9BQUF5VixjQUFBLGlCQUFBbmMsRUFBQSxNQUVBaWUsRUFBQTNDLGVBRUEzWCxFQUFBLHFGQUNBZ0MsS0FBQXlGLE9BQUEyRyxJQUFBbEIsRUFBQW1CLFNBQUF0UixNQUFBaUQsR0FFQWdDLEtBQUEwTSxZQUFBMU0sS0FBQWlOLGFBQUEsSUFBQWxTLE1BQUFpRCxVQUlBZ0MsS0FBQXlGLE9BQUEyRyxJQUFBbEIsRUFBQW1CLFNBQUE2RSxRQUFBLG1DQUFBb0gsRUFBQXZYLE9BQUEsYUFHQW1TLEVBQUE1UCxVQUFBbVYsaUJBQUEsU0FBQTVhLEdBQ0FtQyxLQUFBeUYsT0FBQTJHLElBQUFsQixFQUFBbUIsU0FBQUMsTUFBQSxrQ0FBQXpPLEVBQUEsMkJBQUFtQyxLQUFBdU0sZ0JBQUEsS0FFQXZNLEtBQUE2VCxxQkFBQTdULEtBQUE2VCxzQkFBQWhXLEdBQUEsSUFBQTlDLE1BQUEsaUZBR0FpRixLQUFBK1QsbUJBQ0EvVCxLQUFBK1Qsb0JBRUEvVCxLQUFBMFkseUJBQUE3YSxHQUFBLElBQUE5QyxNQUFBLHVFQUNBaUYsS0FBQXFVLGlCQUNBclUsS0FBQXdVLG1CQUNBeFUsS0FBQXVNLGtCQUFBdUcsRUFBQTJCLGNBQ0F6VSxLQUFBNFUsY0FBQS9XLEdBRUFtQyxLQUFBdU0sa0JBQUF1RyxFQUFBYSxXQUFBM1QsS0FBQW9ULGdCQUVBcFQsS0FBQTJZLFVBQUE5YSxHQUVBbUMsS0FBQXVNLGtCQUFBdUcsRUFBQWEsV0FDQTNULEtBQUE0VSxjQUFBL1csSUFRQXFWLEVBQUE1UCxVQUFBc1IsY0FBQSxTQUFBL1csR0FDQSxJQUFBNkgsRUFBQTFGLEtBQ0EsR0FBQUEsS0FBQTJNLGtCQUFBLENBQ0EzTSxLQUFBdU0sZ0JBQUF1RyxFQUFBTyxhQUNBclQsS0FBQTJNLG1CQUFBLEVBQ0EsSUFDQTNNLEtBQUErVyxnQkFBQXdCLFFBQUEsU0FBQTVkLEdBQUEsT0FBQUEsRUFBQW9OLE1BQUFyQyxFQUFBLENBQUE3SCxNQUVBLE1BQUF4RCxHQUNBMkYsS0FBQXlGLE9BQUEyRyxJQUFBbEIsRUFBQW1CLFNBQUF0UixNQUFBLDBDQUFBOEMsRUFBQSxrQkFBQXhELEVBQUEsU0FJQTZZLEVBQUE1UCxVQUFBcVYsVUFBQSxTQUFBOWEsR0FDQSxPQUFBb0wsRUFBQWpKLFVBQUEsT0FBQSxFQUFBLFdBQ0EsSUFBQTRZLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFyTCxFQUNBaEksRUFBQTFGLEtBQ0EsT0FBQTZKLEVBQUE3SixLQUFBLFNBQUErTCxHQUNBLE9BQUFBLEVBQUE5QixPQUNBLEtBQUEsRUFLQSxHQUpBMk8sRUFBQWpZLEtBQUFxWSxNQUVBRixPQURBRCxFQUFBLEtBQ0FoYixFQUFBQSxFQUFBLElBQUE5QyxNQUFBLG1EQUVBLFFBREFnZSxFQUFBL1ksS0FBQWlaLGtCQUFBSixJQUFBLEVBQUFDLElBSUEsT0FGQTlZLEtBQUF5RixPQUFBMkcsSUFBQWxCLEVBQUFtQixTQUFBQyxNQUFBLHNHQUNBdE0sS0FBQTRVLGNBQUEvVyxHQUNBLENBQUEsR0FTQSxHQVBBbUMsS0FBQXVNLGdCQUFBdUcsRUFBQVEsYUFDQXpWLEVBQ0FtQyxLQUFBeUYsT0FBQTJHLElBQUFsQixFQUFBbUIsU0FBQTRFLFlBQUEsNkNBQUFwVCxFQUFBLE1BR0FtQyxLQUFBeUYsT0FBQTJHLElBQUFsQixFQUFBbUIsU0FBQTRFLFlBQUEsNEJBRUFqUixLQUFBZ1gsZUFBQSxDQUNBLElBQ0FoWCxLQUFBaVgsc0JBQUFzQixRQUFBLFNBQUE1ZCxHQUFBLE9BQUFBLEVBQUFvTixNQUFBckMsRUFBQSxDQUFBN0gsTUFFQSxNQUFBeEQsR0FDQTJGLEtBQUF5RixPQUFBMkcsSUFBQWxCLEVBQUFtQixTQUFBdFIsTUFBQSxpREFBQThDLEVBQUEsa0JBQUF4RCxFQUFBLE1BR0EsR0FBQTJGLEtBQUF1TSxrQkFBQXVHLEVBQUFRLGFBRUEsT0FEQXRULEtBQUF5RixPQUFBMkcsSUFBQWxCLEVBQUFtQixTQUFBQyxNQUFBLHlGQUNBLENBQUEsR0FHQVAsRUFBQTlCLE1BQUEsRUFDQSxLQUFBLEVBQ0EsT0FBQSxPQUFBOE8sRUFBQSxDQUFBLEVBQUEsSUFDQS9ZLEtBQUF5RixPQUFBMkcsSUFBQWxCLEVBQUFtQixTQUFBNEUsWUFBQSw0QkFBQTRILEVBQUEsa0JBQUFFLEVBQUEsUUFDQSxDQUFBLEVBQUEsSUFBQTVULFFBQUEsU0FBQW1FLEdBQ0E1RCxFQUFBZ1AscUJBQUFzRCxXQUFBMU8sRUFBQXlQLE9BRUEsS0FBQSxFQUdBLEdBRkFoTixFQUFBN0IsT0FDQWxLLEtBQUEwVSwwQkFBQXRPLEVBQ0FwRyxLQUFBdU0sa0JBQUF1RyxFQUFBUSxhQUVBLE9BREF0VCxLQUFBeUYsT0FBQTJHLElBQUFsQixFQUFBbUIsU0FBQUMsTUFBQSxxRkFDQSxDQUFBLEdBRUFQLEVBQUE5QixNQUFBLEVBQ0EsS0FBQSxFQUVBLE9BREE4QixFQUFBNUIsS0FBQVksS0FBQSxDQUFBLEVBQUEsRUFBQSxDQUFBLElBQ0EsQ0FBQSxFQUFBL0ssS0FBQXlNLGlCQUNBLEtBQUEsRUFJQSxHQUhBVixFQUFBN0IsT0FDQWxLLEtBQUF1TSxnQkFBQXVHLEVBQUFhLFVBQ0EzVCxLQUFBeUYsT0FBQTJHLElBQUFsQixFQUFBbUIsU0FBQTRFLFlBQUEsMkNBQ0FqUixLQUFBa1gsY0FDQSxJQUNBbFgsS0FBQW1YLHFCQUFBb0IsUUFBQSxTQUFBNWQsR0FBQSxPQUFBQSxFQUFBb04sTUFBQXJDLEVBQUEsQ0FBQUEsRUFBQXpKLFdBQUFpVCxpQkFFQSxNQUFBN1UsR0FDQTJGLEtBQUF5RixPQUFBMkcsSUFBQWxCLEVBQUFtQixTQUFBdFIsTUFBQSx1REFBQWlGLEtBQUEvRCxXQUFBaVQsYUFBQSxrQkFBQTdVLEVBQUEsTUFHQSxNQUFBLENBQUEsR0FDQSxLQUFBLEVBR0EsT0FGQXFULEVBQUEzQixFQUFBN0IsT0FDQWxLLEtBQUF5RixPQUFBMkcsSUFBQWxCLEVBQUFtQixTQUFBNEUsWUFBQSw4Q0FBQXZELEVBQUEsTUFDQTFOLEtBQUF1TSxrQkFBQXVHLEVBQUFRLGNBQ0F0VCxLQUFBeUYsT0FBQTJHLElBQUFsQixFQUFBbUIsU0FBQUMsTUFBQSx1RkFDQSxDQUFBLEtBRUF3TSxFQUFBcEwsYUFBQTNTLE1BQUEyUyxFQUFBLElBQUEzUyxNQUFBMlMsRUFBQXdMLFlBQ0FILEVBQUEvWSxLQUFBaVosa0JBQUFKLElBQUFsWSxLQUFBcVksTUFBQUosRUFBQUUsR0FDQSxDQUFBLEVBQUEsSUFDQSxLQUFBLEVBQUEsTUFBQSxDQUFBLEVBQUEsR0FDQSxLQUFBLEVBR0EsT0FGQTlZLEtBQUF5RixPQUFBMkcsSUFBQWxCLEVBQUFtQixTQUFBNEUsWUFBQSxnREFBQXRRLEtBQUFxWSxNQUFBSixHQUFBLFdBQUFDLEVBQUEsK0NBQ0E3WSxLQUFBNFUsZ0JBQ0EsQ0FBQSxTQUtBMUIsRUFBQTVQLFVBQUEyVixrQkFBQSxTQUFBOVMsRUFBQWdULEVBQUFDLEdBQ0EsSUFDQSxPQUFBcFosS0FBQW9ULGdCQUFBcE4sNkJBQUEsQ0FDQW1ULG9CQUFBQSxFQUNBaFQsbUJBQUFBLEVBQ0FpVCxZQUFBQSxJQUdBLE1BQUEvZSxHQUVBLE9BREEyRixLQUFBeUYsT0FBQTJHLElBQUFsQixFQUFBbUIsU0FBQXRSLE1BQUEsNkNBQUFvTCxFQUFBLEtBQUFnVCxFQUFBLGtCQUFBOWUsRUFBQSxNQUNBLE9BR0E2WSxFQUFBNVAsVUFBQW9WLHlCQUFBLFNBQUE3YSxHQUNBLElBQUErWCxFQUFBNVYsS0FBQTRWLFVBQ0E1VixLQUFBNFYsVUFBQSxHQUNBelMsT0FBQWtXLEtBQUF6RCxHQUNBMkMsUUFBQSxTQUFBZSxJQUVBeEMsRUFEQWxCLEVBQUEwRCxJQUNBLEtBQUF6YixNQUdBcVYsRUFBQTVQLFVBQUFrUixpQkFBQSxXQUNBeFUsS0FBQStYLGtCQUNBcEQsYUFBQTNVLEtBQUErWCxtQkFHQTdFLEVBQUE1UCxVQUFBK1EsZUFBQSxXQUNBclUsS0FBQW1ZLGVBQ0F4RCxhQUFBM1UsS0FBQW1ZLGdCQUdBakYsRUFBQTVQLFVBQUFnVCxpQkFBQSxTQUFBeEIsRUFBQUMsRUFBQXdFLEVBQUFwRSxHQUNBLEdBQUFvRSxFQUNBLE1BQUEsQ0FDQTVRLFVBQUFvTSxFQUNBSSxVQUFBQSxFQUNBcFUsT0FBQStULEVBQ0F6VCxLQUFBMlIsRUFBQStDLFlBQUF5QixZQUlBLElBQUE3QixFQUFBM1YsS0FBQTJWLGFBRUEsT0FEQTNWLEtBQUEyVixlQUNBLENBQ0FoTixVQUFBb00sRUFDQVksYUFBQUEsRUFBQXVELFdBQ0EvRCxVQUFBQSxFQUNBcFUsT0FBQStULEVBQ0F6VCxLQUFBMlIsRUFBQStDLFlBQUF5QixhQUlBdEUsRUFBQTVQLFVBQUE2UyxjQUFBLFNBQUFqQixFQUFBRixHQUNBLElBQUF0UCxFQUFBMUYsS0FDQSxHQUFBLElBQUFrVixFQUFBOVosT0FBQSxDQUtBNFosRUFEQUEsR0FDQTdQLFFBQUFtRSxVQUVBLElBQUFrRSxFQUFBLFNBQUFnTSxHQUNBdEUsRUFBQXNFLEdBQUFDLFVBQUEsQ0FDQXhELFNBQUEsV0FDQWpCLEVBQUFBLEVBQUF0WCxLQUFBLFdBQUEsT0FBQWdJLEVBQUFtUSxpQkFBQW5RLEVBQUFnVSx3QkFBQUYsT0FFQTNiLE1BQUEsU0FBQUYsR0FDQSxJQUVBSyxFQURBTCxhQUFBNUMsTUFDQTRDLEVBQUFLLFFBRUFMLEdBQUFBLEVBQUF1YixTQUNBdmIsRUFBQXViLFdBR0EsZ0JBRUFsRSxFQUFBQSxFQUFBdFgsS0FBQSxXQUFBLE9BQUFnSSxFQUFBbVEsaUJBQUFuUSxFQUFBZ1Usd0JBQUFGLEVBQUF4YixPQUVBeUwsS0FBQSxTQUFBZ0osR0FDQXVDLEVBQUFBLEVBQUF0WCxLQUFBLFdBQUEsT0FBQWdJLEVBQUFtUSxpQkFBQW5RLEVBQUFpVSx3QkFBQUgsRUFBQS9HLFVBTUEsSUFBQSxJQUFBK0csS0FBQXRFLEVBQ0ExSCxFQUFBZ00sS0FHQXRHLEVBQUE1UCxVQUFBMlIsdUJBQUEsU0FBQUYsR0FHQSxJQUZBLElBQUFHLEVBQUEsR0FDQUMsRUFBQSxHQUNBMWEsRUFBQSxFQUFBQSxFQUFBc2EsRUFBQTNaLE9BQUFYLElBQUEsQ0FDQSxJQUVBK2UsRUFGQUksRUFBQTdFLEVBQUF0YSxHQUNBdUYsS0FBQTZaLGFBQUFELEtBQ0FKLEVBQUF4WixLQUFBMlYsYUFDQTNWLEtBQUEyVixlQUVBVCxFQUFBc0UsR0FBQUksRUFDQXpFLEVBQUFwSyxLQUFBeU8sRUFBQU4sWUFFQW5FLEVBQUE4QixPQUFBcGMsRUFBQSxJQUdBLE1BQUEsQ0FBQXlhLEVBQUFDLElBRUFqQyxFQUFBNVAsVUFBQXVXLGFBQUEsU0FBQUMsR0FFQSxPQUFBQSxHQUFBQSxFQUFBTCxXQUFBLG1CQUFBSyxFQUFBTCxXQUVBdkcsRUFBQTVQLFVBQUErUix1QkFBQSxTQUFBUCxFQUFBQyxFQUFBSSxHQUNBLElBQUFRLEVBQUEzVixLQUFBMlYsYUFFQSxPQURBM1YsS0FBQTJWLGVBQ0EsQ0FDQWhOLFVBQUFvTSxFQUNBWSxhQUFBQSxFQUFBdUQsV0FDQS9ELFVBQUFBLEVBQ0FwVSxPQUFBK1QsRUFDQXpULEtBQUEyUixFQUFBK0MsWUFBQWdFLG1CQUdBN0csRUFBQTVQLFVBQUFvUyx1QkFBQSxTQUFBMVksR0FDQSxNQUFBLENBQ0EyWSxhQUFBM1ksRUFDQXFFLEtBQUEyUixFQUFBK0MsWUFBQWlFLG1CQUdBOUcsRUFBQTVQLFVBQUFxVyx3QkFBQSxTQUFBM2MsRUFBQXlWLEdBQ0EsTUFBQSxDQUNBa0QsYUFBQTNZLEVBQ0F5VixLQUFBQSxFQUNBcFIsS0FBQTJSLEVBQUErQyxZQUFBMkIsYUFHQXhFLEVBQUE1UCxVQUFBb1csd0JBQUEsU0FBQTFjLEVBQUFhLEVBQUE4TCxHQUNBLE9BQUE5TCxFQUNBLENBQ0FBLE1BQUFBLEVBQ0E4WCxhQUFBM1ksRUFDQXFFLEtBQUEyUixFQUFBK0MsWUFBQUMsWUFHQSxDQUNBTCxhQUFBM1ksRUFDQTJNLE9BQUFBLEVBQ0F0SSxLQUFBMlIsRUFBQStDLFlBQUFDLGFBR0E5QyxHQXQxQkEsU0FBQUEsRUFBQWpYLEVBQUF3SixFQUFBME4sRUFBQUMsR0FDQSxJQUFBMU4sRUFBQTFGLEtBQ0EyRyxFQUFBdUYsSUFBQXNGLFdBQUF2VixFQUFBLGNBQ0EwSyxFQUFBdUYsSUFBQXNGLFdBQUEvTCxFQUFBLFVBQ0FrQixFQUFBdUYsSUFBQXNGLFdBQUEyQixFQUFBLFlBQ0FuVCxLQUFBcVksNEJBdkJBLElBd0JBclksS0FBQWtZLGdDQXZCQSxLQXdCQWxZLEtBQUF5RixPQUFBQSxFQUNBekYsS0FBQW1ULFNBQUFBLEVBQ0FuVCxLQUFBL0QsV0FBQUEsRUFDQStELEtBQUFvVCxnQkFBQUEsRUFDQXBULEtBQUFvVSxrQkFBQSxJQUFBckIsRUFBQW5NLGtCQUNBNUcsS0FBQS9ELFdBQUF5VSxVQUFBLFNBQUF2SixHQUFBLE9BQUF6QixFQUFBMFIsb0JBQUFqUSxJQUNBbkgsS0FBQS9ELFdBQUEwVSxRQUFBLFNBQUE5UyxHQUFBLE9BQUE2SCxFQUFBK1MsaUJBQUE1YSxJQUNBbUMsS0FBQTRWLFVBQUEsR0FDQTVWLEtBQUF5VyxRQUFBLEdBQ0F6VyxLQUFBK1csZ0JBQUEsR0FDQS9XLEtBQUFpWCxzQkFBQSxHQUNBalgsS0FBQW1YLHFCQUFBLEdBQ0FuWCxLQUFBMlYsYUFBQSxFQUNBM1YsS0FBQThULDJCQUFBLEVBQ0E5VCxLQUFBdU0sZ0JBQUF1RyxFQUFBTyxhQUNBclQsS0FBQTJNLG1CQUFBLEVBQ0EzTSxLQUFBaVksa0JBQUFqWSxLQUFBbVQsU0FBQWlELGFBQUEsQ0FBQS9VLEtBQUEyUixFQUFBK0MsWUFBQTRCLE9BaTBCQXpjLEVBQUFnWSxjQUFBQSxHLDJIQ241QkEsSUFBQTFLLEVBQUF4SSxNQUFBQSxLQUFBd0ksVUFBQXJGLE9BQUFzRixRQUFBLFNBQUFsTyxHQUNBLElBQUEsSUFBQW1PLEVBQUFqTyxFQUFBLEVBQUFILEVBQUFxTyxVQUFBdk4sT0FBQVgsRUFBQUgsRUFBQUcsSUFFQSxJQUFBLElBQUFRLEtBREF5TixFQUFBQyxVQUFBbE8sR0FDQTBJLE9BQUFHLFVBQUFjLGVBQUFqSixLQUFBdU4sRUFBQXpOLEtBQ0FWLEVBQUFVLEdBQUF5TixFQUFBek4sSUFFQSxPQUFBVixHQUVBNEksT0FBQUMsZUFBQWxJLEVBQUEsYUFBQSxDQUFBK0MsT0FBQSxJQUNBLElBQUFnYyxFQUFBcmYsRUFBQSw0QkFDQXNmLEVBQUF0ZixFQUFBLG9CQUNBdWYsRUFBQXZmLEVBQUEsbUJBQ0FzUSxFQUFBdFEsRUFBQSxhQUNBd2YsRUFBQXhmLEVBQUEscUJBQ0F5ZixFQUFBemYsRUFBQSxhQUNBK0wsRUFBQS9MLEVBQUEsV0FFQTBmLEVBQUEsQ0FDQUMsTUFBQXJQLEVBQUFtQixTQUFBbU8sTUFDQUMsTUFBQXZQLEVBQUFtQixTQUFBQyxNQUNBb08sS0FBQXhQLEVBQUFtQixTQUFBNEUsWUFDQTBKLFlBQUF6UCxFQUFBbUIsU0FBQTRFLFlBQ0EySixLQUFBMVAsRUFBQW1CLFNBQUE2RSxRQUNBMkosUUFBQTNQLEVBQUFtQixTQUFBNkUsUUFDQXJULE1BQUFxTixFQUFBbUIsU0FBQXRSLE1BQ0ErZixTQUFBNVAsRUFBQW1CLFNBQUEwTyxTQUNBQyxLQUFBOVAsRUFBQW1CLFNBQUE0TyxNQWVBLElBQUE3ZCxHQUdBQSxFQUFBa0csVUFBQTRYLGlCQUFBLFNBQUFDLEdBRUEsSUFJQUMsRUFNQSxPQVhBelUsRUFBQXVGLElBQUFzRixXQUFBMkosRUFBQSxnQkEwRUEvVSxJQXpFQStVLEVBeUVBL08sSUF4RUFwTSxLQUFBeUYsT0FBQTBWLEVBRUEsaUJBQUFBLEdBQ0FDLEVBdEJBLFNBQUFuSCxHQUlBLElBQUFvSCxFQUFBZixFQUFBckcsRUFBQXVDLGVBQ0EsUUFBQSxJQUFBNkUsRUFDQSxPQUFBQSxFQUdBLE1BQUEsSUFBQXRnQixNQUFBLHNCQUFBa1osR0FhQXFILENBQUFILEdBQ0FuYixLQUFBeUYsT0FBQSxJQUFBa0IsRUFBQTRVLGNBQUFILElBR0FwYixLQUFBeUYsT0FBQSxJQUFBa0IsRUFBQTRVLGNBQUFKLEdBRUFuYixNQUVBNUMsRUFBQWtHLFVBQUFqRyxRQUFBLFNBQUFoQixFQUFBbWYsR0FXQSxPQVZBN1UsRUFBQXVGLElBQUFzRixXQUFBblYsRUFBQSxPQUNBMkQsS0FBQTNELElBQUFBLEVBSUEyRCxLQUFBeWIsc0JBQUFqVCxFQUFBLEdBQUF4SSxLQUFBeWIsc0JBREEsaUJBQUFELEVBQ0FBLEVBR0EsQ0FBQTFPLFVBQUEwTyxJQUVBeGIsTUFNQTVDLEVBQUFrRyxVQUFBb1ksZ0JBQUEsU0FBQXZJLEdBR0EsT0FGQXhNLEVBQUF1RixJQUFBc0YsV0FBQTJCLEVBQUEsWUFDQW5ULEtBQUFtVCxTQUFBQSxFQUNBblQsTUFFQTVDLEVBQUFrRyxVQUFBaEcsdUJBQUEsU0FBQXFlLEdBQ0EsR0FBQTNiLEtBQUFvVCxnQkFDQSxNQUFBLElBQUFyWSxNQUFBLDJDQVdBLE9BVEE0Z0IsRUFHQTFYLE1BQUEyWCxRQUFBRCxHQUNBM2IsS0FBQW9ULGdCQUFBLElBQUE2RyxFQUFBbFUsdUJBQUE0VixHQUdBM2IsS0FBQW9ULGdCQUFBdUksRUFOQTNiLEtBQUFvVCxnQkFBQSxJQUFBNkcsRUFBQWxVLHVCQVFBL0YsTUFNQTVDLEVBQUFrRyxVQUFBL0YsTUFBQSxXQUdBLElBQUFrZSxFQUFBemIsS0FBQXliLHVCQUFBLEdBT0EsUUFMQXJWLElBQUFxVixFQUFBaFcsU0FFQWdXLEVBQUFoVyxPQUFBekYsS0FBQXlGLFNBR0F6RixLQUFBM0QsSUFDQSxNQUFBLElBQUF0QixNQUFBLDRGQUVBLElBQUFrQixFQUFBLElBQUFpZSxFQUFBck8sZUFBQTdMLEtBQUEzRCxJQUFBb2YsR0FDQSxPQUFBdEIsRUFBQWpILGNBQUEzTyxPQUFBdEksRUFBQStELEtBQUF5RixRQUFBNFUsRUFBQXdCLFdBQUFDLFNBQUE5YixLQUFBbVQsVUFBQSxJQUFBaUgsRUFBQTJCLGdCQUFBL2IsS0FBQW9ULGtCQUVBaFcsR0F6RUEsU0FBQUEsS0EyRUFsQyxFQUFBa0MscUJBQUFBLEcsNEtDbkhBLElBQ0EyWSxFQUhBNVMsT0FBQUMsZUFBQWxJLEVBQUEsYUFBQSxDQUFBK0MsT0FBQSxLQUdBOFgsRUFlQTdhLEVBQUE2YSxjQUFBN2EsRUFBQTZhLFlBQUEsS0FiQUEsRUFBQSxXQUFBLEdBQUEsYUFFQUEsRUFBQUEsRUFBQSxXQUFBLEdBQUEsYUFFQUEsRUFBQUEsRUFBQSxXQUFBLEdBQUEsYUFFQUEsRUFBQUEsRUFBQSxpQkFBQSxHQUFBLG1CQUVBQSxFQUFBQSxFQUFBLGlCQUFBLEdBQUEsbUJBRUFBLEVBQUFBLEVBQUEsS0FBQSxHQUFBLE9BRUFBLEVBQUFBLEVBQUEsTUFBQSxHQUFBLFMscUNDWEEsSUFDQTFKLEVBUEFsSixPQUFBQyxlQUFBbEksRUFBQSxhQUFBLENBQUErQyxPQUFBLEtBT0FvTyxFQWVBblIsRUFBQW1SLFdBQUFuUixFQUFBbVIsU0FBQSxLQWJBQSxFQUFBLE1BQUEsR0FBQSxRQUVBQSxFQUFBQSxFQUFBLE1BQUEsR0FBQSxRQUVBQSxFQUFBQSxFQUFBLFlBQUEsR0FBQSxjQUVBQSxFQUFBQSxFQUFBLFFBQUEsR0FBQSxVQUVBQSxFQUFBQSxFQUFBLE1BQUEsR0FBQSxRQUVBQSxFQUFBQSxFQUFBLFNBQUEsR0FBQSxXQUVBQSxFQUFBQSxFQUFBLEtBQUEsR0FBQSxRLHFDQ2xCQSxJQUNBeUIsRUFZQTlCLEVBaEJBN0ksT0FBQUMsZUFBQWxJLEVBQUEsYUFBQSxDQUFBK0MsT0FBQSxLQUlBNlAsRUFTQTVTLEVBQUE0UyxvQkFBQTVTLEVBQUE0UyxrQkFBQSxLQVBBQSxFQUFBLEtBQUEsR0FBQSxPQUVBQSxFQUFBQSxFQUFBLFdBQUEsR0FBQSxhQUVBQSxFQUFBQSxFQUFBLGlCQUFBLEdBQUEsbUJBRUFBLEVBQUFBLEVBQUEsWUFBQSxHQUFBLGVBSUE5QixFQUtBOVEsRUFBQThRLGlCQUFBOVEsRUFBQThRLGVBQUEsS0FIQUEsRUFBQSxLQUFBLEdBQUEsT0FFQUEsRUFBQUEsRUFBQSxPQUFBLEdBQUEsVSxxQ0NwQkE3SSxPQUFBQyxlQUFBbEksRUFBQSxhQUFBLENBQUErQyxPQUFBLElBQ0EsSUFBQStVLEVBQUFwWSxFQUFBLGtCQUNBc1EsRUFBQXRRLEVBQUEsYUFDQXVRLEVBQUF2USxFQUFBLGdCQUNBeWYsRUFBQXpmLEVBQUEsYUFDQThMLEVBQUE5TCxFQUFBLHVCQUdBbWhCLEdBY0FBLEVBQUF6WSxVQUFBaVUsY0FBQSxTQUFBeUUsRUFBQXZXLEdBRUEsR0FBQSxpQkFBQXVXLEVBQ0EsTUFBQSxJQUFBamhCLE1BQUEsMkRBRUEsSUFBQWloQixFQUNBLE1BQUEsR0FFQSxPQUFBdlcsSUFDQUEsRUFBQTRVLEVBQUF3QixXQUFBQyxVQUtBLElBRkEsSUFDQUcsRUFBQSxHQUNBcGYsRUFBQSxFQUFBeWEsRUFGQTVRLEVBQUFLLGtCQUFBcEssTUFBQXFmLEdBRUFuZixFQUFBeWEsRUFBQWxjLE9BQUF5QixJQUFBLENBQ0EsSUFBQW1CLEVBQUFzWixFQUFBemEsR0FDQXFmLEVBQUF4ZixLQUFBQyxNQUFBcUIsR0FDQSxHQUFBLGlCQUFBa2UsRUFBQTdhLEtBQ0EsTUFBQSxJQUFBdEcsTUFBQSxvQkFFQSxPQUFBbWhCLEVBQUE3YSxNQUNBLEtBQUEyUixFQUFBK0MsWUFBQXlCLFdBQ0F4WCxLQUFBbWMsb0JBQUFELEdBQ0EsTUFDQSxLQUFBbEosRUFBQStDLFlBQUEyQixXQUNBMVgsS0FBQW9jLG9CQUFBRixHQUNBLE1BQ0EsS0FBQWxKLEVBQUErQyxZQUFBQyxXQUNBaFcsS0FBQXFjLG9CQUFBSCxHQUNBLE1BQ0EsS0FBQWxKLEVBQUErQyxZQUFBNEIsS0FHQSxLQUFBM0UsRUFBQStDLFlBQUE2QixNQUVBLE1BQ0EsUUFFQW5TLEVBQUEyRyxJQUFBbEIsRUFBQW1CLFNBQUE0RSxZQUFBLHlCQUFBaUwsRUFBQTdhLEtBQUEsY0FDQSxTQUVBNGEsRUFBQWxSLEtBQUFtUixHQUVBLE9BQUFELEdBT0FGLEVBQUF6WSxVQUFBOFMsYUFBQSxTQUFBcFksR0FDQSxPQUFBMEksRUFBQUssa0JBQUFDLE1BQUF0SyxLQUFBdUssVUFBQWpKLEtBRUErZCxFQUFBelksVUFBQTZZLG9CQUFBLFNBQUFuZSxHQUNBZ0MsS0FBQXNjLHFCQUFBdGUsRUFBQStDLE9BQUEsZ0RBQ0FxRixJQUFBcEksRUFBQTJYLGNBQ0EzVixLQUFBc2MscUJBQUF0ZSxFQUFBMlgsYUFBQSw0Q0FHQW9HLEVBQUF6WSxVQUFBOFksb0JBQUEsU0FBQXBlLEdBRUEsR0FEQWdDLEtBQUFzYyxxQkFBQXRlLEVBQUEyWCxhQUFBLGdEQUNBdlAsSUFBQXBJLEVBQUF5VSxLQUNBLE1BQUEsSUFBQTFYLE1BQUEsNENBR0FnaEIsRUFBQXpZLFVBQUErWSxvQkFBQSxTQUFBcmUsR0FDQSxHQUFBQSxFQUFBMkwsUUFBQTNMLEVBQUFILE1BQ0EsTUFBQSxJQUFBOUMsTUFBQSw0Q0FFQWlELEVBQUEyTCxRQUFBM0wsRUFBQUgsT0FDQW1DLEtBQUFzYyxxQkFBQXRlLEVBQUFILE1BQUEsMkNBRUFtQyxLQUFBc2MscUJBQUF0ZSxFQUFBMlgsYUFBQSw0Q0FFQW9HLEVBQUF6WSxVQUFBZ1oscUJBQUEsU0FBQXJlLEVBQUFxSSxHQUNBLEdBQUEsaUJBQUFySSxHQUFBLEtBQUFBLEVBQ0EsTUFBQSxJQUFBbEQsTUFBQXVMLElBR0F5VixHQTVGQSxTQUFBQSxJQUVBL2IsS0FBQWlVLEtBTEEsT0FPQWpVLEtBQUFrVSxRQUFBLEVBRUFsVSxLQUFBOEwsZUFBQVgsRUFBQWEsZUFBQXVRLEtBd0ZBcmhCLEVBQUE2Z0IsZ0JBQUFBLEcsaUlDdkdBNVksT0FBQUMsZUFBQWxJLEVBQUEsYUFBQSxDQUFBK0MsT0FBQSxJQUVBLElBQUE0ZCxHQUtBQSxFQUFBdlksVUFBQThJLElBQUEsU0FBQW9RLEVBQUFDLEtBR0FaLEVBQUFDLFNBQUEsSUFBQUQsRUFDQUEsR0FSQSxTQUFBQSxLQVVBM2dCLEVBQUEyZ0IsV0FBQUEsRyxxQ0NiQSxJQUFBNVMsRUFBQWpKLE1BQUFBLEtBQUFpSixXQUFBLFNBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEdBQ0EsT0FBQSxJQUFBRCxFQUFBQSxHQUFBakUsU0FBQSxTQUFBbUUsRUFBQWxFLEdBQ0EsU0FBQW1FLEVBQUF0TCxHQUFBLElBQUF1TCxFQUFBSCxFQUFBSSxLQUFBeEwsSUFBQSxNQUFBNUQsR0FBQStLLEVBQUEvSyxJQUNBLFNBQUFxUCxFQUFBekwsR0FBQSxJQUFBdUwsRUFBQUgsRUFBQSxNQUFBcEwsSUFBQSxNQUFBNUQsR0FBQStLLEVBQUEvSyxJQUNBLFNBQUFtUCxFQUFBRyxHQUFBQSxFQUFBQyxLQUFBTixFQUFBSyxFQUFBMUwsT0FBQSxJQUFBbUwsRUFBQSxTQUFBRSxHQUFBQSxFQUFBSyxFQUFBMUwsU0FBQVAsS0FBQTZMLEVBQUFHLEdBQ0FGLEdBQUFILEVBQUFBLEVBQUF0QixNQUFBbUIsRUFBQUMsR0FBQSxLQUFBTSxXQUdBSSxFQUFBN0osTUFBQUEsS0FBQTZKLGFBQUEsU0FBQVgsRUFBQVksR0FDQSxJQUFBcFAsRUFBQXFQLEVBQUF4UCxFQUFBeVAsRUFBQSxDQUFBQyxNQUFBLEVBQUFDLEtBQUEsV0FBQSxHQUFBLEVBQUEzUCxFQUFBLEdBQUEsTUFBQUEsRUFBQSxHQUFBLE9BQUFBLEVBQUEsSUFBQTRQLEtBQUEsR0FBQUMsSUFBQSxJQUNBQyxFQUFBLENBQUFaLEtBQUFhLEVBQUEsR0FBQUMsTUFBQUQsRUFBQSxHQUFBRSxPQUFBRixFQUFBLElBQUEsTUFBQSxtQkFBQUcsU0FBQUosRUFBQUksT0FBQUMsVUFBQSxXQUFBLE9BQUExSyxPQUFBcUssRUFDQSxTQUFBQyxFQUFBaFEsR0FBQSxPQUFBLFNBQUFxUSxHQUFBLE9BQ0EsU0FBQUMsR0FDQSxHQUFBbFEsRUFBQSxNQUFBLElBQUFtUSxVQUFBLG1DQUNBLEtBQUFiLEdBQUEsSUFDQSxHQUFBdFAsRUFBQSxFQUFBcVAsSUFBQXhQLEVBQUEsRUFBQXFRLEVBQUEsR0FBQWIsRUFBQSxPQUFBYSxFQUFBLEdBQUFiLEVBQUEsU0FBQXhQLEVBQUF3UCxFQUFBLFNBQUF4UCxFQUFBWSxLQUFBNE8sR0FBQSxHQUFBQSxFQUFBTixTQUFBbFAsRUFBQUEsRUFBQVksS0FBQTRPLEVBQUFhLEVBQUEsS0FBQWhCLEtBQUEsT0FBQXJQLEVBRUEsT0FEQXdQLEVBQUEsRUFBQXhQLElBQUFxUSxFQUFBLENBQUEsRUFBQUEsRUFBQSxHQUFBclEsRUFBQTBELFFBQ0EyTSxFQUFBLElBQ0EsS0FBQSxFQUFBLEtBQUEsRUFBQXJRLEVBQUFxUSxFQUFBLE1BQ0EsS0FBQSxFQUFBLE9BQUFaLEVBQUFDLFFBQUEsQ0FBQWhNLE1BQUEyTSxFQUFBLEdBQUFoQixNQUFBLEdBQ0EsS0FBQSxFQUFBSSxFQUFBQyxRQUFBRixFQUFBYSxFQUFBLEdBQUFBLEVBQUEsQ0FBQSxHQUFBLFNBQ0EsS0FBQSxFQUFBQSxFQUFBWixFQUFBSSxJQUFBVSxNQUFBZCxFQUFBRyxLQUFBVyxNQUFBLFNBQ0EsUUFDQSxLQUFBdlEsRUFBQSxHQUFBQSxFQUFBeVAsRUFBQUcsTUFBQS9PLFFBQUFiLEVBQUFBLEVBQUFhLE9BQUEsTUFBQSxJQUFBd1AsRUFBQSxJQUFBLElBQUFBLEVBQUEsSUFBQSxDQUFBWixFQUFBLEVBQUEsU0FDQSxHQUFBLElBQUFZLEVBQUEsTUFBQXJRLEdBQUFxUSxFQUFBLEdBQUFyUSxFQUFBLElBQUFxUSxFQUFBLEdBQUFyUSxFQUFBLElBQUEsQ0FBQXlQLEVBQUFDLE1BQUFXLEVBQUEsR0FBQSxNQUNBLEdBQUEsSUFBQUEsRUFBQSxJQUFBWixFQUFBQyxNQUFBMVAsRUFBQSxHQUFBLENBQUF5UCxFQUFBQyxNQUFBMVAsRUFBQSxHQUFBQSxFQUFBcVEsRUFBQSxNQUNBLEdBQUFyUSxHQUFBeVAsRUFBQUMsTUFBQTFQLEVBQUEsR0FBQSxDQUFBeVAsRUFBQUMsTUFBQTFQLEVBQUEsR0FBQXlQLEVBQUFJLElBQUFXLEtBQUFILEdBQUEsTUFDQXJRLEVBQUEsSUFBQXlQLEVBQUFJLElBQUFVLE1BQ0FkLEVBQUFHLEtBQUFXLE1BQUEsU0FFQUYsRUFBQWQsRUFBQTNPLEtBQUErTixFQUFBYyxHQUNBLE1BQUEzUCxHQUFBdVEsRUFBQSxDQUFBLEVBQUF2USxHQUFBMFAsRUFBQSxFQUFBLFFBQUFyUCxFQUFBSCxFQUFBLEVBQ0EsR0FBQSxFQUFBcVEsRUFBQSxHQUFBLE1BQUFBLEVBQUEsR0FBQSxNQUFBLENBQUEzTSxNQUFBMk0sRUFBQSxHQUFBQSxFQUFBLFFBQUEsRUFBQWhCLE1BQUEsR0FyQkFKLENBQUEsQ0FBQWxQLEVBQUFxUSxPQXdCQXhILE9BQUFDLGVBQUFsSSxFQUFBLGFBQUEsQ0FBQStDLE9BQUEsSUFDQSxJQUFBeWUsRUFBQTloQixFQUFBLHFCQUNBNkosRUFBQTdKLEVBQUEsWUFDQXNRLEVBQUF0USxFQUFBLGFBQ0F1USxFQUFBdlEsRUFBQSxnQkFDQStMLEVBQUEvTCxFQUFBLFdBR0EyVCxHQVdBcEwsT0FBQUMsZUFBQW1MLEVBQUFqTCxVQUFBLGNBQUEsQ0FFQUksSUFBQSxXQUNBLE9BQUExRCxLQUFBMmMsVUFBQXpYLFNBRUF2QixZQUFBLEVBQ0FDLGNBQUEsSUFFQTJLLEVBQUFqTCxVQUFBc04sUUFBQSxTQUFBdlUsRUFBQXlQLEdBQ0EsT0FBQTdDLEVBQUFqSixVQUFBLE9BQUEsRUFBQSxXQUNBLElBQUE0YyxFQUFBak8sRUFBQWtPLEVBQUF0VSxFQUNBLE9BQUFzQixFQUFBN0osS0FBQSxTQUFBK0wsR0FDQSxPQUFBQSxFQUFBOUIsT0FDQSxLQUFBLEVBT0EsR0FOQXRELEVBQUF1RixJQUFBc0YsV0FBQW5WLEVBQUEsT0FDQXNLLEVBQUF1RixJQUFBc0YsV0FBQTFGLEVBQUEsa0JBQ0FuRixFQUFBdUYsSUFBQUMsS0FBQUwsRUFBQVgsRUFBQWEsZUFBQSxrQkFDQWhNLEtBQUEzRCxJQUFBQSxFQUNBMkQsS0FBQXlGLE9BQUEyRyxJQUFBbEIsRUFBQW1CLFNBQUFtTyxNQUFBLHVDQUVBMU8sSUFBQVgsRUFBQWEsZUFBQUMsUUFDQSxvQkFBQXRHLGdCQUFBLGlCQUFBLElBQUFBLGdCQUFBbVgsYUFDQSxNQUFBLElBQUEvaEIsTUFBQSw4RkFVQSxPQVJBNmhCLEVBQUEsQ0FDQTNYLFlBQUFqRixLQUFBMmMsVUFBQUksT0FDQXJPLFFBQUEsR0FDQXNPLFFBQUEsS0FFQWxSLElBQUFYLEVBQUFhLGVBQUFDLFNBQ0EyUSxFQUFBRSxhQUFBLGVBRUEsQ0FBQSxFQUFBOWMsS0FBQWlkLGtCQUNBLEtBQUEsRUFLQSxPQUpBdE8sRUFBQTVDLEVBQUE3QixPQUNBbEssS0FBQWtkLGtCQUFBTixFQUFBak8sR0FDQWtPLEVBQUF4Z0IsRUFBQSxNQUFBc0UsS0FBQXFZLE1BQ0FoWixLQUFBeUYsT0FBQTJHLElBQUFsQixFQUFBbUIsU0FBQW1PLE1BQUEsb0NBQUFxQyxFQUFBLEtBQ0EsQ0FBQSxFQUFBN2MsS0FBQXVGLFdBQUE3QixJQUFBbVosRUFBQUQsSUFDQSxLQUFBLEVBWUEsT0FWQSxPQURBclUsRUFBQXdELEVBQUE3QixRQUNBM0QsWUFDQXZHLEtBQUF5RixPQUFBMkcsSUFBQWxCLEVBQUFtQixTQUFBdFIsTUFBQSxxREFBQXdOLEVBQUFoQyxXQUFBLEtBRUF2RyxLQUFBbWQsV0FBQSxJQUFBMVksRUFBQTRCLFVBQUFrQyxFQUFBTSxZQUFBLEdBQUFOLEVBQUFoQyxZQUNBdkcsS0FBQW9kLFNBQUEsR0FHQXBkLEtBQUFvZCxTQUFBLEVBRUFwZCxLQUFBcWQsVUFBQXJkLEtBQUFzZCxLQUFBdGQsS0FBQTNELElBQUF1Z0IsR0FDQSxDQUFBLFNBS0FyTyxFQUFBakwsVUFBQTJaLGVBQUEsV0FDQSxPQUFBaFUsRUFBQWpKLFVBQUEsT0FBQSxFQUFBLFdBQ0EsT0FBQTZKLEVBQUE3SixLQUFBLFNBQUErTCxHQUNBLE9BQUFBLEVBQUE5QixPQUNBLEtBQUEsRUFDQSxPQUFBakssS0FBQTROLG1CQUNBLENBQUEsRUFBQTVOLEtBQUE0TixzQkFEQSxDQUFBLEVBQUEsR0FFQSxLQUFBLEVBQUEsTUFBQSxDQUFBLEVBQUE3QixFQUFBN0IsUUFDQSxLQUFBLEVBQUEsTUFBQSxDQUFBLEVBQUEsWUFLQXFFLEVBQUFqTCxVQUFBNFosa0JBQUEsU0FBQWxZLEVBQUEySixHQUNBM0osRUFBQTBKLFVBQ0ExSixFQUFBMEosUUFBQSxJQUVBQyxFQUVBM0osRUFBQTBKLFFBQUEsY0FBQSxVQUFBQyxFQUlBM0osRUFBQTBKLFFBQUEsc0JBRUExSixFQUFBMEosUUFBQSxlQUdBSCxFQUFBakwsVUFBQWdhLEtBQUEsU0FBQWpoQixFQUFBdWdCLEdBQ0EsT0FBQTNULEVBQUFqSixVQUFBLE9BQUEsRUFBQSxXQUNBLElBQUEyTyxFQUFBa08sRUFBQXRVLEVBQUFrTCxFQUNBLE9BQUE1SixFQUFBN0osS0FBQSxTQUFBK0wsR0FDQSxPQUFBQSxFQUFBOUIsT0FDQSxLQUFBLEVBQ0E4QixFQUFBNUIsS0FBQVksS0FBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLElBQ0FnQixFQUFBOUIsTUFBQSxFQUNBLEtBQUEsRUFDQSxPQUFBakssS0FBQW9kLFFBQ0EsQ0FBQSxFQUFBcGQsS0FBQWlkLGtCQURBLENBQUEsRUFBQSxHQUVBLEtBQUEsRUFDQXRPLEVBQUE1QyxFQUFBN0IsT0FDQWxLLEtBQUFrZCxrQkFBQU4sRUFBQWpPLEdBQ0E1QyxFQUFBOUIsTUFBQSxFQUNBLEtBQUEsRUFJQSxPQUhBOEIsRUFBQTVCLEtBQUFZLEtBQUEsQ0FBQSxFQUFBLEVBQUEsQ0FBQSxJQUNBOFIsRUFBQXhnQixFQUFBLE1BQUFzRSxLQUFBcVksTUFDQWhaLEtBQUF5RixPQUFBMkcsSUFBQWxCLEVBQUFtQixTQUFBbU8sTUFBQSxvQ0FBQXFDLEVBQUEsS0FDQSxDQUFBLEVBQUE3YyxLQUFBdUYsV0FBQTdCLElBQUFtWixFQUFBRCxJQUNBLEtBQUEsRUF5QkEsT0F2QkEsT0FEQXJVLEVBQUF3RCxFQUFBN0IsUUFDQTNELFlBQ0F2RyxLQUFBeUYsT0FBQTJHLElBQUFsQixFQUFBbUIsU0FBQTRFLFlBQUEsc0RBQ0FqUixLQUFBb2QsU0FBQSxHQUVBLE1BQUE3VSxFQUFBaEMsWUFDQXZHLEtBQUF5RixPQUFBMkcsSUFBQWxCLEVBQUFtQixTQUFBdFIsTUFBQSxxREFBQXdOLEVBQUFoQyxXQUFBLEtBRUF2RyxLQUFBbWQsV0FBQSxJQUFBMVksRUFBQTRCLFVBQUFrQyxFQUFBTSxZQUFBLEdBQUFOLEVBQUFoQyxZQUNBdkcsS0FBQW9kLFNBQUEsR0FJQTdVLEVBQUFuSixTQUNBWSxLQUFBeUYsT0FBQTJHLElBQUFsQixFQUFBbUIsU0FBQW1PLE1BQUEsMENBQUE3VCxFQUFBNFcsY0FBQWhWLEVBQUFuSixRQUFBWSxLQUFBcVEsbUJBQUEsS0FDQXJRLEtBQUEwUSxXQUNBMVEsS0FBQTBRLFVBQUFuSSxFQUFBbkosVUFLQVksS0FBQXlGLE9BQUEyRyxJQUFBbEIsRUFBQW1CLFNBQUFtTyxNQUFBLHNEQUdBLENBQUEsRUFBQSxHQUNBLEtBQUEsRUFpQkEsT0FoQkEvRyxFQUFBMUgsRUFBQTdCLE9BQ0FsSyxLQUFBb2QsUUFLQTNKLGFBQUFoUCxFQUFBZ0MsYUFFQXpHLEtBQUF5RixPQUFBMkcsSUFBQWxCLEVBQUFtQixTQUFBbU8sTUFBQSx1REFJQXhhLEtBQUFtZCxXQUFBMUosRUFDQXpULEtBQUFvZCxTQUFBLEdBVkFwZCxLQUFBeUYsT0FBQTJHLElBQUFsQixFQUFBbUIsU0FBQW1PLE1BQUEsd0RBQUEvRyxFQUFBelYsU0FhQSxDQUFBLEVBQUEsR0FDQSxLQUFBLEVBQUEsTUFBQSxDQUFBLEVBQUEsR0FDQSxLQUFBLEVBQUEsTUFBQSxDQUFBLEVBQUEsR0FDQSxLQUFBLEVBT0EsT0FOQWdDLEtBQUF5RixPQUFBMkcsSUFBQWxCLEVBQUFtQixTQUFBbU8sTUFBQSw2Q0FHQXhhLEtBQUF3ZCxhQUNBeGQsS0FBQXlkLGVBRUEsQ0FBQSxHQUNBLEtBQUEsRUFBQSxNQUFBLENBQUEsU0FLQWxQLEVBQUFqTCxVQUFBeUIsS0FBQSxTQUFBb0MsR0FDQSxPQUFBOEIsRUFBQWpKLFVBQUEsT0FBQSxFQUFBLFdBQ0EsT0FBQTZKLEVBQUE3SixLQUFBLFNBQUErTCxHQUNBLE9BQUEvTCxLQUFBb2QsUUFHQSxDQUFBLEVBQUF6VyxFQUFBd04sWUFBQW5VLEtBQUF5RixPQUFBLGNBQUF6RixLQUFBdUYsV0FBQXZGLEtBQUEzRCxJQUFBMkQsS0FBQTROLG1CQUFBekcsRUFBQW5ILEtBQUFxUSxvQkFGQSxDQUFBLEVBQUFsTCxRQUFBQyxPQUFBLElBQUFySyxNQUFBLHVEQU1Bd1QsRUFBQWpMLFVBQUF5SixLQUFBLFdBQ0EsT0FBQTlELEVBQUFqSixVQUFBLE9BQUEsRUFBQSxXQUNBLElBQUEwZCxFQUFBL08sRUFDQSxPQUFBOUUsRUFBQTdKLEtBQUEsU0FBQStMLEdBQ0EsT0FBQUEsRUFBQTlCLE9BQ0EsS0FBQSxFQUNBakssS0FBQXlGLE9BQUEyRyxJQUFBbEIsRUFBQW1CLFNBQUFtTyxNQUFBLDZDQUVBeGEsS0FBQW9kLFNBQUEsRUFDQXBkLEtBQUEyYyxVQUFBcFosUUFDQXdJLEVBQUE5QixNQUFBLEVBQ0EsS0FBQSxFQUVBLE9BREE4QixFQUFBNUIsS0FBQVksS0FBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLElBQ0EsQ0FBQSxFQUFBL0ssS0FBQXFkLFdBQ0EsS0FBQSxFQU9BLE9BTkF0UixFQUFBN0IsT0FFQWxLLEtBQUF5RixPQUFBMkcsSUFBQWxCLEVBQUFtQixTQUFBbU8sTUFBQSxxREFBQXhhLEtBQUEzRCxJQUFBLEtBQ0FxaEIsRUFBQSxDQUNBaFAsUUFBQSxJQUVBLENBQUEsRUFBQTFPLEtBQUFpZCxrQkFDQSxLQUFBLEVBR0EsT0FGQXRPLEVBQUE1QyxFQUFBN0IsT0FDQWxLLEtBQUFrZCxrQkFBQVEsRUFBQS9PLEdBQ0EsQ0FBQSxFQUFBM08sS0FBQXVGLFdBQUF5RCxPQUFBaEosS0FBQTNELElBQUFxaEIsSUFDQSxLQUFBLEVBR0EsT0FGQTNSLEVBQUE3QixPQUNBbEssS0FBQXlGLE9BQUEyRyxJQUFBbEIsRUFBQW1CLFNBQUFtTyxNQUFBLGdEQUNBLENBQUEsRUFBQSxHQUNBLEtBQUEsRUFLQSxPQUpBeGEsS0FBQXlGLE9BQUEyRyxJQUFBbEIsRUFBQW1CLFNBQUFtTyxNQUFBLDBDQUdBeGEsS0FBQXlkLGVBQ0EsQ0FBQSxHQUNBLEtBQUEsRUFBQSxNQUFBLENBQUEsU0FLQWxQLEVBQUFqTCxVQUFBbWEsYUFBQSxXQUNBLElBQ0FFLEVBREEzZCxLQUFBMlEsVUFDQWdOLEVBQUEsZ0RBQ0EzZCxLQUFBbWQsYUFDQVEsR0FBQSxXQUFBM2QsS0FBQW1kLFlBRUFuZCxLQUFBeUYsT0FBQTJHLElBQUFsQixFQUFBbUIsU0FBQW1PLE1BQUFtRCxHQUNBM2QsS0FBQTJRLFFBQUEzUSxLQUFBbWQsY0FHQTVPLEdBMU9BLFNBQUFBLEVBQUFoSixFQUFBcUksRUFBQW5JLEVBQUE0SyxHQUNBclEsS0FBQXVGLFdBQUFBLEVBQ0F2RixLQUFBNE4sbUJBQUFBLEVBQ0E1TixLQUFBeUYsT0FBQUEsRUFDQXpGLEtBQUEyYyxVQUFBLElBQUFELEVBQUFyWixnQkFDQXJELEtBQUFxUSxrQkFBQUEsRUFDQXJRLEtBQUFvZCxTQUFBLEVBQ0FwZCxLQUFBMFEsVUFBQSxLQUNBMVEsS0FBQTJRLFFBQUEsS0FvT0F6VixFQUFBcVQscUJBQUFBLEcsa0lDeFJBLElBQ0ExSyxFQURBQyxFQUFBOUQsTUFBQUEsS0FBQThELFlBQ0FELEVBQUFWLE9BQUFZLGdCQUNBLENBQUFDLFVBQUEsY0FBQUMsT0FBQSxTQUFBQyxFQUFBQyxHQUFBRCxFQUFBRixVQUFBRyxJQUNBLFNBQUFELEVBQUFDLEdBQUEsSUFBQSxJQUFBbEosS0FBQWtKLEVBQUFBLEVBQUFDLGVBQUFuSixLQUFBaUosRUFBQWpKLEdBQUFrSixFQUFBbEosS0FDQSxTQUFBaUosRUFBQUMsR0FFQSxTQUFBRSxJQUFBckUsS0FBQXNFLFlBQUFKLEVBREFMLEVBQUFLLEVBQUFDLEdBRUFELEVBQUFaLFVBQUEsT0FBQWEsRUFBQWhCLE9BQUFvQixPQUFBSixJQUFBRSxFQUFBZixVQUFBYSxFQUFBYixVQUFBLElBQUFlLEtBR0FtRSxFQUFBeEksTUFBQUEsS0FBQXdJLFVBQUFyRixPQUFBc0YsUUFBQSxTQUFBbE8sR0FDQSxJQUFBLElBQUFtTyxFQUFBak8sRUFBQSxFQUFBSCxFQUFBcU8sVUFBQXZOLE9BQUFYLEVBQUFILEVBQUFHLElBRUEsSUFBQSxJQUFBUSxLQURBeU4sRUFBQUMsVUFBQWxPLEdBQ0EwSSxPQUFBRyxVQUFBYyxlQUFBakosS0FBQXVOLEVBQUF6TixLQUNBVixFQUFBVSxHQUFBeU4sRUFBQXpOLElBRUEsT0FBQVYsR0FFQTRJLE9BQUFDLGVBQUFsSSxFQUFBLGFBQUEsQ0FBQStDLE9BQUEsSUFDQSxJQVNBMmYsRUFUQW5aLEVBQUE3SixFQUFBLFlBQ0E4SixFQUFBOUosRUFBQSxnQkFDQXNRLEVBQUF0USxFQUFBLGFBQ0ErTCxFQUFBL0wsRUFBQSxXQUVBLG9CQUFBK0ssaUJBSUFpWSxHQURBLG1CQUFBalMsb0JBQUFDLHdCQUFBaFIsR0FDQSxZQUdBLElBQUE0SixFQUFBcUIsR0FBQXJCLEVBK0RBRSxFQUFBSSxXQTlEQWhCLEVBQUErQixFQUFBckIsR0FXQXFCLEVBQUF2QyxVQUFBeUIsS0FBQSxTQUFBOFksR0FDQSxJQUFBblksRUFBQTFGLEtBQ0EsT0FBQSxJQUFBbUYsUUFBQSxTQUFBbUUsRUFBQWxFLEdBQ0EsSUFFQTBZLEVBREFuWCxFQUFBUyxjQUFBeVcsRUFBQXplLFNBQ0FpSSxFQUFBMFcsS0FBQUYsRUFBQXplLFNBR0F5ZSxFQUFBemUsU0FBQSxHQUVBNGUsRUFBQXRZLEVBQUFWLFFBQUE2WSxFQUFBeGhCLElBQUEsQ0FDQXlOLEtBQUFnVSxFQUVBRyxTQUFBLGdCQUFBSixFQUFBZixhQUFBLEtBQUEsT0FDQXBPLFFBQUFsRyxFQUFBLENBRUEwVixtQkFBQSxrQkFBQUwsRUFBQW5QLFNBQ0FwSixPQUFBdVksRUFBQXZZLE9BQ0EwWCxRQUFBYSxFQUFBYixTQUNBLFNBQUFuZixFQUFBMEssRUFBQXVCLEdBSUEsR0FIQStULEVBQUE1WSxjQUNBNFksRUFBQTVZLFlBQUF4QixRQUFBLE1BRUE1RixFQU9BLE1BTkEsY0FBQUEsRUFBQTdDLE9BQ0EwSyxFQUFBRCxPQUFBMkcsSUFBQWxCLEVBQUFtQixTQUFBNkUsUUFBQSw4QkFDQTlMLEVBQUEsSUFBQVgsRUFBQWdDLGVBRUFmLEVBQUFELE9BQUEyRyxJQUFBbEIsRUFBQW1CLFNBQUE2RSxRQUFBLDRCQUFBclQsUUFDQXVILEVBQUF2SCxHQUdBLEtBQUEwSyxFQUFBaEMsWUFBQWdDLEVBQUFoQyxXQUFBLElBQ0ErQyxFQUFBLElBQUE1RSxFQUFBa0UsYUFBQUwsRUFBQWhDLFdBQUFnQyxFQUFBNFYsZUFBQSxHQUFBclUsSUFHQTFFLEVBQUEsSUFBQVgsRUFBQTRCLFVBQUFrQyxFQUFBNFYsZUFBQSxHQUFBNVYsRUFBQWhDLFlBQUEsTUFHQXNYLEVBQUE1WSxjQUNBNFksRUFBQTVZLFlBQUF4QixRQUFBLFdBQ0F1YSxFQUFBemEsUUFDQTZCLEVBQUEsSUFBQVgsRUFBQVksaUJBS0FRLEVBQUF2QyxVQUFBa0MsZ0JBQUEsU0FBQW5KLEdBQ0EsT0FBQTJELEtBQUFvZSxVQUFBNVksZ0JBQUFuSixJQUVBd0osR0E1REEsU0FBQUEsRUFBQUosR0FDQSxJQUFBQyxFQUFBbEIsRUFBQXJKLEtBQUE2RSxPQUFBQSxLQUNBLFFBQUEsSUFBQTRkLEVBQ0EsTUFBQSxJQUFBN2lCLE1BQUEsNkNBS0EsT0FIQTJLLEVBQUFELE9BQUFBLEVBQ0FDLEVBQUEwWSxVQUFBUixFQUFBUyxNQUNBM1ksRUFBQVYsUUFBQTRZLEVBQUFVLFNBQUEsQ0FBQUQsSUFBQTNZLEVBQUEwWSxZQUNBMVksRUFzREF4SyxFQUFBMkssZUFBQUEsSSx1SUMvRkEsSUFBQW9ELEVBQUFqSixNQUFBQSxLQUFBaUosV0FBQSxTQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxHQUNBLE9BQUEsSUFBQUQsRUFBQUEsR0FBQWpFLFNBQUEsU0FBQW1FLEVBQUFsRSxHQUNBLFNBQUFtRSxFQUFBdEwsR0FBQSxJQUFBdUwsRUFBQUgsRUFBQUksS0FBQXhMLElBQUEsTUFBQTVELEdBQUErSyxFQUFBL0ssSUFDQSxTQUFBcVAsRUFBQXpMLEdBQUEsSUFBQXVMLEVBQUFILEVBQUEsTUFBQXBMLElBQUEsTUFBQTVELEdBQUErSyxFQUFBL0ssSUFDQSxTQUFBbVAsRUFBQUcsR0FBQUEsRUFBQUMsS0FBQU4sRUFBQUssRUFBQTFMLE9BQUEsSUFBQW1MLEVBQUEsU0FBQUUsR0FBQUEsRUFBQUssRUFBQTFMLFNBQUFQLEtBQUE2TCxFQUFBRyxHQUNBRixHQUFBSCxFQUFBQSxFQUFBdEIsTUFBQW1CLEVBQUFDLEdBQUEsS0FBQU0sV0FHQUksRUFBQTdKLE1BQUFBLEtBQUE2SixhQUFBLFNBQUFYLEVBQUFZLEdBQ0EsSUFBQXBQLEVBQUFxUCxFQUFBeFAsRUFBQXlQLEVBQUEsQ0FBQUMsTUFBQSxFQUFBQyxLQUFBLFdBQUEsR0FBQSxFQUFBM1AsRUFBQSxHQUFBLE1BQUFBLEVBQUEsR0FBQSxPQUFBQSxFQUFBLElBQUE0UCxLQUFBLEdBQUFDLElBQUEsSUFDQUMsRUFBQSxDQUFBWixLQUFBYSxFQUFBLEdBQUFDLE1BQUFELEVBQUEsR0FBQUUsT0FBQUYsRUFBQSxJQUFBLE1BQUEsbUJBQUFHLFNBQUFKLEVBQUFJLE9BQUFDLFVBQUEsV0FBQSxPQUFBMUssT0FBQXFLLEVBQ0EsU0FBQUMsRUFBQWhRLEdBQUEsT0FBQSxTQUFBcVEsR0FBQSxPQUNBLFNBQUFDLEdBQ0EsR0FBQWxRLEVBQUEsTUFBQSxJQUFBbVEsVUFBQSxtQ0FDQSxLQUFBYixHQUFBLElBQ0EsR0FBQXRQLEVBQUEsRUFBQXFQLElBQUF4UCxFQUFBLEVBQUFxUSxFQUFBLEdBQUFiLEVBQUEsT0FBQWEsRUFBQSxHQUFBYixFQUFBLFNBQUF4UCxFQUFBd1AsRUFBQSxTQUFBeFAsRUFBQVksS0FBQTRPLEdBQUEsR0FBQUEsRUFBQU4sU0FBQWxQLEVBQUFBLEVBQUFZLEtBQUE0TyxFQUFBYSxFQUFBLEtBQUFoQixLQUFBLE9BQUFyUCxFQUVBLE9BREF3UCxFQUFBLEVBQUF4UCxJQUFBcVEsRUFBQSxDQUFBLEVBQUFBLEVBQUEsR0FBQXJRLEVBQUEwRCxRQUNBMk0sRUFBQSxJQUNBLEtBQUEsRUFBQSxLQUFBLEVBQUFyUSxFQUFBcVEsRUFBQSxNQUNBLEtBQUEsRUFBQSxPQUFBWixFQUFBQyxRQUFBLENBQUFoTSxNQUFBMk0sRUFBQSxHQUFBaEIsTUFBQSxHQUNBLEtBQUEsRUFBQUksRUFBQUMsUUFBQUYsRUFBQWEsRUFBQSxHQUFBQSxFQUFBLENBQUEsR0FBQSxTQUNBLEtBQUEsRUFBQUEsRUFBQVosRUFBQUksSUFBQVUsTUFBQWQsRUFBQUcsS0FBQVcsTUFBQSxTQUNBLFFBQ0EsS0FBQXZRLEVBQUEsR0FBQUEsRUFBQXlQLEVBQUFHLE1BQUEvTyxRQUFBYixFQUFBQSxFQUFBYSxPQUFBLE1BQUEsSUFBQXdQLEVBQUEsSUFBQSxJQUFBQSxFQUFBLElBQUEsQ0FBQVosRUFBQSxFQUFBLFNBQ0EsR0FBQSxJQUFBWSxFQUFBLE1BQUFyUSxHQUFBcVEsRUFBQSxHQUFBclEsRUFBQSxJQUFBcVEsRUFBQSxHQUFBclEsRUFBQSxJQUFBLENBQUF5UCxFQUFBQyxNQUFBVyxFQUFBLEdBQUEsTUFDQSxHQUFBLElBQUFBLEVBQUEsSUFBQVosRUFBQUMsTUFBQTFQLEVBQUEsR0FBQSxDQUFBeVAsRUFBQUMsTUFBQTFQLEVBQUEsR0FBQUEsRUFBQXFRLEVBQUEsTUFDQSxHQUFBclEsR0FBQXlQLEVBQUFDLE1BQUExUCxFQUFBLEdBQUEsQ0FBQXlQLEVBQUFDLE1BQUExUCxFQUFBLEdBQUF5UCxFQUFBSSxJQUFBVyxLQUFBSCxHQUFBLE1BQ0FyUSxFQUFBLElBQUF5UCxFQUFBSSxJQUFBVSxNQUNBZCxFQUFBRyxLQUFBVyxNQUFBLFNBRUFGLEVBQUFkLEVBQUEzTyxLQUFBK04sRUFBQWMsR0FDQSxNQUFBM1AsR0FBQXVRLEVBQUEsQ0FBQSxFQUFBdlEsR0FBQTBQLEVBQUEsRUFBQSxRQUFBclAsRUFBQUgsRUFBQSxFQUNBLEdBQUEsRUFBQXFRLEVBQUEsR0FBQSxNQUFBQSxFQUFBLEdBQUEsTUFBQSxDQUFBM00sTUFBQTJNLEVBQUEsR0FBQUEsRUFBQSxRQUFBLEVBQUFoQixNQUFBLEdBckJBSixDQUFBLENBQUFsUCxFQUFBcVEsT0F3QkF4SCxPQUFBQyxlQUFBbEksRUFBQSxhQUFBLENBQUErQyxPQUFBLElBQ0EsSUFBQWlOLEVBQUF0USxFQUFBLGFBQ0F1USxFQUFBdlEsRUFBQSxnQkFDQStMLEVBQUEvTCxFQUFBLFdBRUE0VixHQVVBQSxFQUFBbE4sVUFBQXNOLFFBQUEsU0FBQXZVLEVBQUF5UCxHQUNBLE9BQUE3QyxFQUFBakosVUFBQSxPQUFBLEVBQUEsV0FDQSxJQUFBMk8sRUFDQWpKLEVBQUExRixLQUNBLE9BQUE2SixFQUFBN0osS0FBQSxTQUFBK0wsR0FDQSxPQUFBQSxFQUFBOUIsT0FDQSxLQUFBLEVBT0EsT0FOQXRELEVBQUF1RixJQUFBc0YsV0FBQW5WLEVBQUEsT0FDQXNLLEVBQUF1RixJQUFBc0YsV0FBQTFGLEVBQUEsa0JBQ0FuRixFQUFBdUYsSUFBQUMsS0FBQUwsRUFBQVgsRUFBQWEsZUFBQSxrQkFDQWhNLEtBQUF5RixPQUFBMkcsSUFBQWxCLEVBQUFtQixTQUFBbU8sTUFBQSwrQkFFQXhhLEtBQUEzRCxJQUFBQSxFQUNBMkQsS0FBQTROLG1CQUNBLENBQUEsRUFBQTVOLEtBQUE0TixzQkFEQSxDQUFBLEVBQUEsR0FFQSxLQUFBLEdBQ0FlLEVBQUE1QyxFQUFBN0IsVUFFQTdOLElBQUFBLEVBQUFvTCxRQUFBLEtBQUEsRUFBQSxJQUFBLEtBQUEsZ0JBQUE4VyxtQkFBQTVQLElBRUE1QyxFQUFBOUIsTUFBQSxFQUNBLEtBQUEsRUFBQSxNQUFBLENBQUEsRUFBQSxJQUFBOUUsUUFBQSxTQUFBbUUsRUFBQWxFLEdBQ0EsSUFXQW9aLEVBQ0FDLEVBWkFDLEdBQUEsRUFDQSxHQUFBNVMsSUFBQVgsRUFBQWEsZUFBQXVRLEtBQUEsQ0FNQWtDLEVBREE5WCxFQUFBOEUsU0FBQTRGLFdBQUExSyxFQUFBOEUsU0FBQWtULFlBQ0EsSUFBQWpaLEVBQUFrWix1QkFBQXZpQixFQUFBLENBQUF3aUIsaUJBQUEsS0FJQUwsRUFBQTlZLEVBQUFILFdBQUFDLGdCQUFBbkosR0FDQSxJQUFBcUosRUFBQWtaLHVCQUFBdmlCLEVBQUEsQ0FBQXdpQixpQkFBQSxFQUFBblEsUUFBQSxDQUFBb1EsT0FBQU4sTUFFQSxJQUNBQyxFQUFBTSxVQUFBLFNBQUExa0IsR0FDQSxHQUFBcUwsRUFBQWdMLFVBQ0EsSUFDQWhMLEVBQUFELE9BQUEyRyxJQUFBbEIsRUFBQW1CLFNBQUFtTyxNQUFBLGtDQUFBN1QsRUFBQTRXLGNBQUFsakIsRUFBQThNLEtBQUF6QixFQUFBMkssbUJBQUEsS0FDQTNLLEVBQUFnTCxVQUFBclcsRUFBQThNLE1BRUEsTUFBQXRKLEdBRUEsWUFEQTZILEVBQUFzWixNQUFBbmhCLEtBS0E0Z0IsRUFBQVEsUUFBQSxTQUFBNWtCLEdBQ0EsSUFBQXdELEVBQUEsSUFBQTlDLE1BQUFWLEVBQUE4TSxNQUFBLGtCQUNBdVgsRUFDQWhaLEVBQUFzWixNQUFBbmhCLEdBR0F1SCxFQUFBdkgsSUFHQTRnQixFQUFBUyxPQUFBLFdBQ0F4WixFQUFBRCxPQUFBMkcsSUFBQWxCLEVBQUFtQixTQUFBNEUsWUFBQSxvQkFBQXZMLEVBQUFySixLQUNBcUosRUFBQStZLFlBQUFBLEVBQ0FDLEdBQUEsRUFDQXBWLEtBR0EsTUFBQWpQLEdBRUEsWUFEQStLLEVBQUEvSyxTQTFDQStLLEVBQUEsSUFBQXJLLE1BQUEsdUZBa0RBeVYsRUFBQWxOLFVBQUF5QixLQUFBLFNBQUFvQyxHQUNBLE9BQUE4QixFQUFBakosVUFBQSxPQUFBLEVBQUEsV0FDQSxPQUFBNkosRUFBQTdKLEtBQUEsU0FBQStMLEdBQ0EsT0FBQS9MLEtBQUF5ZSxZQUdBLENBQUEsRUFBQTlYLEVBQUF3TixZQUFBblUsS0FBQXlGLE9BQUEsTUFBQXpGLEtBQUF1RixXQUFBdkYsS0FBQTNELElBQUEyRCxLQUFBNE4sbUJBQUF6RyxFQUFBbkgsS0FBQXFRLG9CQUZBLENBQUEsRUFBQWxMLFFBQUFDLE9BQUEsSUFBQXJLLE1BQUEsdURBTUF5VixFQUFBbE4sVUFBQXlKLEtBQUEsV0FFQSxPQURBL00sS0FBQWdmLFFBQ0E3WixRQUFBbUUsV0FFQWtILEVBQUFsTixVQUFBMGIsTUFBQSxTQUFBM2tCLEdBQ0EyRixLQUFBeWUsY0FDQXplLEtBQUF5ZSxZQUFBTyxRQUNBaGYsS0FBQXllLGlCQUFBclksRUFDQXBHLEtBQUEyUSxTQUNBM1EsS0FBQTJRLFFBQUF0VyxLQUlBbVcsR0ExR0EsU0FBQUEsRUFBQWpMLEVBQUFxSSxFQUFBbkksRUFBQTRLLEVBQUF1TyxHQUNBNWUsS0FBQXVGLFdBQUFBLEVBQ0F2RixLQUFBNE4sbUJBQUFBLEVBQ0E1TixLQUFBeUYsT0FBQUEsRUFDQXpGLEtBQUFxUSxrQkFBQUEsRUFDQXJRLEtBQUE0ZSx1QkFBQUEsRUFDQTVlLEtBQUEwUSxVQUFBLEtBQ0ExUSxLQUFBMlEsUUFBQSxLQXFHQXpWLEVBQUFzViwwQkFBQUEsRyxrRkNySkFyTixPQUFBQyxlQUFBbEksRUFBQSxhQUFBLENBQUErQyxPQUFBLElBQ0EsSUFBQTBJLEVBQUEvTCxFQUFBLFdBRUEyYSxHQUlBQSxFQUFBalMsVUFBQW1HLEtBQUEsU0FBQWdKLEdBQ0EsSUFBQSxJQUFBNVYsRUFBQSxFQUFBa1AsRUFBQS9MLEtBQUFtZixVQUFBdGlCLEVBQUFrUCxFQUFBM1EsT0FBQXlCLElBQ0FrUCxFQUFBbFAsR0FDQTRNLEtBQUFnSixJQUdBOEMsRUFBQWpTLFVBQUF6RixNQUFBLFNBQUFGLEdBQ0EsSUFBQSxJQUFBZCxFQUFBLEVBQUFrUCxFQUFBL0wsS0FBQW1mLFVBQUF0aUIsRUFBQWtQLEVBQUEzUSxPQUFBeUIsSUFBQSxDQUNBLElBQUF1aUIsRUFBQXJULEVBQUFsUCxHQUNBdWlCLEVBQUF2aEIsT0FDQXVoQixFQUFBdmhCLE1BQUFGLEtBSUE0WCxFQUFBalMsVUFBQTJTLFNBQUEsV0FDQSxJQUFBLElBQUFwWixFQUFBLEVBQUFrUCxFQUFBL0wsS0FBQW1mLFVBQUF0aUIsRUFBQWtQLEVBQUEzUSxPQUFBeUIsSUFBQSxDQUNBLElBQUF1aUIsRUFBQXJULEVBQUFsUCxHQUNBdWlCLEVBQUFuSixVQUNBbUosRUFBQW5KLGFBSUFWLEVBQUFqUyxVQUFBbVcsVUFBQSxTQUFBMkYsR0FFQSxPQURBcGYsS0FBQW1mLFVBQUFwVSxLQUFBcVUsR0FDQSxJQUFBelksRUFBQTBZLG9CQUFBcmYsS0FBQW9mLElBRUE3SixHQTdCQSxTQUFBQSxJQUNBdlYsS0FBQW1mLFVBQUEsR0E4QkFqa0IsRUFBQXFhLFFBQUFBLEcsaURDbkNBcFMsT0FBQUMsZUFBQWxJLEVBQUEsYUFBQSxDQUFBK0MsT0FBQSxJQUdBLElBQUE4SSxHQUdBQSxFQUFBQyxNQUFBLFNBQUFzWSxHQUNBLE1BQUEsR0FBQUEsRUFBQXZZLEVBQUFzQixpQkFFQXRCLEVBQUFwSyxNQUFBLFNBQUFxZixHQUNBLEdBQUFBLEVBQUFBLEVBQUE1Z0IsT0FBQSxLQUFBMkwsRUFBQXNCLGdCQUNBLE1BQUEsSUFBQXROLE1BQUEsMEJBRUEsSUFBQXdCLEVBQUF5ZixFQUFBdUQsTUFBQXhZLEVBQUFzQixpQkFFQSxPQURBOUwsRUFBQXVPLE1BQ0F2TyxHQUVBd0ssRUFBQVcsb0JBQUEsR0FDQVgsRUFBQXNCLGdCQUFBUixPQUFBQyxhQUFBZixFQUFBVyxxQkFDQVgsR0FmQSxTQUFBQSxLQWlCQTdMLEVBQUE2TCxrQkFBQUEsRyxxQ0NyQkEsSUFBQWtDLEVBQUFqSixNQUFBQSxLQUFBaUosV0FBQSxTQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxHQUNBLE9BQUEsSUFBQUQsRUFBQUEsR0FBQWpFLFNBQUEsU0FBQW1FLEVBQUFsRSxHQUNBLFNBQUFtRSxFQUFBdEwsR0FBQSxJQUFBdUwsRUFBQUgsRUFBQUksS0FBQXhMLElBQUEsTUFBQTVELEdBQUErSyxFQUFBL0ssSUFDQSxTQUFBcVAsRUFBQXpMLEdBQUEsSUFBQXVMLEVBQUFILEVBQUEsTUFBQXBMLElBQUEsTUFBQTVELEdBQUErSyxFQUFBL0ssSUFDQSxTQUFBbVAsRUFBQUcsR0FBQUEsRUFBQUMsS0FBQU4sRUFBQUssRUFBQTFMLE9BQUEsSUFBQW1MLEVBQUEsU0FBQUUsR0FBQUEsRUFBQUssRUFBQTFMLFNBQUFQLEtBQUE2TCxFQUFBRyxHQUNBRixHQUFBSCxFQUFBQSxFQUFBdEIsTUFBQW1CLEVBQUFDLEdBQUEsS0FBQU0sV0FHQUksRUFBQTdKLE1BQUFBLEtBQUE2SixhQUFBLFNBQUFYLEVBQUFZLEdBQ0EsSUFBQXBQLEVBQUFxUCxFQUFBeFAsRUFBQXlQLEVBQUEsQ0FBQUMsTUFBQSxFQUFBQyxLQUFBLFdBQUEsR0FBQSxFQUFBM1AsRUFBQSxHQUFBLE1BQUFBLEVBQUEsR0FBQSxPQUFBQSxFQUFBLElBQUE0UCxLQUFBLEdBQUFDLElBQUEsSUFDQUMsRUFBQSxDQUFBWixLQUFBYSxFQUFBLEdBQUFDLE1BQUFELEVBQUEsR0FBQUUsT0FBQUYsRUFBQSxJQUFBLE1BQUEsbUJBQUFHLFNBQUFKLEVBQUFJLE9BQUFDLFVBQUEsV0FBQSxPQUFBMUssT0FBQXFLLEVBQ0EsU0FBQUMsRUFBQWhRLEdBQUEsT0FBQSxTQUFBcVEsR0FBQSxPQUNBLFNBQUFDLEdBQ0EsR0FBQWxRLEVBQUEsTUFBQSxJQUFBbVEsVUFBQSxtQ0FDQSxLQUFBYixHQUFBLElBQ0EsR0FBQXRQLEVBQUEsRUFBQXFQLElBQUF4UCxFQUFBLEVBQUFxUSxFQUFBLEdBQUFiLEVBQUEsT0FBQWEsRUFBQSxHQUFBYixFQUFBLFNBQUF4UCxFQUFBd1AsRUFBQSxTQUFBeFAsRUFBQVksS0FBQTRPLEdBQUEsR0FBQUEsRUFBQU4sU0FBQWxQLEVBQUFBLEVBQUFZLEtBQUE0TyxFQUFBYSxFQUFBLEtBQUFoQixLQUFBLE9BQUFyUCxFQUVBLE9BREF3UCxFQUFBLEVBQUF4UCxJQUFBcVEsRUFBQSxDQUFBLEVBQUFBLEVBQUEsR0FBQXJRLEVBQUEwRCxRQUNBMk0sRUFBQSxJQUNBLEtBQUEsRUFBQSxLQUFBLEVBQUFyUSxFQUFBcVEsRUFBQSxNQUNBLEtBQUEsRUFBQSxPQUFBWixFQUFBQyxRQUFBLENBQUFoTSxNQUFBMk0sRUFBQSxHQUFBaEIsTUFBQSxHQUNBLEtBQUEsRUFBQUksRUFBQUMsUUFBQUYsRUFBQWEsRUFBQSxHQUFBQSxFQUFBLENBQUEsR0FBQSxTQUNBLEtBQUEsRUFBQUEsRUFBQVosRUFBQUksSUFBQVUsTUFBQWQsRUFBQUcsS0FBQVcsTUFBQSxTQUNBLFFBQ0EsS0FBQXZRLEVBQUEsR0FBQUEsRUFBQXlQLEVBQUFHLE1BQUEvTyxRQUFBYixFQUFBQSxFQUFBYSxPQUFBLE1BQUEsSUFBQXdQLEVBQUEsSUFBQSxJQUFBQSxFQUFBLElBQUEsQ0FBQVosRUFBQSxFQUFBLFNBQ0EsR0FBQSxJQUFBWSxFQUFBLE1BQUFyUSxHQUFBcVEsRUFBQSxHQUFBclEsRUFBQSxJQUFBcVEsRUFBQSxHQUFBclEsRUFBQSxJQUFBLENBQUF5UCxFQUFBQyxNQUFBVyxFQUFBLEdBQUEsTUFDQSxHQUFBLElBQUFBLEVBQUEsSUFBQVosRUFBQUMsTUFBQTFQLEVBQUEsR0FBQSxDQUFBeVAsRUFBQUMsTUFBQTFQLEVBQUEsR0FBQUEsRUFBQXFRLEVBQUEsTUFDQSxHQUFBclEsR0FBQXlQLEVBQUFDLE1BQUExUCxFQUFBLEdBQUEsQ0FBQXlQLEVBQUFDLE1BQUExUCxFQUFBLEdBQUF5UCxFQUFBSSxJQUFBVyxLQUFBSCxHQUFBLE1BQ0FyUSxFQUFBLElBQUF5UCxFQUFBSSxJQUFBVSxNQUNBZCxFQUFBRyxLQUFBVyxNQUFBLFNBRUFGLEVBQUFkLEVBQUEzTyxLQUFBK04sRUFBQWMsR0FDQSxNQUFBM1AsR0FBQXVRLEVBQUEsQ0FBQSxFQUFBdlEsR0FBQTBQLEVBQUEsRUFBQSxRQUFBclAsRUFBQUgsRUFBQSxFQUNBLEdBQUEsRUFBQXFRLEVBQUEsR0FBQSxNQUFBQSxFQUFBLEdBQUEsTUFBQSxDQUFBM00sTUFBQTJNLEVBQUEsR0FBQUEsRUFBQSxRQUFBLEVBQUFoQixNQUFBLEdBckJBSixDQUFBLENBQUFsUCxFQUFBcVEsT0F3QkF4SCxPQUFBQyxlQUFBbEksRUFBQSxhQUFBLENBQUErQyxPQUFBLElBQ0EsSUFBQWlOLEVBQUF0USxFQUFBLGFBQ0F5ZixFQUFBemYsRUFBQSxhQUVBc1IsR0FHQUEsRUFBQXNGLFdBQUEsU0FBQWdPLEVBQUF2TCxHQUNBLEdBQUF1TCxNQUFBQSxFQUNBLE1BQUEsSUFBQXprQixNQUFBLFFBQUFrWixFQUFBLDRCQUdBL0gsRUFBQUMsS0FBQSxTQUFBcVQsRUFBQUMsRUFBQXhMLEdBRUEsS0FBQXVMLEtBQUFDLEdBQ0EsTUFBQSxJQUFBMWtCLE1BQUEsV0FBQWtaLEVBQUEsV0FBQXVMLEVBQUEsTUFHQXRULEdBYkEsU0FBQUEsS0FlQWhSLEVBQUFnUixJQUFBQSxFQUVBLElBQUFULEdBR0F0SSxPQUFBQyxlQUFBcUksRUFBQSxZQUFBLENBQ0EvSCxJQUFBLFdBQ0EsTUFBQSxpQkFBQTNILFFBRUE0SCxZQUFBLEVBQ0FDLGNBQUEsSUFFQVQsT0FBQUMsZUFBQXFJLEVBQUEsY0FBQSxDQUNBL0gsSUFBQSxXQUNBLE1BQUEsaUJBQUFnYyxNQUFBLGtCQUFBQSxNQUVBL2IsWUFBQSxFQUNBQyxjQUFBLElBRUFULE9BQUFDLGVBQUFxSSxFQUFBLFNBQUEsQ0FDQS9ILElBQUEsV0FDQSxPQUFBMUQsS0FBQXFSLFlBQUFyUixLQUFBMmUsYUFFQWhiLFlBQUEsRUFDQUMsY0FBQSxJQUVBNkgsR0F2QkEsU0FBQUEsS0EyQkEsU0FBQThSLEVBQUFwVyxFQUFBd1ksR0FDQSxJQUFBQyxFQUFBLEdBYUEsT0FaQXhZLEVBQUFELElBQ0F5WSxFQUFBLHlCQUFBelksRUFBQWUsV0FDQXlYLElBQ0FDLEdBQUEsZUFBQUMsRUFBQTFZLEdBQUEsTUFHQSxpQkFBQUEsSUFDQXlZLEVBQUEseUJBQUF6WSxFQUFBL0wsT0FDQXVrQixJQUNBQyxHQUFBLGVBQUF6WSxFQUFBLE1BR0F5WSxFQUlBLFNBQUFDLEVBQUExWSxHQUNBLElBQUEyWSxFQUFBLElBQUF2WSxXQUFBSixHQUVBNFksRUFBQSxHQU1BLE9BTEFELEVBQUF2SCxRQUFBLFNBQUF5SCxHQUVBRCxHQUFBLE1BREFDLEVBQUEsR0FBQSxJQUFBLElBQ0FBLEVBQUE5RyxTQUFBLElBQUEsTUFHQTZHLEVBQUF2ZSxPQUFBLEVBQUF1ZSxFQUFBM2tCLE9BQUEsR0FLQSxTQUFBZ00sRUFBQW9ZLEdBQ0EsT0FBQUEsR0FBQSxvQkFBQVMsY0FDQVQsYUFBQVMsYUFFQVQsRUFBQWxiLGFBQUEsZ0JBQUFrYixFQUFBbGIsWUFBQTJQLE1BdENBL1ksRUFBQXVRLFNBQUFBLEVBa0JBdlEsRUFBQXFpQixjQUFBQSxFQWFBcmlCLEVBQUEya0Isa0JBQUFBLEVBU0Eza0IsRUFBQWtNLGNBQUFBLEVBa0NBbE0sRUFBQWlaLFlBaENBLFNBQUExTyxFQUFBeWEsRUFBQTNhLEVBQUFsSixFQUFBdVIsRUFBQXhPLEVBQUFpUixHQUNBLE9BQUFwSCxFQUFBakosVUFBQSxPQUFBLEVBQUEsV0FDQSxJQUFBK0wsRUFBQTJDLEVBQUFDLEVBQUFtTyxFQUFBdlUsRUFDQSxPQUFBc0IsRUFBQTdKLEtBQUEsU0FBQThPLEdBQ0EsT0FBQUEsRUFBQTdFLE9BQ0EsS0FBQSxFQUNBLE9BQUEyRCxFQUNBLENBQUEsRUFBQUEsS0FEQSxDQUFBLEVBQUEsR0FFQSxLQUFBLEdBQ0FlLEVBQUFHLEVBQUE1RSxXQUVBNkIsRUFBQSxJQUNBLGNBQUEsVUFBQTRDLEVBREFELEVBRUEzQyxHQUVBK0MsRUFBQTdFLE1BQUEsRUFDQSxLQUFBLEVBR0EsT0FGQXhFLEVBQUEyRyxJQUFBbEIsRUFBQW1CLFNBQUFtTyxNQUFBLElBQUEwRixFQUFBLDZCQUFBM0MsRUFBQW5lLEVBQUFpUixHQUFBLEtBQ0F5TSxFQUFBMVYsRUFBQWhJLEdBQUEsY0FBQSxPQUNBLENBQUEsRUFBQW1HLEVBQUF3RCxLQUFBMU0sRUFBQSxDQUNBK0MsUUFBQUEsRUFDQXNQLFFBQUFBLEVBQ0FvTyxhQUFBQSxLQUVBLEtBQUEsRUFHQSxPQUZBdlUsRUFBQXVHLEVBQUE1RSxPQUNBekUsRUFBQTJHLElBQUFsQixFQUFBbUIsU0FBQW1PLE1BQUEsSUFBQTBGLEVBQUEsa0RBQUEzWCxFQUFBaEMsV0FBQSxLQUNBLENBQUEsU0FtQkFyTCxFQUFBdVcsYUFaQSxTQUFBaE0sR0FDQSxZQUFBVyxJQUFBWCxFQUNBLElBQUE4VixFQUFBclEsRUFBQW1CLFNBQUE0RSxhQUVBLE9BQUF4TCxFQUNBNFUsRUFBQXdCLFdBQUFDLFNBRUFyVyxFQUFBMkcsSUFDQTNHLEVBRUEsSUFBQThWLEVBQUE5VixJQUlBLElBQUE0WixHQUtBQSxFQUFBL2IsVUFBQTZjLFFBQUEsV0FDQSxJQUFBNU8sRUFBQXZSLEtBQUFzVixRQUFBNkosVUFBQTFYLFFBQUF6SCxLQUFBb2YsV0FDQSxFQUFBN04sR0FDQXZSLEtBQUFzVixRQUFBNkosVUFBQXRJLE9BQUF0RixFQUFBLEdBRUEsSUFBQXZSLEtBQUFzVixRQUFBNkosVUFBQS9qQixRQUFBNEUsS0FBQXNWLFFBQUFFLGdCQUNBeFYsS0FBQXNWLFFBQUFFLGlCQUFBVSxNQUFBLFNBQUFsTSxPQUdBcVYsR0FiQSxTQUFBQSxFQUFBL0osRUFBQThKLEdBQ0FwZixLQUFBc1YsUUFBQUEsRUFDQXRWLEtBQUFvZixTQUFBQSxFQWFBbGtCLEVBQUFta0Isb0JBQUFBLEVBRUEsSUFBQTlELEdBS0FBLEVBQUFqWSxVQUFBOEksSUFBQSxTQUFBZ1AsRUFBQXBkLEdBQ0EsR0FBQW9kLEdBQUFwYixLQUFBb2dCLGdCQUNBLE9BQUFoRixHQUNBLEtBQUFsUSxFQUFBbUIsU0FBQTBPLFNBQ0EsS0FBQTdQLEVBQUFtQixTQUFBdFIsTUFDQWlGLEtBQUFxZ0IsY0FBQXhpQixNQUFBLEtBQUEsSUFBQThDLE1BQUEyZixjQUFBLEtBQUFwVixFQUFBbUIsU0FBQStPLEdBQUEsS0FBQXBkLEdBQ0EsTUFDQSxLQUFBa04sRUFBQW1CLFNBQUE2RSxRQUNBbFIsS0FBQXFnQixjQUFBekYsS0FBQSxLQUFBLElBQUFqYSxNQUFBMmYsY0FBQSxLQUFBcFYsRUFBQW1CLFNBQUErTyxHQUFBLEtBQUFwZCxHQUNBLE1BQ0EsS0FBQWtOLEVBQUFtQixTQUFBNEUsWUFDQWpSLEtBQUFxZ0IsY0FBQTNGLEtBQUEsS0FBQSxJQUFBL1osTUFBQTJmLGNBQUEsS0FBQXBWLEVBQUFtQixTQUFBK08sR0FBQSxLQUFBcGQsR0FDQSxNQUNBLFFBRUFnQyxLQUFBcWdCLGNBQUFqVSxJQUFBLEtBQUEsSUFBQXpMLE1BQUEyZixjQUFBLEtBQUFwVixFQUFBbUIsU0FBQStPLEdBQUEsS0FBQXBkLEtBS0F1ZCxHQXhCQSxTQUFBQSxFQUFBNkUsR0FDQXBnQixLQUFBb2dCLGdCQUFBQSxFQUNBcGdCLEtBQUFxZ0IsY0FBQXppQixRQXdCQTFDLEVBQUFxZ0IsY0FBQUEsRyxrRUMxTkEsSUFBQXRTLEVBQUFqSixNQUFBQSxLQUFBaUosV0FBQSxTQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxHQUNBLE9BQUEsSUFBQUQsRUFBQUEsR0FBQWpFLFNBQUEsU0FBQW1FLEVBQUFsRSxHQUNBLFNBQUFtRSxFQUFBdEwsR0FBQSxJQUFBdUwsRUFBQUgsRUFBQUksS0FBQXhMLElBQUEsTUFBQTVELEdBQUErSyxFQUFBL0ssSUFDQSxTQUFBcVAsRUFBQXpMLEdBQUEsSUFBQXVMLEVBQUFILEVBQUEsTUFBQXBMLElBQUEsTUFBQTVELEdBQUErSyxFQUFBL0ssSUFDQSxTQUFBbVAsRUFBQUcsR0FBQUEsRUFBQUMsS0FBQU4sRUFBQUssRUFBQTFMLE9BQUEsSUFBQW1MLEVBQUEsU0FBQUUsR0FBQUEsRUFBQUssRUFBQTFMLFNBQUFQLEtBQUE2TCxFQUFBRyxHQUNBRixHQUFBSCxFQUFBQSxFQUFBdEIsTUFBQW1CLEVBQUFDLEdBQUEsS0FBQU0sV0FHQUksRUFBQTdKLE1BQUFBLEtBQUE2SixhQUFBLFNBQUFYLEVBQUFZLEdBQ0EsSUFBQXBQLEVBQUFxUCxFQUFBeFAsRUFBQXlQLEVBQUEsQ0FBQUMsTUFBQSxFQUFBQyxLQUFBLFdBQUEsR0FBQSxFQUFBM1AsRUFBQSxHQUFBLE1BQUFBLEVBQUEsR0FBQSxPQUFBQSxFQUFBLElBQUE0UCxLQUFBLEdBQUFDLElBQUEsSUFDQUMsRUFBQSxDQUFBWixLQUFBYSxFQUFBLEdBQUFDLE1BQUFELEVBQUEsR0FBQUUsT0FBQUYsRUFBQSxJQUFBLE1BQUEsbUJBQUFHLFNBQUFKLEVBQUFJLE9BQUFDLFVBQUEsV0FBQSxPQUFBMUssT0FBQXFLLEVBQ0EsU0FBQUMsRUFBQWhRLEdBQUEsT0FBQSxTQUFBcVEsR0FBQSxPQUNBLFNBQUFDLEdBQ0EsR0FBQWxRLEVBQUEsTUFBQSxJQUFBbVEsVUFBQSxtQ0FDQSxLQUFBYixHQUFBLElBQ0EsR0FBQXRQLEVBQUEsRUFBQXFQLElBQUF4UCxFQUFBLEVBQUFxUSxFQUFBLEdBQUFiLEVBQUEsT0FBQWEsRUFBQSxHQUFBYixFQUFBLFNBQUF4UCxFQUFBd1AsRUFBQSxTQUFBeFAsRUFBQVksS0FBQTRPLEdBQUEsR0FBQUEsRUFBQU4sU0FBQWxQLEVBQUFBLEVBQUFZLEtBQUE0TyxFQUFBYSxFQUFBLEtBQUFoQixLQUFBLE9BQUFyUCxFQUVBLE9BREF3UCxFQUFBLEVBQUF4UCxJQUFBcVEsRUFBQSxDQUFBLEVBQUFBLEVBQUEsR0FBQXJRLEVBQUEwRCxRQUNBMk0sRUFBQSxJQUNBLEtBQUEsRUFBQSxLQUFBLEVBQUFyUSxFQUFBcVEsRUFBQSxNQUNBLEtBQUEsRUFBQSxPQUFBWixFQUFBQyxRQUFBLENBQUFoTSxNQUFBMk0sRUFBQSxHQUFBaEIsTUFBQSxHQUNBLEtBQUEsRUFBQUksRUFBQUMsUUFBQUYsRUFBQWEsRUFBQSxHQUFBQSxFQUFBLENBQUEsR0FBQSxTQUNBLEtBQUEsRUFBQUEsRUFBQVosRUFBQUksSUFBQVUsTUFBQWQsRUFBQUcsS0FBQVcsTUFBQSxTQUNBLFFBQ0EsS0FBQXZRLEVBQUEsR0FBQUEsRUFBQXlQLEVBQUFHLE1BQUEvTyxRQUFBYixFQUFBQSxFQUFBYSxPQUFBLE1BQUEsSUFBQXdQLEVBQUEsSUFBQSxJQUFBQSxFQUFBLElBQUEsQ0FBQVosRUFBQSxFQUFBLFNBQ0EsR0FBQSxJQUFBWSxFQUFBLE1BQUFyUSxHQUFBcVEsRUFBQSxHQUFBclEsRUFBQSxJQUFBcVEsRUFBQSxHQUFBclEsRUFBQSxJQUFBLENBQUF5UCxFQUFBQyxNQUFBVyxFQUFBLEdBQUEsTUFDQSxHQUFBLElBQUFBLEVBQUEsSUFBQVosRUFBQUMsTUFBQTFQLEVBQUEsR0FBQSxDQUFBeVAsRUFBQUMsTUFBQTFQLEVBQUEsR0FBQUEsRUFBQXFRLEVBQUEsTUFDQSxHQUFBclEsR0FBQXlQLEVBQUFDLE1BQUExUCxFQUFBLEdBQUEsQ0FBQXlQLEVBQUFDLE1BQUExUCxFQUFBLEdBQUF5UCxFQUFBSSxJQUFBVyxLQUFBSCxHQUFBLE1BQ0FyUSxFQUFBLElBQUF5UCxFQUFBSSxJQUFBVSxNQUNBZCxFQUFBRyxLQUFBVyxNQUFBLFNBRUFGLEVBQUFkLEVBQUEzTyxLQUFBK04sRUFBQWMsR0FDQSxNQUFBM1AsR0FBQXVRLEVBQUEsQ0FBQSxFQUFBdlEsR0FBQTBQLEVBQUEsRUFBQSxRQUFBclAsRUFBQUgsRUFBQSxFQUNBLEdBQUEsRUFBQXFRLEVBQUEsR0FBQSxNQUFBQSxFQUFBLEdBQUEsTUFBQSxDQUFBM00sTUFBQTJNLEVBQUEsR0FBQUEsRUFBQSxRQUFBLEVBQUFoQixNQUFBLEdBckJBSixDQUFBLENBQUFsUCxFQUFBcVEsT0F3QkF4SCxPQUFBQyxlQUFBbEksRUFBQSxhQUFBLENBQUErQyxPQUFBLElBQ0EsSUFBQWlOLEVBQUF0USxFQUFBLGFBQ0F1USxFQUFBdlEsRUFBQSxnQkFDQStMLEVBQUEvTCxFQUFBLFdBRUF3VixHQVVBQSxFQUFBOU0sVUFBQXNOLFFBQUEsU0FBQXZVLEVBQUF5UCxHQUNBLE9BQUE3QyxFQUFBakosVUFBQSxPQUFBLEVBQUEsV0FDQSxJQUFBMk8sRUFDQWpKLEVBQUExRixLQUNBLE9BQUE2SixFQUFBN0osS0FBQSxTQUFBK0wsR0FDQSxPQUFBQSxFQUFBOUIsT0FDQSxLQUFBLEVBS0EsT0FKQXRELEVBQUF1RixJQUFBc0YsV0FBQW5WLEVBQUEsT0FDQXNLLEVBQUF1RixJQUFBc0YsV0FBQTFGLEVBQUEsa0JBQ0FuRixFQUFBdUYsSUFBQUMsS0FBQUwsRUFBQVgsRUFBQWEsZUFBQSxrQkFDQWhNLEtBQUF5RixPQUFBMkcsSUFBQWxCLEVBQUFtQixTQUFBbU8sTUFBQSxzQ0FDQXhhLEtBQUE0TixtQkFDQSxDQUFBLEVBQUE1TixLQUFBNE4sc0JBREEsQ0FBQSxFQUFBLEdBRUEsS0FBQSxHQUNBZSxFQUFBNUMsRUFBQTdCLFVBRUE3TixJQUFBQSxFQUFBb0wsUUFBQSxLQUFBLEVBQUEsSUFBQSxLQUFBLGdCQUFBOFcsbUJBQUE1UCxJQUVBNUMsRUFBQTlCLE1BQUEsRUFDQSxLQUFBLEVBQUEsTUFBQSxDQUFBLEVBQUEsSUFBQTlFLFFBQUEsU0FBQW1FLEVBQUFsRSxHQUVBLElBQUFtYixFQURBbGtCLEVBQUFBLEVBQUEyRixRQUFBLFFBQUEsTUFFQSxJQUFBd2MsRUFBQTlZLEVBQUFILFdBQUFDLGdCQUFBbkosR0FDQXFpQixHQUFBLEVBQ0EvWCxFQUFBOEUsU0FBQUMsUUFBQThTLElBRUErQixFQUFBLElBQUE3YSxFQUFBOGEscUJBQUFua0IsT0FBQStKLEVBQUEsQ0FDQXNJLFFBQUEsQ0FDQW9RLE9BQUEsR0FBQU4sTUFNQStCLEVBRkFBLEdBRUEsSUFBQTdhLEVBQUE4YSxxQkFBQW5rQixHQUVBeVAsSUFBQVgsRUFBQWEsZUFBQUMsU0FDQXNVLEVBQUFFLFdBQUEsZUFHQUYsRUFBQXJCLE9BQUEsU0FBQXdCLEdBQ0FoYixFQUFBRCxPQUFBMkcsSUFBQWxCLEVBQUFtQixTQUFBNEUsWUFBQSwwQkFBQTVVLEVBQUEsS0FDQXFKLEVBQUE2YSxVQUFBQSxFQUNBN0IsR0FBQSxFQUNBcFYsS0FFQWlYLEVBQUF0QixRQUFBLFNBQUFsaEIsR0FDQSxJQUFBRixFQUFBLEtBR0FBLEVBREEsb0JBQUE4aUIsWUFBQTVpQixhQUFBNGlCLFdBQ0E1aUIsRUFBQUYsTUFHQSxJQUFBOUMsTUFBQSwwQ0FFQXFLLEVBQUF2SCxJQUVBMGlCLEVBQUF4QixVQUFBLFNBQUEvZ0IsR0FDQTBILEVBQUFELE9BQUEyRyxJQUFBbEIsRUFBQW1CLFNBQUFtTyxNQUFBLHlDQUFBN1QsRUFBQTRXLGNBQUF2ZixFQUFBbUosS0FBQXpCLEVBQUEySyxtQkFBQSxLQUNBM0ssRUFBQWdMLFdBQ0FoTCxFQUFBZ0wsVUFBQTFTLEVBQUFtSixPQUdBb1osRUFBQTVQLFFBQUEsU0FBQTVTLEdBR0EsSUFPQUYsRUFQQTZnQixFQUNBaFosRUFBQXNaLE1BQUFqaEIsSUFHQUYsRUFBQSxLQUdBQSxFQURBLG9CQUFBOGlCLFlBQUE1aUIsYUFBQTRpQixXQUNBNWlCLEVBQUFGLE1BR0EsSUFBQTlDLE1BQUEsMENBRUFxSyxFQUFBdkgsY0FRQXVTLEVBQUE5TSxVQUFBeUIsS0FBQSxTQUFBb0MsR0FDQSxPQUFBbkgsS0FBQXVnQixXQUFBdmdCLEtBQUF1Z0IsVUFBQUssYUFBQTVnQixLQUFBd2dCLHFCQUFBSyxNQUNBN2dCLEtBQUF5RixPQUFBMkcsSUFBQWxCLEVBQUFtQixTQUFBbU8sTUFBQSx3Q0FBQTdULEVBQUE0VyxjQUFBcFcsRUFBQW5ILEtBQUFxUSxtQkFBQSxLQUNBclEsS0FBQXVnQixVQUFBeGIsS0FBQW9DLEdBQ0FoQyxRQUFBbUUsV0FFQW5FLFFBQUFDLE9BQUEsdUNBRUFnTCxFQUFBOU0sVUFBQXlKLEtBQUEsV0FZQSxPQVhBL00sS0FBQXVnQixZQUVBdmdCLEtBQUF1Z0IsVUFBQTVQLFFBQUEsYUFDQTNRLEtBQUF1Z0IsVUFBQXhCLFVBQUEsYUFDQS9lLEtBQUF1Z0IsVUFBQXRCLFFBQUEsYUFDQWpmLEtBQUF1Z0IsVUFBQXZCLFFBQ0FoZixLQUFBdWdCLGVBQUFuYSxFQUdBcEcsS0FBQWdmLFdBQUE1WSxJQUVBakIsUUFBQW1FLFdBRUE4RyxFQUFBOU0sVUFBQTBiLE1BQUEsU0FBQWpoQixHQUVBaUMsS0FBQXlGLE9BQUEyRyxJQUFBbEIsRUFBQW1CLFNBQUFtTyxNQUFBLHlDQUNBeGEsS0FBQTJRLFdBQ0E1UyxJQUFBLElBQUFBLEVBQUEraUIsVUFBQSxNQUFBL2lCLEVBQUEvQyxLQUlBZ0YsS0FBQTJRLFVBSEEzUSxLQUFBMlEsUUFBQSxJQUFBNVYsTUFBQSxzQ0FBQWdELEVBQUEvQyxLQUFBLEtBQUErQyxFQUFBNlUsT0FBQSxTQU9BeEMsR0FqSUEsU0FBQUEsRUFBQTdLLEVBQUFxSSxFQUFBbkksRUFBQTRLLEVBQUFtUSxHQUNBeGdCLEtBQUF5RixPQUFBQSxFQUNBekYsS0FBQTROLG1CQUFBQSxFQUNBNU4sS0FBQXFRLGtCQUFBQSxFQUNBclEsS0FBQXdnQixxQkFBQUEsRUFDQXhnQixLQUFBdUYsV0FBQUEsRUFDQXZGLEtBQUEwUSxVQUFBLEtBQ0ExUSxLQUFBMlEsUUFBQSxLQTRIQXpWLEVBQUFrVixtQkFBQUEsRyxrRkM1S0EsSUFDQXZNLEVBREFDLEVBQUE5RCxNQUFBQSxLQUFBOEQsWUFDQUQsRUFBQVYsT0FBQVksZ0JBQ0EsQ0FBQUMsVUFBQSxjQUFBQyxPQUFBLFNBQUFDLEVBQUFDLEdBQUFELEVBQUFGLFVBQUFHLElBQ0EsU0FBQUQsRUFBQUMsR0FBQSxJQUFBLElBQUFsSixLQUFBa0osRUFBQUEsRUFBQUMsZUFBQW5KLEtBQUFpSixFQUFBakosR0FBQWtKLEVBQUFsSixLQUNBLFNBQUFpSixFQUFBQyxHQUVBLFNBQUFFLElBQUFyRSxLQUFBc0UsWUFBQUosRUFEQUwsRUFBQUssRUFBQUMsR0FFQUQsRUFBQVosVUFBQSxPQUFBYSxFQUFBaEIsT0FBQW9CLE9BQUFKLElBQUFFLEVBQUFmLFVBQUFhLEVBQUFiLFVBQUEsSUFBQWUsS0FHQWxCLE9BQUFDLGVBQUFsSSxFQUFBLGFBQUEsQ0FBQStDLE9BQUEsSUFDQSxJQUdBdUcsRUFIQUMsRUFBQTdKLEVBQUEsWUFDQThKLEVBQUE5SixFQUFBLGdCQUNBc1EsRUFBQXRRLEVBQUEsYUFDQWdMLEdBQUFwQixFQXFFQUUsRUFBQUksV0FwRUFoQixFQUFBOEIsRUFBQXBCLEdBT0FvQixFQUFBdEMsVUFBQXlCLEtBQUEsU0FBQUMsR0FDQSxJQUFBVSxFQUFBMUYsS0FFQSxPQUFBZ0YsRUFBQUMsYUFBQUQsRUFBQUMsWUFBQUMsUUFDQUMsUUFBQUMsT0FBQSxJQUFBWCxFQUFBWSxZQUVBTCxFQUFBTSxPQUdBTixFQUFBM0ksSUFHQSxJQUFBOEksUUFBQSxTQUFBbUUsRUFBQWxFLEdBQ0EsSUFBQTJiLEVBQUEsSUFBQXBiLGVBQ0FvYixFQUFBQyxLQUFBaGMsRUFBQU0sT0FBQU4sRUFBQTNJLEtBQUEsR0FDQTBrQixFQUFBbEMsaUJBQUEsRUFDQWtDLEVBQUFFLGlCQUFBLG1CQUFBLGtCQUVBRixFQUFBRSxpQkFBQSxlQUFBLDRCQUNBLElBQUF2UyxFQUFBMUosRUFBQTBKLFFBQ0FBLEdBQ0F2TCxPQUFBa1csS0FBQTNLLEdBQ0E2SixRQUFBLFNBQUEySSxHQUNBSCxFQUFBRSxpQkFBQUMsRUFBQXhTLEVBQUF3UyxNQUdBbGMsRUFBQThYLGVBQ0FpRSxFQUFBakUsYUFBQTlYLEVBQUE4WCxjQUVBOVgsRUFBQUMsY0FDQUQsRUFBQUMsWUFBQXhCLFFBQUEsV0FDQXNkLEVBQUF4ZCxRQUNBNkIsRUFBQSxJQUFBWCxFQUFBWSxjQUdBTCxFQUFBZ1ksVUFDQStELEVBQUEvRCxRQUFBaFksRUFBQWdZLFNBRUErRCxFQUFBSSxPQUFBLFdBQ0FuYyxFQUFBQyxjQUNBRCxFQUFBQyxZQUFBeEIsUUFBQSxNQUVBLEtBQUFzZCxFQUFBSyxRQUFBTCxFQUFBSyxPQUFBLElBQ0E5WCxFQUFBLElBQUE1RSxFQUFBa0UsYUFBQW1ZLEVBQUFLLE9BQUFMLEVBQUFsWSxXQUFBa1ksRUFBQXhZLFVBQUF3WSxFQUFBTSxlQUdBamMsRUFBQSxJQUFBWCxFQUFBNEIsVUFBQTBhLEVBQUFsWSxXQUFBa1ksRUFBQUssVUFHQUwsRUFBQTlCLFFBQUEsV0FDQXZaLEVBQUFELE9BQUEyRyxJQUFBbEIsRUFBQW1CLFNBQUE2RSxRQUFBLDRCQUFBNlAsRUFBQUssT0FBQSxLQUFBTCxFQUFBbFksV0FBQSxLQUNBekQsRUFBQSxJQUFBWCxFQUFBNEIsVUFBQTBhLEVBQUFsWSxXQUFBa1ksRUFBQUssVUFFQUwsRUFBQU8sVUFBQSxXQUNBNWIsRUFBQUQsT0FBQTJHLElBQUFsQixFQUFBbUIsU0FBQTZFLFFBQUEsOEJBQ0E5TCxFQUFBLElBQUFYLEVBQUFnQyxlQUVBc2EsRUFBQWhjLEtBQUFDLEVBQUE1RixTQUFBLE1BL0NBK0YsUUFBQUMsT0FBQSxJQUFBckssTUFBQSxvQkFIQW9LLFFBQUFDLE9BQUEsSUFBQXJLLE1BQUEsd0JBcURBNkssR0FsRUEsU0FBQUEsRUFBQUgsR0FDQSxJQUFBQyxFQUFBbEIsRUFBQXJKLEtBQUE2RSxPQUFBQSxLQUVBLE9BREEwRixFQUFBRCxPQUFBQSxFQUNBQyxFQWlFQXhLLEVBQUEwSyxjQUFBQSxHLGlGQ3BGQXpDLE9BQUFDLGVBQUFsSSxFQUFBLGFBQUEsQ0FBQStDLE9BQUEsSUFHQS9DLEVBQUFxbUIsUUFBQSxRQUNBLElBQUE5YyxFQUFBN0osRUFBQSxZQUNBTSxFQUFBbUssV0FBQVosRUFBQVksV0FDQW5LLEVBQUFtTCxVQUFBNUIsRUFBQTRCLFVBQ0FuTCxFQUFBdUwsYUFBQWhDLEVBQUFnQyxhQUNBLElBQUEvQixFQUFBOUosRUFBQSxnQkFDQU0sRUFBQTRKLFdBQUFKLEVBQUFJLFdBQ0E1SixFQUFBME4sYUFBQWxFLEVBQUFrRSxhQUNBLElBQUFxQyxFQUFBclEsRUFBQSx1QkFDQU0sRUFBQTJKLGtCQUFBb0csRUFBQXBHLGtCQUNBLElBQUFzVixFQUFBdmYsRUFBQSxtQkFDQU0sRUFBQWdZLGNBQUFpSCxFQUFBakgsY0FDQWhZLEVBQUE0WCxtQkFBQXFILEVBQUFySCxtQkFDQSxJQUFBME8sRUFBQTVtQixFQUFBLDBCQUNBTSxFQUFBa0MscUJBQUFva0IsRUFBQXBrQixxQkFDQSxJQUFBNFYsRUFBQXBZLEVBQUEsa0JBQ0FNLEVBQUE2YSxZQUFBL0MsRUFBQStDLFlBQ0EsSUFBQTdLLEVBQUF0USxFQUFBLGFBQ0FNLEVBQUFtUixTQUFBbkIsRUFBQW1CLFNBQ0EsSUFBQWxCLEVBQUF2USxFQUFBLGdCQUNBTSxFQUFBNFMsa0JBQUEzQyxFQUFBMkMsa0JBQ0E1UyxFQUFBOFEsZUFBQWIsRUFBQWEsZUFDQSxJQUFBcU8sRUFBQXpmLEVBQUEsYUFDQU0sRUFBQTJnQixXQUFBeEIsRUFBQXdCLFdBQ0EsSUFBQXpCLEVBQUF4ZixFQUFBLHFCQUNBTSxFQUFBNmdCLGdCQUFBM0IsRUFBQTJCLGdCQUNBLElBQUE5SSxFQUFBclksRUFBQSxhQUNBTSxFQUFBcWEsUUFBQXRDLEVBQUFzQyxTLGlRQ3pCQSxTQUFBa00sRUFBQUMsR0FDQSxJQUFBQyxFQUFBRCxFQUFBRCx3QkFDQSxNQUFBLENBQ0FHLE1BQUFELEVBQUFDLE1BQ0FDLE9BQUFGLEVBQUFFLE9BQ0FDLElBQUFILEVBQUFHLElBQ0FDLE1BQUFKLEVBQUFJLE1BQ0FDLE9BQUFMLEVBQUFLLE9BQ0FDLEtBQUFOLEVBQUFNLEtBQ0FDLEVBQUFQLEVBQUFNLEtBQ0FsWSxFQUFBNFgsRUFBQUcsS0FPQSxTQUFBSyxFQUFBQyxHQUNBLEdBQUEsb0JBQUFBLEVBQUFsSixXQUtBLE9BQUFrSixFQUpBLElBQUFDLEVBQUFELEVBQUFDLGNBQ0EsT0FBQUEsRUFBQUEsRUFBQUMsWUFBQXZtQixPQU1BLFNBQUF3bUIsRUFBQUgsR0FDQSxJQUFBSSxFQUFBTCxFQUFBQyxHQUdBLE1BQUEsQ0FDQUssV0FIQUQsRUFBQUUsWUFJQUMsVUFIQUgsRUFBQUksYUFVQSxTQUFBQyxFQUFBVCxHQUVBLE9BQUFBLGFBREFELEVBQUFDLEdBQUFVLFNBQ0FWLGFBQUFVLFFBTUEsU0FBQUMsRUFBQVgsR0FFQSxPQUFBQSxhQURBRCxFQUFBQyxHQUFBWSxhQUNBWixhQUFBWSxZQWtCQSxTQUFBQyxFQUFBdkIsR0FDQSxPQUFBQSxHQUFBQSxFQUFBd0IsVUFBQSxJQUFBMU0sY0FBQSxLQUdBLFNBQUEyTSxFQUFBekIsR0FFQSxPQUFBbUIsRUFBQW5CLEdBQUFBLEVBQUFXLGNBQUFYLEVBQUEvbEIsVUFBQXluQixnQkFHQSxTQUFBQyxFQUFBM0IsR0FRQSxPQUFBRCxFQUFBMEIsRUFBQXpCLElBQUFPLEtBQUFNLEVBQUFiLEdBQUFlLFdBR0EsU0FBQTlnQixFQUFBK2YsR0FDQSxPQUFBUyxFQUFBVCxHQUFBL2YsaUJBQUErZixHQUdBLFNBQUE0QixFQUFBNUIsR0FFQSxJQUFBNkIsRUFBQTVoQixFQUFBK2YsR0FDQThCLEVBQUFELEVBQUFDLFNBQ0FDLEVBQUFGLEVBQUFFLFVBQ0FDLEVBQUFILEVBQUFHLFVBRUEsTUFBQSw2QkFBQTNqQixLQUFBeWpCLEVBQUFFLEVBQUFELEdBS0EsU0FBQUUsRUFBQUMsRUFBQUMsRUFBQUMsUUFDQSxJQUFBQSxJQUNBQSxHQUFBLEdBR0EsSUFqREExQixFQVBBVixFQXdEQTBCLEVBQUFELEVBQUFVLEdBQ0FsQyxFQUFBRixFQUFBbUMsR0FDQUcsRUFBQSxDQUNBdEIsV0FBQSxFQUNBRSxVQUFBLEdBRUFxQixFQUFBLENBQ0E5QixFQUFBLEVBQ0FuWSxFQUFBLEdBa0JBLE9BZkErWixJQUNBLFNBQUFiLEVBQUFZLEtBQ0FQLEVBQUFGLEtBQ0FXLEdBL0RBM0IsRUErREF5QixLQTlEQTFCLEVBQUFDLElBQUFXLEVBQUFYLEdBUEEsQ0FDQUssWUFGQWYsRUFXQVUsR0FUQUssV0FDQUUsVUFBQWpCLEVBQUFpQixXQU1BSixFQUFBSCxJQWdFQVcsRUFBQWMsS0FDQUcsRUFBQXZDLEVBQUFvQyxJQUNBM0IsR0FBQTJCLEVBQUFJLFdBQ0FELEVBQUFqYSxHQUFBOFosRUFBQUssV0FDQWQsSUFDQVksRUFBQTlCLEVBQUFtQixFQUFBRCxLQUlBLENBQ0FsQixFQUFBUCxFQUFBTSxLQUFBOEIsRUFBQXRCLFdBQUF1QixFQUFBOUIsRUFDQW5ZLEVBQUE0WCxFQUFBRyxJQUFBaUMsRUFBQXBCLFVBQUFxQixFQUFBamEsRUFDQTZYLE1BQUFELEVBQUFDLE1BQ0FDLE9BQUFGLEVBQUFFLFFBTUEsU0FBQXNDLEdBQUF6QyxHQUNBLE1BQUEsQ0FDQVEsRUFBQVIsRUFBQTBDLFdBQ0FyYSxFQUFBMlgsRUFBQTJDLFVBQ0F6QyxNQUFBRixFQUFBNEMsWUFDQXpDLE9BQUFILEVBQUE2QyxjQUlBLFNBQUFDLEVBQUE5QyxHQUNBLE1BQUEsU0FBQXVCLEVBQUF2QixHQUNBQSxFQUlBQSxFQUFBK0MsY0FDQS9DLEVBQUFnRCxZQUVBaEQsRUFBQWlELE1BRUF4QixFQUFBekIsR0FrQkEsU0FBQWtELEVBQUFsRCxFQUFBeGUsUUFDQSxJQUFBQSxJQUNBQSxFQUFBLElBR0EsSUFBQTJoQixFQWxCQSxTQUFBQyxFQUFBMUMsR0FDQSxPQUFBLEdBQUEsQ0FBQSxPQUFBLE9BQUEsYUFBQTNhLFFBQUF3YixFQUFBYixJQUVBQSxFQUFBQyxjQUFBdlksS0FHQWlaLEVBQUFYLElBQUFrQixFQUFBbEIsR0FDQUEsRUFHQTBDLEVBQUFOLEVBQUFwQyxJQVFBMEMsQ0FBQXBELEdBQ0FxRCxFQUFBLFNBQUE5QixFQUFBNEIsR0FDQXJDLEVBQUFMLEVBQUEwQyxHQUNBOWpCLEVBQUFna0IsRUFBQSxDQUFBdkMsR0FBQXpsQixPQUFBeWxCLEVBQUF3QyxnQkFBQSxHQUFBMUIsRUFBQXVCLEdBQUFBLEVBQUEsSUFBQUEsRUFDQUksRUFBQS9oQixFQUFBbkcsT0FBQWdFLEdBQ0EsT0FBQWdrQixFQUFBRSxFQUNBQSxFQUFBbG9CLE9BQUE2bkIsRUFBQUosRUFBQXpqQixLQU9BLFNBQUFta0IsRUFBQXhELEdBQ0EsT0FBQXFCLEVBQUFyQixJQUNBLFVBQUEvZixFQUFBK2YsR0FBQXlELFNBSUF6RCxFQUFBbUMsYUFIQSxLQU1BLFNBQUF1QixHQUFBMUQsR0FJQSxJQUhBLElBQUEzbEIsRUFBQW9tQixFQUFBVCxHQUNBbUMsRUFBQXFCLEVBQUF4RCxHQUVBbUMsR0FoQkEsR0FBQSxDQUFBLFFBQUEsS0FBQSxNQUFBcGMsUUFBQXdiLEVBZ0JBWSxLQUNBQSxFQUFBcUIsRUFBQXJCLEdBR0EsUUFBQUEsR0FBQSxTQUFBWixFQUFBWSxJQUFBLFdBQUFsaUIsRUFBQWtpQixHQUFBc0IsV0FJQXRCLEdBSEE5bkIsRUE1TkFvSCxPQUFBQyxlQUFBbEksRUFBQSxhQUFBLENBQUErQyxPQUFBLElBa09BLElBQUE2akIsR0FBQSxNQUNBRSxHQUFBLFNBQ0FELEdBQUEsUUFDQUUsR0FBQSxPQUNBb0QsRUFBQSxPQUNBQyxFQUFBLENBQUF4RCxHQUFBRSxHQUFBRCxHQUFBRSxJQUNBeGtCLEdBQUEsUUFDQThuQixFQUFBLE1BQ0FDLEVBQUEsa0JBQ0FDLEVBQUEsV0FDQUMsRUFBQSxTQUNBQyxFQUFBLFlBQ0FDLEVBQUFOLEVBQUFoVCxPQUFBLFNBQUF1VCxFQUFBbGpCLEdBQ0EsT0FBQWtqQixFQUFBOW9CLE9BQUEsQ0FBQTRGLEVBQUEsSUFBQWxGLEdBQUFrRixFQUFBLElBQUE0aUIsS0FDQSxJQUNBTyxFQUFBLEdBQUEvb0IsT0FBQXVvQixFQUFBLENBQUFELElBQUEvUyxPQUFBLFNBQUF1VCxFQUFBbGpCLEdBQ0EsT0FBQWtqQixFQUFBOW9CLE9BQUEsQ0FBQTRGLEVBQUFBLEVBQUEsSUFBQWxGLEdBQUFrRixFQUFBLElBQUE0aUIsS0FDQSxJQWFBUSxFQUFBLENBWEEsYUFDQSxPQUNBLFlBRUEsYUFDQSxPQUNBLFlBRUEsY0FDQSxRQUNBLGNBR0EsU0FBQUMsRUFBQUMsR0FDQSxJQUFBbFYsRUFBQSxJQUFBbVYsSUFDQUMsRUFBQSxJQUFBQyxJQUNBemMsRUFBQSxHQTBCQSxPQXpCQXNjLEVBQUExTixRQUFBLFNBQUE4TixHQUNBdFYsRUFBQTJCLElBQUEyVCxFQUFBcFMsS0FBQW9TLEtBa0JBSixFQUFBMU4sUUFBQSxTQUFBOE4sR0FDQUYsRUFBQUcsSUFBQUQsRUFBQXBTLFFBaEJBLFNBQUFzUyxFQUFBRixHQUNBRixFQUFBaHBCLElBQUFrcEIsRUFBQXBTLE1BQ0EsR0FBQWxYLE9BQUFzcEIsRUFBQUcsVUFBQSxHQUFBSCxFQUFBSSxrQkFBQSxJQUNBbE8sUUFBQSxTQUFBbU8sR0FDQSxJQUNBQyxFQURBUixFQUFBRyxJQUFBSSxLQUNBQyxFQUFBNVYsRUFBQXJOLElBQUFnakIsS0FHQUgsRUFBQUksS0FJQWhkLEVBQUFvQixLQUFBc2IsR0FNQUUsQ0FBQUYsS0FHQTFjLEVBOEJBLFNBQUFpZCxFQUFBN0csR0FDQSxJQUFBLElBQUE4RyxFQUFBbGUsVUFBQXZOLE9BQUEyWixFQUFBLElBQUE5USxNQUFBLEVBQUE0aUIsRUFBQUEsRUFBQSxFQUFBLEdBQUFDLEVBQUEsRUFBQUEsRUFBQUQsRUFBQUMsSUFDQS9SLEVBQUErUixFQUFBLEdBQUFuZSxVQUFBbWUsR0FHQSxNQUFBLEdBQUEvcEIsT0FBQWdZLEdBQUF6QyxPQUFBLFNBQUFyWCxFQUFBTixHQUNBLE9BQUFNLEVBQUErRyxRQUFBLEtBQUFySCxJQUNBb2xCLEdBR0EsSUFBQWdILEVBQUEsZ0ZBQ0FDLEVBQUEsMEVBQ0FDLEVBQUEsQ0FBQSxPQUFBLFVBQUEsUUFBQSxLQUFBLFNBQUEsV0FBQSxXQXFGQSxTQUFBQyxHQUFBdmtCLEdBQ0EsT0FBQUEsRUFBQTRjLE1BQUEsS0FBQSxHQWtCQSxJQUFBNEgsRUFBQSwrR0FFQUMsRUFBQSxDQUNBemtCLFVBQUEsU0FDQXNqQixVQUFBLEdBQ0FvQixTQUFBLFlBR0EsU0FBQUMsSUFDQSxJQUFBLElBQUFULEVBQUFsZSxVQUFBdk4sT0FBQTJaLEVBQUEsSUFBQTlRLE1BQUE0aUIsR0FBQUMsRUFBQSxFQUFBQSxFQUFBRCxFQUFBQyxJQUNBL1IsRUFBQStSLEdBQUFuZSxVQUFBbWUsR0FHQSxPQUFBL1IsRUFBQXdTLEtBQUEsU0FBQTdGLEdBQ0EsUUFBQUEsR0FBQSxtQkFBQUEsRUFBQUQseUJBSUEsU0FBQStGLEVBQUFDLFFBQ0EsSUFBQUEsSUFDQUEsRUFBQSxJQUdBLElBQ0FDLEVBREFELEVBQ0FFLGlCQUNBQSxPQUFBLElBQUFELEVBQUEsR0FBQUEsRUFDQUUsRUFIQUgsRUFHQUksZUFDQUEsT0FBQSxJQUFBRCxFQUFBUixFQUFBUSxFQUNBLE9BQUEsU0FBQWpDLEVBQUFELEVBQUE1YyxRQUNBLElBQUFBLElBQ0FBLEVBQUErZSxHQUdBLElBcktBQyxFQUNBQyxFQW9LQUMsRUFBQSxDQUNBcmxCLFVBQUEsU0FDQXNsQixpQkFBQSxHQUNBbmYsUUFBQTNGLE9BQUFzRixPQUFBLEdBQUEyZSxFQUFBLEdBQUFTLEdBQ0FLLGNBQUEsR0FDQUMsU0FBQSxDQUNBeEMsVUFBQUEsRUFDQUQsT0FBQUEsR0FFQTBDLFdBQUEsR0FDQUMsT0FBQSxJQUVBQyxFQUFBLEdBQ0FDLEdBQUEsRUFDQXpNLEVBQUEsQ0FDQWtNLE1BQUFBLEVBQ0FRLFdBQUEsU0FBQTFmLEdBQ0EyZixJQUNBVCxFQUFBbGYsUUFBQTNGLE9BQUFzRixPQUFBLEdBQUFvZixFQUFBLEdBQUFHLEVBQUFsZixRQUFBLEdBQUFBLEdBQ0FrZixFQUFBVSxjQUFBLENBQ0EvQyxVQUFBOUMsRUFBQThDLEdBQUFmLEVBQUFlLEdBQUFBLEVBQUFnRCxlQUFBL0QsRUFBQWUsRUFBQWdELGdCQUFBLEdBQ0FqRCxPQUFBZCxFQUFBYyxJQUlBLElBek1BTyxFQUVBZ0MsRUE4SEFoQyxFQUNBMkMsRUFnRkEzQyxFQWlCQTFDLEVBMUxBMEMsRUF3RUE0QyxFQUFBZixFQUNBZ0IsRUF3RkFiLEdBekVBaEMsRUF5RUEsR0FBQWxwQixPQUFBNHFCLEVBQUFLLEVBQUFsZixRQUFBbWQsV0F4RUEyQyxFQUFBM0MsRUFBQTNULE9BQUEsU0FBQXNXLEVBQUFHLEdBQ0EsSUFBQUMsRUFBQUosRUFBQUcsRUFBQTlVLE1BS0EsT0FKQTJVLEVBQUFHLEVBQUE5VSxNQUFBK1UsRUFBQTdsQixPQUFBc0YsT0FBQSxHQUFBdWdCLEVBQUEsR0FBQUQsRUFBQSxDQUNBamdCLFFBQUEzRixPQUFBc0YsT0FBQSxHQUFBdWdCLEVBQUFsZ0IsUUFBQSxHQUFBaWdCLEVBQUFqZ0IsU0FDQTNCLEtBQUFoRSxPQUFBc0YsT0FBQSxHQUFBdWdCLEVBQUE3aEIsS0FBQSxHQUFBNGhCLEVBQUE1aEIsUUFDQTRoQixFQUNBSCxHQUNBLElBeElBM0MsRUEwSUE5aUIsT0FBQWtXLEtBQUF1UCxHQUFBN1gsSUFBQSxTQUFBdUksR0FDQSxPQUFBc1AsRUFBQXRQLEtBeklBMk8sRUFBQWpDLEVBQUFDLEdBRUFGLEVBQUF6VCxPQUFBLFNBQUF1VCxFQUFBb0QsR0FDQSxPQUFBcEQsRUFBQTlvQixPQUFBa3JCLEVBQUFpQixPQUFBLFNBQUE3QyxHQUNBLE9BQUFBLEVBQUE0QyxRQUFBQSxNQUVBLEtBME9BLE9BdkNBakIsRUFBQUMsaUJBQUFBLEVBQUFpQixPQUFBLFNBQUExUSxHQUNBLE9BQUFBLEVBQUEyUSxVQUlBLGVBQUFDLEVBQUFDLElBQUFDLFdBaEdBVCxFQWlHQSxHQUFBOXJCLE9BQUFrckIsRUFBQUQsRUFBQWxmLFFBQUFtZCxXQWpHQTZCLEVBaUdBLFNBQUF5QixHQUVBLE9BREFBLEVBQUF0VixNQWpHQTZVLEVBQUEsSUFBQTFDLElBZ0dBSCxFQS9GQTRDLEVBQUFLLE9BQUEsU0FBQXpXLEdBQ0EsSUFBQStXLEVBQUExQixFQUFBclYsR0FFQSxJQUFBcVcsRUFBQXhDLElBQUFrRCxHQUVBLE9BREFWLEVBQUEzckIsSUFBQXFzQixJQUNBLEtBL0VBdkQsRUE2S0FBLEdBNUtBMU4sUUFBQSxTQUFBOE4sR0FDQWxqQixPQUFBa1csS0FBQWdOLEdBQUE5TixRQUFBLFNBQUFlLEdBQ0EsT0FBQUEsR0FDQSxJQUFBLE9BQ0EsaUJBQUErTSxFQUFBcFMsTUFDQXJXLFFBQUFDLE1BQUErb0IsRUFBQUcsRUFBQWxmLE9BQUF3ZSxFQUFBcFMsTUFBQSxTQUFBLFdBQUEsSUFBQXBNLE9BQUF3ZSxFQUFBcFMsTUFBQSxNQUdBLE1BRUEsSUFBQSxVQUNBLGtCQUFBb1MsRUFBQThDLFNBQ0F2ckIsUUFBQUMsTUFBQStvQixFQUFBRyxFQUFBVixFQUFBcFMsS0FBQSxZQUFBLFlBQUEsSUFBQXBNLE9BQUF3ZSxFQUFBOEMsU0FBQSxNQUdBLElBQUEsUUFDQXBELEVBQUF0ZSxRQUFBNGUsRUFBQTRDLE9BQUEsR0FDQXJyQixRQUFBQyxNQUFBK29CLEVBQUFHLEVBQUFWLEVBQUFwUyxLQUFBLFVBQUEsVUFBQThSLEVBQUE3VixLQUFBLE1BQUEsSUFBQXJJLE9BQUF3ZSxFQUFBNEMsT0FBQSxNQUdBLE1BRUEsSUFBQSxLQUNBLG1CQUFBNUMsRUFBQXlCLElBQ0FscUIsUUFBQUMsTUFBQStvQixFQUFBRyxFQUFBVixFQUFBcFMsS0FBQSxPQUFBLGFBQUEsSUFBQXBNLE9BQUF3ZSxFQUFBeUIsSUFBQSxNQUdBLE1BRUEsSUFBQSxTQUNBLG1CQUFBekIsRUFBQW9ELFFBQ0E3ckIsUUFBQUMsTUFBQStvQixFQUFBRyxFQUFBVixFQUFBcFMsS0FBQSxXQUFBLGFBQUEsSUFBQXBNLE9BQUF3ZSxFQUFBeUIsSUFBQSxNQUdBLE1BRUEsSUFBQSxXQUNBN2pCLE1BQUEyWCxRQUFBeUssRUFBQUcsV0FDQTVvQixRQUFBQyxNQUFBK29CLEVBQUFHLEVBQUFWLEVBQUFwUyxLQUFBLGFBQUEsVUFBQSxJQUFBcE0sT0FBQXdlLEVBQUFHLFVBQUEsTUFHQSxNQUVBLElBQUEsbUJBQ0F2aUIsTUFBQTJYLFFBQUF5SyxFQUFBSSxtQkFDQTdvQixRQUFBQyxNQUFBK29CLEVBQUFHLEVBQUFWLEVBQUFwUyxLQUFBLHFCQUFBLFVBQUEsSUFBQXBNLE9BQUF3ZSxFQUFBSSxrQkFBQSxNQUdBLE1BRUEsSUFBQSxVQUNBLElBQUEsT0FDQSxNQUVBLFFBQ0E3b0IsUUFBQUMsTUFBQSwyREFBQXdvQixFQUFBcFMsS0FBQSxvQ0FBQWdULEVBQUFsVyxJQUFBLFNBQUFySSxHQUNBLE1BQUEsSUFBQUEsRUFBQSxNQUNBd0gsS0FBQSxNQUFBLFVBQUFvSixFQUFBLG1CQUdBK00sRUFBQUcsVUFBQUgsRUFBQUcsU0FBQWpPLFFBQUEsU0FBQW1SLEdBR0EsTUFGQXpELEVBQUEwRCxLQUFBLFNBQUFDLEdBQ0EsT0FBQUEsRUFBQTNWLE9BQUF5VixLQUVBOXJCLFFBQUFDLE1BQUErb0IsRUFBQUksRUFBQW5mLE9BQUF3ZSxFQUFBcFMsTUFBQXlWLEVBQUFBLFVBOEdBeEMsR0FBQWMsRUFBQWxmLFFBQUFuRyxhQUFBMGlCLElBQ0EyQyxFQUFBQyxpQkFBQTBCLEtBQUEsU0FBQUUsR0FFQSxNQUFBLFNBREFBLEVBQUE1VixRQUtBclcsUUFBQUMsTUFBQSxDQUFBLDJEQUFBLGdDQUFBcVMsS0FBQSxPQVlBLEVBUkFxVCxFQUFBNWhCLEVBQUErakIsSUFDQW9FLFVBQ0F2RyxFQUFBd0csWUFDQXhHLEVBQUF5RyxhQUNBekcsRUFBQTBHLFlBSUExQyxLQUFBLFNBQUEyQyxHQUNBLE9BQUFDLFdBQUFELE1BRUF0c0IsUUFBQWdkLEtBQUEsQ0FBQSw4REFBQSw0REFBQSw2REFBQSwyREFBQSxjQUFBMUssS0FBQSxPQW9IQThYLEVBQUFDLGlCQUFBMVAsUUFBQSxTQUFBNlIsR0FDQSxJQU1BQyxFQU5BcFcsRUFBQW1XLEVBQUFuVyxLQUNBcVcsRUFBQUYsRUFBQXRoQixRQUNBQSxPQUFBLElBQUF3aEIsRUFBQSxHQUFBQSxFQUNBYixFQUFBVyxFQUFBWCxPQUVBLG1CQUFBQSxJQUNBWSxFQUFBWixFQUFBLENBQ0F6QixNQUFBQSxFQUNBL1QsS0FBQUEsRUFDQTZILFNBQUFBLEVBQ0FoVCxRQUFBQSxJQUtBd2YsRUFBQXZkLEtBQUFzZixHQUZBLGlCQTdIQXZPLEVBQUF5TyxVQU9BQyxZQUFBLFdBQ0EsSUFBQWpDLEVBQUEsQ0FJQSxJQUFBa0MsRUFBQXpDLEVBQUFHLFNBQ0F4QyxFQUFBOEUsRUFBQTlFLFVBQ0FELEVBQUErRSxFQUFBL0UsT0FHQSxHQUFBNEIsRUFBQTNCLEVBQUFELEdBQUEsQ0FTQXNDLEVBQUEwQyxNQUFBLENBQ0EvRSxVQUFBaEMsRUFBQWdDLEVBQUFQLEdBQUFNLEdBQUEsVUFBQXNDLEVBQUFsZixRQUFBdWUsVUFDQTNCLE9BQUF2QixHQUFBdUIsSUFPQXNDLEVBQUEyQyxPQUFBLEVBQ0EzQyxFQUFBcmxCLFVBQUFxbEIsRUFBQWxmLFFBQUFuRyxVQUtBcWxCLEVBQUFDLGlCQUFBMVAsUUFBQSxTQUFBOE4sR0FDQSxPQUFBMkIsRUFBQUUsY0FBQTdCLEVBQUFwUyxNQUFBOVEsT0FBQXNGLE9BQUEsR0FBQTRkLEVBQUFsZixRQUlBLElBRkEsSUFrQkF5akIsRUFDQTlDLEVBQ0ErQyxFQUNBQyxFQUNBN1csRUF0QkE4VyxFQUFBLEVBRUF4WixFQUFBLEVBQUFBLEVBQUF5VyxFQUFBQyxpQkFBQTdzQixPQUFBbVcsSUFBQSxDQUNBLEdBQUEsZUFBQTZYLEVBQUFDLElBQUFDLFVBR0EsS0FGQXlCLEdBQUEsR0FFQSxDQUNBbnRCLFFBQUFDLE1BckpBLGlJQXNKQSxPQUlBLElBQUFtcUIsRUFBQTJDLE9BT0E3QyxHQURBOEMsRUFBQTVDLEVBQUFDLGlCQUFBMVcsSUFDQXVXLEdBRUFnRCxPQUFBLEtBREFELEVBQUFELEVBQUE5aEIsU0FDQSxHQUFBK2hCLEVBQ0E1VyxFQUFBMlcsRUFBQTNXLEtBRUEsbUJBQUE2VCxJQUNBRSxFQUFBRixFQUFBLENBQ0FFLE1BQUFBLEVBQ0FsZixRQUFBZ2lCLEVBQ0E3VyxLQUFBQSxFQUNBNkgsU0FBQUEsS0FDQWtNLEtBakJBQSxFQUFBMkMsT0FBQSxFQUNBcFosR0FBQSxRQXhDQSxlQUFBNlgsRUFBQUMsSUFBQUMsVUFDQTFyQixRQUFBQyxNQUFBc3BCLEtBNkRBb0QsUUF2VEF6QyxFQXVUQSxXQUNBLE9BQUEsSUFBQTNpQixRQUFBLFNBQUFtRSxHQUNBd1MsRUFBQTBPLGNBQ0FsaEIsRUFBQTBlLE1BeFRBLFdBVUEsT0FSQUQsRUFEQUEsR0FDQSxJQUFBNWlCLFFBQUEsU0FBQW1FLEdBQ0FuRSxRQUFBbUUsVUFBQTVMLEtBQUEsV0FDQXFxQixPQUFBM2hCLEVBQ0FrRCxFQUFBd2UsV0FzVEFrRCxRQUFBLFdBQ0F2QyxJQUNBRixHQUFBLElBSUEsSUFBQWpCLEVBQUEzQixFQUFBRCxHQUtBLE1BSkEsZUFBQTBELEVBQUFDLElBQUFDLFVBQ0ExckIsUUFBQUMsTUFBQXNwQixHQUdBckwsRUFtQ0EsU0FBQTJNLElBQ0FILEVBQUEvUCxRQUFBLFNBQUF1UCxHQUNBLE9BQUFBLE1BRUFRLEVBQUEsR0FHQSxPQXZDQXhNLEVBQUEwTSxXQUFBMWYsR0FBQXBMLEtBQUEsU0FBQXNxQixJQUNBTyxHQUFBemYsRUFBQW1pQixlQUNBbmlCLEVBQUFtaUIsY0FBQWpELEtBcUNBbE0sR0FJQSxJQUFBb1AsRUFBQSxDQUNBQSxTQUFBLEdBK0NBLFNBQUFDLEdBQUF4b0IsR0FDQSxPQUFBQSxFQUFBNGMsTUFBQSxLQUFBLEdBR0EsU0FBQTZMLEdBQUF6b0IsR0FDQSxPQUFBLEdBQUEsQ0FBQSxNQUFBLFVBQUE4RSxRQUFBOUUsR0FBQSxJQUFBLElBR0EsU0FBQTBvQixFQUFBOUIsR0FDQSxJQU9BdkYsRUFQQTJCLEVBQUE0RCxFQUFBNUQsVUFDQWpFLEVBQUE2SCxFQUFBN0gsUUFDQS9lLEVBQUE0bUIsRUFBQTVtQixVQUNBMm9CLEVBQUEzb0IsRUFBQXVrQixHQUFBdmtCLEdBQUEsS0FDQTRvQixFQUFBNW9CLEVBQUF3b0IsR0FBQXhvQixHQUFBLEtBQ0E2b0IsRUFBQTdGLEVBQUF6RCxFQUFBeUQsRUFBQS9ELE1BQUEsRUFBQUYsRUFBQUUsTUFBQSxFQUNBNkosRUFBQTlGLEVBQUE1YixFQUFBNGIsRUFBQTlELE9BQUEsRUFBQUgsRUFBQUcsT0FBQSxFQUdBLE9BQUF5SixHQUNBLEtBQUF4SixHQUNBa0MsRUFBQSxDQUNBOUIsRUFBQXNKLEVBQ0F6aEIsRUFBQTRiLEVBQUE1YixFQUFBMlgsRUFBQUcsUUFFQSxNQUVBLEtBQUFHLEdBQ0FnQyxFQUFBLENBQ0E5QixFQUFBc0osRUFDQXpoQixFQUFBNGIsRUFBQTViLEVBQUE0YixFQUFBOUQsUUFFQSxNQUVBLEtBQUFFLEdBQ0FpQyxFQUFBLENBQ0E5QixFQUFBeUQsRUFBQXpELEVBQUF5RCxFQUFBL0QsTUFDQTdYLEVBQUEwaEIsR0FFQSxNQUVBLEtBQUF4SixHQUNBK0IsRUFBQSxDQUNBOUIsRUFBQXlELEVBQUF6RCxFQUFBUixFQUFBRSxNQUNBN1gsRUFBQTBoQixHQUVBLE1BRUEsUUFDQXpILEVBQUEsQ0FDQTlCLEVBQUF5RCxFQUFBekQsRUFDQW5ZLEVBQUE0YixFQUFBNWIsR0FJQSxJQUFBMmhCLEVBQUFKLEVBQUFGLEdBQUFFLEdBQUEsS0FFQSxHQUFBLE1BQUFJLEVBQUEsQ0FDQSxJQUFBQyxFQUFBLE1BQUFELEVBQUEsU0FBQSxRQUVBLE9BQUFILEdBQ0EsS0FBQTl0QixHQUNBdW1CLEVBQUEwSCxHQUFBRSxLQUFBQyxNQUFBN0gsRUFBQTBILElBQUFFLEtBQUFDLE1BQUFsRyxFQUFBZ0csR0FBQSxFQUFBakssRUFBQWlLLEdBQUEsR0FDQSxNQUVBLEtBQUFwRyxFQUNBdkIsRUFBQTBILEdBQUFFLEtBQUFDLE1BQUE3SCxFQUFBMEgsSUFBQUUsS0FBQUUsS0FBQW5HLEVBQUFnRyxHQUFBLEVBQUFqSyxFQUFBaUssR0FBQSxJQUtBLE9BQUEzSCxFQW1CQSxJQVFBK0gsRUFBQSxDQUNBakssSUFBQSxPQUNBQyxNQUFBLE9BQ0FDLE9BQUEsT0FDQUMsS0FBQSxRQWdCQSxTQUFBK0osRUFBQW5DLEdBQ0EsSUFBQW9DLEVBWkExQyxFQUNBckgsRUFDQW5ZLEVBRUFtaUIsRUE2QkFySSxFQW5CQTZCLEVBQUFtRSxFQUFBbkUsT0FDQXlHLEVBQUF0QyxFQUFBc0MsV0FDQXhwQixFQUFBa25CLEVBQUFsbkIsVUFDQXFoQixFQUFBNkYsRUFBQTdGLFFBQ0FtQixFQUFBMEUsRUFBQTFFLFNBQ0FpSCxFQUFBdkMsRUFBQXVDLGdCQUNBQyxFQUFBeEMsRUFBQXdDLFNBRUFDLEdBckJBcEssR0FEQXFILEVBc0JBdkYsR0FyQkE5QixFQUNBblksRUFBQXdmLEVBQUF4ZixFQUVBbWlCLEVBREFud0IsT0FDQXd3QixrQkFBQSxFQUNBLENBQ0FySyxFQUFBMEosS0FBQVksTUFBQXRLLEVBQUFnSyxHQUFBQSxHQUFBLEVBQ0FuaUIsRUFBQTZoQixLQUFBWSxNQUFBemlCLEVBQUFtaUIsR0FBQUEsR0FBQSxJQWdCQWhLLEVBQUFvSyxFQUFBcEssRUFDQW5ZLEVBQUF1aUIsRUFBQXZpQixFQUVBMGlCLEVBQUF6SSxFQUFBNWYsZUFBQSxLQUNBc29CLEVBQUExSSxFQUFBNWYsZUFBQSxLQUNBdW9CLEVBQUExSyxHQUNBMkssRUFBQTlLLEdBQ0FVLEVBQUF6bUIsT0FFQXN3QixLQUNBeEksRUFBQXVCLEdBQUFNLE1BRUF2RCxFQUFBdUQsS0FDQTdCLEVBQUFWLEVBQUF1QyxJQU1BL2lCLElBQUFtZixLQUNBOEssRUFBQTVLLEdBQ0FqWSxHQUFBOFosRUFBQWdKLGFBQUFWLEVBQUF0SyxPQUNBOVgsR0FBQXFpQixFQUFBLEdBQUEsR0FHQXpwQixJQUFBc2YsS0FDQTBLLEVBQUE1SyxHQUNBRyxHQUFBMkIsRUFBQWlKLFlBQUFYLEVBQUF2SyxNQUNBTSxHQUFBa0ssRUFBQSxHQUFBLElBSUEsSUFLQVcsRUFMQUMsRUFBQTdwQixPQUFBc0YsT0FBQSxDQUNBMGMsU0FBQUEsR0FDQWtILEdBQUFOLEdBRUEsT0FBQUssRUFHQWpwQixPQUFBc0YsT0FBQSxHQUFBdWtCLElBQUFELEVBQUEsSUFBQUgsR0FBQUYsRUFBQSxJQUFBLEdBQUFLLEVBQUFKLEdBQUFGLEVBQUEsSUFBQSxHQUFBTSxFQUFBRSxXQUFBekssRUFBQStKLGtCQUFBLEdBQUEsRUFBQSxhQUFBckssRUFBQSxPQUFBblksRUFBQSxNQUFBLGVBQUFtWSxFQUFBLE9BQUFuWSxFQUFBLFNBQUFnakIsSUFHQTVwQixPQUFBc0YsT0FBQSxHQUFBdWtCLElBQUFmLEVBQUEsSUFBQVcsR0FBQUYsRUFBQTNpQixFQUFBLEtBQUEsR0FBQWtpQixFQUFBVSxHQUFBRixFQUFBdkssRUFBQSxLQUFBLEdBQUErSixFQUFBZ0IsVUFBQSxHQUFBaEIsSUEyTEEsSUFRQWlCLEVBQUEsQ0FDQWpMLEtBQUEsUUFDQUYsTUFBQSxPQUNBQyxPQUFBLE1BQ0FGLElBQUEsVUFFQSxTQUFBcUwsRUFBQXhxQixHQUNBLE9BQUFBLEVBQUFYLFFBQUEseUJBQUEsU0FBQW9yQixHQUNBLE9BQUFGLEVBQUFFLEtBSUEsSUFBQUMsRUFBQSxDQUNBNXZCLE1BQUEsTUFDQThuQixJQUFBLFNBRUEsU0FBQStILEVBQUEzcUIsR0FDQSxPQUFBQSxFQUFBWCxRQUFBLGFBQUEsU0FBQW9yQixHQUNBLE9BQUFDLEVBQUFELEtBb0NBLFNBQUFHLEVBQUFDLEdBQ0EsT0FBQXJELFdBQUFxRCxJQUFBLEVBYUEsU0FBQUMsRUFBQS9MLEdBQ0EsSUFYQUEsRUFDQWdNLEVBVUFsTCxFQUFBTCxFQUFBVCxHQUNBaU0sRUFWQSxDQUNBN0wsSUFBQXlMLEdBRkFHLEVBQUEzSyxFQURBckIsRUFZQUEsR0FYQS9mLEVBQUErZixHQUFBLElBRUFrTSxnQkFDQTdMLE1BQUF3TCxFQUFBRyxFQUFBRyxrQkFDQTdMLE9BQUF1TCxFQUFBRyxFQUFBSSxtQkFDQTdMLEtBQUFzTCxFQUFBRyxFQUFBSyxrQkFPQUMsRUFBQSxTQUFBL0ssRUFBQXZCLEdBQ0F1TSxFQUFBNUssRUFBQTNCLEdBQ0FRLEVBQUFSLEVBQUFvTCxZQUFBYSxFQUFBNUwsTUFDQWhZLEVBQUEyWCxFQUFBbUwsYUFBQWMsRUFBQTNMLE9BYUEsT0FKQWdNLEdBQUEsR0FBQXhMLEVBQUEwTCxZQUFBeE0sRUFBQW1MLGVBQ0E5aUIsRUFBQXlZLEVBQUEwTCxZQUFBUCxFQUFBM0wsUUFHQSxDQUNBRixJQUFBa00sRUFBQSxFQUFBdE0sRUFBQXdDLFVBQ0FuQyxNQUNBTCxFQUFBdUMsV0FBQTBKLEVBQUExTCxLQUFBMEwsRUFBQTVMLE1BQ0FpTSxFQUFBeEwsRUFBQTJMLFdBQUFqTSxFQUFBK0wsRUFBQXZNLEVBQUE0QyxZQUFBcEMsRUFDQUYsT0FBQWdNLEVBQUF4TCxFQUFBMEwsWUFBQW5rQixFQUFBMlgsRUFBQTZDLGFBQUF4YSxFQUNBa1ksS0FBQStMLEVBQUFDLEVBQUF2TSxFQUFBdUMsWUFJQSxTQUFBL21CLEVBQUFxQyxFQUFBNnVCLEdBRUEsSUFBQUMsRUFBQUMsUUFBQUYsRUFBQUcsYUFBQUgsRUFBQUcsY0FBQTVKLE1BRUEsR0FBQXBsQixFQUFBckMsU0FBQWt4QixHQUNBLE9BQUEsRUFFQSxHQUFBQyxFQUFBLENBQ0EsSUFBQTVrQixFQUFBMmtCLEVBRUEsRUFBQSxDQUNBLEdBQUEza0IsR0FBQWxLLEVBQUFpdkIsV0FBQS9rQixHQUNBLE9BQUEsRUFJQUEsRUFBQUEsRUFBQWliLFlBQUFqYixFQUFBa2IsV0FDQWxiLEdBSUEsT0FBQSxFQUdBLFNBQUFnbEIsRUFBQTlNLEdBQ0EsT0FBQXhlLE9BQUFzRixPQUFBLEdBQUFrWixFQUFBLENBQ0FNLEtBQUFOLEVBQUFPLEVBQ0FKLElBQUFILEVBQUE1WCxFQUNBZ1ksTUFBQUosRUFBQU8sRUFBQVAsRUFBQUMsTUFDQUksT0FBQUwsRUFBQTVYLEVBQUE0WCxFQUFBRSxTQUlBLFNBQUE2TSxFQUFBaE4sRUFBQWlOLEdBQ0EsT0FBQUEsSUFBQWxKLEVBQUFnSixHQTVHQWpNLEVBQUFMLEVBNEdBVCxHQTNHQXNELEVBQUF4QyxFQUFBd0MsZUFDQXBELEVBQUFZLEVBQUEyTCxXQUNBdE0sRUFBQVcsRUFBQTBMLFlBSUFsSixHQUFBLG1CQUFBamxCLEtBQUE2dUIsVUFBQUMsWUFDQWpOLEVBQUFvRCxFQUFBcEQsTUFDQUMsRUFBQW1ELEVBQUFuRCxRQUdBLENBQ0FELE1BQUFBLEVBQ0FDLE9BQUFBLEVBQ0FLLEVBQUEsRUFDQW5ZLEVBQUEsS0E0RkFnWixFQUFBNEwsR0FBQWxOLEVBQUFrTixHQUFBRixHQXhGQS9NLEVBd0ZBeUIsRUFBQXpCLEdBdkZBYyxFQUFBTCxFQUFBVCxHQUNBb04sRUFBQXZNLEVBQUFiLElBQ0FxTixFQUFBcEwsRUFBQVIsRUFBQXpCLEdBQUFjLElBQ0FYLE9BQUErSixLQUFBb0QsSUFBQUQsRUFBQWxOLE9BQUFXLEVBQUEwTCxhQUNBYSxFQUFBbk4sTUFBQWdLLEtBQUFvRCxJQUFBRCxFQUFBbk4sTUFBQVksRUFBQTJMLFlBQ0FZLEVBQUE3TSxHQUFBNE0sRUFBQXJNLFdBQ0FzTSxFQUFBaGxCLEdBQUEra0IsRUFBQW5NLFVBQ0FvTSxJQVJBLElBQUFyTixFQUNBYyxFQUNBc00sRUFDQUMsRUF2QkF2TSxFQUNBd0MsRUFDQXBELEVBQ0FDLEVBZ0lBLFNBQUFvTixFQUFBdk4sRUFBQXdOLEVBQUFDLEdBQ0EsSUFsQkF6TixFQUNBOEQsRUFFQTRKLEVBZUFDLEVBQUEsb0JBQUFILEdBakJBMUosRUFBQVosRUFEQWxELEVBa0JBQSxHQWJBbUIsRUFGQXVNLEVBREEsR0FBQSxDQUFBLFdBQUEsU0FBQTNuQixRQUFBOUYsRUFBQStmLEdBQUF5RCxXQUNBcEMsRUFBQXJCLEdBQUEwRCxHQUFBMUQsR0FBQUEsR0FPQThELEVBQUEwRCxPQUFBLFNBQUF5RixHQUNBLE9BQUE5TCxFQUFBOEwsSUFBQXp4QixFQUFBeXhCLEVBQUFTLEtBTEEsSUFZQSxHQUFBcnlCLE9BQUFteUIsR0FDQTFKLEVBQUEsR0FBQXpvQixPQUFBc3lCLEVBQUEsQ0FBQUYsSUFDQUcsRUFBQTlKLEVBQUEsR0FDQStKLEVBQUEvSixFQUFBbFQsT0FBQSxTQUFBa2QsRUFBQWIsR0FDQSxJQUFBaE4sRUFBQStNLEVBQUFoTixFQUFBaU4sR0FDQWMsRUFBQWhDLEVBQUExSyxFQUFBNEwsR0FBQUEsRUFBQXhMLEVBQUF6QixJQUtBLE9BSkE4TixFQUFBMU4sSUFBQThKLEtBQUFvRCxJQUFBck4sRUFBQUcsSUFBQTJOLEVBQUEzTixJQUFBME4sRUFBQTFOLEtBQ0EwTixFQUFBek4sTUFBQTZKLEtBQUE4RCxJQUFBL04sRUFBQUksTUFBQTBOLEVBQUExTixNQUFBeU4sRUFBQXpOLE9BQ0F5TixFQUFBeE4sT0FBQTRKLEtBQUE4RCxJQUFBL04sRUFBQUssT0FBQXlOLEVBQUF6TixPQUFBd04sRUFBQXhOLFFBQ0F3TixFQUFBdk4sS0FBQTJKLEtBQUFvRCxJQUFBck4sRUFBQU0sS0FBQXdOLEVBQUF4TixLQUFBdU4sRUFBQXZOLE1BQ0F1TixHQUNBZCxFQUFBaE4sRUFBQTROLElBS0EsT0FKQUMsRUFBQTNOLE1BQUEyTixFQUFBeE4sTUFBQXdOLEVBQUF0TixLQUNBc04sRUFBQTFOLE9BQUEwTixFQUFBdk4sT0FBQXVOLEVBQUF6TixJQUNBeU4sRUFBQXJOLEVBQUFxTixFQUFBdE4sS0FDQXNOLEVBQUF4bEIsRUFBQXdsQixFQUFBek4sSUFDQXlOLEVBR0EsU0FBQUksS0FDQSxNQUFBLENBQ0E3TixJQUFBLEVBQ0FDLE1BQUEsRUFDQUMsT0FBQSxFQUNBQyxLQUFBLEdBSUEsU0FBQTJOLEVBQUFDLEdBQ0EsT0FBQTFzQixPQUFBc0YsT0FBQSxHQUFBa25CLEtBQUEsR0FBQUUsR0FHQSxTQUFBQyxFQUFBN3hCLEVBQUFvYixHQUNBLE9BQUFBLEVBQUEvRyxPQUFBLFNBQUF5ZCxFQUFBelcsR0FFQSxPQURBeVcsRUFBQXpXLEdBQUFyYixFQUNBOHhCLEdBQ0EsSUFHQSxTQUFBQyxHQUFBaEksRUFBQWxmLFFBQ0EsSUFBQUEsSUFDQUEsRUFBQSxJQUdBLElBdUNBeUosRUF0Q0EwZCxFQURBbm5CLEVBQ0FuRyxVQUNBQSxPQUFBLElBQUFzdEIsRUFBQWpJLEVBQUFybEIsVUFBQXN0QixFQUNBQyxFQUhBcG5CLEVBR0FvbUIsU0FDQUEsT0FBQSxJQUFBZ0IsRUFBQTFLLEVBQUEwSyxFQUNBQyxFQUxBcm5CLEVBS0FxbUIsYUFDQUEsT0FBQSxJQUFBZ0IsRUFBQTFLLEVBQUEwSyxFQUNBQyxFQVBBdG5CLEVBT0F1bkIsZUFDQUEsT0FBQSxJQUFBRCxFQUFBMUssRUFBQTBLLEVBQ0FFLEVBVEF4bkIsRUFTQXluQixZQUNBQSxPQUFBLElBQUFELEdBQUFBLEVBQ0FFLEVBWEExbkIsRUFXQTJuQixRQUNBQSxPQUFBLElBQUFELEVBQUEsRUFBQUEsRUFDQVgsRUFBQUQsRUFBQSxpQkFBQWEsRUFBQUEsRUFBQVgsRUFBQVcsRUFBQW5MLElBQ0FvTCxFQUFBTCxJQUFBM0ssRUFBQUMsRUFBQUQsRUFDQWlMLEVBQUEzSSxFQUFBRyxTQUFBeEMsVUFDQXdHLEVBQUFuRSxFQUFBMEMsTUFBQWhGLE9BQ0FoRSxFQUFBc0csRUFBQUcsU0FBQW9JLEVBQUFHLEVBQUFMLEdBQ0FPLEVBQUEzQixFQUFBcE0sRUFBQW5CLEdBQUFBLEVBQUFBLEVBQUFpSCxnQkFBQXhGLEVBQUE2RSxFQUFBRyxTQUFBekMsUUFBQXdKLEVBQUFDLEdBQ0EwQixFQUFBcFAsRUFBQWtQLEdBQ0FHLEVBQUF6RixFQUFBLENBQ0ExRixVQUFBa0wsRUFDQW5QLFFBQUF5SyxFQUNBOUUsU0FBQSxXQUNBMWtCLFVBQUFBLElBRUFvdUIsRUFBQXRDLEVBQUF0ckIsT0FBQXNGLE9BQUEsR0FBQTBqQixFQUFBLEdBQUEyRSxJQUNBRSxFQUFBWCxJQUFBM0ssRUFBQXFMLEVBQUFGLEVBR0FJLEVBQUEsQ0FDQW5QLElBQUE4TyxFQUFBOU8sSUFBQWtQLEVBQUFsUCxJQUFBK04sRUFBQS9OLElBQ0FFLE9BQUFnUCxFQUFBaFAsT0FBQTRPLEVBQUE1TyxPQUFBNk4sRUFBQTdOLE9BQ0FDLEtBQUEyTyxFQUFBM08sS0FBQStPLEVBQUEvTyxLQUFBNE4sRUFBQTVOLEtBQ0FGLE1BQUFpUCxFQUFBalAsTUFBQTZPLEVBQUE3TyxNQUFBOE4sRUFBQTlOLE9BRUFtUCxFQUFBbEosRUFBQUUsY0FBQTNWLE9BV0EsT0FUQThkLElBQUEzSyxHQUFBd0wsSUFDQTNlLEVBQUEyZSxFQUFBdnVCLEdBQ0FRLE9BQUFrVyxLQUFBNFgsR0FBQTFZLFFBQUEsU0FBQWUsR0FDQSxJQUFBNlgsRUFBQSxHQUFBLENBQUFwUCxHQUFBQyxJQUFBdmEsUUFBQTZSLEdBQUEsR0FBQSxFQUNBOFgsRUFBQSxHQUFBLENBQUF0UCxHQUFBRSxJQUFBdmEsUUFBQTZSLEdBQUEsSUFBQSxJQUNBMlgsRUFBQTNYLElBQUEvRyxFQUFBNmUsR0FBQUQsS0FJQUYsRUF3TEEsU0FBQUksR0FBQTNCLEVBQUF6eEIsRUFBQSt3QixHQUNBLE9BQUFwRCxLQUFBb0QsSUFBQVUsRUFBQTlELEtBQUE4RCxJQUFBenhCLEVBQUErd0IsSUF5TUEsU0FBQXNDLEVBQUE5TixFQUFBN0IsRUFBQTRQLEdBUUEsWUFQQSxJQUFBQSxJQUNBQSxFQUFBLENBQ0FyUCxFQUFBLEVBQ0FuWSxFQUFBLElBSUEsQ0FDQStYLElBQUEwQixFQUFBMUIsSUFBQUgsRUFBQUUsT0FBQTBQLEVBQUF4bkIsRUFDQWdZLE1BQUF5QixFQUFBekIsTUFBQUosRUFBQUMsTUFBQTJQLEVBQUFyUCxFQUNBRixPQUFBd0IsRUFBQXhCLE9BQUFMLEVBQUFFLE9BQUEwUCxFQUFBeG5CLEVBQ0FrWSxLQUFBdUIsRUFBQXZCLEtBQUFOLEVBQUFDLE1BQUEyUCxFQUFBclAsR0FJQSxTQUFBc1AsR0FBQWhPLEdBQ0EsTUFBQSxDQUFBMUIsR0FBQUMsR0FBQUMsR0FBQUMsSUFBQXNGLEtBQUEsU0FBQWtLLEdBQ0EsT0FBQSxHQUFBak8sRUFBQWlPLEtBaUNBLElBUUE5SixFQUFBLENBMWlDQSxDQUNBMVQsS0FBQSxpQkFDQWtWLFNBQUEsRUFDQUYsTUFBQSxRQUNBbkIsR0FBQSxhQUNBMkIsT0F4Q0EsU0FBQUYsR0FDQSxJQUFBdkIsRUFBQXVCLEVBQUF2QixNQUNBbE0sRUFBQXlOLEVBQUF6TixTQUNBaFQsRUFBQXlnQixFQUFBemdCLFFBQ0E0b0IsRUFBQTVvQixFQUFBaWIsT0FDQUEsT0FBQSxJQUFBMk4sR0FBQUEsRUFDQUMsRUFBQTdvQixFQUFBOG9CLE9BQ0FBLE9BQUEsSUFBQUQsR0FBQUEsRUFDQTUxQixFQUFBb21CLEVBQUE2RixFQUFBRyxTQUFBekMsUUFDQWdELEVBQUEsR0FBQTNyQixPQUFBaXJCLEVBQUFVLGNBQUEvQyxVQUFBcUMsRUFBQVUsY0FBQWhELFFBWUEsT0FWQTNCLEdBQ0EyRSxFQUFBblEsUUFBQSxTQUFBc00sR0FDQUEsRUFBQS9tQixpQkFBQSxTQUFBZ2UsRUFBQXlPLE9BQUFXLEtBSUEwRyxHQUNBNzFCLEVBQUErQixpQkFBQSxTQUFBZ2UsRUFBQXlPLE9BQUFXLEdBR0EsV0FDQW5ILEdBQ0EyRSxFQUFBblEsUUFBQSxTQUFBc00sR0FDQUEsRUFBQWdOLG9CQUFBLFNBQUEvVixFQUFBeU8sT0FBQVcsS0FJQTBHLEdBQ0E3MUIsRUFBQTgxQixvQkFBQSxTQUFBL1YsRUFBQXlPLE9BQUFXLEtBWUEvakIsS0FBQSxJQTRGQSxDQUNBOE0sS0FBQSxnQkFDQWtWLFNBQUEsRUFDQUYsTUFBQSxPQUNBbkIsR0FwQkEsU0FBQXlCLEdBQ0EsSUFBQXZCLEVBQUF1QixFQUFBdkIsTUFDQS9ULEVBQUFzVixFQUFBdFYsS0FLQStULEVBQUFFLGNBQUFqVSxHQUFBb1gsRUFBQSxDQUNBMUYsVUFBQXFDLEVBQUEwQyxNQUFBL0UsVUFDQWpFLFFBQUFzRyxFQUFBMEMsTUFBQWhGLE9BQ0EyQixTQUFBLFdBQ0Exa0IsVUFBQXFsQixFQUFBcmxCLGFBVUF3RSxLQUFBLElBK0hBLENBQ0E4TSxLQUFBLGdCQUNBa1YsU0FBQSxFQUNBRixNQUFBLGNBQ0FuQixHQW5EQSxTQUFBc0MsR0FDQSxJQVFBMEgsRUFSQTlKLEVBQUFvQyxFQUFBcEMsTUFDQWxmLEVBQUFzaEIsRUFBQXRoQixRQUNBaXBCLEVBQUFqcEIsRUFBQXNqQixnQkFDQUEsT0FBQSxJQUFBMkYsR0FBQUEsRUFDQUMsRUFBQWxwQixFQUFBdWpCLFNBQ0FBLE9BQUEsSUFBQTJGLEdBQUFBLEVBRUEsZUFBQTVJLEVBQUFDLElBQUFDLFdBQ0F3SSxFQUFBbndCLEVBQUFxbUIsRUFBQUcsU0FBQXpDLFFBQUFvTSxvQkFBQSxHQUVBekYsR0FBQSxDQUFBLFlBQUEsTUFBQSxRQUFBLFNBQUEsUUFBQTlFLEtBQUEsU0FBQTBLLEdBQ0EsT0FBQSxHQUFBSCxFQUFBcnFCLFFBQUF3cUIsTUFFQXIwQixRQUFBZ2QsS0FBQSxDQUFBLG9FQUFBLGlFQUFBLE9BQUEscUVBQUEsa0VBQUEscUVBQUEsMkNBQUEsT0FBQSxxRUFBQSx1RUFBQTFLLEtBQUEsT0FJQSxJQUFBOGMsRUFBQSxDQUNBcnFCLFVBQUF1a0IsR0FBQWMsRUFBQXJsQixXQUNBK2lCLE9BQUFzQyxFQUFBRyxTQUFBekMsT0FDQXlHLFdBQUFuRSxFQUFBMEMsTUFBQWhGLE9BQ0EwRyxnQkFBQUEsR0FHQSxNQUFBcEUsRUFBQUUsY0FBQTRJLGdCQUNBOUksRUFBQUssT0FBQTNDLE9BQUF2aUIsT0FBQXNGLE9BQUEsR0FBQXVmLEVBQUFLLE9BQUEzQyxPQUFBLEdBQUFzRyxFQUFBN29CLE9BQUFzRixPQUFBLEdBQUF1a0IsRUFBQSxDQUNBaEosUUFBQWdFLEVBQUFFLGNBQUE0SSxjQUNBM0wsU0FBQTZDLEVBQUFsZixRQUFBdWUsU0FDQWdGLFNBQUFBLE9BSUEsTUFBQXJFLEVBQUFFLGNBQUFnSyxRQUNBbEssRUFBQUssT0FBQTZKLE1BQUEvdUIsT0FBQXNGLE9BQUEsR0FBQXVmLEVBQUFLLE9BQUE2SixNQUFBLEdBQUFsRyxFQUFBN29CLE9BQUFzRixPQUFBLEdBQUF1a0IsRUFBQSxDQUNBaEosUUFBQWdFLEVBQUFFLGNBQUFnSyxNQUNBL00sU0FBQSxXQUNBa0gsVUFBQSxPQUlBckUsRUFBQUksV0FBQTFDLE9BQUF2aUIsT0FBQXNGLE9BQUEsR0FBQXVmLEVBQUFJLFdBQUExQyxPQUFBLENBQ0F5TSx3QkFBQW5LLEVBQUFybEIsYUFVQXdFLEtBQUEsSUErRUEsQ0FDQThNLEtBQUEsY0FDQWtWLFNBQUEsRUFDQUYsTUFBQSxRQUNBbkIsR0E5RUEsU0FBQXlCLEdBQ0EsSUFBQXZCLEVBQUF1QixFQUFBdkIsTUFDQTdrQixPQUFBa1csS0FBQTJPLEVBQUFHLFVBQUE1UCxRQUFBLFNBQUF0RSxHQUNBLElBQUF4UixFQUFBdWxCLEVBQUFLLE9BQUFwVSxJQUFBLEdBQ0FtVSxFQUFBSixFQUFBSSxXQUFBblUsSUFBQSxHQUNBeU4sRUFBQXNHLEVBQUFHLFNBQUFsVSxHQUVBOE8sRUFBQXJCLElBQUF1QixFQUFBdkIsS0FPQXZlLE9BQUFzRixPQUFBaVosRUFBQWpmLE1BQUFBLEdBQ0FVLE9BQUFrVyxLQUFBK08sR0FBQTdQLFFBQUEsU0FBQXRFLEdBQ0EsSUFBQWhXLEVBQUFtcUIsRUFBQW5VLElBRUEsSUFBQWhXLEVBQ0F5akIsRUFBQTBRLGdCQUFBbmUsR0FFQXlOLEVBQUEyUSxhQUFBcGUsR0FBQSxJQUFBaFcsRUFBQSxHQUFBQSxTQTBEQXdyQixPQXBEQSxTQUFBSSxHQUNBLElBQUE3QixFQUFBNkIsRUFBQTdCLE1BQ0FzSyxFQUFBLENBQ0E1TSxPQUFBLENBQ0FQLFNBQUE2QyxFQUFBbGYsUUFBQXVlLFNBQ0FwRixLQUFBLElBQ0FILElBQUEsSUFDQW9JLE9BQUEsS0FFQWdJLE1BQUEsQ0FDQS9NLFNBQUEsWUFFQVEsVUFBQSxJQVFBLE9BTkF4aUIsT0FBQXNGLE9BQUF1ZixFQUFBRyxTQUFBekMsT0FBQWpqQixNQUFBNnZCLEVBQUE1TSxRQUVBc0MsRUFBQUcsU0FBQStKLE9BQ0EvdUIsT0FBQXNGLE9BQUF1ZixFQUFBRyxTQUFBK0osTUFBQXp2QixNQUFBNnZCLEVBQUFKLE9BR0EsV0FDQS91QixPQUFBa1csS0FBQTJPLEVBQUFHLFVBQUE1UCxRQUFBLFNBQUF0RSxHQUNBLElBQUF5TixFQUFBc0csRUFBQUcsU0FBQWxVLEdBQ0FtVSxFQUFBSixFQUFBSSxXQUFBblUsSUFBQSxHQUdBeFIsRUFGQVUsT0FBQWtXLEtBQUEyTyxFQUFBSyxPQUFBamtCLGVBQUE2UCxHQUFBK1QsRUFBQUssT0FBQXBVLEdBQUFxZSxFQUFBcmUsSUFFQTNCLE9BQUEsU0FBQTdQLEVBQUF3dkIsR0FFQSxPQURBeHZCLEVBQUF3dkIsR0FBQSxHQUNBeHZCLEdBQ0EsSUFFQXNnQixFQUFBckIsSUFBQXVCLEVBQUF2QixLQU9BdmUsT0FBQXNGLE9BQUFpWixFQUFBamYsTUFBQUEsR0FDQVUsT0FBQWtXLEtBQUErTyxHQUFBN1AsUUFBQSxTQUFBZ2EsR0FDQTdRLEVBQUEwUSxnQkFBQUcsVUFhQS9MLFNBQUEsQ0FBQSxrQkErQ0EsQ0FDQXZTLEtBQUEsU0FDQWtWLFNBQUEsRUFDQUYsTUFBQSxPQUNBekMsU0FBQSxDQUFBLGlCQUNBc0IsR0E1QkEsU0FBQStCLEdBQ0EsSUFBQTdCLEVBQUE2QixFQUFBN0IsTUFDQWxmLEVBQUErZ0IsRUFBQS9nQixRQUNBbUwsRUFBQTRWLEVBQUE1VixLQUNBdWUsRUFBQTFwQixFQUFBeUosT0FDQUEsT0FBQSxJQUFBaWdCLEVBQUEsQ0FBQSxFQUFBLEdBQUFBLEVBQ0FyckIsRUFBQTJlLEVBQUF4VCxPQUFBLFNBQUF1VCxFQUFBbGpCLEdBM0JBLElBQUFBLEVBQUErbkIsRUFBQW5ZLEVBQ0ErWSxFQUNBbUgsRUFFQWxKLEVBTUFtSixFQUNBQyxFQWtCQSxPQURBOU0sRUFBQWxqQixJQTVCQUEsRUE0QkFBLEVBNUJBK25CLEVBNEJBMUMsRUFBQTBDLE1BNUJBblksRUE0QkFBLEVBM0JBK1ksRUFBQXBFLEdBQUF2a0IsR0FDQTh2QixFQUFBLEdBQUEsQ0FBQXhRLEdBQUFILElBQUFyYSxRQUFBNmpCLElBQUEsRUFBQSxFQUVBL0IsRUFBQSxtQkFBQWhYLEVBQUFBLEVBQUFwUCxPQUFBc0YsT0FBQSxHQUFBaWlCLEVBQUEsQ0FDQS9uQixVQUFBQSxLQUNBNFAsRUFJQW1nQixHQUhBQSxFQUFBbkosRUFBQSxLQUdBLEVBQ0FvSixJQUhBQSxFQUFBcEosRUFBQSxLQUdBLEdBQUFrSixFQUNBLEdBQUEsQ0FBQXhRLEdBQUFGLElBQUF0YSxRQUFBNmpCLEdBQUEsQ0FDQXBKLEVBQUF5USxFQUNBNW9CLEVBQUEyb0IsR0FDQSxDQUNBeFEsRUFBQXdRLEVBQ0Ezb0IsRUFBQTRvQixJQVlBOU0sR0FDQSxJQUNBK00sRUFBQXpyQixFQUFBNmdCLEVBQUFybEIsV0FDQXVmLEVBQUEwUSxFQUFBMVEsRUFDQW5ZLEVBQUE2b0IsRUFBQTdvQixFQUVBLE1BQUFpZSxFQUFBRSxjQUFBNEksZ0JBQ0E5SSxFQUFBRSxjQUFBNEksY0FBQTVPLEdBQUFBLEVBQ0E4RixFQUFBRSxjQUFBNEksY0FBQS9tQixHQUFBQSxHQUdBaWUsRUFBQUUsY0FBQWpVLEdBQUE5TSxJQTJhQSxDQUNBOE0sS0FBQSxPQUNBa1YsU0FBQSxFQUNBRixNQUFBLE9BQ0FuQixHQTVIQSxTQUFBeUIsR0FDQSxJQUFBdkIsRUFBQXVCLEVBQUF2QixNQUNBbGYsRUFBQXlnQixFQUFBemdCLFFBQ0FtTCxFQUFBc1YsRUFBQXRWLEtBRUEsSUFBQStULEVBQUFFLGNBQUFqVSxHQUFBNGUsTUFBQSxDQW9DQSxJQWhDQSxJQUFBQyxFQUFBaHFCLEVBQUE0aUIsU0FDQXFILE9BQUEsSUFBQUQsR0FBQUEsRUFDQUUsRUFBQWxxQixFQUFBbXFCLFFBQ0FDLE9BQUEsSUFBQUYsR0FBQUEsRUFDQUcsRUFBQXJxQixFQUFBc3FCLG1CQUNBM0MsRUFBQTNuQixFQUFBMm5CLFFBQ0F2QixFQUFBcG1CLEVBQUFvbUIsU0FDQUMsRUFBQXJtQixFQUFBcW1CLGFBQ0FvQixFQUFBem5CLEVBQUF5bkIsWUFDQThDLEVBQUF2cUIsRUFBQXdxQixlQUNBQSxPQUFBLElBQUFELEdBQUFBLEVBQ0FFLEVBQUF6cUIsRUFBQXlxQixzQkFDQUMsRUFBQXhMLEVBQUFsZixRQUFBbkcsVUFDQTJvQixFQUFBcEUsR0FBQXNNLEdBRUFKLEVBQUFELElBREE3SCxJQUFBa0ksSUFDQUYsRUFBQSxDQUFBbkcsRUFBQXFHLElBakNBLFNBQUE3d0IsR0FDQSxHQUFBdWtCLEdBQUF2a0IsS0FBQTBpQixFQUNBLE1BQUEsR0FHQSxJQUFBb08sRUFBQXRHLEVBQUF4cUIsR0FDQSxNQUFBLENBQUEycUIsRUFBQTNxQixHQUFBOHdCLEVBQUFuRyxFQUFBbUcsSUEyQkFDLENBQUFGLElBQ0ExTixFQUFBLENBQUEwTixHQUFBejJCLE9BQUFxMkIsR0FBQTlnQixPQUFBLFNBQUF1VCxFQUFBbGpCLEdBQ0EsT0FBQWtqQixFQUFBOW9CLE9BQUFtcUIsR0FBQXZrQixLQUFBMGlCLEVBckVBLFNBQUEyQyxFQUFBbGYsUUFDQSxJQUFBQSxJQUNBQSxFQUFBLElBR0EsSUFDQW5HLEVBREFtRyxFQUNBbkcsVUFDQXVzQixFQUZBcG1CLEVBRUFvbUIsU0FDQUMsRUFIQXJtQixFQUdBcW1CLGFBQ0FzQixFQUpBM25CLEVBSUEybkIsUUFDQTZDLEVBTEF4cUIsRUFLQXdxQixlQUNBSyxFQU5BN3FCLEVBTUF5cUIsc0JBQ0FBLE9BQUEsSUFBQUksRUFBQTdOLEVBQUE2TixFQUNBcEksRUFBQUosR0FBQXhvQixHQU9BaXhCLEdBTkFySSxFQUFBK0gsRUFBQTFOLEVBQUFBLEVBQUFzRCxPQUFBLFNBQUF2bUIsR0FDQSxPQUFBd29CLEdBQUF4b0IsS0FBQTRvQixJQUNBakcsR0FBQTRELE9BQUEsU0FBQXZtQixHQUNBLE9BQUEsR0FBQTR3QixFQUFBOXJCLFFBQUE5RSxLQUdBMlAsT0FBQSxTQUFBdVQsRUFBQWxqQixHQU9BLE9BTkFrakIsRUFBQWxqQixHQUFBcXRCLEdBQUFoSSxFQUFBLENBQ0FybEIsVUFBQUEsRUFDQXVzQixTQUFBQSxFQUNBQyxhQUFBQSxFQUNBc0IsUUFBQUEsSUFDQXZKLEdBQUF2a0IsSUFDQWtqQixHQUNBLElBQ0EsT0FBQTFpQixPQUFBa1csS0FBQXVhLEdBQUFyTixLQUFBLFNBQUF6ckIsRUFBQXFKLEdBQ0EsT0FBQXl2QixFQUFBOTRCLEdBQUE4NEIsRUFBQXp2QixLQXVDQTB2QixDQUFBN0wsRUFBQSxDQUNBcmxCLFVBQUFBLEVBQ0F1c0IsU0FBQUEsRUFDQUMsYUFBQUEsRUFDQXNCLFFBQUFBLEVBQ0E2QyxlQUFBQSxFQUNBQyxzQkFBQUEsSUFDQTV3QixJQUNBLElBQ0FteEIsRUFBQTlMLEVBQUEwQyxNQUFBL0UsVUFDQXdHLEVBQUFuRSxFQUFBMEMsTUFBQWhGLE9BQ0FxTyxFQUFBLElBQUE3TixJQUNBOE4sR0FBQSxFQUNBQyxFQUFBbk8sRUFBQSxHQUVBcnJCLEVBQUEsRUFBQUEsRUFBQXFyQixFQUFBMXFCLE9BQUFYLElBQUEsQ0FDQSxJQUFBa0ksRUFBQW1qQixFQUFBcnJCLEdBRUF5NUIsRUFBQWhOLEdBQUF2a0IsR0FFQXd4QixFQUFBaEosR0FBQXhvQixLQUFBbEYsR0FDQTIyQixFQUFBLEdBQUEsQ0FBQXRTLEdBQUFFLElBQUF2YSxRQUFBeXNCLEdBQ0F2SSxFQUFBeUksRUFBQSxRQUFBLFNBQ0E1USxFQUFBd00sR0FBQWhJLEVBQUEsQ0FDQXJsQixVQUFBQSxFQUNBdXNCLFNBQUFBLEVBQ0FDLGFBQUFBLEVBQ0FvQixZQUFBQSxFQUNBRSxRQUFBQSxJQUVBNEQsRUFBQUQsRUFBQUQsRUFBQXBTLEdBQUFFLEdBQUFrUyxFQUFBblMsR0FBQUYsR0FFQWdTLEVBQUFuSSxHQUFBUSxFQUFBUixLQUNBMEksRUFBQWxILEVBQUFrSCxJQUdBLElBQUFDLEVBQUFuSCxFQUFBa0gsR0FDQUUsRUFBQSxHQVVBLEdBUkF4QixHQUNBd0IsRUFBQXhwQixLQUFBeVksRUFBQTBRLElBQUEsR0FHQWhCLEdBQ0FxQixFQUFBeHBCLEtBQUF5WSxFQUFBNlEsSUFBQSxFQUFBN1EsRUFBQThRLElBQUEsR0FHQUMsRUFBQUMsTUFBQSxTQUFBQyxHQUNBLE9BQUFBLElBQ0EsQ0FDQVIsRUFBQXR4QixFQUNBcXhCLEdBQUEsRUFDQSxNQUdBRCxFQUFBcmhCLElBQUEvUCxFQUFBNHhCLEdBR0EsR0FBQVAsRUFxQkEsSUFuQkEsSUFFQVUsRUFBQSxTQUFBNzNCLEdBQ0EsSUFBQTgzQixFQUFBN08sRUFBQTZELEtBQUEsU0FBQWhuQixHQUNBLElBQUE0eEIsRUFBQVIsRUFBQXJ3QixJQUFBZixHQUVBLEdBQUE0eEIsRUFDQSxPQUFBQSxFQUFBdnNCLE1BQUEsRUFBQW5MLEdBQUEyM0IsTUFBQSxTQUFBQyxHQUNBLE9BQUFBLE1BS0EsR0FBQUUsRUFFQSxPQURBVixFQUFBVSxFQUNBLFNBSUE5M0IsRUFuQkF5MkIsRUFBQSxFQUFBLEVBbUJBLEVBQUF6MkIsRUFBQUEsSUFBQSxDQUdBLEdBQUEsVUFGQTYzQixFQUFBNzNCLEdBRUEsTUFJQW1yQixFQUFBcmxCLFlBQUFzeEIsSUFDQWpNLEVBQUFFLGNBQUFqVSxHQUFBNGUsT0FBQSxFQUNBN0ssRUFBQXJsQixVQUFBc3hCLEVBQ0FqTSxFQUFBMkMsT0FBQSxLQVVBbEUsaUJBQUEsQ0FBQSxVQUNBdGYsS0FBQSxDQUNBMHJCLE9BQUEsSUFpSEEsQ0FDQTVlLEtBQUEsa0JBQ0FrVixTQUFBLEVBQ0FGLE1BQUEsT0FDQW5CLEdBekdBLFNBQUF5QixHQUNBLElBMENBcUwsRUFDQUMsRUFDQWxKLEVBQ0FwWixFQUNBbWQsRUFDQVYsRUFDQThGLEVBQ0FDLEVBQ0FDLEVBR0FDLEVBQ0FDLEVBSUFDLEVBQ0FDLEVBQ0FDLEVBTUFDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBTUFDLEVBRUFDLEVBRUFDLEVBTUFDLEVBMUZBbE8sRUFBQXVCLEVBQUF2QixNQUNBbGYsRUFBQXlnQixFQUFBemdCLFFBQ0FtTCxFQUFBc1YsRUFBQXRWLEtBQ0E2ZSxFQUFBaHFCLEVBQUE0aUIsU0FDQXFILE9BQUEsSUFBQUQsR0FBQUEsRUFDQUUsRUFBQWxxQixFQUFBbXFCLFFBQ0FDLE9BQUEsSUFBQUYsR0FBQUEsRUFDQTlELEVBQUFwbUIsRUFBQW9tQixTQUNBQyxFQUFBcm1CLEVBQUFxbUIsYUFDQW9CLEVBQUF6bkIsRUFBQXluQixZQUNBRSxFQUFBM25CLEVBQUEybkIsUUFDQTBGLEVBQUFydEIsRUFBQXN0QixPQUNBQSxPQUFBLElBQUFELEdBQUFBLEVBQ0FFLEVBQUF2dEIsRUFBQXd0QixhQUNBQSxPQUFBLElBQUFELEVBQUEsRUFBQUEsRUFDQTdTLEVBQUF3TSxHQUFBaEksRUFBQSxDQUNBa0gsU0FBQUEsRUFDQUMsYUFBQUEsRUFDQXNCLFFBQUFBLEVBQ0FGLFlBQUFBLElBRUFqRixFQUFBcEUsR0FBQWMsRUFBQXJsQixXQUNBNG9CLEVBQUFKLEdBQUFuRCxFQUFBcmxCLFdBQ0E0ekIsR0FBQWhMLEVBQ0FHLEVBQUFOLEdBQUFFLEdBQ0EySCxFQWpDQSxNQWlDQXZILEVBakNBLElBQUEsSUFrQ0FvRixFQUFBOUksRUFBQUUsY0FBQTRJLGNBQ0FnRCxFQUFBOUwsRUFBQTBDLE1BQUEvRSxVQUNBd0csRUFBQW5FLEVBQUEwQyxNQUFBaEYsT0FDQThRLEVBQUEsbUJBQUFGLEVBQUFBLEVBQUFuekIsT0FBQXNGLE9BQUEsR0FBQXVmLEVBQUEwQyxNQUFBLENBQ0EvbkIsVUFBQXFsQixFQUFBcmxCLGFBQ0EyekIsRUFDQW52QixFQUFBLENBQ0ErYSxFQUFBLEVBQ0FuWSxFQUFBLEdBR0ErbUIsSUFJQWlDLElBQ0E2QixFQUFBLE1BQUFsSixFQUFBNUosR0FBQUcsR0FDQTRTLEVBQUEsTUFBQW5KLEVBQUExSixHQUFBRCxHQUNBNEosRUFBQSxNQUFBRCxFQUFBLFNBQUEsUUFDQW5aLEVBQUF1ZSxFQUFBcEYsR0FDQWdFLEVBQUFvQixFQUFBcEYsR0FBQWxJLEVBQUFvUixHQUNBNUYsRUFBQThCLEVBQUFwRixHQUFBbEksRUFBQXFSLEdBQ0FDLEVBQUFzQixHQUFBakssRUFBQVIsR0FBQSxFQUFBLEVBQ0FvSixFQUFBeEosSUFBQTl0QixHQUFBcTJCLEVBQUFuSSxHQUFBUSxFQUFBUixHQUNBcUosRUFBQXpKLElBQUE5dEIsSUFBQTB1QixFQUFBUixJQUFBbUksRUFBQW5JLEdBR0FzSixFQUFBak4sRUFBQUcsU0FBQStKLE1BQ0FnRCxFQUFBa0IsR0FBQW5CLEVBQUE5USxHQUFBOFEsR0FBQSxDQUNBclQsTUFBQSxFQUNBQyxPQUFBLEdBR0F1VCxHQURBRCxFQUFBbk4sRUFBQUUsY0FBQSxvQkFBQUYsRUFBQUUsY0FBQSxvQkFBQXVJLFFBQUFkLE1BQ0FpRixHQUNBUyxFQUFBRixFQUFBTixHQU1BUyxFQUFBakUsR0FBQSxFQUFBeUMsRUFBQW5JLEdBQUF1SixFQUFBdkosSUFDQTRKLEVBQUFnQixFQUFBekMsRUFBQW5JLEdBQUEsRUFBQW1KLEVBQUFRLEVBQUFGLEVBQUFvQixFQUFBekIsRUFBQU8sRUFBQUYsRUFBQW9CLEVBQ0FoQixFQUFBZSxHQUFBekMsRUFBQW5JLEdBQUEsRUFBQW1KLEVBQUFRLEVBQUFELEVBQUFtQixFQUFBeEIsRUFBQU0sRUFBQUQsRUFBQW1CLEVBRUFkLEdBREFELEVBQUF6TixFQUFBRyxTQUFBK0osT0FBQTlNLEdBQUE0QyxFQUFBRyxTQUFBK0osUUFDQSxNQUFBeEcsRUFBQStKLEVBQUF2UixXQUFBLEVBQUF1UixFQUFBeFIsWUFBQSxFQUFBLEVBQ0EwUixFQUFBM04sRUFBQUUsY0FBQTNWLE9BQUF5VixFQUFBRSxjQUFBM1YsT0FBQXlWLEVBQUFybEIsV0FBQStvQixHQUFBLEVBQ0FrSyxFQUFBOUUsRUFBQXBGLEdBQUE2SixFQUFBSSxFQUFBRCxFQUNBRyxFQUFBL0UsRUFBQXBGLEdBQUE4SixFQUFBRyxFQUNBRyxFQUFBekUsR0FBQStFLEVBQUF4SyxLQUFBOEQsSUFBQUEsRUFBQWtHLEdBQUFsRyxFQUFBbmQsRUFBQTZqQixFQUFBeEssS0FBQW9ELElBQUFBLEVBQUE2RyxHQUFBN0csR0FDQThCLEVBQUFwRixHQUFBb0ssRUFDQTN1QixFQUFBdWtCLEdBQUFvSyxFQUFBdmpCLEdBR0EyZ0IsSUFDQTZDLEVBQUEsTUFBQXJLLEVBQUE1SixHQUFBRyxHQUVBK1QsRUFBQSxNQUFBdEssRUFBQTFKLEdBQUFELEdBUUFtVSxFQUFBN0UsSUFOQTRFLEVBQUFuRixFQUFBbUMsSUFFQXpQLEVBQUF1UyxHQUlBRSxFQUZBQSxFQUFBelMsRUFBQXdTLElBSUFsRixFQUFBbUMsR0FBQWlELEVBQ0EvdUIsRUFBQThyQixHQUFBaUQsRUFBQUQsR0FHQWpPLEVBQUFFLGNBQUFqVSxHQUFBOU0sSUFTQXNmLGlCQUFBLENBQUEsV0FrRkEsQ0FDQXhTLEtBQUEsUUFDQWtWLFNBQUEsRUFDQUYsTUFBQSxPQUNBbkIsR0FuRkEsU0FBQXlCLEdBQ0EsSUFBQWtOLEVBZUE1RyxFQUNBcUYsRUFDQXdCLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FwQixFQUNBcUIsRUFDQUMsRUFHQXJILEVBQ0FWLEVBQ0FnSSxFQUNBemtCLEVBM0JBeVYsRUFBQXVCLEVBQUF2QixNQUNBL1QsRUFBQXNWLEVBQUF0VixLQUNBZ2hCLEVBQUFqTixFQUFBRyxTQUFBK0osTUFDQXBCLEVBQUE5SSxFQUFBRSxjQUFBNEksY0FDQXhGLEVBQUFwRSxHQUFBYyxFQUFBcmxCLFdBQ0F5dUIsRUFBQWhHLEdBQUFFLEdBRUFLLEVBREEsR0FBQSxDQUFBMUosR0FBQUYsSUFBQXRhLFFBQUE2akIsR0FDQSxTQUFBLFFBRUEySixHQUFBbkUsSUFJQWpCLEVBQUE3SCxFQUFBRSxjQUFBalUsRUFBQSxlQUFBd2MsUUFDQXlFLEVBQUEvUSxHQUFBOFEsR0FDQXlCLEVBQUEsTUFBQXRGLEVBQUF0UCxHQUFBRyxHQUNBMFUsRUFBQSxNQUFBdkYsRUFBQXBQLEdBQUFELEdBQ0E2VSxFQUFBNU8sRUFBQTBDLE1BQUEvRSxVQUFBZ0csR0FBQTNELEVBQUEwQyxNQUFBL0UsVUFBQXlMLEdBQUFOLEVBQUFNLEdBQUFwSixFQUFBMEMsTUFBQWhGLE9BQUFpRyxHQUNBa0wsRUFBQS9GLEVBQUFNLEdBQUFwSixFQUFBMEMsTUFBQS9FLFVBQUF5TCxHQUVBMEYsR0FEQXJCLEVBQUFyUSxHQUFBNlAsSUFDQSxNQUFBN0QsRUFBQXFFLEVBQUE1SSxjQUFBLEVBQUE0SSxFQUFBM0ksYUFBQSxFQUFBLEVBQ0FpSyxFQUFBSCxFQUFBLEVBQUFDLEVBQUEsRUFHQW5ILEVBQUFHLEVBQUE2RyxHQUNBMUgsRUFBQThILEVBQUE1QixFQUFBdkosR0FBQWtFLEVBQUE4RyxHQUVBcGtCLEVBQUE4ZSxHQUFBM0IsRUFEQXNILEVBQUFGLEVBQUEsRUFBQTVCLEVBQUF2SixHQUFBLEVBQUFvTCxFQUNBL0gsR0FHQWhILEVBQUFFLGNBQUFqVSxLQUFBd2lCLEVBQUEsSUFEQXJGLEdBQ0E3ZSxFQUFBa2tCLEVBQUFRLGFBQUExa0IsRUFBQXlrQixFQUFBUCxLQW1EQWhOLE9BaERBLFNBQUFJLEdBQ0EsSUFBQTdCLEVBQUE2QixFQUFBN0IsTUFDQWxmLEVBQUErZ0IsRUFBQS9nQixRQUNBbUwsRUFBQTRWLEVBQUE1VixLQUNBaWpCLEVBQUFwdUIsRUFBQTRZLFFBQ0F1VCxPQUFBLElBQUFpQyxFQUFBLHNCQUFBQSxFQUNBMUcsRUFBQTFuQixFQUFBMm5CLFFBQ0FBLE9BQUEsSUFBQUQsRUFBQSxFQUFBQSxFQUVBLE1BQUF5RSxJQUtBLGlCQUFBQSxLQUNBQSxFQUFBak4sRUFBQUcsU0FBQXpDLE9BQUF5UixjQUFBbEMsTUFPQSxlQUFBN0wsRUFBQUMsSUFBQUMsV0FDQXZHLEVBQUFrUyxJQUNBcjNCLFFBQUFDLE1BQUEsQ0FBQSxzRUFBQSxzRUFBQSxjQUFBcVMsS0FBQSxPQUlBaFQsRUFBQThxQixFQUFBRyxTQUFBekMsT0FBQXVQLElBUUFqTixFQUFBRyxTQUFBK0osTUFBQStDLEVBQ0FqTixFQUFBRSxjQUFBalUsRUFBQSxlQUFBLENBQ0F3YyxRQUFBYixFQUFBLGlCQUFBYSxFQUFBQSxFQUFBWCxFQUFBVyxFQUFBbkwsTUFUQSxlQUFBOEQsRUFBQUMsSUFBQUMsVUFDQTFyQixRQUFBQyxNQUFBLENBQUEsc0VBQUEsWUFBQXFTLEtBQUEsU0FtQkFzVyxTQUFBLENBQUEsaUJBQ0FDLGlCQUFBLENBQUEsb0JBc0RBLENBQ0F4UyxLQUFBLE9BQ0FrVixTQUFBLEVBQ0FGLE1BQUEsT0FDQXhDLGlCQUFBLENBQUEsbUJBQ0FxQixHQWxDQSxTQUFBeUIsR0FDQSxJQUFBdkIsRUFBQXVCLEVBQUF2QixNQUNBL1QsRUFBQXNWLEVBQUF0VixLQUNBNmYsRUFBQTlMLEVBQUEwQyxNQUFBL0UsVUFDQXdHLEVBQUFuRSxFQUFBMEMsTUFBQWhGLE9BQ0E2TCxFQUFBdkosRUFBQUUsY0FBQWtQLGdCQUNBQyxFQUFBckgsR0FBQWhJLEVBQUEsQ0FDQXFJLGVBQUEsY0FFQWlILEVBQUF0SCxHQUFBaEksRUFBQSxDQUNBdUksYUFBQSxJQUVBZ0gsRUFBQWpHLEVBQUErRixFQUFBdkQsR0FDQTBELEVBQUFsRyxFQUFBZ0csRUFBQW5MLEVBQUFvRixHQUNBa0csRUFBQWpHLEdBQUErRixHQUNBRyxFQUFBbEcsR0FBQWdHLEdBQ0F4UCxFQUFBRSxjQUFBalUsR0FBQSxDQUNBc2pCLHlCQUFBQSxFQUNBQyxvQkFBQUEsRUFDQUMsa0JBQUFBLEVBQ0FDLGlCQUFBQSxHQUVBMVAsRUFBQUksV0FBQTFDLE9BQUF2aUIsT0FBQXNGLE9BQUEsR0FBQXVmLEVBQUFJLFdBQUExQyxPQUFBLENBQ0FpUywrQkFBQUYsRUFDQUcsc0JBQUFGLE9BY0FHLEVBQUFyUSxFQUFBLENBQ0FHLGlCQUFBQSxJQUdBenNCLEVBQUEyOEIsYUFBQUEsRUFDQTM4QixFQUFBeXNCLGlCQUFBQSxFQUNBenNCLEVBQUE4MEIsZUFBQUEsR0FDQTkwQixFQUFBc3NCLGdCQUFBQSxJLDBFQ2h3REF0c0IsRUFBQWdOLFdBdUNBLFNBQUE0dkIsR0FDQSxJQUFBQyxFQUFBQyxFQUFBRixHQUNBRyxFQUFBRixFQUFBLEdBQ0FHLEVBQUFILEVBQUEsR0FDQSxPQUFBLEdBQUFFLEVBQUFDLEdBQUEsRUFBQUEsR0ExQ0FoOUIsRUFBQWk5QixZQWlEQSxTQUFBTCxHQUNBLElBQUFNLEVBY0EzOUIsRUFiQXM5QixFQUFBQyxFQUFBRixHQUNBRyxFQUFBRixFQUFBLEdBQ0FHLEVBQUFILEVBQUEsR0FFQWxQLEVBQUEsSUFBQXdQLEVBVkEsU0FBQUosRUFBQUMsR0FDQSxPQUFBLEdBQUFELEVBQUFDLEdBQUEsRUFBQUEsRUFTQUksQ0FBQUwsRUFBQUMsSUFFQUssRUFBQSxFQUdBNU0sRUFBQSxFQUFBdU0sRUFDQUQsRUFBQSxFQUNBQSxFQUdBLElBQUF4OUIsRUFBQSxFQUFBQSxFQUFBa3hCLEVBQUFseEIsR0FBQSxFQUNBMjlCLEVBQ0FJLEVBQUFWLEVBQUFXLFdBQUFoK0IsS0FBQSxHQUNBKzlCLEVBQUFWLEVBQUFXLFdBQUFoK0IsRUFBQSxLQUFBLEdBQ0ErOUIsRUFBQVYsRUFBQVcsV0FBQWgrQixFQUFBLEtBQUEsRUFDQSs5QixFQUFBVixFQUFBVyxXQUFBaCtCLEVBQUEsSUFDQW91QixFQUFBMFAsS0FBQUgsR0FBQSxHQUFBLElBQ0F2UCxFQUFBMFAsS0FBQUgsR0FBQSxFQUFBLElBQ0F2UCxFQUFBMFAsS0FBQSxJQUFBSCxFQUdBLElBQUFGLElBQ0FFLEVBQ0FJLEVBQUFWLEVBQUFXLFdBQUFoK0IsS0FBQSxFQUNBKzlCLEVBQUFWLEVBQUFXLFdBQUFoK0IsRUFBQSxLQUFBLEVBQ0FvdUIsRUFBQTBQLEtBQUEsSUFBQUgsR0FHQSxJQUFBRixJQUNBRSxFQUNBSSxFQUFBVixFQUFBVyxXQUFBaCtCLEtBQUEsR0FDQSs5QixFQUFBVixFQUFBVyxXQUFBaCtCLEVBQUEsS0FBQSxFQUNBKzlCLEVBQUFWLEVBQUFXLFdBQUFoK0IsRUFBQSxLQUFBLEVBQ0FvdUIsRUFBQTBQLEtBQUFILEdBQUEsRUFBQSxJQUNBdlAsRUFBQTBQLEtBQUEsSUFBQUgsR0FHQSxPQUFBdlAsR0EzRkEzdEIsRUFBQXc5QixjQWtIQSxTQUFBQyxHQVFBLElBUEEsSUFBQVAsRUFDQXpNLEVBQUFnTixFQUFBdjlCLE9BQ0F3OUIsRUFBQWpOLEVBQUEsRUFDQWtOLEVBQUEsR0FJQXArQixFQUFBLEVBQUFxK0IsRUFBQW5OLEVBQUFpTixFQUFBbitCLEVBQUFxK0IsRUFBQXIrQixHQUhBLE1BSUFvK0IsRUFBQTl0QixLQUFBZ3VCLEVBQ0FKLEVBQUFsK0IsRUFBQXErQixFQUFBcitCLEVBTEEsTUFLQXErQixFQUFBcitCLEVBTEEsUUFVQSxHQUFBbStCLEdBQ0FSLEVBQUFPLEVBQUFoTixFQUFBLEdBQ0FrTixFQUFBOXRCLEtBQ0FpdUIsRUFBQVosR0FBQSxHQUNBWSxFQUFBWixHQUFBLEVBQUEsSUFDQSxPQUVBLEdBQUFRLElBQ0FSLEdBQUFPLEVBQUFoTixFQUFBLElBQUEsR0FBQWdOLEVBQUFoTixFQUFBLEdBQ0FrTixFQUFBOXRCLEtBQ0FpdUIsRUFBQVosR0FBQSxJQUNBWSxFQUFBWixHQUFBLEVBQUEsSUFDQVksRUFBQVosR0FBQSxFQUFBLElBQ0EsTUFJQSxPQUFBUyxFQUFBM29CLEtBQUEsS0EzSUEsSUFMQSxJQUFBOG9CLEVBQUEsR0FDQVIsRUFBQSxHQUNBSCxFQUFBLG9CQUFBOXdCLFdBQUFBLFdBQUF0RCxNQUVBakosRUFBQSxtRUFDQVAsRUFBQSxFQUFBa3hCLEVBQUEzd0IsRUFBQUksT0FBQVgsRUFBQWt4QixJQUFBbHhCLEVBQ0F1K0IsRUFBQXYrQixHQUFBTyxFQUFBUCxHQUNBKzlCLEVBQUF4OUIsRUFBQXk5QixXQUFBaCtCLElBQUFBLEVBUUEsU0FBQXU5QixFQUFBRixHQUNBLElBQUFuTSxFQUFBbU0sRUFBQTE4QixPQUVBLEdBQUEsRUFBQXV3QixFQUFBLEVBQ0EsTUFBQSxJQUFBNXdCLE1BQUEsa0RBS0EsSUFBQWs5QixFQUFBSCxFQUFBcndCLFFBQUEsS0FPQSxPQU5BLElBQUF3d0IsSUFBQUEsRUFBQXRNLEdBTUEsQ0FBQXNNLEVBSkFBLElBQUF0TSxFQUNBLEVBQ0EsRUFBQXNNLEVBQUEsR0FzRUEsU0FBQWMsRUFBQUosRUFBQWw3QixFQUFBOG5CLEdBR0EsSUFGQSxJQUFBNlMsRUFSQXBZLEVBU0FWLEVBQUEsR0FDQTdrQixFQUFBZ0QsRUFBQWhELEVBQUE4cUIsRUFBQTlxQixHQUFBLEVBQ0EyOUIsR0FDQU8sRUFBQWwrQixJQUFBLEdBQUEsV0FDQWsrQixFQUFBbCtCLEVBQUEsSUFBQSxFQUFBLFFBQ0EsSUFBQWsrQixFQUFBbCtCLEVBQUEsSUFDQTZrQixFQUFBdlUsS0FkQWl1QixHQURBaFosRUFlQW9ZLElBZEEsR0FBQSxJQUNBWSxFQUFBaFosR0FBQSxHQUFBLElBQ0FnWixFQUFBaFosR0FBQSxFQUFBLElBQ0FnWixFQUFBLEdBQUFoWixJQWFBLE9BQUFWLEVBQUFwUCxLQUFBLElBakdBc29CLEVBQUEsSUFBQUMsV0FBQSxJQUFBLEdBQ0FELEVBQUEsSUFBQUMsV0FBQSxJQUFBLEksa0RDVEEsSUFBQVEsRUFBQXIrQixFQUFBLGFBQ0FzK0IsRUFBQXQrQixFQUFBLFdBQ0F1K0IsRUFDQSxtQkFBQTF1QixRQUFBLG1CQUFBQSxPQUFBMnVCLElBQ0EzdUIsT0FBQTJ1QixJQUFBLDhCQUNBLEtBRUFsK0IsRUFBQW1NLE9BQUFBLEVBQ0FuTSxFQUFBbStCLFdBbVRBLFNBQUFqK0IsSUFDQUEsR0FBQUEsSUFDQUEsRUFBQSxHQUVBLE9BQUFpTSxFQUFBaXlCLE9BQUFsK0IsSUF0VEFGLEVBQUFxK0Isa0JBQUEsR0FFQSxJQUFBQyxFQUFBLFdBd0RBLFNBQUFDLEVBQUFyK0IsR0FDQSxHQUFBbytCLEVBQUFwK0IsRUFDQSxNQUFBLElBQUFzK0IsV0FBQSxjQUFBdCtCLEVBQUEsa0NBR0EsSUFBQXUrQixFQUFBLElBQUFweUIsV0FBQW5NLEdBRUEsT0FEQStILE9BQUFZLGVBQUE0MUIsRUFBQXR5QixFQUFBL0QsV0FDQXEyQixFQWFBLFNBQUF0eUIsRUFBQXlTLEVBQUE4ZixFQUFBeCtCLEdBRUEsR0FBQSxpQkFBQTBlLEVBUUEsT0FBQWlFLEVBQUFqRSxFQUFBOGYsRUFBQXgrQixHQVBBLEdBQUEsaUJBQUF3K0IsRUFDQSxNQUFBLElBQUEvdUIsVUFDQSxzRUFHQSxPQUFBZ3ZCLEVBQUEvZixHQU9BLFNBQUFpRSxFQUFBOWYsRUFBQTI3QixFQUFBeCtCLEdBQ0EsR0FBQSxpQkFBQTZDLEVBQ0EsT0F1SEEsU0FBQTY3QixFQUFBN2IsR0FDQSxpQkFBQUEsR0FBQSxLQUFBQSxJQUNBQSxFQUFBLFFBR0EsSUFBQTVXLEVBQUEweUIsV0FBQTliLEdBQ0EsTUFBQSxJQUFBcFQsVUFBQSxxQkFBQW9ULEdBR0EsSUFBQTdpQixFQUFBLEVBQUE4TSxFQUFBNHhCLEVBQUE3YixHQUNBMGIsRUFBQUYsRUFBQXIrQixHQUVBNCtCLEVBQUFMLEVBQUEzeUIsTUFBQTh5QixFQUFBN2IsR0FFQStiLElBQUE1K0IsSUFJQXUrQixFQUFBQSxFQUFBM3hCLE1BQUEsRUFBQWd5QixJQUdBLE9BQUFMLEVBNUlBTSxDQUFBaDhCLEVBQUEyN0IsR0FHQSxHQUFBM1osWUFBQWlhLE9BQUFqOEIsR0FDQSxPQUFBazhCLEVBQUFsOEIsR0FHQSxHQUFBLE1BQUFBLEVBQ0EsTUFBQSxJQUFBNE0sVUFDQSx5SEFDQTVNLEdBSUEsR0FBQW04QixFQUFBbjhCLEVBQUFnaUIsY0FDQWhpQixHQUFBbThCLEVBQUFuOEIsRUFBQWtLLE9BQUE4WCxhQUNBLE9BQUFvYSxFQUFBcDhCLEVBQUEyN0IsRUFBQXgrQixHQUdBLEdBQUEsb0JBQUFrL0Isb0JBQ0FGLEVBQUFuOEIsRUFBQXE4QixvQkFDQXI4QixHQUFBbThCLEVBQUFuOEIsRUFBQWtLLE9BQUFteUIsb0JBQ0EsT0FBQUQsRUFBQXA4QixFQUFBMjdCLEVBQUF4K0IsR0FHQSxHQUFBLGlCQUFBNkMsRUFDQSxNQUFBLElBQUE0TSxVQUNBLHlFQUlBLElBQUEwdkIsRUFBQXQ4QixFQUFBczhCLFNBQUF0OEIsRUFBQXM4QixVQUNBLEdBQUEsTUFBQUEsR0FBQUEsSUFBQXQ4QixFQUNBLE9BQUFvSixFQUFBMFcsS0FBQXdjLEVBQUFYLEVBQUF4K0IsR0FHQSxJQUFBK0ksRUE0SUEsU0FBQXEyQixHQUNBLEdBQUFuekIsRUFBQW96QixTQUFBRCxHQUFBLENBQ0EsSUFBQTdPLEVBQUEsRUFBQStPLEVBQUFGLEVBQUFwL0IsUUFDQXUrQixFQUFBRixFQUFBOU4sR0FFQSxPQUFBLElBQUFnTyxFQUFBditCLE9BQ0F1K0IsR0FHQWEsRUFBQUcsS0FBQWhCLEVBQUEsRUFBQSxFQUFBaE8sR0FDQWdPLEdBR0EsUUFBQXZ6QixJQUFBbzBCLEVBQUFwL0IsT0FDQSxNQUFBLGlCQUFBby9CLEVBQUFwL0IsUUFBQXcvQixFQUFBSixFQUFBcC9CLFFBQ0FxK0IsRUFBQSxHQUVBVSxFQUFBSyxHQUdBLEdBQUEsV0FBQUEsRUFBQW41QixNQUFBNEMsTUFBQTJYLFFBQUE0ZSxFQUFBcnpCLE1BQ0EsT0FBQWd6QixFQUFBSyxFQUFBcnpCLE1BaktBMHpCLENBQUE1OEIsR0FDQSxHQUFBa0csRUFBQSxPQUFBQSxFQUVBLEdBQUEsb0JBQUFzRyxRQUFBLE1BQUFBLE9BQUFxd0IsYUFDQSxtQkFBQTc4QixFQUFBd00sT0FBQXF3QixhQUNBLE9BQUF6ekIsRUFBQTBXLEtBQ0E5ZixFQUFBd00sT0FBQXF3QixhQUFBLFVBQUFsQixFQUFBeCtCLEdBSUEsTUFBQSxJQUFBeVAsVUFDQSx5SEFDQTVNLEdBcUJBLFNBQUE4OEIsRUFBQUMsR0FDQSxHQUFBLGlCQUFBQSxFQUNBLE1BQUEsSUFBQW53QixVQUFBLDBDQUNBLEdBQUFtd0IsRUFBQSxFQUNBLE1BQUEsSUFBQXRCLFdBQUEsY0FBQXNCLEVBQUEsa0NBNEJBLFNBQUFuQixFQUFBbUIsR0FFQSxPQURBRCxFQUFBQyxHQUNBdkIsRUFBQXVCLEVBQUEsRUFBQSxFQUFBLEVBQUFOLEVBQUFNLElBd0NBLFNBQUFiLEVBQUFjLEdBR0EsSUFGQSxJQUFBNy9CLEVBQUE2L0IsRUFBQTcvQixPQUFBLEVBQUEsRUFBQSxFQUFBcy9CLEVBQUFPLEVBQUE3L0IsUUFDQXUrQixFQUFBRixFQUFBcitCLEdBQ0FYLEVBQUEsRUFBQUEsRUFBQVcsRUFBQVgsR0FBQSxFQUNBay9CLEVBQUFsL0IsR0FBQSxJQUFBd2dDLEVBQUF4Z0MsR0FFQSxPQUFBay9CLEVBR0EsU0FBQVUsRUFBQVksRUFBQUMsRUFBQTkvQixHQUNBLEdBQUE4L0IsRUFBQSxHQUFBRCxFQUFBL3lCLFdBQUFnekIsRUFDQSxNQUFBLElBQUF4QixXQUFBLHdDQUdBLEdBQUF1QixFQUFBL3lCLFdBQUFnekIsR0FBQTkvQixHQUFBLEdBQ0EsTUFBQSxJQUFBcytCLFdBQUEsd0NBR0EsSUFFQUMsT0FEQXZ6QixJQUFBODBCLFFBQUE5MEIsSUFBQWhMLEVBQ0EsSUFBQW1NLFdBQUEwekIsUUFDQTcwQixJQUFBaEwsRUFDQSxJQUFBbU0sV0FBQTB6QixFQUFBQyxHQUVBLElBQUEzekIsV0FBQTB6QixFQUFBQyxFQUFBOS9CLEdBTUEsT0FGQStILE9BQUFZLGVBQUE0MUIsRUFBQXR5QixFQUFBL0QsV0FFQXEyQixFQTRCQSxTQUFBZSxFQUFBdC9CLEdBR0EsR0FBQW8rQixHQUFBcCtCLEVBQ0EsTUFBQSxJQUFBcytCLFdBQUEsMERBQ0FGLEVBQUF0Z0IsU0FBQSxJQUFBLFVBRUEsT0FBQSxFQUFBOWQsRUE4RkEsU0FBQThNLEVBQUE0eEIsRUFBQTdiLEdBQ0EsR0FBQTVXLEVBQUFvekIsU0FBQVgsR0FDQSxPQUFBQSxFQUFBMStCLE9BRUEsR0FBQTZrQixZQUFBaWEsT0FBQUosSUFBQU0sRUFBQU4sRUFBQTdaLGFBQ0EsT0FBQTZaLEVBQUE1eEIsV0FFQSxHQUFBLGlCQUFBNHhCLEVBQ0EsTUFBQSxJQUFBanZCLFVBQ0Esa0dBQ0FpdkIsR0FJQSxJQUFBbk8sRUFBQW1PLEVBQUExK0IsT0FDQSsvQixFQUFBLEVBQUF4eUIsVUFBQXZOLFNBQUEsSUFBQXVOLFVBQUEsR0FDQSxJQUFBd3lCLEdBQUEsSUFBQXhQLEVBQUEsT0FBQSxFQUlBLElBREEsSUFBQXlQLEdBQUEsSUFFQSxPQUFBbmQsR0FDQSxJQUFBLFFBQ0EsSUFBQSxTQUNBLElBQUEsU0FDQSxPQUFBME4sRUFDQSxJQUFBLE9BQ0EsSUFBQSxRQUNBLE9BQUEwUCxFQUFBdkIsR0FBQTErQixPQUNBLElBQUEsT0FDQSxJQUFBLFFBQ0EsSUFBQSxVQUNBLElBQUEsV0FDQSxPQUFBLEVBQUF1d0IsRUFDQSxJQUFBLE1BQ0EsT0FBQUEsSUFBQSxFQUNBLElBQUEsU0FDQSxPQUFBMlAsRUFBQXhCLEdBQUExK0IsT0FDQSxRQUNBLEdBQUFnZ0MsRUFDQSxPQUFBRCxHQUFBLEVBQUFFLEVBQUF2QixHQUFBMStCLE9BRUE2aUIsR0FBQSxHQUFBQSxHQUFBekgsY0FDQTRrQixHQUFBLEdBb0ZBLFNBQUFHLEVBQUFwM0IsRUFBQTdKLEVBQUFrZSxHQUNBLElBQUEvZCxFQUFBMEosRUFBQTdKLEdBQ0E2SixFQUFBN0osR0FBQTZKLEVBQUFxVSxHQUNBclUsRUFBQXFVLEdBQUEvZCxFQTRJQSxTQUFBK2dDLEVBQUFyekIsRUFBQXFYLEVBQUEwYixFQUFBamQsRUFBQXdkLEdBRUEsR0FBQSxJQUFBdHpCLEVBQUEvTSxPQUFBLE9BQUEsRUFtQkEsR0FoQkEsaUJBQUE4L0IsR0FDQWpkLEVBQUFpZCxFQUNBQSxFQUFBLEdBQ0EsV0FBQUEsRUFDQUEsRUFBQSxXQUNBQSxHQUFBLGFBQ0FBLEdBQUEsWUFHQU4sRUFEQU0sR0FBQUEsS0FHQUEsRUFBQU8sRUFBQSxFQUFBdHpCLEVBQUEvTSxPQUFBLEdBSUE4L0IsRUFBQSxJQUFBQSxFQUFBL3lCLEVBQUEvTSxPQUFBOC9CLEdBQ0FBLEdBQUEveUIsRUFBQS9NLE9BQUEsQ0FDQSxHQUFBcWdDLEVBQUEsT0FBQSxFQUNBUCxFQUFBL3lCLEVBQUEvTSxPQUFBLE9BQ0EsR0FBQTgvQixFQUFBLEVBQUEsQ0FDQSxJQUFBTyxFQUNBLE9BQUEsRUFEQVAsRUFBQSxFQVVBLEdBTEEsaUJBQUExYixJQUNBQSxFQUFBblksRUFBQTBXLEtBQUF5QixFQUFBdkIsSUFJQTVXLEVBQUFvekIsU0FBQWpiLEdBRUEsT0FBQSxJQUFBQSxFQUFBcGtCLFFBQ0EsRUFFQXNnQyxFQUFBdnpCLEVBQUFxWCxFQUFBMGIsRUFBQWpkLEVBQUF3ZCxHQUNBLEdBQUEsaUJBQUFqYyxFQUVBLE9BREFBLEdBQUEsSUFDQSxtQkFBQWpZLFdBQUFqRSxVQUFBbUUsUUFDQWcwQixFQUNBbDBCLFdBQUFqRSxVQUFBbUUsUUFBQXRNLEtBQUFnTixFQUFBcVgsRUFBQTBiLEdBRUEzekIsV0FBQWpFLFVBQUE4TixZQUFBalcsS0FBQWdOLEVBQUFxWCxFQUFBMGIsR0FHQVEsRUFBQXZ6QixFQUFBLENBQUFxWCxHQUFBMGIsRUFBQWpkLEVBQUF3ZCxHQUdBLE1BQUEsSUFBQTV3QixVQUFBLHdDQUdBLFNBQUE2d0IsRUFBQTdTLEVBQUFySixFQUFBMGIsRUFBQWpkLEVBQUF3ZCxHQUNBLElBQUFFLEVBQUEsRUFDQUMsRUFBQS9TLEVBQUF6dEIsT0FDQXlnQyxFQUFBcmMsRUFBQXBrQixPQUVBLFFBQUFnTCxJQUFBNlgsSUFFQSxVQURBQSxFQUFBcFcsT0FBQW9XLEdBQUF6SCxnQkFDQSxVQUFBeUgsR0FDQSxZQUFBQSxHQUFBLGFBQUFBLEdBQUEsQ0FDQSxHQUFBNEssRUFBQXp0QixPQUFBLEdBQUFva0IsRUFBQXBrQixPQUFBLEVBQ0EsT0FBQSxFQUdBd2dDLEdBREFELEVBQUEsRUFFQUUsR0FBQSxFQUNBWCxHQUFBLEVBSUEsU0FBQVksRUFBQW5DLEVBQUFsL0IsR0FDQSxPQUFBLElBQUFraEMsRUFDQWhDLEVBQUFsL0IsR0FFQWsvQixFQUFBb0MsYUFBQXRoQyxFQUFBa2hDLEdBS0EsR0FBQUYsRUFFQSxJQURBLElBQUFPLEdBQUEsRUFDQXZoQyxFQUFBeWdDLEVBQUF6Z0MsRUFBQW1oQyxFQUFBbmhDLElBQ0EsR0FBQXFoQyxFQUFBalQsRUFBQXB1QixLQUFBcWhDLEVBQUF0YyxHQUFBLElBQUF3YyxFQUFBLEVBQUF2aEMsRUFBQXVoQyxJQUVBLElBREEsSUFBQUEsSUFBQUEsRUFBQXZoQyxHQUNBQSxFQUFBdWhDLEVBQUEsSUFBQUgsRUFBQSxPQUFBRyxFQUFBTCxPQUVBLElBQUFLLElBQUF2aEMsR0FBQUEsRUFBQXVoQyxHQUNBQSxHQUFBLE9BS0EsSUFEQUosRUFBQVYsRUFBQVcsSUFBQVgsRUFBQVUsRUFBQUMsR0FDQXBoQyxFQUFBeWdDLEVBQUEsR0FBQXpnQyxFQUFBQSxJQUFBLENBRUEsSUFEQSxJQUFBd2hDLEdBQUEsRUFDQUMsRUFBQSxFQUFBQSxFQUFBTCxFQUFBSyxJQUNBLEdBQUFKLEVBQUFqVCxFQUFBcHVCLEVBQUF5aEMsS0FBQUosRUFBQXRjLEVBQUEwYyxHQUFBLENBQ0FELEdBQUEsRUFDQSxNQUdBLEdBQUFBLEVBQUEsT0FBQXhoQyxFQUlBLE9BQUEsRUFlQSxTQUFBMGhDLEVBQUF4QyxFQUFBRyxFQUFBdm5CLEVBQUFuWCxHQUNBbVgsRUFBQTZwQixPQUFBN3BCLElBQUEsRUFDQSxJQUFBOHBCLEVBQUExQyxFQUFBditCLE9BQUFtWCxJQUNBblgsR0FJQWloQyxHQURBamhDLEVBQUFnaEMsT0FBQWhoQyxPQUZBQSxFQUFBaWhDLEdBUUEsSUFBQUMsRUFBQXhDLEVBQUExK0IsT0FFQWtoQyxFQUFBLEVBQUFsaEMsSUFDQUEsRUFBQWtoQyxFQUFBLEdBRUEsSUFBQSxJQUFBN2hDLEVBQUEsRUFBQUEsRUFBQVcsSUFBQVgsRUFBQSxDQUNBLElBQUE4aEMsRUFBQTc2QixTQUFBbzRCLEVBQUF0NEIsT0FBQSxFQUFBL0csRUFBQSxHQUFBLElBQ0EsR0FBQW1nQyxFQUFBMkIsR0FBQSxPQUFBOWhDLEVBQ0FrL0IsRUFBQXBuQixFQUFBOVgsR0FBQThoQyxFQUVBLE9BQUE5aEMsRUFPQSxTQUFBK2hDLEVBQUE3QyxFQUFBRyxFQUFBdm5CLEVBQUFuWCxHQUNBLE9BQUFxaEMsRUEyM0JBLFNBQUExYyxHQUVBLElBREEsSUFBQTJjLEVBQUEsR0FDQWppQyxFQUFBLEVBQUFBLEVBQUFzbEIsRUFBQTNrQixTQUFBWCxFQUVBaWlDLEVBQUEzeEIsS0FBQSxJQUFBZ1YsRUFBQTBZLFdBQUFoK0IsSUFFQSxPQUFBaWlDLEVBajRCQUMsQ0FBQTdDLEdBQUFILEVBQUFwbkIsRUFBQW5YLEdBV0EsU0FBQXdoQyxFQUFBakQsRUFBQUcsRUFBQXZuQixFQUFBblgsR0FDQSxPQUFBcWhDLEVBdzNCQSxTQUFBMWMsRUFBQThjLEdBR0EsSUFGQSxJQUFBbGlDLEVBQUFtaUMsRUFBQUMsRUFDQUwsRUFBQSxHQUNBamlDLEVBQUEsRUFBQUEsRUFBQXNsQixFQUFBM2tCLFdBQ0F5aEMsR0FBQSxHQUFBLEtBREFwaUMsRUFHQUUsRUFBQW9sQixFQUFBMFksV0FBQWgrQixHQUNBcWlDLEVBQUFuaUMsR0FBQSxFQUNBb2lDLEVBQUFwaUMsRUFBQSxJQUNBK2hDLEVBQUEzeEIsS0FBQWd5QixHQUNBTCxFQUFBM3hCLEtBQUEreEIsR0FHQSxPQUFBSixFQXI0QkFNLENBQUFsRCxFQUFBSCxFQUFBditCLE9BQUFtWCxHQUFBb25CLEVBQUFwbkIsRUFBQW5YLEdBaUZBLFNBQUE2aEMsRUFBQXRELEVBQUFsOEIsRUFBQThuQixHQUNBLE9BQUEsSUFBQTluQixHQUFBOG5CLElBQUFvVSxFQUFBditCLE9BQ0E2OUIsRUFBQVAsY0FBQWlCLEdBRUFWLEVBQUFQLGNBQUFpQixFQUFBM3hCLE1BQUF2SyxFQUFBOG5CLElBSUEsU0FBQTJYLEVBQUF2RCxFQUFBbDhCLEVBQUE4bkIsR0FDQUEsRUFBQXFHLEtBQUE4RCxJQUFBaUssRUFBQXYrQixPQUFBbXFCLEdBSUEsSUFIQSxJQUFBNFgsRUFBQSxHQUVBMWlDLEVBQUFnRCxFQUNBaEQsRUFBQThxQixHQUFBLENBQ0EsSUFRQTZYLEVBQUFDLEVBQUFDLEVBQUFDLEVBUkFDLEVBQUE3RCxFQUFBbC9CLEdBQ0FnakMsRUFBQSxLQUNBQyxFQUFBLElBQUFGLEVBQUEsRUFDQSxJQUFBQSxFQUFBLEVBQ0EsSUFBQUEsRUFBQSxFQUNBLEVBRUEsR0FBQS9pQyxFQUFBaWpDLEdBQUFuWSxFQUdBLE9BQUFtWSxHQUNBLEtBQUEsRUFDQUYsRUFBQSxNQUNBQyxFQUFBRCxHQUVBLE1BQ0EsS0FBQSxFQUVBLE1BQUEsS0FEQUosRUFBQXpELEVBQUFsL0IsRUFBQSxNQUdBLEtBREE4aUMsR0FBQSxHQUFBQyxJQUFBLEVBQUEsR0FBQUosS0FFQUssRUFBQUYsR0FHQSxNQUNBLEtBQUEsRUFDQUgsRUFBQXpELEVBQUFsL0IsRUFBQSxHQUNBNGlDLEVBQUExRCxFQUFBbC9CLEVBQUEsR0FDQSxNQUFBLElBQUEyaUMsSUFBQSxNQUFBLElBQUFDLElBRUEsTUFEQUUsR0FBQSxHQUFBQyxJQUFBLElBQUEsR0FBQUosSUFBQSxFQUFBLEdBQUFDLEtBQ0FFLEVBQUEsT0FBQSxNQUFBQSxLQUNBRSxFQUFBRixHQUdBLE1BQ0EsS0FBQSxFQUNBSCxFQUFBekQsRUFBQWwvQixFQUFBLEdBQ0E0aUMsRUFBQTFELEVBQUFsL0IsRUFBQSxHQUNBNmlDLEVBQUEzRCxFQUFBbC9CLEVBQUEsR0FDQSxNQUFBLElBQUEyaUMsSUFBQSxNQUFBLElBQUFDLElBQUEsTUFBQSxJQUFBQyxJQUVBLE9BREFDLEdBQUEsR0FBQUMsSUFBQSxJQUFBLEdBQUFKLElBQUEsSUFBQSxHQUFBQyxJQUFBLEVBQUEsR0FBQUMsSUFDQUMsRUFBQSxVQUNBRSxFQUFBRixHQU1BLE9BQUFFLEdBR0FBLEVBQUEsTUFDQUMsRUFBQSxHQUNBLE1BQUFELElBRUFBLEdBQUEsTUFDQU4sRUFBQXB5QixLQUFBMHlCLElBQUEsR0FBQSxLQUFBLE9BQ0FBLEVBQUEsTUFBQSxLQUFBQSxHQUdBTixFQUFBcHlCLEtBQUEweUIsR0FDQWhqQyxHQUFBaWpDLEVBR0EsT0FRQSxTQUFBQyxHQUNBLElBQUFoUyxFQUFBZ1MsRUFBQXZpQyxPQUNBLEdBQUF1d0IsR0FBQWlTLEVBQ0EsT0FBQS8xQixPQUFBQyxhQUFBQyxNQUFBRixPQUFBODFCLEdBSUEsSUFBQVIsRUFBQSxHQUNBMWlDLEVBQUEsRUFDQSxLQUFBQSxFQUFBa3hCLEdBQ0F3UixHQUFBdDFCLE9BQUFDLGFBQUFDLE1BQ0FGLE9BQ0E4MUIsRUFBQTMxQixNQUFBdk4sRUFBQUEsR0FBQW1qQyxJQUdBLE9BQUFULEVBdkJBVSxDQUFBVixHQTc5QkFqaUMsRUFBQTRpQyxXQUFBdEUsR0FnQkFueUIsRUFBQTAyQixvQkFVQSxXQUVBLElBQ0EsSUFBQWxWLEVBQUEsSUFBQXRoQixXQUFBLEdBQ0F5MkIsRUFBQSxDQUFBQyxJQUFBLFdBQUEsT0FBQSxLQUdBLE9BRkE5NkIsT0FBQVksZUFBQWk2QixFQUFBejJCLFdBQUFqRSxXQUNBSCxPQUFBWSxlQUFBOGtCLEVBQUFtVixHQUNBLEtBQUFuVixFQUFBb1YsTUFDQSxNQUFBNWpDLEdBQ0EsT0FBQSxHQW5CQTZqQyxLQUVBLG9CQUFBdGdDLFNBQ0EsbUJBQUFBLFFBQUFDLE9BQ0FELFFBQUFDLE1BQ0EsaUpBa0JBc0YsT0FBQUMsZUFBQWlFLEVBQUEvRCxVQUFBLFNBQUEsQ0FDQUssWUFBQSxFQUNBRCxJQUFBLFdBQ0EsR0FBQTJELEVBQUFvekIsU0FBQXo2QixNQUNBLE9BQUFBLEtBQUFtSSxVQUlBaEYsT0FBQUMsZUFBQWlFLEVBQUEvRCxVQUFBLFNBQUEsQ0FDQUssWUFBQSxFQUNBRCxJQUFBLFdBQ0EsR0FBQTJELEVBQUFvekIsU0FBQXo2QixNQUNBLE9BQUFBLEtBQUFrN0IsY0FxQ0E3ekIsRUFBQTgyQixTQUFBLEtBZ0VBOTJCLEVBQUEwVyxLQUNBQSxFQUtBNWEsT0FBQVksZUFBQXNELEVBQUEvRCxVQUFBaUUsV0FBQWpFLFdBQ0FILE9BQUFZLGVBQUFzRCxFQUFBRSxZQThCQUYsRUFBQWl5QixNQUFBLFNBQUEwQixFQUFBb0QsRUFBQW5nQixHQUNBLE9BckJBbWdCLEVBcUJBQSxFQXJCQW5nQixFQXFCQUEsRUFwQkE4YyxFQURBQyxFQXFCQUEsR0FuQkFBLEdBQUEsUUFHQTUwQixJQUFBZzRCLEVBRkEzRSxFQUFBdUIsR0FNQSxpQkFBQS9jLEVBQ0F3YixFQUFBdUIsR0FBQW9ELEtBQUFBLEVBQUFuZ0IsR0FDQXdiLEVBQUF1QixHQUFBb0QsS0FBQUEsR0FYQSxJQUFBcEQsRUFBQW9ELEVBQUFuZ0IsR0FnQ0E1VyxFQUFBd3lCLFlBQ0FBLEVBS0F4eUIsRUFBQWczQixnQkFDQXhFLEVBc0dBeHlCLEVBQUFvekIsU0FBQSxTQUFBdDJCLEdBQ0EsT0FBQSxNQUFBQSxJQUFBLElBQUFBLEVBQUFtNkIsV0FDQW42QixJQUFBa0QsRUFBQS9ELFdBR0ErRCxFQUFBazNCLFFBQUEsU0FBQXpqQyxFQUFBcUosR0FHQSxHQUZBaTJCLEVBQUF0L0IsRUFBQXlNLGNBQUF6TSxFQUFBdU0sRUFBQTBXLEtBQUFqakIsRUFBQUEsRUFBQXlYLE9BQUF6WCxFQUFBb04sYUFDQWt5QixFQUFBajJCLEVBQUFvRCxjQUFBcEQsRUFBQWtELEVBQUEwVyxLQUFBNVosRUFBQUEsRUFBQW9PLE9BQUFwTyxFQUFBK0QsY0FDQWIsRUFBQW96QixTQUFBMy9CLEtBQUF1TSxFQUFBb3pCLFNBQUF0MkIsR0FDQSxNQUFBLElBQUEwRyxVQUNBLHlFQUlBLEdBQUEvUCxJQUFBcUosRUFBQSxPQUFBLEVBS0EsSUFIQSxJQUFBK2QsRUFBQXBuQixFQUFBTSxPQUNBMk8sRUFBQTVGLEVBQUEvSSxPQUVBWCxFQUFBLEVBQUFreEIsRUFBQUMsS0FBQThELElBQUF4TixFQUFBblksR0FBQXRQLEVBQUFreEIsSUFBQWx4QixFQUNBLEdBQUFLLEVBQUFMLEtBQUEwSixFQUFBMUosR0FBQSxDQUNBeW5CLEVBQUFwbkIsRUFBQUwsR0FDQXNQLEVBQUE1RixFQUFBMUosR0FDQSxNQUlBLE9BQUF5bkIsRUFBQW5ZLEdBQUEsRUFDQUEsRUFBQW1ZLEVBQUEsRUFDQSxHQUdBN2EsRUFBQTB5QixXQUFBLFNBQUE5YixHQUNBLE9BQUFwVyxPQUFBb1csR0FBQXpILGVBQ0EsSUFBQSxNQUNBLElBQUEsT0FDQSxJQUFBLFFBQ0EsSUFBQSxRQUNBLElBQUEsU0FDQSxJQUFBLFNBQ0EsSUFBQSxTQUNBLElBQUEsT0FDQSxJQUFBLFFBQ0EsSUFBQSxVQUNBLElBQUEsV0FDQSxPQUFBLEVBQ0EsUUFDQSxPQUFBLElBSUFuUCxFQUFBdEssT0FBQSxTQUFBbUcsRUFBQTlILEdBQ0EsSUFBQTZJLE1BQUEyWCxRQUFBMVksR0FDQSxNQUFBLElBQUEySCxVQUFBLCtDQUdBLEdBQUEsSUFBQTNILEVBQUE5SCxPQUNBLE9BQUFpTSxFQUFBaXlCLE1BQUEsR0FJQSxRQUFBbHpCLElBQUFoTCxFQUVBLElBQUFYLEVBREFXLEVBQUEsRUFDQVgsRUFBQXlJLEVBQUE5SCxTQUFBWCxFQUNBVyxHQUFBOEgsRUFBQXpJLEdBQUFXLE9BTUEsSUFGQSxJQUFBK00sRUFBQWQsRUFBQXd5QixZQUFBeitCLEdBQ0FvakMsRUFBQSxFQUNBL2pDLEVBQUEsRUFBQUEsRUFBQXlJLEVBQUE5SCxTQUFBWCxFQUFBLENBQ0EsSUFBQWsvQixFQUFBejJCLEVBQUF6SSxHQUlBLEdBSEEyL0IsRUFBQVQsRUFBQXB5QixjQUNBb3lCLEVBQUF0eUIsRUFBQTBXLEtBQUE0YixLQUVBdHlCLEVBQUFvekIsU0FBQWQsR0FDQSxNQUFBLElBQUE5dUIsVUFBQSwrQ0FFQTh1QixFQUFBZ0IsS0FBQXh5QixFQUFBcTJCLEdBQ0FBLEdBQUE3RSxFQUFBditCLE9BRUEsT0FBQStNLEdBa0RBZCxFQUFBYSxXQUFBQSxFQThFQWIsRUFBQS9ELFVBQUFnN0IsV0FBQSxFQVFBajNCLEVBQUEvRCxVQUFBbTdCLE9BQUEsV0FDQSxJQUFBOVMsRUFBQTNyQixLQUFBNUUsT0FDQSxHQUFBdXdCLEVBQUEsR0FBQSxFQUNBLE1BQUEsSUFBQStOLFdBQUEsNkNBRUEsSUFBQSxJQUFBai9CLEVBQUEsRUFBQUEsRUFBQWt4QixFQUFBbHhCLEdBQUEsRUFDQThnQyxFQUFBdjdCLEtBQUF2RixFQUFBQSxFQUFBLEdBRUEsT0FBQXVGLE1BR0FxSCxFQUFBL0QsVUFBQW83QixPQUFBLFdBQ0EsSUFBQS9TLEVBQUEzckIsS0FBQTVFLE9BQ0EsR0FBQXV3QixFQUFBLEdBQUEsRUFDQSxNQUFBLElBQUErTixXQUFBLDZDQUVBLElBQUEsSUFBQWovQixFQUFBLEVBQUFBLEVBQUFreEIsRUFBQWx4QixHQUFBLEVBQ0E4Z0MsRUFBQXY3QixLQUFBdkYsRUFBQUEsRUFBQSxHQUNBOGdDLEVBQUF2N0IsS0FBQXZGLEVBQUEsRUFBQUEsRUFBQSxHQUVBLE9BQUF1RixNQUdBcUgsRUFBQS9ELFVBQUFxN0IsT0FBQSxXQUNBLElBQUFoVCxFQUFBM3JCLEtBQUE1RSxPQUNBLEdBQUF1d0IsRUFBQSxHQUFBLEVBQ0EsTUFBQSxJQUFBK04sV0FBQSw2Q0FFQSxJQUFBLElBQUFqL0IsRUFBQSxFQUFBQSxFQUFBa3hCLEVBQUFseEIsR0FBQSxFQUNBOGdDLEVBQUF2N0IsS0FBQXZGLEVBQUFBLEVBQUEsR0FDQThnQyxFQUFBdjdCLEtBQUF2RixFQUFBLEVBQUFBLEVBQUEsR0FDQThnQyxFQUFBdjdCLEtBQUF2RixFQUFBLEVBQUFBLEVBQUEsR0FDQThnQyxFQUFBdjdCLEtBQUF2RixFQUFBLEVBQUFBLEVBQUEsR0FFQSxPQUFBdUYsTUFVQXFILEVBQUEvRCxVQUFBMUMsZUFQQXlHLEVBQUEvRCxVQUFBNFYsU0FBQSxXQUNBLElBQUE5ZCxFQUFBNEUsS0FBQTVFLE9BQ0EsT0FBQSxJQUFBQSxFQUFBLEdBQ0EsSUFBQXVOLFVBQUF2TixPQUFBOGhDLEVBQUFsOUIsS0FBQSxFQUFBNUUsR0E1SEEsU0FBQTZpQixFQUFBeGdCLEVBQUE4bkIsR0FDQSxJQUFBNlYsR0FBQSxFQWNBLFNBTEFoMUIsSUFBQTNJLEdBQUFBLEVBQUEsS0FDQUEsRUFBQSxHQUlBQSxFQUFBdUMsS0FBQTVFLE9BQ0EsTUFBQSxHQU9BLFNBSkFnTCxJQUFBbWYsR0FBQUEsRUFBQXZsQixLQUFBNUUsVUFDQW1xQixFQUFBdmxCLEtBQUE1RSxRQUdBbXFCLEdBQUEsRUFDQSxNQUFBLEdBT0EsSUFIQUEsS0FBQSxLQUNBOW5CLEtBQUEsR0FHQSxNQUFBLEdBS0EsSUFGQXdnQixFQUFBQSxHQUFBLFNBR0EsT0FBQUEsR0FDQSxJQUFBLE1BQ0EsT0FBQTJnQixFQUFBNStCLEtBQUF2QyxFQUFBOG5CLEdBRUEsSUFBQSxPQUNBLElBQUEsUUFDQSxPQUFBMlgsRUFBQWw5QixLQUFBdkMsRUFBQThuQixHQUVBLElBQUEsUUFDQSxPQUFBc1osRUFBQTcrQixLQUFBdkMsRUFBQThuQixHQUVBLElBQUEsU0FDQSxJQUFBLFNBQ0EsT0FBQXVaLEVBQUE5K0IsS0FBQXZDLEVBQUE4bkIsR0FFQSxJQUFBLFNBQ0EsT0FBQTBYLEVBQUFqOUIsS0FBQXZDLEVBQUE4bkIsR0FFQSxJQUFBLE9BQ0EsSUFBQSxRQUNBLElBQUEsVUFDQSxJQUFBLFdBQ0EsT0FBQXdaLEVBQUEvK0IsS0FBQXZDLEVBQUE4bkIsR0FFQSxRQUNBLEdBQUE2VixFQUFBLE1BQUEsSUFBQXZ3QixVQUFBLHFCQUFBb1QsR0FDQUEsR0FBQUEsRUFBQSxJQUFBekgsY0FDQTRrQixHQUFBLElBNERBcnpCLE1BQUEvSCxLQUFBMkksWUFLQXRCLEVBQUEvRCxVQUFBMDdCLE9BQUEsU0FBQTc2QixHQUNBLElBQUFrRCxFQUFBb3pCLFNBQUF0MkIsR0FBQSxNQUFBLElBQUEwRyxVQUFBLDZCQUNBLE9BQUE3SyxPQUFBbUUsR0FDQSxJQUFBa0QsRUFBQWszQixRQUFBditCLEtBQUFtRSxJQUdBa0QsRUFBQS9ELFVBQUEyN0IsUUFBQSxXQUNBLElBQUFsZixFQUFBLEdBQ0FpUCxFQUFBOXpCLEVBQUFxK0Isa0JBQ0F4WixFQUFBL2YsS0FBQWtaLFNBQUEsTUFBQSxFQUFBOFYsR0FBQWh0QixRQUFBLFVBQUEsT0FBQWs5QixPQUVBLE9BREFsL0IsS0FBQTVFLE9BQUE0ekIsSUFBQWpQLEdBQUEsU0FDQSxXQUFBQSxFQUFBLEtBRUFvWixJQUNBOXhCLEVBQUEvRCxVQUFBNjFCLEdBQUE5eEIsRUFBQS9ELFVBQUEyN0IsU0FHQTUzQixFQUFBL0QsVUFBQWk3QixRQUFBLFNBQUF4OUIsRUFBQXRELEVBQUE4bkIsRUFBQTRaLEVBQUFDLEdBSUEsR0FIQWhGLEVBQUFyNUIsRUFBQXdHLGNBQ0F4RyxFQUFBc0csRUFBQTBXLEtBQUFoZCxFQUFBQSxFQUFBd1IsT0FBQXhSLEVBQUFtSCxjQUVBYixFQUFBb3pCLFNBQUExNUIsR0FDQSxNQUFBLElBQUE4SixVQUNBLHdGQUNBOUosR0FpQkEsUUFiQXFGLElBQUEzSSxJQUNBQSxFQUFBLFFBRUEySSxJQUFBbWYsSUFDQUEsRUFBQXhrQixFQUFBQSxFQUFBM0YsT0FBQSxRQUVBZ0wsSUFBQSs0QixJQUNBQSxFQUFBLFFBRUEvNEIsSUFBQWc1QixJQUNBQSxFQUFBcC9CLEtBQUE1RSxRQUdBcUMsRUFBQSxHQUFBOG5CLEVBQUF4a0IsRUFBQTNGLFFBQUErakMsRUFBQSxHQUFBQyxFQUFBcC9CLEtBQUE1RSxPQUNBLE1BQUEsSUFBQXMrQixXQUFBLHNCQUdBLEdBQUEwRixHQUFBRCxHQUFBNVosR0FBQTluQixFQUNBLE9BQUEsRUFFQSxHQUFBMmhDLEdBQUFELEVBQ0EsT0FBQSxFQUVBLEdBQUE1WixHQUFBOW5CLEVBQ0EsT0FBQSxFQVFBLEdBQUF1QyxPQUFBZSxFQUFBLE9BQUEsRUFTQSxJQVBBLElBQUFtaEIsR0FKQWtkLEtBQUEsSUFEQUQsS0FBQSxHQU1BcDFCLEdBUEF3YixLQUFBLElBREE5bkIsS0FBQSxHQVNBa3VCLEVBQUFDLEtBQUE4RCxJQUFBeE4sRUFBQW5ZLEdBRUFzMUIsRUFBQXIvQixLQUFBZ0ksTUFBQW0zQixFQUFBQyxHQUNBRSxFQUFBditCLEVBQUFpSCxNQUFBdkssRUFBQThuQixHQUVBOXFCLEVBQUEsRUFBQUEsRUFBQWt4QixJQUFBbHhCLEVBQ0EsR0FBQTRrQyxFQUFBNWtDLEtBQUE2a0MsRUFBQTdrQyxHQUFBLENBQ0F5bkIsRUFBQW1kLEVBQUE1a0MsR0FDQXNQLEVBQUF1MUIsRUFBQTdrQyxHQUNBLE1BSUEsT0FBQXluQixFQUFBblksR0FBQSxFQUNBQSxFQUFBbVksRUFBQSxFQUNBLEdBNEhBN2EsRUFBQS9ELFVBQUFpOEIsU0FBQSxTQUFBL2YsRUFBQTBiLEVBQUFqZCxHQUNBLE9BQUEsSUFBQWplLEtBQUF5SCxRQUFBK1gsRUFBQTBiLEVBQUFqZCxJQUdBNVcsRUFBQS9ELFVBQUFtRSxRQUFBLFNBQUErWCxFQUFBMGIsRUFBQWpkLEdBQ0EsT0FBQXVkLEVBQUF4N0IsS0FBQXdmLEVBQUEwYixFQUFBamQsR0FBQSxJQUdBNVcsRUFBQS9ELFVBQUE4TixZQUFBLFNBQUFvTyxFQUFBMGIsRUFBQWpkLEdBQ0EsT0FBQXVkLEVBQUF4N0IsS0FBQXdmLEVBQUEwYixFQUFBamQsR0FBQSxJQWdEQTVXLEVBQUEvRCxVQUFBMEQsTUFBQSxTQUFBOHlCLEVBQUF2bkIsRUFBQW5YLEVBQUE2aUIsR0FFQSxRQUFBN1gsSUFBQW1NLEVBQ0EwTCxFQUFBLE9BQ0E3aUIsRUFBQTRFLEtBQUE1RSxPQUNBbVgsRUFBQSxPQUVBLFFBQUFuTSxJQUFBaEwsR0FBQSxpQkFBQW1YLEVBQ0EwTCxFQUFBMUwsRUFDQW5YLEVBQUE0RSxLQUFBNUUsT0FDQW1YLEVBQUEsTUFFQSxDQUFBLElBQUFpdEIsU0FBQWp0QixHQVVBLE1BQUEsSUFBQXhYLE1BQ0EsMkVBVkF3WCxLQUFBLEVBQ0FpdEIsU0FBQXBrQyxJQUNBQSxLQUFBLE9BQ0FnTCxJQUFBNlgsSUFBQUEsRUFBQSxVQUVBQSxFQUFBN2lCLEVBQ0FBLE9BQUFnTCxHQVFBLElBQUFpMkIsRUFBQXI4QixLQUFBNUUsT0FBQW1YLEVBR0EsU0FGQW5NLElBQUFoTCxHQUFBaWhDLEVBQUFqaEMsS0FBQUEsRUFBQWloQyxHQUVBLEVBQUF2QyxFQUFBMStCLFNBQUFBLEVBQUEsR0FBQW1YLEVBQUEsSUFBQUEsRUFBQXZTLEtBQUE1RSxPQUNBLE1BQUEsSUFBQXMrQixXQUFBLDBDQUdBemIsRUFBQUEsR0FBQSxPQUdBLElBREEsSUE1Q0EwYixFQUFBcG5CLEVBQUFuWCxFQVpBdStCLEVBQUFwbkIsRUFBQW5YLEVBd0RBZ2dDLEdBQUEsSUFFQSxPQUFBbmQsR0FDQSxJQUFBLE1BQ0EsT0FBQWtlLEVBQUFuOEIsS0FBQTg1QixFQUFBdm5CLEVBQUFuWCxHQUVBLElBQUEsT0FDQSxJQUFBLFFBQ0EsT0FoRUFtWCxFQWdFQUEsRUFoRUFuWCxFQWdFQUEsRUEvREFxaEMsRUFBQXBCLEVBK0RBdkIsR0FoRUFILEVBZ0VBMzVCLE1BL0RBNUUsT0FBQW1YLEdBQUFvbkIsRUFBQXBuQixFQUFBblgsR0FpRUEsSUFBQSxRQUNBLE9BQUFvaEMsRUFBQXg4QixLQUFBODVCLEVBQUF2bkIsRUFBQW5YLEdBRUEsSUFBQSxTQUNBLElBQUEsU0FDQSxPQTlEQW9oQyxFQThEQXg4QixLQUFBODVCLEVBQUF2bkIsRUFBQW5YLEdBRUEsSUFBQSxTQUVBLE9BL0RBdStCLEVBK0RBMzVCLEtBL0RBdVMsRUErREFBLEVBL0RBblgsRUErREFBLEVBOURBcWhDLEVBQUFuQixFQThEQXhCLEdBOURBSCxFQUFBcG5CLEVBQUFuWCxHQWdFQSxJQUFBLE9BQ0EsSUFBQSxRQUNBLElBQUEsVUFDQSxJQUFBLFdBQ0EsT0FBQXdoQyxFQUFBNThCLEtBQUE4NUIsRUFBQXZuQixFQUFBblgsR0FFQSxRQUNBLEdBQUFnZ0MsRUFBQSxNQUFBLElBQUF2d0IsVUFBQSxxQkFBQW9ULEdBQ0FBLEdBQUEsR0FBQUEsR0FBQXpILGNBQ0E0a0IsR0FBQSxJQUtBL3pCLEVBQUEvRCxVQUFBbThCLE9BQUEsV0FDQSxNQUFBLENBQ0FwK0IsS0FBQSxTQUNBOEYsS0FBQWxELE1BQUFYLFVBQUEwRSxNQUFBN00sS0FBQTZFLEtBQUEwL0IsTUFBQTEvQixLQUFBLEtBd0ZBLElBQUE0OUIsRUFBQSxLQW9CQSxTQUFBaUIsRUFBQWxGLEVBQUFsOEIsRUFBQThuQixHQUNBLElBQUFvYSxFQUFBLEdBQ0FwYSxFQUFBcUcsS0FBQThELElBQUFpSyxFQUFBditCLE9BQUFtcUIsR0FFQSxJQUFBLElBQUE5cUIsRUFBQWdELEVBQUFoRCxFQUFBOHFCLElBQUE5cUIsRUFDQWtsQyxHQUFBOTNCLE9BQUFDLGFBQUEsSUFBQTZ4QixFQUFBbC9CLElBRUEsT0FBQWtsQyxFQUdBLFNBQUFiLEVBQUFuRixFQUFBbDhCLEVBQUE4bkIsR0FDQSxJQUFBb2EsRUFBQSxHQUNBcGEsRUFBQXFHLEtBQUE4RCxJQUFBaUssRUFBQXYrQixPQUFBbXFCLEdBRUEsSUFBQSxJQUFBOXFCLEVBQUFnRCxFQUFBaEQsRUFBQThxQixJQUFBOXFCLEVBQ0FrbEMsR0FBQTkzQixPQUFBQyxhQUFBNnhCLEVBQUFsL0IsSUFFQSxPQUFBa2xDLEVBR0EsU0FBQWYsRUFBQWpGLEVBQUFsOEIsRUFBQThuQixHQUNBLElBQUFvRyxFQUFBZ08sRUFBQXYrQixTQUVBcUMsR0FBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQ0E4bkIsR0FBQUEsRUFBQSxHQUFBb0csRUFBQXBHLEtBQUFBLEVBQUFvRyxHQUdBLElBREEsSUFBQWlVLEVBQUEsR0FDQW5sQyxFQUFBZ0QsRUFBQWhELEVBQUE4cUIsSUFBQTlxQixFQUNBbWxDLEdBQUFDLEVBQUFsRyxFQUFBbC9CLElBRUEsT0FBQW1sQyxFQUdBLFNBQUFiLEVBQUFwRixFQUFBbDhCLEVBQUE4bkIsR0FHQSxJQUZBLElBQUF1YSxFQUFBbkcsRUFBQTN4QixNQUFBdkssRUFBQThuQixHQUNBNFgsRUFBQSxHQUNBMWlDLEVBQUEsRUFBQUEsRUFBQXFsQyxFQUFBMWtDLE9BQUFYLEdBQUEsRUFDQTBpQyxHQUFBdDFCLE9BQUFDLGFBQUFnNEIsRUFBQXJsQyxHQUFBLElBQUFxbEMsRUFBQXJsQyxFQUFBLElBRUEsT0FBQTBpQyxFQWtDQSxTQUFBNEMsRUFBQXh0QixFQUFBeXRCLEVBQUE1a0MsR0FDQSxHQUFBbVgsRUFBQSxHQUFBLEdBQUFBLEVBQUEsRUFBQSxNQUFBLElBQUFtbkIsV0FBQSxzQkFDQSxHQUFBdCtCLEVBQUFtWCxFQUFBeXRCLEVBQUEsTUFBQSxJQUFBdEcsV0FBQSx5Q0E2S0EsU0FBQXVHLEVBQUF0RyxFQUFBMTdCLEVBQUFzVSxFQUFBeXRCLEVBQUFoUixFQUFBVSxHQUNBLElBQUFyb0IsRUFBQW96QixTQUFBZCxHQUFBLE1BQUEsSUFBQTl1QixVQUFBLCtDQUNBLEdBQUFta0IsRUFBQS93QixHQUFBQSxFQUFBeXhCLEVBQUEsTUFBQSxJQUFBZ0ssV0FBQSxxQ0FDQSxHQUFBbm5CLEVBQUF5dEIsRUFBQXJHLEVBQUF2K0IsT0FBQSxNQUFBLElBQUFzK0IsV0FBQSxzQkF5TEEsU0FBQXdHLEVBQUF2RyxFQUFBMTdCLEVBQUFzVSxFQUFBeXRCLEdBQ0EsR0FBQXp0QixFQUFBeXRCLEVBQUFyRyxFQUFBditCLE9BQUEsTUFBQSxJQUFBcytCLFdBQUEsc0JBQ0EsR0FBQW5uQixFQUFBLEVBQUEsTUFBQSxJQUFBbW5CLFdBQUEsc0JBR0EsU0FBQXlHLEVBQUF4RyxFQUFBMTdCLEVBQUFzVSxFQUFBNnRCLEVBQUFDLEdBT0EsT0FOQXBpQyxHQUFBQSxFQUNBc1UsS0FBQSxFQUNBOHRCLEdBQ0FILEVBQUF2RyxFQUFBMTdCLEVBQUFzVSxFQUFBLEdBRUEybUIsRUFBQWx5QixNQUFBMnlCLEVBQUExN0IsRUFBQXNVLEVBQUE2dEIsRUFBQSxHQUFBLEdBQ0E3dEIsRUFBQSxFQVdBLFNBQUErdEIsRUFBQTNHLEVBQUExN0IsRUFBQXNVLEVBQUE2dEIsRUFBQUMsR0FPQSxPQU5BcGlDLEdBQUFBLEVBQ0FzVSxLQUFBLEVBQ0E4dEIsR0FDQUgsRUFBQXZHLEVBQUExN0IsRUFBQXNVLEVBQUEsR0FFQTJtQixFQUFBbHlCLE1BQUEyeUIsRUFBQTE3QixFQUFBc1UsRUFBQTZ0QixFQUFBLEdBQUEsR0FDQTd0QixFQUFBLEVBeGFBbEwsRUFBQS9ELFVBQUEwRSxNQUFBLFNBQUF2SyxFQUFBOG5CLEdBQ0EsSUFBQW9HLEVBQUEzckIsS0FBQTVFLFFBQ0FxQyxJQUFBQSxHQUdBLEdBQ0FBLEdBQUFrdUIsR0FDQSxJQUFBbHVCLEVBQUEsR0FDQWt1QixFQUFBbHVCLElBQ0FBLEVBQUFrdUIsSUFOQXBHLE9BQUFuZixJQUFBbWYsRUFBQW9HLElBQUFwRyxHQVNBLEdBQ0FBLEdBQUFvRyxHQUNBLElBQUFwRyxFQUFBLEdBQ0FvRyxFQUFBcEcsSUFDQUEsRUFBQW9HLEdBR0FwRyxFQUFBOW5CLElBQUE4bkIsRUFBQTluQixHQUVBLElBQUE4aUMsRUFBQXZnQyxLQUFBd2dDLFNBQUEvaUMsRUFBQThuQixHQUlBLE9BRkFwaUIsT0FBQVksZUFBQXc4QixFQUFBbDVCLEVBQUEvRCxXQUVBaTlCLEdBV0FsNUIsRUFBQS9ELFVBQUFtOUIsV0FBQSxTQUFBbHVCLEVBQUFySyxFQUFBbTRCLEdBQ0E5dEIsS0FBQSxFQUNBckssS0FBQSxFQUNBbTRCLEdBQUFOLEVBQUF4dEIsRUFBQXJLLEVBQUFsSSxLQUFBNUUsUUFLQSxJQUhBLElBQUFva0IsRUFBQXhmLEtBQUF1UyxHQUNBbXVCLEVBQUEsRUFDQWptQyxFQUFBLElBQ0FBLEVBQUF5TixJQUFBdzRCLEdBQUEsTUFDQWxoQixHQUFBeGYsS0FBQXVTLEVBQUE5WCxHQUFBaW1DLEVBR0EsT0FBQWxoQixHQUdBblksRUFBQS9ELFVBQUFxOUIsV0FBQSxTQUFBcHVCLEVBQUFySyxFQUFBbTRCLEdBQ0E5dEIsS0FBQSxFQUNBckssS0FBQSxFQUNBbTRCLEdBQ0FOLEVBQUF4dEIsRUFBQXJLLEVBQUFsSSxLQUFBNUUsUUFLQSxJQUZBLElBQUFva0IsRUFBQXhmLEtBQUF1UyxJQUFBckssR0FDQXc0QixFQUFBLEVBQ0EsRUFBQXg0QixJQUFBdzRCLEdBQUEsTUFDQWxoQixHQUFBeGYsS0FBQXVTLElBQUFySyxHQUFBdzRCLEVBR0EsT0FBQWxoQixHQUdBblksRUFBQS9ELFVBQUFzOUIsVUFBQSxTQUFBcnVCLEVBQUE4dEIsR0FHQSxPQUZBOXRCLEtBQUEsRUFDQTh0QixHQUFBTixFQUFBeHRCLEVBQUEsRUFBQXZTLEtBQUE1RSxRQUNBNEUsS0FBQXVTLElBR0FsTCxFQUFBL0QsVUFBQXU5QixhQUFBLFNBQUF0dUIsRUFBQTh0QixHQUdBLE9BRkE5dEIsS0FBQSxFQUNBOHRCLEdBQUFOLEVBQUF4dEIsRUFBQSxFQUFBdlMsS0FBQTVFLFFBQ0E0RSxLQUFBdVMsR0FBQXZTLEtBQUF1UyxFQUFBLElBQUEsR0FHQWxMLEVBQUEvRCxVQUFBeTRCLGFBQUEsU0FBQXhwQixFQUFBOHRCLEdBR0EsT0FGQTl0QixLQUFBLEVBQ0E4dEIsR0FBQU4sRUFBQXh0QixFQUFBLEVBQUF2UyxLQUFBNUUsUUFDQTRFLEtBQUF1UyxJQUFBLEVBQUF2UyxLQUFBdVMsRUFBQSxJQUdBbEwsRUFBQS9ELFVBQUF3OUIsYUFBQSxTQUFBdnVCLEVBQUE4dEIsR0FJQSxPQUhBOXRCLEtBQUEsRUFDQTh0QixHQUFBTixFQUFBeHRCLEVBQUEsRUFBQXZTLEtBQUE1RSxTQUVBNEUsS0FBQXVTLEdBQ0F2UyxLQUFBdVMsRUFBQSxJQUFBLEVBQ0F2UyxLQUFBdVMsRUFBQSxJQUFBLElBQ0EsU0FBQXZTLEtBQUF1UyxFQUFBLElBR0FsTCxFQUFBL0QsVUFBQXk5QixhQUFBLFNBQUF4dUIsRUFBQTh0QixHQUlBLE9BSEE5dEIsS0FBQSxFQUNBOHRCLEdBQUFOLEVBQUF4dEIsRUFBQSxFQUFBdlMsS0FBQTVFLFFBRUEsU0FBQTRFLEtBQUF1UyxJQUNBdlMsS0FBQXVTLEVBQUEsSUFBQSxHQUNBdlMsS0FBQXVTLEVBQUEsSUFBQSxFQUNBdlMsS0FBQXVTLEVBQUEsS0FHQWxMLEVBQUEvRCxVQUFBMDlCLFVBQUEsU0FBQXp1QixFQUFBckssRUFBQW00QixHQUNBOXRCLEtBQUEsRUFDQXJLLEtBQUEsRUFDQW00QixHQUFBTixFQUFBeHRCLEVBQUFySyxFQUFBbEksS0FBQTVFLFFBS0EsSUFIQSxJQUFBb2tCLEVBQUF4ZixLQUFBdVMsR0FDQW11QixFQUFBLEVBQ0FqbUMsRUFBQSxJQUNBQSxFQUFBeU4sSUFBQXc0QixHQUFBLE1BQ0FsaEIsR0FBQXhmLEtBQUF1UyxFQUFBOVgsR0FBQWltQyxFQU1BLE9BSkFBLEdBQUEsTUFFQWxoQixJQUFBQSxHQUFBb00sS0FBQXFWLElBQUEsRUFBQSxFQUFBLzRCLElBRUFzWCxHQUdBblksRUFBQS9ELFVBQUE0OUIsVUFBQSxTQUFBM3VCLEVBQUFySyxFQUFBbTRCLEdBQ0E5dEIsS0FBQSxFQUNBckssS0FBQSxFQUNBbTRCLEdBQUFOLEVBQUF4dEIsRUFBQXJLLEVBQUFsSSxLQUFBNUUsUUFLQSxJQUhBLElBQUFYLEVBQUF5TixFQUNBdzRCLEVBQUEsRUFDQWxoQixFQUFBeGYsS0FBQXVTLElBQUE5WCxHQUNBLEVBQUFBLElBQUFpbUMsR0FBQSxNQUNBbGhCLEdBQUF4ZixLQUFBdVMsSUFBQTlYLEdBQUFpbUMsRUFNQSxPQUpBQSxHQUFBLE1BRUFsaEIsSUFBQUEsR0FBQW9NLEtBQUFxVixJQUFBLEVBQUEsRUFBQS80QixJQUVBc1gsR0FHQW5ZLEVBQUEvRCxVQUFBNjlCLFNBQUEsU0FBQTV1QixFQUFBOHRCLEdBR0EsT0FGQTl0QixLQUFBLEVBQ0E4dEIsR0FBQU4sRUFBQXh0QixFQUFBLEVBQUF2UyxLQUFBNUUsUUFDQSxJQUFBNEUsS0FBQXVTLElBQ0EsR0FBQSxJQUFBdlMsS0FBQXVTLEdBQUEsR0FEQXZTLEtBQUF1UyxJQUlBbEwsRUFBQS9ELFVBQUE4OUIsWUFBQSxTQUFBN3VCLEVBQUE4dEIsR0FDQTl0QixLQUFBLEVBQ0E4dEIsR0FBQU4sRUFBQXh0QixFQUFBLEVBQUF2UyxLQUFBNUUsUUFDQSxJQUFBb2tCLEVBQUF4ZixLQUFBdVMsR0FBQXZTLEtBQUF1UyxFQUFBLElBQUEsRUFDQSxPQUFBLE1BQUFpTixFQUFBLFdBQUFBLEVBQUFBLEdBR0FuWSxFQUFBL0QsVUFBQSs5QixZQUFBLFNBQUE5dUIsRUFBQTh0QixHQUNBOXRCLEtBQUEsRUFDQTh0QixHQUFBTixFQUFBeHRCLEVBQUEsRUFBQXZTLEtBQUE1RSxRQUNBLElBQUFva0IsRUFBQXhmLEtBQUF1UyxFQUFBLEdBQUF2UyxLQUFBdVMsSUFBQSxFQUNBLE9BQUEsTUFBQWlOLEVBQUEsV0FBQUEsRUFBQUEsR0FHQW5ZLEVBQUEvRCxVQUFBZytCLFlBQUEsU0FBQS91QixFQUFBOHRCLEdBSUEsT0FIQTl0QixLQUFBLEVBQ0E4dEIsR0FBQU4sRUFBQXh0QixFQUFBLEVBQUF2UyxLQUFBNUUsUUFFQTRFLEtBQUF1UyxHQUNBdlMsS0FBQXVTLEVBQUEsSUFBQSxFQUNBdlMsS0FBQXVTLEVBQUEsSUFBQSxHQUNBdlMsS0FBQXVTLEVBQUEsSUFBQSxJQUdBbEwsRUFBQS9ELFVBQUFpK0IsWUFBQSxTQUFBaHZCLEVBQUE4dEIsR0FJQSxPQUhBOXRCLEtBQUEsRUFDQTh0QixHQUFBTixFQUFBeHRCLEVBQUEsRUFBQXZTLEtBQUE1RSxRQUVBNEUsS0FBQXVTLElBQUEsR0FDQXZTLEtBQUF1UyxFQUFBLElBQUEsR0FDQXZTLEtBQUF1UyxFQUFBLElBQUEsRUFDQXZTLEtBQUF1UyxFQUFBLElBR0FsTCxFQUFBL0QsVUFBQWsrQixZQUFBLFNBQUFqdkIsRUFBQTh0QixHQUdBLE9BRkE5dEIsS0FBQSxFQUNBOHRCLEdBQUFOLEVBQUF4dEIsRUFBQSxFQUFBdlMsS0FBQTVFLFFBQ0E4OUIsRUFBQTRDLEtBQUE5N0IsS0FBQXVTLEdBQUEsRUFBQSxHQUFBLElBR0FsTCxFQUFBL0QsVUFBQW0rQixZQUFBLFNBQUFsdkIsRUFBQTh0QixHQUdBLE9BRkE5dEIsS0FBQSxFQUNBOHRCLEdBQUFOLEVBQUF4dEIsRUFBQSxFQUFBdlMsS0FBQTVFLFFBQ0E4OUIsRUFBQTRDLEtBQUE5N0IsS0FBQXVTLEdBQUEsRUFBQSxHQUFBLElBR0FsTCxFQUFBL0QsVUFBQW8rQixhQUFBLFNBQUFudkIsRUFBQTh0QixHQUdBLE9BRkE5dEIsS0FBQSxFQUNBOHRCLEdBQUFOLEVBQUF4dEIsRUFBQSxFQUFBdlMsS0FBQTVFLFFBQ0E4OUIsRUFBQTRDLEtBQUE5N0IsS0FBQXVTLEdBQUEsRUFBQSxHQUFBLElBR0FsTCxFQUFBL0QsVUFBQXErQixhQUFBLFNBQUFwdkIsRUFBQTh0QixHQUdBLE9BRkE5dEIsS0FBQSxFQUNBOHRCLEdBQUFOLEVBQUF4dEIsRUFBQSxFQUFBdlMsS0FBQTVFLFFBQ0E4OUIsRUFBQTRDLEtBQUE5N0IsS0FBQXVTLEdBQUEsRUFBQSxHQUFBLElBU0FsTCxFQUFBL0QsVUFBQXMrQixZQUFBLFNBQUEzakMsRUFBQXNVLEVBQUFySyxFQUFBbTRCLEdBQ0FwaUMsR0FBQUEsRUFDQXNVLEtBQUEsRUFDQXJLLEtBQUEsRUFDQW00QixHQUVBSixFQUFBamdDLEtBQUEvQixFQUFBc1UsRUFBQXJLLEVBREEwakIsS0FBQXFWLElBQUEsRUFBQSxFQUFBLzRCLEdBQUEsRUFDQSxHQUdBLElBQUF3NEIsRUFBQSxFQUNBam1DLEVBQUEsRUFFQSxJQURBdUYsS0FBQXVTLEdBQUEsSUFBQXRVLElBQ0F4RCxFQUFBeU4sSUFBQXc0QixHQUFBLE1BQ0ExZ0MsS0FBQXVTLEVBQUE5WCxHQUFBd0QsRUFBQXlpQyxFQUFBLElBR0EsT0FBQW51QixFQUFBckssR0FHQWIsRUFBQS9ELFVBQUF1K0IsWUFBQSxTQUFBNWpDLEVBQUFzVSxFQUFBckssRUFBQW00QixHQUNBcGlDLEdBQUFBLEVBQ0FzVSxLQUFBLEVBQ0FySyxLQUFBLEVBQ0FtNEIsR0FFQUosRUFBQWpnQyxLQUFBL0IsRUFBQXNVLEVBQUFySyxFQURBMGpCLEtBQUFxVixJQUFBLEVBQUEsRUFBQS80QixHQUFBLEVBQ0EsR0FHQSxJQUFBek4sRUFBQXlOLEVBQUEsRUFDQXc0QixFQUFBLEVBRUEsSUFEQTFnQyxLQUFBdVMsRUFBQTlYLEdBQUEsSUFBQXdELEVBQ0EsS0FBQXhELElBQUFpbUMsR0FBQSxNQUNBMWdDLEtBQUF1UyxFQUFBOVgsR0FBQXdELEVBQUF5aUMsRUFBQSxJQUdBLE9BQUFudUIsRUFBQXJLLEdBR0FiLEVBQUEvRCxVQUFBdytCLFdBQUEsU0FBQTdqQyxFQUFBc1UsRUFBQTh0QixHQUtBLE9BSkFwaUMsR0FBQUEsRUFDQXNVLEtBQUEsRUFDQTh0QixHQUFBSixFQUFBamdDLEtBQUEvQixFQUFBc1UsRUFBQSxFQUFBLElBQUEsR0FDQXZTLEtBQUF1UyxHQUFBLElBQUF0VSxFQUNBc1UsRUFBQSxHQUdBbEwsRUFBQS9ELFVBQUF5K0IsY0FBQSxTQUFBOWpDLEVBQUFzVSxFQUFBOHRCLEdBTUEsT0FMQXBpQyxHQUFBQSxFQUNBc1UsS0FBQSxFQUNBOHRCLEdBQUFKLEVBQUFqZ0MsS0FBQS9CLEVBQUFzVSxFQUFBLEVBQUEsTUFBQSxHQUNBdlMsS0FBQXVTLEdBQUEsSUFBQXRVLEVBQ0ErQixLQUFBdVMsRUFBQSxHQUFBdFUsSUFBQSxFQUNBc1UsRUFBQSxHQUdBbEwsRUFBQS9ELFVBQUEwK0IsY0FBQSxTQUFBL2pDLEVBQUFzVSxFQUFBOHRCLEdBTUEsT0FMQXBpQyxHQUFBQSxFQUNBc1UsS0FBQSxFQUNBOHRCLEdBQUFKLEVBQUFqZ0MsS0FBQS9CLEVBQUFzVSxFQUFBLEVBQUEsTUFBQSxHQUNBdlMsS0FBQXVTLEdBQUF0VSxJQUFBLEVBQ0ErQixLQUFBdVMsRUFBQSxHQUFBLElBQUF0VSxFQUNBc1UsRUFBQSxHQUdBbEwsRUFBQS9ELFVBQUEyK0IsY0FBQSxTQUFBaGtDLEVBQUFzVSxFQUFBOHRCLEdBUUEsT0FQQXBpQyxHQUFBQSxFQUNBc1UsS0FBQSxFQUNBOHRCLEdBQUFKLEVBQUFqZ0MsS0FBQS9CLEVBQUFzVSxFQUFBLEVBQUEsV0FBQSxHQUNBdlMsS0FBQXVTLEVBQUEsR0FBQXRVLElBQUEsR0FDQStCLEtBQUF1UyxFQUFBLEdBQUF0VSxJQUFBLEdBQ0ErQixLQUFBdVMsRUFBQSxHQUFBdFUsSUFBQSxFQUNBK0IsS0FBQXVTLEdBQUEsSUFBQXRVLEVBQ0FzVSxFQUFBLEdBR0FsTCxFQUFBL0QsVUFBQTQrQixjQUFBLFNBQUFqa0MsRUFBQXNVLEVBQUE4dEIsR0FRQSxPQVBBcGlDLEdBQUFBLEVBQ0FzVSxLQUFBLEVBQ0E4dEIsR0FBQUosRUFBQWpnQyxLQUFBL0IsRUFBQXNVLEVBQUEsRUFBQSxXQUFBLEdBQ0F2UyxLQUFBdVMsR0FBQXRVLElBQUEsR0FDQStCLEtBQUF1UyxFQUFBLEdBQUF0VSxJQUFBLEdBQ0ErQixLQUFBdVMsRUFBQSxHQUFBdFUsSUFBQSxFQUNBK0IsS0FBQXVTLEVBQUEsR0FBQSxJQUFBdFUsRUFDQXNVLEVBQUEsR0FHQWxMLEVBQUEvRCxVQUFBNitCLFdBQUEsU0FBQWxrQyxFQUFBc1UsRUFBQXJLLEVBQUFtNEIsR0FHQSxJQUNBK0IsRUFIQW5rQyxHQUFBQSxFQUNBc1UsS0FBQSxFQUNBOHRCLEdBR0FKLEVBQUFqZ0MsS0FBQS9CLEVBQUFzVSxFQUFBckssR0FGQWs2QixFQUFBeFcsS0FBQXFWLElBQUEsRUFBQSxFQUFBLzRCLEVBQUEsSUFFQSxHQUFBazZCLEdBR0EsSUFBQTNuQyxFQUFBLEVBQ0FpbUMsRUFBQSxFQUNBMkIsRUFBQSxFQUVBLElBREFyaUMsS0FBQXVTLEdBQUEsSUFBQXRVLElBQ0F4RCxFQUFBeU4sSUFBQXc0QixHQUFBLE1BQ0F6aUMsRUFBQSxHQUFBLElBQUFva0MsR0FBQSxJQUFBcmlDLEtBQUF1UyxFQUFBOVgsRUFBQSxLQUNBNG5DLEVBQUEsR0FFQXJpQyxLQUFBdVMsRUFBQTlYLElBQUF3RCxFQUFBeWlDLEdBQUEsR0FBQTJCLEVBQUEsSUFHQSxPQUFBOXZCLEVBQUFySyxHQUdBYixFQUFBL0QsVUFBQWcvQixXQUFBLFNBQUFya0MsRUFBQXNVLEVBQUFySyxFQUFBbTRCLEdBR0EsSUFDQStCLEVBSEFua0MsR0FBQUEsRUFDQXNVLEtBQUEsRUFDQTh0QixHQUdBSixFQUFBamdDLEtBQUEvQixFQUFBc1UsRUFBQXJLLEdBRkFrNkIsRUFBQXhXLEtBQUFxVixJQUFBLEVBQUEsRUFBQS80QixFQUFBLElBRUEsR0FBQWs2QixHQUdBLElBQUEzbkMsRUFBQXlOLEVBQUEsRUFDQXc0QixFQUFBLEVBQ0EyQixFQUFBLEVBRUEsSUFEQXJpQyxLQUFBdVMsRUFBQTlYLEdBQUEsSUFBQXdELEVBQ0EsS0FBQXhELElBQUFpbUMsR0FBQSxNQUNBemlDLEVBQUEsR0FBQSxJQUFBb2tDLEdBQUEsSUFBQXJpQyxLQUFBdVMsRUFBQTlYLEVBQUEsS0FDQTRuQyxFQUFBLEdBRUFyaUMsS0FBQXVTLEVBQUE5WCxJQUFBd0QsRUFBQXlpQyxHQUFBLEdBQUEyQixFQUFBLElBR0EsT0FBQTl2QixFQUFBckssR0FHQWIsRUFBQS9ELFVBQUFpL0IsVUFBQSxTQUFBdGtDLEVBQUFzVSxFQUFBOHRCLEdBTUEsT0FMQXBpQyxHQUFBQSxFQUNBc1UsS0FBQSxFQUNBOHRCLEdBQUFKLEVBQUFqZ0MsS0FBQS9CLEVBQUFzVSxFQUFBLEVBQUEsS0FBQSxLQUNBdFUsRUFBQSxJQUFBQSxFQUFBLElBQUFBLEVBQUEsR0FDQStCLEtBQUF1UyxHQUFBLElBQUF0VSxFQUNBc1UsRUFBQSxHQUdBbEwsRUFBQS9ELFVBQUFrL0IsYUFBQSxTQUFBdmtDLEVBQUFzVSxFQUFBOHRCLEdBTUEsT0FMQXBpQyxHQUFBQSxFQUNBc1UsS0FBQSxFQUNBOHRCLEdBQUFKLEVBQUFqZ0MsS0FBQS9CLEVBQUFzVSxFQUFBLEVBQUEsT0FBQSxPQUNBdlMsS0FBQXVTLEdBQUEsSUFBQXRVLEVBQ0ErQixLQUFBdVMsRUFBQSxHQUFBdFUsSUFBQSxFQUNBc1UsRUFBQSxHQUdBbEwsRUFBQS9ELFVBQUFtL0IsYUFBQSxTQUFBeGtDLEVBQUFzVSxFQUFBOHRCLEdBTUEsT0FMQXBpQyxHQUFBQSxFQUNBc1UsS0FBQSxFQUNBOHRCLEdBQUFKLEVBQUFqZ0MsS0FBQS9CLEVBQUFzVSxFQUFBLEVBQUEsT0FBQSxPQUNBdlMsS0FBQXVTLEdBQUF0VSxJQUFBLEVBQ0ErQixLQUFBdVMsRUFBQSxHQUFBLElBQUF0VSxFQUNBc1UsRUFBQSxHQUdBbEwsRUFBQS9ELFVBQUFvL0IsYUFBQSxTQUFBemtDLEVBQUFzVSxFQUFBOHRCLEdBUUEsT0FQQXBpQyxHQUFBQSxFQUNBc1UsS0FBQSxFQUNBOHRCLEdBQUFKLEVBQUFqZ0MsS0FBQS9CLEVBQUFzVSxFQUFBLEVBQUEsWUFBQSxZQUNBdlMsS0FBQXVTLEdBQUEsSUFBQXRVLEVBQ0ErQixLQUFBdVMsRUFBQSxHQUFBdFUsSUFBQSxFQUNBK0IsS0FBQXVTLEVBQUEsR0FBQXRVLElBQUEsR0FDQStCLEtBQUF1UyxFQUFBLEdBQUF0VSxJQUFBLEdBQ0FzVSxFQUFBLEdBR0FsTCxFQUFBL0QsVUFBQXEvQixhQUFBLFNBQUExa0MsRUFBQXNVLEVBQUE4dEIsR0FTQSxPQVJBcGlDLEdBQUFBLEVBQ0FzVSxLQUFBLEVBQ0E4dEIsR0FBQUosRUFBQWpnQyxLQUFBL0IsRUFBQXNVLEVBQUEsRUFBQSxZQUFBLFlBQ0F0VSxFQUFBLElBQUFBLEVBQUEsV0FBQUEsRUFBQSxHQUNBK0IsS0FBQXVTLEdBQUF0VSxJQUFBLEdBQ0ErQixLQUFBdVMsRUFBQSxHQUFBdFUsSUFBQSxHQUNBK0IsS0FBQXVTLEVBQUEsR0FBQXRVLElBQUEsRUFDQStCLEtBQUF1UyxFQUFBLEdBQUEsSUFBQXRVLEVBQ0FzVSxFQUFBLEdBa0JBbEwsRUFBQS9ELFVBQUFzL0IsYUFBQSxTQUFBM2tDLEVBQUFzVSxFQUFBOHRCLEdBQ0EsT0FBQUYsRUFBQW5nQyxLQUFBL0IsRUFBQXNVLEdBQUEsRUFBQTh0QixJQUdBaDVCLEVBQUEvRCxVQUFBdS9CLGFBQUEsU0FBQTVrQyxFQUFBc1UsRUFBQTh0QixHQUNBLE9BQUFGLEVBQUFuZ0MsS0FBQS9CLEVBQUFzVSxHQUFBLEVBQUE4dEIsSUFhQWg1QixFQUFBL0QsVUFBQXcvQixjQUFBLFNBQUE3a0MsRUFBQXNVLEVBQUE4dEIsR0FDQSxPQUFBQyxFQUFBdGdDLEtBQUEvQixFQUFBc1UsR0FBQSxFQUFBOHRCLElBR0FoNUIsRUFBQS9ELFVBQUF5L0IsY0FBQSxTQUFBOWtDLEVBQUFzVSxFQUFBOHRCLEdBQ0EsT0FBQUMsRUFBQXRnQyxLQUFBL0IsRUFBQXNVLEdBQUEsRUFBQTh0QixJQUlBaDVCLEVBQUEvRCxVQUFBcTNCLEtBQUEsU0FBQTU1QixFQUFBaWlDLEVBQUF2bEMsRUFBQThuQixHQUNBLElBQUFsZSxFQUFBb3pCLFNBQUExNUIsR0FBQSxNQUFBLElBQUE4SixVQUFBLCtCQVFBLEdBUEFwTixFQUFBQSxHQUFBLEVBQ0E4bkIsR0FBQSxJQUFBQSxJQUFBQSxFQUFBdmxCLEtBQUE1RSxRQUNBNG5DLEdBQUFqaUMsRUFBQTNGLFNBQUE0bkMsRUFBQWppQyxFQUFBM0YsUUFDQTRuQyxFQUFBQSxHQUFBLEVBQ0EsRUFBQXpkLEdBQUFBLEVBQUE5bkIsSUFBQThuQixFQUFBOW5CLEdBR0E4bkIsSUFBQTluQixFQUFBLE9BQUEsRUFDQSxHQUFBLElBQUFzRCxFQUFBM0YsUUFBQSxJQUFBNEUsS0FBQTVFLE9BQUEsT0FBQSxFQUdBLEdBQUE0bkMsRUFBQSxFQUNBLE1BQUEsSUFBQXRKLFdBQUEsNkJBRUEsR0FBQWo4QixFQUFBLEdBQUFBLEdBQUF1QyxLQUFBNUUsT0FBQSxNQUFBLElBQUFzK0IsV0FBQSxzQkFDQSxHQUFBblUsRUFBQSxFQUFBLE1BQUEsSUFBQW1VLFdBQUEsMkJBR0FuVSxFQUFBdmxCLEtBQUE1RSxTQUFBbXFCLEVBQUF2bEIsS0FBQTVFLFFBQ0EyRixFQUFBM0YsT0FBQTRuQyxFQUFBemQsRUFBQTluQixJQUNBOG5CLEVBQUF4a0IsRUFBQTNGLE9BQUE0bkMsRUFBQXZsQyxHQUdBLElBQUFrdUIsRUFBQXBHLEVBQUE5bkIsRUFFQSxHQUFBdUMsT0FBQWUsR0FBQSxtQkFBQXdHLFdBQUFqRSxVQUFBMi9CLFdBRUFqakMsS0FBQWlqQyxXQUFBRCxFQUFBdmxDLEVBQUE4bkIsUUFDQSxHQUFBdmxCLE9BQUFlLEdBQUF0RCxFQUFBdWxDLEdBQUFBLEVBQUF6ZCxFQUVBLElBQUEsSUFBQTlxQixFQUFBa3hCLEVBQUEsRUFBQSxHQUFBbHhCLElBQUFBLEVBQ0FzRyxFQUFBdEcsRUFBQXVvQyxHQUFBaGpDLEtBQUF2RixFQUFBZ0QsUUFHQThKLFdBQUFqRSxVQUFBb1AsSUFBQXZYLEtBQ0E0RixFQUNBZixLQUFBd2dDLFNBQUEvaUMsRUFBQThuQixHQUNBeWQsR0FJQSxPQUFBclgsR0FPQXRrQixFQUFBL0QsVUFBQTg2QixLQUFBLFNBQUE1ZSxFQUFBL2hCLEVBQUE4bkIsRUFBQXRILEdBRUEsR0FBQSxpQkFBQXVCLEVBQUEsQ0FTQSxHQVJBLGlCQUFBL2hCLEdBQ0F3Z0IsRUFBQXhnQixFQUNBQSxFQUFBLEVBQ0E4bkIsRUFBQXZsQixLQUFBNUUsUUFDQSxpQkFBQW1xQixJQUNBdEgsRUFBQXNILEVBQ0FBLEVBQUF2bEIsS0FBQTVFLGFBRUFnTCxJQUFBNlgsR0FBQSxpQkFBQUEsRUFDQSxNQUFBLElBQUFwVCxVQUFBLDZCQUVBLEdBQUEsaUJBQUFvVCxJQUFBNVcsRUFBQTB5QixXQUFBOWIsR0FDQSxNQUFBLElBQUFwVCxVQUFBLHFCQUFBb1QsR0FFQSxJQUNBampCLEVBREEsSUFBQXdrQixFQUFBcGtCLFNBQ0FKLEVBQUF3a0IsRUFBQWlaLFdBQUEsSUFDQSxTQUFBeGEsR0FBQWpqQixFQUFBLEtBQ0EsV0FBQWlqQixLQUVBdUIsRUFBQXhrQixRQUdBLGlCQUFBd2tCLEVBQ0FBLEdBQUEsSUFDQSxrQkFBQUEsSUFDQUEsRUFBQTRjLE9BQUE1YyxJQUlBLEdBQUEvaEIsRUFBQSxHQUFBdUMsS0FBQTVFLE9BQUFxQyxHQUFBdUMsS0FBQTVFLE9BQUFtcUIsRUFDQSxNQUFBLElBQUFtVSxXQUFBLHNCQUdBLEdBQUFuVSxHQUFBOW5CLEVBQ0EsT0FBQXVDLEtBUUEsSUFBQXZGLEVBQ0EsR0FOQWdELEtBQUEsRUFDQThuQixPQUFBbmYsSUFBQW1mLEVBQUF2bEIsS0FBQTVFLE9BQUFtcUIsSUFBQSxFQUtBLGlCQUhBL0YsRUFBQUEsR0FBQSxHQUlBLElBQUEva0IsRUFBQWdELEVBQUFoRCxFQUFBOHFCLElBQUE5cUIsRUFDQXVGLEtBQUF2RixHQUFBK2tCLE1BRUEsQ0FDQSxJQUFBc2dCLEVBQUF6NEIsRUFBQW96QixTQUFBamIsR0FDQUEsRUFDQW5ZLEVBQUEwVyxLQUFBeUIsRUFBQXZCLEdBQ0EwTixFQUFBbVUsRUFBQTFrQyxPQUNBLEdBQUEsSUFBQXV3QixFQUNBLE1BQUEsSUFBQTlnQixVQUFBLGNBQUEyVSxFQUNBLHFDQUVBLElBQUEva0IsRUFBQSxFQUFBQSxFQUFBOHFCLEVBQUE5bkIsSUFBQWhELEVBQ0F1RixLQUFBdkYsRUFBQWdELEdBQUFxaUMsRUFBQXJsQyxFQUFBa3hCLEdBSUEsT0FBQTNyQixNQU1BLElBQUFrakMsRUFBQSxvQkFnQkEsU0FBQTdILEVBQUF2QixFQUFBK0MsR0FFQSxJQUFBWSxFQURBWixFQUFBQSxHQUFBc0csRUFBQUEsRUFNQSxJQUpBLElBQUEvbkMsRUFBQTArQixFQUFBMStCLE9BQ0Fnb0MsRUFBQSxLQUNBdEQsRUFBQSxHQUVBcmxDLEVBQUEsRUFBQUEsRUFBQVcsSUFBQVgsRUFBQSxDQUlBLEdBQUEsT0FIQWdqQyxFQUFBM0QsRUFBQXJCLFdBQUFoK0IsS0FHQWdqQyxFQUFBLE1BQUEsQ0FFQSxJQUFBMkYsRUFBQSxDQUVBLEdBQUEsTUFBQTNGLEVBQUEsRUFFQSxHQUFBWixHQUFBLElBQUFpRCxFQUFBLzBCLEtBQUEsSUFBQSxJQUFBLEtBQ0EsU0FDQSxHQUFBdFEsRUFBQSxJQUFBVyxFQUFBLEVBRUEsR0FBQXloQyxHQUFBLElBQUFpRCxFQUFBLzBCLEtBQUEsSUFBQSxJQUFBLEtBQ0EsU0FJQXE0QixFQUFBM0YsRUFFQSxTQUlBLEdBQUFBLEVBQUEsTUFBQSxFQUNBLEdBQUFaLEdBQUEsSUFBQWlELEVBQUEvMEIsS0FBQSxJQUFBLElBQUEsS0FDQXE0QixFQUFBM0YsRUFDQSxTQUlBQSxFQUFBLE9BQUEyRixFQUFBLE9BQUEsR0FBQTNGLEVBQUEsWUFDQTJGLElBRUEsR0FBQXZHLEdBQUEsSUFBQWlELEVBQUEvMEIsS0FBQSxJQUFBLElBQUEsS0FNQSxHQUhBcTRCLEVBQUEsS0FHQTNGLEVBQUEsSUFBQSxDQUNBLEtBQUFaLEVBQUEsRUFBQSxNQUNBaUQsRUFBQS8wQixLQUFBMHlCLFFBQ0EsR0FBQUEsRUFBQSxLQUFBLENBQ0EsSUFBQVosR0FBQSxHQUFBLEVBQUEsTUFDQWlELEVBQUEvMEIsS0FDQTB5QixHQUFBLEVBQUEsSUFDQSxHQUFBQSxFQUFBLFVBRUEsR0FBQUEsRUFBQSxNQUFBLENBQ0EsSUFBQVosR0FBQSxHQUFBLEVBQUEsTUFDQWlELEVBQUEvMEIsS0FDQTB5QixHQUFBLEdBQUEsSUFDQUEsR0FBQSxFQUFBLEdBQUEsSUFDQSxHQUFBQSxFQUFBLFNBRUEsQ0FBQSxLQUFBQSxFQUFBLFNBU0EsTUFBQSxJQUFBMWlDLE1BQUEsc0JBUkEsSUFBQThoQyxHQUFBLEdBQUEsRUFBQSxNQUNBaUQsRUFBQS8wQixLQUNBMHlCLEdBQUEsR0FBQSxJQUNBQSxHQUFBLEdBQUEsR0FBQSxJQUNBQSxHQUFBLEVBQUEsR0FBQSxJQUNBLEdBQUFBLEVBQUEsTUFPQSxPQUFBcUMsRUE0QkEsU0FBQXhFLEVBQUF2YixHQUNBLE9BQUFrWixFQUFBZCxZQXhIQSxTQUFBcFksR0FNQSxJQUZBQSxHQUZBQSxFQUFBQSxFQUFBUixNQUFBLEtBQUEsSUFFQTJmLE9BQUFsOUIsUUFBQWtoQyxFQUFBLEtBRUE5bkMsT0FBQSxFQUFBLE1BQUEsR0FFQSxLQUFBMmtCLEVBQUEza0IsT0FBQSxHQUFBLEdBQ0Eya0IsR0FBQSxJQUVBLE9BQUFBLEVBNkdBc2pCLENBQUF0akIsSUFHQSxTQUFBMGMsRUFBQTZHLEVBQUFDLEVBQUFoeEIsRUFBQW5YLEdBQ0EsSUFBQSxJQUFBWCxFQUFBLEVBQUFBLEVBQUFXLEtBQ0FYLEVBQUE4WCxHQUFBZ3hCLEVBQUFub0MsUUFBQVgsR0FBQTZvQyxFQUFBbG9DLFVBREFYLEVBRUE4b0MsRUFBQTlvQyxFQUFBOFgsR0FBQSt3QixFQUFBN29DLEdBRUEsT0FBQUEsRUFNQSxTQUFBMi9CLEVBQUFJLEVBQUFuNUIsR0FDQSxPQUFBbTVCLGFBQUFuNUIsR0FDQSxNQUFBbTVCLEdBQUEsTUFBQUEsRUFBQWwyQixhQUFBLE1BQUFrMkIsRUFBQWwyQixZQUFBMlAsTUFDQXVtQixFQUFBbDJCLFlBQUEyUCxPQUFBNVMsRUFBQTRTLEtBRUEsU0FBQTJtQixFQUFBSixHQUVBLE9BQUFBLEdBQUFBLEVBS0EsSUFBQXFGLEVBQUEsV0FHQSxJQUZBLElBQUEyRCxFQUFBLG1CQUNBQyxFQUFBLElBQUF4L0IsTUFBQSxLQUNBeEosRUFBQSxFQUFBQSxFQUFBLEtBQUFBLEVBRUEsSUFEQSxJQUFBaXBDLEVBQUEsR0FBQWpwQyxFQUNBeWhDLEVBQUEsRUFBQUEsRUFBQSxLQUFBQSxFQUNBdUgsRUFBQUMsRUFBQXhILEdBQUFzSCxFQUFBL29DLEdBQUErb0MsRUFBQXRILEdBR0EsT0FBQXVILEVBVEEsSywwRkN2dkRBdm9DLEVBQUE0Z0MsS0FBQSxTQUFBM3pCLEVBQUFvSyxFQUFBb3hCLEVBQUFDLEVBQUFDLEdBQ0EsSUFBQXhwQyxFQUFBbWUsRUFDQXNyQixFQUFBLEVBQUFELEVBQUFELEVBQUEsRUFDQUcsR0FBQSxHQUFBRCxHQUFBLEVBQ0FFLEVBQUFELEdBQUEsRUFDQUUsR0FBQSxFQUNBeHBDLEVBQUFrcEMsRUFBQUUsRUFBQSxFQUFBLEVBQ0EzL0IsRUFBQXkvQixHQUFBLEVBQUEsRUFDQWo3QixFQUFBUCxFQUFBb0ssRUFBQTlYLEdBT0EsSUFMQUEsR0FBQXlKLEVBRUE3SixFQUFBcU8sR0FBQSxJQUFBdTdCLEdBQUEsRUFDQXY3QixLQUFBdTdCLEVBQ0FBLEdBQUFILEVBQ0EsRUFBQUcsRUFBQTVwQyxFQUFBLElBQUFBLEVBQUE4TixFQUFBb0ssRUFBQTlYLEdBQUFBLEdBQUF5SixFQUFBKy9CLEdBQUEsR0FLQSxJQUhBenJCLEVBQUFuZSxHQUFBLElBQUE0cEMsR0FBQSxFQUNBNXBDLEtBQUE0cEMsRUFDQUEsR0FBQUwsRUFDQSxFQUFBSyxFQUFBenJCLEVBQUEsSUFBQUEsRUFBQXJRLEVBQUFvSyxFQUFBOVgsR0FBQUEsR0FBQXlKLEVBQUErL0IsR0FBQSxHQUVBLEdBQUEsSUFBQTVwQyxFQUNBQSxFQUFBLEVBQUEycEMsTUFDQSxDQUFBLEdBQUEzcEMsSUFBQTBwQyxFQUNBLE9BQUF2ckIsRUFBQTByQixJQUFBZixFQUFBQSxHQUFBejZCLEdBQUEsRUFBQSxHQUVBOFAsR0FBQW9ULEtBQUFxVixJQUFBLEVBQUEyQyxHQUNBdnBDLEdBQUEycEMsRUFFQSxPQUFBdDdCLEdBQUEsRUFBQSxHQUFBOFAsRUFBQW9ULEtBQUFxVixJQUFBLEVBQUE1bUMsRUFBQXVwQyxJQUdBMW9DLEVBQUE4TCxNQUFBLFNBQUFtQixFQUFBbEssRUFBQXNVLEVBQUFveEIsRUFBQUMsRUFBQUMsR0FDQSxJQUFBeHBDLEVBQUFtZSxFQUFBN2QsRUFDQW1wQyxFQUFBLEVBQUFELEVBQUFELEVBQUEsRUFDQUcsR0FBQSxHQUFBRCxHQUFBLEVBQ0FFLEVBQUFELEdBQUEsRUFDQUksRUFBQSxLQUFBUCxFQUFBaFksS0FBQXFWLElBQUEsR0FBQSxJQUFBclYsS0FBQXFWLElBQUEsR0FBQSxJQUFBLEVBQ0F4bUMsRUFBQWtwQyxFQUFBLEVBQUFFLEVBQUEsRUFDQTMvQixFQUFBeS9CLEVBQUEsR0FBQSxFQUNBajdCLEVBQUF6SyxFQUFBLEdBQUEsSUFBQUEsR0FBQSxFQUFBQSxFQUFBLEVBQUEsRUFBQSxFQW1DQSxJQWpDQUEsRUFBQTJ0QixLQUFBd1ksSUFBQW5tQyxHQUVBb21DLE1BQUFwbUMsSUFBQUEsSUFBQWtsQyxFQUFBQSxHQUNBM3FCLEVBQUE2ckIsTUFBQXBtQyxHQUFBLEVBQUEsRUFDQTVELEVBQUEwcEMsSUFFQTFwQyxFQUFBdXhCLEtBQUFDLE1BQUFELEtBQUF4ZixJQUFBbk8sR0FBQTJ0QixLQUFBMFksS0FDQXJtQyxHQUFBdEQsRUFBQWl4QixLQUFBcVYsSUFBQSxHQUFBNW1DLElBQUEsSUFDQUEsSUFDQU0sR0FBQSxHQU9BLElBSkFzRCxHQURBLEdBQUE1RCxFQUFBMnBDLEVBQ0FHLEVBQUF4cEMsRUFFQXdwQyxFQUFBdlksS0FBQXFWLElBQUEsRUFBQSxFQUFBK0MsSUFFQXJwQyxJQUNBTixJQUNBTSxHQUFBLEdBR0FvcEMsR0FBQTFwQyxFQUFBMnBDLEdBQ0F4ckIsRUFBQSxFQUNBbmUsRUFBQTBwQyxHQUNBLEdBQUExcEMsRUFBQTJwQyxHQUNBeHJCLEdBQUF2YSxFQUFBdEQsRUFBQSxHQUFBaXhCLEtBQUFxVixJQUFBLEVBQUEyQyxHQUNBdnBDLEdBQUEycEMsSUFFQXhyQixFQUFBdmEsRUFBQTJ0QixLQUFBcVYsSUFBQSxFQUFBK0MsRUFBQSxHQUFBcFksS0FBQXFWLElBQUEsRUFBQTJDLEdBQ0F2cEMsRUFBQSxJQUlBLEdBQUF1cEMsRUFBQXo3QixFQUFBb0ssRUFBQTlYLEdBQUEsSUFBQStkLEVBQUEvZCxHQUFBeUosRUFBQXNVLEdBQUEsSUFBQW9yQixHQUFBLEdBSUEsSUFGQXZwQyxFQUFBQSxHQUFBdXBDLEVBQUFwckIsRUFDQXNyQixHQUFBRixFQUNBLEVBQUFFLEVBQUEzN0IsRUFBQW9LLEVBQUE5WCxHQUFBLElBQUFKLEVBQUFJLEdBQUF5SixFQUFBN0osR0FBQSxJQUFBeXBDLEdBQUEsR0FFQTM3QixFQUFBb0ssRUFBQTlYLEVBQUF5SixJQUFBLElBQUF3RSxJLHdCQ2pGQSxJQU9BNjdCLEVBQ0FDLEVBUkFwYixFQUFBOXRCLEVBQUFKLFFBQUEsR0FVQSxTQUFBdXBDLElBQ0EsTUFBQSxJQUFBMXBDLE1BQUEsbUNBRUEsU0FBQTJwQyxJQUNBLE1BQUEsSUFBQTNwQyxNQUFBLHFDQXNCQSxTQUFBNHBDLEVBQUFDLEdBQ0EsR0FBQUwsSUFBQXZzQixXQUVBLE9BQUFBLFdBQUE0c0IsRUFBQSxHQUdBLElBQUFMLElBQUFFLElBQUFGLElBQUF2c0IsV0FFQSxPQURBdXNCLEVBQUF2c0IsV0FDQUEsV0FBQTRzQixFQUFBLEdBRUEsSUFFQSxPQUFBTCxFQUFBSyxFQUFBLEdBQ0EsTUFBQXZxQyxHQUNBLElBRUEsT0FBQWtxQyxFQUFBcHBDLEtBQUEsS0FBQXlwQyxFQUFBLEdBQ0EsTUFBQXZxQyxHQUVBLE9BQUFrcUMsRUFBQXBwQyxLQUFBNkUsS0FBQTRrQyxFQUFBLE1BdkNBLFdBQ0EsSUFFQUwsRUFEQSxtQkFBQXZzQixXQUNBQSxXQUVBeXNCLEVBRUEsTUFBQXBxQyxHQUNBa3FDLEVBQUFFLEVBRUEsSUFFQUQsRUFEQSxtQkFBQTd2QixhQUNBQSxhQUVBK3ZCLEVBRUEsTUFBQXJxQyxHQUNBbXFDLEVBQUFFLEdBakJBLEdBd0VBLElBRUFHLEVBRkFDLEVBQUEsR0FDQUMsR0FBQSxFQUVBQyxHQUFBLEVBRUEsU0FBQUMsSUFDQUYsR0FBQUYsSUFHQUUsR0FBQSxFQUNBRixFQUFBenBDLE9BQ0EwcEMsRUFBQUQsRUFBQTluQyxPQUFBK25DLEdBRUFFLEdBQUEsRUFFQUYsRUFBQTFwQyxRQUNBOHBDLEtBSUEsU0FBQUEsSUFDQSxJQUFBSCxFQUFBLENBR0EsSUFBQS9uQixFQUFBMm5CLEVBQUFNLEdBQ0FGLEdBQUEsRUFHQSxJQURBLElBQUFwWixFQUFBbVosRUFBQTFwQyxPQUNBdXdCLEdBQUEsQ0FHQSxJQUZBa1osRUFBQUMsRUFDQUEsRUFBQSxLQUNBRSxFQUFBclosR0FDQWtaLEdBQ0FBLEVBQUFHLEdBQUFHLE1BR0FILEdBQUEsRUFDQXJaLEVBQUFtWixFQUFBMXBDLE9BRUF5cEMsRUFBQSxLQUNBRSxHQUFBLEVBbkVBLFNBQUFLLEdBQ0EsR0FBQVosSUFBQTd2QixhQUVBLE9BQUFBLGFBQUF5d0IsR0FHQSxJQUFBWixJQUFBRSxJQUFBRixJQUFBN3ZCLGFBRUEsT0FEQTZ2QixFQUFBN3ZCLGFBQ0FBLGFBQUF5d0IsR0FFQSxJQUVBWixFQUFBWSxHQUNBLE1BQUEvcUMsR0FDQSxJQUVBLE9BQUFtcUMsRUFBQXJwQyxLQUFBLEtBQUFpcUMsR0FDQSxNQUFBL3FDLEdBR0EsT0FBQW1xQyxFQUFBcnBDLEtBQUE2RSxLQUFBb2xDLEtBZ0RBQyxDQUFBcm9CLElBaUJBLFNBQUFzb0IsRUFBQVYsRUFBQTNKLEdBQ0FqN0IsS0FBQTRrQyxJQUFBQSxFQUNBNWtDLEtBQUFpN0IsTUFBQUEsRUFZQSxTQUFBc0ssS0E1QkFuYyxFQUFBb2MsU0FBQSxTQUFBWixHQUNBLElBQUE3dkIsRUFBQSxJQUFBOVEsTUFBQTBFLFVBQUF2TixPQUFBLEdBQ0EsR0FBQSxFQUFBdU4sVUFBQXZOLE9BQ0EsSUFBQSxJQUFBWCxFQUFBLEVBQUFBLEVBQUFrTyxVQUFBdk4sT0FBQVgsSUFDQXNhLEVBQUF0YSxFQUFBLEdBQUFrTyxVQUFBbE8sR0FHQXFxQyxFQUFBLzVCLEtBQUEsSUFBQXU2QixFQUFBVixFQUFBN3ZCLElBQ0EsSUFBQSt2QixFQUFBMXBDLFFBQUEycEMsR0FDQUosRUFBQU8sSUFTQUksRUFBQWhpQyxVQUFBNmhDLElBQUEsV0FDQW5sQyxLQUFBNGtDLElBQUE3OEIsTUFBQSxLQUFBL0gsS0FBQWk3QixRQUVBN1IsRUFBQTNvQixNQUFBLFVBQ0Eyb0IsRUFBQXFjLFNBQUEsRUFDQXJjLEVBQUFDLElBQUEsR0FDQUQsRUFBQXNjLEtBQUEsR0FDQXRjLEVBQUFsVixRQUFBLEdBQ0FrVixFQUFBdWMsU0FBQSxHQUlBdmMsRUFBQTVyQixHQUFBK25DLEVBQ0FuYyxFQUFBd2MsWUFBQUwsRUFDQW5jLEVBQUF5YyxLQUFBTixFQUNBbmMsRUFBQTFTLElBQUE2dUIsRUFDQW5jLEVBQUEwYyxlQUFBUCxFQUNBbmMsRUFBQTJjLG1CQUFBUixFQUNBbmMsRUFBQTRjLEtBQUFULEVBQ0FuYyxFQUFBNmMsZ0JBQUFWLEVBQ0FuYyxFQUFBOGMsb0JBQUFYLEVBRUFuYyxFQUFBK2MsVUFBQSxTQUFBbHlCLEdBQUEsTUFBQSxJQUVBbVYsRUFBQWdkLFFBQUEsU0FBQW55QixHQUNBLE1BQUEsSUFBQWxaLE1BQUEscUNBR0FxdUIsRUFBQWlkLElBQUEsV0FBQSxNQUFBLEtBQ0FqZCxFQUFBa2QsTUFBQSxTQUFBN0ssR0FDQSxNQUFBLElBQUExZ0MsTUFBQSxtQ0FFQXF1QixFQUFBbWQsTUFBQSxXQUFBLE9BQUEsSSxtRENoTEFwakMsT0FBQUMsZUFBQWxJLEVBQUEsYUFBQSxDQUFBK0MsT0FBQSxJQUVBLElBQUF1b0MsR0FBQTVyQyxFQUFBLGtCQUVBNnJDLEdBQUEsQ0FDQXZiLFNBQUEsR0FHQXdiLEdBQUEsWUFFQUMsRUFBQSxnQkFDQUMsRUFBQSxpQkFDQUMsRUFBQSxjQUNBQyxFQUFBLGtCQUtBLFNBQUFDLEdBQUE5b0MsRUFBQXNULEVBQUF5MUIsR0FDQSxHQUFBL2lDLE1BQUEyWCxRQUFBM2QsR0FBQSxDQUNBLElBQUEwTSxFQUFBMU0sRUFBQXNULEdBQ0EsT0FBQSxNQUFBNUcsRUFBQTFHLE1BQUEyWCxRQUFBb3JCLEdBQUFBLEVBQUF6MUIsR0FBQXkxQixFQUFBcjhCLEVBR0EsT0FBQTFNLEVBRUEsU0FBQWdwQyxFQUFBaHBDLEVBQUFvRCxHQUNBLElBQUEwZSxFQUFBLEdBQUE3RyxTQUFBL2QsS0FBQThDLEdBQ0EsT0FBQSxJQUFBOGhCLEVBQUF0WSxRQUFBLGFBQUEsRUFBQXNZLEVBQUF0WSxRQUFBcEcsRUFBQSxLQUVBLFNBQUE2bEMsR0FBQWpwQyxFQUFBOFcsR0FDQSxNQUFBLG1CQUFBOVcsRUFBQUEsRUFBQThKLFdBQUEsRUFBQWdOLEdBQUE5VyxFQUVBLFNBQUFrcEMsR0FBQXJmLEVBQUFzZixHQUVBLE9BQUEsSUFBQUEsRUFDQXRmLEVBSUEsU0FBQWhPLEdBQ0FuRixhQUFBcUksR0FDQUEsRUFBQWhGLFdBQUEsV0FDQThQLEVBQUFoTyxJQUNBc3RCLElBTEEsSUFBQXBxQixFQVFBLFNBQUFxcUIsRUFBQTdNLEVBQUFuaEIsR0FDQSxJQUFBaXVCLEVBQUFua0MsT0FBQXNGLE9BQUEsR0FBQSt4QixHQUlBLE9BSEFuaEIsRUFBQWQsUUFBQSxTQUFBZSxVQUNBZ3VCLEVBQUFodUIsS0FFQWd1QixFQUtBLFNBQUFDLEdBQUF0cEMsR0FDQSxNQUFBLEdBQUFsQixPQUFBa0IsR0FFQSxTQUFBdXBDLEdBQUEzZSxFQUFBNXFCLElBQ0EsSUFBQTRxQixFQUFBcGhCLFFBQUF4SixJQUNBNHFCLEVBQUE5ZCxLQUFBOU0sR0FRQSxTQUFBaXBCLEdBQUF2a0IsR0FDQSxPQUFBQSxFQUFBNGMsTUFBQSxLQUFBLEdBRUEsU0FBQWtvQixHQUFBeHBDLEdBQ0EsTUFBQSxHQUFBK0osTUFBQTdNLEtBQUE4QyxHQUdBLFNBQUF5cEMsS0FDQSxPQUFBL3JDLFNBQUFjLGNBQUEsT0FFQSxTQUFBb21CLEVBQUE1a0IsR0FDQSxPQUFBZ3BDLEVBQUFocEMsRUFBQSxXQUtBLFNBQUEwcEMsR0FBQTFwQyxHQUNBLE9BQUFncEMsRUFBQWhwQyxFQUFBLGNBRUEsU0FBQTJwQyxFQUFBM3BDLEdBQ0EsT0FBQUEsR0FBQUEsRUFBQXhDLFFBQUF3QyxFQUFBeEMsT0FBQWtxQixZQUFBMW5CLEVBRUEsU0FBQTRwQyxFQUFBNXBDLEdBQ0EsT0FBQTRrQixFQUFBNWtCLEdBQ0EsQ0FBQUEsR0FWQWdwQyxFQWFBaHBDLEVBYkEsWUFjQXdwQyxHQUFBeHBDLEdBR0FnRyxNQUFBMlgsUUFBQTNkLEdBQ0FBLEVBR0F3cEMsR0FBQTlyQyxTQUFBbXNDLGlCQUFBN3BDLElBRUEsU0FBQThwQyxHQUFBQyxFQUFBL3BDLEdBQ0ErcEMsRUFBQXp2QixRQUFBLFNBQUEwdkIsR0FDQUEsSUFDQUEsRUFBQXhsQyxNQUFBeWxDLG1CQUFBanFDLEVBQUEsUUFJQSxTQUFBa3FDLEdBQUFILEVBQUFoZ0IsR0FDQWdnQixFQUFBenZCLFFBQUEsU0FBQTB2QixHQUNBQSxHQUNBQSxFQUFBNVYsYUFBQSxhQUFBckssS0FJQSxTQUFBb2dCLEdBQUFDLEdBQ0EsSUFDQTNtQixFQURBNmxCLEdBQUFjLEdBQ0EsR0FFQSxPQUFBM21CLEdBQUFBLEVBQUFXLGVBQUExbUIsU0E0QkEsU0FBQTJzQyxHQUFBQyxFQUFBQyxFQUFBQyxHQUNBLElBQUFuakMsRUFBQWtqQyxFQUFBLGdCQUdBLENBQUEsZ0JBQUEsdUJBQUFqd0IsUUFBQSxTQUFBeGEsR0FDQXdxQyxFQUFBampDLEdBQUF2SCxFQUFBMHFDLEtBSUEsSUFBQUMsR0FBQSxDQUNBQyxTQUFBLEdBRUFDLEVBQUEsRUFRQSxTQUFBQyxJQUNBSCxHQUFBQyxVQUlBRCxHQUFBQyxTQUFBLEVBRUE1c0MsT0FBQStzQyxhQUNBbnRDLFNBQUFtQyxpQkFBQSxZQUFBaXJDLElBU0EsU0FBQUEsSUFDQSxJQUFBL3ZCLEVBQUE4dkIsWUFBQTl2QixNQUVBQSxFQUFBNHZCLEVBQUEsS0FDQUYsR0FBQUMsU0FBQSxFQUNBaHRDLFNBQUFrMkIsb0JBQUEsWUFBQWtYLElBR0FILEVBQUE1dkIsRUFTQSxTQUFBZ3dCLElBQ0EsSUFHQWx0QixFQUhBbXRCLEVBQUF0dEMsU0FBQXN0QyxjQUVBckIsRUFBQXFCLEtBQ0FudEIsRUFBQW10QixFQUFBeHRDLE9BRUF3dEMsRUFBQUMsT0FBQXB0QixFQUFBa00sTUFBQW1oQixXQUNBRixFQUFBQyxRQVdBLElBQUE3M0IsRUFBQSxvQkFBQXRWLFFBQUEsb0JBQUFKLFNBQ0F5dEMsRUFBQS8zQixFQUFBdWQsVUFBQXlhLFVBQUEsR0FDQUMsR0FBQSxrQkFBQXZwQyxLQUFBcXBDLEdBQ0FHLEdBQUFsNEIsR0FBQSxtQkFBQXRSLEtBQUE2dUIsVUFBQUMsVUFFQSxTQUFBMmEsR0FBQWxrQyxHQUVBLE1BQUEsQ0FBQUEsRUFBQSxzQkFEQSxZQUFBQSxFQUFBLGFBQUEsS0FDQSwwQ0FBQSxzQ0FBQTRLLEtBQUEsS0FFQSxTQUFBdTVCLEVBQUF4ckMsR0FHQSxPQUFBQSxFQUFBK0QsUUFGQSxhQUVBLEtBQUFBLFFBREEsWUFDQSxJQUFBazlCLE9BT0EsU0FBQXdLLEVBQUExckMsR0FDQSxNQUFBLENBSkF5ckMsRUFBQSx5QkFBQUEsRUFJQXpyQyxHQUpBLHlGQUtBLHVEQUNBLG1CQUNBLG1CQVNBLFNBQUEyckMsR0FBQUMsRUFBQTVyQyxHQUNBLElBQ0E2ckMsRUFEQUQsSUFHQUMsRUFBQWpzQyxTQUFBZ2QsS0FBQTdTLE1BQUE4aEMsRUFBQUgsRUFBQTFyQyxJQU9BLFNBQUE4ckMsR0FBQUYsRUFBQTVyQyxHQUNBLElBQ0ErckMsRUFEQUgsSUFHQUcsRUFBQW5zQyxTQUFBQyxNQUFBa0ssTUFBQWdpQyxFQUFBTCxFQUFBMXJDLElBY0EsSUFBQWdzQyxFQUFBLENBQ0FDLGFBQUEsRUFDQUMsY0FBQSxFQUNBQyxtQkFBQSxFQUNBQyxRQUFBLEdBYUFDLEdBQUFsbkMsT0FBQXNGLE9BQUEsQ0FDQTZoQyxTQUFBLFdBQ0EsT0FBQTN1QyxTQUFBbU8sTUFFQXlnQyxLQUFBLENBQ0FuckMsUUFBQSxPQUNBb3JDLFNBQUEsUUFFQXByQyxRQUFBLEdBQ0FxckMsTUFBQSxFQUNBQyxTQUFBLENBQUEsSUFBQSxLQUNBQyx1QkFBQSxLQUNBQyxhQUFBLEVBQ0FDLGtCQUFBLEVBQ0FDLGFBQUEsRUFDQUMsa0JBQUEsRUFDQUMsb0JBQUEsRUFDQUMsZUFBQSxHQUNBMTRCLE9BQUEsQ0FBQSxFQUFBLElBQ0EyNEIsY0FBQSxhQUNBQyxlQUFBLGFBQ0FDLFNBQUEsYUFDQUMsVUFBQSxhQUNBQyxTQUFBLGFBQ0FDLE9BQUEsYUFDQUMsUUFBQSxhQUNBQyxPQUFBLGFBQ0FDLFFBQUEsYUFDQUMsVUFBQSxhQUNBQyxZQUFBLGFBQ0FDLGVBQUEsYUFDQWxwQyxVQUFBLE1BQ0FtcEMsUUFBQSxHQUNBQyxjQUFBLEdBQ0FDLE9BQUEsS0FDQUMsY0FBQSxFQUNBQyxPQUFBLEVBQ0FDLFFBQUEsbUJBQ0FDLGNBQUEsTUFDQXBDLEVBQUEsR0FsREEsQ0FDQXBuQyxXQUFBLEVBQ0F5cEMsVUFBQSxPQUNBbmEsT0FBQSxFQUNBOXlCLFFBQUEsR0FDQWt0QyxTQUFBLEVBQ0FDLFNBQUEsSUFDQUMsS0FBQSxVQUNBQyxNQUFBLEdBQ0FDLE9BQUEsT0EwQ0FDLEVBQUF4cEMsT0FBQWtXLEtBQUFneEIsSUFZQSxTQUFBdUMsR0FBQUMsR0FDQSxJQUNBN0MsR0FEQTZDLEVBQUFmLFNBQUEsSUFDQXg1QixPQUFBLFNBQUF1VCxFQUFBaW5CLEdBQ0EsSUFBQTc0QixFQUFBNjRCLEVBQUE3NEIsS0FDQSt5QixFQUFBOEYsRUFBQTlGLGFBTUEsT0FKQS95QixJQUNBNFIsRUFBQTVSLFFBQUE3TixJQUFBeW1DLEVBQUE1NEIsR0FBQTQ0QixFQUFBNTRCLEdBQUEreUIsR0FHQW5oQixHQUNBLElBQ0EsT0FBQTFpQixPQUFBc0YsT0FBQSxHQUFBb2tDLEVBQUEsR0FBQTdDLEdBMkJBLFNBQUErQyxHQUFBcG5CLEVBQUFxbkIsR0FDQSxJQTFCQXJuQixFQUFBbW1CLEVBMEJBbE0sRUFBQXo4QixPQUFBc0YsT0FBQSxHQUFBdWtDLEVBQUEsQ0FDQTV0QyxRQUFBOG5DLEdBQUE4RixFQUFBNXRDLFFBQUEsQ0FBQXVtQixLQUNBcW5CLEVBQUFuQyxpQkFBQSxJQTVCQWxsQixFQTRCQUEsSUE1QkFtbUIsRUE0QkFrQixFQUFBbEIsU0EzQkEzb0MsT0FBQWtXLEtBQUF1ekIsR0FBQXpwQyxPQUFBc0YsT0FBQSxHQUFBNGhDLEdBQUEsQ0FDQXlCLFFBQUFBLE1BQ0FhLEdBQ0FyNkIsT0FBQSxTQUFBdVQsRUFBQXZNLEdBQ0EsSUFBQTJ6QixHQUFBdG5CLEVBQUF1bkIsYUFBQSxjQUFBNXpCLElBQUEsSUFBQTRsQixPQUVBLElBQUErTixFQUNBLE9BQUFwbkIsRUFHQSxHQUFBLFlBQUF2TSxFQUNBdU0sRUFBQXZNLEdBQUEyekIsT0FFQSxJQUNBcG5CLEVBQUF2TSxHQUFBNWMsS0FBQUMsTUFBQXN3QyxHQUNBLE1BQUE1eUMsR0FDQXdyQixFQUFBdk0sR0FBQTJ6QixFQUlBLE9BQUFwbkIsR0FDQSxNQVlBLE9BTEErWixFQUFBMkssS0FBQXBuQyxPQUFBc0YsT0FBQSxHQUFBNGhDLEdBQUFFLEtBQUEsR0FBQTNLLEVBQUEySyxNQUNBM0ssRUFBQTJLLEtBQUEsQ0FDQUMsU0FBQSxTQUFBNUssRUFBQTJLLEtBQUFDLFNBQUF3QyxFQUFBbEMsWUFBQWxMLEVBQUEySyxLQUFBQyxTQUNBcHJDLFFBQUEsU0FBQXdnQyxFQUFBMkssS0FBQW5yQyxRQUFBNHRDLEVBQUFsQyxZQUFBLEtBQUEsY0FBQWxMLEVBQUEySyxLQUFBbnJDLFNBRUF3Z0MsRUFFQSxTQUFBdU4sRUFBQUMsRUFBQXRCLFFBQ0EsSUFBQXNCLElBQ0FBLEVBQUEsU0FHQSxJQUFBdEIsSUFDQUEsRUFBQSxJQUdBM29DLE9BQUFrVyxLQUFBK3pCLEdBQ0E3MEIsUUFBQSxTQUFBODBCLEdBQ0EsSUFqWkE3UyxFQUFBbGhCLEVBaVpBZzBCLEVBQUFqRyxFQUFBZ0QsR0FBQWxuQyxPQUFBa1csS0FBQTJ3QixJQVNBTCxJQTFaQW5QLEVBa1pBOFMsRUFsWkFoMEIsRUFrWkErekIsR0FqWkEsR0FBQWpwQyxlQUFBakosS0FBQXEvQixFQUFBbGhCLEtBc1pBLElBRkF3eUIsRUFBQTVpQixPQUFBLFNBQUE0akIsR0FDQSxPQUFBQSxFQUFBNzRCLE9BQUFvNUIsSUFDQWp5QyxPQUdBLENBQUEsSUFBQWl5QyxFQUFBLElBQUEsdUVBQUEsNERBQUEsT0FBQSwrREFBQSwwREFBQW45QixLQUFBLFFBSUEsSUFBQXJQLEVBQUEsV0FDQSxNQUFBLGFBR0EsU0FBQTBzQyxFQUFBN3JCLEVBQUE4ckIsR0FDQTlyQixFQUFBN2dCLEtBQUEyc0MsRUFHQSxTQUFBQyxFQUFBeHZDLEdBQ0EsSUFBQWkwQixFQUFBd1YsS0FjQSxPQVpBLElBQUF6cEMsRUFDQWkwQixFQUFBd2IsVUFBQTdHLEdBRUEzVSxFQUFBd2IsVUFBQTVHLEVBRUFqa0IsRUFBQTVrQixHQUNBaTBCLEVBQUEveEIsWUFBQWxDLEdBRUFzdkMsRUFBQXJiLEVBQUFqMEIsSUFJQWkwQixFQUdBLFNBQUF5YixFQUFBdnVDLEVBQUE0dEMsR0FDQW5xQixFQUFBbXFCLEVBQUE1dEMsVUFDQW11QyxFQUFBbnVDLEVBQUEsSUFDQUEsRUFBQWUsWUFBQTZzQyxFQUFBNXRDLFVBQ0EsbUJBQUE0dEMsRUFBQTV0QyxVQUNBNHRDLEVBQUFwcUMsVUFDQTJxQyxFQUFBbnVDLEVBQUE0dEMsRUFBQTV0QyxTQUVBQSxFQUFBZ0MsWUFBQTRyQyxFQUFBNXRDLFNBSUEsU0FBQXd1QyxHQUFBbG9CLEdBQ0EsSUFBQTZpQixFQUFBN2lCLEVBQUFtb0Isa0JBQ0FDLEVBQUFyRyxHQUFBYyxFQUFBd0YsVUFDQSxNQUFBLENBQ0F4RixJQUFBQSxFQUNBbnBDLFFBQUEwdUMsRUFBQW5rQixLQUFBLFNBQUF2SCxHQUNBLE9BQUFBLEVBQUFubEIsVUFBQUMsU0FBQXlwQyxLQUVBelUsTUFBQTRiLEVBQUFua0IsS0FBQSxTQUFBdkgsR0FDQSxPQUFBQSxFQUFBbmxCLFVBQUFDLFNBQUEycEMsSUFBQXprQixFQUFBbmxCLFVBQUFDLFNBQUE0cEMsS0FFQWtILFNBQUFGLEVBQUFua0IsS0FBQSxTQUFBdkgsR0FDQSxPQUFBQSxFQUFBbmxCLFVBQUFDLFNBQUEwcEMsTUFJQSxTQUFBb0YsRUFBQWx3QixHQUNBLElBQUE0SixFQUFBZ2lCLEtBQ0FhLEVBQUFiLEtBQ0FhLEVBQUFtRixVQTdkQSxZQThkQW5GLEVBQUFsVyxhQUFBLGFBQUEsVUFDQWtXLEVBQUFsVyxhQUFBLFdBQUEsTUFDQSxJQUFBanpCLEVBQUFzb0MsS0FRQSxTQUFBdUcsRUFBQUMsRUFBQUMsR0FDQSxJQUFBQyxFQUFBUixHQUFBbG9CLEdBQ0E2aUIsRUFBQTZGLEVBQUE3RixJQUNBbnBDLEVBQUFndkMsRUFBQWh2QyxRQUNBOHlCLEVBQUFrYyxFQUFBbGMsTUFFQWljLEVBQUExQixNQUNBbEUsRUFBQWxXLGFBQUEsYUFBQThiLEVBQUExQixPQUVBbEUsRUFBQW5XLGdCQUFBLGNBR0EsaUJBQUErYixFQUFBOUIsVUFDQTlELEVBQUFsVyxhQUFBLGlCQUFBOGIsRUFBQTlCLFdBRUE5RCxFQUFBblcsZ0JBQUEsa0JBR0ErYixFQUFBN0IsUUFDQS9ELEVBQUFsVyxhQUFBLGVBQUEsSUFFQWtXLEVBQUFuVyxnQkFBQSxnQkFHQW1XLEVBQUE5bEMsTUFBQThwQyxTQUFBLGlCQUFBNEIsRUFBQTVCLFNBQUE0QixFQUFBNUIsU0FBQSxLQUFBNEIsRUFBQTVCLFNBRUE0QixFQUFBM0IsS0FDQWpFLEVBQUFsVyxhQUFBLE9BQUE4YixFQUFBM0IsTUFFQWpFLEVBQUFuVyxnQkFBQSxRQUdBOGIsRUFBQTl1QyxVQUFBK3VDLEVBQUEvdUMsU0FDQXV1QyxFQUFBdnVDLEVBQUEwYyxFQUFBa3hCLE9BR0FtQixFQUFBamMsTUFDQUEsRUFFQWdjLEVBQUFoYyxRQUFBaWMsRUFBQWpjLFFBQ0FxVyxFQUFBOEYsWUFBQW5jLEdBQ0FxVyxFQUFBcG9DLFlBQUFzdEMsRUFBQVUsRUFBQWpjLFNBSEFxVyxFQUFBcG9DLFlBQUFzdEMsRUFBQVUsRUFBQWpjLFFBS0FBLEdBQ0FxVyxFQUFBOEYsWUFBQW5jLEdBSUEsT0F2REE5eUIsRUFBQXN1QyxVQUFBL0csRUFDQXZuQyxFQUFBaXpCLGFBQUEsYUFBQSxVQUNBc2IsRUFBQXZ1QyxFQUFBMGMsRUFBQWt4QixPQUNBdG5CLEVBQUF2bEIsWUFBQW9vQyxHQUNBQSxFQUFBcG9DLFlBQUFmLEdBQ0E2dUMsRUFBQW55QixFQUFBa3hCLE1BQUFseEIsRUFBQWt4QixPQWtEQSxDQUNBdG5CLE9BQUFBLEVBQ0F1b0IsU0FBQUEsR0FLQWpDLEVBQUFzQyxTQUFBLEVBRUEsSUFBQUMsR0FBQSxFQUNBQyxHQUFBLEdBRUFDLEdBQUEsR0FDQSxTQUFBQyxFQUFBL29CLEVBQUFrbkIsR0FDQSxJQUlBOEIsRUFDQUMsRUFDQUMsRUFJQUMsRUFDQUMsRUFDQTlqQixFQUdBK2pCLEVBN2ZBbm1CLEVBOGVBbWtCLEVBQUFELEdBQUFwbkIsRUFBQXhpQixPQUFBc0YsT0FBQSxHQUFBNGhDLEdBQUEsR0FBQXVDLEdBQUFDLEtBT0FvQyxHQUFBLEVBQ0FDLEdBQUEsRUFDQUMsR0FBQSxFQUlBaEosRUFBQSxHQUNBaUosRUFBQWpJLEdBQUFrSSxFQUFBckMsRUFBQWhDLHFCQUVBc0UsRUFBQWxILEdBQUE0RSxFQUFBWixlQUFBem1CLEdBSUEzb0IsRUFBQXV4QyxLQUVBekMsR0FwZ0JBampCLEVBb2dCQW1rQixFQUFBbEIsU0FuZ0JBNWlCLE9BQUEsU0FBQXpXLEVBQUFsQixHQUNBLE9BQUFzWCxFQUFBcGhCLFFBQUFnTCxLQUFBbEIsSUErZ0JBdUssRUFBQSxDQUVBOWUsR0FBQUEsRUFDQTJvQixVQUFBQSxFQUNBRCxPQUFBZ2lCLEtBQ0E2SCxlQW5CQSxLQW9CQXZDLE1BQUFBLEVBQ0FobEIsTUFuQkEsQ0FFQXduQixXQUFBLEVBRUFyRyxXQUFBLEVBRUE1Z0IsYUFBQSxFQUVBa25CLFdBQUEsRUFFQUMsU0FBQSxHQVVBNUQsUUFBQUEsRUFFQTZELG1CQTBtQkEsV0FDQWg3QixhQUFBZzZCLEdBQ0FoNkIsYUFBQWk2QixHQUNBZ0IscUJBQUFmLElBNW1CQWdCLFNBK21CQSxTQUFBekMsR0FFQSxlQUFBaGtCLEdBQUFDLElBQUFDLFVBQ0FxZ0IsR0FBQTd0QixFQUFBa00sTUFBQU8sWUFBQWloQixHQUFBLGFBR0EsR0FBQTF0QixFQUFBa00sTUFBQU8sWUFDQSxPQUdBdW5CLEVBQUEsaUJBQUEsQ0FBQWgwQixFQUFBc3hCLElBQ0EyQyxJQUNBLElBQUE3QixFQUFBcHlCLEVBQUFreEIsTUFDQW1CLEVBQUFwQixHQUFBcG5CLEVBQUF4aUIsT0FBQXNGLE9BQUEsR0FBQXFULEVBQUFreEIsTUFBQSxHQUFBSSxFQUFBLENBQ0F2QyxrQkFBQSxLQUVBL3VCLEVBQUFreEIsTUFBQW1CLEVBQ0E2QixJQUVBOUIsRUFBQWxELHNCQUFBbUQsRUFBQW5ELHNCQUNBaUYsSUFDQWIsRUFBQWpJLEdBQUFrSSxFQUFBbEIsRUFBQW5ELHNCQUlBa0QsRUFBQTlCLGdCQUFBK0IsRUFBQS9CLGNBQ0E3RSxHQUFBMkcsRUFBQTlCLGVBQUE3ekIsUUFBQSxTQUFBNkosR0FDQUEsRUFBQWdRLGdCQUFBLG1CQUVBK2IsRUFBQS9CLGVBQ0F6bUIsRUFBQXlNLGdCQUFBLGlCQUdBOGQsSUFDQUMsSUFFQWxDLEdBQ0FBLEVBQUFDLEVBQUFDLEdBR0FyeUIsRUFBQXl6QixpQkFDQWEsSUFLQUMsSUFBQTkzQixRQUFBLFNBQUErM0IsR0FHQUMsc0JBQUFELEVBQUE3MEMsT0FBQTh6QyxlQUFBL2tCLGdCQUlBc2xCLEVBQUEsZ0JBQUEsQ0FBQWgwQixFQUFBc3hCLEtBbnFCQU8sV0FzcUJBLFNBQUF2dUMsR0FDQTBjLEVBQUErekIsU0FBQSxDQUNBendDLFFBQUFBLEtBdnFCQW94QyxLQTJxQkEsV0FFQSxlQUFBcG5CLEdBQUFDLElBQUFDLFVBQ0FxZ0IsR0FBQTd0QixFQUFBa00sTUFBQU8sWUFBQWloQixHQUFBLFNBSUEsSUFBQWlILEVBQUEzMEIsRUFBQWtNLE1BQUFtaEIsVUFDQTVnQixFQUFBek0sRUFBQWtNLE1BQUFPLFlBQ0Ftb0IsR0FBQTUwQixFQUFBa00sTUFBQXduQixVQUNBbUIsRUFBQWpJLEdBQUFDLFVBQUE3c0IsRUFBQWt4QixNQUFBZCxNQUNBeEIsRUFBQTNELEdBQUFqckIsRUFBQWt4QixNQUFBdEMsU0FBQSxFQUFBTCxHQUFBSyxVQUVBLEdBQUErRixHQUFBbG9CLEdBQUFtb0IsR0FBQUMsRUFDQSxPQU1BLEdBQUFDLElBQUFDLGFBQUEsWUFDQSxPQUtBLEdBRkFmLEVBQUEsU0FBQSxDQUFBaDBCLElBQUEsSUFFQSxJQUFBQSxFQUFBa3hCLE1BQUF2QixPQUFBM3ZCLEdBQ0EsT0FHQUEsRUFBQWtNLE1BQUFtaEIsV0FBQSxFQUVBMkgsTUFDQXByQixFQUFBampCLE1BQUFzdUMsV0FBQSxXQUdBWixJQUNBYSxJQUVBbDFCLEVBQUFrTSxNQUFBeW5CLFlBQ0EvcEIsRUFBQWpqQixNQUFBd3VDLFdBQUEsUUFLQSxDQUFBLElBQ0FDLEVBQ0EzSSxFQUNBbnBDLEVBSEEweEMsTUFDQUksRUFBQUMsSUFDQTVJLEVBQUEySSxFQUFBM0ksSUFDQW5wQyxFQUFBOHhDLEVBQUE5eEMsUUFFQTJvQyxHQUFBLENBQUFRLEVBQUFucEMsR0FBQSxJQUdBNnJCLEVBQUEsV0FDQSxJQVVBbW1CLEVBQ0FDLEVBQ0FDLEVBWkF4MUIsRUFBQWtNLE1BQUFtaEIsWUFBQWdHLElBSUFBLEdBQUEsRUFFQXpwQixFQUFBbkIsYUFDQW1CLEVBQUFqakIsTUFBQXd1QyxXQUFBbjFCLEVBQUFreEIsTUFBQS9CLGVBRUE2RixLQUFBaDFCLEVBQUFreEIsTUFBQVgsWUFLQXRFLEdBQUEsQ0FIQXNKLEdBREFELEVBQUFELEtBQ0E1SSxJQUNBK0ksRUFBQUYsRUFBQWh5QyxTQUVBc3JDLEdBQ0F2QyxHQUFBLENBQUFrSixFQUFBQyxHQUFBLFlBR0FDLElBQ0FyQixJQUNBMUksR0FBQWlILEdBQUEzeUIsR0FDQTAxQixHQUFBLEdBQ0ExMUIsRUFBQWtNLE1BQUF5bkIsV0FBQSxFQUNBSyxFQUFBLFVBQUEsQ0FBQWgwQixJQUVBQSxFQUFBa3hCLE1BQUFYLFdBQUF5RSxLQXBoQkFXLEVBcWhCQS9HLEVBQUEsV0FDQTV1QixFQUFBa00sTUFBQTBuQixTQUFBLEVBQ0FJLEVBQUEsVUFBQSxDQUFBaDBCLFFBNVBBLFdBQ0EsSUFDQTRJLEVBREE0bEIsRUFBQXh1QixFQUFBa3hCLE1BQUExQyxTQU9BbG9CLEVBQUF3dUIsSUFHQWxzQixFQURBNUksRUFBQWt4QixNQUFBbEMsYUFBQVIsSUFBQUQsR0FBQUMsVUFBQSxXQUFBQSxFQUNBbG9CLEVBQUFzQyxXQUVBd2lCLEdBQUFvRCxFQUFBLENBQUFsb0IsSUFLQXNDLEVBQUF4bkIsU0FBQXdvQixJQUNBaEIsRUFBQXZrQixZQUFBdWxCLEdBR0EwcUIsSUFHQSxlQUFBaG5CLEdBQUFDLElBQUFDLFVBRUFxZ0IsR0FBQTd0QixFQUFBa3hCLE1BQUFsQyxhQUFBUixJQUFBRCxHQUFBQyxVQUFBbG9CLEVBQUFzdkIscUJBQUFoc0IsRUFBQSxDQUFBLCtEQUFBLG9FQUFBLDJCQUFBLE9BQUEsbUVBQUEsb0RBQUEsT0FBQSxxRUFBQSw4REFBQSx1QkFBQSxPQUFBLDBFQUFBeFYsS0FBQSxNQXNPQXloQyxJQWp3QkFDLEtBb3dCQSxXQUVBLGVBQUF4b0IsR0FBQUMsSUFBQUMsVUFDQXFnQixHQUFBN3RCLEVBQUFrTSxNQUFBTyxZQUFBaWhCLEdBQUEsU0FJQSxJQUFBcUksR0FBQS8xQixFQUFBa00sTUFBQW1oQixVQUNBNWdCLEVBQUF6TSxFQUFBa00sTUFBQU8sWUFDQW1vQixHQUFBNTBCLEVBQUFrTSxNQUFBd25CLFVBQ0E5RSxFQUFBM0QsR0FBQWpyQixFQUFBa3hCLE1BQUF0QyxTQUFBLEVBQUFMLEdBQUFLLFVBRUEsR0FBQW1ILEdBQUF0cEIsR0FBQW1vQixFQUNBLE9BS0EsR0FGQVosRUFBQSxTQUFBLENBQUFoMEIsSUFBQSxJQUVBLElBQUFBLEVBQUFreEIsTUFBQXpCLE9BQUF6dkIsR0FDQSxPQUdBQSxFQUFBa00sTUFBQW1oQixXQUFBLEVBQ0FydEIsRUFBQWtNLE1BQUEwbkIsU0FBQSxFQUNBUCxHQUFBLEVBRUEyQixNQUNBcHJCLEVBQUFqakIsTUFBQXN1QyxXQUFBLFVBT0EsQ0FBQSxJQUNBZSxFQUNBdkosRUFDQW5wQyxFQVBBNndDLElBQ0E4QixJQUNBNUIsSUFFQVcsTUFDQWdCLEVBQUFYLElBQ0E1SSxFQUFBdUosRUFBQXZKLElBQ0FucEMsRUFBQTB5QyxFQUFBMXlDLFFBRUEwYyxFQUFBa3hCLE1BQUFYLFlBQ0F0RSxHQUFBLENBQUFRLEVBQUFucEMsR0FBQXNyQyxHQUNBdkMsR0FBQSxDQUFBSSxFQUFBbnBDLEdBQUEsWUFJQW15QyxJQUNBckIsSUFFQXAwQixFQUFBa3hCLE1BQUFYLFVBQ0F5RSxLQXpsQkEsU0FBQXBHLEVBQUE1ekIsR0FDQTI2QixFQUFBL0csRUFBQSxZQUNBNXVCLEVBQUFrTSxNQUFBbWhCLFdBQUF6akIsRUFBQWhCLFlBQUFnQixFQUFBaEIsV0FBQXhuQixTQUFBd29CLElBQ0E1TyxNQXVsQkFrN0IsQ0FBQXRILEVBQUE1dUIsRUFBQW0yQixTQUdBbjJCLEVBQUFtMkIsV0F4ekJBQyxPQTBsQkEsV0FDQXAyQixFQUFBa00sTUFBQXduQixXQUFBLEdBMWxCQTJDLFFBNmxCQSxXQUdBcjJCLEVBQUE4MUIsT0FDQTkxQixFQUFBa00sTUFBQXduQixXQUFBLEdBaG1CQXlDLFFBMHpCQSxXQUNBbjJCLEVBQUFrTSxNQUFBbWhCLFdBQ0FydEIsRUFBQTgxQixPQUdBLElBQUE5MUIsRUFBQWtNLE1BQUF5bkIsVUFDQSxPQUdBMkMsSUFJQS9CLElBQUE5M0IsUUFBQSxTQUFBKzNCLEdBQ0FBLEVBQUE3MEMsT0FBQXcyQyxZQUdBdnNCLEVBQUFoQixZQUNBZ0IsRUFBQWhCLFdBQUEycEIsWUFBQTNvQixHQU9BLEtBSkErb0IsR0FBQUEsR0FBQXZsQixPQUFBLFNBQUF6dUIsR0FDQSxPQUFBQSxJQUFBcWhCLEtBR0ExZ0IsUUFDQW8yQyxHQUFBLEdBR0ExMUIsRUFBQWtNLE1BQUF5bkIsV0FBQSxFQUNBSyxFQUFBLFdBQUEsQ0FBQWgwQixLQXYxQkFrUCxRQTAxQkEsV0FFQSxlQUFBNUIsR0FBQUMsSUFBQUMsVUFDQXFnQixHQUFBN3RCLEVBQUFrTSxNQUFBTyxZQUFBaWhCLEdBQUEsWUFHQSxHQUFBMXRCLEVBQUFrTSxNQUFBTyxZQUNBLE9BR0F6TSxFQUFBNnpCLHFCQUNBN3pCLEVBQUFtMkIsVUFDQWxDLFdBQ0FwcUIsRUFBQWxxQixPQUNBcWdCLEVBQUFrTSxNQUFBTyxhQUFBLEVBQ0F1bkIsRUFBQSxZQUFBLENBQUFoMEIsTUFuMkJBLElBQUFreEIsRUFBQWhCLE9BS0EsTUFKQSxlQUFBNWlCLEdBQUFDLElBQUFDLFVBQ0F3Z0IsSUFBQSxFQUFBLDRDQUdBaHVCLEVBTUEsSUFBQXUyQixFQUFBckYsRUFBQWhCLE9BQUFsd0IsR0FDQTRKLEVBQUEyc0IsRUFBQTNzQixPQUNBdW9CLEVBQUFvRSxFQUFBcEUsU0FFQXZvQixFQUFBMk0sYUFBQSxrQkFBQSxJQUNBM00sRUFBQTFvQixHQUFBLFNBQUE4ZSxFQUFBOWUsR0FDQThlLEVBQUE0SixPQUFBQSxFQUNBQyxFQUFBbHFCLE9BQUFxZ0IsRUFDQTRKLEVBQUFqcUIsT0FBQXFnQixFQUNBLElBQUF3MkIsRUFBQXhHLEVBQUEvNkIsSUFBQSxTQUFBKzdCLEdBQ0EsT0FBQUEsRUFBQWhsQixHQUFBaE0sS0FFQXkyQixFQUFBNXNCLEVBQUFrckIsYUFBQSxpQkF1QkEsT0F0QkFiLElBQ0FFLElBQ0FDLElBQ0FMLEVBQUEsV0FBQSxDQUFBaDBCLElBRUFreEIsRUFBQWYsY0FDQXVHLElBS0E5c0IsRUFBQTVuQixpQkFBQSxhQUFBLFdBQ0FnZSxFQUFBa3hCLE1BQUFsQyxhQUFBaHZCLEVBQUFrTSxNQUFBbWhCLFdBQ0FydEIsRUFBQTZ6Qix1QkFHQWpxQixFQUFBNW5CLGlCQUFBLGFBQUEsU0FBQUMsR0FDQStkLEVBQUFreEIsTUFBQWxDLGFBQUEsR0FBQWh2QixFQUFBa3hCLE1BQUFiLFFBQUExa0MsUUFBQSxnQkFDQTZuQyxFQUFBeHhDLGlCQUFBLFlBQUFzeEMsR0FDQUEsRUFBQXJ4QyxNQUdBK2QsRUFJQSxTQUFBMjJCLElBQ0EsSUFBQXZHLEVBQUFwd0IsRUFBQWt4QixNQUFBZCxNQUNBLE9BQUFqb0MsTUFBQTJYLFFBQUFzd0IsR0FBQUEsRUFBQSxDQUFBQSxFQUFBLEdBR0EsU0FBQXdHLElBQ0EsTUFBQSxTQUFBRCxJQUFBLEdBR0EsU0FBQTNCLElBQ0EsSUFBQTZCLEVBR0EsT0FBQSxPQUFBQSxFQUFBNzJCLEVBQUFreEIsTUFBQWhCLFNBQUEyRyxFQUFBckUsUUFHQSxTQUFBc0MsSUFDQSxPQUFBNUIsR0FBQXJwQixFQUdBLFNBQUF3ckIsSUFDQSxPQUFBdkQsR0FBQWxvQixHQUdBLFNBQUFrdEIsRUFBQUMsR0FJQSxPQUFBLzJCLEVBQUFrTSxNQUFBeW5CLFlBQUEzekIsRUFBQWtNLE1BQUFtaEIsV0FBQVQsR0FBQUMsU0FBQW1HLEdBQUEsVUFBQUEsRUFBQXp0QyxLQUNBLEVBR0EwbEMsR0FBQWpyQixFQUFBa3hCLE1BQUF2QyxNQUFBb0ksRUFBQSxFQUFBLEVBQUF4SSxHQUFBSSxPQUdBLFNBQUEwRixJQUNBenFCLEVBQUFqakIsTUFBQXF3QyxjQUFBaDNCLEVBQUFreEIsTUFBQWxDLGFBQUFodkIsRUFBQWtNLE1BQUFtaEIsVUFBQSxHQUFBLE9BQ0F6akIsRUFBQWpqQixNQUFBaXFDLE9BQUEsR0FBQTV3QixFQUFBa3hCLE1BQUFOLE9BR0EsU0FBQThFLEVBQUF1QixHQUNBLElBQUFDLEVBQUFELEdBQUF4SixJQUFBYixHQUFBQyxRQUNBMkcsRUFBQXhsQyxLQUFBN00sVUFBQSsxQyxFQUFBLE1BQUEsVUFBQXRNLElBR0EsU0FBQW9KLEVBQUFtRCxFQUFBbCtCLEVBQUFtK0IsR0FXQSxJQUNBQyxPQVhBLElBQUFELElBQ0FBLEdBQUEsR0FHQVosRUFBQS81QixRQUFBLFNBQUE2NkIsR0FDQUEsRUFBQUgsSUFDQUcsRUFBQUgsR0FBQWxyQyxXQUFBLEVBQUFnTixLQUlBbStCLElBR0FDLEVBQUFyM0IsRUFBQWt4QixPQUFBaUcsR0FBQWxyQyxNQUFBb3JDLEVBQUFwK0IsR0FJQSxTQUFBdzhCLElBQ0EsSUFNQThCLEVBQ0FyMkMsRUFQQXV0QyxFQUFBenVCLEVBQUFreEIsTUFBQXpDLEtBRUFBLEVBQUFuckMsVUFJQWkwQyxFQUFBLFFBQUE5SSxFQUFBbnJDLFFBQ0FwQyxFQUFBMG9CLEVBQUExb0IsR0FDQXVxQyxHQUFBenJCLEVBQUFreEIsTUFBQVosZUFBQXptQixHQUNBcE4sUUFBQSxTQUFBNkosR0FDQSxJQUtBa3hCLEVBTEFDLEVBQUFueEIsRUFBQThxQixhQUFBbUcsR0FFQXYzQixFQUFBa00sTUFBQW1oQixVQUNBL21CLEVBQUFpUSxhQUFBZ2hCLEVBQUFFLEVBQUFBLEVBQUEsSUFBQXYyQyxFQUFBQSxJQUVBczJDLEVBQUFDLEdBQUFBLEVBQUF2eEMsUUFBQWhGLEVBQUEsSUFBQWtpQyxRQUdBOWMsRUFBQWlRLGFBQUFnaEIsRUFBQUMsR0FFQWx4QixFQUFBZ1EsZ0JBQUFpaEIsTUFNQSxTQUFBbkQsS0FDQXFDLEdBQUF6MkIsRUFBQWt4QixNQUFBekMsS0FBQUMsVUFJQWpELEdBQUF6ckIsRUFBQWt4QixNQUFBWixlQUFBem1CLEdBQ0FwTixRQUFBLFNBQUE2SixHQUNBdEcsRUFBQWt4QixNQUFBbEMsWUFDQTFvQixFQUFBaVEsYUFBQSxnQkFBQXZXLEVBQUFrTSxNQUFBbWhCLFdBQUEvbUIsSUFBQXd1QixJQUFBLE9BQUEsU0FFQXh1QixFQUFBZ1EsZ0JBQUEsbUJBS0EsU0FBQTZkLElBQ0FYLEVBQUF4bEMsS0FBQStuQixvQkFBQSxhQUFBMmhCLEdBQ0FsRSxFQUFBemQsb0JBQUEsWUFBQXVkLEdBQ0FaLEdBQUFBLEdBQUF0bEIsT0FBQSxTQUFBdWYsR0FDQSxPQUFBQSxJQUFBMkcsSUFJQSxTQUFBcUUsRUFBQTExQyxHQUVBLElBQUErZCxFQUFBa3hCLE1BQUFsQyxjQUFBcGxCLEVBQUF4b0IsU0FBQWEsRUFBQWdELFFBQUEsQ0FLQSxHQUFBNnZDLElBQUExekMsU0FBQWEsRUFBQWdELFFBQUEsQ0FDQSxHQUFBMm5DLEdBQUFDLFFBQ0EsT0FHQSxHQUFBN3NCLEVBQUFrTSxNQUFBbWhCLFdBQUEsR0FBQXJ0QixFQUFBa3hCLE1BQUFiLFFBQUExa0MsUUFBQSxTQUNBLFlBR0FxVSxFQUFBa3hCLE1BQUFuQixlQUFBL3ZCLEVBQUEvZCxJQUdBLElBQUErZCxFQUFBa3hCLE1BQUFwQyxjQUNBcUUsR0FBQSxFQUNBbnpCLEVBQUE2ekIscUJBQ0E3ekIsRUFBQTgxQixPQUlBMUMsR0FBQSxFQUNBbDNCLFdBQUEsV0FDQWszQixHQUFBLElBS0FwekIsRUFBQWtNLE1BQUF5bkIsV0FDQXNDLE1BS0EsU0FBQWYsSUFDQTFCLEVBQUF4eEMsaUJBQUEsWUFBQTIxQyxHQUFBLEdBR0EsU0FBQTFCLElBQ0F6QyxFQUFBemQsb0JBQUEsWUFBQTRoQixHQUFBLEdBZUEsU0FBQWhDLEVBQUEvRyxFQUFBNXpCLEdBQ0EsSUFBQXl4QixFQUFBNEksSUFBQTVJLElBRUEsU0FBQUUsRUFBQTFxQyxHQUNBQSxFQUFBZ0QsU0FBQXduQyxJQUNBRCxHQUFBQyxFQUFBLFNBQUFFLEdBQ0EzeEIsS0FNQSxHQUFBLElBQUE0ekIsRUFDQSxPQUFBNXpCLElBR0F3eEIsR0FBQUMsRUFBQSxTQUFBd0csR0FDQXpHLEdBQUFDLEVBQUEsTUFBQUUsR0FDQXNHLEVBQUF0RyxFQUdBLFNBQUFqckMsRUFBQWsyQyxFQUFBQyxFQUFBN3FDLFFBQ0EsSUFBQUEsSUFDQUEsR0FBQSxHQUdBeStCLEdBQUF6ckIsRUFBQWt4QixNQUFBWixlQUFBem1CLEdBQ0FwTixRQUFBLFNBQUE2SixHQUNBQSxFQUFBdGtCLGlCQUFBNDFDLEVBQUFDLEVBQUE3cUMsR0FDQXE5QixFQUFBcDdCLEtBQUEsQ0FDQXFYLEtBQUFBLEVBQ0FzeEIsVUFBQUEsRUFDQUMsUUFBQUEsRUFDQTdxQyxRQUFBQSxNQUtBLFNBQUFrbkMsSUFDQTBDLE1BQ0FsMUMsRUFBQSxhQUFBbXVDLEVBQUFsRixJQUNBanBDLEVBQUEsV0FBQW8yQyxFQUFBbk4sS0FHQTNxQixFQUFBa3hCLE1BQUFiLFFBN3pCQTVzQixNQUFBLE9BQUEySixPQUFBb0YsU0E2ekJBL1YsUUFBQSxTQUFBbTdCLEdBQ0EsR0FBQSxXQUFBQSxFQU1BLE9BRkFsMkMsRUFBQWsyQyxFQUFBL0gsR0FFQStILEdBQ0EsSUFBQSxhQUNBbDJDLEVBQUEsYUFBQW8yQyxHQUNBLE1BRUEsSUFBQSxRQUNBcDJDLEVBQUE4ckMsR0FBQSxXQUFBLE9BQUF1SyxHQUNBLE1BRUEsSUFBQSxVQUNBcjJDLEVBQUEsV0FBQXEyQyxNQU1BLFNBQUE5RCxJQUNBNUosRUFBQTV0QixRQUFBLFNBQUFnUixHQUNBLElBQUFuSCxFQUFBbUgsRUFBQW5ILEtBQ0FzeEIsRUFBQW5xQixFQUFBbXFCLFVBQ0FDLEVBQUFwcUIsRUFBQW9xQixRQUNBN3FDLEVBQUF5Z0IsRUFBQXpnQixRQUNBc1osRUFBQXlQLG9CQUFBNmhCLEVBQUFDLEVBQUE3cUMsS0FFQXE5QixFQUFBLEdBR0EsU0FBQXdGLEVBQUE1dEMsR0FDQSxJQXdCQSsxQyxFQUNBNzFDLEVBQ0F5c0MsRUExQkFxSixHQUFBLEdBRUFqNEIsRUFBQWtNLE1BQUF3bkIsV0FBQXdFLEVBQUFqMkMsSUFBQW14QyxJQUtBRixHQURBRixFQUFBL3dDLEdBQ0FpeEMsY0FDQWtCLEtBRUFwMEIsRUFBQWtNLE1BQUFtaEIsV0FBQXhCLEdBQUE1cEMsSUFLQXl3QyxHQUFBajJCLFFBQUEsU0FBQWt3QixHQUNBLE9BQUFBLEVBQUExcUMsS0FLQSxVQUFBQSxFQUFBc0QsT0FBQXlhLEVBQUFreEIsTUFBQWIsUUFBQTFrQyxRQUFBLGNBQUEsR0FBQXduQyxLQUFBLElBQUFuekIsRUFBQWt4QixNQUFBcEMsYUFBQTl1QixFQUFBa00sTUFBQW1oQixVQUNBNEssR0FBQSxHQUdBOTFDLEdBREE2MUMsRUFBQXJCLEtBQ0EsR0FDQS9ILEVBQUFvSixFQUFBLEdBRUFwTCxHQUFBQyxTQUFBLFNBQUExcUMsR0FBQXlzQyxFQUdBaUUsRUFBQTMyQixXQUFBLFdBQ0F3NkIsRUFBQXowQyxJQUNBMnNDLEdBRUE4SCxFQUFBejBDLElBSUEsVUFBQUEsRUFBQXNELE9BQ0E0dEMsR0FBQThFLEdBR0FBLEdBQ0FQLEVBQUF6MUMsSUFJQSxTQUFBc3hDLEVBQUF0eEMsR0FDQSxJQU9BazJDLEVBaDFCQUEsRUFBQWwyQyxFQUNBbTJDLEVBQ0FDLEVBdTBCQXB6QyxFQUFBaEQsRUFBQWdELE9BQ0FxekMsRUFBQXp1QixFQUFBem9CLFNBQUE2RCxJQUFBMmtCLEVBQUF4b0IsU0FBQTZELEdBRUEsY0FBQWhELEVBQUFzRCxNQUFBK3lDLElBSUFILEVBQUE1RCxJQUFBdHpDLE9BQUEyb0IsR0FBQTNVLElBQUEsU0FBQTJVLEdBQ0EsSUFBQTJ1QixFQUdBcnNCLEVBQUEsT0FBQXFzQixFQURBM3VCLEVBQUFqcUIsT0FDQTh6QyxxQkFBQSxFQUFBOEUsRUFBQXJzQixNQUVBLE9BQUFBLEVBQ0EsQ0FDQW1FLFdBQUF6RyxFQUFBakUsd0JBQ0E2eUIsWUFBQXRzQixFQUNBZ2xCLE1BQUFBLEdBSUEsT0FDQTlqQixPQUFBb0YsU0EvMUJBMmxCLEVBaTJCQUEsRUFoMkJBQyxHQURBbjJDLEVBaTJCQUEsR0FoMkJBbTJDLFFBQ0FDLEVBQUFwMkMsRUFBQW8yQyxRQUNBRixFQUFBemYsTUFBQSxTQUFBakwsR0FDQSxJQUFBNEMsRUFBQTVDLEVBQUE0QyxXQUNBbW9CLEVBQUEvcUIsRUFBQStxQixZQUVBdkosRUFEQXhoQixFQUFBeWpCLE1BQ0FqQyxrQkFDQXpmLEVBQUFwRSxHQUFBb3RCLEVBQUEzeEMsV0FDQXV1QixFQUFBb2pCLEVBQUFwc0IsY0FBQTNWLE9BRUEsSUFBQTJlLEVBQ0EsT0FBQSxFQUdBLElBQUFxakIsRUFBQSxXQUFBanBCLEVBQUE0RixFQUFBcFAsSUFBQS9YLEVBQUEsRUFDQXlxQyxFQUFBLFFBQUFscEIsRUFBQTRGLEVBQUFsUCxPQUFBalksRUFBQSxFQUNBMHFDLEVBQUEsVUFBQW5wQixFQUFBNEYsRUFBQWpQLEtBQUFDLEVBQUEsRUFDQXd5QixFQUFBLFNBQUFwcEIsRUFBQTRGLEVBQUFuUCxNQUFBRyxFQUFBLEVBQ0F5eUIsRUFBQXhvQixFQUFBckssSUFBQXF5QixFQUFBSSxFQUFBeEosRUFDQTZKLEVBQUFULEVBQUFob0IsRUFBQW5LLE9BQUF3eUIsRUFBQXpKLEVBQ0E4SixFQUFBMW9CLEVBQUFsSyxLQUFBaXlCLEVBQUFPLEVBQUExSixFQUNBK0osRUFBQVosRUFBQS9uQixFQUFBcEssTUFBQTJ5QixFQUFBM0osRUFDQSxPQUFBNEosR0FBQUMsR0FBQUMsR0FBQUMsTUEyMEJBN0UsSUFDQXVELEVBQUF6MUMsS0FJQSxTQUFBNjFDLEVBQUE3MUMsR0FHQSxLQUZBaTJDLEVBQUFqMkMsSUFBQSxHQUFBK2QsRUFBQWt4QixNQUFBYixRQUFBMWtDLFFBQUEsVUFBQXduQyxHQU1BLE9BQUFuekIsRUFBQWt4QixNQUFBbEMsYUFDQXdFLEVBQUF4bEMsS0FBQWhNLGlCQUFBLGFBQUEwMUMsR0FDQWxFLEVBQUF4eEMsaUJBQUEsWUFBQXN4QyxHQUNBNUgsR0FBQWdILEdBQUFZLFFBQ0FBLEVBQUFyeEMsU0FJQXkxQyxFQUFBejFDLEdBR0EsU0FBQTgxQyxFQUFBOTFDLEdBQ0ErZCxFQUFBa3hCLE1BQUFiLFFBQUExa0MsUUFBQSxXQUFBLEdBQUExSixFQUFBZ0QsU0FBQTZ2QyxLQUtBOTBCLEVBQUFreEIsTUFBQWxDLGFBQUEvc0MsRUFBQWczQyxlQUFBcnZCLEVBQUF4b0IsU0FBQWEsRUFBQWczQyxnQkFJQXZCLEVBQUF6MUMsR0FHQSxTQUFBaTJDLEVBQUFqMkMsR0FDQSxRQUFBMnFDLEdBQUFDLFNBQUErSixNQUFBLEdBQUEzMEMsRUFBQXNELEtBQUFvRyxRQUFBLFNBR0EsU0FBQTJvQyxJQUNBZ0MsSUFDQSxJQUFBNEMsRUFBQWw1QixFQUFBa3hCLE1BQ0FqQixFQUFBaUosRUFBQWpKLGNBQ0FwcEMsRUFBQXF5QyxFQUFBcnlDLFVBQ0E0UCxFQUFBeWlDLEVBQUF6aUMsT0FDQW80QixFQUFBcUssRUFBQXJLLHVCQUNBTSxFQUFBK0osRUFBQS9KLGVBQ0EvWSxFQUFBNGUsSUFBQWxELEdBQUFsb0IsR0FBQXdNLE1BQUEsS0FDQStpQixFQUFBdEssRUFBQSxDQUNBbHBCLHNCQUFBa3BCLEdBQ0FobEIsRUFDQXV2QixFQUFBLENBQ0FqaEMsS0FBQSxVQUNBa1YsU0FBQSxFQUNBRixNQUFBLGNBQ0F6QyxTQUFBLENBQUEsaUJBQ0FzQixHQUFBLFNBQUErQixHQUNBLElBSUEwZSxFQUpBdmdCLEVBQUE2QixFQUFBN0IsTUFFQThvQixNQUVBdkksRUFEQTRJLElBQ0E1SSxJQUVBLENBQUEsWUFBQSxtQkFBQSxXQUFBaHdCLFFBQUEsU0FBQTg2QixHQUNBLGNBQUFBLEVBQ0E5SyxFQUFBbFcsYUFBQSxpQkFBQXJLLEVBQUFybEIsV0FFQXFsQixFQUFBSSxXQUFBMUMsT0FBQSxlQUFBMnRCLEdBQ0E5SyxFQUFBbFcsYUFBQSxRQUFBZ2hCLEVBQUEsSUFFQTlLLEVBQUFuVyxnQkFBQSxRQUFBaWhCLEtBSUFyckIsRUFBQUksV0FBQTFDLE9BQUEsTUFJQXl2QixFQUFBLENBQ0FsaEMsS0FBQSxRQUNBa1YsVUFBQStJLEVBQ0FwcEIsUUFBQSxDQUNBNFksUUFBQXdRLEVBQ0F6QixRQUFBLElBR0F4SyxFQUFBLENBQUEsQ0FDQWhTLEtBQUEsU0FDQW5MLFFBQUEsQ0FDQXlKLE9BQUFBLElBRUEsQ0FDQTBCLEtBQUEsa0JBQ0FuTCxRQUFBLENBQ0EybkIsUUFBQSxDQUNBM08sSUFBQSxFQUNBRSxPQUFBLEVBQ0FDLEtBQUEsRUFDQUYsTUFBQSxLQUdBLENBQ0E5TixLQUFBLE9BQ0FuTCxRQUFBLENBQ0EybkIsUUFBQSxJQUVBLENBQ0F4YyxLQUFBLGdCQUNBbkwsUUFBQSxDQUNBdWpCLFVBQUE0ZSxLQUVBbHVDLE9BQUErekMsSUFBQSxDQUFBcUUsR0FBQSxJQUFBLE1BQUFwSixPQUFBLEVBQUFBLEVBQUE5bEIsWUFBQSxHQUFBLENBQUFpdkIsSUFDQXA1QixFQUFBeXpCLGVBQUEvSSxHQUFBM08sYUFBQW9kLEVBQUF2dkIsRUFBQXZpQixPQUFBc0YsT0FBQSxHQUFBc2pDLEVBQUEsQ0FDQXBwQyxVQUFBQSxFQUNBc29CLGNBQUFBLEVBQ0FoRixVQUFBQSxLQUlBLFNBQUFtc0IsSUFDQXQyQixFQUFBeXpCLGlCQUNBenpCLEVBQUF5ekIsZUFBQXZrQixVQUNBbFAsRUFBQXl6QixlQUFBLE1BbUNBLFNBQUFjLElBQ0EsT0FBQTVJLEdBQUEvaEIsRUFBQW9pQixpQkFBQSxzQkFHQSxTQUFBMEssRUFBQXowQyxHQUNBK2QsRUFBQTZ6QixxQkFFQTV4QyxHQUNBK3hDLEVBQUEsWUFBQSxDQUFBaDBCLEVBQUEvZCxJQUdBaXpDLElBQ0EsSUFBQXZHLEVBQUFtSSxHQUFBLEdBRUFuSSxFQUNBa0UsRUFBQTMyQixXQUFBLFdBQ0E4RCxFQUFBMDBCLFFBQ0EvRixHQUVBM3VCLEVBQUEwMEIsT0FJQSxTQUFBZ0QsRUFBQXoxQyxHQUlBLElBYUEwc0MsRUFoQkEzdUIsRUFBQTZ6QixxQkFDQUcsRUFBQSxjQUFBLENBQUFoMEIsRUFBQS9kLElBRUErZCxFQUFBa00sTUFBQW1oQixVQVNBLEdBQUFydEIsRUFBQWt4QixNQUFBYixRQUFBMWtDLFFBQUEsZUFBQSxHQUFBcVUsRUFBQWt4QixNQUFBYixRQUFBMWtDLFFBQUEsVUFBQSxHQUFBLENBQUEsYUFBQSxhQUFBQSxRQUFBMUosRUFBQXNELE9BQUE0dEMsS0FJQXhFLEVBQUFtSSxHQUFBLElBR0FoRSxFQUFBNTJCLFdBQUEsV0FDQThELEVBQUFrTSxNQUFBbWhCLFdBQ0FydEIsRUFBQTgxQixRQUVBbkgsR0FJQW9FLEVBQUEwQixzQkFBQSxXQUNBejBCLEVBQUE4MUIsVUF4QkFHLEtBc1RBLFNBQUFxRCxFQUFBQyxFQUFBQyxRQUNBLElBQUFBLElBQ0FBLEVBQUEsSUFHQSxJQS9yQ0FELEVBQ0FFLEVBQ0FDLEVBNnJDQTFKLEVBQUF6QixHQUFBeUIsUUFBQS91QyxPQUFBdTRDLEVBQUF4SixTQUFBLElBR0EsZUFBQTFpQixHQUFBQyxJQUFBQyxXQWpzQ0Fpc0IsSUFEQUYsRUFtc0NBQSxHQWpzQ0FHLEVBQUEsb0JBQUFyeUMsT0FBQUcsVUFBQTRWLFNBQUEvZCxLQUFBazZDLEtBQUFBLEVBQUF2M0MsaUJBQ0Fnc0MsR0FBQXlMLEVBQUEsQ0FBQSxxQkFBQSxJQUFBMXRDLE9BQUF3dEMsR0FBQSxJQUFBLHFFQUFBLDJCQUFBbmxDLEtBQUEsTUFDQTQ1QixHQUFBMEwsRUFBQSxDQUFBLDBFQUFBLHNFQUFBdGxDLEtBQUEsTUFnc0NBaTlCLEVBQUFtSSxFQUFBeEosSUFod0NBbndDLFNBQUFtQyxpQkFBQSxhQUFBK3FDLEVBQUExbEMsT0FBQXNGLE9BQUEsR0FBQWcrQixHQUFBLENBQ0FnUCxTQUFBLEtBRUExNUMsT0FBQStCLGlCQUFBLE9BQUFrckMsR0Fpd0NBLElBT0EwTSxFQUNBQyxFQVJBOUksRUFBQTFwQyxPQUFBc0YsT0FBQSxHQUFBNnNDLEVBQUEsQ0FDQXhKLFFBQUFBLElBRUEzakIsRUFBQTBmLEVBQUF3TixHQUdBLGVBQUFqc0IsR0FBQUMsSUFBQUMsV0FDQW9zQixFQUFBN3lCLEVBQUFncUIsRUFBQXp0QyxTQUNBdTJDLEVBQUEsRUFBQXh0QixFQUFBL3NCLE9BQ0F1dUMsR0FBQStMLEdBQUFDLEVBQUEsQ0FBQSxxRUFBQSxvRUFBQSxvRUFBQSxPQUFBLHNFQUFBLG1EQUFBLE9BQUEsa0NBQUEsNkNBQUF6bEMsS0FBQSxPQUdBLElBQUEwbEMsRUFBQXp0QixFQUFBN1YsT0FBQSxTQUFBdVQsRUFBQUYsR0FDQSxJQUFBN0osRUFBQTZKLEdBQUErb0IsRUFBQS9vQixFQUFBa25CLEdBTUEsT0FKQS93QixHQUNBK0osRUFBQTlhLEtBQUErUSxHQUdBK0osR0FDQSxJQUNBLE9BQUFoRCxFQUFBd3lCLEdBQUFPLEVBQUEsR0FBQUEsRUFHQVIsRUFBQS9LLGFBQUFBLEdBQ0ErSyxFQUFBUyxnQkFocUNBLFNBQUF6SSxHQUVBLGVBQUFoa0IsR0FBQUMsSUFBQUMsVUFDQTZqQixFQUFBQyxFQUFBLElBR0FqcUMsT0FBQWtXLEtBQUErekIsR0FDQTcwQixRQUFBLFNBQUFlLEdBQ0Erd0IsR0FBQS93QixHQUFBOHpCLEVBQUE5ekIsTUF5cENBODdCLEVBQUExTSxhQUFBQSxHQUNBLElBaUZBb04sRUFBQSxDQUNBQyxVQUFBLGFBQ0FDLFFBQUEsUUFDQUMsTUFBQSxTQWtIQSxJQUFBaE0sRUFBQSxDQUNBaDJCLEtBQUEsY0FDQSt5QixjQUFBLEVBQ0FsZixHQUFBLFNBQUFoTSxHQUNBLElBQUE2MkIsRUFHQSxHQUFBLE9BQUFBLEVBQUE3MkIsRUFBQWt4QixNQUFBaEIsVUFBQTJHLEVBQUFyRSxRQUtBLE1BSkEsZUFBQWxsQixHQUFBQyxJQUFBQyxVQUNBd2dCLEdBQUFodUIsRUFBQWt4QixNQUFBL0MsWUFBQSxrRUFHQSxHQUdBLElBNENBK0QsRUE1Q0FJLEVBQUFSLEdBQUE5eEIsRUFBQTRKLFFBQ0E2aUIsRUFBQTZGLEVBQUE3RixJQUNBbnBDLEVBQUFndkMsRUFBQWh2QyxRQUVBNHVDLEVBQUFseUIsRUFBQWt4QixNQUFBL0MsY0F3Q0ErRCxFQUFBdEcsTUFDQWdHLFVBQUE5RyxFQUNBdUIsR0FBQSxDQUFBNkYsR0FBQSxVQUNBQSxHQTNDQSxLQUNBLE1BQUEsQ0FDQTVDLFNBQUEsV0FDQTRDLElBQ0F6RixFQUFBMk4sYUFBQWxJLEVBQUF6RixFQUFBc0YsbUJBQ0F0RixFQUFBbFcsYUFBQSxtQkFBQSxJQUNBa1csRUFBQTlsQyxNQUFBK2dCLFNBQUEsU0FDQTFILEVBQUErekIsU0FBQSxDQUNBM2QsT0FBQSxFQUNBbWEsVUFBQSxpQkFJQWIsUUFBQSxXQUNBLElBQ0F0RCxFQUNBd0MsRUFGQXNELElBQ0E5RixFQUFBSyxFQUFBOWxDLE1BQUF5bEMsbUJBQ0F3QyxFQUFBdE8sT0FBQThMLEVBQUFsbUMsUUFBQSxLQUFBLEtBSUE1QyxFQUFBcUQsTUFBQTB6QyxnQkFBQXZxQixLQUFBWSxNQUFBa2UsRUFBQSxJQUFBLEtBQ0FzRCxFQUFBdnJDLE1BQUF5bEMsbUJBQUFBLEVBQ0FDLEdBQUEsQ0FBQTZGLEdBQUEsYUFHQXZDLE9BQUEsV0FDQXVDLElBQ0FBLEVBQUF2ckMsTUFBQXlsQyxtQkFBQSxRQUdBcUQsT0FBQSxXQUNBeUMsR0FDQTdGLEdBQUEsQ0FBQTZGLEdBQUEsY0FjQSxJQUFBOUQsRUFBQSxDQUNBajJCLEtBQUEsZUFDQSt5QixjQUFBLEVBQ0FsZixHQUFBLFNBQUFoTSxHQUNBLElBQUE2SixFQUFBN0osRUFBQTZKLFVBQ0EycEIsRUFBQWxILEdBQUF0c0IsRUFBQWt4QixNQUFBWixlQUFBem1CLEdBQ0F5d0IsRUFBQSxLQUVBLFNBQUFDLElBQ0EsTUFBQSxXQUFBdjZCLEVBQUFreEIsTUFBQWIsUUFBQWpOLE9BR0EsU0FBQW9YLElBRUEsSUFBQUMsSUFBQUYsS0FDQSxPQUFBRCxLQUFBLElBQUFBLEVBQUFsQyxTQUFBLElBQUFrQyxFQUFBakMsU0FDQSxPQUFBcjRCLEVBQUFreEIsTUFBQTlDLGNBQUFxTSxFQU9BLFNBQUFDLEVBQUFDLEdBQ0FBLEdBQ0EzNkIsRUFBQSt6QixTQUFBLENBQ0FsRix1QkFBQSxPQUtBLFNBQUErTCxJQUNBSixJQWNBaEgsRUFBQXh4QyxpQkFBQSxZQUFBdXhDLEdBWEFtSCxFQUFBMTZCLEVBQUFreEIsTUFBQTlDLGNBY0EsU0FBQXBFLElBQ0F3SixFQUFBemQsb0JBQUEsWUFBQXdkLEdBR0EsU0FBQUEsRUFBQXR4QyxHQUNBcTRDLEVBQUEsQ0FDQWxDLFFBQUFuMkMsRUFBQW0yQyxRQUNBQyxRQUFBcDJDLEVBQUFvMkMsU0FJQSxJQUFBd0MsR0FBQTU0QyxFQUFBZ0QsUUFBQTRrQixFQUFBem9CLFNBQUFhLEVBQUFnRCxRQUNBbXBDLEVBQUFwdUIsRUFBQWt4QixNQUFBOUMsYUFDQWdLLEVBQUFuMkMsRUFBQW0yQyxRQUNBQyxFQUFBcDJDLEVBQUFvMkMsUUFDQXh5QixFQUFBZ0UsRUFBQWxFLHdCQUNBbTFCLEVBQUExQyxFQUFBdnlCLEVBQUFNLEtBQ0E0MEIsRUFBQTFDLEVBQUF4eUIsRUFBQUcsS0FFQTYwQixHQUFBNzZCLEVBQUFreEIsTUFBQWxDLGFBQ0FodkIsRUFBQSt6QixTQUFBLENBQ0FsRix1QkFBQSxXQUNBLElBQUFocEIsRUFBQWdFLEVBQUFsRSx3QkFDQVMsRUFBQWd5QixFQUNBbnFDLEVBQUFvcUMsRUFFQSxZQUFBakssSUFDQWhvQixFQUFBUCxFQUFBTSxLQUFBMjBCLEVBQ0E3c0MsRUFBQTRYLEVBQUFHLElBQUErMEIsR0FHQSxJQUFBLzBCLEVBQUEsZUFBQW9vQixFQUFBdm9CLEVBQUFHLElBQUEvWCxFQUNBZ1ksRUFBQSxhQUFBbW9CLEVBQUF2b0IsRUFBQUksTUFBQUcsRUFDQUYsRUFBQSxlQUFBa29CLEVBQUF2b0IsRUFBQUssT0FBQWpZLEVBQ0FrWSxFQUFBLGFBQUFpb0IsRUFBQXZvQixFQUFBTSxLQUFBQyxFQUNBLE1BQUEsQ0FDQU4sTUFBQUcsRUFBQUUsRUFDQUosT0FBQUcsRUFBQUYsRUFDQUEsSUFBQUEsRUFDQUMsTUFBQUEsRUFDQUMsT0FBQUEsRUFDQUMsS0FBQUEsT0F0RUF5bUIsR0FBQUMsU0FBQSxZQUFBN3NCLEVBQUFreEIsTUFBQTlDLGNBQUFwdUIsRUFBQWtNLE1BQUFtaEIsWUE2RUFyRCxJQUlBLE1BQUEsQ0FDQW9GLGNBQUEsU0FBQWxoQyxFQUFBdWYsR0FDQSxJQUFBMmdCLEVBQUEzZ0IsRUFBQTJnQixrQkFFQTlqQyxJQUFBOGpDLEdBQUFBLEdBQ0FzTSxHQUFBLElBR0FoTCxRQUFBLFdBckVBOEssS0FDQWpILEVBQUErRyxJQXVFQTNLLE9BQUEsV0FDQTRLLE1BR0FELEVBQUEsQ0FDQWxDLFFBQUEsRUFDQUMsUUFBQSxHQUVBdUMsTUFHQS9LLFVBQUEsU0FBQTNoQyxFQUFBak0sR0FFQXE0QyxJQUlBek8sR0FBQTVwQyxLQUNBcTRDLEVBQUEsQ0FDQWxDLFFBQUFuMkMsRUFBQW0yQyxRQUNBQyxRQUFBcDJDLEVBQUFvMkMsVUFJQXVDLE1BRUE5SyxZQUFBLFdBRUE5dkIsRUFBQWtNLE1BQUFtaEIsWUFDQXJELElBQ0FzUSxFQUFBLE9BR0E5SyxTQUFBLFdBQ0F4RixJQUNBc1EsRUFBQSxTQVFBak0sRUFBQSxDQUNBbDJCLEtBQUEsb0JBQ0EreUIsY0FBQSxFQUNBbGYsR0FBQSxTQUFBaE0sR0FDQSxJQU1BblosRUFOQWdqQixFQUFBN0osRUFBQTZKLFVBT0EsSUFBQVUsRUFBQSxDQUNBcFMsS0FBQSx5QkFDQWtWLFNBQUEsRUFDQUYsTUFBQSxhQUNBbkIsR0FBQSxTQUFBeUIsR0FDQSxJQUFBdkIsRUFBQXVCLEVBQUF2QixNQVRBbE0sRUFBQWt4QixNQUFBN0Msb0JBWUF4bkMsSUFBQXFsQixFQUFBcmxCLFdBQ0FtWixFQUFBK3pCLFNBQUEsQ0FDQWxGLHVCQUFBLFdBQ0EsT0EyQkEsU0FBQW1NLEVBQUFDLEVBQUFDLEdBRUEsR0FBQUEsRUFBQTU3QyxPQUFBLEdBQUEsT0FBQTA3QyxFQUNBLE9BQUFDLEVBR0EsT0FBQUQsR0FDQSxJQUFBLE1BQ0EsSUFBQSxTQUVBLElBQUFHLEVBQUFELEVBQUEsR0FDQUUsRUFBQUYsRUFBQUEsRUFBQTU3QyxPQUFBLEdBQ0ErN0MsRUFBQSxRQUFBTCxFQUNBaDFCLEVBQUFtMUIsRUFBQW4xQixJQUNBRSxFQUFBazFCLEVBQUFsMUIsT0FDQUMsRUFBQWsxQixFQUFBRixFQUFBaDFCLEtBQUFpMUIsRUFBQWoxQixLQUNBRixFQUFBbzFCLEVBQUFGLEVBQUFsMUIsTUFBQW0xQixFQUFBbjFCLE1BR0EsTUFBQSxDQUNBRCxJQUFBQSxFQUNBRSxPQUFBQSxFQUNBQyxLQUFBQSxFQUNBRixNQUFBQSxFQUNBSCxNQVBBRyxFQUFBRSxFQVFBSixPQVBBRyxFQUFBRixHQVdBLElBQUEsT0FDQSxJQUFBLFFBRUEsSUFBQXMxQixFQUFBeHJCLEtBQUE4RCxJQUFBM25CLE1BQUE2akIsS0FBQW9yQixFQUFBam1DLElBQUEsU0FBQTJaLEdBQ0EsT0FBQUEsRUFBQXpJLFFBRUFvMUIsRUFBQXpyQixLQUFBb0QsSUFBQWpuQixNQUFBNmpCLEtBQUFvckIsRUFBQWptQyxJQUFBLFNBQUEyWixHQUNBLE9BQUFBLEVBQUEzSSxTQUVBdTFCLEVBQUFOLEVBQUE5dEIsT0FBQSxTQUFBdkgsR0FDQSxNQUFBLFNBQUFtMUIsRUFBQW4xQixFQUFBTSxPQUFBbTFCLEVBQUF6MUIsRUFBQUksUUFBQXMxQixJQUVBRSxFQUFBRCxFQUFBLEdBQUF4MUIsSUFDQTAxQixFQUFBRixFQUFBQSxFQUFBbDhDLE9BQUEsR0FBQTRtQixPQVFBLE1BQUEsQ0FDQUYsSUFBQXkxQixFQUNBdjFCLE9BQUF3MUIsRUFDQXYxQixLQVZBbTFCLEVBV0FyMUIsTUFWQXMxQixFQVdBejFCLE1BWEF5MUIsRUFEQUQsRUFhQXYxQixPQVJBMjFCLEVBQUFELEdBWUEsUUFFQSxPQUFBUixHQTlFQVUsQ0FBQXZ3QixHQVhBYyxFQUFBcmxCLFdBV0FnakIsRUFBQWxFLHdCQUFBZ21CLEdBQUE5aEIsRUFBQSt4QixzQkFOQS8wQyxFQUFBcWxCLEVBQUFybEIsYUFTQSxNQUFBLENBQ0F5b0MsU0FBQSxXQUNBLElBQUF1TSxFQUVBNzdCLEVBQUErekIsU0FBQSxDQUNBOUQsY0FBQTVvQyxPQUFBc0YsT0FBQSxHQUFBcVQsRUFBQWt4QixNQUFBakIsY0FBQSxDQUNBOWxCLFVBQUEsR0FBQWxwQixRQUFBLE9BQUE0NkMsRUFBQTc3QixFQUFBa3hCLE1BQUFqQixvQkFBQSxFQUFBNEwsRUFBQTF4QixZQUFBLEdBQUEsQ0FBQUksWUEwRUEsSUFBQStqQixFQUFBLENBQ0FuMkIsS0FBQSxTQUNBK3lCLGNBQUEsRUFDQWxmLEdBQUEsU0FBQWhNLEdBQ0EsSUFBQTZKLEVBQUE3SixFQUFBNkosVUFDQUQsRUFBQTVKLEVBQUE0SixPQU1BLFNBQUFreUIsRUFBQTM1QyxHQUNBLE9BQUEsSUFBQTZkLEVBQUFreEIsTUFBQTVDLFFBQUF0dUIsRUFBQWt4QixNQUFBNUMsU0FBQW5zQyxFQUdBLElBQUE0NUMsRUFBQSxLQUNBQyxFQUFBLEtBRUEsU0FBQUMsSUFDQSxJQUFBQyxFQUFBSixFQUFBLGNBWEE5N0IsRUFBQXl6QixlQUFBenpCLEVBQUF5ekIsZUFBQXZuQixNQUFBRyxTQUFBeEMsVUFBQUEsR0FXQWxFLHdCQUFBLEtBQ0F3MkIsRUFBQUwsRUFBQSxVQUFBbHlCLEVBQUFqRSx3QkFBQSxNQUVBdTJCLEdBQUFFLEVBQUFMLEVBQUFHLElBQUFDLEdBQUFDLEVBQUFKLEVBQUFHLEtBQ0FuOEIsRUFBQXl6QixnQkFDQXp6QixFQUFBeXpCLGVBQUFobEIsU0FJQXN0QixFQUFBRyxFQUNBRixFQUFBRyxFQUVBbjhCLEVBQUFrTSxNQUFBeW5CLFdBQ0FjLHNCQUFBd0gsR0FJQSxNQUFBLENBQ0F2TSxRQUFBLFdBQ0ExdkIsRUFBQWt4QixNQUFBNUMsUUFDQTJOLFFBT0EsU0FBQUcsRUFBQUMsRUFBQUMsR0FDQSxPQUFBRCxJQUFBQyxJQUNBRCxFQUFBcjJCLE1BQUFzMkIsRUFBQXQyQixLQUFBcTJCLEVBQUFwMkIsUUFBQXEyQixFQUFBcjJCLE9BQUFvMkIsRUFBQW4yQixTQUFBbzJCLEVBQUFwMkIsUUFBQW0yQixFQUFBbDJCLE9BQUFtMkIsRUFBQW4yQixNQU1BbXpCLEVBQUFTLGdCQUFBLENBQ0E3SixPQUFBQSxJQUdBOXdDLEVBQUErdUMsWUFBQUEsRUFDQS91QyxFQUFBbTlDLGdCQXJqQkEsU0FBQUMsRUFBQWhELEdBYUEsSUFBQXRHLE9BWkEsSUFBQXNHLElBQ0FBLEVBQUEsSUFJQSxlQUFBbHNCLEdBQUFDLElBQUFDLFVBQ0F3Z0IsSUFBQTdsQyxNQUFBMlgsUUFBQTA4QixHQUFBLENBQUEscUVBQUEsd0NBQUF6d0MsT0FBQXl3QyxJQUFBcG9DLEtBQUEsTUFHQW9vQyxFQUFBLy9CLFFBQUEsU0FBQXVELEdBQ0FBLEVBQUFxMkIsWUFHQSxJQUFBb0csRUFBQUQsRUFBQXZuQyxJQUFBLFNBQUErSyxHQUNBLE9BQUFBLEVBQUE2SixZQUVBNnlCLEVBQUEsQ0FDQTF3QixHQUFBLFdBQ0EsTUFBQSxDQUNBdWpCLFVBQUEsV0FDQWlOLEVBQUEvL0IsUUFBQSxTQUFBdUQsR0FDQUEsRUFBQW8yQixZQUdBdkcsVUFBQSxTQUFBN3ZCLEVBQUEvZCxHQUNBLElBUUEwNkMsRUFSQTEzQyxFQUFBaEQsRUFBQWl4QyxjQUNBejlCLEVBQUFnbkMsRUFBQTl3QyxRQUFBMUcsR0FFQUEsSUFBQWl1QyxJQUlBQSxFQUFBanVDLEVBQ0EwM0MsR0FBQW5ELEVBQUFvRCxXQUFBLElBQUEzN0MsT0FBQSxXQUFBdVYsT0FBQSxTQUFBdVQsRUFBQXduQixHQUVBLE9BREF4bkIsRUFBQXduQixHQUFBaUwsRUFBQS9tQyxHQUFBeTdCLE1BQUFLLEdBQ0F4bkIsR0FDQSxJQUNBL0osRUFBQSt6QixTQUFBMXNDLE9BQUFzRixPQUFBLEdBQUFnd0MsRUFBQSxDQUNBOU4sdUJBQUEsV0FDQSxPQUFBNXBDLEVBQUEwZ0IsaUNBT0EsT0FBQTJ6QixFQUFBMU4sS0FBQXZrQyxPQUFBc0YsT0FBQSxHQUFBNCtCLEVBQUFpTyxFQUFBLENBQUEsY0FBQSxDQUNBeEosUUFBQSxDQUFBME0sR0FBQXo3QyxPQUFBdTRDLEVBQUF4SixTQUFBLElBQ0FNLGNBQUFtTSxNQXFnQkFyOUMsRUFBQXk5QyxRQUFBdkQsRUFDQWw2QyxFQUFBMDlDLFNBeGZBLFNBQUF2RCxFQUFBckksR0FFQSxlQUFBNWpCLEdBQUFDLElBQUFDLFVBQ0F3Z0IsS0FBQWtELEdBQUFBLEVBQUFqc0MsUUFBQSxDQUFBLDZFQUFBLG9EQUFBbVAsS0FBQSxNQUdBLElBQUFpMkIsRUFBQSxHQUNBMFMsRUFBQSxHQUNBOTNDLEVBQUFpc0MsRUFBQWpzQyxPQUNBKzNDLEVBQUF6UixFQUFBMkYsRUFBQSxDQUFBLFdBQ0ErTCxFQUFBNTFDLE9BQUFzRixPQUFBLEdBQUFxd0MsRUFBQSxDQUNBM00sUUFBQSxXQUVBNk0sRUFBQTcxQyxPQUFBc0YsT0FBQSxHQUFBcXdDLEVBQUEsQ0FDQTdNLGNBQUEsSUFFQWdOLEVBQUE3RCxFQUFBQyxFQUFBMEQsR0FHQSxTQUFBcE4sRUFBQTV0QyxHQUNBLElBSUFtN0MsRUFrQkFwOUIsR0F0QkEvZCxFQUFBZ0QsU0FJQW00QyxFQUFBbjdDLEVBQUFnRCxPQUFBbzRDLFFBQUFwNEMsT0FVQW00QyxFQUFBaE0sYUFBQSx1QkFBQUYsRUFBQWIsU0FBQTlCLEdBQUE4QixTQUdBMWtDLFFBQUFxdUMsRUFBQS8zQyxFQUFBc0QsT0FBQSxHQUNBNjNDLEVBQUF6OUMsU0FJQXFnQixFQUFBczVCLEVBQUE4RCxFQUFBRixNQUdBSCxFQUFBQSxFQUFBOTdDLE9BQUErZSxLQUlBLFNBQUF0ZSxFQUFBNGtCLEVBQUFzeEIsRUFBQUMsRUFBQTdxQyxRQUNBLElBQUFBLElBQ0FBLEdBQUEsR0FHQXNaLEVBQUF0a0IsaUJBQUE0MUMsRUFBQUMsRUFBQTdxQyxHQUNBcTlCLEVBQUFwN0IsS0FBQSxDQUNBcVgsS0FBQUEsRUFDQXN4QixVQUFBQSxFQUNBQyxRQUFBQSxFQUNBN3FDLFFBQUFBLElBNkNBLE9BdkZBeStCLEdBQUEwUixHQXNGQTFnQyxRQXRCQSxTQUFBdUQsR0FDQSxJQWxCQTZKLEVBa0JBeXpCLEVBQUF0OUIsRUFBQWtQLFFBRUFsUCxFQUFBa1AsUUFBQSxTQUFBcXVCLFFBQ0EsSUFBQUEsSUFDQUEsR0FBQSxHQUdBQSxHQUNBUixFQUFBdGdDLFFBQUEsU0FBQXVELEdBQ0FBLEVBQUFrUCxZQUlBNnRCLEVBQUEsR0F4QkExUyxFQUFBNXRCLFFBQUEsU0FBQWdSLEdBQ0EsSUFBQW5ILEVBQUFtSCxFQUFBbkgsS0FDQXN4QixFQUFBbnFCLEVBQUFtcUIsVUFDQUMsRUFBQXBxQixFQUFBb3FCLFFBQ0E3cUMsRUFBQXlnQixFQUFBemdCLFFBQ0FzWixFQUFBeVAsb0JBQUE2aEIsRUFBQUMsRUFBQTdxQyxLQUVBcTlCLEVBQUEsR0FtQkFpVCxLQWhDQTU3QyxFQURBbW9CLEVBb0NBN0osRUFwQ0E2SixVQUNBLFlBQUFnbUIsR0FDQW51QyxFQUFBbW9CLEVBQUEsVUFBQWdtQixHQUNBbnVDLEVBQUFtb0IsRUFBQSxRQUFBZ21CLEtBcUNBc04sR0FpWkEvOUMsRUFBQWd2QyxhQUFBQSxFQUNBaHZDLEVBQUFvK0MsUUFybEJBLFNBQUFDLEdBQ0EsSUFBQWh3QixPQUFBLElBQUFnd0IsRUFBQSxHQUFBQSxFQUNBQyxFQUFBandCLEVBQUFrd0IsUUFDQS9PLEVBQUFuaEIsRUFBQW1oQixTQUVBK0QsR0FBQWwyQixRQUFBLFNBQUF1RCxHQUNBLElBT0E0OUIsRUFQQUMsR0FBQSxFQUVBSCxJQUNBRyxFQUFBL1IsRUFBQTRSLEdBQUExOUIsRUFBQTZKLFlBQUE2ekIsRUFBQTE5QixFQUFBNEosU0FBQTh6QixFQUFBOXpCLFFBR0FpMEIsSUFDQUQsRUFBQTU5QixFQUFBa3hCLE1BQUF0QyxTQUNBNXVCLEVBQUErekIsU0FBQSxDQUNBbkYsU0FBQUEsSUFFQTV1QixFQUFBODFCLE9BRUE5MUIsRUFBQWtNLE1BQUFPLGFBQ0F6TSxFQUFBK3pCLFNBQUEsQ0FDQW5GLFNBQUFnUCxRQWlrQkF4K0MsRUFBQWl2QyxrQkFBQUEsRUFDQWp2QyxFQUFBMCtDLFdBMWtFQSwyTEEya0VBMStDLEVBQUFrdkMsT0FBQUEiLCJmaWxlIjoiY2hhdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCLvu79pbXBvcnQgKiBhcyBzaWduYWxSIGZyb20gXCJAbWljcm9zb2Z0L3NpZ25hbHJcIjtcclxuaW1wb3J0IHRpcHB5IGZyb20gJ3RpcHB5LmpzJztcclxuXHJcbmNvbnN0IHNlbmRCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnd2lraS10YWxrLXNlbmQnKTtcclxuaWYgKHNlbmRCdXR0b24pIHtcclxuICAgIHNlbmRCdXR0b24uZGlzYWJsZWQgPSB0cnVlO1xyXG59XHJcbmNvbnN0IGNoYXRJbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwid2lraS10YWxrLW5ld21lc3NhZ2UtaW5wdXRcIik7XHJcblxyXG53aW5kb3cud2lraW12Y2NoYXQgPSB7XHJcbiAgICBjb25uZWN0aW9uOiBudWxsLFxyXG4gICAgbWVzc2FnZUxpc3RVbDogbnVsbCxcclxuICAgIHVzZXJOYW1lc3BhY2U6IFwiVXNlcnNcIixcclxuXHJcbiAgICBpbml0OiBmdW5jdGlvbiAodXJsLCB1c2VyTmFtZXNwYWNlLCB0b3BpY0lkLCBtZXNzYWdlcykge1xyXG4gICAgICAgIHdpbmRvdy53aWtpbXZjY2hhdC51c2VyTmFtZXNwYWNlID0gdXNlck5hbWVzcGFjZTtcclxuXHJcbiAgICAgICAgbGV0IG1lc3NhZ2VzRGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ3aWtpLXRhbGstbWVzc2FnZXNcIik7XHJcbiAgICAgICAgaWYgKG1lc3NhZ2VzRGl2ID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgdWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidWxcIik7XHJcbiAgICAgICAgd2luZG93Lndpa2ltdmNjaGF0Lm1lc3NhZ2VMaXN0VWwgPSB1bDtcclxuXHJcbiAgICAgICAgbWVzc2FnZXMgPSBKU09OLnBhcnNlKG1lc3NhZ2VzKSB8fCBbXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1lc3NhZ2VzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHdpbmRvdy53aWtpbXZjY2hhdC5hZGRNZXNzYWdlKG1lc3NhZ2VzW2ldKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG1lc3NhZ2VzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgbGV0IGxhc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgd2lraS1tZXNzYWdlLWRpdi0ke21lc3NhZ2VzW21lc3NhZ2VzLmxlbmd0aCAtIDFdLmlkfWApO1xyXG4gICAgICAgICAgICBpZiAobGFzdCAhPSBudWxsICYmIGxhc3QuY2xhc3NMaXN0LmNvbnRhaW5zKFwid2lraS1tZXNzYWdlLXRocmVhZFwiKSkge1xyXG4gICAgICAgICAgICAgICAgbGFzdC5jbGFzc0xpc3QuYWRkKFwiZXhwYW5kZWRcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh1cmwgJiYgdXJsLmxlbmd0aCAmJiB0b3BpY0lkICYmIHRvcGljSWQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHdpbmRvdy53aWtpbXZjY2hhdC5jb25uZWN0aW9uID0gbmV3IHNpZ25hbFJcclxuICAgICAgICAgICAgICAgIC5IdWJDb25uZWN0aW9uQnVpbGRlcigpXHJcbiAgICAgICAgICAgICAgICAud2l0aFVybCh1cmwpXHJcbiAgICAgICAgICAgICAgICAud2l0aEF1dG9tYXRpY1JlY29ubmVjdCgpXHJcbiAgICAgICAgICAgICAgICAuYnVpbGQoKTtcclxuXHJcbiAgICAgICAgICAgIHdpbmRvdy53aWtpbXZjY2hhdC5jb25uZWN0aW9uLm9uKFwiUmVjZWl2ZVwiLCB3aW5kb3cud2lraW12Y2NoYXQuYWRkTWVzc2FnZSk7XHJcblxyXG4gICAgICAgICAgICB3aW5kb3cud2lraW12Y2NoYXQuY29ubmVjdGlvbi5zdGFydCgpLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgc2VuZEJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAvL3JldHVybiBjb25zb2xlLmVycm9yKGVyci50b1N0cmluZygpKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb25zb2xlLmVycm9yKFwiQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgY29ubmVjdGluZyB0byBjaGF0XCIpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHNlbmRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IG1lc3NhZ2UgPSBjaGF0SW5wdXQudmFsdWU7XHJcbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZSAmJiBtZXNzYWdlLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uaW52b2tlKFwiU2VuZFwiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtkb3duOiBtZXNzYWdlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3BpY0lkOiB0b3BpY0lkLFxyXG4gICAgICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9yZXR1cm4gY29uc29sZS5lcnJvcihlcnIudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb25zb2xlLmVycm9yKFwiQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgc2VuZGluZyBhIGNoYXQgbWVzc2FnZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBhZGRNZXNzYWdlOiBmdW5jdGlvbiAobWVzc2FnZSkge1xyXG4gICAgICAgIGlmIChtZXNzYWdlID09IG51bGwgfHwgbWVzc2FnZS5jb250ZW50ID09IG51bGwgfHwgbWVzc2FnZS5jb250ZW50Lmxlbmd0aCA9PSBudWxsIHx8ICEobWVzc2FnZS5jb250ZW50Lmxlbmd0aCA+IDApKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBpc1JlcGx5ID0gbWVzc2FnZS5yZXBseU1lc3NhZ2VJZCAhPSBudWxsICYmIG1lc3NhZ2UucmVwbHlNZXNzYWdlSWQubGVuZ3RoICE9IG51bGwgJiYgbWVzc2FnZS5yZXBseU1lc3NhZ2VJZC5sZW5ndGggPiAwO1xyXG4gICAgICAgIGxldCBlbW9qaVJlZ0V4cCA9IC8oPzpcXHVEODNEKD86XFx1REQ3M1xcdUZFMEY/fFxcdURDNDEoPzooPzpcXHVGRTBGKD86XFx1MjAwRFxcdUQ4M0RcXHVEREU4XFx1RkUwRj8pP3xcXHUyMDBEXFx1RDgzRFxcdURERThcXHVGRTBGPykpP3xbXFx1RERFOFxcdURERUZdXFx1RkUwRj98XFx1REM0Qig/OlxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXSk/fFxcdUREOTAoPzooPzpcXHVEODNDW1xcdURGRkItXFx1REZGRl18XFx1RkUwRikpP3xbXFx1REQ5NlxcdURDNENcXHVEQzQ4XFx1REM0OVxcdURDNDZcXHVERDk1XFx1REM0N1xcdURDNERcXHVEQzRFXFx1REM0QVxcdURDNEZcXHVERTRDXFx1REM1MFxcdURFNEZcXHVEQzg1XFx1RENBQVxcdURDNDJcXHVEQzQzXFx1REM3NlxcdURDNjZcXHVEQzY3XSg/OlxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXSk/fFxcdURDNzEoPzooPzpcXHVEODNDKD86W1xcdURGRkItXFx1REZGRl0oPzpcXHUyMDBEKD86W1xcdTI2NDBcXHUyNjQyXVxcdUZFMEY/KSk/KXxcXHUyMDBEKD86W1xcdTI2NDBcXHUyNjQyXVxcdUZFMEY/KSkpP3xcXHVEQzY4KD86KD86XFx1RDgzQyg/OlxcdURGRkIoPzpcXHUyMDBEKD86XFx1RDgzRSg/OlxcdUREMURcXHUyMDBEXFx1RDgzRFxcdURDNjhcXHVEODNDW1xcdURGRkMtXFx1REZGRl18W1xcdUREQjBcXHVEREIxXFx1RERCM1xcdUREQjJcXHVEREFGXFx1RERCQ1xcdUREQkRdKXxcXHUyNjk1XFx1RkUwRj98XFx1RDgzQ1tcXHVERjkzXFx1REZFQlxcdURGM0VcXHVERjczXFx1REZFRFxcdURGQTRcXHVERkE4XXxcXHUyNjk2XFx1RkUwRj98XFx1RDgzRFtcXHVERDI3XFx1RENCQ1xcdUREMkNcXHVEQ0JCXFx1REU4MFxcdURFOTJdfFxcdTI3MDhcXHVGRTBGPykpP3xcXHVERkZDKD86XFx1MjAwRCg/OlxcdUQ4M0UoPzpcXHVERDFEXFx1MjAwRFxcdUQ4M0RcXHVEQzY4XFx1RDgzQ1tcXHVERkZCXFx1REZGRC1cXHVERkZGXXxbXFx1RERCMFxcdUREQjFcXHVEREIzXFx1RERCMlxcdUREQUZcXHVEREJDXFx1RERCRF0pfFxcdTI2OTVcXHVGRTBGP3xcXHVEODNDW1xcdURGOTNcXHVERkVCXFx1REYzRVxcdURGNzNcXHVERkVEXFx1REZBNFxcdURGQThdfFxcdTI2OTZcXHVGRTBGP3xcXHVEODNEW1xcdUREMjdcXHVEQ0JDXFx1REQyQ1xcdURDQkJcXHVERTgwXFx1REU5Ml18XFx1MjcwOFxcdUZFMEY/KSk/fFxcdURGRkQoPzpcXHUyMDBEKD86XFx1RDgzRSg/OlxcdUREMURcXHUyMDBEXFx1RDgzRFxcdURDNjhcXHVEODNDW1xcdURGRkJcXHVERkZDXFx1REZGRVxcdURGRkZdfFtcXHVEREIwXFx1RERCMVxcdUREQjNcXHVEREIyXFx1RERBRlxcdUREQkNcXHVEREJEXSl8XFx1MjY5NVxcdUZFMEY/fFxcdUQ4M0NbXFx1REY5M1xcdURGRUJcXHVERjNFXFx1REY3M1xcdURGRURcXHVERkE0XFx1REZBOF18XFx1MjY5NlxcdUZFMEY/fFxcdUQ4M0RbXFx1REQyN1xcdURDQkNcXHVERDJDXFx1RENCQlxcdURFODBcXHVERTkyXXxcXHUyNzA4XFx1RkUwRj8pKT98XFx1REZGRSg/OlxcdTIwMEQoPzpcXHVEODNFKD86XFx1REQxRFxcdTIwMERcXHVEODNEXFx1REM2OFxcdUQ4M0NbXFx1REZGQi1cXHVERkZEXFx1REZGRl18W1xcdUREQjBcXHVEREIxXFx1RERCM1xcdUREQjJcXHVEREFGXFx1RERCQ1xcdUREQkRdKXxcXHUyNjk1XFx1RkUwRj98XFx1RDgzQ1tcXHVERjkzXFx1REZFQlxcdURGM0VcXHVERjczXFx1REZFRFxcdURGQTRcXHVERkE4XXxcXHUyNjk2XFx1RkUwRj98XFx1RDgzRFtcXHVERDI3XFx1RENCQ1xcdUREMkNcXHVEQ0JCXFx1REU4MFxcdURFOTJdfFxcdTI3MDhcXHVGRTBGPykpP3xcXHVERkZGKD86XFx1MjAwRCg/OlxcdUQ4M0UoPzpcXHVERDFEXFx1MjAwRFxcdUQ4M0RcXHVEQzY4XFx1RDgzQ1tcXHVERkZCLVxcdURGRkVdfFtcXHVEREIwXFx1RERCMVxcdUREQjNcXHVEREIyXFx1RERBRlxcdUREQkNcXHVEREJEXSl8XFx1MjY5NVxcdUZFMEY/fFxcdUQ4M0NbXFx1REY5M1xcdURGRUJcXHVERjNFXFx1REY3M1xcdURGRURcXHVERkE0XFx1REZBOF18XFx1MjY5NlxcdUZFMEY/fFxcdUQ4M0RbXFx1REQyN1xcdURDQkNcXHVERDJDXFx1RENCQlxcdURFODBcXHVERTkyXXxcXHUyNzA4XFx1RkUwRj8pKT8pfFxcdTIwMEQoPzpcXHVEODNFW1xcdUREQjBcXHVEREIxXFx1RERCM1xcdUREQjJcXHVEREFGXFx1RERCQ1xcdUREQkRdfFxcdTI2OTVcXHVGRTBGP3xcXHVEODNDW1xcdURGOTNcXHVERkVCXFx1REYzRVxcdURGNzNcXHVERkVEXFx1REZBNFxcdURGQThdfFxcdTI2OTZcXHVGRTBGP3xcXHVEODNEKD86XFx1REM2OVxcdTIwMERcXHVEODNEKD86XFx1REM2Nig/OlxcdTIwMERcXHVEODNEXFx1REM2Nik/fFxcdURDNjcoPzpcXHUyMDBEXFx1RDgzRFtcXHVEQzY2XFx1REM2N10pPyl8XFx1REM2OFxcdTIwMERcXHVEODNEKD86XFx1REM2Nig/OlxcdTIwMERcXHVEODNEXFx1REM2Nik/fFxcdURDNjcoPzpcXHUyMDBEXFx1RDgzRFtcXHVEQzY2XFx1REM2N10pPyl8XFx1REM2Nig/OlxcdTIwMERcXHVEODNEXFx1REM2Nik/fFxcdURDNjcoPzpcXHUyMDBEXFx1RDgzRFtcXHVEQzY2XFx1REM2N10pP3xbXFx1REQyN1xcdURDQkNcXHVERDJDXFx1RENCQlxcdURFODBcXHVERTkyXSl8XFx1MjcwOFxcdUZFMEY/fFxcdTI3NjQoPzpcXHVGRTBGXFx1MjAwRFxcdUQ4M0QoPzpcXHVEQzhCXFx1MjAwRFxcdUQ4M0RcXHVEQzY4fFxcdURDNjgpfFxcdTIwMERcXHVEODNEKD86XFx1REM4QlxcdTIwMERcXHVEODNEXFx1REM2OHxcXHVEQzY4KSkpKSk/fFxcdURDNjkoPzooPzpcXHVEODNDKD86XFx1REZGQig/OlxcdTIwMEQoPzpcXHVEODNFKD86XFx1REQxRFxcdTIwMERcXHVEODNEKD86XFx1REM2OVxcdUQ4M0NbXFx1REZGQy1cXHVERkZGXXxcXHVEQzY4XFx1RDgzQ1tcXHVERkZDLVxcdURGRkZdKXxbXFx1RERCMFxcdUREQjFcXHVEREIzXFx1RERCMlxcdUREQUZcXHVEREJDXFx1RERCRF0pfFxcdTI2OTVcXHVGRTBGP3xcXHVEODNDW1xcdURGOTNcXHVERkVCXFx1REYzRVxcdURGNzNcXHVERkVEXFx1REZBNFxcdURGQThdfFxcdTI2OTZcXHVGRTBGP3xcXHVEODNEW1xcdUREMjdcXHVEQ0JDXFx1REQyQ1xcdURDQkJcXHVERTgwXFx1REU5Ml18XFx1MjcwOFxcdUZFMEY/KSk/fFxcdURGRkMoPzpcXHUyMDBEKD86XFx1RDgzRSg/OlxcdUREMURcXHUyMDBEXFx1RDgzRCg/OlxcdURDNjlcXHVEODNDW1xcdURGRkJcXHVERkZELVxcdURGRkZdfFxcdURDNjhcXHVEODNDW1xcdURGRkJcXHVERkZELVxcdURGRkZdKXxbXFx1RERCMFxcdUREQjFcXHVEREIzXFx1RERCMlxcdUREQUZcXHVEREJDXFx1RERCRF0pfFxcdTI2OTVcXHVGRTBGP3xcXHVEODNDW1xcdURGOTNcXHVERkVCXFx1REYzRVxcdURGNzNcXHVERkVEXFx1REZBNFxcdURGQThdfFxcdTI2OTZcXHVGRTBGP3xcXHVEODNEW1xcdUREMjdcXHVEQ0JDXFx1REQyQ1xcdURDQkJcXHVERTgwXFx1REU5Ml18XFx1MjcwOFxcdUZFMEY/KSk/fFxcdURGRkQoPzpcXHUyMDBEKD86XFx1RDgzRSg/OlxcdUREMURcXHUyMDBEXFx1RDgzRCg/OlxcdURDNjlcXHVEODNDW1xcdURGRkJcXHVERkZDXFx1REZGRVxcdURGRkZdfFxcdURDNjhcXHVEODNDW1xcdURGRkJcXHVERkZDXFx1REZGRVxcdURGRkZdKXxbXFx1RERCMFxcdUREQjFcXHVEREIzXFx1RERCMlxcdUREQUZcXHVEREJDXFx1RERCRF0pfFxcdTI2OTVcXHVGRTBGP3xcXHVEODNDW1xcdURGOTNcXHVERkVCXFx1REYzRVxcdURGNzNcXHVERkVEXFx1REZBNFxcdURGQThdfFxcdTI2OTZcXHVGRTBGP3xcXHVEODNEW1xcdUREMjdcXHVEQ0JDXFx1REQyQ1xcdURDQkJcXHVERTgwXFx1REU5Ml18XFx1MjcwOFxcdUZFMEY/KSk/fFxcdURGRkUoPzpcXHUyMDBEKD86XFx1RDgzRSg/OlxcdUREMURcXHUyMDBEXFx1RDgzRCg/OlxcdURDNjlcXHVEODNDW1xcdURGRkItXFx1REZGRFxcdURGRkZdfFxcdURDNjhcXHVEODNDW1xcdURGRkItXFx1REZGRFxcdURGRkZdKXxbXFx1RERCMFxcdUREQjFcXHVEREIzXFx1RERCMlxcdUREQUZcXHVEREJDXFx1RERCRF0pfFxcdTI2OTVcXHVGRTBGP3xcXHVEODNDW1xcdURGOTNcXHVERkVCXFx1REYzRVxcdURGNzNcXHVERkVEXFx1REZBNFxcdURGQThdfFxcdTI2OTZcXHVGRTBGP3xcXHVEODNEW1xcdUREMjdcXHVEQ0JDXFx1REQyQ1xcdURDQkJcXHVERTgwXFx1REU5Ml18XFx1MjcwOFxcdUZFMEY/KSk/fFxcdURGRkYoPzpcXHUyMDBEKD86XFx1RDgzRSg/OlxcdUREMURcXHUyMDBEXFx1RDgzRCg/OlxcdURDNjlcXHVEODNDW1xcdURGRkItXFx1REZGRV18XFx1REM2OFxcdUQ4M0NbXFx1REZGQi1cXHVERkZFXSl8W1xcdUREQjBcXHVEREIxXFx1RERCM1xcdUREQjJcXHVEREFGXFx1RERCQ1xcdUREQkRdKXxcXHUyNjk1XFx1RkUwRj98XFx1RDgzQ1tcXHVERjkzXFx1REZFQlxcdURGM0VcXHVERjczXFx1REZFRFxcdURGQTRcXHVERkE4XXxcXHUyNjk2XFx1RkUwRj98XFx1RDgzRFtcXHVERDI3XFx1RENCQ1xcdUREMkNcXHVEQ0JCXFx1REU4MFxcdURFOTJdfFxcdTI3MDhcXHVGRTBGPykpPyl8XFx1MjAwRCg/OlxcdUQ4M0VbXFx1RERCMFxcdUREQjFcXHVEREIzXFx1RERCMlxcdUREQUZcXHVEREJDXFx1RERCRF18XFx1MjY5NVxcdUZFMEY/fFxcdUQ4M0NbXFx1REY5M1xcdURGRUJcXHVERjNFXFx1REY3M1xcdURGRURcXHVERkE0XFx1REZBOF18XFx1MjY5NlxcdUZFMEY/fFxcdUQ4M0QoPzpcXHVEQzY5XFx1MjAwRFxcdUQ4M0QoPzpcXHVEQzY2KD86XFx1MjAwRFxcdUQ4M0RcXHVEQzY2KT98XFx1REM2Nyg/OlxcdTIwMERcXHVEODNEW1xcdURDNjZcXHVEQzY3XSk/KXxcXHVEQzY2KD86XFx1MjAwRFxcdUQ4M0RcXHVEQzY2KT98XFx1REM2Nyg/OlxcdTIwMERcXHVEODNEW1xcdURDNjZcXHVEQzY3XSk/fFtcXHVERDI3XFx1RENCQ1xcdUREMkNcXHVEQ0JCXFx1REU4MFxcdURFOTJdKXxcXHUyNzA4XFx1RkUwRj98XFx1Mjc2NCg/OlxcdUZFMEZcXHUyMDBEXFx1RDgzRCg/OlxcdURDOEJcXHUyMDBEXFx1RDgzRFtcXHVEQzY4XFx1REM2OV18W1xcdURDNjhcXHVEQzY5XSl8XFx1MjAwRFxcdUQ4M0QoPzpcXHVEQzhCXFx1MjAwRFxcdUQ4M0RbXFx1REM2OFxcdURDNjldfFtcXHVEQzY4XFx1REM2OV0pKSkpKT98W1xcdURDNzRcXHVEQzc1XSg/OlxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXSk/fFtcXHVERTREXFx1REU0RVxcdURFNDVcXHVERTQ2XFx1REM4MVxcdURFNEJcXHVERTQ3XFx1REM2RV0oPzooPzpcXHVEODNDKD86W1xcdURGRkItXFx1REZGRl0oPzpcXHUyMDBEKD86W1xcdTI2NDJcXHUyNjQwXVxcdUZFMEY/KSk/KXxcXHUyMDBEKD86W1xcdTI2NDJcXHUyNjQwXVxcdUZFMEY/KSkpP3xcXHVERDc1KD86KD86XFx1RkUwRig/OlxcdTIwMEQoPzpbXFx1MjY0MlxcdTI2NDBdXFx1RkUwRj8pKT98XFx1RDgzQyg/OltcXHVERkZCLVxcdURGRkZdKD86XFx1MjAwRCg/OltcXHUyNjQyXFx1MjY0MF1cXHVGRTBGPykpPyl8XFx1MjAwRCg/OltcXHUyNjQyXFx1MjY0MF1cXHVGRTBGPykpKT98W1xcdURDODJcXHVEQzc3XSg/Oig/OlxcdUQ4M0MoPzpbXFx1REZGQi1cXHVERkZGXSg/OlxcdTIwMEQoPzpbXFx1MjY0MlxcdTI2NDBdXFx1RkUwRj8pKT8pfFxcdTIwMEQoPzpbXFx1MjY0MlxcdTI2NDBdXFx1RkUwRj8pKSk/fFxcdURDNzgoPzpcXHVEODNDW1xcdURGRkItXFx1REZGRl0pP3xcXHVEQzczKD86KD86XFx1RDgzQyg/OltcXHVERkZCLVxcdURGRkZdKD86XFx1MjAwRCg/OltcXHUyNjQyXFx1MjY0MF1cXHVGRTBGPykpPyl8XFx1MjAwRCg/OltcXHUyNjQyXFx1MjY0MF1cXHVGRTBGPykpKT98W1xcdURDNzJcXHVEQzcwXFx1REM3Q10oPzpcXHVEODNDW1xcdURGRkItXFx1REZGRl0pP3xbXFx1REM4NlxcdURDODdcXHVERUI2XSg/Oig/OlxcdUQ4M0MoPzpbXFx1REZGQi1cXHVERkZGXSg/OlxcdTIwMEQoPzpbXFx1MjY0MlxcdTI2NDBdXFx1RkUwRj8pKT8pfFxcdTIwMEQoPzpbXFx1MjY0MlxcdTI2NDBdXFx1RkUwRj8pKSk/fFtcXHVEQzgzXFx1REQ3QV0oPzpcXHVEODNDW1xcdURGRkItXFx1REZGRl0pP3xcXHVERDc0KD86KD86XFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdfFxcdUZFMEYpKT98XFx1REM2Rig/OlxcdTIwMEQoPzpbXFx1MjY0MlxcdTI2NDBdXFx1RkUwRj8pKT98W1xcdURFQTNcXHVERUI0XFx1REVCNV0oPzooPzpcXHVEODNDKD86W1xcdURGRkItXFx1REZGRl0oPzpcXHUyMDBEKD86W1xcdTI2NDJcXHUyNjQwXVxcdUZFMEY/KSk/KXxcXHUyMDBEKD86W1xcdTI2NDJcXHUyNjQwXVxcdUZFMEY/KSkpP3xbXFx1REVDMFxcdURFQ0NcXHVEQzZEXFx1REM2QlxcdURDNkNdKD86XFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdKT98XFx1RERFM1xcdUZFMEY/fFxcdURDMTUoPzpcXHUyMDBEXFx1RDgzRVxcdUREQkEpP3xbXFx1REMzRlxcdURENEFcXHVERDc3XFx1REQ3OFxcdURERkFcXHVERUUzXFx1REVFNFxcdURFRTJcXHVERUYzXFx1REVFNVxcdURFRTlcXHVERUYwXFx1REVDRVxcdURENzBcXHVERDc5XFx1RERCQ1xcdURENzZcXHVERUNEXFx1RERBNVxcdUREQThcXHVEREIxXFx1RERCMlxcdURDRkRcXHVERDZGXFx1RERERVxcdURERjNcXHVERDhCXFx1REQ4QVxcdUREOENcXHVERDhEXFx1RERDMlxcdURERDJcXHVEREQzXFx1REQ4N1xcdUREQzNcXHVEREM0XFx1REREMVxcdURERERcXHVERUUwXFx1RERFMVxcdURFRTFcXHVERERDXFx1REVDRlxcdURFQ0JcXHVERDQ5XVxcdUZFMEY/fFtcXHVERTAwXFx1REUwM1xcdURFMDRcXHVERTAxXFx1REUwNlxcdURFMDVcXHVERTAyXFx1REU0MlxcdURFNDNcXHVERTA5XFx1REUwQVxcdURFMDdcXHVERTBEXFx1REUxOFxcdURFMTdcXHVERTFBXFx1REUxOVxcdURFMEJcXHVERTFCLVxcdURFMURcXHVERTEwXFx1REUxMVxcdURFMzZcXHVERTBGXFx1REUxMlxcdURFNDRcXHVERTJDXFx1REUwQ1xcdURFMTRcXHVERTJBXFx1REUzNFxcdURFMzdcXHVERTM1XFx1REUwRVxcdURFMTVcXHVERTFGXFx1REU0MVxcdURFMkVcXHVERTJGXFx1REUzMlxcdURFMzNcXHVERTI2LVxcdURFMjhcXHVERTMwXFx1REUyNVxcdURFMjJcXHVERTJEXFx1REUzMVxcdURFMTZcXHVERTIzXFx1REUxRVxcdURFMTNcXHVERTI5XFx1REUyQlxcdURFMjRcXHVERTIxXFx1REUyMFxcdURFMDhcXHVEQzdGXFx1REM4MFxcdURDQTlcXHVEQzc5LVxcdURDN0JcXHVEQzdEXFx1REM3RVxcdURFM0FcXHVERTM4XFx1REUzOVxcdURFM0ItXFx1REUzRFxcdURFNDBcXHVERTNGXFx1REUzRVxcdURFNDgtXFx1REU0QVxcdURDOEJcXHVEQzhDXFx1REM5OFxcdURDOURcXHVEQzk2XFx1REM5N1xcdURDOTNcXHVEQzlFXFx1REM5NVxcdURDOUZcXHVEQzk0XFx1REM5QlxcdURDOUFcXHVEQzk5XFx1REM5Q1xcdUREQTRcXHVEQ0FGXFx1RENBMlxcdURDQTVcXHVEQ0FCXFx1RENBNlxcdURDQThcXHVEQ0EzXFx1RENBQ1xcdURDQURcXHVEQ0E0XFx1REM0MFxcdURDNDVcXHVEQzQ0XFx1REM4RlxcdURDOTFcXHVEQzZBXFx1REM2NFxcdURDNjVcXHVEQzYzXFx1REMzNVxcdURDMTJcXHVEQzM2XFx1REMyOVxcdURDM0FcXHVEQzMxXFx1REMwOFxcdURDMkZcXHVEQzA1XFx1REMwNlxcdURDMzRcXHVEQzBFXFx1REMyRVxcdURDMDItXFx1REMwNFxcdURDMzdcXHVEQzE2XFx1REMxN1xcdURDM0RcXHVEQzBGXFx1REMxMVxcdURDMTBcXHVEQzJBXFx1REMyQlxcdURDMThcXHVEQzJEXFx1REMwMVxcdURDMDBcXHVEQzM5XFx1REMzMFxcdURDMDdcXHVEQzNCXFx1REMyOFxcdURDM0NcXHVEQzNFXFx1REMxNFxcdURDMTNcXHVEQzIzLVxcdURDMjdcXHVEQzM4XFx1REMwQVxcdURDMjJcXHVEQzBEXFx1REMzMlxcdURDMDlcXHVEQzMzXFx1REMwQlxcdURDMkNcXHVEQzFGLVxcdURDMjFcXHVEQzE5XFx1REMxQVxcdURDMENcXHVEQzFCLVxcdURDMUVcXHVEQzkwXFx1RENBRVxcdUREMkFcXHVEREZFXFx1RERGQlxcdURDOTJcXHVEREZDXFx1RERGRFxcdURENENcXHVERUQ1XFx1REQ0RFxcdURENEJcXHVEQzg4XFx1REU4Mi1cXHVERThBXFx1REU5RFxcdURFOUVcXHVERThCLVxcdURFOEVcXHVERTkwLVxcdURFOUNcXHVERUY1XFx1REVGQVxcdURFQjJcXHVERUY0XFx1REVGOVxcdURFOEZcXHVERUE4XFx1REVBNVxcdURFQTZcXHVERUQxXFx1REVBN1xcdURFRjZcXHVERUE0XFx1REVBMlxcdURFRUJcXHVERUVDXFx1RENCQVxcdURFODFcXHVERTlGLVxcdURFQTFcXHVERTgwXFx1REVGOFxcdURENUJcXHVERDY3XFx1REQ1MFxcdURENUNcXHVERDUxXFx1REQ1RFxcdURENTJcXHVERDVFXFx1REQ1M1xcdURENUZcXHVERDU0XFx1REQ2MFxcdURENTVcXHVERDYxXFx1REQ1NlxcdURENjJcXHVERDU3XFx1REQ2M1xcdURENThcXHVERDY0XFx1REQ1OVxcdURENjVcXHVERDVBXFx1REQ2NlxcdUREMjVcXHVEQ0E3XFx1REVGN1xcdUREMkVcXHVEQzUzLVxcdURDNjJcXHVEQzUxXFx1REM1MlxcdURDRkZcXHVEQzg0XFx1REM4RFxcdURDOEVcXHVERDA3LVxcdUREMEFcXHVEQ0UyXFx1RENFM1xcdURDRUZcXHVERDE0XFx1REQxNVxcdURDRkJcXHVEQ0YxXFx1RENGMlxcdURDREUtXFx1RENFMFxcdUREMEJcXHVERDBDXFx1RENCQlxcdURDQkQtXFx1RENDMFxcdURDRkFcXHVEQ0Y3LVxcdURDRjlcXHVEQ0ZDXFx1REQwRFxcdUREMEVcXHVEQ0ExXFx1REQyNlxcdURDRDQtXFx1RENEQVxcdURDRDNcXHVEQ0QyXFx1RENDM1xcdURDRENcXHVEQ0M0XFx1RENGMFxcdURDRDFcXHVERDE2XFx1RENCMFxcdURDQjQtXFx1RENCOFxcdURDQjNcXHVEQ0I5XFx1RENCMVxcdURDQjJcXHVEQ0U3LVxcdURDRTlcXHVEQ0U0LVxcdURDRTZcXHVEQ0VCXFx1RENFQVxcdURDRUMtXFx1RENFRVxcdURDRERcXHVEQ0JDXFx1RENDMVxcdURDQzJcXHVEQ0M1LVxcdURDRDBcXHVERDEyXFx1REQxM1xcdUREMEYtXFx1REQxMVxcdUREMjhcXHVERDJCXFx1REQyN1xcdUREMjlcXHVERDE3XFx1REQyQ1xcdUREMkRcXHVEQ0UxXFx1REM4OVxcdURDOEFcXHVERUFBXFx1REVCRFxcdURFQkZcXHVERUMxXFx1REVEMlxcdURFQUNcXHVEREZGXFx1REVBRVxcdURFQjBcXHVERUI5LVxcdURFQkNcXHVERUJFXFx1REVDMi1cXHVERUM1XFx1REVCOFxcdURFQUJcXHVERUIzXFx1REVBRFxcdURFQUZcXHVERUIxXFx1REVCN1xcdURDRjVcXHVERDFFXFx1REQwM1xcdUREMDRcXHVERDE5LVxcdUREMURcXHVERUQwXFx1REQ0RVxcdUREMkZcXHVERDAwLVxcdUREMDJcXHVERDNDXFx1REQzRFxcdUREMDVcXHVERDA2XFx1RENGNlxcdURDRjNcXHVEQ0Y0XFx1REQzMVxcdURDREJcXHVERDMwXFx1REQxRi1cXHVERDI0XFx1REQzNFxcdURGRTAtXFx1REZFMlxcdUREMzVcXHVERkUzLVxcdURGRTVcXHVERkU3LVxcdURGRTlcXHVERkU2XFx1REZFQVxcdURGRUJcXHVERDM2LVxcdUREM0JcXHVEQ0EwXFx1REQxOFxcdUREMzNcXHVERDMyXFx1REVBOV0pfFxcdUQ4M0UoPzpbXFx1REQxQVxcdUREMEZcXHVERDFFXFx1REQxRlxcdUREMThcXHVERDE5XFx1REQxQlxcdUREMUNcXHVERDMyXFx1REQzM1xcdUREQjVcXHVEREI2XFx1RERCQlxcdURERDJdKD86XFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdKT98XFx1REREMSg/Oig/OlxcdUQ4M0MoPzpbXFx1REZGQi1cXHVERkZGXSg/OlxcdTIwMEQoPzpcXHVEODNFKD86XFx1REQxRFxcdTIwMERcXHVEODNFXFx1REREMVxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXXxbXFx1RERCMFxcdUREQjFcXHVEREIzXFx1RERCMlxcdUREQUZcXHVEREJDXFx1RERCRF0pfFxcdTI2OTVcXHVGRTBGP3xcXHVEODNDW1xcdURGOTNcXHVERkVCXFx1REYzRVxcdURGNzNcXHVERkVEXFx1REZBNFxcdURGQThdfFxcdTI2OTZcXHVGRTBGP3xcXHVEODNEW1xcdUREMjdcXHVEQ0JDXFx1REQyQ1xcdURDQkJcXHVERTgwXFx1REU5Ml18XFx1MjcwOFxcdUZFMEY/KSk/KXxcXHUyMDBEKD86XFx1RDgzRSg/OlxcdUREMURcXHUyMDBEXFx1RDgzRVxcdURERDF8W1xcdUREQjBcXHVEREIxXFx1RERCM1xcdUREQjJcXHVEREFGXFx1RERCQ1xcdUREQkRdKXxcXHUyNjk1XFx1RkUwRj98XFx1RDgzQ1tcXHVERjkzXFx1REZFQlxcdURGM0VcXHVERjczXFx1REZFRFxcdURGQTRcXHVERkE4XXxcXHUyNjk2XFx1RkUwRj98XFx1RDgzRFtcXHVERDI3XFx1RENCQ1xcdUREMkNcXHVEQ0JCXFx1REU4MFxcdURFOTJdfFxcdTI3MDhcXHVGRTBGPykpKT98W1xcdURERDRcXHVEREQzXSg/OlxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXSk/fFtcXHVERENGXFx1REQyNlxcdUREMzddKD86KD86XFx1RDgzQyg/OltcXHVERkZCLVxcdURGRkZdKD86XFx1MjAwRCg/OltcXHUyNjQyXFx1MjY0MF1cXHVGRTBGPykpPyl8XFx1MjAwRCg/OltcXHUyNjQyXFx1MjY0MF1cXHVGRTBGPykpKT98W1xcdUREMzRcXHVEREQ1XFx1REQzNVxcdUREMzBcXHVERDMxXFx1REQzNl0oPzpcXHVEODNDW1xcdURGRkItXFx1REZGRl0pP3xbXFx1RERCOFxcdUREQjlcXHVEREQ5LVxcdURERERdKD86KD86XFx1RDgzQyg/OltcXHVERkZCLVxcdURGRkZdKD86XFx1MjAwRCg/OltcXHUyNjQyXFx1MjY0MF1cXHVGRTBGPykpPyl8XFx1MjAwRCg/OltcXHUyNjQyXFx1MjY0MF1cXHVGRTBGPykpKT98W1xcdUREREVcXHVERERGXSg/OlxcdTIwMEQoPzpbXFx1MjY0MlxcdTI2NDBdXFx1RkUwRj8pKT98W1xcdUREQ0RcXHVERENFXFx1RERENlxcdURERDdcXHVERDM4XSg/Oig/OlxcdUQ4M0MoPzpbXFx1REZGQi1cXHVERkZGXSg/OlxcdTIwMEQoPzpbXFx1MjY0MlxcdTI2NDBdXFx1RkUwRj8pKT8pfFxcdTIwMEQoPzpbXFx1MjY0MlxcdTI2NDBdXFx1RkUwRj8pKSk/fFxcdUREM0MoPzpcXHUyMDBEKD86W1xcdTI2NDJcXHUyNjQwXVxcdUZFMEY/KSk/fFtcXHVERDNEXFx1REQzRVxcdUREMzlcXHVEREQ4XSg/Oig/OlxcdUQ4M0MoPzpbXFx1REZGQi1cXHVERkZGXSg/OlxcdTIwMEQoPzpbXFx1MjY0MlxcdTI2NDBdXFx1RkUwRj8pKT8pfFxcdTIwMEQoPzpbXFx1MjY0MlxcdTI2NDBdXFx1RkUwRj8pKSk/fFtcXHVERDIzXFx1REQ3MFxcdUREMjlcXHVERDJBXFx1REQxMVxcdUREMTdcXHVERDJEXFx1REQyQlxcdUREMTRcXHVERDEwXFx1REQyOFxcdUREMjVcXHVERDI0XFx1REQxMlxcdUREMTVcXHVERDIyXFx1REQyRVxcdUREMjdcXHVERDc1XFx1REQ3NlxcdURENzRcXHVERDJGXFx1REQyMFxcdURENzNcXHVERDEzXFx1REREMFxcdUREN0FcXHVERDcxXFx1REQyQ1xcdUREMjFcXHVERDE2XFx1RERFMVxcdUREMEVcXHVERDBEXFx1REQxRFxcdUREQkVcXHVEREJGXFx1RERFMFxcdUREQjdcXHVEREI0XFx1REQzQVxcdUREQjBcXHVEREIxXFx1RERCM1xcdUREQjJcXHVERDhEXFx1RERBN1xcdUREQUVcXHVERDhBXFx1REQ5RFxcdUREODFcXHVERDg0XFx1REQ5M1xcdUREOENcXHVERDk5XFx1REQ5MlxcdUREOEZcXHVERDlCXFx1REQ5NFxcdUREODdcXHVEREE1XFx1RERBNlxcdUREQThcXHVERDk4XFx1RERBMVxcdUREODNcXHVERDg1XFx1REQ4NlxcdUREQTJcXHVERDg5XFx1RERBOVxcdUREOUFcXHVERDlDXFx1REQ4RVxcdUREOTVcXHVERDk2XFx1REQ4OFxcdUREOEJcXHVERDk3XFx1REQ4MlxcdUREOUZcXHVEREEwXFx1REQ0MFxcdURENkRcXHVERDVEXFx1REQ2NVxcdURENTFcXHVERDU0XFx1REQ1NVxcdURENTJcXHVERDZDXFx1REQ2NlxcdUREQzRcXHVEREM1XFx1REQ1Q1xcdURENTBcXHVERDU2XFx1REQ2OFxcdURENkZcXHVERDVFXFx1RERDN1xcdUREQzBcXHVERDY5XFx1REQ1M1xcdURENkFcXHVERDU5XFx1RERDNlxcdURENUFcXHVERDU4XFx1REQ2M1xcdURENTdcXHVEREM4XFx1RERDMlxcdURENkJcXHVERDZFXFx1REQ1Ri1cXHVERDYxXFx1REQ4MFxcdUREOUVcXHVERDkwXFx1REQ5MVxcdUREQUFcXHVEREMxXFx1REQ2N1xcdURENUJcXHVERDQyXFx1REQ0M1xcdURENjRcXHVEREMzXFx1RERDOVxcdUREQ0FcXHVERDYyXFx1REQ0NFxcdURERURcXHVEREYxXFx1RERCRFxcdUREQkNcXHVERTgyXFx1RERGM1xcdURFOTBcXHVEREU4XFx1RERFN1xcdURENDctXFx1REQ0OVxcdURENEVcXHVERDRGXFx1REQ0RFxcdURENEFcXHVERDRCXFx1REQ0NVxcdUREM0ZcXHVERDRDXFx1REU4MFxcdURFODFcXHVEREZGXFx1RERFOVxcdURERjhcXHVEREY1XFx1RERGNlxcdUREN0RcXHVERDdDXFx1RERCQVxcdURERTMtXFx1RERFNlxcdUREN0JcXHVERTcxLVxcdURFNzNcXHVERDdFXFx1REQ3RlxcdURFNzBcXHVEREUyXFx1REU5NVxcdURENDFcXHVEREVFXFx1REU5NFxcdURERkVcXHVERTkzXFx1RERBRlxcdURERjBcXHVEREYyXFx1RERFQS1cXHVEREVDXFx1REU3OC1cXHVERTdBXFx1REU5MVxcdURFOTJcXHVEREY0XFx1RERGN1xcdURERjktXFx1RERGRFxcdURERUZdKXxbXFx1MjYzQVxcdTI2MzlcXHUyNjIwXFx1Mjc2M1xcdTI3NjRdXFx1RkUwRj98XFx1MjcwQig/OlxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXSk/fFtcXHUyNzBDXFx1MjYxRF0oPzooPzpcXHVEODNDW1xcdURGRkItXFx1REZGRl18XFx1RkUwRikpP3xcXHUyNzBBKD86XFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdKT98XFx1MjcwRCg/Oig/OlxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXXxcXHVGRTBGKSk/fFxcdUQ4M0MoPzpcXHVERjg1KD86XFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdKT98XFx1REZDMyg/Oig/OlxcdUQ4M0MoPzpbXFx1REZGQi1cXHVERkZGXSg/OlxcdTIwMEQoPzpbXFx1MjY0MlxcdTI2NDBdXFx1RkUwRj8pKT8pfFxcdTIwMEQoPzpbXFx1MjY0MlxcdTI2NDBdXFx1RkUwRj8pKSk/fFtcXHVERkM3XFx1REZDMl0oPzpcXHVEODNDW1xcdURGRkItXFx1REZGRl0pP3xcXHVERkNDKD86KD86XFx1RkUwRig/OlxcdTIwMEQoPzpbXFx1MjY0MlxcdTI2NDBdXFx1RkUwRj8pKT98XFx1RDgzQyg/OltcXHVERkZCLVxcdURGRkZdKD86XFx1MjAwRCg/OltcXHUyNjQyXFx1MjY0MF1cXHVGRTBGPykpPyl8XFx1MjAwRCg/OltcXHUyNjQyXFx1MjY0MF1cXHVGRTBGPykpKT98W1xcdURGQzRcXHVERkNBXSg/Oig/OlxcdUQ4M0MoPzpbXFx1REZGQi1cXHVERkZGXSg/OlxcdTIwMEQoPzpbXFx1MjY0MlxcdTI2NDBdXFx1RkUwRj8pKT8pfFxcdTIwMEQoPzpbXFx1MjY0MlxcdTI2NDBdXFx1RkUwRj8pKSk/fFxcdURGQ0IoPzooPzpcXHVGRTBGKD86XFx1MjAwRCg/OltcXHUyNjQyXFx1MjY0MF1cXHVGRTBGPykpP3xcXHVEODNDKD86W1xcdURGRkItXFx1REZGRl0oPzpcXHUyMDBEKD86W1xcdTI2NDJcXHUyNjQwXVxcdUZFMEY/KSk/KXxcXHUyMDBEKD86W1xcdTI2NDJcXHUyNjQwXVxcdUZFMEY/KSkpP3xbXFx1REZGNVxcdURGMzZcXHVERjdEXFx1REZENC1cXHVERkQ2XFx1REZEQy1cXHVERkRGXFx1REZEQlxcdURGRDdcXHVERkQ4XFx1REZEQVxcdURGRDlcXHVERkNFXFx1REZDRFxcdURGMjFcXHVERjI0LVxcdURGMkNcXHVERjk3XFx1REY5RlxcdURGOTZcXHVERjk5LVxcdURGOUJcXHVERjlFXFx1REZGN1xcdURENzBcXHVERDcxXFx1REQ3RVxcdUREN0ZcXHVERTAyXFx1REUzN11cXHVGRTBGP3xcXHVERkY0KD86KD86XFx1MjAwRFxcdTI2MjBcXHVGRTBGP3xcXHVEQjQwXFx1REM2N1xcdURCNDBcXHVEQzYyXFx1REI0MCg/OlxcdURDNjVcXHVEQjQwXFx1REM2RVxcdURCNDBcXHVEQzY3XFx1REI0MFxcdURDN0Z8XFx1REM3M1xcdURCNDBcXHVEQzYzXFx1REI0MFxcdURDNzRcXHVEQjQwXFx1REM3RnxcXHVEQzc3XFx1REI0MFxcdURDNkNcXHVEQjQwXFx1REM3M1xcdURCNDBcXHVEQzdGKSkpP3xcXHVERkYzKD86KD86XFx1RkUwRig/OlxcdTIwMERcXHVEODNDXFx1REYwOCk/fFxcdTIwMERcXHVEODNDXFx1REYwOCkpP3xcXHVEREU2XFx1RDgzQ1tcXHVEREU4LVxcdURERUNcXHVEREVFXFx1RERGMVxcdURERjJcXHVEREY0XFx1RERGNi1cXHVEREZBXFx1RERGQ1xcdURERkRcXHVEREZGXXxcXHVEREU3XFx1RDgzQ1tcXHVEREU2XFx1RERFN1xcdURERTktXFx1RERFRlxcdURERjEtXFx1RERGNFxcdURERjYtXFx1RERGOVxcdURERkJcXHVEREZDXFx1RERGRVxcdURERkZdfFxcdURERThcXHVEODNDW1xcdURERTZcXHVEREU4XFx1RERFOVxcdURERUItXFx1RERFRVxcdURERjAtXFx1RERGNVxcdURERjdcXHVEREZBLVxcdURERkZdfFxcdURERTlcXHVEODNDW1xcdURERUFcXHVEREVDXFx1RERFRlxcdURERjBcXHVEREYyXFx1RERGNFxcdURERkZdfFxcdURERUFcXHVEODNDW1xcdURERTZcXHVEREU4XFx1RERFQVxcdURERUNcXHVEREVEXFx1RERGNy1cXHVEREZBXXxcXHVEREVCXFx1RDgzQ1tcXHVEREVFLVxcdURERjBcXHVEREYyXFx1RERGNFxcdURERjddfFxcdURERUNcXHVEODNDW1xcdURERTZcXHVEREU3XFx1RERFOS1cXHVEREVFXFx1RERGMS1cXHVEREYzXFx1RERGNS1cXHVEREZBXFx1RERGQ1xcdURERkVdfFxcdURERURcXHVEODNDW1xcdURERjBcXHVEREYyXFx1RERGM1xcdURERjdcXHVEREY5XFx1RERGQV18XFx1RERFRVxcdUQ4M0NbXFx1RERFOC1cXHVEREVBXFx1RERGMS1cXHVEREY0XFx1RERGNi1cXHVEREY5XXxcXHVEREVGXFx1RDgzQ1tcXHVEREVBXFx1RERGMlxcdURERjRcXHVEREY1XXxcXHVEREYwXFx1RDgzQ1tcXHVEREVBXFx1RERFQy1cXHVEREVFXFx1RERGMlxcdURERjNcXHVEREY1XFx1RERGN1xcdURERkNcXHVEREZFXFx1RERGRl18XFx1RERGMVxcdUQ4M0NbXFx1RERFNi1cXHVEREU4XFx1RERFRVxcdURERjBcXHVEREY3LVxcdURERkJcXHVEREZFXXxcXHVEREYyXFx1RDgzQ1tcXHVEREU2XFx1RERFOC1cXHVEREVEXFx1RERGMC1cXHVEREZGXXxcXHVEREYzXFx1RDgzQ1tcXHVEREU2XFx1RERFOFxcdURERUEtXFx1RERFQ1xcdURERUVcXHVEREYxXFx1RERGNFxcdURERjVcXHVEREY3XFx1RERGQVxcdURERkZdfFxcdURERjRcXHVEODNDXFx1RERGMnxcXHVEREY1XFx1RDgzQ1tcXHVEREU2XFx1RERFQS1cXHVEREVEXFx1RERGMC1cXHVEREYzXFx1RERGNy1cXHVEREY5XFx1RERGQ1xcdURERkVdfFxcdURERjZcXHVEODNDXFx1RERFNnxcXHVEREY3XFx1RDgzQ1tcXHVEREVBXFx1RERGNFxcdURERjhcXHVEREZBXFx1RERGQ118XFx1RERGOFxcdUQ4M0NbXFx1RERFNi1cXHVEREVBXFx1RERFQy1cXHVEREY0XFx1RERGNy1cXHVEREY5XFx1RERGQlxcdURERkQtXFx1RERGRl18XFx1RERGOVxcdUQ4M0NbXFx1RERFNlxcdURERThcXHVEREU5XFx1RERFQi1cXHVEREVEXFx1RERFRi1cXHVEREY0XFx1RERGN1xcdURERjlcXHVEREZCXFx1RERGQ1xcdURERkZdfFxcdURERkFcXHVEODNDW1xcdURERTZcXHVEREVDXFx1RERGMlxcdURERjNcXHVEREY4XFx1RERGRVxcdURERkZdfFxcdURERkJcXHVEODNDW1xcdURERTZcXHVEREU4XFx1RERFQVxcdURERUNcXHVEREVFXFx1RERGM1xcdURERkFdfFxcdURERkNcXHVEODNDW1xcdURERUJcXHVEREY4XXxcXHVEREZEXFx1RDgzQ1xcdURERjB8XFx1RERGRVxcdUQ4M0NbXFx1RERFQVxcdURERjldfFxcdURERkZcXHVEODNDW1xcdURERTZcXHVEREYyXFx1RERGQ118W1xcdURGRkItXFx1REZGRlxcdURGMzgtXFx1REYzQ1xcdURGMzdcXHVERjMxLVxcdURGMzVcXHVERjNFLVxcdURGNDNcXHVERjQ3LVxcdURGNTNcXHVERjQ1XFx1REY0NlxcdURGM0RcXHVERjQ0XFx1REYzMFxcdURGNUVcXHVERjU2XFx1REY1N1xcdURGNTRcXHVERjVGXFx1REY1NVxcdURGMkQtXFx1REYyRlxcdURGNzNcXHVERjcyXFx1REY3RlxcdURGNzFcXHVERjU4LVxcdURGNURcXHVERjYwXFx1REY2Mi1cXHVERjY1XFx1REY2MVxcdURGNjYtXFx1REY2QVxcdURGODJcXHVERjcwXFx1REY2Qi1cXHVERjZGXFx1REY3Q1xcdURGNzVcXHVERjc2XFx1REY3RVxcdURGNzctXFx1REY3QlxcdURGNzRcXHVERkZBXFx1REYwRC1cXHVERjEwXFx1REYwQlxcdURGRTAtXFx1REZFNlxcdURGRTgtXFx1REZFRFxcdURGRUZcXHVERkYwXFx1REYwMVxcdURGMDMtXFx1REYwN1xcdURGMDlcXHVERkEwLVxcdURGQTJcXHVERkFBXFx1REYxMS1cXHVERjIwXFx1REYwQ1xcdURGMDBcXHVERjA4XFx1REYwMlxcdURGMEFcXHVERjgzXFx1REY4NFxcdURGODYtXFx1REY4QlxcdURGOEQtXFx1REY5MVxcdURGODBcXHVERjgxXFx1REZBQlxcdURGQzZcXHVERkM1XFx1REZDMFxcdURGRDBcXHVERkM4XFx1REZDOVxcdURGQkVcXHVERkIzXFx1REZDRlxcdURGRDEtXFx1REZEM1xcdURGRjhcXHVERkEzXFx1REZCRFxcdURGQkZcXHVERkFGXFx1REZCMVxcdURGQUVcXHVERkIwXFx1REZCMlxcdURDQ0ZcXHVEQzA0XFx1REZCNFxcdURGQURcXHVERkE4XFx1REY5MlxcdURGQTlcXHVERjkzXFx1REZCQ1xcdURGQjVcXHVERkI2XFx1REZBNFxcdURGQTdcXHVERkI3LVxcdURGQkJcXHVERkE1XFx1REZBQ1xcdURGRUVcXHVERkY5XFx1REZFN1xcdURGQTZcXHVERDhFXFx1REQ5MS1cXHVERDlBXFx1REUwMVxcdURFMzZcXHVERTJGXFx1REU1MFxcdURFMzlcXHVERTFBXFx1REUzMlxcdURFNTFcXHVERTM4XFx1REUzNFxcdURFMzNcXHVERTNBXFx1REUzNVxcdURGQzFcXHVERjhDXSl8XFx1MjZGN1xcdUZFMEY/fFxcdTI2RjkoPzooPzpcXHVGRTBGKD86XFx1MjAwRCg/OltcXHUyNjQyXFx1MjY0MF1cXHVGRTBGPykpP3xcXHVEODNDKD86W1xcdURGRkItXFx1REZGRl0oPzpcXHUyMDBEKD86W1xcdTI2NDJcXHUyNjQwXVxcdUZFMEY/KSk/KXxcXHUyMDBEKD86W1xcdTI2NDJcXHUyNjQwXVxcdUZFMEY/KSkpP3xbXFx1MjYxOFxcdTI2RjBcXHUyNkU5XFx1MjY2OFxcdTI2RjRcXHUyNzA4XFx1MjNGMVxcdTIzRjJcXHUyNjAwXFx1MjYwMVxcdTI2QzhcXHUyNjAyXFx1MjZGMVxcdTI3NDRcXHUyNjAzXFx1MjYwNFxcdTI2RjhcXHUyNjYwXFx1MjY2NVxcdTI2NjZcXHUyNjYzXFx1MjY1RlxcdTI2RDFcXHUyNjBFXFx1MjMyOFxcdTI3MDlcXHUyNzBGXFx1MjcxMlxcdTI3MDJcXHUyNkNGXFx1MjY5MlxcdTI2OTRcXHUyNjk5XFx1MjY5NlxcdTI2RDNcXHUyNjk3XFx1MjZCMFxcdTI2QjFcXHUyNkEwXFx1MjYyMlxcdTI2MjNcXHUyQjA2XFx1MjE5N1xcdTI3QTFcXHUyMTk4XFx1MkIwN1xcdTIxOTlcXHUyQjA1XFx1MjE5NlxcdTIxOTVcXHUyMTk0XFx1MjFBOVxcdTIxQUFcXHUyOTM0XFx1MjkzNVxcdTI2OUJcXHUyNzIxXFx1MjYzOFxcdTI2MkZcXHUyNzFEXFx1MjYyNlxcdTI2MkFcXHUyNjJFXFx1MjVCNlxcdTIzRURcXHUyM0VGXFx1MjVDMFxcdTIzRUVcXHUyM0Y4LVxcdTIzRkFcXHUyM0NGXFx1MjY0MFxcdTI2NDJcXHUyNjk1XFx1MjY3RVxcdTI2N0JcXHUyNjlDXFx1MjYxMVxcdTI3MTRcXHUyNzE2XFx1MzAzRFxcdTI3MzNcXHUyNzM0XFx1Mjc0N1xcdTIwM0NcXHUyMDQ5XFx1MzAzMFxcdTAwQTlcXHUwMEFFXFx1MjEyMl1cXHVGRTBGP3xbXFx1MDAyM1xcdTAwMkFcXHUwMDMwLVxcdTAwMzldKD86XFx1RkUwRlxcdTIwRTN8XFx1MjBFMyl8W1xcdTIxMzlcXHUyNEMyXFx1MzI5N1xcdTMyOTlcXHUyNUZDXFx1MjVGQlxcdTI1QUFcXHUyNUFCXVxcdUZFMEY/fFtcXHUyNjE1XFx1MjZFQVxcdTI2RjJcXHUyNkZBXFx1MjZGRFxcdTI2OTNcXHUyNkY1XFx1MjMxQlxcdTIzRjNcXHUyMzFBXFx1MjNGMFxcdTJCNTBcXHUyNkM1XFx1MjYxNFxcdTI2QTFcXHUyNkM0XFx1MjcyOFxcdTI2QkRcXHUyNkJFXFx1MjZGM1xcdTI2N0ZcXHUyNkQ0XFx1MjY0OC1cXHUyNjUzXFx1MjZDRVxcdTIzRTktXFx1MjNFQ1xcdTJCNTVcXHUyNzA1XFx1Mjc0Q1xcdTI3NEVcXHUyNzk1LVxcdTI3OTdcXHUyN0IwXFx1MjdCRlxcdTI3NTMtXFx1Mjc1NVxcdTI3NTdcXHUyNkFCXFx1MjZBQVxcdTJCMUJcXHUyQjFDXFx1MjVGRVxcdTI1RkRdKS87XHJcbiAgICAgICAgaWYgKGlzUmVwbHkgJiYgZW1vamlSZWdFeHAudGVzdChtZXNzYWdlLmNvbnRlbnQpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkUmVhY3Rpb24obWVzc2FnZSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBub21lc3NhZ2VzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ3aWtpLXRhbGstbm9tZXNzYWdlc1wiKTtcclxuICAgICAgICBpZiAobm9tZXNzYWdlcyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIG5vbWVzc2FnZXMucmVtb3ZlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgbWVzc2FnZUxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpXCIpO1xyXG4gICAgICAgIG1lc3NhZ2VMaS5pZCA9IGB3aWtpLW1lc3NhZ2UtJHttZXNzYWdlLmlkfWA7XHJcblxyXG4gICAgICAgIGxldCBtZXNzYWdlRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICBtZXNzYWdlTGkuYXBwZW5kQ2hpbGQobWVzc2FnZURpdik7XHJcbiAgICAgICAgbWVzc2FnZURpdi5pZCA9IGB3aWtpLW1lc3NhZ2UtZGl2LSR7bWVzc2FnZS5pZH1gO1xyXG4gICAgICAgIG1lc3NhZ2VEaXYuY2xhc3NMaXN0LmFkZChcIndpa2ktbWVzc2FnZVwiLCBcImNvbGxhcHNpYmxlXCIsIFwiY29sbGFwc2VkXCIpO1xyXG5cclxuICAgICAgICBsZXQgbWVzc2FnZUhlYWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgbWVzc2FnZURpdi5hcHBlbmRDaGlsZChtZXNzYWdlSGVhZGVyKTtcclxuICAgICAgICBtZXNzYWdlSGVhZGVyLmNsYXNzTGlzdC5hZGQoXCJ3aWtpLW1lc3NhZ2UtaGVhZGVyXCIpO1xyXG5cclxuICAgICAgICBsZXQgc2VuZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XHJcbiAgICAgICAgbWVzc2FnZUhlYWRlci5hcHBlbmRDaGlsZChzZW5kZXIpO1xyXG4gICAgICAgIHNlbmRlci5jbGFzc0xpc3QuYWRkKFwid2lraS1tZXNzYWdlLXNlbmRlclwiKTtcclxuXHJcbiAgICAgICAgbGV0IHVzZXJuYW1lID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobWVzc2FnZS5zZW5kZXJOYW1lKTtcclxuXHJcbiAgICAgICAgaWYgKG1lc3NhZ2Uuc2VuZGVyRXhpc3RzKSB7XHJcbiAgICAgICAgICAgIGxldCB1c2VyTGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO1xyXG4gICAgICAgICAgICBzZW5kZXIuYXBwZW5kQ2hpbGQodXNlckxpbmspO1xyXG4gICAgICAgICAgICB1c2VyTGluay5jbGFzc0xpc3QuYWRkKFwid2lraS11c2VybmFtZVwiLCBcIndpa2ktdXNlcm5hbWUtbGlua1wiKTtcclxuICAgICAgICAgICAgdXNlckxpbmsuaHJlZiA9IGAvJHt3aW5kb3cud2lraW12Y2NoYXQudXNlck5hbWVzcGFjZX06JHttZXNzYWdlLnNlbmRlcklkfWA7XHJcbiAgICAgICAgICAgIHVzZXJMaW5rLnRpdGxlID0gYFZpc2l0IHRoZSB1c2VyIHBhZ2UgZm9yICR7bWVzc2FnZS5zZW5kZXJOYW1lfWBcclxuICAgICAgICAgICAgdXNlckxpbmsuYXBwZW5kQ2hpbGQodXNlcm5hbWUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCB1c2VyU3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xyXG4gICAgICAgICAgICBzZW5kZXIuYXBwZW5kQ2hpbGQodXNlclNwYW4pO1xyXG4gICAgICAgICAgICB1c2VyTGluay5jbGFzc0xpc3QuYWRkKFwid2lraS11c2VybmFtZVwiLCBcIndpa2ktdXNlcm5hbWUtbm9saW5rXCIpO1xyXG4gICAgICAgICAgICB1c2VyTGluay5hcHBlbmRDaGlsZCh1c2VybmFtZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgcmVhY3Rpb25zU3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xyXG4gICAgICAgIG1lc3NhZ2VIZWFkZXIuYXBwZW5kQ2hpbGQocmVhY3Rpb25zU3Bhbik7XHJcbiAgICAgICAgcmVhY3Rpb25zU3Bhbi5jbGFzc0xpc3QuYWRkKFwid2lraS1tZXNzYWdlLXJlYWN0aW9uc1wiLCBgd2lraS1tZXNzYWdlLXJlYWN0aW9ucy0ke21lc3NhZ2UuaWR9YCk7XHJcblxyXG4gICAgICAgIGxldCBtZXNzYWdlVGltZXN0YW1wID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XHJcbiAgICAgICAgbWVzc2FnZUhlYWRlci5hcHBlbmRDaGlsZChtZXNzYWdlVGltZXN0YW1wKTtcclxuICAgICAgICBtZXNzYWdlVGltZXN0YW1wLmNsYXNzTGlzdC5hZGQoXCJ3aWtpLW1lc3NhZ2UtdGltZXN0YW1wXCIpO1xyXG5cclxuICAgICAgICBsZXQgdGltZXN0YW1wID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobmV3IERhdGUoKG1lc3NhZ2UudGltZXN0YW1wIC8gMTAwMDApIC0gMjIwODk4ODgwMDAwMCkudG9Mb2NhbGVTdHJpbmcoKSk7XHJcbiAgICAgICAgbWVzc2FnZVRpbWVzdGFtcC5hcHBlbmRDaGlsZCh0aW1lc3RhbXApO1xyXG5cclxuICAgICAgICBsZXQgdGhyZWFkVG9nZ2xlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgbWVzc2FnZUhlYWRlci5hcHBlbmRDaGlsZCh0aHJlYWRUb2dnbGVyKTtcclxuICAgICAgICB0aHJlYWRUb2dnbGVyLmNsYXNzTGlzdC5hZGQoXCJ3aWtpLW1lc3NhZ2UtdGhyZWFkLXRvZ2dsZXJcIik7XHJcbiAgICAgICAgdGhyZWFkVG9nZ2xlci5pbm5lckhUTUwgPSBcIjxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB3aWR0aD1cXFwiMTJcXFwiIGhlaWdodD1cXFwiMTJcXFwiPjxwYXRoIGQ9XFxcIk00IDEuNTMzdjkuNjcxbDQuNzUyLTQuODcxelxcXCIgLz48L3N2ZyA+XCI7XHJcbiAgICAgICAgdGhyZWFkVG9nZ2xlci5vbmNsaWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIGV2ZW50LnRhcmdldC5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZShcImV4cGFuZGVkXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IG1lc3NhZ2VDb250ZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICBtZXNzYWdlRGl2LmFwcGVuZENoaWxkKG1lc3NhZ2VDb250ZW50KTtcclxuICAgICAgICBtZXNzYWdlQ29udGVudC5jbGFzc0xpc3QuYWRkKFwid2lraS1tZXNzYWdlLWNvbnRlbnRcIik7XHJcblxyXG4gICAgICAgIGxldCBjb250ZW50ID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobWVzc2FnZS5jb250ZW50KTtcclxuICAgICAgICBtZXNzYWdlQ29udGVudC5hcHBlbmRDaGlsZChjb250ZW50KTtcclxuXHJcbiAgICAgICAgbGV0IGNvbGxhcHNlVG9nZ2xlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgbWVzc2FnZURpdi5hcHBlbmRDaGlsZChjb2xsYXBzZVRvZ2dsZXIpO1xyXG4gICAgICAgIGNvbGxhcHNlVG9nZ2xlci5jbGFzc0xpc3QuYWRkKFwid2lraS1tZXNzYWdlLWNvbGxhcHNlLXRvZ2dsZXJcIik7XHJcblxyXG4gICAgICAgIGxldCB0b2dnbGVMaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XHJcbiAgICAgICAgY29sbGFwc2VUb2dnbGVyLmFwcGVuZENoaWxkKHRvZ2dsZUxpbmspO1xyXG4gICAgICAgIHRvZ2dsZUxpbmsuaHJlZiA9IFwiamF2YXNjcmlwdDogdm9pZCgwKTtcIjtcclxuICAgICAgICB0b2dnbGVMaW5rLm9uY2xpY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgZXZlbnQudGFyZ2V0LnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKFwiY29sbGFwc2VkXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFpc1JlcGx5KSB7XHJcbiAgICAgICAgICAgIGxldCByZXBseURpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgICAgIG1lc3NhZ2VEaXYuYXBwZW5kQ2hpbGQocmVwbHlEaXYpO1xyXG4gICAgICAgICAgICByZXBseURpdi5jbGFzc0xpc3QuYWRkKFwid2lraS10YWxrLXJlcGx5XCIpO1xyXG5cclxuICAgICAgICAgICAgbGV0IGZvcm1EaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgICAgICByZXBseURpdi5hcHBlbmRDaGlsZChmb3JtRGl2KTtcclxuICAgICAgICAgICAgZm9ybURpdi5jbGFzc0xpc3QuYWRkKFwiZm9ybS1ncm91cFwiKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBmb3JtTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XHJcbiAgICAgICAgICAgIGZvcm1EaXYuYXBwZW5kQ2hpbGQoZm9ybUxhYmVsKTtcclxuICAgICAgICAgICAgZm9ybUxhYmVsLmh0bWxGb3IgPSBgd2lraS10YWxrLW1lc3NhZ2UtaW5wdXQtJHttZXNzYWdlLmlkfWA7XHJcbiAgICAgICAgICAgIGZvcm1MYWJlbC50ZXh0Q29udGVudCA9IFwiUmVwbHlcIjtcclxuXHJcbiAgICAgICAgICAgIGxldCBmb3JtVGV4dEFyZWEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGV4dGFyZWFcIik7XHJcbiAgICAgICAgICAgIGZvcm1EaXYuYXBwZW5kQ2hpbGQoZm9ybVRleHRBcmVhKTtcclxuICAgICAgICAgICAgZm9ybVRleHRBcmVhLmlkID0gYHdpa2ktdGFsay1tZXNzYWdlLWlucHV0LSR7bWVzc2FnZS5pZH1gO1xyXG4gICAgICAgICAgICBmb3JtRGl2LmNsYXNzTGlzdC5hZGQoXCJmb3JtLWNvbnRyb2xcIik7XHJcblxyXG4gICAgICAgICAgICBsZXQgcmVwbHlCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xyXG4gICAgICAgICAgICByZXBseURpdi5hcHBlbmRDaGlsZChyZXBseUJ1dHRvbik7XHJcbiAgICAgICAgICAgIHJlcGx5QnV0dG9uLmlkID0gYHdpa2ktdGFsay1yZXBseS1idXR0b24tJHttZXNzYWdlLmlkfWA7XHJcbiAgICAgICAgICAgIHJlcGx5QnV0dG9uLnR5cGUgPSAnYnV0dG9uJztcclxuICAgICAgICAgICAgcmVwbHlCdXR0b24uY2xhc3NMaXN0LmFkZChcImJ0blwiLCBcImJ0bi1wcmltYXJ5XCIpO1xyXG4gICAgICAgICAgICByZXBseUJ1dHRvbi50ZXh0Q29udGVudCA9IFwiUG9zdFwiO1xyXG4gICAgICAgICAgICByZXBseUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBldmVudCA9IGV2ZW50IHx8IHdpbmRvdy5ldmVudDtcclxuICAgICAgICAgICAgICAgIGxldCB0YXJnZXQgPSBlLnRhcmdldCB8fCBlLnNyY0VsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICBsZXQgaWQgPSB0YXJnZXQuaWQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoaWQgPT0gbnVsbCB8fCBpZC5sZW5ndGggPT0gbnVsbCB8fCBpZC5sZW5ndGggPD0gMjMpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZCA9IGlkLnN1YnN0cigyMyk7XHJcbiAgICAgICAgICAgICAgICBsZXQgY2hhdElucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYHdpa2ktdGFsay1tZXNzYWdlLWlucHV0LSR7aWR9YCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hhdElucHV0ID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBsZXQgcmVwbHkgPSBjaGF0SW5wdXQudmFsdWU7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVwbHkgPT0gbnVsbCB8fCByZXBseS5sZW5ndGggPT0gbnVsbCB8fCAhKHJlcGx5Lmxlbmd0aCA+IDApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgd2luZG93Lndpa2ltdmNjaGF0LmNvbm5lY3Rpb24uaW52b2tlKFwiU2VuZFwiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWFya2Rvd246IHJlcGx5LFxyXG4gICAgICAgICAgICAgICAgICAgIHRvcGljSWQ6IHRvcGljSWQsXHJcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZUlkOiBpZCxcclxuICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL3JldHVybiBjb25zb2xlLmVycm9yKGVyci50b1N0cmluZygpKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29uc29sZS5lcnJvcihcIkFuIGVycm9yIG9jY3VycmVkIHdoaWxlIHNlbmRpbmcgYSBjaGF0IG1lc3NhZ2VcIik7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB3aW5kb3cud2lraW12Y2NoYXQubWVzc2FnZUxpc3RVbC5hcHBlbmRDaGlsZChtZXNzYWdlTGkpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCBwYXJlbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgd2lraS1tZXNzYWdlLWRpdi0ke21lc3NhZ2UucmVwbHlNZXNzYWdlSWR9YCk7XHJcbiAgICAgICAgICAgIGlmIChwYXJlbnQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcGFyZW50LmNsYXNzTGlzdC5hZGQoXCJ3aWtpLW1lc3NhZ2UtdGhyZWFkXCIpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGNoaWxkTWVzc2FnZUxpc3QgPSBwYXJlbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJ1bFwiKTtcclxuICAgICAgICAgICAgICAgIGlmIChjaGlsZE1lc3NhZ2VMaXN0ID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZE1lc3NhZ2VMaXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInVsXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudC5hcHBlbmRDaGlsZChjaGlsZE1lc3NhZ2VMaXN0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNoaWxkTWVzc2FnZUxpc3QuYXBwZW5kQ2hpbGQobWVzc2FnZUxpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGhlaWdodCA9IHBhcnNlSW50KGdldENvbXB1dGVkU3R5bGUobWVzc2FnZUNvbnRlbnQpLmdldFByb3BlcnR5VmFsdWUoXCJoZWlnaHRcIikpO1xyXG4gICAgICAgIGxldCBtYXhIZWlnaHQgPSBwYXJzZUludChnZXRDb21wdXRlZFN0eWxlKG1lc3NhZ2VDb250ZW50KS5nZXRQcm9wZXJ0eVZhbHVlKFwibWF4LWhlaWdodFwiKSk7XHJcbiAgICAgICAgaWYgKGhlaWdodCA8IG1heEhlaWdodCkge1xyXG4gICAgICAgICAgICBtZXNzYWdlRGl2LmNsYXNzTGlzdC5yZW1vdmUoXCJjb2xsYXBzaWJsZVwiKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIGFkZFJlYWN0aW9uOiBmdW5jdGlvbiAocmVhY3Rpb24pIHtcclxuICAgICAgICBpZiAocmVhY3Rpb24gPT0gbnVsbCB8fCByZWFjdGlvbi5tZXNzYWdlSWQgPT0gbnVsbCB8fCByZWFjdGlvbi5yZXBseU1lc3NhZ2VJZCA9PSBudWxsICYmIHJlYWN0aW9uLnJlcGx5TWVzc2FnZUlkLmxlbmd0aCA9PSBudWxsICYmICEocmVhY3Rpb24ucmVwbHlNZXNzYWdlSWQubGVuZ3RoID4gMCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHBhcmVudFJlYWN0aW9uU3BhbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGB3aWtpLW1lc3NhZ2UtcmVhY3Rpb25zLSR7cmVhY3Rpb24ucmVwbHlNZXNzYWdlSWR9YCk7XHJcbiAgICAgICAgaWYgKHBhcmVudFJlYWN0aW9uU3BhbiA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCB0eXBlTmFtZSA9IHJlYWN0aW9uLmNvbnRlbnQucmVwbGFjZSgvW15hLXpBLVpdL2csICcnKTtcclxuICAgICAgICBsZXQgcmVhY3Rpb25zID0gcGFyZW50UmVhY3Rpb25TcGFuLmdldEVsZW1lbnRCeUlkKGB3aWtpLW1lc3NhZ2UtcmVhY3Rpb25zLSR7dHlwZU5hbWV9LSR7cmVhY3Rpb24ubWVzc2FnZUlkfWApO1xyXG4gICAgICAgIGlmIChyZWFjdGlvbnMgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZWFjdGlvbnMgPSB3aW5kb3cud2lraW12Y2NoYXQuYWRkUmVhY3Rpb25MaXN0KHJlYWN0aW9uLnJlcGx5TWVzc2FnZUlkLCByZWFjdGlvbi50b3BpY0lkLCBwYXJlbnRSZWFjdGlvblNwYW4sIHR5cGVOYW1lLCByZWFjdGlvbi5jb250ZW50KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHdpbmRvdy53aWtpbXZjY2hhdC5hZGRSZWFjdGlvblRvTGlzdChyZWFjdGlvbiwgdHlwZU5hbWUpO1xyXG4gICAgfSxcclxuXHJcbiAgICBhZGRSZWFjdGlvbkxpc3Q6IGZ1bmN0aW9uIChtZXNzYWdlSWQsIHRvcGljSWQsIHNwYW4sIHR5cGVOYW1lLCBjb250ZW50KSB7XHJcbiAgICAgICAgbGV0IHJlYWN0aW9uVHlwZVNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcclxuICAgICAgICBzcGFuLmFwcGVuZENoaWxkKHJlYWN0aW9uVHlwZVNwYW4pO1xyXG4gICAgICAgIHJlYWN0aW9uVHlwZVNwYW4uaWQgPSBgd2lraS1tZXNzYWdlLXJlYWN0aW9ucy0ke3R5cGVOYW1lfS0ke21lc3NhZ2VJZH1gO1xyXG4gICAgICAgIHJlYWN0aW9uVHlwZVNwYW4uY2xhc3NMaXN0LmFkZChcIndpa2ktbWVzc2FnZS1yZWFjdGlvbnNcIik7XHJcblxyXG4gICAgICAgIGxldCByZWFjdGlvbkljb25TcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XHJcbiAgICAgICAgcmVhY3Rpb25UeXBlU3Bhbi5hcHBlbmRDaGlsZChyZWFjdGlvbkljb25TcGFuKTtcclxuICAgICAgICByZWFjdGlvbkljb25TcGFuLmNsYXNzTGlzdC5hZGQoXCJ3aWtpLW1lc3NhZ2UtcmVhY3Rpb24taWNvblwiKTtcclxuICAgICAgICByZWFjdGlvbkljb25TcGFuLm9uY2xpY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgd2luZG93Lndpa2ltdmNjaGF0LmNvbm5lY3Rpb24uaW52b2tlKFwiU2VuZFwiLCB7XHJcbiAgICAgICAgICAgICAgICBtYXJrZG93bjogY29udGVudCxcclxuICAgICAgICAgICAgICAgIHRvcGljSWQ6IHRvcGljSWQsXHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlSWQ6IG1lc3NhZ2VJZCxcclxuICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICAgICAgLy9yZXR1cm4gY29uc29sZS5lcnJvcihgQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgYXR0ZW1wdGluZyB0byBzZW5kIGEgY2hhdCByZWFjdGlvbjogJHtlcnJ9YCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29uc29sZS5lcnJvcihcIkFuIGVycm9yIG9jY3VycmVkIHdoaWxlIGF0dGVtcHRpbmcgdG8gc2VuZCBhIGNoYXQgcmVhY3Rpb25cIik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBsZXQgcmVhY3Rpb25Db3VudFNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcclxuICAgICAgICByZWFjdGlvblR5cGVTcGFuLmFwcGVuZENoaWxkKHJlYWN0aW9uQ291bnRTcGFuKTtcclxuICAgICAgICByZWFjdGlvblR5cGVTcGFuLmlkID0gYHdpa2ktbWVzc2FnZS1yZWFjdGlvbi1jb3VudC0ke3R5cGVOYW1lfS0ke21lc3NhZ2VJZH1gO1xyXG4gICAgICAgIHJlYWN0aW9uQ291bnRTcGFuLmNsYXNzTGlzdC5hZGQoXCJ3aWtpLW1lc3NhZ2UtcmVhY3Rpb24tY291bnRcIik7XHJcblxyXG4gICAgICAgIGxldCByZWFjdGlvbkNvdW50ID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoXCIwXCIpO1xyXG4gICAgICAgIHJlYWN0aW9uQ291bnRTcGFuLmFwcGVuZENoaWxkKHJlYWN0aW9uQ291bnQpO1xyXG5cclxuICAgICAgICBsZXQgcmVhY3Rpb25MaXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInVsXCIpO1xyXG4gICAgICAgIHJlYWN0aW9uVHlwZVNwYW4uYXBwZW5kQ2hpbGQocmVhY3Rpb25MaXN0KTtcclxuICAgICAgICByZWFjdGlvbkxpc3QuaWQgPSBgd2lraS1tZXNzYWdlLXJlYWN0aW9uLWxpc3QtJHt0eXBlTmFtZX0tJHttZXNzYWdlSWR9YDtcclxuICAgICAgICByZWFjdGlvbkxpc3QuY2xhc3NMaXN0LmFkZChcIndpa2ktbWVzc2FnZS1yZWFjdGlvbi1saXN0XCIpO1xyXG4gICAgICAgIHJlYWN0aW9uTGlzdC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcblxyXG4gICAgICAgIHRpcHB5KHJlYWN0aW9uVHlwZVNwYW4sIHtcclxuICAgICAgICAgICAgY29udGVudCgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgd2lraS1tZXNzYWdlLXJlYWN0aW9uLWxpc3QtJHt0eXBlTmFtZX0tJHttZXNzYWdlSWR9YCkuaW5uZXJIVE1MO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBwbGFjZW1lbnQ6ICdhdXRvJyxcclxuICAgICAgICAgICAgYWxsb3dIVE1MOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiByZWFjdGlvblR5cGVTcGFuO1xyXG4gICAgfSxcclxuXHJcbiAgICBhZGRSZWFjdGlvblRvTGlzdChyZWFjdGlvbiwgdHlwZU5hbWUpIHtcclxuICAgICAgICBsZXQgY291bnRTcGFuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYHdpa2ktbWVzc2FnZS1yZWFjdGlvbi1jb3VudC0ke3R5cGVOYW1lfS0ke3JlYWN0aW9uLnJlcGx5TWVzc2FnZUlkfWApO1xyXG4gICAgICAgIGlmIChjb3VudFNwYW4gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBsZXQgY291bnQgPSBwYXJzZUludChjb3VudFNwYW4udGV4dENvbnRlbnQpO1xyXG4gICAgICAgICAgICBjb3VudCsrO1xyXG4gICAgICAgICAgICBjb3VudFNwYW4udGV4dENvbnRlbnQgPSBjb3VudC50b0xvY2FsZVN0cmluZygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHJlYWN0aW9uTGlzdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGB3aWtpLW1lc3NhZ2UtcmVhY3Rpb24tbGlzdC0ke3R5cGVOYW1lfS0ke3JlYWN0aW9uLnJlcGx5TWVzc2FnZUlkfWApO1xyXG4gICAgICAgIGlmIChyZWFjdGlvbkxpc3QgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB3aW5kb3cud2lraW12Y2NoYXQuYWRkUmVhY3Rpb25Ub0xpc3QocmVhY3Rpb25MaXN0LCByZWFjdGlvbik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgcmVhY3Rpb25MaXN0SXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaVwiKTtcclxuICAgICAgICByZWFjdGlvbkxpc3QuYXBwZW5kQ2hpbGQocmVhY3Rpb25MaXN0SXRlbSk7XHJcblxyXG4gICAgICAgIGxldCB1c2VybmFtZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHJlYWN0aW9uLnNlbmRlck5hbWUpO1xyXG4gICAgICAgIGlmIChyZWFjdGlvbi5zZW5kZXJFeGlzdHMpIHtcclxuICAgICAgICAgICAgbGV0IHVzZXJMaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XHJcbiAgICAgICAgICAgIHJlYWN0aW9uTGlzdEl0ZW0uYXBwZW5kQ2hpbGQodXNlckxpbmspO1xyXG4gICAgICAgICAgICB1c2VyTGluay5jbGFzc0xpc3QuYWRkKFwid2lraS11c2VybmFtZVwiLCBcIndpa2ktdXNlcm5hbWUtbGlua1wiKTtcclxuICAgICAgICAgICAgdXNlckxpbmsuaHJlZiA9IGAvJHt3aW5kb3cud2lraW12Y2NoYXQudXNlck5hbWVzcGFjZX06JHtyZWFjdGlvbi5zZW5kZXJJZH1gO1xyXG4gICAgICAgICAgICB1c2VyTGluay50aXRsZSA9IGBWaXNpdCB0aGUgdXNlciBwYWdlIGZvciAke3JlYWN0aW9uLnNlbmRlck5hbWV9YDtcclxuICAgICAgICAgICAgdXNlckxpbmsuYXBwZW5kQ2hpbGQodXNlcm5hbWUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCB1c2VyU3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xyXG4gICAgICAgICAgICByZWFjdGlvbkxpc3RJdGVtLmFwcGVuZENoaWxkKHVzZXJTcGFuKTtcclxuICAgICAgICAgICAgdXNlclNwYW4uY2xhc3NMaXN0LmFkZChcIndpa2ktdXNlcm5hbWVcIiwgXCJ3aWtpLXVzZXJuYW1lLW5vbGlua1wiKTtcclxuICAgICAgICAgICAgdXNlclNwYW4uYXBwZW5kQ2hpbGQodXNlcm5hbWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHJlYWN0aW9uVGltZXN0YW1wID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XHJcbiAgICAgICAgcmVhY3Rpb25MaXN0SXRlbS5hcHBlbmRDaGlsZChyZWFjdGlvblRpbWVzdGFtcCk7XHJcblxyXG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShuZXcgRGF0ZSgobGlzdFtpXS50aW1lc3RhbXAgLyAxMDAwMCkgLSAyMjA4OTg4ODAwMDAwKS50b0xvY2FsZVN0cmluZygpKTtcclxuICAgICAgICByZWFjdGlvblRpbWVzdGFtcC5hcHBlbmRDaGlsZCh0aW1lc3RhbXApO1xyXG4gICAgfVxyXG59O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuLy8gQ29weXJpZ2h0IChjKSAuTkVUIEZvdW5kYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbi8vIFJvdWdoIHBvbHlmaWxsIG9mIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9BYm9ydENvbnRyb2xsZXJcclxuLy8gV2UgZG9uJ3QgYWN0dWFsbHkgZXZlciB1c2UgdGhlIEFQSSBiZWluZyBwb2x5ZmlsbGVkLCB3ZSBhbHdheXMgdXNlIHRoZSBwb2x5ZmlsbCBiZWNhdXNlXHJcbi8vIGl0J3MgYSB2ZXJ5IG5ldyBBUEkgcmlnaHQgbm93LlxyXG4vLyBOb3QgZXhwb3J0ZWQgZnJvbSBpbmRleC5cclxuLyoqIEBwcml2YXRlICovXHJcbnZhciBBYm9ydENvbnRyb2xsZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBBYm9ydENvbnRyb2xsZXIoKSB7XHJcbiAgICAgICAgdGhpcy5pc0Fib3J0ZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLm9uYWJvcnQgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgQWJvcnRDb250cm9sbGVyLnByb3RvdHlwZS5hYm9ydCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNBYm9ydGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXNBYm9ydGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgaWYgKHRoaXMub25hYm9ydCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbmFib3J0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFib3J0Q29udHJvbGxlci5wcm90b3R5cGUsIFwic2lnbmFsXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWJvcnRDb250cm9sbGVyLnByb3RvdHlwZSwgXCJhYm9ydGVkXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXNBYm9ydGVkO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIEFib3J0Q29udHJvbGxlcjtcclxufSgpKTtcclxuZXhwb3J0cy5BYm9ydENvbnRyb2xsZXIgPSBBYm9ydENvbnRyb2xsZXI7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFib3J0Q29udHJvbGxlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuLy8gQ29weXJpZ2h0IChjKSAuTkVUIEZvdW5kYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG4gICAgfTtcclxufSkoKTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgRXJyb3JzXzEgPSByZXF1aXJlKFwiLi9FcnJvcnNcIik7XHJcbnZhciBIdHRwQ2xpZW50XzEgPSByZXF1aXJlKFwiLi9IdHRwQ2xpZW50XCIpO1xyXG52YXIgTm9kZUh0dHBDbGllbnRfMSA9IHJlcXVpcmUoXCIuL05vZGVIdHRwQ2xpZW50XCIpO1xyXG52YXIgWGhySHR0cENsaWVudF8xID0gcmVxdWlyZShcIi4vWGhySHR0cENsaWVudFwiKTtcclxuLyoqIERlZmF1bHQgaW1wbGVtZW50YXRpb24gb2Yge0BsaW5rIEBtaWNyb3NvZnQvc2lnbmFsci5IdHRwQ2xpZW50fS4gKi9cclxudmFyIERlZmF1bHRIdHRwQ2xpZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKERlZmF1bHRIdHRwQ2xpZW50LCBfc3VwZXIpO1xyXG4gICAgLyoqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIHtAbGluayBAbWljcm9zb2Z0L3NpZ25hbHIuRGVmYXVsdEh0dHBDbGllbnR9LCB1c2luZyB0aGUgcHJvdmlkZWQge0BsaW5rIEBtaWNyb3NvZnQvc2lnbmFsci5JTG9nZ2VyfSB0byBsb2cgbWVzc2FnZXMuICovXHJcbiAgICBmdW5jdGlvbiBEZWZhdWx0SHR0cENsaWVudChsb2dnZXIpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xyXG4gICAgICAgIGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICAgICAgX3RoaXMuaHR0cENsaWVudCA9IG5ldyBYaHJIdHRwQ2xpZW50XzEuWGhySHR0cENsaWVudChsb2dnZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgX3RoaXMuaHR0cENsaWVudCA9IG5ldyBOb2RlSHR0cENsaWVudF8xLk5vZGVIdHRwQ2xpZW50KGxvZ2dlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIC8qKiBAaW5oZXJpdERvYyAqL1xyXG4gICAgRGVmYXVsdEh0dHBDbGllbnQucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAocmVxdWVzdCkge1xyXG4gICAgICAgIC8vIENoZWNrIHRoYXQgYWJvcnQgd2FzIG5vdCBzaWduYWxlZCBiZWZvcmUgY2FsbGluZyBzZW5kXHJcbiAgICAgICAgaWYgKHJlcXVlc3QuYWJvcnRTaWduYWwgJiYgcmVxdWVzdC5hYm9ydFNpZ25hbC5hYm9ydGVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3JzXzEuQWJvcnRFcnJvcigpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFyZXF1ZXN0Lm1ldGhvZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8gbWV0aG9kIGRlZmluZWQuXCIpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFyZXF1ZXN0LnVybCkge1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8gdXJsIGRlZmluZWQuXCIpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5zZW5kKHJlcXVlc3QpO1xyXG4gICAgfTtcclxuICAgIERlZmF1bHRIdHRwQ2xpZW50LnByb3RvdHlwZS5nZXRDb29raWVTdHJpbmcgPSBmdW5jdGlvbiAodXJsKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5nZXRDb29raWVTdHJpbmcodXJsKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRGVmYXVsdEh0dHBDbGllbnQ7XHJcbn0oSHR0cENsaWVudF8xLkh0dHBDbGllbnQpKTtcclxuZXhwb3J0cy5EZWZhdWx0SHR0cENsaWVudCA9IERlZmF1bHRIdHRwQ2xpZW50O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1EZWZhdWx0SHR0cENsaWVudC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuLy8gQ29weXJpZ2h0IChjKSAuTkVUIEZvdW5kYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbi8vIDAsIDIsIDEwLCAzMCBzZWNvbmQgZGVsYXlzIGJlZm9yZSByZWNvbm5lY3QgYXR0ZW1wdHMuXHJcbnZhciBERUZBVUxUX1JFVFJZX0RFTEFZU19JTl9NSUxMSVNFQ09ORFMgPSBbMCwgMjAwMCwgMTAwMDAsIDMwMDAwLCBudWxsXTtcclxuLyoqIEBwcml2YXRlICovXHJcbnZhciBEZWZhdWx0UmVjb25uZWN0UG9saWN5ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRGVmYXVsdFJlY29ubmVjdFBvbGljeShyZXRyeURlbGF5cykge1xyXG4gICAgICAgIHRoaXMucmV0cnlEZWxheXMgPSByZXRyeURlbGF5cyAhPT0gdW5kZWZpbmVkID8gcmV0cnlEZWxheXMuY29uY2F0KFtudWxsXSkgOiBERUZBVUxUX1JFVFJZX0RFTEFZU19JTl9NSUxMSVNFQ09ORFM7XHJcbiAgICB9XHJcbiAgICBEZWZhdWx0UmVjb25uZWN0UG9saWN5LnByb3RvdHlwZS5uZXh0UmV0cnlEZWxheUluTWlsbGlzZWNvbmRzID0gZnVuY3Rpb24gKHJldHJ5Q29udGV4dCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJldHJ5RGVsYXlzW3JldHJ5Q29udGV4dC5wcmV2aW91c1JldHJ5Q291bnRdO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBEZWZhdWx0UmVjb25uZWN0UG9saWN5O1xyXG59KCkpO1xyXG5leHBvcnRzLkRlZmF1bHRSZWNvbm5lY3RQb2xpY3kgPSBEZWZhdWx0UmVjb25uZWN0UG9saWN5O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1EZWZhdWx0UmVjb25uZWN0UG9saWN5LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG4vLyBDb3B5cmlnaHQgKGMpIC5ORVQgRm91bmRhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbiAgICB9O1xyXG59KSgpO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbi8qKiBFcnJvciB0aHJvd24gd2hlbiBhbiBIVFRQIHJlcXVlc3QgZmFpbHMuICovXHJcbnZhciBIdHRwRXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoSHR0cEVycm9yLCBfc3VwZXIpO1xyXG4gICAgLyoqIENvbnN0cnVjdHMgYSBuZXcgaW5zdGFuY2Ugb2Yge0BsaW5rIEBtaWNyb3NvZnQvc2lnbmFsci5IdHRwRXJyb3J9LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBlcnJvck1lc3NhZ2UgQSBkZXNjcmlwdGl2ZSBlcnJvciBtZXNzYWdlLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXR1c0NvZGUgVGhlIEhUVFAgc3RhdHVzIGNvZGUgcmVwcmVzZW50ZWQgYnkgdGhpcyBlcnJvci5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gSHR0cEVycm9yKGVycm9yTWVzc2FnZSwgc3RhdHVzQ29kZSkge1xyXG4gICAgICAgIHZhciBfbmV3VGFyZ2V0ID0gdGhpcy5jb25zdHJ1Y3RvcjtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciB0cnVlUHJvdG8gPSBfbmV3VGFyZ2V0LnByb3RvdHlwZTtcclxuICAgICAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGVycm9yTWVzc2FnZSkgfHwgdGhpcztcclxuICAgICAgICBfdGhpcy5zdGF0dXNDb2RlID0gc3RhdHVzQ29kZTtcclxuICAgICAgICAvLyBXb3JrYXJvdW5kIGlzc3VlIGluIFR5cGVzY3JpcHQgY29tcGlsZXJcclxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vTWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzEzOTY1I2lzc3VlY29tbWVudC0yNzg1NzAyMDBcclxuICAgICAgICBfdGhpcy5fX3Byb3RvX18gPSB0cnVlUHJvdG87XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIEh0dHBFcnJvcjtcclxufShFcnJvcikpO1xyXG5leHBvcnRzLkh0dHBFcnJvciA9IEh0dHBFcnJvcjtcclxuLyoqIEVycm9yIHRocm93biB3aGVuIGEgdGltZW91dCBlbGFwc2VzLiAqL1xyXG52YXIgVGltZW91dEVycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKFRpbWVvdXRFcnJvciwgX3N1cGVyKTtcclxuICAgIC8qKiBDb25zdHJ1Y3RzIGEgbmV3IGluc3RhbmNlIG9mIHtAbGluayBAbWljcm9zb2Z0L3NpZ25hbHIuVGltZW91dEVycm9yfS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXJyb3JNZXNzYWdlIEEgZGVzY3JpcHRpdmUgZXJyb3IgbWVzc2FnZS5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gVGltZW91dEVycm9yKGVycm9yTWVzc2FnZSkge1xyXG4gICAgICAgIHZhciBfbmV3VGFyZ2V0ID0gdGhpcy5jb25zdHJ1Y3RvcjtcclxuICAgICAgICBpZiAoZXJyb3JNZXNzYWdlID09PSB2b2lkIDApIHsgZXJyb3JNZXNzYWdlID0gXCJBIHRpbWVvdXQgb2NjdXJyZWQuXCI7IH1cclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciB0cnVlUHJvdG8gPSBfbmV3VGFyZ2V0LnByb3RvdHlwZTtcclxuICAgICAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGVycm9yTWVzc2FnZSkgfHwgdGhpcztcclxuICAgICAgICAvLyBXb3JrYXJvdW5kIGlzc3VlIGluIFR5cGVzY3JpcHQgY29tcGlsZXJcclxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vTWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzEzOTY1I2lzc3VlY29tbWVudC0yNzg1NzAyMDBcclxuICAgICAgICBfdGhpcy5fX3Byb3RvX18gPSB0cnVlUHJvdG87XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFRpbWVvdXRFcnJvcjtcclxufShFcnJvcikpO1xyXG5leHBvcnRzLlRpbWVvdXRFcnJvciA9IFRpbWVvdXRFcnJvcjtcclxuLyoqIEVycm9yIHRocm93biB3aGVuIGFuIGFjdGlvbiBpcyBhYm9ydGVkLiAqL1xyXG52YXIgQWJvcnRFcnJvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhBYm9ydEVycm9yLCBfc3VwZXIpO1xyXG4gICAgLyoqIENvbnN0cnVjdHMgYSBuZXcgaW5zdGFuY2Ugb2Yge0BsaW5rIEFib3J0RXJyb3J9LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBlcnJvck1lc3NhZ2UgQSBkZXNjcmlwdGl2ZSBlcnJvciBtZXNzYWdlLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBBYm9ydEVycm9yKGVycm9yTWVzc2FnZSkge1xyXG4gICAgICAgIHZhciBfbmV3VGFyZ2V0ID0gdGhpcy5jb25zdHJ1Y3RvcjtcclxuICAgICAgICBpZiAoZXJyb3JNZXNzYWdlID09PSB2b2lkIDApIHsgZXJyb3JNZXNzYWdlID0gXCJBbiBhYm9ydCBvY2N1cnJlZC5cIjsgfVxyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHRydWVQcm90byA9IF9uZXdUYXJnZXQucHJvdG90eXBlO1xyXG4gICAgICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZXJyb3JNZXNzYWdlKSB8fCB0aGlzO1xyXG4gICAgICAgIC8vIFdvcmthcm91bmQgaXNzdWUgaW4gVHlwZXNjcmlwdCBjb21waWxlclxyXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvMTM5NjUjaXNzdWVjb21tZW50LTI3ODU3MDIwMFxyXG4gICAgICAgIF90aGlzLl9fcHJvdG9fXyA9IHRydWVQcm90bztcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gQWJvcnRFcnJvcjtcclxufShFcnJvcikpO1xyXG5leHBvcnRzLkFib3J0RXJyb3IgPSBBYm9ydEVycm9yO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1FcnJvcnMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8vIENvcHlyaWdodCAoYykgLk5FVCBGb3VuZGF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgVGV4dE1lc3NhZ2VGb3JtYXRfMSA9IHJlcXVpcmUoXCIuL1RleHRNZXNzYWdlRm9ybWF0XCIpO1xyXG52YXIgVXRpbHNfMSA9IHJlcXVpcmUoXCIuL1V0aWxzXCIpO1xyXG4vKiogQHByaXZhdGUgKi9cclxudmFyIEhhbmRzaGFrZVByb3RvY29sID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gSGFuZHNoYWtlUHJvdG9jb2woKSB7XHJcbiAgICB9XHJcbiAgICAvLyBIYW5kc2hha2UgcmVxdWVzdCBpcyBhbHdheXMgSlNPTlxyXG4gICAgSGFuZHNoYWtlUHJvdG9jb2wucHJvdG90eXBlLndyaXRlSGFuZHNoYWtlUmVxdWVzdCA9IGZ1bmN0aW9uIChoYW5kc2hha2VSZXF1ZXN0KSB7XHJcbiAgICAgICAgcmV0dXJuIFRleHRNZXNzYWdlRm9ybWF0XzEuVGV4dE1lc3NhZ2VGb3JtYXQud3JpdGUoSlNPTi5zdHJpbmdpZnkoaGFuZHNoYWtlUmVxdWVzdCkpO1xyXG4gICAgfTtcclxuICAgIEhhbmRzaGFrZVByb3RvY29sLnByb3RvdHlwZS5wYXJzZUhhbmRzaGFrZVJlc3BvbnNlID0gZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICB2YXIgcmVzcG9uc2VNZXNzYWdlO1xyXG4gICAgICAgIHZhciBtZXNzYWdlRGF0YTtcclxuICAgICAgICB2YXIgcmVtYWluaW5nRGF0YTtcclxuICAgICAgICBpZiAoVXRpbHNfMS5pc0FycmF5QnVmZmVyKGRhdGEpIHx8ICh0eXBlb2YgQnVmZmVyICE9PSBcInVuZGVmaW5lZFwiICYmIGRhdGEgaW5zdGFuY2VvZiBCdWZmZXIpKSB7XHJcbiAgICAgICAgICAgIC8vIEZvcm1hdCBpcyBiaW5hcnkgYnV0IHN0aWxsIG5lZWQgdG8gcmVhZCBKU09OIHRleHQgZnJvbSBoYW5kc2hha2UgcmVzcG9uc2VcclxuICAgICAgICAgICAgdmFyIGJpbmFyeURhdGEgPSBuZXcgVWludDhBcnJheShkYXRhKTtcclxuICAgICAgICAgICAgdmFyIHNlcGFyYXRvckluZGV4ID0gYmluYXJ5RGF0YS5pbmRleE9mKFRleHRNZXNzYWdlRm9ybWF0XzEuVGV4dE1lc3NhZ2VGb3JtYXQuUmVjb3JkU2VwYXJhdG9yQ29kZSk7XHJcbiAgICAgICAgICAgIGlmIChzZXBhcmF0b3JJbmRleCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1lc3NhZ2UgaXMgaW5jb21wbGV0ZS5cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gY29udGVudCBiZWZvcmUgc2VwYXJhdG9yIGlzIGhhbmRzaGFrZSByZXNwb25zZVxyXG4gICAgICAgICAgICAvLyBvcHRpb25hbCBjb250ZW50IGFmdGVyIGlzIGFkZGl0aW9uYWwgbWVzc2FnZXNcclxuICAgICAgICAgICAgdmFyIHJlc3BvbnNlTGVuZ3RoID0gc2VwYXJhdG9ySW5kZXggKyAxO1xyXG4gICAgICAgICAgICBtZXNzYWdlRGF0YSA9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgYmluYXJ5RGF0YS5zbGljZSgwLCByZXNwb25zZUxlbmd0aCkpO1xyXG4gICAgICAgICAgICByZW1haW5pbmdEYXRhID0gKGJpbmFyeURhdGEuYnl0ZUxlbmd0aCA+IHJlc3BvbnNlTGVuZ3RoKSA/IGJpbmFyeURhdGEuc2xpY2UocmVzcG9uc2VMZW5ndGgpLmJ1ZmZlciA6IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgdGV4dERhdGEgPSBkYXRhO1xyXG4gICAgICAgICAgICB2YXIgc2VwYXJhdG9ySW5kZXggPSB0ZXh0RGF0YS5pbmRleE9mKFRleHRNZXNzYWdlRm9ybWF0XzEuVGV4dE1lc3NhZ2VGb3JtYXQuUmVjb3JkU2VwYXJhdG9yKTtcclxuICAgICAgICAgICAgaWYgKHNlcGFyYXRvckluZGV4ID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWVzc2FnZSBpcyBpbmNvbXBsZXRlLlwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBjb250ZW50IGJlZm9yZSBzZXBhcmF0b3IgaXMgaGFuZHNoYWtlIHJlc3BvbnNlXHJcbiAgICAgICAgICAgIC8vIG9wdGlvbmFsIGNvbnRlbnQgYWZ0ZXIgaXMgYWRkaXRpb25hbCBtZXNzYWdlc1xyXG4gICAgICAgICAgICB2YXIgcmVzcG9uc2VMZW5ndGggPSBzZXBhcmF0b3JJbmRleCArIDE7XHJcbiAgICAgICAgICAgIG1lc3NhZ2VEYXRhID0gdGV4dERhdGEuc3Vic3RyaW5nKDAsIHJlc3BvbnNlTGVuZ3RoKTtcclxuICAgICAgICAgICAgcmVtYWluaW5nRGF0YSA9ICh0ZXh0RGF0YS5sZW5ndGggPiByZXNwb25zZUxlbmd0aCkgPyB0ZXh0RGF0YS5zdWJzdHJpbmcocmVzcG9uc2VMZW5ndGgpIDogbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQXQgdGhpcyBwb2ludCB3ZSBzaG91bGQgaGF2ZSBqdXN0IHRoZSBzaW5nbGUgaGFuZHNoYWtlIG1lc3NhZ2VcclxuICAgICAgICB2YXIgbWVzc2FnZXMgPSBUZXh0TWVzc2FnZUZvcm1hdF8xLlRleHRNZXNzYWdlRm9ybWF0LnBhcnNlKG1lc3NhZ2VEYXRhKTtcclxuICAgICAgICB2YXIgcmVzcG9uc2UgPSBKU09OLnBhcnNlKG1lc3NhZ2VzWzBdKTtcclxuICAgICAgICBpZiAocmVzcG9uc2UudHlwZSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCBhIGhhbmRzaGFrZSByZXNwb25zZSBmcm9tIHRoZSBzZXJ2ZXIuXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXNwb25zZU1lc3NhZ2UgPSByZXNwb25zZTtcclxuICAgICAgICAvLyBtdWx0aXBsZSBtZXNzYWdlcyBjb3VsZCBoYXZlIGFycml2ZWQgd2l0aCBoYW5kc2hha2VcclxuICAgICAgICAvLyByZXR1cm4gYWRkaXRpb25hbCBkYXRhIHRvIGJlIHBhcnNlZCBhcyB1c3VhbCwgb3IgbnVsbCBpZiBhbGwgcGFyc2VkXHJcbiAgICAgICAgcmV0dXJuIFtyZW1haW5pbmdEYXRhLCByZXNwb25zZU1lc3NhZ2VdO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBIYW5kc2hha2VQcm90b2NvbDtcclxufSgpKTtcclxuZXhwb3J0cy5IYW5kc2hha2VQcm90b2NvbCA9IEhhbmRzaGFrZVByb3RvY29sO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1IYW5kc2hha2VQcm90b2NvbC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuLy8gQ29weXJpZ2h0IChjKSAuTkVUIEZvdW5kYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG52YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcclxuICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxyXG4gICAgICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbi8qKiBSZXByZXNlbnRzIGFuIEhUVFAgcmVzcG9uc2UuICovXHJcbnZhciBIdHRwUmVzcG9uc2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBIdHRwUmVzcG9uc2Uoc3RhdHVzQ29kZSwgc3RhdHVzVGV4dCwgY29udGVudCkge1xyXG4gICAgICAgIHRoaXMuc3RhdHVzQ29kZSA9IHN0YXR1c0NvZGU7XHJcbiAgICAgICAgdGhpcy5zdGF0dXNUZXh0ID0gc3RhdHVzVGV4dDtcclxuICAgICAgICB0aGlzLmNvbnRlbnQgPSBjb250ZW50O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIEh0dHBSZXNwb25zZTtcclxufSgpKTtcclxuZXhwb3J0cy5IdHRwUmVzcG9uc2UgPSBIdHRwUmVzcG9uc2U7XHJcbi8qKiBBYnN0cmFjdGlvbiBvdmVyIGFuIEhUVFAgY2xpZW50LlxyXG4gKlxyXG4gKiBUaGlzIGNsYXNzIHByb3ZpZGVzIGFuIGFic3RyYWN0aW9uIG92ZXIgYW4gSFRUUCBjbGllbnQgc28gdGhhdCBhIGRpZmZlcmVudCBpbXBsZW1lbnRhdGlvbiBjYW4gYmUgcHJvdmlkZWQgb24gZGlmZmVyZW50IHBsYXRmb3Jtcy5cclxuICovXHJcbnZhciBIdHRwQ2xpZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gSHR0cENsaWVudCgpIHtcclxuICAgIH1cclxuICAgIEh0dHBDbGllbnQucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uICh1cmwsIG9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKF9fYXNzaWduKHt9LCBvcHRpb25zLCB7IG1ldGhvZDogXCJHRVRcIiwgdXJsOiB1cmwgfSkpO1xyXG4gICAgfTtcclxuICAgIEh0dHBDbGllbnQucHJvdG90eXBlLnBvc3QgPSBmdW5jdGlvbiAodXJsLCBvcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZChfX2Fzc2lnbih7fSwgb3B0aW9ucywgeyBtZXRob2Q6IFwiUE9TVFwiLCB1cmw6IHVybCB9KSk7XHJcbiAgICB9O1xyXG4gICAgSHR0cENsaWVudC5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKHVybCwgb3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoX19hc3NpZ24oe30sIG9wdGlvbnMsIHsgbWV0aG9kOiBcIkRFTEVURVwiLCB1cmw6IHVybCB9KSk7XHJcbiAgICB9O1xyXG4gICAgLyoqIEdldHMgYWxsIGNvb2tpZXMgdGhhdCBhcHBseSB0byB0aGUgc3BlY2lmaWVkIFVSTC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gdXJsIFRoZSBVUkwgdGhhdCB0aGUgY29va2llcyBhcmUgdmFsaWQgZm9yLlxyXG4gICAgICogQHJldHVybnMge3N0cmluZ30gQSBzdHJpbmcgY29udGFpbmluZyBhbGwgdGhlIGtleS12YWx1ZSBjb29raWUgcGFpcnMgZm9yIHRoZSBzcGVjaWZpZWQgVVJMLlxyXG4gICAgICovXHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBIdHRwQ2xpZW50LnByb3RvdHlwZS5nZXRDb29raWVTdHJpbmcgPSBmdW5jdGlvbiAodXJsKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiXCI7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEh0dHBDbGllbnQ7XHJcbn0oKSk7XHJcbmV4cG9ydHMuSHR0cENsaWVudCA9IEh0dHBDbGllbnQ7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUh0dHBDbGllbnQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8vIENvcHlyaWdodCAoYykgLk5FVCBGb3VuZGF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufTtcclxudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBEZWZhdWx0SHR0cENsaWVudF8xID0gcmVxdWlyZShcIi4vRGVmYXVsdEh0dHBDbGllbnRcIik7XHJcbnZhciBJTG9nZ2VyXzEgPSByZXF1aXJlKFwiLi9JTG9nZ2VyXCIpO1xyXG52YXIgSVRyYW5zcG9ydF8xID0gcmVxdWlyZShcIi4vSVRyYW5zcG9ydFwiKTtcclxudmFyIExvbmdQb2xsaW5nVHJhbnNwb3J0XzEgPSByZXF1aXJlKFwiLi9Mb25nUG9sbGluZ1RyYW5zcG9ydFwiKTtcclxudmFyIFNlcnZlclNlbnRFdmVudHNUcmFuc3BvcnRfMSA9IHJlcXVpcmUoXCIuL1NlcnZlclNlbnRFdmVudHNUcmFuc3BvcnRcIik7XHJcbnZhciBVdGlsc18xID0gcmVxdWlyZShcIi4vVXRpbHNcIik7XHJcbnZhciBXZWJTb2NrZXRUcmFuc3BvcnRfMSA9IHJlcXVpcmUoXCIuL1dlYlNvY2tldFRyYW5zcG9ydFwiKTtcclxudmFyIE1BWF9SRURJUkVDVFMgPSAxMDA7XHJcbnZhciBXZWJTb2NrZXRNb2R1bGUgPSBudWxsO1xyXG52YXIgRXZlbnRTb3VyY2VNb2R1bGUgPSBudWxsO1xyXG5pZiAoVXRpbHNfMS5QbGF0Zm9ybS5pc05vZGUgJiYgdHlwZW9mIHJlcXVpcmUgIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgIC8vIEluIG9yZGVyIHRvIGlnbm9yZSB0aGUgZHluYW1pYyByZXF1aXJlIGluIHdlYnBhY2sgYnVpbGRzIHdlIG5lZWQgdG8gZG8gdGhpcyBtYWdpY1xyXG4gICAgLy8gQHRzLWlnbm9yZTogVFMgZG9lc24ndCBrbm93IGFib3V0IHRoZXNlIG5hbWVzXHJcbiAgICB2YXIgcmVxdWlyZUZ1bmMgPSB0eXBlb2YgX193ZWJwYWNrX3JlcXVpcmVfXyA9PT0gXCJmdW5jdGlvblwiID8gX19ub25fd2VicGFja19yZXF1aXJlX18gOiByZXF1aXJlO1xyXG4gICAgV2ViU29ja2V0TW9kdWxlID0gcmVxdWlyZUZ1bmMoXCJ3c1wiKTtcclxuICAgIEV2ZW50U291cmNlTW9kdWxlID0gcmVxdWlyZUZ1bmMoXCJldmVudHNvdXJjZVwiKTtcclxufVxyXG4vKiogQHByaXZhdGUgKi9cclxudmFyIEh0dHBDb25uZWN0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gSHR0cENvbm5lY3Rpb24odXJsLCBvcHRpb25zKSB7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cclxuICAgICAgICB0aGlzLmZlYXR1cmVzID0ge307XHJcbiAgICAgICAgdGhpcy5uZWdvdGlhdGVWZXJzaW9uID0gMTtcclxuICAgICAgICBVdGlsc18xLkFyZy5pc1JlcXVpcmVkKHVybCwgXCJ1cmxcIik7XHJcbiAgICAgICAgdGhpcy5sb2dnZXIgPSBVdGlsc18xLmNyZWF0ZUxvZ2dlcihvcHRpb25zLmxvZ2dlcik7XHJcbiAgICAgICAgdGhpcy5iYXNlVXJsID0gdGhpcy5yZXNvbHZlVXJsKHVybCk7XHJcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcbiAgICAgICAgb3B0aW9ucy5sb2dNZXNzYWdlQ29udGVudCA9IG9wdGlvbnMubG9nTWVzc2FnZUNvbnRlbnQgfHwgZmFsc2U7XHJcbiAgICAgICAgaWYgKCFVdGlsc18xLlBsYXRmb3JtLmlzTm9kZSAmJiB0eXBlb2YgV2ViU29ja2V0ICE9PSBcInVuZGVmaW5lZFwiICYmICFvcHRpb25zLldlYlNvY2tldCkge1xyXG4gICAgICAgICAgICBvcHRpb25zLldlYlNvY2tldCA9IFdlYlNvY2tldDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoVXRpbHNfMS5QbGF0Zm9ybS5pc05vZGUgJiYgIW9wdGlvbnMuV2ViU29ja2V0KSB7XHJcbiAgICAgICAgICAgIGlmIChXZWJTb2NrZXRNb2R1bGUpIHtcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMuV2ViU29ja2V0ID0gV2ViU29ja2V0TW9kdWxlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghVXRpbHNfMS5QbGF0Zm9ybS5pc05vZGUgJiYgdHlwZW9mIEV2ZW50U291cmNlICE9PSBcInVuZGVmaW5lZFwiICYmICFvcHRpb25zLkV2ZW50U291cmNlKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMuRXZlbnRTb3VyY2UgPSBFdmVudFNvdXJjZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoVXRpbHNfMS5QbGF0Zm9ybS5pc05vZGUgJiYgIW9wdGlvbnMuRXZlbnRTb3VyY2UpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBFdmVudFNvdXJjZU1vZHVsZSAhPT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5FdmVudFNvdXJjZSA9IEV2ZW50U291cmNlTW9kdWxlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaHR0cENsaWVudCA9IG9wdGlvbnMuaHR0cENsaWVudCB8fCBuZXcgRGVmYXVsdEh0dHBDbGllbnRfMS5EZWZhdWx0SHR0cENsaWVudCh0aGlzLmxvZ2dlcik7XHJcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uU3RhdGUgPSBcIkRpc2Nvbm5lY3RlZFwiIC8qIERpc2Nvbm5lY3RlZCAqLztcclxuICAgICAgICB0aGlzLmNvbm5lY3Rpb25TdGFydGVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcclxuICAgICAgICB0aGlzLm9ucmVjZWl2ZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5vbmNsb3NlID0gbnVsbDtcclxuICAgIH1cclxuICAgIEh0dHBDb25uZWN0aW9uLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uICh0cmFuc2ZlckZvcm1hdCkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIG1lc3NhZ2UsIG1lc3NhZ2U7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZmVyRm9ybWF0ID0gdHJhbnNmZXJGb3JtYXQgfHwgSVRyYW5zcG9ydF8xLlRyYW5zZmVyRm9ybWF0LkJpbmFyeTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgVXRpbHNfMS5BcmcuaXNJbih0cmFuc2ZlckZvcm1hdCwgSVRyYW5zcG9ydF8xLlRyYW5zZmVyRm9ybWF0LCBcInRyYW5zZmVyRm9ybWF0XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkRlYnVnLCBcIlN0YXJ0aW5nIGNvbm5lY3Rpb24gd2l0aCB0cmFuc2ZlciBmb3JtYXQgJ1wiICsgSVRyYW5zcG9ydF8xLlRyYW5zZmVyRm9ybWF0W3RyYW5zZmVyRm9ybWF0XSArIFwiJy5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbm5lY3Rpb25TdGF0ZSAhPT0gXCJEaXNjb25uZWN0ZWRcIiAvKiBEaXNjb25uZWN0ZWQgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJDYW5ub3Qgc3RhcnQgYW4gSHR0cENvbm5lY3Rpb24gdGhhdCBpcyBub3QgaW4gdGhlICdEaXNjb25uZWN0ZWQnIHN0YXRlLlwiKSldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvblN0YXRlID0gXCJDb25uZWN0aW5nIFwiIC8qIENvbm5lY3RpbmcgKi87XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhcnRJbnRlcm5hbFByb21pc2UgPSB0aGlzLnN0YXJ0SW50ZXJuYWwodHJhbnNmZXJGb3JtYXQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnN0YXJ0SW50ZXJuYWxQcm9taXNlXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEodGhpcy5jb25uZWN0aW9uU3RhdGUgPT09IFwiRGlzY29ubmVjdGluZ1wiIC8qIERpc2Nvbm5lY3RpbmcgKi8pKSByZXR1cm4gWzMgLypicmVhayovLCAzXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IFwiRmFpbGVkIHRvIHN0YXJ0IHRoZSBIdHRwQ29ubmVjdGlvbiBiZWZvcmUgc3RvcCgpIHdhcyBjYWxsZWQuXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuRXJyb3IsIG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSBjYW5ub3QgYXdhaXQgc3RvcFByb21pc2UgaW5zaWRlIHN0YXJ0SW50ZXJuYWwgc2luY2Ugc3RvcEludGVybmFsIGF3YWl0cyB0aGUgc3RhcnRJbnRlcm5hbFByb21pc2UuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuc3RvcFByb21pc2VdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UgY2Fubm90IGF3YWl0IHN0b3BQcm9taXNlIGluc2lkZSBzdGFydEludGVybmFsIHNpbmNlIHN0b3BJbnRlcm5hbCBhd2FpdHMgdGhlIHN0YXJ0SW50ZXJuYWxQcm9taXNlLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IobWVzc2FnZSkpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbm5lY3Rpb25TdGF0ZSAhPT0gXCJDb25uZWN0ZWRcIiAvKiBDb25uZWN0ZWQgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBcIkh0dHBDb25uZWN0aW9uLnN0YXJ0SW50ZXJuYWwgY29tcGxldGVkIGdyYWNlZnVsbHkgYnV0IGRpZG4ndCBlbnRlciB0aGUgY29ubmVjdGlvbiBpbnRvIHRoZSBjb25uZWN0ZWQgc3RhdGUhXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkVycm9yLCBtZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IobWVzc2FnZSkpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDQ7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb25TdGFydGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBIdHRwQ29ubmVjdGlvbi5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY29ubmVjdGlvblN0YXRlICE9PSBcIkNvbm5lY3RlZFwiIC8qIENvbm5lY3RlZCAqLykge1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiQ2Fubm90IHNlbmQgZGF0YSBpZiB0aGUgY29ubmVjdGlvbiBpcyBub3QgaW4gdGhlICdDb25uZWN0ZWQnIFN0YXRlLlwiKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGhpcy5zZW5kUXVldWUpIHtcclxuICAgICAgICAgICAgdGhpcy5zZW5kUXVldWUgPSBuZXcgVHJhbnNwb3J0U2VuZFF1ZXVlKHRoaXMudHJhbnNwb3J0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gVHJhbnNwb3J0IHdpbGwgbm90IGJlIG51bGwgaWYgc3RhdGUgaXMgY29ubmVjdGVkXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZFF1ZXVlLnNlbmQoZGF0YSk7XHJcbiAgICB9O1xyXG4gICAgSHR0cENvbm5lY3Rpb24ucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbm5lY3Rpb25TdGF0ZSA9PT0gXCJEaXNjb25uZWN0ZWRcIiAvKiBEaXNjb25uZWN0ZWQgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuRGVidWcsIFwiQ2FsbCB0byBIdHRwQ29ubmVjdGlvbi5zdG9wKFwiICsgZXJyb3IgKyBcIikgaWdub3JlZCBiZWNhdXNlIHRoZSBjb25uZWN0aW9uIGlzIGFscmVhZHkgaW4gdGhlIGRpc2Nvbm5lY3RlZCBzdGF0ZS5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgUHJvbWlzZS5yZXNvbHZlKCldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbm5lY3Rpb25TdGF0ZSA9PT0gXCJEaXNjb25uZWN0aW5nXCIgLyogRGlzY29ubmVjdGluZyAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5EZWJ1ZywgXCJDYWxsIHRvIEh0dHBDb25uZWN0aW9uLnN0b3AoXCIgKyBlcnJvciArIFwiKSBpZ25vcmVkIGJlY2F1c2UgdGhlIGNvbm5lY3Rpb24gaXMgYWxyZWFkeSBpbiB0aGUgZGlzY29ubmVjdGluZyBzdGF0ZS5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgdGhpcy5zdG9wUHJvbWlzZV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uU3RhdGUgPSBcIkRpc2Nvbm5lY3RpbmdcIiAvKiBEaXNjb25uZWN0aW5nICovO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3BQcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERvbid0IGNvbXBsZXRlIHN0b3AoKSB1bnRpbCBzdG9wQ29ubmVjdGlvbigpIGNvbXBsZXRlcy5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnN0b3BQcm9taXNlUmVzb2x2ZXIgPSByZXNvbHZlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3RvcEludGVybmFsIHNob3VsZCBuZXZlciB0aHJvdyBzbyBqdXN0IG9ic2VydmUgaXQuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuc3RvcEludGVybmFsKGVycm9yKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzdG9wSW50ZXJuYWwgc2hvdWxkIG5ldmVyIHRocm93IHNvIGp1c3Qgb2JzZXJ2ZSBpdC5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnN0b3BQcm9taXNlXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBIdHRwQ29ubmVjdGlvbi5wcm90b3R5cGUuc3RvcEludGVybmFsID0gZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgZV8xLCBlXzIsIGVfMztcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IGVycm9yIGFzIHNvb24gYXMgcG9zc2libGUgb3RoZXJ3aXNlIHRoZXJlIGlzIGEgcmFjZSBiZXR3ZWVuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSB0cmFuc3BvcnQgY2xvc2luZyBhbmQgcHJvdmlkaW5nIGFuIGVycm9yIGFuZCB0aGUgZXJyb3IgZnJvbSBhIGNsb3NlIG1lc3NhZ2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2Ugd291bGQgcHJlZmVyIHRoZSBjbG9zZSBtZXNzYWdlIGVycm9yLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3BFcnJvciA9IGVycm9yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS50cnlzLnB1c2goWzEsIDMsICwgNF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnN0YXJ0SW50ZXJuYWxQcm9taXNlXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlXzEgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDRdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnNlbmRRdWV1ZSkgcmV0dXJuIFszIC8qYnJlYWsqLywgOV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gNTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnRyeXMucHVzaChbNSwgNywgLCA4XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuc2VuZFF1ZXVlLnN0b3AoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDhdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZV8yID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkVycm9yLCBcIlRyYW5zcG9ydFNlbmRRdWV1ZS5zdG9wKCkgdGhyZXcgZXJyb3IgJ1wiICsgZV8yICsgXCInLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgOF07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA4OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbmRRdWV1ZSA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSA5O1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgOTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnRyYW5zcG9ydCkgcmV0dXJuIFszIC8qYnJlYWsqLywgMTRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDEwO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnRyeXMucHVzaChbMTAsIDEyLCAsIDEzXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMudHJhbnNwb3J0LnN0b3AoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCAxM107XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZV8zID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkVycm9yLCBcIkh0dHBDb25uZWN0aW9uLnRyYW5zcG9ydC5zdG9wKCkgdGhyZXcgZXJyb3IgJ1wiICsgZV8zICsgXCInLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9wQ29ubmVjdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCAxM107XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxMzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFuc3BvcnQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDE1XTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkRlYnVnLCBcIkh0dHBDb25uZWN0aW9uLnRyYW5zcG9ydCBpcyB1bmRlZmluZWQgaW4gSHR0cENvbm5lY3Rpb24uc3RvcCgpIGJlY2F1c2Ugc3RhcnQoKSBmYWlsZWQuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3BDb25uZWN0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMTU7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxNTogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBIdHRwQ29ubmVjdGlvbi5wcm90b3R5cGUuc3RhcnRJbnRlcm5hbCA9IGZ1bmN0aW9uICh0cmFuc2ZlckZvcm1hdCkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHVybCwgbmVnb3RpYXRlUmVzcG9uc2UsIHJlZGlyZWN0cywgX2xvb3BfMSwgdGhpc18xLCBlXzQ7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybCA9IHRoaXMuYmFzZVVybDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hY2Nlc3NUb2tlbkZhY3RvcnkgPSB0aGlzLm9wdGlvbnMuYWNjZXNzVG9rZW5GYWN0b3J5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS50cnlzLnB1c2goWzEsIDEyLCAsIDEzXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLnNraXBOZWdvdGlhdGlvbikgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHRoaXMub3B0aW9ucy50cmFuc3BvcnQgPT09IElUcmFuc3BvcnRfMS5IdHRwVHJhbnNwb3J0VHlwZS5XZWJTb2NrZXRzKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgM107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vIG5lZWQgdG8gYWRkIGEgY29ubmVjdGlvbiBJRCBpbiB0aGlzIGNhc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFuc3BvcnQgPSB0aGlzLmNvbnN0cnVjdFRyYW5zcG9ydChJVHJhbnNwb3J0XzEuSHR0cFRyYW5zcG9ydFR5cGUuV2ViU29ja2V0cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIHNob3VsZCBqdXN0IGNhbGwgY29ubmVjdCBkaXJlY3RseSBpbiB0aGlzIGNhc2UuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vIGZhbGxiYWNrIG9yIG5lZ290aWF0ZSBpbiB0aGlzIGNhc2UuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuc3RhcnRUcmFuc3BvcnQodXJsLCB0cmFuc2ZlckZvcm1hdCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2Ugc2hvdWxkIGp1c3QgY2FsbCBjb25uZWN0IGRpcmVjdGx5IGluIHRoaXMgY2FzZS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm8gZmFsbGJhY2sgb3IgbmVnb3RpYXRlIGluIHRoaXMgY2FzZS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA0XTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6IHRocm93IG5ldyBFcnJvcihcIk5lZ290aWF0aW9uIGNhbiBvbmx5IGJlIHNraXBwZWQgd2hlbiB1c2luZyB0aGUgV2ViU29ja2V0IHRyYW5zcG9ydCBkaXJlY3RseS5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzMgLypicmVhayovLCAxMV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZWdvdGlhdGVSZXNwb25zZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0cyA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9sb29wXzEgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWNjZXNzVG9rZW5fMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpc18xLmdldE5lZ290aWF0aW9uUmVzcG9uc2UodXJsKV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5lZ290aWF0ZVJlc3BvbnNlID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIHVzZXIgdHJpZXMgdG8gc3RvcCB0aGUgY29ubmVjdGlvbiB3aGVuIGl0IGlzIGJlaW5nIHN0YXJ0ZWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzXzEuY29ubmVjdGlvblN0YXRlID09PSBcIkRpc2Nvbm5lY3RpbmdcIiAvKiBEaXNjb25uZWN0aW5nICovIHx8IHRoaXNfMS5jb25uZWN0aW9uU3RhdGUgPT09IFwiRGlzY29ubmVjdGVkXCIgLyogRGlzY29ubmVjdGVkICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIGNvbm5lY3Rpb24gd2FzIHN0b3BwZWQgZHVyaW5nIG5lZ290aWF0aW9uLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZWdvdGlhdGVSZXNwb25zZS5lcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihuZWdvdGlhdGVSZXNwb25zZS5lcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmVnb3RpYXRlUmVzcG9uc2UuUHJvdG9jb2xWZXJzaW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRGV0ZWN0ZWQgYSBjb25uZWN0aW9uIGF0dGVtcHQgdG8gYW4gQVNQLk5FVCBTaWduYWxSIFNlcnZlci4gVGhpcyBjbGllbnQgb25seSBzdXBwb3J0cyBjb25uZWN0aW5nIHRvIGFuIEFTUC5ORVQgQ29yZSBTaWduYWxSIFNlcnZlci4gU2VlIGh0dHBzOi8vYWthLm1zL3NpZ25hbHItY29yZS1kaWZmZXJlbmNlcyBmb3IgZGV0YWlscy5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmVnb3RpYXRlUmVzcG9uc2UudXJsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsID0gbmVnb3RpYXRlUmVzcG9uc2UudXJsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5lZ290aWF0ZVJlc3BvbnNlLmFjY2Vzc1Rva2VuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXNzVG9rZW5fMSA9IG5lZ290aWF0ZVJlc3BvbnNlLmFjY2Vzc1Rva2VuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNfMS5hY2Nlc3NUb2tlbkZhY3RvcnkgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBhY2Nlc3NUb2tlbl8xOyB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVkaXJlY3RzKys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNfMSA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gNjtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6IHJldHVybiBbNSAvKnlpZWxkKiovLCBfbG9vcF8xKCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDg7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA4OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmVnb3RpYXRlUmVzcG9uc2UudXJsICYmIHJlZGlyZWN0cyA8IE1BWF9SRURJUkVDVFMpIHJldHVybiBbMyAvKmJyZWFrKi8sIDZdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDk7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA5OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVkaXJlY3RzID09PSBNQVhfUkVESVJFQ1RTICYmIG5lZ290aWF0ZVJlc3BvbnNlLnVybCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTmVnb3RpYXRlIHJlZGlyZWN0aW9uIGxpbWl0IGV4Y2VlZGVkLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmNyZWF0ZVRyYW5zcG9ydCh1cmwsIHRoaXMub3B0aW9ucy50cmFuc3BvcnQsIG5lZ290aWF0ZVJlc3BvbnNlLCB0cmFuc2ZlckZvcm1hdCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAxMTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDExOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy50cmFuc3BvcnQgaW5zdGFuY2VvZiBMb25nUG9sbGluZ1RyYW5zcG9ydF8xLkxvbmdQb2xsaW5nVHJhbnNwb3J0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZlYXR1cmVzLmluaGVyZW50S2VlcEFsaXZlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jb25uZWN0aW9uU3RhdGUgPT09IFwiQ29ubmVjdGluZyBcIiAvKiBDb25uZWN0aW5nICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFbnN1cmUgdGhlIGNvbm5lY3Rpb24gdHJhbnNpdGlvbnMgdG8gdGhlIGNvbm5lY3RlZCBzdGF0ZSBwcmlvciB0byBjb21wbGV0aW5nIHRoaXMuc3RhcnRJbnRlcm5hbFByb21pc2UuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzdGFydCgpIHdpbGwgaGFuZGxlIHRoZSBjYXNlIHdoZW4gc3RvcCB3YXMgY2FsbGVkIGFuZCBzdGFydEludGVybmFsIGV4aXRzIHN0aWxsIGluIHRoZSBkaXNjb25uZWN0aW5nIHN0YXRlLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5EZWJ1ZywgXCJUaGUgSHR0cENvbm5lY3Rpb24gY29ubmVjdGVkIHN1Y2Nlc3NmdWxseS5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb25TdGF0ZSA9IFwiQ29ubmVjdGVkXCIgLyogQ29ubmVjdGVkICovO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDEzXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDEyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlXzQgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuRXJyb3IsIFwiRmFpbGVkIHRvIHN0YXJ0IHRoZSBjb25uZWN0aW9uOiBcIiArIGVfNCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvblN0YXRlID0gXCJEaXNjb25uZWN0ZWRcIiAvKiBEaXNjb25uZWN0ZWQgKi87XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgUHJvbWlzZS5yZWplY3QoZV80KV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxMzogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBIdHRwQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0TmVnb3RpYXRpb25SZXNwb25zZSA9IGZ1bmN0aW9uICh1cmwpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBfYSwgaGVhZGVycywgdG9rZW4sIG5lZ290aWF0ZVVybCwgcmVzcG9uc2UsIG5lZ290aWF0ZVJlc3BvbnNlLCBlXzU7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5hY2Nlc3NUb2tlbkZhY3RvcnkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmFjY2Vzc1Rva2VuRmFjdG9yeSgpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuID0gX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodG9rZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnMgPSAoX2EgPSB7fSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYVtcIkF1dGhvcml6YXRpb25cIl0gPSBcIkJlYXJlciBcIiArIHRva2VuLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDI7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZWdvdGlhdGVVcmwgPSB0aGlzLnJlc29sdmVOZWdvdGlhdGVVcmwodXJsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5EZWJ1ZywgXCJTZW5kaW5nIG5lZ290aWF0aW9uIHJlcXVlc3Q6IFwiICsgbmVnb3RpYXRlVXJsICsgXCIuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDM7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYi50cnlzLnB1c2goWzMsIDUsICwgNl0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmh0dHBDbGllbnQucG9zdChuZWdvdGlhdGVVcmwsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1c0NvZGUgIT09IDIwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIlVuZXhwZWN0ZWQgc3RhdHVzIGNvZGUgcmV0dXJuZWQgZnJvbSBuZWdvdGlhdGUgXCIgKyByZXNwb25zZS5zdGF0dXNDb2RlKSldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5lZ290aWF0ZVJlc3BvbnNlID0gSlNPTi5wYXJzZShyZXNwb25zZS5jb250ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFuZWdvdGlhdGVSZXNwb25zZS5uZWdvdGlhdGVWZXJzaW9uIHx8IG5lZ290aWF0ZVJlc3BvbnNlLm5lZ290aWF0ZVZlcnNpb24gPCAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOZWdvdGlhdGUgdmVyc2lvbiAwIGRvZXNuJ3QgdXNlIGNvbm5lY3Rpb25Ub2tlblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU28gd2Ugc2V0IGl0IGVxdWFsIHRvIGNvbm5lY3Rpb25JZCBzbyBhbGwgb3VyIGxvZ2ljIGNhbiB1c2UgY29ubmVjdGlvblRva2VuIHdpdGhvdXQgYmVpbmcgYXdhcmUgb2YgdGhlIG5lZ290aWF0ZSB2ZXJzaW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZWdvdGlhdGVSZXNwb25zZS5jb25uZWN0aW9uVG9rZW4gPSBuZWdvdGlhdGVSZXNwb25zZS5jb25uZWN0aW9uSWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIG5lZ290aWF0ZVJlc3BvbnNlXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVfNSA9IF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5FcnJvciwgXCJGYWlsZWQgdG8gY29tcGxldGUgbmVnb3RpYXRpb24gd2l0aCB0aGUgc2VydmVyOiBcIiArIGVfNSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBQcm9taXNlLnJlamVjdChlXzUpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6IHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgSHR0cENvbm5lY3Rpb24ucHJvdG90eXBlLmNyZWF0ZUNvbm5lY3RVcmwgPSBmdW5jdGlvbiAodXJsLCBjb25uZWN0aW9uVG9rZW4pIHtcclxuICAgICAgICBpZiAoIWNvbm5lY3Rpb25Ub2tlbikge1xyXG4gICAgICAgICAgICByZXR1cm4gdXJsO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdXJsICsgKHVybC5pbmRleE9mKFwiP1wiKSA9PT0gLTEgPyBcIj9cIiA6IFwiJlwiKSArIChcImlkPVwiICsgY29ubmVjdGlvblRva2VuKTtcclxuICAgIH07XHJcbiAgICBIdHRwQ29ubmVjdGlvbi5wcm90b3R5cGUuY3JlYXRlVHJhbnNwb3J0ID0gZnVuY3Rpb24gKHVybCwgcmVxdWVzdGVkVHJhbnNwb3J0LCBuZWdvdGlhdGVSZXNwb25zZSwgcmVxdWVzdGVkVHJhbnNmZXJGb3JtYXQpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBjb25uZWN0VXJsLCB0cmFuc3BvcnRFeGNlcHRpb25zLCB0cmFuc3BvcnRzLCBuZWdvdGlhdGUsIF9pLCB0cmFuc3BvcnRzXzEsIGVuZHBvaW50LCB0cmFuc3BvcnRPckVycm9yLCBleF8xLCBleF8yLCBtZXNzYWdlO1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0VXJsID0gdGhpcy5jcmVhdGVDb25uZWN0VXJsKHVybCwgbmVnb3RpYXRlUmVzcG9uc2UuY29ubmVjdGlvblRva2VuKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzSVRyYW5zcG9ydChyZXF1ZXN0ZWRUcmFuc3BvcnQpKSByZXR1cm4gWzMgLypicmVhayovLCAyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5EZWJ1ZywgXCJDb25uZWN0aW9uIHdhcyBwcm92aWRlZCBhbiBpbnN0YW5jZSBvZiBJVHJhbnNwb3J0LCB1c2luZyB0aGF0IGRpcmVjdGx5LlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFuc3BvcnQgPSByZXF1ZXN0ZWRUcmFuc3BvcnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuc3RhcnRUcmFuc3BvcnQoY29ubmVjdFVybCwgcmVxdWVzdGVkVHJhbnNmZXJGb3JtYXQpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uSWQgPSBuZWdvdGlhdGVSZXNwb25zZS5jb25uZWN0aW9uSWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zcG9ydEV4Y2VwdGlvbnMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNwb3J0cyA9IG5lZ290aWF0ZVJlc3BvbnNlLmF2YWlsYWJsZVRyYW5zcG9ydHMgfHwgW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5lZ290aWF0ZSA9IG5lZ290aWF0ZVJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfaSA9IDAsIHRyYW5zcG9ydHNfMSA9IHRyYW5zcG9ydHM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKF9pIDwgdHJhbnNwb3J0c18xLmxlbmd0aCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDEzXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kcG9pbnQgPSB0cmFuc3BvcnRzXzFbX2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc3BvcnRPckVycm9yID0gdGhpcy5yZXNvbHZlVHJhbnNwb3J0T3JFcnJvcihlbmRwb2ludCwgcmVxdWVzdGVkVHJhbnNwb3J0LCByZXF1ZXN0ZWRUcmFuc2ZlckZvcm1hdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHRyYW5zcG9ydE9yRXJyb3IgaW5zdGFuY2VvZiBFcnJvcikpIHJldHVybiBbMyAvKmJyZWFrKi8sIDRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTdG9yZSB0aGUgZXJyb3IgYW5kIGNvbnRpbnVlLCB3ZSBkb24ndCB3YW50IHRvIGNhdXNlIGEgcmUtbmVnb3RpYXRlIGluIHRoZXNlIGNhc2VzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zcG9ydEV4Y2VwdGlvbnMucHVzaChlbmRwb2ludC50cmFuc3BvcnQgKyBcIiBmYWlsZWQ6IFwiICsgdHJhbnNwb3J0T3JFcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDEyXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc0lUcmFuc3BvcnQodHJhbnNwb3J0T3JFcnJvcikpIHJldHVybiBbMyAvKmJyZWFrKi8sIDEyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFuc3BvcnQgPSB0cmFuc3BvcnRPckVycm9yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISFuZWdvdGlhdGUpIHJldHVybiBbMyAvKmJyZWFrKi8sIDldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDU7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS50cnlzLnB1c2goWzUsIDcsICwgOF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmdldE5lZ290aWF0aW9uUmVzcG9uc2UodXJsKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZWdvdGlhdGUgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDhdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhfMSA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIFByb21pc2UucmVqZWN0KGV4XzEpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDg6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3RVcmwgPSB0aGlzLmNyZWF0ZUNvbm5lY3RVcmwodXJsLCBuZWdvdGlhdGUuY29ubmVjdGlvblRva2VuKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSA5O1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgOTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EudHJ5cy5wdXNoKFs5LCAxMSwgLCAxMl0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnN0YXJ0VHJhbnNwb3J0KGNvbm5lY3RVcmwsIHJlcXVlc3RlZFRyYW5zZmVyRm9ybWF0KV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb25JZCA9IG5lZ290aWF0ZS5jb25uZWN0aW9uSWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDExOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBleF8yID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkVycm9yLCBcIkZhaWxlZCB0byBzdGFydCB0aGUgdHJhbnNwb3J0ICdcIiArIGVuZHBvaW50LnRyYW5zcG9ydCArIFwiJzogXCIgKyBleF8yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmVnb3RpYXRlID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc3BvcnRFeGNlcHRpb25zLnB1c2goZW5kcG9pbnQudHJhbnNwb3J0ICsgXCIgZmFpbGVkOiBcIiArIGV4XzIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jb25uZWN0aW9uU3RhdGUgIT09IFwiQ29ubmVjdGluZyBcIiAvKiBDb25uZWN0aW5nICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gXCJGYWlsZWQgdG8gc2VsZWN0IHRyYW5zcG9ydCBiZWZvcmUgc3RvcCgpIHdhcyBjYWxsZWQuXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkRlYnVnLCBtZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IobWVzc2FnZSkpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCAxMl07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2krKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgM107XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxMzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRyYW5zcG9ydEV4Y2VwdGlvbnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIlVuYWJsZSB0byBjb25uZWN0IHRvIHRoZSBzZXJ2ZXIgd2l0aCBhbnkgb2YgdGhlIGF2YWlsYWJsZSB0cmFuc3BvcnRzLiBcIiArIHRyYW5zcG9ydEV4Y2VwdGlvbnMuam9pbihcIiBcIikpKV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIk5vbmUgb2YgdGhlIHRyYW5zcG9ydHMgc3VwcG9ydGVkIGJ5IHRoZSBjbGllbnQgYXJlIHN1cHBvcnRlZCBieSB0aGUgc2VydmVyLlwiKSldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBIdHRwQ29ubmVjdGlvbi5wcm90b3R5cGUuY29uc3RydWN0VHJhbnNwb3J0ID0gZnVuY3Rpb24gKHRyYW5zcG9ydCkge1xyXG4gICAgICAgIHN3aXRjaCAodHJhbnNwb3J0KSB7XHJcbiAgICAgICAgICAgIGNhc2UgSVRyYW5zcG9ydF8xLkh0dHBUcmFuc3BvcnRUeXBlLldlYlNvY2tldHM6XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5XZWJTb2NrZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCInV2ViU29ja2V0JyBpcyBub3Qgc3VwcG9ydGVkIGluIHlvdXIgZW52aXJvbm1lbnQuXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBXZWJTb2NrZXRUcmFuc3BvcnRfMS5XZWJTb2NrZXRUcmFuc3BvcnQodGhpcy5odHRwQ2xpZW50LCB0aGlzLmFjY2Vzc1Rva2VuRmFjdG9yeSwgdGhpcy5sb2dnZXIsIHRoaXMub3B0aW9ucy5sb2dNZXNzYWdlQ29udGVudCB8fCBmYWxzZSwgdGhpcy5vcHRpb25zLldlYlNvY2tldCk7XHJcbiAgICAgICAgICAgIGNhc2UgSVRyYW5zcG9ydF8xLkh0dHBUcmFuc3BvcnRUeXBlLlNlcnZlclNlbnRFdmVudHM6XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5FdmVudFNvdXJjZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIidFdmVudFNvdXJjZScgaXMgbm90IHN1cHBvcnRlZCBpbiB5b3VyIGVudmlyb25tZW50LlwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgU2VydmVyU2VudEV2ZW50c1RyYW5zcG9ydF8xLlNlcnZlclNlbnRFdmVudHNUcmFuc3BvcnQodGhpcy5odHRwQ2xpZW50LCB0aGlzLmFjY2Vzc1Rva2VuRmFjdG9yeSwgdGhpcy5sb2dnZXIsIHRoaXMub3B0aW9ucy5sb2dNZXNzYWdlQ29udGVudCB8fCBmYWxzZSwgdGhpcy5vcHRpb25zLkV2ZW50U291cmNlKTtcclxuICAgICAgICAgICAgY2FzZSBJVHJhbnNwb3J0XzEuSHR0cFRyYW5zcG9ydFR5cGUuTG9uZ1BvbGxpbmc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IExvbmdQb2xsaW5nVHJhbnNwb3J0XzEuTG9uZ1BvbGxpbmdUcmFuc3BvcnQodGhpcy5odHRwQ2xpZW50LCB0aGlzLmFjY2Vzc1Rva2VuRmFjdG9yeSwgdGhpcy5sb2dnZXIsIHRoaXMub3B0aW9ucy5sb2dNZXNzYWdlQ29udGVudCB8fCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIHRyYW5zcG9ydDogXCIgKyB0cmFuc3BvcnQgKyBcIi5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEh0dHBDb25uZWN0aW9uLnByb3RvdHlwZS5zdGFydFRyYW5zcG9ydCA9IGZ1bmN0aW9uICh1cmwsIHRyYW5zZmVyRm9ybWF0KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLnRyYW5zcG9ydC5vbnJlY2VpdmUgPSB0aGlzLm9ucmVjZWl2ZTtcclxuICAgICAgICB0aGlzLnRyYW5zcG9ydC5vbmNsb3NlID0gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIF90aGlzLnN0b3BDb25uZWN0aW9uKGUpOyB9O1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRyYW5zcG9ydC5jb25uZWN0KHVybCwgdHJhbnNmZXJGb3JtYXQpO1xyXG4gICAgfTtcclxuICAgIEh0dHBDb25uZWN0aW9uLnByb3RvdHlwZS5yZXNvbHZlVHJhbnNwb3J0T3JFcnJvciA9IGZ1bmN0aW9uIChlbmRwb2ludCwgcmVxdWVzdGVkVHJhbnNwb3J0LCByZXF1ZXN0ZWRUcmFuc2ZlckZvcm1hdCkge1xyXG4gICAgICAgIHZhciB0cmFuc3BvcnQgPSBJVHJhbnNwb3J0XzEuSHR0cFRyYW5zcG9ydFR5cGVbZW5kcG9pbnQudHJhbnNwb3J0XTtcclxuICAgICAgICBpZiAodHJhbnNwb3J0ID09PSBudWxsIHx8IHRyYW5zcG9ydCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuRGVidWcsIFwiU2tpcHBpbmcgdHJhbnNwb3J0ICdcIiArIGVuZHBvaW50LnRyYW5zcG9ydCArIFwiJyBiZWNhdXNlIGl0IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhpcyBjbGllbnQuXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKFwiU2tpcHBpbmcgdHJhbnNwb3J0ICdcIiArIGVuZHBvaW50LnRyYW5zcG9ydCArIFwiJyBiZWNhdXNlIGl0IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhpcyBjbGllbnQuXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHRyYW5zcG9ydE1hdGNoZXMocmVxdWVzdGVkVHJhbnNwb3J0LCB0cmFuc3BvcnQpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdHJhbnNmZXJGb3JtYXRzID0gZW5kcG9pbnQudHJhbnNmZXJGb3JtYXRzLm1hcChmdW5jdGlvbiAocykgeyByZXR1cm4gSVRyYW5zcG9ydF8xLlRyYW5zZmVyRm9ybWF0W3NdOyB9KTtcclxuICAgICAgICAgICAgICAgIGlmICh0cmFuc2ZlckZvcm1hdHMuaW5kZXhPZihyZXF1ZXN0ZWRUcmFuc2ZlckZvcm1hdCkgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgodHJhbnNwb3J0ID09PSBJVHJhbnNwb3J0XzEuSHR0cFRyYW5zcG9ydFR5cGUuV2ViU29ja2V0cyAmJiAhdGhpcy5vcHRpb25zLldlYlNvY2tldCkgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgKHRyYW5zcG9ydCA9PT0gSVRyYW5zcG9ydF8xLkh0dHBUcmFuc3BvcnRUeXBlLlNlcnZlclNlbnRFdmVudHMgJiYgIXRoaXMub3B0aW9ucy5FdmVudFNvdXJjZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5EZWJ1ZywgXCJTa2lwcGluZyB0cmFuc3BvcnQgJ1wiICsgSVRyYW5zcG9ydF8xLkh0dHBUcmFuc3BvcnRUeXBlW3RyYW5zcG9ydF0gKyBcIicgYmVjYXVzZSBpdCBpcyBub3Qgc3VwcG9ydGVkIGluIHlvdXIgZW52aXJvbm1lbnQuJ1wiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihcIidcIiArIElUcmFuc3BvcnRfMS5IdHRwVHJhbnNwb3J0VHlwZVt0cmFuc3BvcnRdICsgXCInIGlzIG5vdCBzdXBwb3J0ZWQgaW4geW91ciBlbnZpcm9ubWVudC5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkRlYnVnLCBcIlNlbGVjdGluZyB0cmFuc3BvcnQgJ1wiICsgSVRyYW5zcG9ydF8xLkh0dHBUcmFuc3BvcnRUeXBlW3RyYW5zcG9ydF0gKyBcIicuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0VHJhbnNwb3J0KHRyYW5zcG9ydCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkRlYnVnLCBcIlNraXBwaW5nIHRyYW5zcG9ydCAnXCIgKyBJVHJhbnNwb3J0XzEuSHR0cFRyYW5zcG9ydFR5cGVbdHJhbnNwb3J0XSArIFwiJyBiZWNhdXNlIGl0IGRvZXMgbm90IHN1cHBvcnQgdGhlIHJlcXVlc3RlZCB0cmFuc2ZlciBmb3JtYXQgJ1wiICsgSVRyYW5zcG9ydF8xLlRyYW5zZmVyRm9ybWF0W3JlcXVlc3RlZFRyYW5zZmVyRm9ybWF0XSArIFwiJy5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihcIidcIiArIElUcmFuc3BvcnRfMS5IdHRwVHJhbnNwb3J0VHlwZVt0cmFuc3BvcnRdICsgXCInIGRvZXMgbm90IHN1cHBvcnQgXCIgKyBJVHJhbnNwb3J0XzEuVHJhbnNmZXJGb3JtYXRbcmVxdWVzdGVkVHJhbnNmZXJGb3JtYXRdICsgXCIuXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5EZWJ1ZywgXCJTa2lwcGluZyB0cmFuc3BvcnQgJ1wiICsgSVRyYW5zcG9ydF8xLkh0dHBUcmFuc3BvcnRUeXBlW3RyYW5zcG9ydF0gKyBcIicgYmVjYXVzZSBpdCB3YXMgZGlzYWJsZWQgYnkgdGhlIGNsaWVudC5cIik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKFwiJ1wiICsgSVRyYW5zcG9ydF8xLkh0dHBUcmFuc3BvcnRUeXBlW3RyYW5zcG9ydF0gKyBcIicgaXMgZGlzYWJsZWQgYnkgdGhlIGNsaWVudC5cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgSHR0cENvbm5lY3Rpb24ucHJvdG90eXBlLmlzSVRyYW5zcG9ydCA9IGZ1bmN0aW9uICh0cmFuc3BvcnQpIHtcclxuICAgICAgICByZXR1cm4gdHJhbnNwb3J0ICYmIHR5cGVvZiAodHJhbnNwb3J0KSA9PT0gXCJvYmplY3RcIiAmJiBcImNvbm5lY3RcIiBpbiB0cmFuc3BvcnQ7XHJcbiAgICB9O1xyXG4gICAgSHR0cENvbm5lY3Rpb24ucHJvdG90eXBlLnN0b3BDb25uZWN0aW9uID0gZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5EZWJ1ZywgXCJIdHRwQ29ubmVjdGlvbi5zdG9wQ29ubmVjdGlvbihcIiArIGVycm9yICsgXCIpIGNhbGxlZCB3aGlsZSBpbiBzdGF0ZSBcIiArIHRoaXMuY29ubmVjdGlvblN0YXRlICsgXCIuXCIpO1xyXG4gICAgICAgIHRoaXMudHJhbnNwb3J0ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIC8vIElmIHdlIGhhdmUgYSBzdG9wRXJyb3IsIGl0IHRha2VzIHByZWNlZGVuY2Ugb3ZlciB0aGUgZXJyb3IgZnJvbSB0aGUgdHJhbnNwb3J0XHJcbiAgICAgICAgZXJyb3IgPSB0aGlzLnN0b3BFcnJvciB8fCBlcnJvcjtcclxuICAgICAgICB0aGlzLnN0b3BFcnJvciA9IHVuZGVmaW5lZDtcclxuICAgICAgICBpZiAodGhpcy5jb25uZWN0aW9uU3RhdGUgPT09IFwiRGlzY29ubmVjdGVkXCIgLyogRGlzY29ubmVjdGVkICovKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuRGVidWcsIFwiQ2FsbCB0byBIdHRwQ29ubmVjdGlvbi5zdG9wQ29ubmVjdGlvbihcIiArIGVycm9yICsgXCIpIHdhcyBpZ25vcmVkIGJlY2F1c2UgdGhlIGNvbm5lY3Rpb24gaXMgYWxyZWFkeSBpbiB0aGUgZGlzY29ubmVjdGVkIHN0YXRlLlwiKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5jb25uZWN0aW9uU3RhdGUgPT09IFwiQ29ubmVjdGluZyBcIiAvKiBDb25uZWN0aW5nICovKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuV2FybmluZywgXCJDYWxsIHRvIEh0dHBDb25uZWN0aW9uLnN0b3BDb25uZWN0aW9uKFwiICsgZXJyb3IgKyBcIikgd2FzIGlnbm9yZWQgYmVjYXVzZSB0aGUgY29ubmVjdGlvbiBoYXNuJ3QgeWV0IGxlZnQgdGhlIGluIHRoZSBjb25uZWN0aW5nIHN0YXRlLlwiKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5jb25uZWN0aW9uU3RhdGUgPT09IFwiRGlzY29ubmVjdGluZ1wiIC8qIERpc2Nvbm5lY3RpbmcgKi8pIHtcclxuICAgICAgICAgICAgLy8gQSBjYWxsIHRvIHN0b3AoKSBpbmR1Y2VkIHRoaXMgY2FsbCB0byBzdG9wQ29ubmVjdGlvbiBhbmQgbmVlZHMgdG8gYmUgY29tcGxldGVkLlxyXG4gICAgICAgICAgICAvLyBBbnkgc3RvcCgpIGF3YWl0ZXJzIHdpbGwgYmUgc2NoZWR1bGVkIHRvIGNvbnRpbnVlIGFmdGVyIHRoZSBvbmNsb3NlIGNhbGxiYWNrIGZpcmVzLlxyXG4gICAgICAgICAgICB0aGlzLnN0b3BQcm9taXNlUmVzb2x2ZXIoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuRXJyb3IsIFwiQ29ubmVjdGlvbiBkaXNjb25uZWN0ZWQgd2l0aCBlcnJvciAnXCIgKyBlcnJvciArIFwiJy5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkluZm9ybWF0aW9uLCBcIkNvbm5lY3Rpb24gZGlzY29ubmVjdGVkLlwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uSWQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uU3RhdGUgPSBcIkRpc2Nvbm5lY3RlZFwiIC8qIERpc2Nvbm5lY3RlZCAqLztcclxuICAgICAgICBpZiAodGhpcy5vbmNsb3NlICYmIHRoaXMuY29ubmVjdGlvblN0YXJ0ZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uU3RhcnRlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbmNsb3NlKGVycm9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5FcnJvciwgXCJIdHRwQ29ubmVjdGlvbi5vbmNsb3NlKFwiICsgZXJyb3IgKyBcIikgdGhyZXcgZXJyb3IgJ1wiICsgZSArIFwiJy5cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgSHR0cENvbm5lY3Rpb24ucHJvdG90eXBlLnJlc29sdmVVcmwgPSBmdW5jdGlvbiAodXJsKSB7XHJcbiAgICAgICAgLy8gc3RhcnRzV2l0aCBpcyBub3Qgc3VwcG9ydGVkIGluIElFXHJcbiAgICAgICAgaWYgKHVybC5sYXN0SW5kZXhPZihcImh0dHBzOi8vXCIsIDApID09PSAwIHx8IHVybC5sYXN0SW5kZXhPZihcImh0dHA6Ly9cIiwgMCkgPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIHVybDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFVdGlsc18xLlBsYXRmb3JtLmlzQnJvd3NlciB8fCAhd2luZG93LmRvY3VtZW50KSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCByZXNvbHZlICdcIiArIHVybCArIFwiJy5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFNldHRpbmcgdGhlIHVybCB0byB0aGUgaHJlZiBwcm9wZXJ5IG9mIGFuIGFuY2hvciB0YWcgaGFuZGxlcyBub3JtYWxpemF0aW9uXHJcbiAgICAgICAgLy8gZm9yIHVzLiBUaGVyZSBhcmUgMyBtYWluIGNhc2VzLlxyXG4gICAgICAgIC8vIDEuIFJlbGF0aXZlIHBhdGggbm9ybWFsaXphdGlvbiBlLmcgXCJiXCIgLT4gXCJodHRwOi8vbG9jYWxob3N0OjUwMDAvYS9iXCJcclxuICAgICAgICAvLyAyLiBBYnNvbHV0ZSBwYXRoIG5vcm1hbGl6YXRpb24gZS5nIFwiL2EvYlwiIC0+IFwiaHR0cDovL2xvY2FsaG9zdDo1MDAwL2EvYlwiXHJcbiAgICAgICAgLy8gMy4gTmV0d29ya3BhdGggcmVmZXJlbmNlIG5vcm1hbGl6YXRpb24gZS5nIFwiLy9sb2NhbGhvc3Q6NTAwMC9hL2JcIiAtPiBcImh0dHA6Ly9sb2NhbGhvc3Q6NTAwMC9hL2JcIlxyXG4gICAgICAgIHZhciBhVGFnID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO1xyXG4gICAgICAgIGFUYWcuaHJlZiA9IHVybDtcclxuICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkluZm9ybWF0aW9uLCBcIk5vcm1hbGl6aW5nICdcIiArIHVybCArIFwiJyB0byAnXCIgKyBhVGFnLmhyZWYgKyBcIicuXCIpO1xyXG4gICAgICAgIHJldHVybiBhVGFnLmhyZWY7XHJcbiAgICB9O1xyXG4gICAgSHR0cENvbm5lY3Rpb24ucHJvdG90eXBlLnJlc29sdmVOZWdvdGlhdGVVcmwgPSBmdW5jdGlvbiAodXJsKSB7XHJcbiAgICAgICAgdmFyIGluZGV4ID0gdXJsLmluZGV4T2YoXCI/XCIpO1xyXG4gICAgICAgIHZhciBuZWdvdGlhdGVVcmwgPSB1cmwuc3Vic3RyaW5nKDAsIGluZGV4ID09PSAtMSA/IHVybC5sZW5ndGggOiBpbmRleCk7XHJcbiAgICAgICAgaWYgKG5lZ290aWF0ZVVybFtuZWdvdGlhdGVVcmwubGVuZ3RoIC0gMV0gIT09IFwiL1wiKSB7XHJcbiAgICAgICAgICAgIG5lZ290aWF0ZVVybCArPSBcIi9cIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgbmVnb3RpYXRlVXJsICs9IFwibmVnb3RpYXRlXCI7XHJcbiAgICAgICAgbmVnb3RpYXRlVXJsICs9IGluZGV4ID09PSAtMSA/IFwiXCIgOiB1cmwuc3Vic3RyaW5nKGluZGV4KTtcclxuICAgICAgICBpZiAobmVnb3RpYXRlVXJsLmluZGV4T2YoXCJuZWdvdGlhdGVWZXJzaW9uXCIpID09PSAtMSkge1xyXG4gICAgICAgICAgICBuZWdvdGlhdGVVcmwgKz0gaW5kZXggPT09IC0xID8gXCI/XCIgOiBcIiZcIjtcclxuICAgICAgICAgICAgbmVnb3RpYXRlVXJsICs9IFwibmVnb3RpYXRlVmVyc2lvbj1cIiArIHRoaXMubmVnb3RpYXRlVmVyc2lvbjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5lZ290aWF0ZVVybDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gSHR0cENvbm5lY3Rpb247XHJcbn0oKSk7XHJcbmV4cG9ydHMuSHR0cENvbm5lY3Rpb24gPSBIdHRwQ29ubmVjdGlvbjtcclxuZnVuY3Rpb24gdHJhbnNwb3J0TWF0Y2hlcyhyZXF1ZXN0ZWRUcmFuc3BvcnQsIGFjdHVhbFRyYW5zcG9ydCkge1xyXG4gICAgcmV0dXJuICFyZXF1ZXN0ZWRUcmFuc3BvcnQgfHwgKChhY3R1YWxUcmFuc3BvcnQgJiByZXF1ZXN0ZWRUcmFuc3BvcnQpICE9PSAwKTtcclxufVxyXG4vKiogQHByaXZhdGUgKi9cclxudmFyIFRyYW5zcG9ydFNlbmRRdWV1ZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFRyYW5zcG9ydFNlbmRRdWV1ZSh0cmFuc3BvcnQpIHtcclxuICAgICAgICB0aGlzLnRyYW5zcG9ydCA9IHRyYW5zcG9ydDtcclxuICAgICAgICB0aGlzLmJ1ZmZlciA9IFtdO1xyXG4gICAgICAgIHRoaXMuZXhlY3V0aW5nID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnNlbmRCdWZmZXJlZERhdGEgPSBuZXcgUHJvbWlzZVNvdXJjZSgpO1xyXG4gICAgICAgIHRoaXMudHJhbnNwb3J0UmVzdWx0ID0gbmV3IFByb21pc2VTb3VyY2UoKTtcclxuICAgICAgICB0aGlzLnNlbmRMb29wUHJvbWlzZSA9IHRoaXMuc2VuZExvb3AoKTtcclxuICAgIH1cclxuICAgIFRyYW5zcG9ydFNlbmRRdWV1ZS5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgdGhpcy5idWZmZXJEYXRhKGRhdGEpO1xyXG4gICAgICAgIGlmICghdGhpcy50cmFuc3BvcnRSZXN1bHQpIHtcclxuICAgICAgICAgICAgdGhpcy50cmFuc3BvcnRSZXN1bHQgPSBuZXcgUHJvbWlzZVNvdXJjZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy50cmFuc3BvcnRSZXN1bHQucHJvbWlzZTtcclxuICAgIH07XHJcbiAgICBUcmFuc3BvcnRTZW5kUXVldWUucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5leGVjdXRpbmcgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnNlbmRCdWZmZXJlZERhdGEucmVzb2x2ZSgpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlbmRMb29wUHJvbWlzZTtcclxuICAgIH07XHJcbiAgICBUcmFuc3BvcnRTZW5kUXVldWUucHJvdG90eXBlLmJ1ZmZlckRhdGEgPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgIGlmICh0aGlzLmJ1ZmZlci5sZW5ndGggJiYgdHlwZW9mICh0aGlzLmJ1ZmZlclswXSkgIT09IHR5cGVvZiAoZGF0YSkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgZGF0YSB0byBiZSBvZiB0eXBlIFwiICsgdHlwZW9mICh0aGlzLmJ1ZmZlcikgKyBcIiBidXQgd2FzIG9mIHR5cGUgXCIgKyB0eXBlb2YgKGRhdGEpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5idWZmZXIucHVzaChkYXRhKTtcclxuICAgICAgICB0aGlzLnNlbmRCdWZmZXJlZERhdGEucmVzb2x2ZSgpO1xyXG4gICAgfTtcclxuICAgIFRyYW5zcG9ydFNlbmRRdWV1ZS5wcm90b3R5cGUuc2VuZExvb3AgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgdHJhbnNwb3J0UmVzdWx0LCBkYXRhLCBlcnJvcl8xO1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRydWUpIHJldHVybiBbMyAvKmJyZWFrKi8sIDZdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnNlbmRCdWZmZXJlZERhdGEucHJvbWlzZV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5leGVjdXRpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnRyYW5zcG9ydFJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0UmVzdWx0LnJlamVjdChcIkNvbm5lY3Rpb24gc3RvcHBlZC5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA2XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbmRCdWZmZXJlZERhdGEgPSBuZXcgUHJvbWlzZVNvdXJjZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc3BvcnRSZXN1bHQgPSB0aGlzLnRyYW5zcG9ydFJlc3VsdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFuc3BvcnRSZXN1bHQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSB0eXBlb2YgKHRoaXMuYnVmZmVyWzBdKSA9PT0gXCJzdHJpbmdcIiA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlci5qb2luKFwiXCIpIDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRyYW5zcG9ydFNlbmRRdWV1ZS5jb25jYXRCdWZmZXJzKHRoaXMuYnVmZmVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5idWZmZXIubGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAyO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EudHJ5cy5wdXNoKFsyLCA0LCAsIDVdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy50cmFuc3BvcnQuc2VuZChkYXRhKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zcG9ydFJlc3VsdC5yZXNvbHZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDVdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JfMSA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNwb3J0UmVzdWx0LnJlamVjdChlcnJvcl8xKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OiByZXR1cm4gWzMgLypicmVhayovLCAwXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6IHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgVHJhbnNwb3J0U2VuZFF1ZXVlLmNvbmNhdEJ1ZmZlcnMgPSBmdW5jdGlvbiAoYXJyYXlCdWZmZXJzKSB7XHJcbiAgICAgICAgdmFyIHRvdGFsTGVuZ3RoID0gYXJyYXlCdWZmZXJzLm1hcChmdW5jdGlvbiAoYikgeyByZXR1cm4gYi5ieXRlTGVuZ3RoOyB9KS5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEgKyBiOyB9KTtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gbmV3IFVpbnQ4QXJyYXkodG90YWxMZW5ndGgpO1xyXG4gICAgICAgIHZhciBvZmZzZXQgPSAwO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgYXJyYXlCdWZmZXJzXzEgPSBhcnJheUJ1ZmZlcnM7IF9pIDwgYXJyYXlCdWZmZXJzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBpdGVtID0gYXJyYXlCdWZmZXJzXzFbX2ldO1xyXG4gICAgICAgICAgICByZXN1bHQuc2V0KG5ldyBVaW50OEFycmF5KGl0ZW0pLCBvZmZzZXQpO1xyXG4gICAgICAgICAgICBvZmZzZXQgKz0gaXRlbS5ieXRlTGVuZ3RoO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfTtcclxuICAgIHJldHVybiBUcmFuc3BvcnRTZW5kUXVldWU7XHJcbn0oKSk7XHJcbmV4cG9ydHMuVHJhbnNwb3J0U2VuZFF1ZXVlID0gVHJhbnNwb3J0U2VuZFF1ZXVlO1xyXG52YXIgUHJvbWlzZVNvdXJjZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFByb21pc2VTb3VyY2UoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgIHZhciBfYTtcclxuICAgICAgICAgICAgcmV0dXJuIF9hID0gW3Jlc29sdmUsIHJlamVjdF0sIF90aGlzLnJlc29sdmVyID0gX2FbMF0sIF90aGlzLnJlamVjdGVyID0gX2FbMV0sIF9hO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgUHJvbWlzZVNvdXJjZS5wcm90b3R5cGUucmVzb2x2ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLnJlc29sdmVyKCk7XHJcbiAgICB9O1xyXG4gICAgUHJvbWlzZVNvdXJjZS5wcm90b3R5cGUucmVqZWN0ID0gZnVuY3Rpb24gKHJlYXNvbikge1xyXG4gICAgICAgIHRoaXMucmVqZWN0ZXIocmVhc29uKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gUHJvbWlzZVNvdXJjZTtcclxufSgpKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SHR0cENvbm5lY3Rpb24uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8vIENvcHlyaWdodCAoYykgLk5FVCBGb3VuZGF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufTtcclxudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBIYW5kc2hha2VQcm90b2NvbF8xID0gcmVxdWlyZShcIi4vSGFuZHNoYWtlUHJvdG9jb2xcIik7XHJcbnZhciBJSHViUHJvdG9jb2xfMSA9IHJlcXVpcmUoXCIuL0lIdWJQcm90b2NvbFwiKTtcclxudmFyIElMb2dnZXJfMSA9IHJlcXVpcmUoXCIuL0lMb2dnZXJcIik7XHJcbnZhciBTdWJqZWN0XzEgPSByZXF1aXJlKFwiLi9TdWJqZWN0XCIpO1xyXG52YXIgVXRpbHNfMSA9IHJlcXVpcmUoXCIuL1V0aWxzXCIpO1xyXG52YXIgREVGQVVMVF9USU1FT1VUX0lOX01TID0gMzAgKiAxMDAwO1xyXG52YXIgREVGQVVMVF9QSU5HX0lOVEVSVkFMX0lOX01TID0gMTUgKiAxMDAwO1xyXG4vKiogRGVzY3JpYmVzIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSB7QGxpbmsgSHViQ29ubmVjdGlvbn0gdG8gdGhlIHNlcnZlci4gKi9cclxudmFyIEh1YkNvbm5lY3Rpb25TdGF0ZTtcclxuKGZ1bmN0aW9uIChIdWJDb25uZWN0aW9uU3RhdGUpIHtcclxuICAgIC8qKiBUaGUgaHViIGNvbm5lY3Rpb24gaXMgZGlzY29ubmVjdGVkLiAqL1xyXG4gICAgSHViQ29ubmVjdGlvblN0YXRlW1wiRGlzY29ubmVjdGVkXCJdID0gXCJEaXNjb25uZWN0ZWRcIjtcclxuICAgIC8qKiBUaGUgaHViIGNvbm5lY3Rpb24gaXMgY29ubmVjdGluZy4gKi9cclxuICAgIEh1YkNvbm5lY3Rpb25TdGF0ZVtcIkNvbm5lY3RpbmdcIl0gPSBcIkNvbm5lY3RpbmdcIjtcclxuICAgIC8qKiBUaGUgaHViIGNvbm5lY3Rpb24gaXMgY29ubmVjdGVkLiAqL1xyXG4gICAgSHViQ29ubmVjdGlvblN0YXRlW1wiQ29ubmVjdGVkXCJdID0gXCJDb25uZWN0ZWRcIjtcclxuICAgIC8qKiBUaGUgaHViIGNvbm5lY3Rpb24gaXMgZGlzY29ubmVjdGluZy4gKi9cclxuICAgIEh1YkNvbm5lY3Rpb25TdGF0ZVtcIkRpc2Nvbm5lY3RpbmdcIl0gPSBcIkRpc2Nvbm5lY3RpbmdcIjtcclxuICAgIC8qKiBUaGUgaHViIGNvbm5lY3Rpb24gaXMgcmVjb25uZWN0aW5nLiAqL1xyXG4gICAgSHViQ29ubmVjdGlvblN0YXRlW1wiUmVjb25uZWN0aW5nXCJdID0gXCJSZWNvbm5lY3RpbmdcIjtcclxufSkoSHViQ29ubmVjdGlvblN0YXRlID0gZXhwb3J0cy5IdWJDb25uZWN0aW9uU3RhdGUgfHwgKGV4cG9ydHMuSHViQ29ubmVjdGlvblN0YXRlID0ge30pKTtcclxuLyoqIFJlcHJlc2VudHMgYSBjb25uZWN0aW9uIHRvIGEgU2lnbmFsUiBIdWIuICovXHJcbnZhciBIdWJDb25uZWN0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gSHViQ29ubmVjdGlvbihjb25uZWN0aW9uLCBsb2dnZXIsIHByb3RvY29sLCByZWNvbm5lY3RQb2xpY3kpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIFV0aWxzXzEuQXJnLmlzUmVxdWlyZWQoY29ubmVjdGlvbiwgXCJjb25uZWN0aW9uXCIpO1xyXG4gICAgICAgIFV0aWxzXzEuQXJnLmlzUmVxdWlyZWQobG9nZ2VyLCBcImxvZ2dlclwiKTtcclxuICAgICAgICBVdGlsc18xLkFyZy5pc1JlcXVpcmVkKHByb3RvY29sLCBcInByb3RvY29sXCIpO1xyXG4gICAgICAgIHRoaXMuc2VydmVyVGltZW91dEluTWlsbGlzZWNvbmRzID0gREVGQVVMVF9USU1FT1VUX0lOX01TO1xyXG4gICAgICAgIHRoaXMua2VlcEFsaXZlSW50ZXJ2YWxJbk1pbGxpc2Vjb25kcyA9IERFRkFVTFRfUElOR19JTlRFUlZBTF9JTl9NUztcclxuICAgICAgICB0aGlzLmxvZ2dlciA9IGxvZ2dlcjtcclxuICAgICAgICB0aGlzLnByb3RvY29sID0gcHJvdG9jb2w7XHJcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uID0gY29ubmVjdGlvbjtcclxuICAgICAgICB0aGlzLnJlY29ubmVjdFBvbGljeSA9IHJlY29ubmVjdFBvbGljeTtcclxuICAgICAgICB0aGlzLmhhbmRzaGFrZVByb3RvY29sID0gbmV3IEhhbmRzaGFrZVByb3RvY29sXzEuSGFuZHNoYWtlUHJvdG9jb2woKTtcclxuICAgICAgICB0aGlzLmNvbm5lY3Rpb24ub25yZWNlaXZlID0gZnVuY3Rpb24gKGRhdGEpIHsgcmV0dXJuIF90aGlzLnByb2Nlc3NJbmNvbWluZ0RhdGEoZGF0YSk7IH07XHJcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uLm9uY2xvc2UgPSBmdW5jdGlvbiAoZXJyb3IpIHsgcmV0dXJuIF90aGlzLmNvbm5lY3Rpb25DbG9zZWQoZXJyb3IpOyB9O1xyXG4gICAgICAgIHRoaXMuY2FsbGJhY2tzID0ge307XHJcbiAgICAgICAgdGhpcy5tZXRob2RzID0ge307XHJcbiAgICAgICAgdGhpcy5jbG9zZWRDYWxsYmFja3MgPSBbXTtcclxuICAgICAgICB0aGlzLnJlY29ubmVjdGluZ0NhbGxiYWNrcyA9IFtdO1xyXG4gICAgICAgIHRoaXMucmVjb25uZWN0ZWRDYWxsYmFja3MgPSBbXTtcclxuICAgICAgICB0aGlzLmludm9jYXRpb25JZCA9IDA7XHJcbiAgICAgICAgdGhpcy5yZWNlaXZlZEhhbmRzaGFrZVJlc3BvbnNlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uU3RhdGUgPSBIdWJDb25uZWN0aW9uU3RhdGUuRGlzY29ubmVjdGVkO1xyXG4gICAgICAgIHRoaXMuY29ubmVjdGlvblN0YXJ0ZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmNhY2hlZFBpbmdNZXNzYWdlID0gdGhpcy5wcm90b2NvbC53cml0ZU1lc3NhZ2UoeyB0eXBlOiBJSHViUHJvdG9jb2xfMS5NZXNzYWdlVHlwZS5QaW5nIH0pO1xyXG4gICAgfVxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgLy8gVXNpbmcgYSBwdWJsaWMgc3RhdGljIGZhY3RvcnkgbWV0aG9kIG1lYW5zIHdlIGNhbiBoYXZlIGEgcHJpdmF0ZSBjb25zdHJ1Y3RvciBhbmQgYW4gX2ludGVybmFsX1xyXG4gICAgLy8gY3JlYXRlIG1ldGhvZCB0aGF0IGNhbiBiZSB1c2VkIGJ5IEh1YkNvbm5lY3Rpb25CdWlsZGVyLiBBbiBcImludGVybmFsXCIgY29uc3RydWN0b3Igd291bGQganVzdFxyXG4gICAgLy8gYmUgc3RyaXBwZWQgYXdheSBhbmQgdGhlICcuZC50cycgZmlsZSB3b3VsZCBoYXZlIG5vIGNvbnN0cnVjdG9yLCB3aGljaCBpcyBpbnRlcnByZXRlZCBhcyBhXHJcbiAgICAvLyBwdWJsaWMgcGFyYW1ldGVyLWxlc3MgY29uc3RydWN0b3IuXHJcbiAgICBIdWJDb25uZWN0aW9uLmNyZWF0ZSA9IGZ1bmN0aW9uIChjb25uZWN0aW9uLCBsb2dnZXIsIHByb3RvY29sLCByZWNvbm5lY3RQb2xpY3kpIHtcclxuICAgICAgICByZXR1cm4gbmV3IEh1YkNvbm5lY3Rpb24oY29ubmVjdGlvbiwgbG9nZ2VyLCBwcm90b2NvbCwgcmVjb25uZWN0UG9saWN5KTtcclxuICAgIH07XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoSHViQ29ubmVjdGlvbi5wcm90b3R5cGUsIFwic3RhdGVcIiwge1xyXG4gICAgICAgIC8qKiBJbmRpY2F0ZXMgdGhlIHN0YXRlIG9mIHRoZSB7QGxpbmsgSHViQ29ubmVjdGlvbn0gdG8gdGhlIHNlcnZlci4gKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29ubmVjdGlvblN0YXRlO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEh1YkNvbm5lY3Rpb24ucHJvdG90eXBlLCBcImNvbm5lY3Rpb25JZFwiLCB7XHJcbiAgICAgICAgLyoqIFJlcHJlc2VudHMgdGhlIGNvbm5lY3Rpb24gaWQgb2YgdGhlIHtAbGluayBIdWJDb25uZWN0aW9ufSBvbiB0aGUgc2VydmVyLiBUaGUgY29ubmVjdGlvbiBpZCB3aWxsIGJlIG51bGwgd2hlbiB0aGUgY29ubmVjdGlvbiBpcyBlaXRoZXJcclxuICAgICAgICAgKiAgaW4gdGhlIGRpc2Nvbm5lY3RlZCBzdGF0ZSBvciBpZiB0aGUgbmVnb3RpYXRpb24gc3RlcCB3YXMgc2tpcHBlZC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29ubmVjdGlvbiA/ICh0aGlzLmNvbm5lY3Rpb24uY29ubmVjdGlvbklkIHx8IG51bGwpIDogbnVsbDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShIdWJDb25uZWN0aW9uLnByb3RvdHlwZSwgXCJiYXNlVXJsXCIsIHtcclxuICAgICAgICAvKiogSW5kaWNhdGVzIHRoZSB1cmwgb2YgdGhlIHtAbGluayBIdWJDb25uZWN0aW9ufSB0byB0aGUgc2VydmVyLiAqL1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25uZWN0aW9uLmJhc2VVcmwgfHwgXCJcIjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFNldHMgYSBuZXcgdXJsIGZvciB0aGUgSHViQ29ubmVjdGlvbi4gTm90ZSB0aGF0IHRoZSB1cmwgY2FuIG9ubHkgYmUgY2hhbmdlZCB3aGVuIHRoZSBjb25uZWN0aW9uIGlzIGluIGVpdGhlciB0aGUgRGlzY29ubmVjdGVkIG9yXHJcbiAgICAgICAgICogUmVjb25uZWN0aW5nIHN0YXRlcy5cclxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSB1cmwgdG8gY29ubmVjdCB0by5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh1cmwpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY29ubmVjdGlvblN0YXRlICE9PSBIdWJDb25uZWN0aW9uU3RhdGUuRGlzY29ubmVjdGVkICYmIHRoaXMuY29ubmVjdGlvblN0YXRlICE9PSBIdWJDb25uZWN0aW9uU3RhdGUuUmVjb25uZWN0aW5nKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgSHViQ29ubmVjdGlvbiBtdXN0IGJlIGluIHRoZSBEaXNjb25uZWN0ZWQgb3IgUmVjb25uZWN0aW5nIHN0YXRlIHRvIGNoYW5nZSB0aGUgdXJsLlwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIXVybCkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIEh1YkNvbm5lY3Rpb24gdXJsIG11c3QgYmUgYSB2YWxpZCB1cmwuXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvbi5iYXNlVXJsID0gdXJsO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgLyoqIFN0YXJ0cyB0aGUgY29ubmVjdGlvbi5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn0gQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgY29ubmVjdGlvbiBoYXMgYmVlbiBzdWNjZXNzZnVsbHkgZXN0YWJsaXNoZWQsIG9yIHJlamVjdHMgd2l0aCBhbiBlcnJvci5cclxuICAgICAqL1xyXG4gICAgSHViQ29ubmVjdGlvbi5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5zdGFydFByb21pc2UgPSB0aGlzLnN0YXJ0V2l0aFN0YXRlVHJhbnNpdGlvbnMoKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdGFydFByb21pc2U7XHJcbiAgICB9O1xyXG4gICAgSHViQ29ubmVjdGlvbi5wcm90b3R5cGUuc3RhcnRXaXRoU3RhdGVUcmFuc2l0aW9ucyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBlXzE7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbm5lY3Rpb25TdGF0ZSAhPT0gSHViQ29ubmVjdGlvblN0YXRlLkRpc2Nvbm5lY3RlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIkNhbm5vdCBzdGFydCBhIEh1YkNvbm5lY3Rpb24gdGhhdCBpcyBub3QgaW4gdGhlICdEaXNjb25uZWN0ZWQnIHN0YXRlLlwiKSldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvblN0YXRlID0gSHViQ29ubmVjdGlvblN0YXRlLkNvbm5lY3Rpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuRGVidWcsIFwiU3RhcnRpbmcgSHViQ29ubmVjdGlvbi5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnRyeXMucHVzaChbMSwgMywgLCA0XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuc3RhcnRJbnRlcm5hbCgpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uU3RhdGUgPSBIdWJDb25uZWN0aW9uU3RhdGUuQ29ubmVjdGVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb25TdGFydGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5EZWJ1ZywgXCJIdWJDb25uZWN0aW9uIGNvbm5lY3RlZCBzdWNjZXNzZnVsbHkuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA0XTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVfMSA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uU3RhdGUgPSBIdWJDb25uZWN0aW9uU3RhdGUuRGlzY29ubmVjdGVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkRlYnVnLCBcIkh1YkNvbm5lY3Rpb24gZmFpbGVkIHRvIHN0YXJ0IHN1Y2Nlc3NmdWxseSBiZWNhdXNlIG9mIGVycm9yICdcIiArIGVfMSArIFwiJy5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBQcm9taXNlLnJlamVjdChlXzEpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6IHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgSHViQ29ubmVjdGlvbi5wcm90b3R5cGUuc3RhcnRJbnRlcm5hbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBoYW5kc2hha2VQcm9taXNlLCBoYW5kc2hha2VSZXF1ZXN0LCBlXzI7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RvcER1cmluZ1N0YXJ0RXJyb3IgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVjZWl2ZWRIYW5kc2hha2VSZXNwb25zZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5kc2hha2VQcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuaGFuZHNoYWtlUmVzb2x2ZXIgPSByZXNvbHZlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuaGFuZHNoYWtlUmVqZWN0ZXIgPSByZWplY3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmNvbm5lY3Rpb24uc3RhcnQodGhpcy5wcm90b2NvbC50cmFuc2ZlckZvcm1hdCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDI7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS50cnlzLnB1c2goWzIsIDUsICwgN10pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5kc2hha2VSZXF1ZXN0ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdG9jb2w6IHRoaXMucHJvdG9jb2wubmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlcnNpb246IHRoaXMucHJvdG9jb2wudmVyc2lvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5EZWJ1ZywgXCJTZW5kaW5nIGhhbmRzaGFrZSByZXF1ZXN0LlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5zZW5kTWVzc2FnZSh0aGlzLmhhbmRzaGFrZVByb3RvY29sLndyaXRlSGFuZHNoYWtlUmVxdWVzdChoYW5kc2hha2VSZXF1ZXN0KSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkluZm9ybWF0aW9uLCBcIlVzaW5nIEh1YlByb3RvY29sICdcIiArIHRoaXMucHJvdG9jb2wubmFtZSArIFwiJy5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRlZmVuc2l2ZWx5IGNsZWFudXAgdGltZW91dCBpbiBjYXNlIHdlIHJlY2VpdmUgYSBtZXNzYWdlIGZyb20gdGhlIHNlcnZlciBiZWZvcmUgd2UgZmluaXNoIHN0YXJ0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYW51cFRpbWVvdXQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNldFRpbWVvdXRQZXJpb2QoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNldEtlZXBBbGl2ZUludGVydmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGhhbmRzaGFrZVByb21pc2VdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJdCdzIGltcG9ydGFudCB0byBjaGVjayB0aGUgc3RvcER1cmluZ1N0YXJ0RXJyb3IgaW5zdGVhZCBvZiBqdXN0IHJlbHlpbmcgb24gdGhlIGhhbmRzaGFrZVByb21pc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYmVpbmcgcmVqZWN0ZWQgb24gY2xvc2UsIGJlY2F1c2UgdGhpcyBjb250aW51YXRpb24gY2FuIHJ1biBhZnRlciBib3RoIHRoZSBoYW5kc2hha2UgY29tcGxldGVkIHN1Y2Nlc3NmdWxseVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhbmQgdGhlIGNvbm5lY3Rpb24gd2FzIGNsb3NlZC5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RvcER1cmluZ1N0YXJ0RXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEl0J3MgaW1wb3J0YW50IHRvIHRocm93IGluc3RlYWQgb2YgcmV0dXJuaW5nIGEgcmVqZWN0ZWQgcHJvbWlzZSwgYmVjYXVzZSB3ZSBkb24ndCB3YW50IHRvIGFsbG93IGFueSBzdGF0ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHJhbnNpdGlvbnMgdG8gb2NjdXIgYmV0d2VlbiBub3cgYW5kIHRoZSBjYWxsaW5nIGNvZGUgb2JzZXJ2aW5nIHRoZSBleGNlcHRpb25zLiBSZXR1cm5pbmcgYSByZWplY3RlZCBwcm9taXNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3aWxsIGNhdXNlIHRoZSBjYWxsaW5nIGNvbnRpbnVhdGlvbiB0byBnZXQgc2NoZWR1bGVkIHRvIHJ1biBsYXRlci5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IHRoaXMuc3RvcER1cmluZ1N0YXJ0RXJyb3I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgN107XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlXzIgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuRGVidWcsIFwiSHViIGhhbmRzaGFrZSBmYWlsZWQgd2l0aCBlcnJvciAnXCIgKyBlXzIgKyBcIicgZHVyaW5nIHN0YXJ0KCkuIFN0b3BwaW5nIEh1YkNvbm5lY3Rpb24uXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNsZWFudXBUaW1lb3V0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYW51cFBpbmdUaW1lcigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBIdHRwQ29ubmVjdGlvbi5zdG9wKCkgc2hvdWxkIG5vdCBjb21wbGV0ZSB1bnRpbCBhZnRlciB0aGUgb25jbG9zZSBjYWxsYmFjayBpcyBpbnZva2VkLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIHdpbGwgdHJhbnNpdGlvbiB0aGUgSHViQ29ubmVjdGlvbiB0byB0aGUgZGlzY29ubmVjdGVkIHN0YXRlIGJlZm9yZSBIdHRwQ29ubmVjdGlvbi5zdG9wKCkgY29tcGxldGVzLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmNvbm5lY3Rpb24uc3RvcChlXzIpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEh0dHBDb25uZWN0aW9uLnN0b3AoKSBzaG91bGQgbm90IGNvbXBsZXRlIHVudGlsIGFmdGVyIHRoZSBvbmNsb3NlIGNhbGxiYWNrIGlzIGludm9rZWQuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgd2lsbCB0cmFuc2l0aW9uIHRoZSBIdWJDb25uZWN0aW9uIHRvIHRoZSBkaXNjb25uZWN0ZWQgc3RhdGUgYmVmb3JlIEh0dHBDb25uZWN0aW9uLnN0b3AoKSBjb21wbGV0ZXMuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZV8yO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNzogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvKiogU3RvcHMgdGhlIGNvbm5lY3Rpb24uXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59IEEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIGNvbm5lY3Rpb24gaGFzIGJlZW4gc3VjY2Vzc2Z1bGx5IHRlcm1pbmF0ZWQsIG9yIHJlamVjdHMgd2l0aCBhbiBlcnJvci5cclxuICAgICAqL1xyXG4gICAgSHViQ29ubmVjdGlvbi5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBzdGFydFByb21pc2UsIGVfMztcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRQcm9taXNlID0gdGhpcy5zdGFydFByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RvcFByb21pc2UgPSB0aGlzLnN0b3BJbnRlcm5hbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnN0b3BQcm9taXNlXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAyO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EudHJ5cy5wdXNoKFsyLCA0LCAsIDVdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXdhaXRpbmcgdW5kZWZpbmVkIGNvbnRpbnVlcyBpbW1lZGlhdGVseVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBzdGFydFByb21pc2VdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXdhaXRpbmcgdW5kZWZpbmVkIGNvbnRpbnVlcyBpbW1lZGlhdGVseVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDVdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZV8zID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA1XTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6IHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgSHViQ29ubmVjdGlvbi5wcm90b3R5cGUuc3RvcEludGVybmFsID0gZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY29ubmVjdGlvblN0YXRlID09PSBIdWJDb25uZWN0aW9uU3RhdGUuRGlzY29ubmVjdGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuRGVidWcsIFwiQ2FsbCB0byBIdWJDb25uZWN0aW9uLnN0b3AoXCIgKyBlcnJvciArIFwiKSBpZ25vcmVkIGJlY2F1c2UgaXQgaXMgYWxyZWFkeSBpbiB0aGUgZGlzY29ubmVjdGVkIHN0YXRlLlwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5jb25uZWN0aW9uU3RhdGUgPT09IEh1YkNvbm5lY3Rpb25TdGF0ZS5EaXNjb25uZWN0aW5nKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuRGVidWcsIFwiQ2FsbCB0byBIdHRwQ29ubmVjdGlvbi5zdG9wKFwiICsgZXJyb3IgKyBcIikgaWdub3JlZCBiZWNhdXNlIHRoZSBjb25uZWN0aW9uIGlzIGFscmVhZHkgaW4gdGhlIGRpc2Nvbm5lY3Rpbmcgc3RhdGUuXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdG9wUHJvbWlzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uU3RhdGUgPSBIdWJDb25uZWN0aW9uU3RhdGUuRGlzY29ubmVjdGluZztcclxuICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkRlYnVnLCBcIlN0b3BwaW5nIEh1YkNvbm5lY3Rpb24uXCIpO1xyXG4gICAgICAgIGlmICh0aGlzLnJlY29ubmVjdERlbGF5SGFuZGxlKSB7XHJcbiAgICAgICAgICAgIC8vIFdlJ3JlIGluIGEgcmVjb25uZWN0IGRlbGF5IHdoaWNoIG1lYW5zIHRoZSB1bmRlcmx5aW5nIGNvbm5lY3Rpb24gaXMgY3VycmVudGx5IGFscmVhZHkgc3RvcHBlZC5cclxuICAgICAgICAgICAgLy8gSnVzdCBjbGVhciB0aGUgaGFuZGxlIHRvIHN0b3AgdGhlIHJlY29ubmVjdCBsb29wICh3aGljaCBubyBvbmUgaXMgd2FpdGluZyBvbiB0aGFua2Z1bGx5KSBhbmRcclxuICAgICAgICAgICAgLy8gZmlyZSB0aGUgb25jbG9zZSBjYWxsYmFja3MuXHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuRGVidWcsIFwiQ29ubmVjdGlvbiBzdG9wcGVkIGR1cmluZyByZWNvbm5lY3QgZGVsYXkuIERvbmUgcmVjb25uZWN0aW5nLlwiKTtcclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMucmVjb25uZWN0RGVsYXlIYW5kbGUpO1xyXG4gICAgICAgICAgICB0aGlzLnJlY29ubmVjdERlbGF5SGFuZGxlID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB0aGlzLmNvbXBsZXRlQ2xvc2UoKTtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNsZWFudXBUaW1lb3V0KCk7XHJcbiAgICAgICAgdGhpcy5jbGVhbnVwUGluZ1RpbWVyKCk7XHJcbiAgICAgICAgdGhpcy5zdG9wRHVyaW5nU3RhcnRFcnJvciA9IGVycm9yIHx8IG5ldyBFcnJvcihcIlRoZSBjb25uZWN0aW9uIHdhcyBzdG9wcGVkIGJlZm9yZSB0aGUgaHViIGhhbmRzaGFrZSBjb3VsZCBjb21wbGV0ZS5cIik7XHJcbiAgICAgICAgLy8gSHR0cENvbm5lY3Rpb24uc3RvcCgpIHNob3VsZCBub3QgY29tcGxldGUgdW50aWwgYWZ0ZXIgZWl0aGVyIEh0dHBDb25uZWN0aW9uLnN0YXJ0KCkgZmFpbHNcclxuICAgICAgICAvLyBvciB0aGUgb25jbG9zZSBjYWxsYmFjayBpcyBpbnZva2VkLiBUaGUgb25jbG9zZSBjYWxsYmFjayB3aWxsIHRyYW5zaXRpb24gdGhlIEh1YkNvbm5lY3Rpb25cclxuICAgICAgICAvLyB0byB0aGUgZGlzY29ubmVjdGVkIHN0YXRlIGlmIG5lZWQgYmUgYmVmb3JlIEh0dHBDb25uZWN0aW9uLnN0b3AoKSBjb21wbGV0ZXMuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29ubmVjdGlvbi5zdG9wKGVycm9yKTtcclxuICAgIH07XHJcbiAgICAvKiogSW52b2tlcyBhIHN0cmVhbWluZyBodWIgbWV0aG9kIG9uIHRoZSBzZXJ2ZXIgdXNpbmcgdGhlIHNwZWNpZmllZCBuYW1lIGFuZCBhcmd1bWVudHMuXHJcbiAgICAgKlxyXG4gICAgICogQHR5cGVwYXJhbSBUIFRoZSB0eXBlIG9mIHRoZSBpdGVtcyByZXR1cm5lZCBieSB0aGUgc2VydmVyLlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZE5hbWUgVGhlIG5hbWUgb2YgdGhlIHNlcnZlciBtZXRob2QgdG8gaW52b2tlLlxyXG4gICAgICogQHBhcmFtIHthbnlbXX0gYXJncyBUaGUgYXJndW1lbnRzIHVzZWQgdG8gaW52b2tlIHRoZSBzZXJ2ZXIgbWV0aG9kLlxyXG4gICAgICogQHJldHVybnMge0lTdHJlYW1SZXN1bHQ8VD59IEFuIG9iamVjdCB0aGF0IHlpZWxkcyByZXN1bHRzIGZyb20gdGhlIHNlcnZlciBhcyB0aGV5IGFyZSByZWNlaXZlZC5cclxuICAgICAqL1xyXG4gICAgSHViQ29ubmVjdGlvbi5wcm90b3R5cGUuc3RyZWFtID0gZnVuY3Rpb24gKG1ldGhvZE5hbWUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBhcmdzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgYXJnc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIF9hID0gdGhpcy5yZXBsYWNlU3RyZWFtaW5nUGFyYW1zKGFyZ3MpLCBzdHJlYW1zID0gX2FbMF0sIHN0cmVhbUlkcyA9IF9hWzFdO1xyXG4gICAgICAgIHZhciBpbnZvY2F0aW9uRGVzY3JpcHRvciA9IHRoaXMuY3JlYXRlU3RyZWFtSW52b2NhdGlvbihtZXRob2ROYW1lLCBhcmdzLCBzdHJlYW1JZHMpO1xyXG4gICAgICAgIHZhciBwcm9taXNlUXVldWU7XHJcbiAgICAgICAgdmFyIHN1YmplY3QgPSBuZXcgU3ViamVjdF8xLlN1YmplY3QoKTtcclxuICAgICAgICBzdWJqZWN0LmNhbmNlbENhbGxiYWNrID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgY2FuY2VsSW52b2NhdGlvbiA9IF90aGlzLmNyZWF0ZUNhbmNlbEludm9jYXRpb24oaW52b2NhdGlvbkRlc2NyaXB0b3IuaW52b2NhdGlvbklkKTtcclxuICAgICAgICAgICAgZGVsZXRlIF90aGlzLmNhbGxiYWNrc1tpbnZvY2F0aW9uRGVzY3JpcHRvci5pbnZvY2F0aW9uSWRdO1xyXG4gICAgICAgICAgICByZXR1cm4gcHJvbWlzZVF1ZXVlLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnNlbmRXaXRoUHJvdG9jb2woY2FuY2VsSW52b2NhdGlvbik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5jYWxsYmFja3NbaW52b2NhdGlvbkRlc2NyaXB0b3IuaW52b2NhdGlvbklkXSA9IGZ1bmN0aW9uIChpbnZvY2F0aW9uRXZlbnQsIGVycm9yKSB7XHJcbiAgICAgICAgICAgIGlmIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgc3ViamVjdC5lcnJvcihlcnJvcik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoaW52b2NhdGlvbkV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAvLyBpbnZvY2F0aW9uRXZlbnQgd2lsbCBub3QgYmUgbnVsbCB3aGVuIGFuIGVycm9yIGlzIG5vdCBwYXNzZWQgdG8gdGhlIGNhbGxiYWNrXHJcbiAgICAgICAgICAgICAgICBpZiAoaW52b2NhdGlvbkV2ZW50LnR5cGUgPT09IElIdWJQcm90b2NvbF8xLk1lc3NhZ2VUeXBlLkNvbXBsZXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW52b2NhdGlvbkV2ZW50LmVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YmplY3QuZXJyb3IobmV3IEVycm9yKGludm9jYXRpb25FdmVudC5lcnJvcikpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3ViamVjdC5jb21wbGV0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHN1YmplY3QubmV4dCgoaW52b2NhdGlvbkV2ZW50Lml0ZW0pKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcHJvbWlzZVF1ZXVlID0gdGhpcy5zZW5kV2l0aFByb3RvY29sKGludm9jYXRpb25EZXNjcmlwdG9yKVxyXG4gICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgc3ViamVjdC5lcnJvcihlKTtcclxuICAgICAgICAgICAgZGVsZXRlIF90aGlzLmNhbGxiYWNrc1tpbnZvY2F0aW9uRGVzY3JpcHRvci5pbnZvY2F0aW9uSWRdO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMubGF1bmNoU3RyZWFtcyhzdHJlYW1zLCBwcm9taXNlUXVldWUpO1xyXG4gICAgICAgIHJldHVybiBzdWJqZWN0O1xyXG4gICAgfTtcclxuICAgIEh1YkNvbm5lY3Rpb24ucHJvdG90eXBlLnNlbmRNZXNzYWdlID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcclxuICAgICAgICB0aGlzLnJlc2V0S2VlcEFsaXZlSW50ZXJ2YWwoKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb25uZWN0aW9uLnNlbmQobWVzc2FnZSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kcyBhIGpzIG9iamVjdCB0byB0aGUgc2VydmVyLlxyXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgVGhlIGpzIG9iamVjdCB0byBzZXJpYWxpemUgYW5kIHNlbmQuXHJcbiAgICAgKi9cclxuICAgIEh1YkNvbm5lY3Rpb24ucHJvdG90eXBlLnNlbmRXaXRoUHJvdG9jb2wgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlbmRNZXNzYWdlKHRoaXMucHJvdG9jb2wud3JpdGVNZXNzYWdlKG1lc3NhZ2UpKTtcclxuICAgIH07XHJcbiAgICAvKiogSW52b2tlcyBhIGh1YiBtZXRob2Qgb24gdGhlIHNlcnZlciB1c2luZyB0aGUgc3BlY2lmaWVkIG5hbWUgYW5kIGFyZ3VtZW50cy4gRG9lcyBub3Qgd2FpdCBmb3IgYSByZXNwb25zZSBmcm9tIHRoZSByZWNlaXZlci5cclxuICAgICAqXHJcbiAgICAgKiBUaGUgUHJvbWlzZSByZXR1cm5lZCBieSB0aGlzIG1ldGhvZCByZXNvbHZlcyB3aGVuIHRoZSBjbGllbnQgaGFzIHNlbnQgdGhlIGludm9jYXRpb24gdG8gdGhlIHNlcnZlci4gVGhlIHNlcnZlciBtYXkgc3RpbGxcclxuICAgICAqIGJlIHByb2Nlc3NpbmcgdGhlIGludm9jYXRpb24uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZE5hbWUgVGhlIG5hbWUgb2YgdGhlIHNlcnZlciBtZXRob2QgdG8gaW52b2tlLlxyXG4gICAgICogQHBhcmFtIHthbnlbXX0gYXJncyBUaGUgYXJndW1lbnRzIHVzZWQgdG8gaW52b2tlIHRoZSBzZXJ2ZXIgbWV0aG9kLlxyXG4gICAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59IEEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIGludm9jYXRpb24gaGFzIGJlZW4gc3VjY2Vzc2Z1bGx5IHNlbnQsIG9yIHJlamVjdHMgd2l0aCBhbiBlcnJvci5cclxuICAgICAqL1xyXG4gICAgSHViQ29ubmVjdGlvbi5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChtZXRob2ROYW1lKSB7XHJcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICBhcmdzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgX2EgPSB0aGlzLnJlcGxhY2VTdHJlYW1pbmdQYXJhbXMoYXJncyksIHN0cmVhbXMgPSBfYVswXSwgc3RyZWFtSWRzID0gX2FbMV07XHJcbiAgICAgICAgdmFyIHNlbmRQcm9taXNlID0gdGhpcy5zZW5kV2l0aFByb3RvY29sKHRoaXMuY3JlYXRlSW52b2NhdGlvbihtZXRob2ROYW1lLCBhcmdzLCB0cnVlLCBzdHJlYW1JZHMpKTtcclxuICAgICAgICB0aGlzLmxhdW5jaFN0cmVhbXMoc3RyZWFtcywgc2VuZFByb21pc2UpO1xyXG4gICAgICAgIHJldHVybiBzZW5kUHJvbWlzZTtcclxuICAgIH07XHJcbiAgICAvKiogSW52b2tlcyBhIGh1YiBtZXRob2Qgb24gdGhlIHNlcnZlciB1c2luZyB0aGUgc3BlY2lmaWVkIG5hbWUgYW5kIGFyZ3VtZW50cy5cclxuICAgICAqXHJcbiAgICAgKiBUaGUgUHJvbWlzZSByZXR1cm5lZCBieSB0aGlzIG1ldGhvZCByZXNvbHZlcyB3aGVuIHRoZSBzZXJ2ZXIgaW5kaWNhdGVzIGl0IGhhcyBmaW5pc2hlZCBpbnZva2luZyB0aGUgbWV0aG9kLiBXaGVuIHRoZSBwcm9taXNlXHJcbiAgICAgKiByZXNvbHZlcywgdGhlIHNlcnZlciBoYXMgZmluaXNoZWQgaW52b2tpbmcgdGhlIG1ldGhvZC4gSWYgdGhlIHNlcnZlciBtZXRob2QgcmV0dXJucyBhIHJlc3VsdCwgaXQgaXMgcHJvZHVjZWQgYXMgdGhlIHJlc3VsdCBvZlxyXG4gICAgICogcmVzb2x2aW5nIHRoZSBQcm9taXNlLlxyXG4gICAgICpcclxuICAgICAqIEB0eXBlcGFyYW0gVCBUaGUgZXhwZWN0ZWQgcmV0dXJuIHR5cGUuXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kTmFtZSBUaGUgbmFtZSBvZiB0aGUgc2VydmVyIG1ldGhvZCB0byBpbnZva2UuXHJcbiAgICAgKiBAcGFyYW0ge2FueVtdfSBhcmdzIFRoZSBhcmd1bWVudHMgdXNlZCB0byBpbnZva2UgdGhlIHNlcnZlciBtZXRob2QuXHJcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxUPn0gQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgcmVzdWx0IG9mIHRoZSBzZXJ2ZXIgbWV0aG9kIChpZiBhbnkpLCBvciByZWplY3RzIHdpdGggYW4gZXJyb3IuXHJcbiAgICAgKi9cclxuICAgIEh1YkNvbm5lY3Rpb24ucHJvdG90eXBlLmludm9rZSA9IGZ1bmN0aW9uIChtZXRob2ROYW1lKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGFyZ3NbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBfYSA9IHRoaXMucmVwbGFjZVN0cmVhbWluZ1BhcmFtcyhhcmdzKSwgc3RyZWFtcyA9IF9hWzBdLCBzdHJlYW1JZHMgPSBfYVsxXTtcclxuICAgICAgICB2YXIgaW52b2NhdGlvbkRlc2NyaXB0b3IgPSB0aGlzLmNyZWF0ZUludm9jYXRpb24obWV0aG9kTmFtZSwgYXJncywgZmFsc2UsIHN0cmVhbUlkcyk7XHJcbiAgICAgICAgdmFyIHAgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgIC8vIGludm9jYXRpb25JZCB3aWxsIGFsd2F5cyBoYXZlIGEgdmFsdWUgZm9yIGEgbm9uLWJsb2NraW5nIGludm9jYXRpb25cclxuICAgICAgICAgICAgX3RoaXMuY2FsbGJhY2tzW2ludm9jYXRpb25EZXNjcmlwdG9yLmludm9jYXRpb25JZF0gPSBmdW5jdGlvbiAoaW52b2NhdGlvbkV2ZW50LCBlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpbnZvY2F0aW9uRXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBpbnZvY2F0aW9uRXZlbnQgd2lsbCBub3QgYmUgbnVsbCB3aGVuIGFuIGVycm9yIGlzIG5vdCBwYXNzZWQgdG8gdGhlIGNhbGxiYWNrXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGludm9jYXRpb25FdmVudC50eXBlID09PSBJSHViUHJvdG9jb2xfMS5NZXNzYWdlVHlwZS5Db21wbGV0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnZvY2F0aW9uRXZlbnQuZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoaW52b2NhdGlvbkV2ZW50LmVycm9yKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGludm9jYXRpb25FdmVudC5yZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKFwiVW5leHBlY3RlZCBtZXNzYWdlIHR5cGU6IFwiICsgaW52b2NhdGlvbkV2ZW50LnR5cGUpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHZhciBwcm9taXNlUXVldWUgPSBfdGhpcy5zZW5kV2l0aFByb3RvY29sKGludm9jYXRpb25EZXNjcmlwdG9yKVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoZSk7XHJcbiAgICAgICAgICAgICAgICAvLyBpbnZvY2F0aW9uSWQgd2lsbCBhbHdheXMgaGF2ZSBhIHZhbHVlIGZvciBhIG5vbi1ibG9ja2luZyBpbnZvY2F0aW9uXHJcbiAgICAgICAgICAgICAgICBkZWxldGUgX3RoaXMuY2FsbGJhY2tzW2ludm9jYXRpb25EZXNjcmlwdG9yLmludm9jYXRpb25JZF07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBfdGhpcy5sYXVuY2hTdHJlYW1zKHN0cmVhbXMsIHByb21pc2VRdWV1ZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHA7XHJcbiAgICB9O1xyXG4gICAgLyoqIFJlZ2lzdGVycyBhIGhhbmRsZXIgdGhhdCB3aWxsIGJlIGludm9rZWQgd2hlbiB0aGUgaHViIG1ldGhvZCB3aXRoIHRoZSBzcGVjaWZpZWQgbWV0aG9kIG5hbWUgaXMgaW52b2tlZC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kTmFtZSBUaGUgbmFtZSBvZiB0aGUgaHViIG1ldGhvZCB0byBkZWZpbmUuXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBuZXdNZXRob2QgVGhlIGhhbmRsZXIgdGhhdCB3aWxsIGJlIHJhaXNlZCB3aGVuIHRoZSBodWIgbWV0aG9kIGlzIGludm9rZWQuXHJcbiAgICAgKi9cclxuICAgIEh1YkNvbm5lY3Rpb24ucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gKG1ldGhvZE5hbWUsIG5ld01ldGhvZCkge1xyXG4gICAgICAgIGlmICghbWV0aG9kTmFtZSB8fCAhbmV3TWV0aG9kKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgbWV0aG9kTmFtZSA9IG1ldGhvZE5hbWUudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICBpZiAoIXRoaXMubWV0aG9kc1ttZXRob2ROYW1lXSkge1xyXG4gICAgICAgICAgICB0aGlzLm1ldGhvZHNbbWV0aG9kTmFtZV0gPSBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gUHJldmVudGluZyBhZGRpbmcgdGhlIHNhbWUgaGFuZGxlciBtdWx0aXBsZSB0aW1lcy5cclxuICAgICAgICBpZiAodGhpcy5tZXRob2RzW21ldGhvZE5hbWVdLmluZGV4T2YobmV3TWV0aG9kKSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm1ldGhvZHNbbWV0aG9kTmFtZV0ucHVzaChuZXdNZXRob2QpO1xyXG4gICAgfTtcclxuICAgIEh1YkNvbm5lY3Rpb24ucHJvdG90eXBlLm9mZiA9IGZ1bmN0aW9uIChtZXRob2ROYW1lLCBtZXRob2QpIHtcclxuICAgICAgICBpZiAoIW1ldGhvZE5hbWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBtZXRob2ROYW1lID0gbWV0aG9kTmFtZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgIHZhciBoYW5kbGVycyA9IHRoaXMubWV0aG9kc1ttZXRob2ROYW1lXTtcclxuICAgICAgICBpZiAoIWhhbmRsZXJzKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG1ldGhvZCkge1xyXG4gICAgICAgICAgICB2YXIgcmVtb3ZlSWR4ID0gaGFuZGxlcnMuaW5kZXhPZihtZXRob2QpO1xyXG4gICAgICAgICAgICBpZiAocmVtb3ZlSWR4ICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlcnMuc3BsaWNlKHJlbW92ZUlkeCwgMSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaGFuZGxlcnMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMubWV0aG9kc1ttZXRob2ROYW1lXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZGVsZXRlIHRoaXMubWV0aG9kc1ttZXRob2ROYW1lXTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqIFJlZ2lzdGVycyBhIGhhbmRsZXIgdGhhdCB3aWxsIGJlIGludm9rZWQgd2hlbiB0aGUgY29ubmVjdGlvbiBpcyBjbG9zZWQuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGhhbmRsZXIgdGhhdCB3aWxsIGJlIGludm9rZWQgd2hlbiB0aGUgY29ubmVjdGlvbiBpcyBjbG9zZWQuIE9wdGlvbmFsbHkgcmVjZWl2ZXMgYSBzaW5nbGUgYXJndW1lbnQgY29udGFpbmluZyB0aGUgZXJyb3IgdGhhdCBjYXVzZWQgdGhlIGNvbm5lY3Rpb24gdG8gY2xvc2UgKGlmIGFueSkuXHJcbiAgICAgKi9cclxuICAgIEh1YkNvbm5lY3Rpb24ucHJvdG90eXBlLm9uY2xvc2UgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgICAgICBpZiAoY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZWRDYWxsYmFja3MucHVzaChjYWxsYmFjayk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKiBSZWdpc3RlcnMgYSBoYW5kbGVyIHRoYXQgd2lsbCBiZSBpbnZva2VkIHdoZW4gdGhlIGNvbm5lY3Rpb24gc3RhcnRzIHJlY29ubmVjdGluZy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgaGFuZGxlciB0aGF0IHdpbGwgYmUgaW52b2tlZCB3aGVuIHRoZSBjb25uZWN0aW9uIHN0YXJ0cyByZWNvbm5lY3RpbmcuIE9wdGlvbmFsbHkgcmVjZWl2ZXMgYSBzaW5nbGUgYXJndW1lbnQgY29udGFpbmluZyB0aGUgZXJyb3IgdGhhdCBjYXVzZWQgdGhlIGNvbm5lY3Rpb24gdG8gc3RhcnQgcmVjb25uZWN0aW5nIChpZiBhbnkpLlxyXG4gICAgICovXHJcbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5vbnJlY29ubmVjdGluZyA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgICAgIGlmIChjYWxsYmFjaykge1xyXG4gICAgICAgICAgICB0aGlzLnJlY29ubmVjdGluZ0NhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqIFJlZ2lzdGVycyBhIGhhbmRsZXIgdGhhdCB3aWxsIGJlIGludm9rZWQgd2hlbiB0aGUgY29ubmVjdGlvbiBzdWNjZXNzZnVsbHkgcmVjb25uZWN0cy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgaGFuZGxlciB0aGF0IHdpbGwgYmUgaW52b2tlZCB3aGVuIHRoZSBjb25uZWN0aW9uIHN1Y2Nlc3NmdWxseSByZWNvbm5lY3RzLlxyXG4gICAgICovXHJcbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5vbnJlY29ubmVjdGVkID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVjb25uZWN0ZWRDYWxsYmFja3MucHVzaChjYWxsYmFjayk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEh1YkNvbm5lY3Rpb24ucHJvdG90eXBlLnByb2Nlc3NJbmNvbWluZ0RhdGEgPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgIHRoaXMuY2xlYW51cFRpbWVvdXQoKTtcclxuICAgICAgICBpZiAoIXRoaXMucmVjZWl2ZWRIYW5kc2hha2VSZXNwb25zZSkge1xyXG4gICAgICAgICAgICBkYXRhID0gdGhpcy5wcm9jZXNzSGFuZHNoYWtlUmVzcG9uc2UoZGF0YSk7XHJcbiAgICAgICAgICAgIHRoaXMucmVjZWl2ZWRIYW5kc2hha2VSZXNwb25zZSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIERhdGEgbWF5IGhhdmUgYWxsIGJlZW4gcmVhZCB3aGVuIHByb2Nlc3NpbmcgaGFuZHNoYWtlIHJlc3BvbnNlXHJcbiAgICAgICAgaWYgKGRhdGEpIHtcclxuICAgICAgICAgICAgLy8gUGFyc2UgdGhlIG1lc3NhZ2VzXHJcbiAgICAgICAgICAgIHZhciBtZXNzYWdlcyA9IHRoaXMucHJvdG9jb2wucGFyc2VNZXNzYWdlcyhkYXRhLCB0aGlzLmxvZ2dlcik7XHJcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgbWVzc2FnZXNfMSA9IG1lc3NhZ2VzOyBfaSA8IG1lc3NhZ2VzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZSA9IG1lc3NhZ2VzXzFbX2ldO1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChtZXNzYWdlLnR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIElIdWJQcm90b2NvbF8xLk1lc3NhZ2VUeXBlLkludm9jYXRpb246XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW52b2tlQ2xpZW50TWV0aG9kKG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIElIdWJQcm90b2NvbF8xLk1lc3NhZ2VUeXBlLlN0cmVhbUl0ZW06XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBJSHViUHJvdG9jb2xfMS5NZXNzYWdlVHlwZS5Db21wbGV0aW9uOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2FsbGJhY2sgPSB0aGlzLmNhbGxiYWNrc1ttZXNzYWdlLmludm9jYXRpb25JZF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UudHlwZSA9PT0gSUh1YlByb3RvY29sXzEuTWVzc2FnZVR5cGUuQ29tcGxldGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmNhbGxiYWNrc1ttZXNzYWdlLmludm9jYXRpb25JZF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhtZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIElIdWJQcm90b2NvbF8xLk1lc3NhZ2VUeXBlLlBpbmc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIERvbid0IGNhcmUgYWJvdXQgcGluZ3NcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBJSHViUHJvdG9jb2xfMS5NZXNzYWdlVHlwZS5DbG9zZTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5JbmZvcm1hdGlvbiwgXCJDbG9zZSBtZXNzYWdlIHJlY2VpdmVkIGZyb20gc2VydmVyLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yID0gbWVzc2FnZS5lcnJvciA/IG5ldyBFcnJvcihcIlNlcnZlciByZXR1cm5lZCBhbiBlcnJvciBvbiBjbG9zZTogXCIgKyBtZXNzYWdlLmVycm9yKSA6IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UuYWxsb3dSZWNvbm5lY3QgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEl0IGZlZWxzIHdyb25nIG5vdCB0byBhd2FpdCBjb25uZWN0aW9uLnN0b3AoKSBoZXJlLCBidXQgcHJvY2Vzc0luY29taW5nRGF0YSBpcyBjYWxsZWQgYXMgcGFydCBvZiBhbiBvbnJlY2VpdmUgY2FsbGJhY2sgd2hpY2ggaXMgbm90IGFzeW5jLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyBpcyBhbHJlYWR5IHRoZSBiZWhhdmlvciBmb3Igc2VydmVyVGltZW91dCgpLCBhbmQgSHR0cENvbm5lY3Rpb24uU3RvcCgpIHNob3VsZCBjYXRjaCBhbmQgbG9nIGFsbCBwb3NzaWJsZSBleGNlcHRpb25zLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWZsb2F0aW5nLXByb21pc2VzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb24uc3RvcChlcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSBjYW5ub3QgYXdhaXQgc3RvcEludGVybmFsKCkgaGVyZSwgYnV0IHN1YnNlcXVlbnQgY2FsbHMgdG8gc3RvcCgpIHdpbGwgYXdhaXQgdGhpcyBpZiBzdG9wSW50ZXJuYWwoKSBpcyBzdGlsbCBvbmdvaW5nLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9wUHJvbWlzZSA9IHRoaXMuc3RvcEludGVybmFsKGVycm9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLldhcm5pbmcsIFwiSW52YWxpZCBtZXNzYWdlIHR5cGU6IFwiICsgbWVzc2FnZS50eXBlICsgXCIuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnJlc2V0VGltZW91dFBlcmlvZCgpO1xyXG4gICAgfTtcclxuICAgIEh1YkNvbm5lY3Rpb24ucHJvdG90eXBlLnByb2Nlc3NIYW5kc2hha2VSZXNwb25zZSA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIHZhciByZXNwb25zZU1lc3NhZ2U7XHJcbiAgICAgICAgdmFyIHJlbWFpbmluZ0RhdGE7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgX2EgPSB0aGlzLmhhbmRzaGFrZVByb3RvY29sLnBhcnNlSGFuZHNoYWtlUmVzcG9uc2UoZGF0YSksIHJlbWFpbmluZ0RhdGEgPSBfYVswXSwgcmVzcG9uc2VNZXNzYWdlID0gX2FbMV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIHZhciBtZXNzYWdlID0gXCJFcnJvciBwYXJzaW5nIGhhbmRzaGFrZSByZXNwb25zZTogXCIgKyBlO1xyXG4gICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkVycm9yLCBtZXNzYWdlKTtcclxuICAgICAgICAgICAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB0aGlzLmhhbmRzaGFrZVJlamVjdGVyKGVycm9yKTtcclxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChyZXNwb25zZU1lc3NhZ2UuZXJyb3IpIHtcclxuICAgICAgICAgICAgdmFyIG1lc3NhZ2UgPSBcIlNlcnZlciByZXR1cm5lZCBoYW5kc2hha2UgZXJyb3I6IFwiICsgcmVzcG9uc2VNZXNzYWdlLmVycm9yO1xyXG4gICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkVycm9yLCBtZXNzYWdlKTtcclxuICAgICAgICAgICAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB0aGlzLmhhbmRzaGFrZVJlamVjdGVyKGVycm9yKTtcclxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkRlYnVnLCBcIlNlcnZlciBoYW5kc2hha2UgY29tcGxldGUuXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmhhbmRzaGFrZVJlc29sdmVyKCk7XHJcbiAgICAgICAgcmV0dXJuIHJlbWFpbmluZ0RhdGE7XHJcbiAgICB9O1xyXG4gICAgSHViQ29ubmVjdGlvbi5wcm90b3R5cGUucmVzZXRLZWVwQWxpdmVJbnRlcnZhbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuY2xlYW51cFBpbmdUaW1lcigpO1xyXG4gICAgICAgIHRoaXMucGluZ1NlcnZlckhhbmRsZSA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyByZXR1cm4gX19hd2FpdGVyKF90aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHRoaXMuY29ubmVjdGlvblN0YXRlID09PSBIdWJDb25uZWN0aW9uU3RhdGUuQ29ubmVjdGVkKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLnRyeXMucHVzaChbMSwgMywgLCA0XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuc2VuZE1lc3NhZ2UodGhpcy5jYWNoZWRQaW5nTWVzc2FnZSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA0XTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSBkb24ndCBjYXJlIGFib3V0IHRoZSBlcnJvci4gSXQgc2hvdWxkIGJlIHNlZW4gZWxzZXdoZXJlIGluIHRoZSBjbGllbnQuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSBjb25uZWN0aW9uIGlzIHByb2JhYmx5IGluIGEgYmFkIG9yIGNsb3NlZCBzdGF0ZSBub3csIGNsZWFudXAgdGhlIHRpbWVyIHNvIGl0IHN0b3BzIHRyaWdnZXJpbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhbnVwUGluZ1RpbWVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDRdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTsgfSwgdGhpcy5rZWVwQWxpdmVJbnRlcnZhbEluTWlsbGlzZWNvbmRzKTtcclxuICAgIH07XHJcbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5yZXNldFRpbWVvdXRQZXJpb2QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBpZiAoIXRoaXMuY29ubmVjdGlvbi5mZWF0dXJlcyB8fCAhdGhpcy5jb25uZWN0aW9uLmZlYXR1cmVzLmluaGVyZW50S2VlcEFsaXZlKSB7XHJcbiAgICAgICAgICAgIC8vIFNldCB0aGUgdGltZW91dCB0aW1lclxyXG4gICAgICAgICAgICB0aGlzLnRpbWVvdXRIYW5kbGUgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnNlcnZlclRpbWVvdXQoKTsgfSwgdGhpcy5zZXJ2ZXJUaW1lb3V0SW5NaWxsaXNlY29uZHMpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5zZXJ2ZXJUaW1lb3V0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIFRoZSBzZXJ2ZXIgaGFzbid0IHRhbGtlZCB0byB1cyBpbiBhIHdoaWxlLiBJdCBkb2Vzbid0IGxpa2UgdXMgYW55bW9yZSAuLi4gOihcclxuICAgICAgICAvLyBUZXJtaW5hdGUgdGhlIGNvbm5lY3Rpb24sIGJ1dCB3ZSBkb24ndCBuZWVkIHRvIHdhaXQgb24gdGhlIHByb21pc2UuIFRoaXMgY291bGQgdHJpZ2dlciByZWNvbm5lY3RpbmcuXHJcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWZsb2F0aW5nLXByb21pc2VzXHJcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uLnN0b3AobmV3IEVycm9yKFwiU2VydmVyIHRpbWVvdXQgZWxhcHNlZCB3aXRob3V0IHJlY2VpdmluZyBhIG1lc3NhZ2UgZnJvbSB0aGUgc2VydmVyLlwiKSk7XHJcbiAgICB9O1xyXG4gICAgSHViQ29ubmVjdGlvbi5wcm90b3R5cGUuaW52b2tlQ2xpZW50TWV0aG9kID0gZnVuY3Rpb24gKGludm9jYXRpb25NZXNzYWdlKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgbWV0aG9kcyA9IHRoaXMubWV0aG9kc1tpbnZvY2F0aW9uTWVzc2FnZS50YXJnZXQudG9Mb3dlckNhc2UoKV07XHJcbiAgICAgICAgaWYgKG1ldGhvZHMpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIG1ldGhvZHMuZm9yRWFjaChmdW5jdGlvbiAobSkgeyByZXR1cm4gbS5hcHBseShfdGhpcywgaW52b2NhdGlvbk1lc3NhZ2UuYXJndW1lbnRzKTsgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuRXJyb3IsIFwiQSBjYWxsYmFjayBmb3IgdGhlIG1ldGhvZCBcIiArIGludm9jYXRpb25NZXNzYWdlLnRhcmdldC50b0xvd2VyQ2FzZSgpICsgXCIgdGhyZXcgZXJyb3IgJ1wiICsgZSArIFwiJy5cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGludm9jYXRpb25NZXNzYWdlLmludm9jYXRpb25JZCkge1xyXG4gICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBub3Qgc3VwcG9ydGVkIGluIHYxLiBTbyB3ZSByZXR1cm4gYW4gZXJyb3IgdG8gYXZvaWQgYmxvY2tpbmcgdGhlIHNlcnZlciB3YWl0aW5nIGZvciB0aGUgcmVzcG9uc2UuXHJcbiAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZSA9IFwiU2VydmVyIHJlcXVlc3RlZCBhIHJlc3BvbnNlLCB3aGljaCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgdmVyc2lvbiBvZiB0aGUgY2xpZW50LlwiO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5FcnJvciwgbWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAvLyBXZSBkb24ndCB3YW50IHRvIHdhaXQgb24gdGhlIHN0b3AgaXRzZWxmLlxyXG4gICAgICAgICAgICAgICAgdGhpcy5zdG9wUHJvbWlzZSA9IHRoaXMuc3RvcEludGVybmFsKG5ldyBFcnJvcihtZXNzYWdlKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuV2FybmluZywgXCJObyBjbGllbnQgbWV0aG9kIHdpdGggdGhlIG5hbWUgJ1wiICsgaW52b2NhdGlvbk1lc3NhZ2UudGFyZ2V0ICsgXCInIGZvdW5kLlwiKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgSHViQ29ubmVjdGlvbi5wcm90b3R5cGUuY29ubmVjdGlvbkNsb3NlZCA9IGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuRGVidWcsIFwiSHViQ29ubmVjdGlvbi5jb25uZWN0aW9uQ2xvc2VkKFwiICsgZXJyb3IgKyBcIikgY2FsbGVkIHdoaWxlIGluIHN0YXRlIFwiICsgdGhpcy5jb25uZWN0aW9uU3RhdGUgKyBcIi5cIik7XHJcbiAgICAgICAgLy8gVHJpZ2dlcmluZyB0aGlzLmhhbmRzaGFrZVJlamVjdGVyIGlzIGluc3VmZmljaWVudCBiZWNhdXNlIGl0IGNvdWxkIGFscmVhZHkgYmUgcmVzb2x2ZWQgd2l0aG91dCB0aGUgY29udGludWF0aW9uIGhhdmluZyBydW4geWV0LlxyXG4gICAgICAgIHRoaXMuc3RvcER1cmluZ1N0YXJ0RXJyb3IgPSB0aGlzLnN0b3BEdXJpbmdTdGFydEVycm9yIHx8IGVycm9yIHx8IG5ldyBFcnJvcihcIlRoZSB1bmRlcmx5aW5nIGNvbm5lY3Rpb24gd2FzIGNsb3NlZCBiZWZvcmUgdGhlIGh1YiBoYW5kc2hha2UgY291bGQgY29tcGxldGUuXCIpO1xyXG4gICAgICAgIC8vIElmIHRoZSBoYW5kc2hha2UgaXMgaW4gcHJvZ3Jlc3MsIHN0YXJ0IHdpbGwgYmUgd2FpdGluZyBmb3IgdGhlIGhhbmRzaGFrZSBwcm9taXNlLCBzbyB3ZSBjb21wbGV0ZSBpdC5cclxuICAgICAgICAvLyBJZiBpdCBoYXMgYWxyZWFkeSBjb21wbGV0ZWQsIHRoaXMgc2hvdWxkIGp1c3Qgbm9vcC5cclxuICAgICAgICBpZiAodGhpcy5oYW5kc2hha2VSZXNvbHZlcikge1xyXG4gICAgICAgICAgICB0aGlzLmhhbmRzaGFrZVJlc29sdmVyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY2FuY2VsQ2FsbGJhY2tzV2l0aEVycm9yKGVycm9yIHx8IG5ldyBFcnJvcihcIkludm9jYXRpb24gY2FuY2VsZWQgZHVlIHRvIHRoZSB1bmRlcmx5aW5nIGNvbm5lY3Rpb24gYmVpbmcgY2xvc2VkLlwiKSk7XHJcbiAgICAgICAgdGhpcy5jbGVhbnVwVGltZW91dCgpO1xyXG4gICAgICAgIHRoaXMuY2xlYW51cFBpbmdUaW1lcigpO1xyXG4gICAgICAgIGlmICh0aGlzLmNvbm5lY3Rpb25TdGF0ZSA9PT0gSHViQ29ubmVjdGlvblN0YXRlLkRpc2Nvbm5lY3RpbmcpIHtcclxuICAgICAgICAgICAgdGhpcy5jb21wbGV0ZUNsb3NlKGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5jb25uZWN0aW9uU3RhdGUgPT09IEh1YkNvbm5lY3Rpb25TdGF0ZS5Db25uZWN0ZWQgJiYgdGhpcy5yZWNvbm5lY3RQb2xpY3kpIHtcclxuICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWZsb2F0aW5nLXByb21pc2VzXHJcbiAgICAgICAgICAgIHRoaXMucmVjb25uZWN0KGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5jb25uZWN0aW9uU3RhdGUgPT09IEh1YkNvbm5lY3Rpb25TdGF0ZS5Db25uZWN0ZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5jb21wbGV0ZUNsb3NlKGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gSWYgbm9uZSBvZiB0aGUgYWJvdmUgaWYgY29uZGl0aW9ucyB3ZXJlIHRydWUgd2VyZSBjYWxsZWQgdGhlIEh1YkNvbm5lY3Rpb24gbXVzdCBiZSBpbiBlaXRoZXI6XHJcbiAgICAgICAgLy8gMS4gVGhlIENvbm5lY3Rpbmcgc3RhdGUgaW4gd2hpY2ggY2FzZSB0aGUgaGFuZHNoYWtlUmVzb2x2ZXIgd2lsbCBjb21wbGV0ZSBpdCBhbmQgc3RvcER1cmluZ1N0YXJ0RXJyb3Igd2lsbCBmYWlsIGl0LlxyXG4gICAgICAgIC8vIDIuIFRoZSBSZWNvbm5lY3Rpbmcgc3RhdGUgaW4gd2hpY2ggY2FzZSB0aGUgaGFuZHNoYWtlUmVzb2x2ZXIgd2lsbCBjb21wbGV0ZSBpdCBhbmQgc3RvcER1cmluZ1N0YXJ0RXJyb3Igd2lsbCBmYWlsIHRoZSBjdXJyZW50IHJlY29ubmVjdCBhdHRlbXB0XHJcbiAgICAgICAgLy8gICAgYW5kIHBvdGVudGlhbGx5IGNvbnRpbnVlIHRoZSByZWNvbm5lY3QoKSBsb29wLlxyXG4gICAgICAgIC8vIDMuIFRoZSBEaXNjb25uZWN0ZWQgc3RhdGUgaW4gd2hpY2ggY2FzZSB3ZSdyZSBhbHJlYWR5IGRvbmUuXHJcbiAgICB9O1xyXG4gICAgSHViQ29ubmVjdGlvbi5wcm90b3R5cGUuY29tcGxldGVDbG9zZSA9IGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKHRoaXMuY29ubmVjdGlvblN0YXJ0ZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uU3RhdGUgPSBIdWJDb25uZWN0aW9uU3RhdGUuRGlzY29ubmVjdGVkO1xyXG4gICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb25TdGFydGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlZENhbGxiYWNrcy5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLmFwcGx5KF90aGlzLCBbZXJyb3JdKTsgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuRXJyb3IsIFwiQW4gb25jbG9zZSBjYWxsYmFjayBjYWxsZWQgd2l0aCBlcnJvciAnXCIgKyBlcnJvciArIFwiJyB0aHJldyBlcnJvciAnXCIgKyBlICsgXCInLlwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5yZWNvbm5lY3QgPSBmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciByZWNvbm5lY3RTdGFydFRpbWUsIHByZXZpb3VzUmVjb25uZWN0QXR0ZW1wdHMsIHJldHJ5RXJyb3IsIG5leHRSZXRyeURlbGF5LCBlXzQ7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY29ubmVjdFN0YXJ0VGltZSA9IERhdGUubm93KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzUmVjb25uZWN0QXR0ZW1wdHMgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXRyeUVycm9yID0gZXJyb3IgIT09IHVuZGVmaW5lZCA/IGVycm9yIDogbmV3IEVycm9yKFwiQXR0ZW1wdGluZyB0byByZWNvbm5lY3QgZHVlIHRvIGEgdW5rbm93biBlcnJvci5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHRSZXRyeURlbGF5ID0gdGhpcy5nZXROZXh0UmV0cnlEZWxheShwcmV2aW91c1JlY29ubmVjdEF0dGVtcHRzKyssIDAsIHJldHJ5RXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV4dFJldHJ5RGVsYXkgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuRGVidWcsIFwiQ29ubmVjdGlvbiBub3QgcmVjb25uZWN0aW5nIGJlY2F1c2UgdGhlIElSZXRyeVBvbGljeSByZXR1cm5lZCBudWxsIG9uIHRoZSBmaXJzdCByZWNvbm5lY3QgYXR0ZW1wdC5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbXBsZXRlQ2xvc2UoZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvblN0YXRlID0gSHViQ29ubmVjdGlvblN0YXRlLlJlY29ubmVjdGluZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkluZm9ybWF0aW9uLCBcIkNvbm5lY3Rpb24gcmVjb25uZWN0aW5nIGJlY2F1c2Ugb2YgZXJyb3IgJ1wiICsgZXJyb3IgKyBcIicuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5JbmZvcm1hdGlvbiwgXCJDb25uZWN0aW9uIHJlY29ubmVjdGluZy5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub25yZWNvbm5lY3RpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWNvbm5lY3RpbmdDYWxsYmFja3MuZm9yRWFjaChmdW5jdGlvbiAoYykgeyByZXR1cm4gYy5hcHBseShfdGhpcywgW2Vycm9yXSk7IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkVycm9yLCBcIkFuIG9ucmVjb25uZWN0aW5nIGNhbGxiYWNrIGNhbGxlZCB3aXRoIGVycm9yICdcIiArIGVycm9yICsgXCInIHRocmV3IGVycm9yICdcIiArIGUgKyBcIicuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXhpdCBlYXJseSBpZiBhbiBvbnJlY29ubmVjdGluZyBjYWxsYmFjayBjYWxsZWQgY29ubmVjdGlvbi5zdG9wKCkuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jb25uZWN0aW9uU3RhdGUgIT09IEh1YkNvbm5lY3Rpb25TdGF0ZS5SZWNvbm5lY3RpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkRlYnVnLCBcIkNvbm5lY3Rpb24gbGVmdCB0aGUgcmVjb25uZWN0aW5nIHN0YXRlIGluIG9ucmVjb25uZWN0aW5nIGNhbGxiYWNrLiBEb25lIHJlY29ubmVjdGluZy5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKG5leHRSZXRyeURlbGF5ICE9PSBudWxsKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgN107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuSW5mb3JtYXRpb24sIFwiUmVjb25uZWN0IGF0dGVtcHQgbnVtYmVyIFwiICsgcHJldmlvdXNSZWNvbm5lY3RBdHRlbXB0cyArIFwiIHdpbGwgc3RhcnQgaW4gXCIgKyBuZXh0UmV0cnlEZWxheSArIFwiIG1zLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5yZWNvbm5lY3REZWxheUhhbmRsZSA9IHNldFRpbWVvdXQocmVzb2x2ZSwgbmV4dFJldHJ5RGVsYXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlY29ubmVjdERlbGF5SGFuZGxlID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jb25uZWN0aW9uU3RhdGUgIT09IEh1YkNvbm5lY3Rpb25TdGF0ZS5SZWNvbm5lY3RpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuRGVidWcsIFwiQ29ubmVjdGlvbiBsZWZ0IHRoZSByZWNvbm5lY3Rpbmcgc3RhdGUgZHVyaW5nIHJlY29ubmVjdCBkZWxheS4gRG9uZSByZWNvbm5lY3RpbmcuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnRyeXMucHVzaChbMywgNSwgLCA2XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuc3RhcnRJbnRlcm5hbCgpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uU3RhdGUgPSBIdWJDb25uZWN0aW9uU3RhdGUuQ29ubmVjdGVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkluZm9ybWF0aW9uLCBcIkh1YkNvbm5lY3Rpb24gcmVjb25uZWN0ZWQgc3VjY2Vzc2Z1bGx5LlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub25yZWNvbm5lY3RlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlY29ubmVjdGVkQ2FsbGJhY2tzLmZvckVhY2goZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMuYXBwbHkoX3RoaXMsIFtfdGhpcy5jb25uZWN0aW9uLmNvbm5lY3Rpb25JZF0pOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5FcnJvciwgXCJBbiBvbnJlY29ubmVjdGVkIGNhbGxiYWNrIGNhbGxlZCB3aXRoIGNvbm5lY3Rpb25JZCAnXCIgKyB0aGlzLmNvbm5lY3Rpb24uY29ubmVjdGlvbklkICsgXCI7IHRocmV3IGVycm9yICdcIiArIGUgKyBcIicuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVfNCA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5JbmZvcm1hdGlvbiwgXCJSZWNvbm5lY3QgYXR0ZW1wdCBmYWlsZWQgYmVjYXVzZSBvZiBlcnJvciAnXCIgKyBlXzQgKyBcIicuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jb25uZWN0aW9uU3RhdGUgIT09IEh1YkNvbm5lY3Rpb25TdGF0ZS5SZWNvbm5lY3RpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuRGVidWcsIFwiQ29ubmVjdGlvbiBsZWZ0IHRoZSByZWNvbm5lY3Rpbmcgc3RhdGUgZHVyaW5nIHJlY29ubmVjdCBhdHRlbXB0LiBEb25lIHJlY29ubmVjdGluZy5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0cnlFcnJvciA9IGVfNCBpbnN0YW5jZW9mIEVycm9yID8gZV80IDogbmV3IEVycm9yKGVfNC50b1N0cmluZygpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dFJldHJ5RGVsYXkgPSB0aGlzLmdldE5leHRSZXRyeURlbGF5KHByZXZpb3VzUmVjb25uZWN0QXR0ZW1wdHMrKywgRGF0ZS5ub3coKSAtIHJlY29ubmVjdFN0YXJ0VGltZSwgcmV0cnlFcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDZdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjogcmV0dXJuIFszIC8qYnJlYWsqLywgMV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA3OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkluZm9ybWF0aW9uLCBcIlJlY29ubmVjdCByZXRyaWVzIGhhdmUgYmVlbiBleGhhdXN0ZWQgYWZ0ZXIgXCIgKyAoRGF0ZS5ub3coKSAtIHJlY29ubmVjdFN0YXJ0VGltZSkgKyBcIiBtcyBhbmQgXCIgKyBwcmV2aW91c1JlY29ubmVjdEF0dGVtcHRzICsgXCIgZmFpbGVkIGF0dGVtcHRzLiBDb25uZWN0aW9uIGRpc2Nvbm5lY3RpbmcuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbXBsZXRlQ2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5nZXROZXh0UmV0cnlEZWxheSA9IGZ1bmN0aW9uIChwcmV2aW91c1JldHJ5Q291bnQsIGVsYXBzZWRNaWxsaXNlY29uZHMsIHJldHJ5UmVhc29uKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVjb25uZWN0UG9saWN5Lm5leHRSZXRyeURlbGF5SW5NaWxsaXNlY29uZHMoe1xyXG4gICAgICAgICAgICAgICAgZWxhcHNlZE1pbGxpc2Vjb25kczogZWxhcHNlZE1pbGxpc2Vjb25kcyxcclxuICAgICAgICAgICAgICAgIHByZXZpb3VzUmV0cnlDb3VudDogcHJldmlvdXNSZXRyeUNvdW50LFxyXG4gICAgICAgICAgICAgICAgcmV0cnlSZWFzb246IHJldHJ5UmVhc29uLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5FcnJvciwgXCJJUmV0cnlQb2xpY3kubmV4dFJldHJ5RGVsYXlJbk1pbGxpc2Vjb25kcyhcIiArIHByZXZpb3VzUmV0cnlDb3VudCArIFwiLCBcIiArIGVsYXBzZWRNaWxsaXNlY29uZHMgKyBcIikgdGhyZXcgZXJyb3IgJ1wiICsgZSArIFwiJy5cIik7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5jYW5jZWxDYWxsYmFja3NXaXRoRXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICB2YXIgY2FsbGJhY2tzID0gdGhpcy5jYWxsYmFja3M7XHJcbiAgICAgICAgdGhpcy5jYWxsYmFja3MgPSB7fTtcclxuICAgICAgICBPYmplY3Qua2V5cyhjYWxsYmFja3MpXHJcbiAgICAgICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgdmFyIGNhbGxiYWNrID0gY2FsbGJhY2tzW2tleV07XHJcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIGVycm9yKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5jbGVhbnVwUGluZ1RpbWVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnBpbmdTZXJ2ZXJIYW5kbGUpIHtcclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMucGluZ1NlcnZlckhhbmRsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEh1YkNvbm5lY3Rpb24ucHJvdG90eXBlLmNsZWFudXBUaW1lb3V0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnRpbWVvdXRIYW5kbGUpIHtcclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dEhhbmRsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEh1YkNvbm5lY3Rpb24ucHJvdG90eXBlLmNyZWF0ZUludm9jYXRpb24gPSBmdW5jdGlvbiAobWV0aG9kTmFtZSwgYXJncywgbm9uYmxvY2tpbmcsIHN0cmVhbUlkcykge1xyXG4gICAgICAgIGlmIChub25ibG9ja2luZykge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgYXJndW1lbnRzOiBhcmdzLFxyXG4gICAgICAgICAgICAgICAgc3RyZWFtSWRzOiBzdHJlYW1JZHMsXHJcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IG1ldGhvZE5hbWUsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiBJSHViUHJvdG9jb2xfMS5NZXNzYWdlVHlwZS5JbnZvY2F0aW9uLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGludm9jYXRpb25JZCA9IHRoaXMuaW52b2NhdGlvbklkO1xyXG4gICAgICAgICAgICB0aGlzLmludm9jYXRpb25JZCsrO1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgYXJndW1lbnRzOiBhcmdzLFxyXG4gICAgICAgICAgICAgICAgaW52b2NhdGlvbklkOiBpbnZvY2F0aW9uSWQudG9TdHJpbmcoKSxcclxuICAgICAgICAgICAgICAgIHN0cmVhbUlkczogc3RyZWFtSWRzLFxyXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBtZXRob2ROYW1lLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogSUh1YlByb3RvY29sXzEuTWVzc2FnZVR5cGUuSW52b2NhdGlvbixcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgSHViQ29ubmVjdGlvbi5wcm90b3R5cGUubGF1bmNoU3RyZWFtcyA9IGZ1bmN0aW9uIChzdHJlYW1zLCBwcm9taXNlUXVldWUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGlmIChzdHJlYW1zLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFN5bmNocm9uaXplIHN0cmVhbSBkYXRhIHNvIHRoZXkgYXJyaXZlIGluLW9yZGVyIG9uIHRoZSBzZXJ2ZXJcclxuICAgICAgICBpZiAoIXByb21pc2VRdWV1ZSkge1xyXG4gICAgICAgICAgICBwcm9taXNlUXVldWUgPSBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAoc3RyZWFtSWQpIHtcclxuICAgICAgICAgICAgc3RyZWFtc1tzdHJlYW1JZF0uc3Vic2NyaWJlKHtcclxuICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZVF1ZXVlID0gcHJvbWlzZVF1ZXVlLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuc2VuZFdpdGhQcm90b2NvbChfdGhpcy5jcmVhdGVDb21wbGV0aW9uTWVzc2FnZShzdHJlYW1JZCkpOyB9KTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBFcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gZXJyLm1lc3NhZ2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGVyciAmJiBlcnIudG9TdHJpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IGVyci50b1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IFwiVW5rbm93biBlcnJvclwiO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBwcm9taXNlUXVldWUgPSBwcm9taXNlUXVldWUudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5zZW5kV2l0aFByb3RvY29sKF90aGlzLmNyZWF0ZUNvbXBsZXRpb25NZXNzYWdlKHN0cmVhbUlkLCBtZXNzYWdlKSk7IH0pO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZVF1ZXVlID0gcHJvbWlzZVF1ZXVlLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuc2VuZFdpdGhQcm90b2NvbChfdGhpcy5jcmVhdGVTdHJlYW1JdGVtTWVzc2FnZShzdHJlYW1JZCwgaXRlbSkpOyB9KTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy8gV2Ugd2FudCB0byBpdGVyYXRlIG92ZXIgdGhlIGtleXMsIHNpbmNlIHRoZSBrZXlzIGFyZSB0aGUgc3RyZWFtIGlkc1xyXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpmb3JpblxyXG4gICAgICAgIGZvciAodmFyIHN0cmVhbUlkIGluIHN0cmVhbXMpIHtcclxuICAgICAgICAgICAgX2xvb3BfMShzdHJlYW1JZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEh1YkNvbm5lY3Rpb24ucHJvdG90eXBlLnJlcGxhY2VTdHJlYW1pbmdQYXJhbXMgPSBmdW5jdGlvbiAoYXJncykge1xyXG4gICAgICAgIHZhciBzdHJlYW1zID0gW107XHJcbiAgICAgICAgdmFyIHN0cmVhbUlkcyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgYXJndW1lbnQgPSBhcmdzW2ldO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pc09ic2VydmFibGUoYXJndW1lbnQpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3RyZWFtSWQgPSB0aGlzLmludm9jYXRpb25JZDtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW52b2NhdGlvbklkKys7XHJcbiAgICAgICAgICAgICAgICAvLyBTdG9yZSB0aGUgc3RyZWFtIGZvciBsYXRlciB1c2VcclxuICAgICAgICAgICAgICAgIHN0cmVhbXNbc3RyZWFtSWRdID0gYXJndW1lbnQ7XHJcbiAgICAgICAgICAgICAgICBzdHJlYW1JZHMucHVzaChzdHJlYW1JZC50b1N0cmluZygpKTtcclxuICAgICAgICAgICAgICAgIC8vIHJlbW92ZSBzdHJlYW0gZnJvbSBhcmdzXHJcbiAgICAgICAgICAgICAgICBhcmdzLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gW3N0cmVhbXMsIHN0cmVhbUlkc107XHJcbiAgICB9O1xyXG4gICAgSHViQ29ubmVjdGlvbi5wcm90b3R5cGUuaXNPYnNlcnZhYmxlID0gZnVuY3Rpb24gKGFyZykge1xyXG4gICAgICAgIC8vIFRoaXMgYWxsb3dzIG90aGVyIHN0cmVhbSBpbXBsZW1lbnRhdGlvbnMgdG8ganVzdCB3b3JrIChsaWtlIHJ4anMpXHJcbiAgICAgICAgcmV0dXJuIGFyZyAmJiBhcmcuc3Vic2NyaWJlICYmIHR5cGVvZiBhcmcuc3Vic2NyaWJlID09PSBcImZ1bmN0aW9uXCI7XHJcbiAgICB9O1xyXG4gICAgSHViQ29ubmVjdGlvbi5wcm90b3R5cGUuY3JlYXRlU3RyZWFtSW52b2NhdGlvbiA9IGZ1bmN0aW9uIChtZXRob2ROYW1lLCBhcmdzLCBzdHJlYW1JZHMpIHtcclxuICAgICAgICB2YXIgaW52b2NhdGlvbklkID0gdGhpcy5pbnZvY2F0aW9uSWQ7XHJcbiAgICAgICAgdGhpcy5pbnZvY2F0aW9uSWQrKztcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBhcmd1bWVudHM6IGFyZ3MsXHJcbiAgICAgICAgICAgIGludm9jYXRpb25JZDogaW52b2NhdGlvbklkLnRvU3RyaW5nKCksXHJcbiAgICAgICAgICAgIHN0cmVhbUlkczogc3RyZWFtSWRzLFxyXG4gICAgICAgICAgICB0YXJnZXQ6IG1ldGhvZE5hbWUsXHJcbiAgICAgICAgICAgIHR5cGU6IElIdWJQcm90b2NvbF8xLk1lc3NhZ2VUeXBlLlN0cmVhbUludm9jYXRpb24sXHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5jcmVhdGVDYW5jZWxJbnZvY2F0aW9uID0gZnVuY3Rpb24gKGlkKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgaW52b2NhdGlvbklkOiBpZCxcclxuICAgICAgICAgICAgdHlwZTogSUh1YlByb3RvY29sXzEuTWVzc2FnZVR5cGUuQ2FuY2VsSW52b2NhdGlvbixcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuICAgIEh1YkNvbm5lY3Rpb24ucHJvdG90eXBlLmNyZWF0ZVN0cmVhbUl0ZW1NZXNzYWdlID0gZnVuY3Rpb24gKGlkLCBpdGVtKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgaW52b2NhdGlvbklkOiBpZCxcclxuICAgICAgICAgICAgaXRlbTogaXRlbSxcclxuICAgICAgICAgICAgdHlwZTogSUh1YlByb3RvY29sXzEuTWVzc2FnZVR5cGUuU3RyZWFtSXRlbSxcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuICAgIEh1YkNvbm5lY3Rpb24ucHJvdG90eXBlLmNyZWF0ZUNvbXBsZXRpb25NZXNzYWdlID0gZnVuY3Rpb24gKGlkLCBlcnJvciwgcmVzdWx0KSB7XHJcbiAgICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3IsXHJcbiAgICAgICAgICAgICAgICBpbnZvY2F0aW9uSWQ6IGlkLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogSUh1YlByb3RvY29sXzEuTWVzc2FnZVR5cGUuQ29tcGxldGlvbixcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgaW52b2NhdGlvbklkOiBpZCxcclxuICAgICAgICAgICAgcmVzdWx0OiByZXN1bHQsXHJcbiAgICAgICAgICAgIHR5cGU6IElIdWJQcm90b2NvbF8xLk1lc3NhZ2VUeXBlLkNvbXBsZXRpb24sXHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gSHViQ29ubmVjdGlvbjtcclxufSgpKTtcclxuZXhwb3J0cy5IdWJDb25uZWN0aW9uID0gSHViQ29ubmVjdGlvbjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SHViQ29ubmVjdGlvbi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuLy8gQ29weXJpZ2h0IChjKSAuTkVUIEZvdW5kYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG52YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcclxuICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxyXG4gICAgICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBEZWZhdWx0UmVjb25uZWN0UG9saWN5XzEgPSByZXF1aXJlKFwiLi9EZWZhdWx0UmVjb25uZWN0UG9saWN5XCIpO1xyXG52YXIgSHR0cENvbm5lY3Rpb25fMSA9IHJlcXVpcmUoXCIuL0h0dHBDb25uZWN0aW9uXCIpO1xyXG52YXIgSHViQ29ubmVjdGlvbl8xID0gcmVxdWlyZShcIi4vSHViQ29ubmVjdGlvblwiKTtcclxudmFyIElMb2dnZXJfMSA9IHJlcXVpcmUoXCIuL0lMb2dnZXJcIik7XHJcbnZhciBKc29uSHViUHJvdG9jb2xfMSA9IHJlcXVpcmUoXCIuL0pzb25IdWJQcm90b2NvbFwiKTtcclxudmFyIExvZ2dlcnNfMSA9IHJlcXVpcmUoXCIuL0xvZ2dlcnNcIik7XHJcbnZhciBVdGlsc18xID0gcmVxdWlyZShcIi4vVXRpbHNcIik7XHJcbi8vIHRzbGludDpkaXNhYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5c1xyXG52YXIgTG9nTGV2ZWxOYW1lTWFwcGluZyA9IHtcclxuICAgIHRyYWNlOiBJTG9nZ2VyXzEuTG9nTGV2ZWwuVHJhY2UsXHJcbiAgICBkZWJ1ZzogSUxvZ2dlcl8xLkxvZ0xldmVsLkRlYnVnLFxyXG4gICAgaW5mbzogSUxvZ2dlcl8xLkxvZ0xldmVsLkluZm9ybWF0aW9uLFxyXG4gICAgaW5mb3JtYXRpb246IElMb2dnZXJfMS5Mb2dMZXZlbC5JbmZvcm1hdGlvbixcclxuICAgIHdhcm46IElMb2dnZXJfMS5Mb2dMZXZlbC5XYXJuaW5nLFxyXG4gICAgd2FybmluZzogSUxvZ2dlcl8xLkxvZ0xldmVsLldhcm5pbmcsXHJcbiAgICBlcnJvcjogSUxvZ2dlcl8xLkxvZ0xldmVsLkVycm9yLFxyXG4gICAgY3JpdGljYWw6IElMb2dnZXJfMS5Mb2dMZXZlbC5Dcml0aWNhbCxcclxuICAgIG5vbmU6IElMb2dnZXJfMS5Mb2dMZXZlbC5Ob25lLFxyXG59O1xyXG5mdW5jdGlvbiBwYXJzZUxvZ0xldmVsKG5hbWUpIHtcclxuICAgIC8vIENhc2UtaW5zZW5zaXRpdmUgbWF0Y2hpbmcgdmlhIGxvd2VyLWNhc2luZ1xyXG4gICAgLy8gWWVzLCBJIGtub3cgY2FzZS1mb2xkaW5nIGlzIGEgY29tcGxpY2F0ZWQgcHJvYmxlbSBpbiBVbmljb2RlLCBidXQgd2Ugb25seSBzdXBwb3J0XHJcbiAgICAvLyB0aGUgQVNDSUkgc3RyaW5ncyBkZWZpbmVkIGluIExvZ0xldmVsTmFtZU1hcHBpbmcgYW55d2F5LCBzbyBpdCdzIGZpbmUgLWFudXJzZS5cclxuICAgIHZhciBtYXBwaW5nID0gTG9nTGV2ZWxOYW1lTWFwcGluZ1tuYW1lLnRvTG93ZXJDYXNlKCldO1xyXG4gICAgaWYgKHR5cGVvZiBtYXBwaW5nICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgcmV0dXJuIG1hcHBpbmc7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIGxvZyBsZXZlbDogXCIgKyBuYW1lKTtcclxuICAgIH1cclxufVxyXG4vKiogQSBidWlsZGVyIGZvciBjb25maWd1cmluZyB7QGxpbmsgQG1pY3Jvc29mdC9zaWduYWxyLkh1YkNvbm5lY3Rpb259IGluc3RhbmNlcy4gKi9cclxudmFyIEh1YkNvbm5lY3Rpb25CdWlsZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gSHViQ29ubmVjdGlvbkJ1aWxkZXIoKSB7XHJcbiAgICB9XHJcbiAgICBIdWJDb25uZWN0aW9uQnVpbGRlci5wcm90b3R5cGUuY29uZmlndXJlTG9nZ2luZyA9IGZ1bmN0aW9uIChsb2dnaW5nKSB7XHJcbiAgICAgICAgVXRpbHNfMS5BcmcuaXNSZXF1aXJlZChsb2dnaW5nLCBcImxvZ2dpbmdcIik7XHJcbiAgICAgICAgaWYgKGlzTG9nZ2VyKGxvZ2dpbmcpKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyID0gbG9nZ2luZztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGxvZ2dpbmcgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgdmFyIGxvZ0xldmVsID0gcGFyc2VMb2dMZXZlbChsb2dnaW5nKTtcclxuICAgICAgICAgICAgdGhpcy5sb2dnZXIgPSBuZXcgVXRpbHNfMS5Db25zb2xlTG9nZ2VyKGxvZ0xldmVsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyID0gbmV3IFV0aWxzXzEuQ29uc29sZUxvZ2dlcihsb2dnaW5nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgSHViQ29ubmVjdGlvbkJ1aWxkZXIucHJvdG90eXBlLndpdGhVcmwgPSBmdW5jdGlvbiAodXJsLCB0cmFuc3BvcnRUeXBlT3JPcHRpb25zKSB7XHJcbiAgICAgICAgVXRpbHNfMS5BcmcuaXNSZXF1aXJlZCh1cmwsIFwidXJsXCIpO1xyXG4gICAgICAgIHRoaXMudXJsID0gdXJsO1xyXG4gICAgICAgIC8vIEZsb3ctdHlwaW5nIGtub3dzIHdoZXJlIGl0J3MgYXQuIFNpbmNlIEh0dHBUcmFuc3BvcnRUeXBlIGlzIGEgbnVtYmVyIGFuZCBJSHR0cENvbm5lY3Rpb25PcHRpb25zIGlzIGd1YXJhbnRlZWRcclxuICAgICAgICAvLyB0byBiZSBhbiBvYmplY3QsIHdlIGtub3cgKGFzIGRvZXMgVHlwZVNjcmlwdCkgdGhpcyBjb21wYXJpc29uIGlzIGFsbCB3ZSBuZWVkIHRvIGZpZ3VyZSBvdXQgd2hpY2ggb3ZlcmxvYWQgd2FzIGNhbGxlZC5cclxuICAgICAgICBpZiAodHlwZW9mIHRyYW5zcG9ydFR5cGVPck9wdGlvbnMgPT09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICAgICAgdGhpcy5odHRwQ29ubmVjdGlvbk9wdGlvbnMgPSBfX2Fzc2lnbih7fSwgdGhpcy5odHRwQ29ubmVjdGlvbk9wdGlvbnMsIHRyYW5zcG9ydFR5cGVPck9wdGlvbnMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5odHRwQ29ubmVjdGlvbk9wdGlvbnMgPSBfX2Fzc2lnbih7fSwgdGhpcy5odHRwQ29ubmVjdGlvbk9wdGlvbnMsIHsgdHJhbnNwb3J0OiB0cmFuc3BvcnRUeXBlT3JPcHRpb25zIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICAvKiogQ29uZmlndXJlcyB0aGUge0BsaW5rIEBtaWNyb3NvZnQvc2lnbmFsci5IdWJDb25uZWN0aW9ufSB0byB1c2UgdGhlIHNwZWNpZmllZCBIdWIgUHJvdG9jb2wuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtJSHViUHJvdG9jb2x9IHByb3RvY29sIFRoZSB7QGxpbmsgQG1pY3Jvc29mdC9zaWduYWxyLklIdWJQcm90b2NvbH0gaW1wbGVtZW50YXRpb24gdG8gdXNlLlxyXG4gICAgICovXHJcbiAgICBIdWJDb25uZWN0aW9uQnVpbGRlci5wcm90b3R5cGUud2l0aEh1YlByb3RvY29sID0gZnVuY3Rpb24gKHByb3RvY29sKSB7XHJcbiAgICAgICAgVXRpbHNfMS5BcmcuaXNSZXF1aXJlZChwcm90b2NvbCwgXCJwcm90b2NvbFwiKTtcclxuICAgICAgICB0aGlzLnByb3RvY29sID0gcHJvdG9jb2w7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgSHViQ29ubmVjdGlvbkJ1aWxkZXIucHJvdG90eXBlLndpdGhBdXRvbWF0aWNSZWNvbm5lY3QgPSBmdW5jdGlvbiAocmV0cnlEZWxheXNPclJlY29ubmVjdFBvbGljeSkge1xyXG4gICAgICAgIGlmICh0aGlzLnJlY29ubmVjdFBvbGljeSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIHJlY29ubmVjdFBvbGljeSBoYXMgYWxyZWFkeSBiZWVuIHNldC5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghcmV0cnlEZWxheXNPclJlY29ubmVjdFBvbGljeSkge1xyXG4gICAgICAgICAgICB0aGlzLnJlY29ubmVjdFBvbGljeSA9IG5ldyBEZWZhdWx0UmVjb25uZWN0UG9saWN5XzEuRGVmYXVsdFJlY29ubmVjdFBvbGljeSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KHJldHJ5RGVsYXlzT3JSZWNvbm5lY3RQb2xpY3kpKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVjb25uZWN0UG9saWN5ID0gbmV3IERlZmF1bHRSZWNvbm5lY3RQb2xpY3lfMS5EZWZhdWx0UmVjb25uZWN0UG9saWN5KHJldHJ5RGVsYXlzT3JSZWNvbm5lY3RQb2xpY3kpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5yZWNvbm5lY3RQb2xpY3kgPSByZXRyeURlbGF5c09yUmVjb25uZWN0UG9saWN5O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICAvKiogQ3JlYXRlcyBhIHtAbGluayBAbWljcm9zb2Z0L3NpZ25hbHIuSHViQ29ubmVjdGlvbn0gZnJvbSB0aGUgY29uZmlndXJhdGlvbiBvcHRpb25zIHNwZWNpZmllZCBpbiB0aGlzIGJ1aWxkZXIuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge0h1YkNvbm5lY3Rpb259IFRoZSBjb25maWd1cmVkIHtAbGluayBAbWljcm9zb2Z0L3NpZ25hbHIuSHViQ29ubmVjdGlvbn0uXHJcbiAgICAgKi9cclxuICAgIEh1YkNvbm5lY3Rpb25CdWlsZGVyLnByb3RvdHlwZS5idWlsZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBJZiBodHRwQ29ubmVjdGlvbk9wdGlvbnMgaGFzIGEgbG9nZ2VyLCB1c2UgaXQuIE90aGVyd2lzZSwgb3ZlcnJpZGUgaXQgd2l0aCB0aGUgb25lXHJcbiAgICAgICAgLy8gcHJvdmlkZWQgdG8gY29uZmlndXJlTG9nZ2VyXHJcbiAgICAgICAgdmFyIGh0dHBDb25uZWN0aW9uT3B0aW9ucyA9IHRoaXMuaHR0cENvbm5lY3Rpb25PcHRpb25zIHx8IHt9O1xyXG4gICAgICAgIC8vIElmIGl0J3MgJ251bGwnLCB0aGUgdXNlciAqKmV4cGxpY2l0bHkqKiBhc2tlZCBmb3IgbnVsbCwgZG9uJ3QgbWVzcyB3aXRoIGl0LlxyXG4gICAgICAgIGlmIChodHRwQ29ubmVjdGlvbk9wdGlvbnMubG9nZ2VyID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgLy8gSWYgb3VyIGxvZ2dlciBpcyB1bmRlZmluZWQgb3IgbnVsbCwgdGhhdCdzIE9LLCB0aGUgSHR0cENvbm5lY3Rpb24gY29uc3RydWN0b3Igd2lsbCBoYW5kbGUgaXQuXHJcbiAgICAgICAgICAgIGh0dHBDb25uZWN0aW9uT3B0aW9ucy5sb2dnZXIgPSB0aGlzLmxvZ2dlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gTm93IGNyZWF0ZSB0aGUgY29ubmVjdGlvblxyXG4gICAgICAgIGlmICghdGhpcy51cmwpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlICdIdWJDb25uZWN0aW9uQnVpbGRlci53aXRoVXJsJyBtZXRob2QgbXVzdCBiZSBjYWxsZWQgYmVmb3JlIGJ1aWxkaW5nIHRoZSBjb25uZWN0aW9uLlwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGNvbm5lY3Rpb24gPSBuZXcgSHR0cENvbm5lY3Rpb25fMS5IdHRwQ29ubmVjdGlvbih0aGlzLnVybCwgaHR0cENvbm5lY3Rpb25PcHRpb25zKTtcclxuICAgICAgICByZXR1cm4gSHViQ29ubmVjdGlvbl8xLkh1YkNvbm5lY3Rpb24uY3JlYXRlKGNvbm5lY3Rpb24sIHRoaXMubG9nZ2VyIHx8IExvZ2dlcnNfMS5OdWxsTG9nZ2VyLmluc3RhbmNlLCB0aGlzLnByb3RvY29sIHx8IG5ldyBKc29uSHViUHJvdG9jb2xfMS5Kc29uSHViUHJvdG9jb2woKSwgdGhpcy5yZWNvbm5lY3RQb2xpY3kpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBIdWJDb25uZWN0aW9uQnVpbGRlcjtcclxufSgpKTtcclxuZXhwb3J0cy5IdWJDb25uZWN0aW9uQnVpbGRlciA9IEh1YkNvbm5lY3Rpb25CdWlsZGVyO1xyXG5mdW5jdGlvbiBpc0xvZ2dlcihsb2dnZXIpIHtcclxuICAgIHJldHVybiBsb2dnZXIubG9nICE9PSB1bmRlZmluZWQ7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SHViQ29ubmVjdGlvbkJ1aWxkZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8vIENvcHlyaWdodCAoYykgLk5FVCBGb3VuZGF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG4vKiogRGVmaW5lcyB0aGUgdHlwZSBvZiBhIEh1YiBNZXNzYWdlLiAqL1xyXG52YXIgTWVzc2FnZVR5cGU7XHJcbihmdW5jdGlvbiAoTWVzc2FnZVR5cGUpIHtcclxuICAgIC8qKiBJbmRpY2F0ZXMgdGhlIG1lc3NhZ2UgaXMgYW4gSW52b2NhdGlvbiBtZXNzYWdlIGFuZCBpbXBsZW1lbnRzIHRoZSB7QGxpbmsgQG1pY3Jvc29mdC9zaWduYWxyLkludm9jYXRpb25NZXNzYWdlfSBpbnRlcmZhY2UuICovXHJcbiAgICBNZXNzYWdlVHlwZVtNZXNzYWdlVHlwZVtcIkludm9jYXRpb25cIl0gPSAxXSA9IFwiSW52b2NhdGlvblwiO1xyXG4gICAgLyoqIEluZGljYXRlcyB0aGUgbWVzc2FnZSBpcyBhIFN0cmVhbUl0ZW0gbWVzc2FnZSBhbmQgaW1wbGVtZW50cyB0aGUge0BsaW5rIEBtaWNyb3NvZnQvc2lnbmFsci5TdHJlYW1JdGVtTWVzc2FnZX0gaW50ZXJmYWNlLiAqL1xyXG4gICAgTWVzc2FnZVR5cGVbTWVzc2FnZVR5cGVbXCJTdHJlYW1JdGVtXCJdID0gMl0gPSBcIlN0cmVhbUl0ZW1cIjtcclxuICAgIC8qKiBJbmRpY2F0ZXMgdGhlIG1lc3NhZ2UgaXMgYSBDb21wbGV0aW9uIG1lc3NhZ2UgYW5kIGltcGxlbWVudHMgdGhlIHtAbGluayBAbWljcm9zb2Z0L3NpZ25hbHIuQ29tcGxldGlvbk1lc3NhZ2V9IGludGVyZmFjZS4gKi9cclxuICAgIE1lc3NhZ2VUeXBlW01lc3NhZ2VUeXBlW1wiQ29tcGxldGlvblwiXSA9IDNdID0gXCJDb21wbGV0aW9uXCI7XHJcbiAgICAvKiogSW5kaWNhdGVzIHRoZSBtZXNzYWdlIGlzIGEgU3RyZWFtIEludm9jYXRpb24gbWVzc2FnZSBhbmQgaW1wbGVtZW50cyB0aGUge0BsaW5rIEBtaWNyb3NvZnQvc2lnbmFsci5TdHJlYW1JbnZvY2F0aW9uTWVzc2FnZX0gaW50ZXJmYWNlLiAqL1xyXG4gICAgTWVzc2FnZVR5cGVbTWVzc2FnZVR5cGVbXCJTdHJlYW1JbnZvY2F0aW9uXCJdID0gNF0gPSBcIlN0cmVhbUludm9jYXRpb25cIjtcclxuICAgIC8qKiBJbmRpY2F0ZXMgdGhlIG1lc3NhZ2UgaXMgYSBDYW5jZWwgSW52b2NhdGlvbiBtZXNzYWdlIGFuZCBpbXBsZW1lbnRzIHRoZSB7QGxpbmsgQG1pY3Jvc29mdC9zaWduYWxyLkNhbmNlbEludm9jYXRpb25NZXNzYWdlfSBpbnRlcmZhY2UuICovXHJcbiAgICBNZXNzYWdlVHlwZVtNZXNzYWdlVHlwZVtcIkNhbmNlbEludm9jYXRpb25cIl0gPSA1XSA9IFwiQ2FuY2VsSW52b2NhdGlvblwiO1xyXG4gICAgLyoqIEluZGljYXRlcyB0aGUgbWVzc2FnZSBpcyBhIFBpbmcgbWVzc2FnZSBhbmQgaW1wbGVtZW50cyB0aGUge0BsaW5rIEBtaWNyb3NvZnQvc2lnbmFsci5QaW5nTWVzc2FnZX0gaW50ZXJmYWNlLiAqL1xyXG4gICAgTWVzc2FnZVR5cGVbTWVzc2FnZVR5cGVbXCJQaW5nXCJdID0gNl0gPSBcIlBpbmdcIjtcclxuICAgIC8qKiBJbmRpY2F0ZXMgdGhlIG1lc3NhZ2UgaXMgYSBDbG9zZSBtZXNzYWdlIGFuZCBpbXBsZW1lbnRzIHRoZSB7QGxpbmsgQG1pY3Jvc29mdC9zaWduYWxyLkNsb3NlTWVzc2FnZX0gaW50ZXJmYWNlLiAqL1xyXG4gICAgTWVzc2FnZVR5cGVbTWVzc2FnZVR5cGVbXCJDbG9zZVwiXSA9IDddID0gXCJDbG9zZVwiO1xyXG59KShNZXNzYWdlVHlwZSA9IGV4cG9ydHMuTWVzc2FnZVR5cGUgfHwgKGV4cG9ydHMuTWVzc2FnZVR5cGUgPSB7fSkpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1JSHViUHJvdG9jb2wuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8vIENvcHlyaWdodCAoYykgLk5FVCBGb3VuZGF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG4vLyBUaGVzZSB2YWx1ZXMgYXJlIGRlc2lnbmVkIHRvIG1hdGNoIHRoZSBBU1AuTkVUIExvZyBMZXZlbHMgc2luY2UgdGhhdCdzIHRoZSBwYXR0ZXJuIHdlJ3JlIGVtdWxhdGluZyBoZXJlLlxyXG4vKiogSW5kaWNhdGVzIHRoZSBzZXZlcml0eSBvZiBhIGxvZyBtZXNzYWdlLlxyXG4gKlxyXG4gKiBMb2cgTGV2ZWxzIGFyZSBvcmRlcmVkIGluIGluY3JlYXNpbmcgc2V2ZXJpdHkuIFNvIGBEZWJ1Z2AgaXMgbW9yZSBzZXZlcmUgdGhhbiBgVHJhY2VgLCBldGMuXHJcbiAqL1xyXG52YXIgTG9nTGV2ZWw7XHJcbihmdW5jdGlvbiAoTG9nTGV2ZWwpIHtcclxuICAgIC8qKiBMb2cgbGV2ZWwgZm9yIHZlcnkgbG93IHNldmVyaXR5IGRpYWdub3N0aWMgbWVzc2FnZXMuICovXHJcbiAgICBMb2dMZXZlbFtMb2dMZXZlbFtcIlRyYWNlXCJdID0gMF0gPSBcIlRyYWNlXCI7XHJcbiAgICAvKiogTG9nIGxldmVsIGZvciBsb3cgc2V2ZXJpdHkgZGlhZ25vc3RpYyBtZXNzYWdlcy4gKi9cclxuICAgIExvZ0xldmVsW0xvZ0xldmVsW1wiRGVidWdcIl0gPSAxXSA9IFwiRGVidWdcIjtcclxuICAgIC8qKiBMb2cgbGV2ZWwgZm9yIGluZm9ybWF0aW9uYWwgZGlhZ25vc3RpYyBtZXNzYWdlcy4gKi9cclxuICAgIExvZ0xldmVsW0xvZ0xldmVsW1wiSW5mb3JtYXRpb25cIl0gPSAyXSA9IFwiSW5mb3JtYXRpb25cIjtcclxuICAgIC8qKiBMb2cgbGV2ZWwgZm9yIGRpYWdub3N0aWMgbWVzc2FnZXMgdGhhdCBpbmRpY2F0ZSBhIG5vbi1mYXRhbCBwcm9ibGVtLiAqL1xyXG4gICAgTG9nTGV2ZWxbTG9nTGV2ZWxbXCJXYXJuaW5nXCJdID0gM10gPSBcIldhcm5pbmdcIjtcclxuICAgIC8qKiBMb2cgbGV2ZWwgZm9yIGRpYWdub3N0aWMgbWVzc2FnZXMgdGhhdCBpbmRpY2F0ZSBhIGZhaWx1cmUgaW4gdGhlIGN1cnJlbnQgb3BlcmF0aW9uLiAqL1xyXG4gICAgTG9nTGV2ZWxbTG9nTGV2ZWxbXCJFcnJvclwiXSA9IDRdID0gXCJFcnJvclwiO1xyXG4gICAgLyoqIExvZyBsZXZlbCBmb3IgZGlhZ25vc3RpYyBtZXNzYWdlcyB0aGF0IGluZGljYXRlIGEgZmFpbHVyZSB0aGF0IHdpbGwgdGVybWluYXRlIHRoZSBlbnRpcmUgYXBwbGljYXRpb24uICovXHJcbiAgICBMb2dMZXZlbFtMb2dMZXZlbFtcIkNyaXRpY2FsXCJdID0gNV0gPSBcIkNyaXRpY2FsXCI7XHJcbiAgICAvKiogVGhlIGhpZ2hlc3QgcG9zc2libGUgbG9nIGxldmVsLiBVc2VkIHdoZW4gY29uZmlndXJpbmcgbG9nZ2luZyB0byBpbmRpY2F0ZSB0aGF0IG5vIGxvZyBtZXNzYWdlcyBzaG91bGQgYmUgZW1pdHRlZC4gKi9cclxuICAgIExvZ0xldmVsW0xvZ0xldmVsW1wiTm9uZVwiXSA9IDZdID0gXCJOb25lXCI7XHJcbn0pKExvZ0xldmVsID0gZXhwb3J0cy5Mb2dMZXZlbCB8fCAoZXhwb3J0cy5Mb2dMZXZlbCA9IHt9KSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUlMb2dnZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8vIENvcHlyaWdodCAoYykgLk5FVCBGb3VuZGF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG4vLyBUaGlzIHdpbGwgYmUgdHJlYXRlZCBhcyBhIGJpdCBmbGFnIGluIHRoZSBmdXR1cmUsIHNvIHdlIGtlZXAgaXQgdXNpbmcgcG93ZXItb2YtdHdvIHZhbHVlcy5cclxuLyoqIFNwZWNpZmllcyBhIHNwZWNpZmljIEhUVFAgdHJhbnNwb3J0IHR5cGUuICovXHJcbnZhciBIdHRwVHJhbnNwb3J0VHlwZTtcclxuKGZ1bmN0aW9uIChIdHRwVHJhbnNwb3J0VHlwZSkge1xyXG4gICAgLyoqIFNwZWNpZmllcyBubyB0cmFuc3BvcnQgcHJlZmVyZW5jZS4gKi9cclxuICAgIEh0dHBUcmFuc3BvcnRUeXBlW0h0dHBUcmFuc3BvcnRUeXBlW1wiTm9uZVwiXSA9IDBdID0gXCJOb25lXCI7XHJcbiAgICAvKiogU3BlY2lmaWVzIHRoZSBXZWJTb2NrZXRzIHRyYW5zcG9ydC4gKi9cclxuICAgIEh0dHBUcmFuc3BvcnRUeXBlW0h0dHBUcmFuc3BvcnRUeXBlW1wiV2ViU29ja2V0c1wiXSA9IDFdID0gXCJXZWJTb2NrZXRzXCI7XHJcbiAgICAvKiogU3BlY2lmaWVzIHRoZSBTZXJ2ZXItU2VudCBFdmVudHMgdHJhbnNwb3J0LiAqL1xyXG4gICAgSHR0cFRyYW5zcG9ydFR5cGVbSHR0cFRyYW5zcG9ydFR5cGVbXCJTZXJ2ZXJTZW50RXZlbnRzXCJdID0gMl0gPSBcIlNlcnZlclNlbnRFdmVudHNcIjtcclxuICAgIC8qKiBTcGVjaWZpZXMgdGhlIExvbmcgUG9sbGluZyB0cmFuc3BvcnQuICovXHJcbiAgICBIdHRwVHJhbnNwb3J0VHlwZVtIdHRwVHJhbnNwb3J0VHlwZVtcIkxvbmdQb2xsaW5nXCJdID0gNF0gPSBcIkxvbmdQb2xsaW5nXCI7XHJcbn0pKEh0dHBUcmFuc3BvcnRUeXBlID0gZXhwb3J0cy5IdHRwVHJhbnNwb3J0VHlwZSB8fCAoZXhwb3J0cy5IdHRwVHJhbnNwb3J0VHlwZSA9IHt9KSk7XHJcbi8qKiBTcGVjaWZpZXMgdGhlIHRyYW5zZmVyIGZvcm1hdCBmb3IgYSBjb25uZWN0aW9uLiAqL1xyXG52YXIgVHJhbnNmZXJGb3JtYXQ7XHJcbihmdW5jdGlvbiAoVHJhbnNmZXJGb3JtYXQpIHtcclxuICAgIC8qKiBTcGVjaWZpZXMgdGhhdCBvbmx5IHRleHQgZGF0YSB3aWxsIGJlIHRyYW5zbWl0dGVkIG92ZXIgdGhlIGNvbm5lY3Rpb24uICovXHJcbiAgICBUcmFuc2ZlckZvcm1hdFtUcmFuc2ZlckZvcm1hdFtcIlRleHRcIl0gPSAxXSA9IFwiVGV4dFwiO1xyXG4gICAgLyoqIFNwZWNpZmllcyB0aGF0IGJpbmFyeSBkYXRhIHdpbGwgYmUgdHJhbnNtaXR0ZWQgb3ZlciB0aGUgY29ubmVjdGlvbi4gKi9cclxuICAgIFRyYW5zZmVyRm9ybWF0W1RyYW5zZmVyRm9ybWF0W1wiQmluYXJ5XCJdID0gMl0gPSBcIkJpbmFyeVwiO1xyXG59KShUcmFuc2ZlckZvcm1hdCA9IGV4cG9ydHMuVHJhbnNmZXJGb3JtYXQgfHwgKGV4cG9ydHMuVHJhbnNmZXJGb3JtYXQgPSB7fSkpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1JVHJhbnNwb3J0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG4vLyBDb3B5cmlnaHQgKGMpIC5ORVQgRm91bmRhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIElIdWJQcm90b2NvbF8xID0gcmVxdWlyZShcIi4vSUh1YlByb3RvY29sXCIpO1xyXG52YXIgSUxvZ2dlcl8xID0gcmVxdWlyZShcIi4vSUxvZ2dlclwiKTtcclxudmFyIElUcmFuc3BvcnRfMSA9IHJlcXVpcmUoXCIuL0lUcmFuc3BvcnRcIik7XHJcbnZhciBMb2dnZXJzXzEgPSByZXF1aXJlKFwiLi9Mb2dnZXJzXCIpO1xyXG52YXIgVGV4dE1lc3NhZ2VGb3JtYXRfMSA9IHJlcXVpcmUoXCIuL1RleHRNZXNzYWdlRm9ybWF0XCIpO1xyXG52YXIgSlNPTl9IVUJfUFJPVE9DT0xfTkFNRSA9IFwianNvblwiO1xyXG4vKiogSW1wbGVtZW50cyB0aGUgSlNPTiBIdWIgUHJvdG9jb2wuICovXHJcbnZhciBKc29uSHViUHJvdG9jb2wgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBKc29uSHViUHJvdG9jb2woKSB7XHJcbiAgICAgICAgLyoqIEBpbmhlcml0RG9jICovXHJcbiAgICAgICAgdGhpcy5uYW1lID0gSlNPTl9IVUJfUFJPVE9DT0xfTkFNRTtcclxuICAgICAgICAvKiogQGluaGVyaXREb2MgKi9cclxuICAgICAgICB0aGlzLnZlcnNpb24gPSAxO1xyXG4gICAgICAgIC8qKiBAaW5oZXJpdERvYyAqL1xyXG4gICAgICAgIHRoaXMudHJhbnNmZXJGb3JtYXQgPSBJVHJhbnNwb3J0XzEuVHJhbnNmZXJGb3JtYXQuVGV4dDtcclxuICAgIH1cclxuICAgIC8qKiBDcmVhdGVzIGFuIGFycmF5IG9mIHtAbGluayBAbWljcm9zb2Z0L3NpZ25hbHIuSHViTWVzc2FnZX0gb2JqZWN0cyBmcm9tIHRoZSBzcGVjaWZpZWQgc2VyaWFsaXplZCByZXByZXNlbnRhdGlvbi5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaW5wdXQgQSBzdHJpbmcgY29udGFpbmluZyB0aGUgc2VyaWFsaXplZCByZXByZXNlbnRhdGlvbi5cclxuICAgICAqIEBwYXJhbSB7SUxvZ2dlcn0gbG9nZ2VyIEEgbG9nZ2VyIHRoYXQgd2lsbCBiZSB1c2VkIHRvIGxvZyBtZXNzYWdlcyB0aGF0IG9jY3VyIGR1cmluZyBwYXJzaW5nLlxyXG4gICAgICovXHJcbiAgICBKc29uSHViUHJvdG9jb2wucHJvdG90eXBlLnBhcnNlTWVzc2FnZXMgPSBmdW5jdGlvbiAoaW5wdXQsIGxvZ2dlcikge1xyXG4gICAgICAgIC8vIFRoZSBpbnRlcmZhY2UgZG9lcyBhbGxvdyBcIkFycmF5QnVmZmVyXCIgdG8gYmUgcGFzc2VkIGluLCBidXQgdGhpcyBpbXBsZW1lbnRhdGlvbiBkb2VzIG5vdC4gU28gbGV0J3MgdGhyb3cgYSB1c2VmdWwgZXJyb3IuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGlucHV0IGZvciBKU09OIGh1YiBwcm90b2NvbC4gRXhwZWN0ZWQgYSBzdHJpbmcuXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIWlucHV0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGxvZ2dlciA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICBsb2dnZXIgPSBMb2dnZXJzXzEuTnVsbExvZ2dlci5pbnN0YW5jZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gUGFyc2UgdGhlIG1lc3NhZ2VzXHJcbiAgICAgICAgdmFyIG1lc3NhZ2VzID0gVGV4dE1lc3NhZ2VGb3JtYXRfMS5UZXh0TWVzc2FnZUZvcm1hdC5wYXJzZShpbnB1dCk7XHJcbiAgICAgICAgdmFyIGh1Yk1lc3NhZ2VzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBtZXNzYWdlc18xID0gbWVzc2FnZXM7IF9pIDwgbWVzc2FnZXNfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIG1lc3NhZ2UgPSBtZXNzYWdlc18xW19pXTtcclxuICAgICAgICAgICAgdmFyIHBhcnNlZE1lc3NhZ2UgPSBKU09OLnBhcnNlKG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHBhcnNlZE1lc3NhZ2UudHlwZSAhPT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBwYXlsb2FkLlwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzd2l0Y2ggKHBhcnNlZE1lc3NhZ2UudHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBJSHViUHJvdG9jb2xfMS5NZXNzYWdlVHlwZS5JbnZvY2F0aW9uOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNJbnZvY2F0aW9uTWVzc2FnZShwYXJzZWRNZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgSUh1YlByb3RvY29sXzEuTWVzc2FnZVR5cGUuU3RyZWFtSXRlbTpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzU3RyZWFtSXRlbU1lc3NhZ2UocGFyc2VkTWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIElIdWJQcm90b2NvbF8xLk1lc3NhZ2VUeXBlLkNvbXBsZXRpb246XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0NvbXBsZXRpb25NZXNzYWdlKHBhcnNlZE1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBJSHViUHJvdG9jb2xfMS5NZXNzYWdlVHlwZS5QaW5nOlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFNpbmdsZSB2YWx1ZSwgbm8gbmVlZCB0byB2YWxpZGF0ZVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBJSHViUHJvdG9jb2xfMS5NZXNzYWdlVHlwZS5DbG9zZTpcclxuICAgICAgICAgICAgICAgICAgICAvLyBBbGwgb3B0aW9uYWwgdmFsdWVzLCBubyBuZWVkIHRvIHZhbGlkYXRlXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEZ1dHVyZSBwcm90b2NvbCBjaGFuZ2VzIGNhbiBhZGQgbWVzc2FnZSB0eXBlcywgb2xkIGNsaWVudHMgY2FuIGlnbm9yZSB0aGVtXHJcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuSW5mb3JtYXRpb24sIFwiVW5rbm93biBtZXNzYWdlIHR5cGUgJ1wiICsgcGFyc2VkTWVzc2FnZS50eXBlICsgXCInIGlnbm9yZWQuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGh1Yk1lc3NhZ2VzLnB1c2gocGFyc2VkTWVzc2FnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBodWJNZXNzYWdlcztcclxuICAgIH07XHJcbiAgICAvKiogV3JpdGVzIHRoZSBzcGVjaWZpZWQge0BsaW5rIEBtaWNyb3NvZnQvc2lnbmFsci5IdWJNZXNzYWdlfSB0byBhIHN0cmluZyBhbmQgcmV0dXJucyBpdC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0h1Yk1lc3NhZ2V9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gd3JpdGUuXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBBIHN0cmluZyBjb250YWluaW5nIHRoZSBzZXJpYWxpemVkIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBtZXNzYWdlLlxyXG4gICAgICovXHJcbiAgICBKc29uSHViUHJvdG9jb2wucHJvdG90eXBlLndyaXRlTWVzc2FnZSA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XHJcbiAgICAgICAgcmV0dXJuIFRleHRNZXNzYWdlRm9ybWF0XzEuVGV4dE1lc3NhZ2VGb3JtYXQud3JpdGUoSlNPTi5zdHJpbmdpZnkobWVzc2FnZSkpO1xyXG4gICAgfTtcclxuICAgIEpzb25IdWJQcm90b2NvbC5wcm90b3R5cGUuaXNJbnZvY2F0aW9uTWVzc2FnZSA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XHJcbiAgICAgICAgdGhpcy5hc3NlcnROb3RFbXB0eVN0cmluZyhtZXNzYWdlLnRhcmdldCwgXCJJbnZhbGlkIHBheWxvYWQgZm9yIEludm9jYXRpb24gbWVzc2FnZS5cIik7XHJcbiAgICAgICAgaWYgKG1lc3NhZ2UuaW52b2NhdGlvbklkICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5hc3NlcnROb3RFbXB0eVN0cmluZyhtZXNzYWdlLmludm9jYXRpb25JZCwgXCJJbnZhbGlkIHBheWxvYWQgZm9yIEludm9jYXRpb24gbWVzc2FnZS5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEpzb25IdWJQcm90b2NvbC5wcm90b3R5cGUuaXNTdHJlYW1JdGVtTWVzc2FnZSA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XHJcbiAgICAgICAgdGhpcy5hc3NlcnROb3RFbXB0eVN0cmluZyhtZXNzYWdlLmludm9jYXRpb25JZCwgXCJJbnZhbGlkIHBheWxvYWQgZm9yIFN0cmVhbUl0ZW0gbWVzc2FnZS5cIik7XHJcbiAgICAgICAgaWYgKG1lc3NhZ2UuaXRlbSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgcGF5bG9hZCBmb3IgU3RyZWFtSXRlbSBtZXNzYWdlLlwiKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgSnNvbkh1YlByb3RvY29sLnByb3RvdHlwZS5pc0NvbXBsZXRpb25NZXNzYWdlID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcclxuICAgICAgICBpZiAobWVzc2FnZS5yZXN1bHQgJiYgbWVzc2FnZS5lcnJvcikge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHBheWxvYWQgZm9yIENvbXBsZXRpb24gbWVzc2FnZS5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghbWVzc2FnZS5yZXN1bHQgJiYgbWVzc2FnZS5lcnJvcikge1xyXG4gICAgICAgICAgICB0aGlzLmFzc2VydE5vdEVtcHR5U3RyaW5nKG1lc3NhZ2UuZXJyb3IsIFwiSW52YWxpZCBwYXlsb2FkIGZvciBDb21wbGV0aW9uIG1lc3NhZ2UuXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmFzc2VydE5vdEVtcHR5U3RyaW5nKG1lc3NhZ2UuaW52b2NhdGlvbklkLCBcIkludmFsaWQgcGF5bG9hZCBmb3IgQ29tcGxldGlvbiBtZXNzYWdlLlwiKTtcclxuICAgIH07XHJcbiAgICBKc29uSHViUHJvdG9jb2wucHJvdG90eXBlLmFzc2VydE5vdEVtcHR5U3RyaW5nID0gZnVuY3Rpb24gKHZhbHVlLCBlcnJvck1lc3NhZ2UpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcInN0cmluZ1wiIHx8IHZhbHVlID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gSnNvbkh1YlByb3RvY29sO1xyXG59KCkpO1xyXG5leHBvcnRzLkpzb25IdWJQcm90b2NvbCA9IEpzb25IdWJQcm90b2NvbDtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SnNvbkh1YlByb3RvY29sLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG4vLyBDb3B5cmlnaHQgKGMpIC5ORVQgRm91bmRhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuLyoqIEEgbG9nZ2VyIHRoYXQgZG9lcyBub3RoaW5nIHdoZW4gbG9nIG1lc3NhZ2VzIGFyZSBzZW50IHRvIGl0LiAqL1xyXG52YXIgTnVsbExvZ2dlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIE51bGxMb2dnZXIoKSB7XHJcbiAgICB9XHJcbiAgICAvKiogQGluaGVyaXREb2MgKi9cclxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxyXG4gICAgTnVsbExvZ2dlci5wcm90b3R5cGUubG9nID0gZnVuY3Rpb24gKF9sb2dMZXZlbCwgX21lc3NhZ2UpIHtcclxuICAgIH07XHJcbiAgICAvKiogVGhlIHNpbmdsZXRvbiBpbnN0YW5jZSBvZiB0aGUge0BsaW5rIEBtaWNyb3NvZnQvc2lnbmFsci5OdWxsTG9nZ2VyfS4gKi9cclxuICAgIE51bGxMb2dnZXIuaW5zdGFuY2UgPSBuZXcgTnVsbExvZ2dlcigpO1xyXG4gICAgcmV0dXJuIE51bGxMb2dnZXI7XHJcbn0oKSk7XHJcbmV4cG9ydHMuTnVsbExvZ2dlciA9IE51bGxMb2dnZXI7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUxvZ2dlcnMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8vIENvcHlyaWdodCAoYykgLk5FVCBGb3VuZGF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufTtcclxudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBBYm9ydENvbnRyb2xsZXJfMSA9IHJlcXVpcmUoXCIuL0Fib3J0Q29udHJvbGxlclwiKTtcclxudmFyIEVycm9yc18xID0gcmVxdWlyZShcIi4vRXJyb3JzXCIpO1xyXG52YXIgSUxvZ2dlcl8xID0gcmVxdWlyZShcIi4vSUxvZ2dlclwiKTtcclxudmFyIElUcmFuc3BvcnRfMSA9IHJlcXVpcmUoXCIuL0lUcmFuc3BvcnRcIik7XHJcbnZhciBVdGlsc18xID0gcmVxdWlyZShcIi4vVXRpbHNcIik7XHJcbi8vIE5vdCBleHBvcnRlZCBmcm9tICdpbmRleCcsIHRoaXMgdHlwZSBpcyBpbnRlcm5hbC5cclxuLyoqIEBwcml2YXRlICovXHJcbnZhciBMb25nUG9sbGluZ1RyYW5zcG9ydCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIExvbmdQb2xsaW5nVHJhbnNwb3J0KGh0dHBDbGllbnQsIGFjY2Vzc1Rva2VuRmFjdG9yeSwgbG9nZ2VyLCBsb2dNZXNzYWdlQ29udGVudCkge1xyXG4gICAgICAgIHRoaXMuaHR0cENsaWVudCA9IGh0dHBDbGllbnQ7XHJcbiAgICAgICAgdGhpcy5hY2Nlc3NUb2tlbkZhY3RvcnkgPSBhY2Nlc3NUb2tlbkZhY3Rvcnk7XHJcbiAgICAgICAgdGhpcy5sb2dnZXIgPSBsb2dnZXI7XHJcbiAgICAgICAgdGhpcy5wb2xsQWJvcnQgPSBuZXcgQWJvcnRDb250cm9sbGVyXzEuQWJvcnRDb250cm9sbGVyKCk7XHJcbiAgICAgICAgdGhpcy5sb2dNZXNzYWdlQ29udGVudCA9IGxvZ01lc3NhZ2VDb250ZW50O1xyXG4gICAgICAgIHRoaXMucnVubmluZyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMub25yZWNlaXZlID0gbnVsbDtcclxuICAgICAgICB0aGlzLm9uY2xvc2UgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KExvbmdQb2xsaW5nVHJhbnNwb3J0LnByb3RvdHlwZSwgXCJwb2xsQWJvcnRlZFwiLCB7XHJcbiAgICAgICAgLy8gVGhpcyBpcyBhbiBpbnRlcm5hbCB0eXBlLCBub3QgZXhwb3J0ZWQgZnJvbSAnaW5kZXgnIHNvIHRoaXMgaXMgcmVhbGx5IGp1c3QgaW50ZXJuYWwuXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBvbGxBYm9ydC5hYm9ydGVkO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgTG9uZ1BvbGxpbmdUcmFuc3BvcnQucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiAodXJsLCB0cmFuc2ZlckZvcm1hdCkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHBvbGxPcHRpb25zLCB0b2tlbiwgcG9sbFVybCwgcmVzcG9uc2U7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFV0aWxzXzEuQXJnLmlzUmVxdWlyZWQodXJsLCBcInVybFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgVXRpbHNfMS5BcmcuaXNSZXF1aXJlZCh0cmFuc2ZlckZvcm1hdCwgXCJ0cmFuc2ZlckZvcm1hdFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgVXRpbHNfMS5BcmcuaXNJbih0cmFuc2ZlckZvcm1hdCwgSVRyYW5zcG9ydF8xLlRyYW5zZmVyRm9ybWF0LCBcInRyYW5zZmVyRm9ybWF0XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVybCA9IHVybDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5UcmFjZSwgXCIoTG9uZ1BvbGxpbmcgdHJhbnNwb3J0KSBDb25uZWN0aW5nLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWxsb3cgYmluYXJ5IGZvcm1hdCBvbiBOb2RlIGFuZCBCcm93c2VycyB0aGF0IHN1cHBvcnQgYmluYXJ5IGNvbnRlbnQgKGluZGljYXRlZCBieSB0aGUgcHJlc2VuY2Ugb2YgcmVzcG9uc2VUeXBlIHByb3BlcnR5KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHJhbnNmZXJGb3JtYXQgPT09IElUcmFuc3BvcnRfMS5UcmFuc2ZlckZvcm1hdC5CaW5hcnkgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIG5ldyBYTUxIdHRwUmVxdWVzdCgpLnJlc3BvbnNlVHlwZSAhPT0gXCJzdHJpbmdcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkJpbmFyeSBwcm90b2NvbHMgb3ZlciBYbWxIdHRwUmVxdWVzdCBub3QgaW1wbGVtZW50aW5nIGFkdmFuY2VkIGZlYXR1cmVzIGFyZSBub3Qgc3VwcG9ydGVkLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb2xsT3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFib3J0U2lnbmFsOiB0aGlzLnBvbGxBYm9ydC5zaWduYWwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7fSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVvdXQ6IDEwMDAwMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRyYW5zZmVyRm9ybWF0ID09PSBJVHJhbnNwb3J0XzEuVHJhbnNmZXJGb3JtYXQuQmluYXJ5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2xsT3B0aW9ucy5yZXNwb25zZVR5cGUgPSBcImFycmF5YnVmZmVyXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5nZXRBY2Nlc3NUb2tlbigpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUhlYWRlclRva2VuKHBvbGxPcHRpb25zLCB0b2tlbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvbGxVcmwgPSB1cmwgKyBcIiZfPVwiICsgRGF0ZS5ub3coKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5UcmFjZSwgXCIoTG9uZ1BvbGxpbmcgdHJhbnNwb3J0KSBwb2xsaW5nOiBcIiArIHBvbGxVcmwgKyBcIi5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuaHR0cENsaWVudC5nZXQocG9sbFVybCwgcG9sbE9wdGlvbnMpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzQ29kZSAhPT0gMjAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkVycm9yLCBcIihMb25nUG9sbGluZyB0cmFuc3BvcnQpIFVuZXhwZWN0ZWQgcmVzcG9uc2UgY29kZTogXCIgKyByZXNwb25zZS5zdGF0dXNDb2RlICsgXCIuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWFyayBydW5uaW5nIGFzIGZhbHNlIHNvIHRoYXQgdGhlIHBvbGwgaW1tZWRpYXRlbHkgZW5kcyBhbmQgcnVucyB0aGUgY2xvc2UgbG9naWNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VFcnJvciA9IG5ldyBFcnJvcnNfMS5IdHRwRXJyb3IocmVzcG9uc2Uuc3RhdHVzVGV4dCB8fCBcIlwiLCByZXNwb25zZS5zdGF0dXNDb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucnVubmluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ydW5uaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlY2VpdmluZyA9IHRoaXMucG9sbCh0aGlzLnVybCwgcG9sbE9wdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIExvbmdQb2xsaW5nVHJhbnNwb3J0LnByb3RvdHlwZS5nZXRBY2Nlc3NUb2tlbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5hY2Nlc3NUb2tlbkZhY3RvcnkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmFjY2Vzc1Rva2VuRmFjdG9yeSgpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6IHJldHVybiBbMiAvKnJldHVybiovLCBfYS5zZW50KCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIG51bGxdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBMb25nUG9sbGluZ1RyYW5zcG9ydC5wcm90b3R5cGUudXBkYXRlSGVhZGVyVG9rZW4gPSBmdW5jdGlvbiAocmVxdWVzdCwgdG9rZW4pIHtcclxuICAgICAgICBpZiAoIXJlcXVlc3QuaGVhZGVycykge1xyXG4gICAgICAgICAgICByZXF1ZXN0LmhlYWRlcnMgPSB7fTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRva2VuKSB7XHJcbiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1zdHJpbmctbGl0ZXJhbFxyXG4gICAgICAgICAgICByZXF1ZXN0LmhlYWRlcnNbXCJBdXRob3JpemF0aW9uXCJdID0gXCJCZWFyZXIgXCIgKyB0b2tlbjtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tc3RyaW5nLWxpdGVyYWxcclxuICAgICAgICBpZiAocmVxdWVzdC5oZWFkZXJzW1wiQXV0aG9yaXphdGlvblwiXSkge1xyXG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tc3RyaW5nLWxpdGVyYWxcclxuICAgICAgICAgICAgZGVsZXRlIHJlcXVlc3QuaGVhZGVyc1tcIkF1dGhvcml6YXRpb25cIl07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIExvbmdQb2xsaW5nVHJhbnNwb3J0LnByb3RvdHlwZS5wb2xsID0gZnVuY3Rpb24gKHVybCwgcG9sbE9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciB0b2tlbiwgcG9sbFVybCwgcmVzcG9uc2UsIGVfMTtcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EudHJ5cy5wdXNoKFswLCAsIDgsIDldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnJ1bm5pbmcpIHJldHVybiBbMyAvKmJyZWFrKi8sIDddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmdldEFjY2Vzc1Rva2VuKCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW4gPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlSGVhZGVyVG9rZW4ocG9sbE9wdGlvbnMsIHRva2VuKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAzO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EudHJ5cy5wdXNoKFszLCA1LCAsIDZdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9sbFVybCA9IHVybCArIFwiJl89XCIgKyBEYXRlLm5vdygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLlRyYWNlLCBcIihMb25nUG9sbGluZyB0cmFuc3BvcnQpIHBvbGxpbmc6IFwiICsgcG9sbFVybCArIFwiLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5odHRwQ2xpZW50LmdldChwb2xsVXJsLCBwb2xsT3B0aW9ucyldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXNDb2RlID09PSAyMDQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuSW5mb3JtYXRpb24sIFwiKExvbmdQb2xsaW5nIHRyYW5zcG9ydCkgUG9sbCB0ZXJtaW5hdGVkIGJ5IHNlcnZlci5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJ1bm5pbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChyZXNwb25zZS5zdGF0dXNDb2RlICE9PSAyMDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuRXJyb3IsIFwiKExvbmdQb2xsaW5nIHRyYW5zcG9ydCkgVW5leHBlY3RlZCByZXNwb25zZSBjb2RlOiBcIiArIHJlc3BvbnNlLnN0YXR1c0NvZGUgKyBcIi5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBVbmV4cGVjdGVkIHN0YXR1cyBjb2RlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb3NlRXJyb3IgPSBuZXcgRXJyb3JzXzEuSHR0cEVycm9yKHJlc3BvbnNlLnN0YXR1c1RleHQgfHwgXCJcIiwgcmVzcG9uc2Uuc3RhdHVzQ29kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJ1bm5pbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFByb2Nlc3MgdGhlIHJlc3BvbnNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuY29udGVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuVHJhY2UsIFwiKExvbmdQb2xsaW5nIHRyYW5zcG9ydCkgZGF0YSByZWNlaXZlZC4gXCIgKyBVdGlsc18xLmdldERhdGFEZXRhaWwocmVzcG9uc2UuY29udGVudCwgdGhpcy5sb2dNZXNzYWdlQ29udGVudCkgKyBcIi5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub25yZWNlaXZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25yZWNlaXZlKHJlc3BvbnNlLmNvbnRlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgYW5vdGhlciB3YXkgdGltZW91dCBtYW5pZmVzdC5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLlRyYWNlLCBcIihMb25nUG9sbGluZyB0cmFuc3BvcnQpIFBvbGwgdGltZWQgb3V0LCByZWlzc3VpbmcuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDZdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZV8xID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMucnVubmluZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTG9nIGJ1dCBkaXNyZWdhcmQgZXJyb3JzIHRoYXQgb2NjdXIgYWZ0ZXIgc3RvcHBpbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuVHJhY2UsIFwiKExvbmdQb2xsaW5nIHRyYW5zcG9ydCkgUG9sbCBlcnJvcmVkIGFmdGVyIHNodXRkb3duOiBcIiArIGVfMS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlXzEgaW5zdGFuY2VvZiBFcnJvcnNfMS5UaW1lb3V0RXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJZ25vcmUgdGltZW91dHMgYW5kIHJlaXNzdWUgdGhlIHBvbGwuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5UcmFjZSwgXCIoTG9uZ1BvbGxpbmcgdHJhbnNwb3J0KSBQb2xsIHRpbWVkIG91dCwgcmVpc3N1aW5nLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENsb3NlIHRoZSBjb25uZWN0aW9uIHdpdGggdGhlIGVycm9yIGFzIHRoZSByZXN1bHQuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZUVycm9yID0gZV8xO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucnVubmluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDZdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjogcmV0dXJuIFszIC8qYnJlYWsqLywgMV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA3OiByZXR1cm4gWzMgLypicmVhayovLCA5XTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDg6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuVHJhY2UsIFwiKExvbmdQb2xsaW5nIHRyYW5zcG9ydCkgUG9sbGluZyBjb21wbGV0ZS5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIHdpbGwgcmVhY2ggaGVyZSB3aXRoIHBvbGxBYm9ydGVkPT1mYWxzZSB3aGVuIHRoZSBzZXJ2ZXIgcmV0dXJuZWQgYSByZXNwb25zZSBjYXVzaW5nIHRoZSB0cmFuc3BvcnQgdG8gc3RvcC5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgcG9sbEFib3J0ZWQ9PXRydWUgdGhlbiBjbGllbnQgaW5pdGlhdGVkIHRoZSBzdG9wIGFuZCB0aGUgc3RvcCBtZXRob2Qgd2lsbCByYWlzZSB0aGUgY2xvc2UgZXZlbnQgYWZ0ZXIgREVMRVRFIGlzIHNlbnQuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5wb2xsQWJvcnRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yYWlzZU9uQ2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzcgLyplbmRmaW5hbGx5Ki9dO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgOTogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBMb25nUG9sbGluZ1RyYW5zcG9ydC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMucnVubmluZykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJDYW5ub3Qgc2VuZCB1bnRpbCB0aGUgdHJhbnNwb3J0IGlzIGNvbm5lY3RlZFwiKSldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIFV0aWxzXzEuc2VuZE1lc3NhZ2UodGhpcy5sb2dnZXIsIFwiTG9uZ1BvbGxpbmdcIiwgdGhpcy5odHRwQ2xpZW50LCB0aGlzLnVybCwgdGhpcy5hY2Nlc3NUb2tlbkZhY3RvcnksIGRhdGEsIHRoaXMubG9nTWVzc2FnZUNvbnRlbnQpXTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgTG9uZ1BvbGxpbmdUcmFuc3BvcnQucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgZGVsZXRlT3B0aW9ucywgdG9rZW47XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuVHJhY2UsIFwiKExvbmdQb2xsaW5nIHRyYW5zcG9ydCkgU3RvcHBpbmcgcG9sbGluZy5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRlbGwgcmVjZWl2aW5nIGxvb3AgdG8gc3RvcCwgYWJvcnQgYW55IGN1cnJlbnQgcmVxdWVzdCwgYW5kIHRoZW4gd2FpdCBmb3IgaXQgdG8gZmluaXNoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucnVubmluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBvbGxBYm9ydC5hYm9ydCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS50cnlzLnB1c2goWzEsICwgNSwgNl0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnJlY2VpdmluZ107XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNlbmQgREVMRVRFIHRvIGNsZWFuIHVwIGxvbmcgcG9sbGluZyBvbiB0aGUgc2VydmVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuVHJhY2UsIFwiKExvbmdQb2xsaW5nIHRyYW5zcG9ydCkgc2VuZGluZyBERUxFVEUgcmVxdWVzdCB0byBcIiArIHRoaXMudXJsICsgXCIuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGVPcHRpb25zID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge30sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuZ2V0QWNjZXNzVG9rZW4oKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2tlbiA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVIZWFkZXJUb2tlbihkZWxldGVPcHRpb25zLCB0b2tlbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuaHR0cENsaWVudC5kZWxldGUodGhpcy51cmwsIGRlbGV0ZU9wdGlvbnMpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5UcmFjZSwgXCIoTG9uZ1BvbGxpbmcgdHJhbnNwb3J0KSBERUxFVEUgcmVxdWVzdCBzZW50LlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNl07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLlRyYWNlLCBcIihMb25nUG9sbGluZyB0cmFuc3BvcnQpIFN0b3AgZmluaXNoZWQuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSYWlzZSBjbG9zZSBldmVudCBoZXJlIGluc3RlYWQgb2YgaW4gcG9sbGluZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJdCBuZWVkcyB0byBoYXBwZW4gYWZ0ZXIgdGhlIERFTEVURSByZXF1ZXN0IGlzIHNlbnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yYWlzZU9uQ2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs3IC8qZW5kZmluYWxseSovXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6IHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgTG9uZ1BvbGxpbmdUcmFuc3BvcnQucHJvdG90eXBlLnJhaXNlT25DbG9zZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5vbmNsb3NlKSB7XHJcbiAgICAgICAgICAgIHZhciBsb2dNZXNzYWdlID0gXCIoTG9uZ1BvbGxpbmcgdHJhbnNwb3J0KSBGaXJpbmcgb25jbG9zZSBldmVudC5cIjtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY2xvc2VFcnJvcikge1xyXG4gICAgICAgICAgICAgICAgbG9nTWVzc2FnZSArPSBcIiBFcnJvcjogXCIgKyB0aGlzLmNsb3NlRXJyb3I7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5UcmFjZSwgbG9nTWVzc2FnZSk7XHJcbiAgICAgICAgICAgIHRoaXMub25jbG9zZSh0aGlzLmNsb3NlRXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gTG9uZ1BvbGxpbmdUcmFuc3BvcnQ7XHJcbn0oKSk7XHJcbmV4cG9ydHMuTG9uZ1BvbGxpbmdUcmFuc3BvcnQgPSBMb25nUG9sbGluZ1RyYW5zcG9ydDtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TG9uZ1BvbGxpbmdUcmFuc3BvcnQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8vIENvcHlyaWdodCAoYykgLk5FVCBGb3VuZGF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxuICAgIH07XHJcbn0pKCk7XHJcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xyXG4gICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXHJcbiAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIEVycm9yc18xID0gcmVxdWlyZShcIi4vRXJyb3JzXCIpO1xyXG52YXIgSHR0cENsaWVudF8xID0gcmVxdWlyZShcIi4vSHR0cENsaWVudFwiKTtcclxudmFyIElMb2dnZXJfMSA9IHJlcXVpcmUoXCIuL0lMb2dnZXJcIik7XHJcbnZhciBVdGlsc18xID0gcmVxdWlyZShcIi4vVXRpbHNcIik7XHJcbnZhciByZXF1ZXN0TW9kdWxlO1xyXG5pZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ID09PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAvLyBJbiBvcmRlciB0byBpZ25vcmUgdGhlIGR5bmFtaWMgcmVxdWlyZSBpbiB3ZWJwYWNrIGJ1aWxkcyB3ZSBuZWVkIHRvIGRvIHRoaXMgbWFnaWNcclxuICAgIC8vIEB0cy1pZ25vcmU6IFRTIGRvZXNuJ3Qga25vdyBhYm91dCB0aGVzZSBuYW1lc1xyXG4gICAgdmFyIHJlcXVpcmVGdW5jID0gdHlwZW9mIF9fd2VicGFja19yZXF1aXJlX18gPT09IFwiZnVuY3Rpb25cIiA/IF9fbm9uX3dlYnBhY2tfcmVxdWlyZV9fIDogcmVxdWlyZTtcclxuICAgIHJlcXVlc3RNb2R1bGUgPSByZXF1aXJlRnVuYyhcInJlcXVlc3RcIik7XHJcbn1cclxuLyoqIEBwcml2YXRlICovXHJcbnZhciBOb2RlSHR0cENsaWVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhOb2RlSHR0cENsaWVudCwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIE5vZGVIdHRwQ2xpZW50KGxvZ2dlcikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XHJcbiAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0TW9kdWxlID09PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSAncmVxdWVzdCcgbW9kdWxlIGNvdWxkIG5vdCBiZSBsb2FkZWQuXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBfdGhpcy5sb2dnZXIgPSBsb2dnZXI7XHJcbiAgICAgICAgX3RoaXMuY29va2llSmFyID0gcmVxdWVzdE1vZHVsZS5qYXIoKTtcclxuICAgICAgICBfdGhpcy5yZXF1ZXN0ID0gcmVxdWVzdE1vZHVsZS5kZWZhdWx0cyh7IGphcjogX3RoaXMuY29va2llSmFyIH0pO1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIE5vZGVIdHRwQ2xpZW50LnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24gKGh0dHBSZXF1ZXN0KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICB2YXIgcmVxdWVzdEJvZHk7XHJcbiAgICAgICAgICAgIGlmIChVdGlsc18xLmlzQXJyYXlCdWZmZXIoaHR0cFJlcXVlc3QuY29udGVudCkpIHtcclxuICAgICAgICAgICAgICAgIHJlcXVlc3RCb2R5ID0gQnVmZmVyLmZyb20oaHR0cFJlcXVlc3QuY29udGVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0Qm9keSA9IGh0dHBSZXF1ZXN0LmNvbnRlbnQgfHwgXCJcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgY3VycmVudFJlcXVlc3QgPSBfdGhpcy5yZXF1ZXN0KGh0dHBSZXF1ZXN0LnVybCwge1xyXG4gICAgICAgICAgICAgICAgYm9keTogcmVxdWVzdEJvZHksXHJcbiAgICAgICAgICAgICAgICAvLyBJZiBiaW5hcnkgaXMgZXhwZWN0ZWQgJ251bGwnIHNob3VsZCBiZSB1c2VkLCBvdGhlcndpc2UgZm9yIHRleHQgJ3V0ZjgnXHJcbiAgICAgICAgICAgICAgICBlbmNvZGluZzogaHR0cFJlcXVlc3QucmVzcG9uc2VUeXBlID09PSBcImFycmF5YnVmZmVyXCIgPyBudWxsIDogXCJ1dGY4XCIsXHJcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBfX2Fzc2lnbih7IFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFRlbGwgYXV0aCBtaWRkbGV3YXJlIHRvIDQwMSBpbnN0ZWFkIG9mIHJlZGlyZWN0aW5nXHJcbiAgICAgICAgICAgICAgICAgICAgXCJYLVJlcXVlc3RlZC1XaXRoXCI6IFwiWE1MSHR0cFJlcXVlc3RcIiB9LCBodHRwUmVxdWVzdC5oZWFkZXJzKSxcclxuICAgICAgICAgICAgICAgIG1ldGhvZDogaHR0cFJlcXVlc3QubWV0aG9kLFxyXG4gICAgICAgICAgICAgICAgdGltZW91dDogaHR0cFJlcXVlc3QudGltZW91dCxcclxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yLCByZXNwb25zZSwgYm9keSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGh0dHBSZXF1ZXN0LmFib3J0U2lnbmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaHR0cFJlcXVlc3QuYWJvcnRTaWduYWwub25hYm9ydCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IuY29kZSA9PT0gXCJFVElNRURPVVRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5XYXJuaW5nLCBcIlRpbWVvdXQgZnJvbSBIVFRQIHJlcXVlc3QuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yc18xLlRpbWVvdXRFcnJvcigpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuV2FybmluZywgXCJFcnJvciBmcm9tIEhUVFAgcmVxdWVzdC4gXCIgKyBlcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzQ29kZSA+PSAyMDAgJiYgcmVzcG9uc2Uuc3RhdHVzQ29kZSA8IDMwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUobmV3IEh0dHBDbGllbnRfMS5IdHRwUmVzcG9uc2UocmVzcG9uc2Uuc3RhdHVzQ29kZSwgcmVzcG9uc2Uuc3RhdHVzTWVzc2FnZSB8fCBcIlwiLCBib2R5KSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yc18xLkh0dHBFcnJvcihyZXNwb25zZS5zdGF0dXNNZXNzYWdlIHx8IFwiXCIsIHJlc3BvbnNlLnN0YXR1c0NvZGUgfHwgMCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYgKGh0dHBSZXF1ZXN0LmFib3J0U2lnbmFsKSB7XHJcbiAgICAgICAgICAgICAgICBodHRwUmVxdWVzdC5hYm9ydFNpZ25hbC5vbmFib3J0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXF1ZXN0LmFib3J0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcnNfMS5BYm9ydEVycm9yKCkpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIE5vZGVIdHRwQ2xpZW50LnByb3RvdHlwZS5nZXRDb29raWVTdHJpbmcgPSBmdW5jdGlvbiAodXJsKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29va2llSmFyLmdldENvb2tpZVN0cmluZyh1cmwpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBOb2RlSHR0cENsaWVudDtcclxufShIdHRwQ2xpZW50XzEuSHR0cENsaWVudCkpO1xyXG5leHBvcnRzLk5vZGVIdHRwQ2xpZW50ID0gTm9kZUh0dHBDbGllbnQ7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU5vZGVIdHRwQ2xpZW50LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG4vLyBDb3B5cmlnaHQgKGMpIC5ORVQgRm91bmRhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZShyZXN1bHQudmFsdWUpOyB9KS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn07XHJcbnZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgSUxvZ2dlcl8xID0gcmVxdWlyZShcIi4vSUxvZ2dlclwiKTtcclxudmFyIElUcmFuc3BvcnRfMSA9IHJlcXVpcmUoXCIuL0lUcmFuc3BvcnRcIik7XHJcbnZhciBVdGlsc18xID0gcmVxdWlyZShcIi4vVXRpbHNcIik7XHJcbi8qKiBAcHJpdmF0ZSAqL1xyXG52YXIgU2VydmVyU2VudEV2ZW50c1RyYW5zcG9ydCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFNlcnZlclNlbnRFdmVudHNUcmFuc3BvcnQoaHR0cENsaWVudCwgYWNjZXNzVG9rZW5GYWN0b3J5LCBsb2dnZXIsIGxvZ01lc3NhZ2VDb250ZW50LCBldmVudFNvdXJjZUNvbnN0cnVjdG9yKSB7XHJcbiAgICAgICAgdGhpcy5odHRwQ2xpZW50ID0gaHR0cENsaWVudDtcclxuICAgICAgICB0aGlzLmFjY2Vzc1Rva2VuRmFjdG9yeSA9IGFjY2Vzc1Rva2VuRmFjdG9yeTtcclxuICAgICAgICB0aGlzLmxvZ2dlciA9IGxvZ2dlcjtcclxuICAgICAgICB0aGlzLmxvZ01lc3NhZ2VDb250ZW50ID0gbG9nTWVzc2FnZUNvbnRlbnQ7XHJcbiAgICAgICAgdGhpcy5ldmVudFNvdXJjZUNvbnN0cnVjdG9yID0gZXZlbnRTb3VyY2VDb25zdHJ1Y3RvcjtcclxuICAgICAgICB0aGlzLm9ucmVjZWl2ZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5vbmNsb3NlID0gbnVsbDtcclxuICAgIH1cclxuICAgIFNlcnZlclNlbnRFdmVudHNUcmFuc3BvcnQucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiAodXJsLCB0cmFuc2ZlckZvcm1hdCkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHRva2VuO1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBVdGlsc18xLkFyZy5pc1JlcXVpcmVkKHVybCwgXCJ1cmxcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFV0aWxzXzEuQXJnLmlzUmVxdWlyZWQodHJhbnNmZXJGb3JtYXQsIFwidHJhbnNmZXJGb3JtYXRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFV0aWxzXzEuQXJnLmlzSW4odHJhbnNmZXJGb3JtYXQsIElUcmFuc3BvcnRfMS5UcmFuc2ZlckZvcm1hdCwgXCJ0cmFuc2ZlckZvcm1hdFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5UcmFjZSwgXCIoU1NFIHRyYW5zcG9ydCkgQ29ubmVjdGluZy5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNldCB1cmwgYmVmb3JlIGFjY2Vzc1Rva2VuRmFjdG9yeSBiZWNhdXNlIHRoaXMudXJsIGlzIG9ubHkgZm9yIHNlbmQgYW5kIHdlIHNldCB0aGUgYXV0aCBoZWFkZXIgaW5zdGVhZCBvZiB0aGUgcXVlcnkgc3RyaW5nIGZvciBzZW5kXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXJsID0gdXJsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuYWNjZXNzVG9rZW5GYWN0b3J5KSByZXR1cm4gWzMgLypicmVhayovLCAyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5hY2Nlc3NUb2tlbkZhY3RvcnkoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2tlbiA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRva2VuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmwgKz0gKHVybC5pbmRleE9mKFwiP1wiKSA8IDAgPyBcIj9cIiA6IFwiJlwiKSArIChcImFjY2Vzc190b2tlbj1cIiArIGVuY29kZVVSSUNvbXBvbmVudCh0b2tlbikpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMjtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6IHJldHVybiBbMiAvKnJldHVybiovLCBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgb3BlbmVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHJhbnNmZXJGb3JtYXQgIT09IElUcmFuc3BvcnRfMS5UcmFuc2ZlckZvcm1hdC5UZXh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihcIlRoZSBTZXJ2ZXItU2VudCBFdmVudHMgdHJhbnNwb3J0IG9ubHkgc3VwcG9ydHMgdGhlICdUZXh0JyB0cmFuc2ZlciBmb3JtYXRcIikpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBldmVudFNvdXJjZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChVdGlsc18xLlBsYXRmb3JtLmlzQnJvd3NlciB8fCBVdGlsc18xLlBsYXRmb3JtLmlzV2ViV29ya2VyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRTb3VyY2UgPSBuZXcgX3RoaXMuZXZlbnRTb3VyY2VDb25zdHJ1Y3Rvcih1cmwsIHsgd2l0aENyZWRlbnRpYWxzOiB0cnVlIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm9uLWJyb3dzZXIgcGFzc2VzIGNvb2tpZXMgdmlhIHRoZSBkaWN0aW9uYXJ5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvb2tpZXMgPSBfdGhpcy5odHRwQ2xpZW50LmdldENvb2tpZVN0cmluZyh1cmwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50U291cmNlID0gbmV3IF90aGlzLmV2ZW50U291cmNlQ29uc3RydWN0b3IodXJsLCB7IHdpdGhDcmVkZW50aWFsczogdHJ1ZSwgaGVhZGVyczogeyBDb29raWU6IGNvb2tpZXMgfSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRTb3VyY2Uub25tZXNzYWdlID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLm9ucmVjZWl2ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5UcmFjZSwgXCIoU1NFIHRyYW5zcG9ydCkgZGF0YSByZWNlaXZlZC4gXCIgKyBVdGlsc18xLmdldERhdGFEZXRhaWwoZS5kYXRhLCBfdGhpcy5sb2dNZXNzYWdlQ29udGVudCkgKyBcIi5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMub25yZWNlaXZlKGUuZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5jbG9zZShlcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudFNvdXJjZS5vbmVycm9yID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yID0gbmV3IEVycm9yKGUuZGF0YSB8fCBcIkVycm9yIG9jY3VycmVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3BlbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5jbG9zZShlcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudFNvdXJjZS5vbm9wZW4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkluZm9ybWF0aW9uLCBcIlNTRSBjb25uZWN0ZWQgdG8gXCIgKyBfdGhpcy51cmwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5ldmVudFNvdXJjZSA9IGV2ZW50U291cmNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBTZXJ2ZXJTZW50RXZlbnRzVHJhbnNwb3J0LnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5ldmVudFNvdXJjZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJDYW5ub3Qgc2VuZCB1bnRpbCB0aGUgdHJhbnNwb3J0IGlzIGNvbm5lY3RlZFwiKSldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIFV0aWxzXzEuc2VuZE1lc3NhZ2UodGhpcy5sb2dnZXIsIFwiU1NFXCIsIHRoaXMuaHR0cENsaWVudCwgdGhpcy51cmwsIHRoaXMuYWNjZXNzVG9rZW5GYWN0b3J5LCBkYXRhLCB0aGlzLmxvZ01lc3NhZ2VDb250ZW50KV07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFNlcnZlclNlbnRFdmVudHNUcmFuc3BvcnQucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgIH07XHJcbiAgICBTZXJ2ZXJTZW50RXZlbnRzVHJhbnNwb3J0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZXZlbnRTb3VyY2UpIHtcclxuICAgICAgICAgICAgdGhpcy5ldmVudFNvdXJjZS5jbG9zZSgpO1xyXG4gICAgICAgICAgICB0aGlzLmV2ZW50U291cmNlID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5vbmNsb3NlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uY2xvc2UoZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFNlcnZlclNlbnRFdmVudHNUcmFuc3BvcnQ7XHJcbn0oKSk7XHJcbmV4cG9ydHMuU2VydmVyU2VudEV2ZW50c1RyYW5zcG9ydCA9IFNlcnZlclNlbnRFdmVudHNUcmFuc3BvcnQ7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNlcnZlclNlbnRFdmVudHNUcmFuc3BvcnQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8vIENvcHlyaWdodCAoYykgLk5FVCBGb3VuZGF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgVXRpbHNfMSA9IHJlcXVpcmUoXCIuL1V0aWxzXCIpO1xyXG4vKiogU3RyZWFtIGltcGxlbWVudGF0aW9uIHRvIHN0cmVhbSBpdGVtcyB0byB0aGUgc2VydmVyLiAqL1xyXG52YXIgU3ViamVjdCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFN1YmplY3QoKSB7XHJcbiAgICAgICAgdGhpcy5vYnNlcnZlcnMgPSBbXTtcclxuICAgIH1cclxuICAgIFN1YmplY3QucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLm9ic2VydmVyczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIG9ic2VydmVyID0gX2FbX2ldO1xyXG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KGl0ZW0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5vYnNlcnZlcnM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBvYnNlcnZlciA9IF9hW19pXTtcclxuICAgICAgICAgICAgaWYgKG9ic2VydmVyLmVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBvYnNlcnZlci5lcnJvcihlcnIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFN1YmplY3QucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLm9ic2VydmVyczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIG9ic2VydmVyID0gX2FbX2ldO1xyXG4gICAgICAgICAgICBpZiAob2JzZXJ2ZXIuY29tcGxldGUpIHtcclxuICAgICAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgU3ViamVjdC5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gKG9ic2VydmVyKSB7XHJcbiAgICAgICAgdGhpcy5vYnNlcnZlcnMucHVzaChvYnNlcnZlcik7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBVdGlsc18xLlN1YmplY3RTdWJzY3JpcHRpb24odGhpcywgb2JzZXJ2ZXIpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBTdWJqZWN0O1xyXG59KCkpO1xyXG5leHBvcnRzLlN1YmplY3QgPSBTdWJqZWN0O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdWJqZWN0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG4vLyBDb3B5cmlnaHQgKGMpIC5ORVQgRm91bmRhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuLy8gTm90IGV4cG9ydGVkIGZyb20gaW5kZXhcclxuLyoqIEBwcml2YXRlICovXHJcbnZhciBUZXh0TWVzc2FnZUZvcm1hdCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFRleHRNZXNzYWdlRm9ybWF0KCkge1xyXG4gICAgfVxyXG4gICAgVGV4dE1lc3NhZ2VGb3JtYXQud3JpdGUgPSBmdW5jdGlvbiAob3V0cHV0KSB7XHJcbiAgICAgICAgcmV0dXJuIFwiXCIgKyBvdXRwdXQgKyBUZXh0TWVzc2FnZUZvcm1hdC5SZWNvcmRTZXBhcmF0b3I7XHJcbiAgICB9O1xyXG4gICAgVGV4dE1lc3NhZ2VGb3JtYXQucGFyc2UgPSBmdW5jdGlvbiAoaW5wdXQpIHtcclxuICAgICAgICBpZiAoaW5wdXRbaW5wdXQubGVuZ3RoIC0gMV0gIT09IFRleHRNZXNzYWdlRm9ybWF0LlJlY29yZFNlcGFyYXRvcikge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNZXNzYWdlIGlzIGluY29tcGxldGUuXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgbWVzc2FnZXMgPSBpbnB1dC5zcGxpdChUZXh0TWVzc2FnZUZvcm1hdC5SZWNvcmRTZXBhcmF0b3IpO1xyXG4gICAgICAgIG1lc3NhZ2VzLnBvcCgpO1xyXG4gICAgICAgIHJldHVybiBtZXNzYWdlcztcclxuICAgIH07XHJcbiAgICBUZXh0TWVzc2FnZUZvcm1hdC5SZWNvcmRTZXBhcmF0b3JDb2RlID0gMHgxZTtcclxuICAgIFRleHRNZXNzYWdlRm9ybWF0LlJlY29yZFNlcGFyYXRvciA9IFN0cmluZy5mcm9tQ2hhckNvZGUoVGV4dE1lc3NhZ2VGb3JtYXQuUmVjb3JkU2VwYXJhdG9yQ29kZSk7XHJcbiAgICByZXR1cm4gVGV4dE1lc3NhZ2VGb3JtYXQ7XHJcbn0oKSk7XHJcbmV4cG9ydHMuVGV4dE1lc3NhZ2VGb3JtYXQgPSBUZXh0TWVzc2FnZUZvcm1hdDtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VGV4dE1lc3NhZ2VGb3JtYXQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8vIENvcHlyaWdodCAoYykgLk5FVCBGb3VuZGF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufTtcclxudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBJTG9nZ2VyXzEgPSByZXF1aXJlKFwiLi9JTG9nZ2VyXCIpO1xyXG52YXIgTG9nZ2Vyc18xID0gcmVxdWlyZShcIi4vTG9nZ2Vyc1wiKTtcclxuLyoqIEBwcml2YXRlICovXHJcbnZhciBBcmcgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBBcmcoKSB7XHJcbiAgICB9XHJcbiAgICBBcmcuaXNSZXF1aXJlZCA9IGZ1bmN0aW9uICh2YWwsIG5hbWUpIHtcclxuICAgICAgICBpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSAnXCIgKyBuYW1lICsgXCInIGFyZ3VtZW50IGlzIHJlcXVpcmVkLlwiKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgQXJnLmlzSW4gPSBmdW5jdGlvbiAodmFsLCB2YWx1ZXMsIG5hbWUpIHtcclxuICAgICAgICAvLyBUeXBlU2NyaXB0IGVudW1zIGhhdmUga2V5cyBmb3IgKipib3RoKiogdGhlIG5hbWUgYW5kIHRoZSB2YWx1ZSBvZiBlYWNoIGVudW0gbWVtYmVyIG9uIHRoZSB0eXBlIGl0c2VsZi5cclxuICAgICAgICBpZiAoISh2YWwgaW4gdmFsdWVzKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIFwiICsgbmFtZSArIFwiIHZhbHVlOiBcIiArIHZhbCArIFwiLlwiKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEFyZztcclxufSgpKTtcclxuZXhwb3J0cy5BcmcgPSBBcmc7XHJcbi8qKiBAcHJpdmF0ZSAqL1xyXG52YXIgUGxhdGZvcm0gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBQbGF0Zm9ybSgpIHtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShQbGF0Zm9ybSwgXCJpc0Jyb3dzZXJcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShQbGF0Zm9ybSwgXCJpc1dlYldvcmtlclwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0eXBlb2Ygc2VsZiA9PT0gXCJvYmplY3RcIiAmJiBcImltcG9ydFNjcmlwdHNcIiBpbiBzZWxmO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFBsYXRmb3JtLCBcImlzTm9kZVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAhdGhpcy5pc0Jyb3dzZXIgJiYgIXRoaXMuaXNXZWJXb3JrZXI7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gUGxhdGZvcm07XHJcbn0oKSk7XHJcbmV4cG9ydHMuUGxhdGZvcm0gPSBQbGF0Zm9ybTtcclxuLyoqIEBwcml2YXRlICovXHJcbmZ1bmN0aW9uIGdldERhdGFEZXRhaWwoZGF0YSwgaW5jbHVkZUNvbnRlbnQpIHtcclxuICAgIHZhciBkZXRhaWwgPSBcIlwiO1xyXG4gICAgaWYgKGlzQXJyYXlCdWZmZXIoZGF0YSkpIHtcclxuICAgICAgICBkZXRhaWwgPSBcIkJpbmFyeSBkYXRhIG9mIGxlbmd0aCBcIiArIGRhdGEuYnl0ZUxlbmd0aDtcclxuICAgICAgICBpZiAoaW5jbHVkZUNvbnRlbnQpIHtcclxuICAgICAgICAgICAgZGV0YWlsICs9IFwiLiBDb250ZW50OiAnXCIgKyBmb3JtYXRBcnJheUJ1ZmZlcihkYXRhKSArIFwiJ1wiO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgZGV0YWlsID0gXCJTdHJpbmcgZGF0YSBvZiBsZW5ndGggXCIgKyBkYXRhLmxlbmd0aDtcclxuICAgICAgICBpZiAoaW5jbHVkZUNvbnRlbnQpIHtcclxuICAgICAgICAgICAgZGV0YWlsICs9IFwiLiBDb250ZW50OiAnXCIgKyBkYXRhICsgXCInXCI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGRldGFpbDtcclxufVxyXG5leHBvcnRzLmdldERhdGFEZXRhaWwgPSBnZXREYXRhRGV0YWlsO1xyXG4vKiogQHByaXZhdGUgKi9cclxuZnVuY3Rpb24gZm9ybWF0QXJyYXlCdWZmZXIoZGF0YSkge1xyXG4gICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShkYXRhKTtcclxuICAgIC8vIFVpbnQ4QXJyYXkubWFwIG9ubHkgc3VwcG9ydHMgcmV0dXJuaW5nIGFub3RoZXIgVWludDhBcnJheT9cclxuICAgIHZhciBzdHIgPSBcIlwiO1xyXG4gICAgdmlldy5mb3JFYWNoKGZ1bmN0aW9uIChudW0pIHtcclxuICAgICAgICB2YXIgcGFkID0gbnVtIDwgMTYgPyBcIjBcIiA6IFwiXCI7XHJcbiAgICAgICAgc3RyICs9IFwiMHhcIiArIHBhZCArIG51bS50b1N0cmluZygxNikgKyBcIiBcIjtcclxuICAgIH0pO1xyXG4gICAgLy8gVHJpbSBvZiB0cmFpbGluZyBzcGFjZS5cclxuICAgIHJldHVybiBzdHIuc3Vic3RyKDAsIHN0ci5sZW5ndGggLSAxKTtcclxufVxyXG5leHBvcnRzLmZvcm1hdEFycmF5QnVmZmVyID0gZm9ybWF0QXJyYXlCdWZmZXI7XHJcbi8vIEFsc28gaW4gc2lnbmFsci1wcm90b2NvbC1tc2dwYWNrL1V0aWxzLnRzXHJcbi8qKiBAcHJpdmF0ZSAqL1xyXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyKHZhbCkge1xyXG4gICAgcmV0dXJuIHZhbCAmJiB0eXBlb2YgQXJyYXlCdWZmZXIgIT09IFwidW5kZWZpbmVkXCIgJiZcclxuICAgICAgICAodmFsIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIgfHxcclxuICAgICAgICAgICAgLy8gU29tZXRpbWVzIHdlIGdldCBhbiBBcnJheUJ1ZmZlciB0aGF0IGRvZXNuJ3Qgc2F0aXNmeSBpbnN0YW5jZW9mXHJcbiAgICAgICAgICAgICh2YWwuY29uc3RydWN0b3IgJiYgdmFsLmNvbnN0cnVjdG9yLm5hbWUgPT09IFwiQXJyYXlCdWZmZXJcIikpO1xyXG59XHJcbmV4cG9ydHMuaXNBcnJheUJ1ZmZlciA9IGlzQXJyYXlCdWZmZXI7XHJcbi8qKiBAcHJpdmF0ZSAqL1xyXG5mdW5jdGlvbiBzZW5kTWVzc2FnZShsb2dnZXIsIHRyYW5zcG9ydE5hbWUsIGh0dHBDbGllbnQsIHVybCwgYWNjZXNzVG9rZW5GYWN0b3J5LCBjb250ZW50LCBsb2dNZXNzYWdlQ29udGVudCkge1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfYSwgaGVhZGVycywgdG9rZW4sIHJlc3BvbnNlVHlwZSwgcmVzcG9uc2U7XHJcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhY2Nlc3NUb2tlbkZhY3RvcnkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGFjY2Vzc1Rva2VuRmFjdG9yeSgpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICB0b2tlbiA9IF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodG9rZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVycyA9IChfYSA9IHt9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2FbXCJBdXRob3JpemF0aW9uXCJdID0gXCJCZWFyZXIgXCIgKyB0b2tlbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSAyO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLlRyYWNlLCBcIihcIiArIHRyYW5zcG9ydE5hbWUgKyBcIiB0cmFuc3BvcnQpIHNlbmRpbmcgZGF0YS4gXCIgKyBnZXREYXRhRGV0YWlsKGNvbnRlbnQsIGxvZ01lc3NhZ2VDb250ZW50KSArIFwiLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICByZXNwb25zZVR5cGUgPSBpc0FycmF5QnVmZmVyKGNvbnRlbnQpID8gXCJhcnJheWJ1ZmZlclwiIDogXCJ0ZXh0XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgaHR0cENsaWVudC5wb3N0KHVybCwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogY29udGVudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6IHJlc3BvbnNlVHlwZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLlRyYWNlLCBcIihcIiArIHRyYW5zcG9ydE5hbWUgKyBcIiB0cmFuc3BvcnQpIHJlcXVlc3QgY29tcGxldGUuIFJlc3BvbnNlIHN0YXR1czogXCIgKyByZXNwb25zZS5zdGF0dXNDb2RlICsgXCIuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0cy5zZW5kTWVzc2FnZSA9IHNlbmRNZXNzYWdlO1xyXG4vKiogQHByaXZhdGUgKi9cclxuZnVuY3Rpb24gY3JlYXRlTG9nZ2VyKGxvZ2dlcikge1xyXG4gICAgaWYgKGxvZ2dlciA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDb25zb2xlTG9nZ2VyKElMb2dnZXJfMS5Mb2dMZXZlbC5JbmZvcm1hdGlvbik7XHJcbiAgICB9XHJcbiAgICBpZiAobG9nZ2VyID09PSBudWxsKSB7XHJcbiAgICAgICAgcmV0dXJuIExvZ2dlcnNfMS5OdWxsTG9nZ2VyLmluc3RhbmNlO1xyXG4gICAgfVxyXG4gICAgaWYgKGxvZ2dlci5sb2cpIHtcclxuICAgICAgICByZXR1cm4gbG9nZ2VyO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5ldyBDb25zb2xlTG9nZ2VyKGxvZ2dlcik7XHJcbn1cclxuZXhwb3J0cy5jcmVhdGVMb2dnZXIgPSBjcmVhdGVMb2dnZXI7XHJcbi8qKiBAcHJpdmF0ZSAqL1xyXG52YXIgU3ViamVjdFN1YnNjcmlwdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFN1YmplY3RTdWJzY3JpcHRpb24oc3ViamVjdCwgb2JzZXJ2ZXIpIHtcclxuICAgICAgICB0aGlzLnN1YmplY3QgPSBzdWJqZWN0O1xyXG4gICAgICAgIHRoaXMub2JzZXJ2ZXIgPSBvYnNlcnZlcjtcclxuICAgIH1cclxuICAgIFN1YmplY3RTdWJzY3JpcHRpb24ucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5zdWJqZWN0Lm9ic2VydmVycy5pbmRleE9mKHRoaXMub2JzZXJ2ZXIpO1xyXG4gICAgICAgIGlmIChpbmRleCA+IC0xKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3ViamVjdC5vYnNlcnZlcnMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuc3ViamVjdC5vYnNlcnZlcnMubGVuZ3RoID09PSAwICYmIHRoaXMuc3ViamVjdC5jYW5jZWxDYWxsYmFjaykge1xyXG4gICAgICAgICAgICB0aGlzLnN1YmplY3QuY2FuY2VsQ2FsbGJhY2soKS5jYXRjaChmdW5jdGlvbiAoXykgeyB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFN1YmplY3RTdWJzY3JpcHRpb247XHJcbn0oKSk7XHJcbmV4cG9ydHMuU3ViamVjdFN1YnNjcmlwdGlvbiA9IFN1YmplY3RTdWJzY3JpcHRpb247XHJcbi8qKiBAcHJpdmF0ZSAqL1xyXG52YXIgQ29uc29sZUxvZ2dlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIENvbnNvbGVMb2dnZXIobWluaW11bUxvZ0xldmVsKSB7XHJcbiAgICAgICAgdGhpcy5taW5pbXVtTG9nTGV2ZWwgPSBtaW5pbXVtTG9nTGV2ZWw7XHJcbiAgICAgICAgdGhpcy5vdXRwdXRDb25zb2xlID0gY29uc29sZTtcclxuICAgIH1cclxuICAgIENvbnNvbGVMb2dnZXIucHJvdG90eXBlLmxvZyA9IGZ1bmN0aW9uIChsb2dMZXZlbCwgbWVzc2FnZSkge1xyXG4gICAgICAgIGlmIChsb2dMZXZlbCA+PSB0aGlzLm1pbmltdW1Mb2dMZXZlbCkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKGxvZ0xldmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIElMb2dnZXJfMS5Mb2dMZXZlbC5Dcml0aWNhbDpcclxuICAgICAgICAgICAgICAgIGNhc2UgSUxvZ2dlcl8xLkxvZ0xldmVsLkVycm9yOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3V0cHV0Q29uc29sZS5lcnJvcihcIltcIiArIG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSArIFwiXSBcIiArIElMb2dnZXJfMS5Mb2dMZXZlbFtsb2dMZXZlbF0gKyBcIjogXCIgKyBtZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgSUxvZ2dlcl8xLkxvZ0xldmVsLldhcm5pbmc6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vdXRwdXRDb25zb2xlLndhcm4oXCJbXCIgKyBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkgKyBcIl0gXCIgKyBJTG9nZ2VyXzEuTG9nTGV2ZWxbbG9nTGV2ZWxdICsgXCI6IFwiICsgbWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIElMb2dnZXJfMS5Mb2dMZXZlbC5JbmZvcm1hdGlvbjpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm91dHB1dENvbnNvbGUuaW5mbyhcIltcIiArIG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSArIFwiXSBcIiArIElMb2dnZXJfMS5Mb2dMZXZlbFtsb2dMZXZlbF0gKyBcIjogXCIgKyBtZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5kZWJ1ZyBvbmx5IGdvZXMgdG8gYXR0YWNoZWQgZGVidWdnZXJzIGluIE5vZGUsIHNvIHdlIHVzZSBjb25zb2xlLmxvZyBmb3IgVHJhY2UgYW5kIERlYnVnXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vdXRwdXRDb25zb2xlLmxvZyhcIltcIiArIG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSArIFwiXSBcIiArIElMb2dnZXJfMS5Mb2dMZXZlbFtsb2dMZXZlbF0gKyBcIjogXCIgKyBtZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gQ29uc29sZUxvZ2dlcjtcclxufSgpKTtcclxuZXhwb3J0cy5Db25zb2xlTG9nZ2VyID0gQ29uc29sZUxvZ2dlcjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VXRpbHMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8vIENvcHlyaWdodCAoYykgLk5FVCBGb3VuZGF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufTtcclxudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBJTG9nZ2VyXzEgPSByZXF1aXJlKFwiLi9JTG9nZ2VyXCIpO1xyXG52YXIgSVRyYW5zcG9ydF8xID0gcmVxdWlyZShcIi4vSVRyYW5zcG9ydFwiKTtcclxudmFyIFV0aWxzXzEgPSByZXF1aXJlKFwiLi9VdGlsc1wiKTtcclxuLyoqIEBwcml2YXRlICovXHJcbnZhciBXZWJTb2NrZXRUcmFuc3BvcnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBXZWJTb2NrZXRUcmFuc3BvcnQoaHR0cENsaWVudCwgYWNjZXNzVG9rZW5GYWN0b3J5LCBsb2dnZXIsIGxvZ01lc3NhZ2VDb250ZW50LCB3ZWJTb2NrZXRDb25zdHJ1Y3Rvcikge1xyXG4gICAgICAgIHRoaXMubG9nZ2VyID0gbG9nZ2VyO1xyXG4gICAgICAgIHRoaXMuYWNjZXNzVG9rZW5GYWN0b3J5ID0gYWNjZXNzVG9rZW5GYWN0b3J5O1xyXG4gICAgICAgIHRoaXMubG9nTWVzc2FnZUNvbnRlbnQgPSBsb2dNZXNzYWdlQ29udGVudDtcclxuICAgICAgICB0aGlzLndlYlNvY2tldENvbnN0cnVjdG9yID0gd2ViU29ja2V0Q29uc3RydWN0b3I7XHJcbiAgICAgICAgdGhpcy5odHRwQ2xpZW50ID0gaHR0cENsaWVudDtcclxuICAgICAgICB0aGlzLm9ucmVjZWl2ZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5vbmNsb3NlID0gbnVsbDtcclxuICAgIH1cclxuICAgIFdlYlNvY2tldFRyYW5zcG9ydC5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uICh1cmwsIHRyYW5zZmVyRm9ybWF0KSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgdG9rZW47XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFV0aWxzXzEuQXJnLmlzUmVxdWlyZWQodXJsLCBcInVybFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgVXRpbHNfMS5BcmcuaXNSZXF1aXJlZCh0cmFuc2ZlckZvcm1hdCwgXCJ0cmFuc2ZlckZvcm1hdFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgVXRpbHNfMS5BcmcuaXNJbih0cmFuc2ZlckZvcm1hdCwgSVRyYW5zcG9ydF8xLlRyYW5zZmVyRm9ybWF0LCBcInRyYW5zZmVyRm9ybWF0XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLlRyYWNlLCBcIihXZWJTb2NrZXRzIHRyYW5zcG9ydCkgQ29ubmVjdGluZy5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5hY2Nlc3NUb2tlbkZhY3RvcnkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmFjY2Vzc1Rva2VuRmFjdG9yeSgpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodG9rZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybCArPSAodXJsLmluZGV4T2YoXCI/XCIpIDwgMCA/IFwiP1wiIDogXCImXCIpICsgKFwiYWNjZXNzX3Rva2VuPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KHRva2VuKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAyO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybCA9IHVybC5yZXBsYWNlKC9eaHR0cC8sIFwid3NcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgd2ViU29ja2V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvb2tpZXMgPSBfdGhpcy5odHRwQ2xpZW50LmdldENvb2tpZVN0cmluZyh1cmwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9wZW5lZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFV0aWxzXzEuUGxhdGZvcm0uaXNOb2RlICYmIGNvb2tpZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBPbmx5IHBhc3MgY29va2llcyB3aGVuIGluIG5vbi1icm93c2VyIGVudmlyb25tZW50c1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdlYlNvY2tldCA9IG5ldyBfdGhpcy53ZWJTb2NrZXRDb25zdHJ1Y3Rvcih1cmwsIHVuZGVmaW5lZCwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb29raWU6IFwiXCIgKyBjb29raWVzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF3ZWJTb2NrZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDaHJvbWUgaXMgbm90IGhhcHB5IHdpdGggcGFzc2luZyAndW5kZWZpbmVkJyBhcyBwcm90b2NvbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdlYlNvY2tldCA9IG5ldyBfdGhpcy53ZWJTb2NrZXRDb25zdHJ1Y3Rvcih1cmwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRyYW5zZmVyRm9ybWF0ID09PSBJVHJhbnNwb3J0XzEuVHJhbnNmZXJGb3JtYXQuQmluYXJ5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2ViU29ja2V0LmJpbmFyeVR5cGUgPSBcImFycmF5YnVmZmVyXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6dmFyaWFibGUtbmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2ViU29ja2V0Lm9ub3BlbiA9IGZ1bmN0aW9uIChfZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5JbmZvcm1hdGlvbiwgXCJXZWJTb2NrZXQgY29ubmVjdGVkIHRvIFwiICsgdXJsICsgXCIuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLndlYlNvY2tldCA9IHdlYlNvY2tldDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ZWJTb2NrZXQub25lcnJvciA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlcnJvciA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXJyb3JFdmVudCBpcyBhIGJyb3dzZXIgb25seSB0eXBlIHdlIG5lZWQgdG8gY2hlY2sgaWYgdGhlIHR5cGUgZXhpc3RzIGJlZm9yZSB1c2luZyBpdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgRXJyb3JFdmVudCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBldmVudCBpbnN0YW5jZW9mIEVycm9yRXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSBldmVudC5lcnJvcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yID0gbmV3IEVycm9yKFwiVGhlcmUgd2FzIGFuIGVycm9yIHdpdGggdGhlIHRyYW5zcG9ydC5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2ViU29ja2V0Lm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuVHJhY2UsIFwiKFdlYlNvY2tldHMgdHJhbnNwb3J0KSBkYXRhIHJlY2VpdmVkLiBcIiArIFV0aWxzXzEuZ2V0RGF0YURldGFpbChtZXNzYWdlLmRhdGEsIF90aGlzLmxvZ01lc3NhZ2VDb250ZW50KSArIFwiLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMub25yZWNlaXZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLm9ucmVjZWl2ZShtZXNzYWdlLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ZWJTb2NrZXQub25jbG9zZSA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERvbid0IGNhbGwgY2xvc2UgaGFuZGxlciBpZiBjb25uZWN0aW9uIHdhcyBuZXZlciBlc3RhYmxpc2hlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlJ2xsIHJlamVjdCB0aGUgY29ubmVjdCBjYWxsIGluc3RlYWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3BlbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmNsb3NlKGV2ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlcnJvciA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEVycm9yRXZlbnQgaXMgYSBicm93c2VyIG9ubHkgdHlwZSB3ZSBuZWVkIHRvIGNoZWNrIGlmIHRoZSB0eXBlIGV4aXN0cyBiZWZvcmUgdXNpbmcgaXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBFcnJvckV2ZW50ICE9PSBcInVuZGVmaW5lZFwiICYmIGV2ZW50IGluc3RhbmNlb2YgRXJyb3JFdmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSBldmVudC5lcnJvcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yID0gbmV3IEVycm9yKFwiVGhlcmUgd2FzIGFuIGVycm9yIHdpdGggdGhlIHRyYW5zcG9ydC5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFdlYlNvY2tldFRyYW5zcG9ydC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgaWYgKHRoaXMud2ViU29ja2V0ICYmIHRoaXMud2ViU29ja2V0LnJlYWR5U3RhdGUgPT09IHRoaXMud2ViU29ja2V0Q29uc3RydWN0b3IuT1BFTikge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLlRyYWNlLCBcIihXZWJTb2NrZXRzIHRyYW5zcG9ydCkgc2VuZGluZyBkYXRhLiBcIiArIFV0aWxzXzEuZ2V0RGF0YURldGFpbChkYXRhLCB0aGlzLmxvZ01lc3NhZ2VDb250ZW50KSArIFwiLlwiKTtcclxuICAgICAgICAgICAgdGhpcy53ZWJTb2NrZXQuc2VuZChkYXRhKTtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXCJXZWJTb2NrZXQgaXMgbm90IGluIHRoZSBPUEVOIHN0YXRlXCIpO1xyXG4gICAgfTtcclxuICAgIFdlYlNvY2tldFRyYW5zcG9ydC5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy53ZWJTb2NrZXQpIHtcclxuICAgICAgICAgICAgLy8gQ2xlYXIgd2Vic29ja2V0IGhhbmRsZXJzIGJlY2F1c2Ugd2UgYXJlIGNvbnNpZGVyaW5nIHRoZSBzb2NrZXQgY2xvc2VkIG5vd1xyXG4gICAgICAgICAgICB0aGlzLndlYlNvY2tldC5vbmNsb3NlID0gZnVuY3Rpb24gKCkgeyB9O1xyXG4gICAgICAgICAgICB0aGlzLndlYlNvY2tldC5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoKSB7IH07XHJcbiAgICAgICAgICAgIHRoaXMud2ViU29ja2V0Lm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7IH07XHJcbiAgICAgICAgICAgIHRoaXMud2ViU29ja2V0LmNsb3NlKCk7XHJcbiAgICAgICAgICAgIHRoaXMud2ViU29ja2V0ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAvLyBNYW51YWxseSBpbnZva2Ugb25jbG9zZSBjYWxsYmFjayBpbmxpbmUgc28gd2Uga25vdyB0aGUgSHR0cENvbm5lY3Rpb24gd2FzIGNsb3NlZCBwcm9wZXJseSBiZWZvcmUgcmV0dXJuaW5nXHJcbiAgICAgICAgICAgIC8vIFRoaXMgYWxzbyBzb2x2ZXMgYW4gaXNzdWUgd2hlcmUgd2Vic29ja2V0Lm9uY2xvc2UgY291bGQgdGFrZSAxOCsgc2Vjb25kcyB0byB0cmlnZ2VyIGR1cmluZyBuZXR3b3JrIGRpc2Nvbm5lY3RzXHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2UodW5kZWZpbmVkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgfTtcclxuICAgIFdlYlNvY2tldFRyYW5zcG9ydC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAvLyB3ZWJTb2NrZXQgd2lsbCBiZSBudWxsIGlmIHRoZSB0cmFuc3BvcnQgZGlkIG5vdCBzdGFydCBzdWNjZXNzZnVsbHlcclxuICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLlRyYWNlLCBcIihXZWJTb2NrZXRzIHRyYW5zcG9ydCkgc29ja2V0IGNsb3NlZC5cIik7XHJcbiAgICAgICAgaWYgKHRoaXMub25jbG9zZSkge1xyXG4gICAgICAgICAgICBpZiAoZXZlbnQgJiYgKGV2ZW50Lndhc0NsZWFuID09PSBmYWxzZSB8fCBldmVudC5jb2RlICE9PSAxMDAwKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbmNsb3NlKG5ldyBFcnJvcihcIldlYlNvY2tldCBjbG9zZWQgd2l0aCBzdGF0dXMgY29kZTogXCIgKyBldmVudC5jb2RlICsgXCIgKFwiICsgZXZlbnQucmVhc29uICsgXCIpLlwiKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uY2xvc2UoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gV2ViU29ja2V0VHJhbnNwb3J0O1xyXG59KCkpO1xyXG5leHBvcnRzLldlYlNvY2tldFRyYW5zcG9ydCA9IFdlYlNvY2tldFRyYW5zcG9ydDtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9V2ViU29ja2V0VHJhbnNwb3J0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG4vLyBDb3B5cmlnaHQgKGMpIC5ORVQgRm91bmRhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbiAgICB9O1xyXG59KSgpO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBFcnJvcnNfMSA9IHJlcXVpcmUoXCIuL0Vycm9yc1wiKTtcclxudmFyIEh0dHBDbGllbnRfMSA9IHJlcXVpcmUoXCIuL0h0dHBDbGllbnRcIik7XHJcbnZhciBJTG9nZ2VyXzEgPSByZXF1aXJlKFwiLi9JTG9nZ2VyXCIpO1xyXG52YXIgWGhySHR0cENsaWVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhYaHJIdHRwQ2xpZW50LCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gWGhySHR0cENsaWVudChsb2dnZXIpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xyXG4gICAgICAgIF90aGlzLmxvZ2dlciA9IGxvZ2dlcjtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICAvKiogQGluaGVyaXREb2MgKi9cclxuICAgIFhockh0dHBDbGllbnQucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAocmVxdWVzdCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgLy8gQ2hlY2sgdGhhdCBhYm9ydCB3YXMgbm90IHNpZ25hbGVkIGJlZm9yZSBjYWxsaW5nIHNlbmRcclxuICAgICAgICBpZiAocmVxdWVzdC5hYm9ydFNpZ25hbCAmJiByZXF1ZXN0LmFib3J0U2lnbmFsLmFib3J0ZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcnNfMS5BYm9ydEVycm9yKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXJlcXVlc3QubWV0aG9kKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJObyBtZXRob2QgZGVmaW5lZC5cIikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXJlcXVlc3QudXJsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJObyB1cmwgZGVmaW5lZC5cIikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XHJcbiAgICAgICAgICAgIHhoci5vcGVuKHJlcXVlc3QubWV0aG9kLCByZXF1ZXN0LnVybCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0cnVlO1xyXG4gICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihcIlgtUmVxdWVzdGVkLVdpdGhcIiwgXCJYTUxIdHRwUmVxdWVzdFwiKTtcclxuICAgICAgICAgICAgLy8gRXhwbGljaXRseSBzZXR0aW5nIHRoZSBDb250ZW50LVR5cGUgaGVhZGVyIGZvciBSZWFjdCBOYXRpdmUgb24gQW5kcm9pZCBwbGF0Zm9ybS5cclxuICAgICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LVR5cGVcIiwgXCJ0ZXh0L3BsYWluO2NoYXJzZXQ9VVRGLThcIik7XHJcbiAgICAgICAgICAgIHZhciBoZWFkZXJzID0gcmVxdWVzdC5oZWFkZXJzO1xyXG4gICAgICAgICAgICBpZiAoaGVhZGVycykge1xyXG4gICAgICAgICAgICAgICAgT2JqZWN0LmtleXMoaGVhZGVycylcclxuICAgICAgICAgICAgICAgICAgICAuZm9yRWFjaChmdW5jdGlvbiAoaGVhZGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoaGVhZGVyLCBoZWFkZXJzW2hlYWRlcl0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHJlcXVlc3QucmVzcG9uc2VUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gcmVxdWVzdC5yZXNwb25zZVR5cGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHJlcXVlc3QuYWJvcnRTaWduYWwpIHtcclxuICAgICAgICAgICAgICAgIHJlcXVlc3QuYWJvcnRTaWduYWwub25hYm9ydCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB4aHIuYWJvcnQoKTtcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yc18xLkFib3J0RXJyb3IoKSk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChyZXF1ZXN0LnRpbWVvdXQpIHtcclxuICAgICAgICAgICAgICAgIHhoci50aW1lb3V0ID0gcmVxdWVzdC50aW1lb3V0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVxdWVzdC5hYm9ydFNpZ25hbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3QuYWJvcnRTaWduYWwub25hYm9ydCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA+PSAyMDAgJiYgeGhyLnN0YXR1cyA8IDMwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUobmV3IEh0dHBDbGllbnRfMS5IdHRwUmVzcG9uc2UoeGhyLnN0YXR1cywgeGhyLnN0YXR1c1RleHQsIHhoci5yZXNwb25zZSB8fCB4aHIucmVzcG9uc2VUZXh0KSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yc18xLkh0dHBFcnJvcih4aHIuc3RhdHVzVGV4dCwgeGhyLnN0YXR1cykpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB4aHIub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLldhcm5pbmcsIFwiRXJyb3IgZnJvbSBIVFRQIHJlcXVlc3QuIFwiICsgeGhyLnN0YXR1cyArIFwiOiBcIiArIHhoci5zdGF0dXNUZXh0ICsgXCIuXCIpO1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcnNfMS5IdHRwRXJyb3IoeGhyLnN0YXR1c1RleHQsIHhoci5zdGF0dXMpKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgeGhyLm9udGltZW91dCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLldhcm5pbmcsIFwiVGltZW91dCBmcm9tIEhUVFAgcmVxdWVzdC5cIik7XHJcbiAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yc18xLlRpbWVvdXRFcnJvcigpKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgeGhyLnNlbmQocmVxdWVzdC5jb250ZW50IHx8IFwiXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBYaHJIdHRwQ2xpZW50O1xyXG59KEh0dHBDbGllbnRfMS5IdHRwQ2xpZW50KSk7XHJcbmV4cG9ydHMuWGhySHR0cENsaWVudCA9IFhockh0dHBDbGllbnQ7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVhockh0dHBDbGllbnQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8vIENvcHlyaWdodCAoYykgLk5FVCBGb3VuZGF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG4vLyBWZXJzaW9uIHRva2VuIHRoYXQgd2lsbCBiZSByZXBsYWNlZCBieSB0aGUgcHJlcGFjayBjb21tYW5kXHJcbi8qKiBUaGUgdmVyc2lvbiBvZiB0aGUgU2lnbmFsUiBjbGllbnQuICovXHJcbmV4cG9ydHMuVkVSU0lPTiA9IFwiMy4xLjNcIjtcclxudmFyIEVycm9yc18xID0gcmVxdWlyZShcIi4vRXJyb3JzXCIpO1xyXG5leHBvcnRzLkFib3J0RXJyb3IgPSBFcnJvcnNfMS5BYm9ydEVycm9yO1xyXG5leHBvcnRzLkh0dHBFcnJvciA9IEVycm9yc18xLkh0dHBFcnJvcjtcclxuZXhwb3J0cy5UaW1lb3V0RXJyb3IgPSBFcnJvcnNfMS5UaW1lb3V0RXJyb3I7XHJcbnZhciBIdHRwQ2xpZW50XzEgPSByZXF1aXJlKFwiLi9IdHRwQ2xpZW50XCIpO1xyXG5leHBvcnRzLkh0dHBDbGllbnQgPSBIdHRwQ2xpZW50XzEuSHR0cENsaWVudDtcclxuZXhwb3J0cy5IdHRwUmVzcG9uc2UgPSBIdHRwQ2xpZW50XzEuSHR0cFJlc3BvbnNlO1xyXG52YXIgRGVmYXVsdEh0dHBDbGllbnRfMSA9IHJlcXVpcmUoXCIuL0RlZmF1bHRIdHRwQ2xpZW50XCIpO1xyXG5leHBvcnRzLkRlZmF1bHRIdHRwQ2xpZW50ID0gRGVmYXVsdEh0dHBDbGllbnRfMS5EZWZhdWx0SHR0cENsaWVudDtcclxudmFyIEh1YkNvbm5lY3Rpb25fMSA9IHJlcXVpcmUoXCIuL0h1YkNvbm5lY3Rpb25cIik7XHJcbmV4cG9ydHMuSHViQ29ubmVjdGlvbiA9IEh1YkNvbm5lY3Rpb25fMS5IdWJDb25uZWN0aW9uO1xyXG5leHBvcnRzLkh1YkNvbm5lY3Rpb25TdGF0ZSA9IEh1YkNvbm5lY3Rpb25fMS5IdWJDb25uZWN0aW9uU3RhdGU7XHJcbnZhciBIdWJDb25uZWN0aW9uQnVpbGRlcl8xID0gcmVxdWlyZShcIi4vSHViQ29ubmVjdGlvbkJ1aWxkZXJcIik7XHJcbmV4cG9ydHMuSHViQ29ubmVjdGlvbkJ1aWxkZXIgPSBIdWJDb25uZWN0aW9uQnVpbGRlcl8xLkh1YkNvbm5lY3Rpb25CdWlsZGVyO1xyXG52YXIgSUh1YlByb3RvY29sXzEgPSByZXF1aXJlKFwiLi9JSHViUHJvdG9jb2xcIik7XHJcbmV4cG9ydHMuTWVzc2FnZVR5cGUgPSBJSHViUHJvdG9jb2xfMS5NZXNzYWdlVHlwZTtcclxudmFyIElMb2dnZXJfMSA9IHJlcXVpcmUoXCIuL0lMb2dnZXJcIik7XHJcbmV4cG9ydHMuTG9nTGV2ZWwgPSBJTG9nZ2VyXzEuTG9nTGV2ZWw7XHJcbnZhciBJVHJhbnNwb3J0XzEgPSByZXF1aXJlKFwiLi9JVHJhbnNwb3J0XCIpO1xyXG5leHBvcnRzLkh0dHBUcmFuc3BvcnRUeXBlID0gSVRyYW5zcG9ydF8xLkh0dHBUcmFuc3BvcnRUeXBlO1xyXG5leHBvcnRzLlRyYW5zZmVyRm9ybWF0ID0gSVRyYW5zcG9ydF8xLlRyYW5zZmVyRm9ybWF0O1xyXG52YXIgTG9nZ2Vyc18xID0gcmVxdWlyZShcIi4vTG9nZ2Vyc1wiKTtcclxuZXhwb3J0cy5OdWxsTG9nZ2VyID0gTG9nZ2Vyc18xLk51bGxMb2dnZXI7XHJcbnZhciBKc29uSHViUHJvdG9jb2xfMSA9IHJlcXVpcmUoXCIuL0pzb25IdWJQcm90b2NvbFwiKTtcclxuZXhwb3J0cy5Kc29uSHViUHJvdG9jb2wgPSBKc29uSHViUHJvdG9jb2xfMS5Kc29uSHViUHJvdG9jb2w7XHJcbnZhciBTdWJqZWN0XzEgPSByZXF1aXJlKFwiLi9TdWJqZWN0XCIpO1xyXG5leHBvcnRzLlN1YmplY3QgPSBTdWJqZWN0XzEuU3ViamVjdDtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiLyoqXG4gKiBAcG9wcGVyanMvY29yZSB2Mi40LjAgLSBNSVQgTGljZW5zZVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuZnVuY3Rpb24gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQpIHtcbiAgdmFyIHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICByZXR1cm4ge1xuICAgIHdpZHRoOiByZWN0LndpZHRoLFxuICAgIGhlaWdodDogcmVjdC5oZWlnaHQsXG4gICAgdG9wOiByZWN0LnRvcCxcbiAgICByaWdodDogcmVjdC5yaWdodCxcbiAgICBib3R0b206IHJlY3QuYm90dG9tLFxuICAgIGxlZnQ6IHJlY3QubGVmdCxcbiAgICB4OiByZWN0LmxlZnQsXG4gICAgeTogcmVjdC50b3BcbiAgfTtcbn1cblxuLyo6OiBpbXBvcnQgdHlwZSB7IFdpbmRvdyB9IGZyb20gJy4uL3R5cGVzJzsgKi9cblxuLyo6OiBkZWNsYXJlIGZ1bmN0aW9uIGdldFdpbmRvdyhub2RlOiBOb2RlIHwgV2luZG93KTogV2luZG93OyAqL1xuZnVuY3Rpb24gZ2V0V2luZG93KG5vZGUpIHtcbiAgaWYgKG5vZGUudG9TdHJpbmcoKSAhPT0gJ1tvYmplY3QgV2luZG93XScpIHtcbiAgICB2YXIgb3duZXJEb2N1bWVudCA9IG5vZGUub3duZXJEb2N1bWVudDtcbiAgICByZXR1cm4gb3duZXJEb2N1bWVudCA/IG93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgOiB3aW5kb3c7XG4gIH1cblxuICByZXR1cm4gbm9kZTtcbn1cblxuZnVuY3Rpb24gZ2V0V2luZG93U2Nyb2xsKG5vZGUpIHtcbiAgdmFyIHdpbiA9IGdldFdpbmRvdyhub2RlKTtcbiAgdmFyIHNjcm9sbExlZnQgPSB3aW4ucGFnZVhPZmZzZXQ7XG4gIHZhciBzY3JvbGxUb3AgPSB3aW4ucGFnZVlPZmZzZXQ7XG4gIHJldHVybiB7XG4gICAgc2Nyb2xsTGVmdDogc2Nyb2xsTGVmdCxcbiAgICBzY3JvbGxUb3A6IHNjcm9sbFRvcFxuICB9O1xufVxuXG4vKjo6IGRlY2xhcmUgZnVuY3Rpb24gaXNFbGVtZW50KG5vZGU6IG1peGVkKTogYm9vbGVhbiAlY2hlY2tzKG5vZGUgaW5zdGFuY2VvZlxuICBFbGVtZW50KTsgKi9cblxuZnVuY3Rpb24gaXNFbGVtZW50KG5vZGUpIHtcbiAgdmFyIE93bkVsZW1lbnQgPSBnZXRXaW5kb3cobm9kZSkuRWxlbWVudDtcbiAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBPd25FbGVtZW50IHx8IG5vZGUgaW5zdGFuY2VvZiBFbGVtZW50O1xufVxuLyo6OiBkZWNsYXJlIGZ1bmN0aW9uIGlzSFRNTEVsZW1lbnQobm9kZTogbWl4ZWQpOiBib29sZWFuICVjaGVja3Mobm9kZSBpbnN0YW5jZW9mXG4gIEhUTUxFbGVtZW50KTsgKi9cblxuXG5mdW5jdGlvbiBpc0hUTUxFbGVtZW50KG5vZGUpIHtcbiAgdmFyIE93bkVsZW1lbnQgPSBnZXRXaW5kb3cobm9kZSkuSFRNTEVsZW1lbnQ7XG4gIHJldHVybiBub2RlIGluc3RhbmNlb2YgT3duRWxlbWVudCB8fCBub2RlIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQ7XG59XG5cbmZ1bmN0aW9uIGdldEhUTUxFbGVtZW50U2Nyb2xsKGVsZW1lbnQpIHtcbiAgcmV0dXJuIHtcbiAgICBzY3JvbGxMZWZ0OiBlbGVtZW50LnNjcm9sbExlZnQsXG4gICAgc2Nyb2xsVG9wOiBlbGVtZW50LnNjcm9sbFRvcFxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXROb2RlU2Nyb2xsKG5vZGUpIHtcbiAgaWYgKG5vZGUgPT09IGdldFdpbmRvdyhub2RlKSB8fCAhaXNIVE1MRWxlbWVudChub2RlKSkge1xuICAgIHJldHVybiBnZXRXaW5kb3dTY3JvbGwobm9kZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGdldEhUTUxFbGVtZW50U2Nyb2xsKG5vZGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldE5vZGVOYW1lKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGVsZW1lbnQgPyAoZWxlbWVudC5ub2RlTmFtZSB8fCAnJykudG9Mb3dlckNhc2UoKSA6IG51bGw7XG59XG5cbmZ1bmN0aW9uIGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSB7XG4gIC8vICRGbG93Rml4TWU6IGFzc3VtZSBib2R5IGlzIGFsd2F5cyBhdmFpbGFibGVcbiAgcmV0dXJuIChpc0VsZW1lbnQoZWxlbWVudCkgPyBlbGVtZW50Lm93bmVyRG9jdW1lbnQgOiBlbGVtZW50LmRvY3VtZW50KS5kb2N1bWVudEVsZW1lbnQ7XG59XG5cbmZ1bmN0aW9uIGdldFdpbmRvd1Njcm9sbEJhclgoZWxlbWVudCkge1xuICAvLyBJZiA8aHRtbD4gaGFzIGEgQ1NTIHdpZHRoIGdyZWF0ZXIgdGhhbiB0aGUgdmlld3BvcnQsIHRoZW4gdGhpcyB3aWxsIGJlXG4gIC8vIGluY29ycmVjdCBmb3IgUlRMLlxuICAvLyBQb3BwZXIgMSBpcyBicm9rZW4gaW4gdGhpcyBjYXNlIGFuZCBuZXZlciBoYWQgYSBidWcgcmVwb3J0IHNvIGxldCdzIGFzc3VtZVxuICAvLyBpdCdzIG5vdCBhbiBpc3N1ZS4gSSBkb24ndCB0aGluayBhbnlvbmUgZXZlciBzcGVjaWZpZXMgd2lkdGggb24gPGh0bWw+XG4gIC8vIGFueXdheS5cbiAgLy8gQnJvd3NlcnMgd2hlcmUgdGhlIGxlZnQgc2Nyb2xsYmFyIGRvZXNuJ3QgY2F1c2UgYW4gaXNzdWUgcmVwb3J0IGAwYCBmb3JcbiAgLy8gdGhpcyAoZS5nLiBFZGdlIDIwMTksIElFMTEsIFNhZmFyaSlcbiAgcmV0dXJuIGdldEJvdW5kaW5nQ2xpZW50UmVjdChnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCkpLmxlZnQgKyBnZXRXaW5kb3dTY3JvbGwoZWxlbWVudCkuc2Nyb2xsTGVmdDtcbn1cblxuZnVuY3Rpb24gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KSB7XG4gIHJldHVybiBnZXRXaW5kb3coZWxlbWVudCkuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbn1cblxuZnVuY3Rpb24gaXNTY3JvbGxQYXJlbnQoZWxlbWVudCkge1xuICAvLyBGaXJlZm94IHdhbnRzIHVzIHRvIGNoZWNrIGAteGAgYW5kIGAteWAgdmFyaWF0aW9ucyBhcyB3ZWxsXG4gIHZhciBfZ2V0Q29tcHV0ZWRTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCksXG4gICAgICBvdmVyZmxvdyA9IF9nZXRDb21wdXRlZFN0eWxlLm92ZXJmbG93LFxuICAgICAgb3ZlcmZsb3dYID0gX2dldENvbXB1dGVkU3R5bGUub3ZlcmZsb3dYLFxuICAgICAgb3ZlcmZsb3dZID0gX2dldENvbXB1dGVkU3R5bGUub3ZlcmZsb3dZO1xuXG4gIHJldHVybiAvYXV0b3xzY3JvbGx8b3ZlcmxheXxoaWRkZW4vLnRlc3Qob3ZlcmZsb3cgKyBvdmVyZmxvd1kgKyBvdmVyZmxvd1gpO1xufVxuXG4vLyBDb21wb3NpdGUgbWVhbnMgaXQgdGFrZXMgaW50byBhY2NvdW50IHRyYW5zZm9ybXMgYXMgd2VsbCBhcyBsYXlvdXQuXG5cbmZ1bmN0aW9uIGdldENvbXBvc2l0ZVJlY3QoZWxlbWVudE9yVmlydHVhbEVsZW1lbnQsIG9mZnNldFBhcmVudCwgaXNGaXhlZCkge1xuICBpZiAoaXNGaXhlZCA9PT0gdm9pZCAwKSB7XG4gICAgaXNGaXhlZCA9IGZhbHNlO1xuICB9XG5cbiAgdmFyIGRvY3VtZW50RWxlbWVudCA9IGdldERvY3VtZW50RWxlbWVudChvZmZzZXRQYXJlbnQpO1xuICB2YXIgcmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50T3JWaXJ0dWFsRWxlbWVudCk7XG4gIHZhciBzY3JvbGwgPSB7XG4gICAgc2Nyb2xsTGVmdDogMCxcbiAgICBzY3JvbGxUb3A6IDBcbiAgfTtcbiAgdmFyIG9mZnNldHMgPSB7XG4gICAgeDogMCxcbiAgICB5OiAwXG4gIH07XG5cbiAgaWYgKCFpc0ZpeGVkKSB7XG4gICAgaWYgKGdldE5vZGVOYW1lKG9mZnNldFBhcmVudCkgIT09ICdib2R5JyB8fCAvLyBodHRwczovL2dpdGh1Yi5jb20vcG9wcGVyanMvcG9wcGVyLWNvcmUvaXNzdWVzLzEwNzhcbiAgICBpc1Njcm9sbFBhcmVudChkb2N1bWVudEVsZW1lbnQpKSB7XG4gICAgICBzY3JvbGwgPSBnZXROb2RlU2Nyb2xsKG9mZnNldFBhcmVudCk7XG4gICAgfVxuXG4gICAgaWYgKGlzSFRNTEVsZW1lbnQob2Zmc2V0UGFyZW50KSkge1xuICAgICAgb2Zmc2V0cyA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChvZmZzZXRQYXJlbnQpO1xuICAgICAgb2Zmc2V0cy54ICs9IG9mZnNldFBhcmVudC5jbGllbnRMZWZ0O1xuICAgICAgb2Zmc2V0cy55ICs9IG9mZnNldFBhcmVudC5jbGllbnRUb3A7XG4gICAgfSBlbHNlIGlmIChkb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgIG9mZnNldHMueCA9IGdldFdpbmRvd1Njcm9sbEJhclgoZG9jdW1lbnRFbGVtZW50KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHg6IHJlY3QubGVmdCArIHNjcm9sbC5zY3JvbGxMZWZ0IC0gb2Zmc2V0cy54LFxuICAgIHk6IHJlY3QudG9wICsgc2Nyb2xsLnNjcm9sbFRvcCAtIG9mZnNldHMueSxcbiAgICB3aWR0aDogcmVjdC53aWR0aCxcbiAgICBoZWlnaHQ6IHJlY3QuaGVpZ2h0XG4gIH07XG59XG5cbi8vIFJldHVybnMgdGhlIGxheW91dCByZWN0IG9mIGFuIGVsZW1lbnQgcmVsYXRpdmUgdG8gaXRzIG9mZnNldFBhcmVudC4gTGF5b3V0XG4vLyBtZWFucyBpdCBkb2Vzbid0IHRha2UgaW50byBhY2NvdW50IHRyYW5zZm9ybXMuXG5mdW5jdGlvbiBnZXRMYXlvdXRSZWN0KGVsZW1lbnQpIHtcbiAgcmV0dXJuIHtcbiAgICB4OiBlbGVtZW50Lm9mZnNldExlZnQsXG4gICAgeTogZWxlbWVudC5vZmZzZXRUb3AsXG4gICAgd2lkdGg6IGVsZW1lbnQub2Zmc2V0V2lkdGgsXG4gICAgaGVpZ2h0OiBlbGVtZW50Lm9mZnNldEhlaWdodFxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRQYXJlbnROb2RlKGVsZW1lbnQpIHtcbiAgaWYgKGdldE5vZGVOYW1lKGVsZW1lbnQpID09PSAnaHRtbCcpIHtcbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxuXG4gIHJldHVybiAoLy8gJEZsb3dGaXhNZTogdGhpcyBpcyBhIHF1aWNrZXIgKGJ1dCBsZXNzIHR5cGUgc2FmZSkgd2F5IHRvIHNhdmUgcXVpdGUgc29tZSBieXRlcyBmcm9tIHRoZSBidW5kbGVcbiAgICBlbGVtZW50LmFzc2lnbmVkU2xvdCB8fCAvLyBzdGVwIGludG8gdGhlIHNoYWRvdyBET00gb2YgdGhlIHBhcmVudCBvZiBhIHNsb3R0ZWQgbm9kZVxuICAgIGVsZW1lbnQucGFyZW50Tm9kZSB8fCAvLyBET00gRWxlbWVudCBkZXRlY3RlZFxuICAgIC8vICRGbG93Rml4TWU6IG5lZWQgYSBiZXR0ZXIgd2F5IHRvIGhhbmRsZSB0aGlzLi4uXG4gICAgZWxlbWVudC5ob3N0IHx8IC8vIFNoYWRvd1Jvb3QgZGV0ZWN0ZWRcbiAgICAvLyAkRmxvd0ZpeE1lOiBIVE1MRWxlbWVudCBpcyBhIE5vZGVcbiAgICBnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCkgLy8gZmFsbGJhY2tcblxuICApO1xufVxuXG5mdW5jdGlvbiBnZXRTY3JvbGxQYXJlbnQobm9kZSkge1xuICBpZiAoWydodG1sJywgJ2JvZHknLCAnI2RvY3VtZW50J10uaW5kZXhPZihnZXROb2RlTmFtZShub2RlKSkgPj0gMCkge1xuICAgIC8vICRGbG93Rml4TWU6IGFzc3VtZSBib2R5IGlzIGFsd2F5cyBhdmFpbGFibGVcbiAgICByZXR1cm4gbm9kZS5vd25lckRvY3VtZW50LmJvZHk7XG4gIH1cblxuICBpZiAoaXNIVE1MRWxlbWVudChub2RlKSAmJiBpc1Njcm9sbFBhcmVudChub2RlKSkge1xuICAgIHJldHVybiBub2RlO1xuICB9XG5cbiAgcmV0dXJuIGdldFNjcm9sbFBhcmVudChnZXRQYXJlbnROb2RlKG5vZGUpKTtcbn1cblxuZnVuY3Rpb24gbGlzdFNjcm9sbFBhcmVudHMoZWxlbWVudCwgbGlzdCkge1xuICBpZiAobGlzdCA9PT0gdm9pZCAwKSB7XG4gICAgbGlzdCA9IFtdO1xuICB9XG5cbiAgdmFyIHNjcm9sbFBhcmVudCA9IGdldFNjcm9sbFBhcmVudChlbGVtZW50KTtcbiAgdmFyIGlzQm9keSA9IGdldE5vZGVOYW1lKHNjcm9sbFBhcmVudCkgPT09ICdib2R5JztcbiAgdmFyIHdpbiA9IGdldFdpbmRvdyhzY3JvbGxQYXJlbnQpO1xuICB2YXIgdGFyZ2V0ID0gaXNCb2R5ID8gW3dpbl0uY29uY2F0KHdpbi52aXN1YWxWaWV3cG9ydCB8fCBbXSwgaXNTY3JvbGxQYXJlbnQoc2Nyb2xsUGFyZW50KSA/IHNjcm9sbFBhcmVudCA6IFtdKSA6IHNjcm9sbFBhcmVudDtcbiAgdmFyIHVwZGF0ZWRMaXN0ID0gbGlzdC5jb25jYXQodGFyZ2V0KTtcbiAgcmV0dXJuIGlzQm9keSA/IHVwZGF0ZWRMaXN0IDogLy8gJEZsb3dGaXhNZTogaXNCb2R5IHRlbGxzIHVzIHRhcmdldCB3aWxsIGJlIGFuIEhUTUxFbGVtZW50IGhlcmVcbiAgdXBkYXRlZExpc3QuY29uY2F0KGxpc3RTY3JvbGxQYXJlbnRzKGdldFBhcmVudE5vZGUodGFyZ2V0KSkpO1xufVxuXG5mdW5jdGlvbiBpc1RhYmxlRWxlbWVudChlbGVtZW50KSB7XG4gIHJldHVybiBbJ3RhYmxlJywgJ3RkJywgJ3RoJ10uaW5kZXhPZihnZXROb2RlTmFtZShlbGVtZW50KSkgPj0gMDtcbn1cblxuZnVuY3Rpb24gZ2V0VHJ1ZU9mZnNldFBhcmVudChlbGVtZW50KSB7XG4gIGlmICghaXNIVE1MRWxlbWVudChlbGVtZW50KSB8fCAvLyBodHRwczovL2dpdGh1Yi5jb20vcG9wcGVyanMvcG9wcGVyLWNvcmUvaXNzdWVzLzgzN1xuICBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLnBvc2l0aW9uID09PSAnZml4ZWQnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gZWxlbWVudC5vZmZzZXRQYXJlbnQ7XG59XG5cbmZ1bmN0aW9uIGdldE9mZnNldFBhcmVudChlbGVtZW50KSB7XG4gIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coZWxlbWVudCk7XG4gIHZhciBvZmZzZXRQYXJlbnQgPSBnZXRUcnVlT2Zmc2V0UGFyZW50KGVsZW1lbnQpOyAvLyBGaW5kIHRoZSBuZWFyZXN0IG5vbi10YWJsZSBvZmZzZXRQYXJlbnRcblxuICB3aGlsZSAob2Zmc2V0UGFyZW50ICYmIGlzVGFibGVFbGVtZW50KG9mZnNldFBhcmVudCkpIHtcbiAgICBvZmZzZXRQYXJlbnQgPSBnZXRUcnVlT2Zmc2V0UGFyZW50KG9mZnNldFBhcmVudCk7XG4gIH1cblxuICBpZiAob2Zmc2V0UGFyZW50ICYmIGdldE5vZGVOYW1lKG9mZnNldFBhcmVudCkgPT09ICdib2R5JyAmJiBnZXRDb21wdXRlZFN0eWxlKG9mZnNldFBhcmVudCkucG9zaXRpb24gPT09ICdzdGF0aWMnKSB7XG4gICAgcmV0dXJuIHdpbmRvdztcbiAgfVxuXG4gIHJldHVybiBvZmZzZXRQYXJlbnQgfHwgd2luZG93O1xufVxuXG52YXIgdG9wID0gJ3RvcCc7XG52YXIgYm90dG9tID0gJ2JvdHRvbSc7XG52YXIgcmlnaHQgPSAncmlnaHQnO1xudmFyIGxlZnQgPSAnbGVmdCc7XG52YXIgYXV0byA9ICdhdXRvJztcbnZhciBiYXNlUGxhY2VtZW50cyA9IFt0b3AsIGJvdHRvbSwgcmlnaHQsIGxlZnRdO1xudmFyIHN0YXJ0ID0gJ3N0YXJ0JztcbnZhciBlbmQgPSAnZW5kJztcbnZhciBjbGlwcGluZ1BhcmVudHMgPSAnY2xpcHBpbmdQYXJlbnRzJztcbnZhciB2aWV3cG9ydCA9ICd2aWV3cG9ydCc7XG52YXIgcG9wcGVyID0gJ3BvcHBlcic7XG52YXIgcmVmZXJlbmNlID0gJ3JlZmVyZW5jZSc7XG52YXIgdmFyaWF0aW9uUGxhY2VtZW50cyA9IC8qI19fUFVSRV9fKi9iYXNlUGxhY2VtZW50cy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGxhY2VtZW50KSB7XG4gIHJldHVybiBhY2MuY29uY2F0KFtwbGFjZW1lbnQgKyBcIi1cIiArIHN0YXJ0LCBwbGFjZW1lbnQgKyBcIi1cIiArIGVuZF0pO1xufSwgW10pO1xudmFyIHBsYWNlbWVudHMgPSAvKiNfX1BVUkVfXyovW10uY29uY2F0KGJhc2VQbGFjZW1lbnRzLCBbYXV0b10pLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIGFjYy5jb25jYXQoW3BsYWNlbWVudCwgcGxhY2VtZW50ICsgXCItXCIgKyBzdGFydCwgcGxhY2VtZW50ICsgXCItXCIgKyBlbmRdKTtcbn0sIFtdKTsgLy8gbW9kaWZpZXJzIHRoYXQgbmVlZCB0byByZWFkIHRoZSBET01cblxudmFyIGJlZm9yZVJlYWQgPSAnYmVmb3JlUmVhZCc7XG52YXIgcmVhZCA9ICdyZWFkJztcbnZhciBhZnRlclJlYWQgPSAnYWZ0ZXJSZWFkJzsgLy8gcHVyZS1sb2dpYyBtb2RpZmllcnNcblxudmFyIGJlZm9yZU1haW4gPSAnYmVmb3JlTWFpbic7XG52YXIgbWFpbiA9ICdtYWluJztcbnZhciBhZnRlck1haW4gPSAnYWZ0ZXJNYWluJzsgLy8gbW9kaWZpZXIgd2l0aCB0aGUgcHVycG9zZSB0byB3cml0ZSB0byB0aGUgRE9NIChvciB3cml0ZSBpbnRvIGEgZnJhbWV3b3JrIHN0YXRlKVxuXG52YXIgYmVmb3JlV3JpdGUgPSAnYmVmb3JlV3JpdGUnO1xudmFyIHdyaXRlID0gJ3dyaXRlJztcbnZhciBhZnRlcldyaXRlID0gJ2FmdGVyV3JpdGUnO1xudmFyIG1vZGlmaWVyUGhhc2VzID0gW2JlZm9yZVJlYWQsIHJlYWQsIGFmdGVyUmVhZCwgYmVmb3JlTWFpbiwgbWFpbiwgYWZ0ZXJNYWluLCBiZWZvcmVXcml0ZSwgd3JpdGUsIGFmdGVyV3JpdGVdO1xuXG5mdW5jdGlvbiBvcmRlcihtb2RpZmllcnMpIHtcbiAgdmFyIG1hcCA9IG5ldyBNYXAoKTtcbiAgdmFyIHZpc2l0ZWQgPSBuZXcgU2V0KCk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgbW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgbWFwLnNldChtb2RpZmllci5uYW1lLCBtb2RpZmllcik7XG4gIH0pOyAvLyBPbiB2aXNpdGluZyBvYmplY3QsIGNoZWNrIGZvciBpdHMgZGVwZW5kZW5jaWVzIGFuZCB2aXNpdCB0aGVtIHJlY3Vyc2l2ZWx5XG5cbiAgZnVuY3Rpb24gc29ydChtb2RpZmllcikge1xuICAgIHZpc2l0ZWQuYWRkKG1vZGlmaWVyLm5hbWUpO1xuICAgIHZhciByZXF1aXJlcyA9IFtdLmNvbmNhdChtb2RpZmllci5yZXF1aXJlcyB8fCBbXSwgbW9kaWZpZXIucmVxdWlyZXNJZkV4aXN0cyB8fCBbXSk7XG4gICAgcmVxdWlyZXMuZm9yRWFjaChmdW5jdGlvbiAoZGVwKSB7XG4gICAgICBpZiAoIXZpc2l0ZWQuaGFzKGRlcCkpIHtcbiAgICAgICAgdmFyIGRlcE1vZGlmaWVyID0gbWFwLmdldChkZXApO1xuXG4gICAgICAgIGlmIChkZXBNb2RpZmllcikge1xuICAgICAgICAgIHNvcnQoZGVwTW9kaWZpZXIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmVzdWx0LnB1c2gobW9kaWZpZXIpO1xuICB9XG5cbiAgbW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgaWYgKCF2aXNpdGVkLmhhcyhtb2RpZmllci5uYW1lKSkge1xuICAgICAgLy8gY2hlY2sgZm9yIHZpc2l0ZWQgb2JqZWN0XG4gICAgICBzb3J0KG1vZGlmaWVyKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBvcmRlck1vZGlmaWVycyhtb2RpZmllcnMpIHtcbiAgLy8gb3JkZXIgYmFzZWQgb24gZGVwZW5kZW5jaWVzXG4gIHZhciBvcmRlcmVkTW9kaWZpZXJzID0gb3JkZXIobW9kaWZpZXJzKTsgLy8gb3JkZXIgYmFzZWQgb24gcGhhc2VcblxuICByZXR1cm4gbW9kaWZpZXJQaGFzZXMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBoYXNlKSB7XG4gICAgcmV0dXJuIGFjYy5jb25jYXQob3JkZXJlZE1vZGlmaWVycy5maWx0ZXIoZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgICByZXR1cm4gbW9kaWZpZXIucGhhc2UgPT09IHBoYXNlO1xuICAgIH0pKTtcbiAgfSwgW10pO1xufVxuXG5mdW5jdGlvbiBkZWJvdW5jZShmbikge1xuICB2YXIgcGVuZGluZztcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXBlbmRpbmcpIHtcbiAgICAgIHBlbmRpbmcgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBwZW5kaW5nID0gdW5kZWZpbmVkO1xuICAgICAgICAgIHJlc29sdmUoZm4oKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBlbmRpbmc7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGZvcm1hdChzdHIpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIFtdLmNvbmNhdChhcmdzKS5yZWR1Y2UoZnVuY3Rpb24gKHAsIGMpIHtcbiAgICByZXR1cm4gcC5yZXBsYWNlKC8lcy8sIGMpO1xuICB9LCBzdHIpO1xufVxuXG52YXIgSU5WQUxJRF9NT0RJRklFUl9FUlJPUiA9ICdQb3BwZXI6IG1vZGlmaWVyIFwiJXNcIiBwcm92aWRlZCBhbiBpbnZhbGlkICVzIHByb3BlcnR5LCBleHBlY3RlZCAlcyBidXQgZ290ICVzJztcbnZhciBNSVNTSU5HX0RFUEVOREVOQ1lfRVJST1IgPSAnUG9wcGVyOiBtb2RpZmllciBcIiVzXCIgcmVxdWlyZXMgXCIlc1wiLCBidXQgXCIlc1wiIG1vZGlmaWVyIGlzIG5vdCBhdmFpbGFibGUnO1xudmFyIFZBTElEX1BST1BFUlRJRVMgPSBbJ25hbWUnLCAnZW5hYmxlZCcsICdwaGFzZScsICdmbicsICdlZmZlY3QnLCAncmVxdWlyZXMnLCAnb3B0aW9ucyddO1xuZnVuY3Rpb24gdmFsaWRhdGVNb2RpZmllcnMobW9kaWZpZXJzKSB7XG4gIG1vZGlmaWVycy5mb3JFYWNoKGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgIE9iamVjdC5rZXlzKG1vZGlmaWVyKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgIGNhc2UgJ25hbWUnOlxuICAgICAgICAgIGlmICh0eXBlb2YgbW9kaWZpZXIubmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZm9ybWF0KElOVkFMSURfTU9ESUZJRVJfRVJST1IsIFN0cmluZyhtb2RpZmllci5uYW1lKSwgJ1wibmFtZVwiJywgJ1wic3RyaW5nXCInLCBcIlxcXCJcIiArIFN0cmluZyhtb2RpZmllci5uYW1lKSArIFwiXFxcIlwiKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnZW5hYmxlZCc6XG4gICAgICAgICAgaWYgKHR5cGVvZiBtb2RpZmllci5lbmFibGVkICE9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZm9ybWF0KElOVkFMSURfTU9ESUZJRVJfRVJST1IsIG1vZGlmaWVyLm5hbWUsICdcImVuYWJsZWRcIicsICdcImJvb2xlYW5cIicsIFwiXFxcIlwiICsgU3RyaW5nKG1vZGlmaWVyLmVuYWJsZWQpICsgXCJcXFwiXCIpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgY2FzZSAncGhhc2UnOlxuICAgICAgICAgIGlmIChtb2RpZmllclBoYXNlcy5pbmRleE9mKG1vZGlmaWVyLnBoYXNlKSA8IDApIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZm9ybWF0KElOVkFMSURfTU9ESUZJRVJfRVJST1IsIG1vZGlmaWVyLm5hbWUsICdcInBoYXNlXCInLCBcImVpdGhlciBcIiArIG1vZGlmaWVyUGhhc2VzLmpvaW4oJywgJyksIFwiXFxcIlwiICsgU3RyaW5nKG1vZGlmaWVyLnBoYXNlKSArIFwiXFxcIlwiKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnZm4nOlxuICAgICAgICAgIGlmICh0eXBlb2YgbW9kaWZpZXIuZm4gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZm9ybWF0KElOVkFMSURfTU9ESUZJRVJfRVJST1IsIG1vZGlmaWVyLm5hbWUsICdcImZuXCInLCAnXCJmdW5jdGlvblwiJywgXCJcXFwiXCIgKyBTdHJpbmcobW9kaWZpZXIuZm4pICsgXCJcXFwiXCIpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdlZmZlY3QnOlxuICAgICAgICAgIGlmICh0eXBlb2YgbW9kaWZpZXIuZWZmZWN0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGZvcm1hdChJTlZBTElEX01PRElGSUVSX0VSUk9SLCBtb2RpZmllci5uYW1lLCAnXCJlZmZlY3RcIicsICdcImZ1bmN0aW9uXCInLCBcIlxcXCJcIiArIFN0cmluZyhtb2RpZmllci5mbikgKyBcIlxcXCJcIikpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3JlcXVpcmVzJzpcbiAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkobW9kaWZpZXIucmVxdWlyZXMpKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGZvcm1hdChJTlZBTElEX01PRElGSUVSX0VSUk9SLCBtb2RpZmllci5uYW1lLCAnXCJyZXF1aXJlc1wiJywgJ1wiYXJyYXlcIicsIFwiXFxcIlwiICsgU3RyaW5nKG1vZGlmaWVyLnJlcXVpcmVzKSArIFwiXFxcIlwiKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAncmVxdWlyZXNJZkV4aXN0cyc6XG4gICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KG1vZGlmaWVyLnJlcXVpcmVzSWZFeGlzdHMpKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGZvcm1hdChJTlZBTElEX01PRElGSUVSX0VSUk9SLCBtb2RpZmllci5uYW1lLCAnXCJyZXF1aXJlc0lmRXhpc3RzXCInLCAnXCJhcnJheVwiJywgXCJcXFwiXCIgKyBTdHJpbmcobW9kaWZpZXIucmVxdWlyZXNJZkV4aXN0cykgKyBcIlxcXCJcIikpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ29wdGlvbnMnOlxuICAgICAgICBjYXNlICdkYXRhJzpcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJQb3BwZXJKUzogYW4gaW52YWxpZCBwcm9wZXJ0eSBoYXMgYmVlbiBwcm92aWRlZCB0byB0aGUgXFxcIlwiICsgbW9kaWZpZXIubmFtZSArIFwiXFxcIiBtb2RpZmllciwgdmFsaWQgcHJvcGVydGllcyBhcmUgXCIgKyBWQUxJRF9QUk9QRVJUSUVTLm1hcChmdW5jdGlvbiAocykge1xuICAgICAgICAgICAgcmV0dXJuIFwiXFxcIlwiICsgcyArIFwiXFxcIlwiO1xuICAgICAgICAgIH0pLmpvaW4oJywgJykgKyBcIjsgYnV0IFxcXCJcIiArIGtleSArIFwiXFxcIiB3YXMgcHJvdmlkZWQuXCIpO1xuICAgICAgfVxuXG4gICAgICBtb2RpZmllci5yZXF1aXJlcyAmJiBtb2RpZmllci5yZXF1aXJlcy5mb3JFYWNoKGZ1bmN0aW9uIChyZXF1aXJlbWVudCkge1xuICAgICAgICBpZiAobW9kaWZpZXJzLmZpbmQoZnVuY3Rpb24gKG1vZCkge1xuICAgICAgICAgIHJldHVybiBtb2QubmFtZSA9PT0gcmVxdWlyZW1lbnQ7XG4gICAgICAgIH0pID09IG51bGwpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGZvcm1hdChNSVNTSU5HX0RFUEVOREVOQ1lfRVJST1IsIFN0cmluZyhtb2RpZmllci5uYW1lKSwgcmVxdWlyZW1lbnQsIHJlcXVpcmVtZW50KSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gdW5pcXVlQnkoYXJyLCBmbikge1xuICB2YXIgaWRlbnRpZmllcnMgPSBuZXcgU2V0KCk7XG4gIHJldHVybiBhcnIuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBmbihpdGVtKTtcblxuICAgIGlmICghaWRlbnRpZmllcnMuaGFzKGlkZW50aWZpZXIpKSB7XG4gICAgICBpZGVudGlmaWVycy5hZGQoaWRlbnRpZmllcik7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCkge1xuICByZXR1cm4gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG59XG5cbmZ1bmN0aW9uIG1lcmdlQnlOYW1lKG1vZGlmaWVycykge1xuICB2YXIgbWVyZ2VkID0gbW9kaWZpZXJzLnJlZHVjZShmdW5jdGlvbiAobWVyZ2VkLCBjdXJyZW50KSB7XG4gICAgdmFyIGV4aXN0aW5nID0gbWVyZ2VkW2N1cnJlbnQubmFtZV07XG4gICAgbWVyZ2VkW2N1cnJlbnQubmFtZV0gPSBleGlzdGluZyA/IE9iamVjdC5hc3NpZ24oe30sIGV4aXN0aW5nLCB7fSwgY3VycmVudCwge1xuICAgICAgb3B0aW9uczogT2JqZWN0LmFzc2lnbih7fSwgZXhpc3Rpbmcub3B0aW9ucywge30sIGN1cnJlbnQub3B0aW9ucyksXG4gICAgICBkYXRhOiBPYmplY3QuYXNzaWduKHt9LCBleGlzdGluZy5kYXRhLCB7fSwgY3VycmVudC5kYXRhKVxuICAgIH0pIDogY3VycmVudDtcbiAgICByZXR1cm4gbWVyZ2VkO1xuICB9LCB7fSk7IC8vIElFMTEgZG9lcyBub3Qgc3VwcG9ydCBPYmplY3QudmFsdWVzXG5cbiAgcmV0dXJuIE9iamVjdC5rZXlzKG1lcmdlZCkubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gbWVyZ2VkW2tleV07XG4gIH0pO1xufVxuXG52YXIgSU5WQUxJRF9FTEVNRU5UX0VSUk9SID0gJ1BvcHBlcjogSW52YWxpZCByZWZlcmVuY2Ugb3IgcG9wcGVyIGFyZ3VtZW50IHByb3ZpZGVkLiBUaGV5IG11c3QgYmUgZWl0aGVyIGEgRE9NIGVsZW1lbnQgb3IgdmlydHVhbCBlbGVtZW50Lic7XG52YXIgSU5GSU5JVEVfTE9PUF9FUlJPUiA9ICdQb3BwZXI6IEFuIGluZmluaXRlIGxvb3AgaW4gdGhlIG1vZGlmaWVycyBjeWNsZSBoYXMgYmVlbiBkZXRlY3RlZCEgVGhlIGN5Y2xlIGhhcyBiZWVuIGludGVycnVwdGVkIHRvIHByZXZlbnQgYSBicm93c2VyIGNyYXNoLic7XG52YXIgREVGQVVMVF9PUFRJT05TID0ge1xuICBwbGFjZW1lbnQ6ICdib3R0b20nLFxuICBtb2RpZmllcnM6IFtdLFxuICBzdHJhdGVneTogJ2Fic29sdXRlJ1xufTtcblxuZnVuY3Rpb24gYXJlVmFsaWRFbGVtZW50cygpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiAhYXJncy5zb21lKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgcmV0dXJuICEoZWxlbWVudCAmJiB0eXBlb2YgZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QgPT09ICdmdW5jdGlvbicpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcG9wcGVyR2VuZXJhdG9yKGdlbmVyYXRvck9wdGlvbnMpIHtcbiAgaWYgKGdlbmVyYXRvck9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIGdlbmVyYXRvck9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciBfZ2VuZXJhdG9yT3B0aW9ucyA9IGdlbmVyYXRvck9wdGlvbnMsXG4gICAgICBfZ2VuZXJhdG9yT3B0aW9ucyRkZWYgPSBfZ2VuZXJhdG9yT3B0aW9ucy5kZWZhdWx0TW9kaWZpZXJzLFxuICAgICAgZGVmYXVsdE1vZGlmaWVycyA9IF9nZW5lcmF0b3JPcHRpb25zJGRlZiA9PT0gdm9pZCAwID8gW10gOiBfZ2VuZXJhdG9yT3B0aW9ucyRkZWYsXG4gICAgICBfZ2VuZXJhdG9yT3B0aW9ucyRkZWYyID0gX2dlbmVyYXRvck9wdGlvbnMuZGVmYXVsdE9wdGlvbnMsXG4gICAgICBkZWZhdWx0T3B0aW9ucyA9IF9nZW5lcmF0b3JPcHRpb25zJGRlZjIgPT09IHZvaWQgMCA/IERFRkFVTFRfT1BUSU9OUyA6IF9nZW5lcmF0b3JPcHRpb25zJGRlZjI7XG4gIHJldHVybiBmdW5jdGlvbiBjcmVhdGVQb3BwZXIocmVmZXJlbmNlLCBwb3BwZXIsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0gZGVmYXVsdE9wdGlvbnM7XG4gICAgfVxuXG4gICAgdmFyIHN0YXRlID0ge1xuICAgICAgcGxhY2VtZW50OiAnYm90dG9tJyxcbiAgICAgIG9yZGVyZWRNb2RpZmllcnM6IFtdLFxuICAgICAgb3B0aW9uczogT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9PUFRJT05TLCB7fSwgZGVmYXVsdE9wdGlvbnMpLFxuICAgICAgbW9kaWZpZXJzRGF0YToge30sXG4gICAgICBlbGVtZW50czoge1xuICAgICAgICByZWZlcmVuY2U6IHJlZmVyZW5jZSxcbiAgICAgICAgcG9wcGVyOiBwb3BwZXJcbiAgICAgIH0sXG4gICAgICBhdHRyaWJ1dGVzOiB7fSxcbiAgICAgIHN0eWxlczoge31cbiAgICB9O1xuICAgIHZhciBlZmZlY3RDbGVhbnVwRm5zID0gW107XG4gICAgdmFyIGlzRGVzdHJveWVkID0gZmFsc2U7XG4gICAgdmFyIGluc3RhbmNlID0ge1xuICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAgc2V0T3B0aW9uczogZnVuY3Rpb24gc2V0T3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgIGNsZWFudXBNb2RpZmllckVmZmVjdHMoKTtcbiAgICAgICAgc3RhdGUub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRPcHRpb25zLCB7fSwgc3RhdGUub3B0aW9ucywge30sIG9wdGlvbnMpO1xuICAgICAgICBzdGF0ZS5zY3JvbGxQYXJlbnRzID0ge1xuICAgICAgICAgIHJlZmVyZW5jZTogaXNFbGVtZW50KHJlZmVyZW5jZSkgPyBsaXN0U2Nyb2xsUGFyZW50cyhyZWZlcmVuY2UpIDogcmVmZXJlbmNlLmNvbnRleHRFbGVtZW50ID8gbGlzdFNjcm9sbFBhcmVudHMocmVmZXJlbmNlLmNvbnRleHRFbGVtZW50KSA6IFtdLFxuICAgICAgICAgIHBvcHBlcjogbGlzdFNjcm9sbFBhcmVudHMocG9wcGVyKVxuICAgICAgICB9OyAvLyBPcmRlcnMgdGhlIG1vZGlmaWVycyBiYXNlZCBvbiB0aGVpciBkZXBlbmRlbmNpZXMgYW5kIGBwaGFzZWBcbiAgICAgICAgLy8gcHJvcGVydGllc1xuXG4gICAgICAgIHZhciBvcmRlcmVkTW9kaWZpZXJzID0gb3JkZXJNb2RpZmllcnMobWVyZ2VCeU5hbWUoW10uY29uY2F0KGRlZmF1bHRNb2RpZmllcnMsIHN0YXRlLm9wdGlvbnMubW9kaWZpZXJzKSkpOyAvLyBTdHJpcCBvdXQgZGlzYWJsZWQgbW9kaWZpZXJzXG5cbiAgICAgICAgc3RhdGUub3JkZXJlZE1vZGlmaWVycyA9IG9yZGVyZWRNb2RpZmllcnMuZmlsdGVyKGZ1bmN0aW9uIChtKSB7XG4gICAgICAgICAgcmV0dXJuIG0uZW5hYmxlZDtcbiAgICAgICAgfSk7IC8vIFZhbGlkYXRlIHRoZSBwcm92aWRlZCBtb2RpZmllcnMgc28gdGhhdCB0aGUgY29uc3VtZXIgd2lsbCBnZXQgd2FybmVkXG4gICAgICAgIC8vIGlmIG9uZSBvZiB0aGUgbW9kaWZpZXJzIGlzIGludmFsaWQgZm9yIGFueSByZWFzb25cblxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgdmFyIG1vZGlmaWVycyA9IHVuaXF1ZUJ5KFtdLmNvbmNhdChvcmRlcmVkTW9kaWZpZXJzLCBzdGF0ZS5vcHRpb25zLm1vZGlmaWVycyksIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgICAgICB2YXIgbmFtZSA9IF9yZWYubmFtZTtcbiAgICAgICAgICAgIHJldHVybiBuYW1lO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHZhbGlkYXRlTW9kaWZpZXJzKG1vZGlmaWVycyk7XG5cbiAgICAgICAgICBpZiAoZ2V0QmFzZVBsYWNlbWVudChzdGF0ZS5vcHRpb25zLnBsYWNlbWVudCkgPT09IGF1dG8pIHtcbiAgICAgICAgICAgIHZhciBmbGlwTW9kaWZpZXIgPSBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzLmZpbmQoZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgICAgICAgICAgIHZhciBuYW1lID0gX3JlZjIubmFtZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5hbWUgPT09ICdmbGlwJztcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoIWZsaXBNb2RpZmllcikge1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFsnUG9wcGVyOiBcImF1dG9cIiBwbGFjZW1lbnRzIHJlcXVpcmUgdGhlIFwiZmxpcFwiIG1vZGlmaWVyIGJlJywgJ3ByZXNlbnQgYW5kIGVuYWJsZWQgdG8gd29yay4nXS5qb2luKCcgJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBfZ2V0Q29tcHV0ZWRTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUocG9wcGVyKSxcbiAgICAgICAgICAgICAgbWFyZ2luVG9wID0gX2dldENvbXB1dGVkU3R5bGUubWFyZ2luVG9wLFxuICAgICAgICAgICAgICBtYXJnaW5SaWdodCA9IF9nZXRDb21wdXRlZFN0eWxlLm1hcmdpblJpZ2h0LFxuICAgICAgICAgICAgICBtYXJnaW5Cb3R0b20gPSBfZ2V0Q29tcHV0ZWRTdHlsZS5tYXJnaW5Cb3R0b20sXG4gICAgICAgICAgICAgIG1hcmdpbkxlZnQgPSBfZ2V0Q29tcHV0ZWRTdHlsZS5tYXJnaW5MZWZ0OyAvLyBXZSBubyBsb25nZXIgdGFrZSBpbnRvIGFjY291bnQgYG1hcmdpbnNgIG9uIHRoZSBwb3BwZXIsIGFuZCBpdCBjYW5cbiAgICAgICAgICAvLyBjYXVzZSBidWdzIHdpdGggcG9zaXRpb25pbmcsIHNvIHdlJ2xsIHdhcm4gdGhlIGNvbnN1bWVyXG5cblxuICAgICAgICAgIGlmIChbbWFyZ2luVG9wLCBtYXJnaW5SaWdodCwgbWFyZ2luQm90dG9tLCBtYXJnaW5MZWZ0XS5zb21lKGZ1bmN0aW9uIChtYXJnaW4pIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KG1hcmdpbik7XG4gICAgICAgICAgfSkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihbJ1BvcHBlcjogQ1NTIFwibWFyZ2luXCIgc3R5bGVzIGNhbm5vdCBiZSB1c2VkIHRvIGFwcGx5IHBhZGRpbmcnLCAnYmV0d2VlbiB0aGUgcG9wcGVyIGFuZCBpdHMgcmVmZXJlbmNlIGVsZW1lbnQgb3IgYm91bmRhcnkuJywgJ1RvIHJlcGxpY2F0ZSBtYXJnaW4sIHVzZSB0aGUgYG9mZnNldGAgbW9kaWZpZXIsIGFzIHdlbGwgYXMnLCAndGhlIGBwYWRkaW5nYCBvcHRpb24gaW4gdGhlIGBwcmV2ZW50T3ZlcmZsb3dgIGFuZCBgZmxpcGAnLCAnbW9kaWZpZXJzLiddLmpvaW4oJyAnKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcnVuTW9kaWZpZXJFZmZlY3RzKCk7XG4gICAgICAgIHJldHVybiBpbnN0YW5jZS51cGRhdGUoKTtcbiAgICAgIH0sXG4gICAgICAvLyBTeW5jIHVwZGF0ZSDigJMgaXQgd2lsbCBhbHdheXMgYmUgZXhlY3V0ZWQsIGV2ZW4gaWYgbm90IG5lY2Vzc2FyeS4gVGhpc1xuICAgICAgLy8gaXMgdXNlZnVsIGZvciBsb3cgZnJlcXVlbmN5IHVwZGF0ZXMgd2hlcmUgc3luYyBiZWhhdmlvciBzaW1wbGlmaWVzIHRoZVxuICAgICAgLy8gbG9naWMuXG4gICAgICAvLyBGb3IgaGlnaCBmcmVxdWVuY3kgdXBkYXRlcyAoZS5nLiBgcmVzaXplYCBhbmQgYHNjcm9sbGAgZXZlbnRzKSwgYWx3YXlzXG4gICAgICAvLyBwcmVmZXIgdGhlIGFzeW5jIFBvcHBlciN1cGRhdGUgbWV0aG9kXG4gICAgICBmb3JjZVVwZGF0ZTogZnVuY3Rpb24gZm9yY2VVcGRhdGUoKSB7XG4gICAgICAgIGlmIChpc0Rlc3Ryb3llZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBfc3RhdGUkZWxlbWVudHMgPSBzdGF0ZS5lbGVtZW50cyxcbiAgICAgICAgICAgIHJlZmVyZW5jZSA9IF9zdGF0ZSRlbGVtZW50cy5yZWZlcmVuY2UsXG4gICAgICAgICAgICBwb3BwZXIgPSBfc3RhdGUkZWxlbWVudHMucG9wcGVyOyAvLyBEb24ndCBwcm9jZWVkIGlmIGByZWZlcmVuY2VgIG9yIGBwb3BwZXJgIGFyZSBub3QgdmFsaWQgZWxlbWVudHNcbiAgICAgICAgLy8gYW55bW9yZVxuXG4gICAgICAgIGlmICghYXJlVmFsaWRFbGVtZW50cyhyZWZlcmVuY2UsIHBvcHBlcikpIHtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKElOVkFMSURfRUxFTUVOVF9FUlJPUik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IC8vIFN0b3JlIHRoZSByZWZlcmVuY2UgYW5kIHBvcHBlciByZWN0cyB0byBiZSByZWFkIGJ5IG1vZGlmaWVyc1xuXG5cbiAgICAgICAgc3RhdGUucmVjdHMgPSB7XG4gICAgICAgICAgcmVmZXJlbmNlOiBnZXRDb21wb3NpdGVSZWN0KHJlZmVyZW5jZSwgZ2V0T2Zmc2V0UGFyZW50KHBvcHBlciksIHN0YXRlLm9wdGlvbnMuc3RyYXRlZ3kgPT09ICdmaXhlZCcpLFxuICAgICAgICAgIHBvcHBlcjogZ2V0TGF5b3V0UmVjdChwb3BwZXIpXG4gICAgICAgIH07IC8vIE1vZGlmaWVycyBoYXZlIHRoZSBhYmlsaXR5IHRvIHJlc2V0IHRoZSBjdXJyZW50IHVwZGF0ZSBjeWNsZS4gVGhlXG4gICAgICAgIC8vIG1vc3QgY29tbW9uIHVzZSBjYXNlIGZvciB0aGlzIGlzIHRoZSBgZmxpcGAgbW9kaWZpZXIgY2hhbmdpbmcgdGhlXG4gICAgICAgIC8vIHBsYWNlbWVudCwgd2hpY2ggdGhlbiBuZWVkcyB0byByZS1ydW4gYWxsIHRoZSBtb2RpZmllcnMsIGJlY2F1c2UgdGhlXG4gICAgICAgIC8vIGxvZ2ljIHdhcyBwcmV2aW91c2x5IHJhbiBmb3IgdGhlIHByZXZpb3VzIHBsYWNlbWVudCBhbmQgaXMgdGhlcmVmb3JlXG4gICAgICAgIC8vIHN0YWxlL2luY29ycmVjdFxuXG4gICAgICAgIHN0YXRlLnJlc2V0ID0gZmFsc2U7XG4gICAgICAgIHN0YXRlLnBsYWNlbWVudCA9IHN0YXRlLm9wdGlvbnMucGxhY2VtZW50OyAvLyBPbiBlYWNoIHVwZGF0ZSBjeWNsZSwgdGhlIGBtb2RpZmllcnNEYXRhYCBwcm9wZXJ0eSBmb3IgZWFjaCBtb2RpZmllclxuICAgICAgICAvLyBpcyBmaWxsZWQgd2l0aCB0aGUgaW5pdGlhbCBkYXRhIHNwZWNpZmllZCBieSB0aGUgbW9kaWZpZXIuIFRoaXMgbWVhbnNcbiAgICAgICAgLy8gaXQgZG9lc24ndCBwZXJzaXN0IGFuZCBpcyBmcmVzaCBvbiBlYWNoIHVwZGF0ZS5cbiAgICAgICAgLy8gVG8gZW5zdXJlIHBlcnNpc3RlbnQgZGF0YSwgdXNlIGAke25hbWV9I3BlcnNpc3RlbnRgXG5cbiAgICAgICAgc3RhdGUub3JkZXJlZE1vZGlmaWVycy5mb3JFYWNoKGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgICAgICAgIHJldHVybiBzdGF0ZS5tb2RpZmllcnNEYXRhW21vZGlmaWVyLm5hbWVdID0gT2JqZWN0LmFzc2lnbih7fSwgbW9kaWZpZXIuZGF0YSk7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgX19kZWJ1Z19sb29wc19fID0gMDtcblxuICAgICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgc3RhdGUub3JkZXJlZE1vZGlmaWVycy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgICBfX2RlYnVnX2xvb3BzX18gKz0gMTtcblxuICAgICAgICAgICAgaWYgKF9fZGVidWdfbG9vcHNfXyA+IDEwMCkge1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKElORklOSVRFX0xPT1BfRVJST1IpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc3RhdGUucmVzZXQgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHN0YXRlLnJlc2V0ID0gZmFsc2U7XG4gICAgICAgICAgICBpbmRleCA9IC0xO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIF9zdGF0ZSRvcmRlcmVkTW9kaWZpZSA9IHN0YXRlLm9yZGVyZWRNb2RpZmllcnNbaW5kZXhdLFxuICAgICAgICAgICAgICBmbiA9IF9zdGF0ZSRvcmRlcmVkTW9kaWZpZS5mbixcbiAgICAgICAgICAgICAgX3N0YXRlJG9yZGVyZWRNb2RpZmllMiA9IF9zdGF0ZSRvcmRlcmVkTW9kaWZpZS5vcHRpb25zLFxuICAgICAgICAgICAgICBfb3B0aW9ucyA9IF9zdGF0ZSRvcmRlcmVkTW9kaWZpZTIgPT09IHZvaWQgMCA/IHt9IDogX3N0YXRlJG9yZGVyZWRNb2RpZmllMixcbiAgICAgICAgICAgICAgbmFtZSA9IF9zdGF0ZSRvcmRlcmVkTW9kaWZpZS5uYW1lO1xuXG4gICAgICAgICAgaWYgKHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgc3RhdGUgPSBmbih7XG4gICAgICAgICAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgICAgICAgICAgb3B0aW9uczogX29wdGlvbnMsXG4gICAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICAgIGluc3RhbmNlOiBpbnN0YW5jZVxuICAgICAgICAgICAgfSkgfHwgc3RhdGU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gQXN5bmMgYW5kIG9wdGltaXN0aWNhbGx5IG9wdGltaXplZCB1cGRhdGUg4oCTIGl0IHdpbGwgbm90IGJlIGV4ZWN1dGVkIGlmXG4gICAgICAvLyBub3QgbmVjZXNzYXJ5IChkZWJvdW5jZWQgdG8gcnVuIGF0IG1vc3Qgb25jZS1wZXItdGljaylcbiAgICAgIHVwZGF0ZTogZGVib3VuY2UoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICBpbnN0YW5jZS5mb3JjZVVwZGF0ZSgpO1xuICAgICAgICAgIHJlc29sdmUoc3RhdGUpO1xuICAgICAgICB9KTtcbiAgICAgIH0pLFxuICAgICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgY2xlYW51cE1vZGlmaWVyRWZmZWN0cygpO1xuICAgICAgICBpc0Rlc3Ryb3llZCA9IHRydWU7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmICghYXJlVmFsaWRFbGVtZW50cyhyZWZlcmVuY2UsIHBvcHBlcikpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihJTlZBTElEX0VMRU1FTlRfRVJST1IpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfVxuXG4gICAgaW5zdGFuY2Uuc2V0T3B0aW9ucyhvcHRpb25zKS50aGVuKGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgaWYgKCFpc0Rlc3Ryb3llZCAmJiBvcHRpb25zLm9uRmlyc3RVcGRhdGUpIHtcbiAgICAgICAgb3B0aW9ucy5vbkZpcnN0VXBkYXRlKHN0YXRlKTtcbiAgICAgIH1cbiAgICB9KTsgLy8gTW9kaWZpZXJzIGhhdmUgdGhlIGFiaWxpdHkgdG8gZXhlY3V0ZSBhcmJpdHJhcnkgY29kZSBiZWZvcmUgdGhlIGZpcnN0XG4gICAgLy8gdXBkYXRlIGN5Y2xlIHJ1bnMuIFRoZXkgd2lsbCBiZSBleGVjdXRlZCBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGUgdXBkYXRlXG4gICAgLy8gY3ljbGUuIFRoaXMgaXMgdXNlZnVsIHdoZW4gYSBtb2RpZmllciBhZGRzIHNvbWUgcGVyc2lzdGVudCBkYXRhIHRoYXRcbiAgICAvLyBvdGhlciBtb2RpZmllcnMgbmVlZCB0byB1c2UsIGJ1dCB0aGUgbW9kaWZpZXIgaXMgcnVuIGFmdGVyIHRoZSBkZXBlbmRlbnRcbiAgICAvLyBvbmUuXG5cbiAgICBmdW5jdGlvbiBydW5Nb2RpZmllckVmZmVjdHMoKSB7XG4gICAgICBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKF9yZWYzKSB7XG4gICAgICAgIHZhciBuYW1lID0gX3JlZjMubmFtZSxcbiAgICAgICAgICAgIF9yZWYzJG9wdGlvbnMgPSBfcmVmMy5vcHRpb25zLFxuICAgICAgICAgICAgb3B0aW9ucyA9IF9yZWYzJG9wdGlvbnMgPT09IHZvaWQgMCA/IHt9IDogX3JlZjMkb3B0aW9ucyxcbiAgICAgICAgICAgIGVmZmVjdCA9IF9yZWYzLmVmZmVjdDtcblxuICAgICAgICBpZiAodHlwZW9mIGVmZmVjdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHZhciBjbGVhbnVwRm4gPSBlZmZlY3Qoe1xuICAgICAgICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgIGluc3RhbmNlOiBpbnN0YW5jZSxcbiAgICAgICAgICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHZhciBub29wRm4gPSBmdW5jdGlvbiBub29wRm4oKSB7fTtcblxuICAgICAgICAgIGVmZmVjdENsZWFudXBGbnMucHVzaChjbGVhbnVwRm4gfHwgbm9vcEZuKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYW51cE1vZGlmaWVyRWZmZWN0cygpIHtcbiAgICAgIGVmZmVjdENsZWFudXBGbnMuZm9yRWFjaChmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgcmV0dXJuIGZuKCk7XG4gICAgICB9KTtcbiAgICAgIGVmZmVjdENsZWFudXBGbnMgPSBbXTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH07XG59XG5cbnZhciBwYXNzaXZlID0ge1xuICBwYXNzaXZlOiB0cnVlXG59O1xuXG5mdW5jdGlvbiBlZmZlY3QoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgaW5zdGFuY2UgPSBfcmVmLmluc3RhbmNlLFxuICAgICAgb3B0aW9ucyA9IF9yZWYub3B0aW9ucztcbiAgdmFyIF9vcHRpb25zJHNjcm9sbCA9IG9wdGlvbnMuc2Nyb2xsLFxuICAgICAgc2Nyb2xsID0gX29wdGlvbnMkc2Nyb2xsID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkc2Nyb2xsLFxuICAgICAgX29wdGlvbnMkcmVzaXplID0gb3B0aW9ucy5yZXNpemUsXG4gICAgICByZXNpemUgPSBfb3B0aW9ucyRyZXNpemUgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRyZXNpemU7XG4gIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coc3RhdGUuZWxlbWVudHMucG9wcGVyKTtcbiAgdmFyIHNjcm9sbFBhcmVudHMgPSBbXS5jb25jYXQoc3RhdGUuc2Nyb2xsUGFyZW50cy5yZWZlcmVuY2UsIHN0YXRlLnNjcm9sbFBhcmVudHMucG9wcGVyKTtcblxuICBpZiAoc2Nyb2xsKSB7XG4gICAgc2Nyb2xsUGFyZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChzY3JvbGxQYXJlbnQpIHtcbiAgICAgIHNjcm9sbFBhcmVudC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBpbnN0YW5jZS51cGRhdGUsIHBhc3NpdmUpO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKHJlc2l6ZSkge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBpbnN0YW5jZS51cGRhdGUsIHBhc3NpdmUpO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoc2Nyb2xsKSB7XG4gICAgICBzY3JvbGxQYXJlbnRzLmZvckVhY2goZnVuY3Rpb24gKHNjcm9sbFBhcmVudCkge1xuICAgICAgICBzY3JvbGxQYXJlbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgaW5zdGFuY2UudXBkYXRlLCBwYXNzaXZlKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChyZXNpemUpIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBpbnN0YW5jZS51cGRhdGUsIHBhc3NpdmUpO1xuICAgIH1cbiAgfTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbnZhciBldmVudExpc3RlbmVycyA9IHtcbiAgbmFtZTogJ2V2ZW50TGlzdGVuZXJzJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICd3cml0ZScsXG4gIGZuOiBmdW5jdGlvbiBmbigpIHt9LFxuICBlZmZlY3Q6IGVmZmVjdCxcbiAgZGF0YToge31cbn07XG5cbmZ1bmN0aW9uIGdldFZhcmlhdGlvbihwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIHBsYWNlbWVudC5zcGxpdCgnLScpWzFdO1xufVxuXG5mdW5jdGlvbiBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHJldHVybiBbJ3RvcCcsICdib3R0b20nXS5pbmRleE9mKHBsYWNlbWVudCkgPj0gMCA/ICd4JyA6ICd5Jztcbn1cblxuZnVuY3Rpb24gY29tcHV0ZU9mZnNldHMoX3JlZikge1xuICB2YXIgcmVmZXJlbmNlID0gX3JlZi5yZWZlcmVuY2UsXG4gICAgICBlbGVtZW50ID0gX3JlZi5lbGVtZW50LFxuICAgICAgcGxhY2VtZW50ID0gX3JlZi5wbGFjZW1lbnQ7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50ID8gZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpIDogbnVsbDtcbiAgdmFyIHZhcmlhdGlvbiA9IHBsYWNlbWVudCA/IGdldFZhcmlhdGlvbihwbGFjZW1lbnQpIDogbnVsbDtcbiAgdmFyIGNvbW1vblggPSByZWZlcmVuY2UueCArIHJlZmVyZW5jZS53aWR0aCAvIDIgLSBlbGVtZW50LndpZHRoIC8gMjtcbiAgdmFyIGNvbW1vblkgPSByZWZlcmVuY2UueSArIHJlZmVyZW5jZS5oZWlnaHQgLyAyIC0gZWxlbWVudC5oZWlnaHQgLyAyO1xuICB2YXIgb2Zmc2V0cztcblxuICBzd2l0Y2ggKGJhc2VQbGFjZW1lbnQpIHtcbiAgICBjYXNlIHRvcDpcbiAgICAgIG9mZnNldHMgPSB7XG4gICAgICAgIHg6IGNvbW1vblgsXG4gICAgICAgIHk6IHJlZmVyZW5jZS55IC0gZWxlbWVudC5oZWlnaHRcbiAgICAgIH07XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgYm90dG9tOlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogY29tbW9uWCxcbiAgICAgICAgeTogcmVmZXJlbmNlLnkgKyByZWZlcmVuY2UuaGVpZ2h0XG4gICAgICB9O1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIHJpZ2h0OlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogcmVmZXJlbmNlLnggKyByZWZlcmVuY2Uud2lkdGgsXG4gICAgICAgIHk6IGNvbW1vbllcbiAgICAgIH07XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgbGVmdDpcbiAgICAgIG9mZnNldHMgPSB7XG4gICAgICAgIHg6IHJlZmVyZW5jZS54IC0gZWxlbWVudC53aWR0aCxcbiAgICAgICAgeTogY29tbW9uWVxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIG9mZnNldHMgPSB7XG4gICAgICAgIHg6IHJlZmVyZW5jZS54LFxuICAgICAgICB5OiByZWZlcmVuY2UueVxuICAgICAgfTtcbiAgfVxuXG4gIHZhciBtYWluQXhpcyA9IGJhc2VQbGFjZW1lbnQgPyBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQoYmFzZVBsYWNlbWVudCkgOiBudWxsO1xuXG4gIGlmIChtYWluQXhpcyAhPSBudWxsKSB7XG4gICAgdmFyIGxlbiA9IG1haW5BeGlzID09PSAneScgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG5cbiAgICBzd2l0Y2ggKHZhcmlhdGlvbikge1xuICAgICAgY2FzZSBzdGFydDpcbiAgICAgICAgb2Zmc2V0c1ttYWluQXhpc10gPSBNYXRoLmZsb29yKG9mZnNldHNbbWFpbkF4aXNdKSAtIE1hdGguZmxvb3IocmVmZXJlbmNlW2xlbl0gLyAyIC0gZWxlbWVudFtsZW5dIC8gMik7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIGVuZDpcbiAgICAgICAgb2Zmc2V0c1ttYWluQXhpc10gPSBNYXRoLmZsb29yKG9mZnNldHNbbWFpbkF4aXNdKSArIE1hdGguY2VpbChyZWZlcmVuY2VbbGVuXSAvIDIgLSBlbGVtZW50W2xlbl0gLyAyKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9mZnNldHM7XG59XG5cbmZ1bmN0aW9uIHBvcHBlck9mZnNldHMoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgbmFtZSA9IF9yZWYubmFtZTtcbiAgLy8gT2Zmc2V0cyBhcmUgdGhlIGFjdHVhbCBwb3NpdGlvbiB0aGUgcG9wcGVyIG5lZWRzIHRvIGhhdmUgdG8gYmVcbiAgLy8gcHJvcGVybHkgcG9zaXRpb25lZCBuZWFyIGl0cyByZWZlcmVuY2UgZWxlbWVudFxuICAvLyBUaGlzIGlzIHRoZSBtb3N0IGJhc2ljIHBsYWNlbWVudCwgYW5kIHdpbGwgYmUgYWRqdXN0ZWQgYnlcbiAgLy8gdGhlIG1vZGlmaWVycyBpbiB0aGUgbmV4dCBzdGVwXG4gIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0gPSBjb21wdXRlT2Zmc2V0cyh7XG4gICAgcmVmZXJlbmNlOiBzdGF0ZS5yZWN0cy5yZWZlcmVuY2UsXG4gICAgZWxlbWVudDogc3RhdGUucmVjdHMucG9wcGVyLFxuICAgIHN0cmF0ZWd5OiAnYWJzb2x1dGUnLFxuICAgIHBsYWNlbWVudDogc3RhdGUucGxhY2VtZW50XG4gIH0pO1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxudmFyIHBvcHBlck9mZnNldHMkMSA9IHtcbiAgbmFtZTogJ3BvcHBlck9mZnNldHMnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ3JlYWQnLFxuICBmbjogcG9wcGVyT2Zmc2V0cyxcbiAgZGF0YToge31cbn07XG5cbnZhciB1bnNldFNpZGVzID0ge1xuICB0b3A6ICdhdXRvJyxcbiAgcmlnaHQ6ICdhdXRvJyxcbiAgYm90dG9tOiAnYXV0bycsXG4gIGxlZnQ6ICdhdXRvJ1xufTsgLy8gUm91bmQgdGhlIG9mZnNldHMgdG8gdGhlIG5lYXJlc3Qgc3VpdGFibGUgc3VicGl4ZWwgYmFzZWQgb24gdGhlIERQUi5cbi8vIFpvb21pbmcgY2FuIGNoYW5nZSB0aGUgRFBSLCBidXQgaXQgc2VlbXMgdG8gcmVwb3J0IGEgdmFsdWUgdGhhdCB3aWxsXG4vLyBjbGVhbmx5IGRpdmlkZSB0aGUgdmFsdWVzIGludG8gdGhlIGFwcHJvcHJpYXRlIHN1YnBpeGVscy5cblxuZnVuY3Rpb24gcm91bmRPZmZzZXRzKF9yZWYpIHtcbiAgdmFyIHggPSBfcmVmLngsXG4gICAgICB5ID0gX3JlZi55O1xuICB2YXIgd2luID0gd2luZG93O1xuICB2YXIgZHByID0gd2luLmRldmljZVBpeGVsUmF0aW8gfHwgMTtcbiAgcmV0dXJuIHtcbiAgICB4OiBNYXRoLnJvdW5kKHggKiBkcHIpIC8gZHByIHx8IDAsXG4gICAgeTogTWF0aC5yb3VuZCh5ICogZHByKSAvIGRwciB8fCAwXG4gIH07XG59XG5cbmZ1bmN0aW9uIG1hcFRvU3R5bGVzKF9yZWYyKSB7XG4gIHZhciBfT2JqZWN0JGFzc2lnbjI7XG5cbiAgdmFyIHBvcHBlciA9IF9yZWYyLnBvcHBlcixcbiAgICAgIHBvcHBlclJlY3QgPSBfcmVmMi5wb3BwZXJSZWN0LFxuICAgICAgcGxhY2VtZW50ID0gX3JlZjIucGxhY2VtZW50LFxuICAgICAgb2Zmc2V0cyA9IF9yZWYyLm9mZnNldHMsXG4gICAgICBwb3NpdGlvbiA9IF9yZWYyLnBvc2l0aW9uLFxuICAgICAgZ3B1QWNjZWxlcmF0aW9uID0gX3JlZjIuZ3B1QWNjZWxlcmF0aW9uLFxuICAgICAgYWRhcHRpdmUgPSBfcmVmMi5hZGFwdGl2ZTtcblxuICB2YXIgX3JvdW5kT2Zmc2V0cyA9IHJvdW5kT2Zmc2V0cyhvZmZzZXRzKSxcbiAgICAgIHggPSBfcm91bmRPZmZzZXRzLngsXG4gICAgICB5ID0gX3JvdW5kT2Zmc2V0cy55O1xuXG4gIHZhciBoYXNYID0gb2Zmc2V0cy5oYXNPd25Qcm9wZXJ0eSgneCcpO1xuICB2YXIgaGFzWSA9IG9mZnNldHMuaGFzT3duUHJvcGVydHkoJ3knKTtcbiAgdmFyIHNpZGVYID0gbGVmdDtcbiAgdmFyIHNpZGVZID0gdG9wO1xuICB2YXIgd2luID0gd2luZG93O1xuXG4gIGlmIChhZGFwdGl2ZSkge1xuICAgIHZhciBvZmZzZXRQYXJlbnQgPSBnZXRPZmZzZXRQYXJlbnQocG9wcGVyKTtcblxuICAgIGlmIChvZmZzZXRQYXJlbnQgPT09IGdldFdpbmRvdyhwb3BwZXIpKSB7XG4gICAgICBvZmZzZXRQYXJlbnQgPSBnZXREb2N1bWVudEVsZW1lbnQocG9wcGVyKTtcbiAgICB9IC8vICRGbG93Rml4TWU6IGZvcmNlIHR5cGUgcmVmaW5lbWVudCwgd2UgY29tcGFyZSBvZmZzZXRQYXJlbnQgd2l0aCB3aW5kb3cgYWJvdmUsIGJ1dCBGbG93IGRvZXNuJ3QgZGV0ZWN0IGl0XG5cbiAgICAvKjo6IG9mZnNldFBhcmVudCA9IChvZmZzZXRQYXJlbnQ6IEVsZW1lbnQpOyAqL1xuXG5cbiAgICBpZiAocGxhY2VtZW50ID09PSB0b3ApIHtcbiAgICAgIHNpZGVZID0gYm90dG9tO1xuICAgICAgeSAtPSBvZmZzZXRQYXJlbnQuY2xpZW50SGVpZ2h0IC0gcG9wcGVyUmVjdC5oZWlnaHQ7XG4gICAgICB5ICo9IGdwdUFjY2VsZXJhdGlvbiA/IDEgOiAtMTtcbiAgICB9XG5cbiAgICBpZiAocGxhY2VtZW50ID09PSBsZWZ0KSB7XG4gICAgICBzaWRlWCA9IHJpZ2h0O1xuICAgICAgeCAtPSBvZmZzZXRQYXJlbnQuY2xpZW50V2lkdGggLSBwb3BwZXJSZWN0LndpZHRoO1xuICAgICAgeCAqPSBncHVBY2NlbGVyYXRpb24gPyAxIDogLTE7XG4gICAgfVxuICB9XG5cbiAgdmFyIGNvbW1vblN0eWxlcyA9IE9iamVjdC5hc3NpZ24oe1xuICAgIHBvc2l0aW9uOiBwb3NpdGlvblxuICB9LCBhZGFwdGl2ZSAmJiB1bnNldFNpZGVzKTtcblxuICBpZiAoZ3B1QWNjZWxlcmF0aW9uKSB7XG4gICAgdmFyIF9PYmplY3QkYXNzaWduO1xuXG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGNvbW1vblN0eWxlcywgKF9PYmplY3QkYXNzaWduID0ge30sIF9PYmplY3QkYXNzaWduW3NpZGVZXSA9IGhhc1kgPyAnMCcgOiAnJywgX09iamVjdCRhc3NpZ25bc2lkZVhdID0gaGFzWCA/ICcwJyA6ICcnLCBfT2JqZWN0JGFzc2lnbi50cmFuc2Zvcm0gPSAod2luLmRldmljZVBpeGVsUmF0aW8gfHwgMSkgPCAyID8gXCJ0cmFuc2xhdGUoXCIgKyB4ICsgXCJweCwgXCIgKyB5ICsgXCJweClcIiA6IFwidHJhbnNsYXRlM2QoXCIgKyB4ICsgXCJweCwgXCIgKyB5ICsgXCJweCwgMClcIiwgX09iamVjdCRhc3NpZ24pKTtcbiAgfVxuXG4gIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBjb21tb25TdHlsZXMsIChfT2JqZWN0JGFzc2lnbjIgPSB7fSwgX09iamVjdCRhc3NpZ24yW3NpZGVZXSA9IGhhc1kgPyB5ICsgXCJweFwiIDogJycsIF9PYmplY3QkYXNzaWduMltzaWRlWF0gPSBoYXNYID8geCArIFwicHhcIiA6ICcnLCBfT2JqZWN0JGFzc2lnbjIudHJhbnNmb3JtID0gJycsIF9PYmplY3QkYXNzaWduMikpO1xufVxuXG5mdW5jdGlvbiBjb21wdXRlU3R5bGVzKF9yZWYzKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYzLnN0YXRlLFxuICAgICAgb3B0aW9ucyA9IF9yZWYzLm9wdGlvbnM7XG4gIHZhciBfb3B0aW9ucyRncHVBY2NlbGVyYXQgPSBvcHRpb25zLmdwdUFjY2VsZXJhdGlvbixcbiAgICAgIGdwdUFjY2VsZXJhdGlvbiA9IF9vcHRpb25zJGdwdUFjY2VsZXJhdCA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJGdwdUFjY2VsZXJhdCxcbiAgICAgIF9vcHRpb25zJGFkYXB0aXZlID0gb3B0aW9ucy5hZGFwdGl2ZSxcbiAgICAgIGFkYXB0aXZlID0gX29wdGlvbnMkYWRhcHRpdmUgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRhZGFwdGl2ZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgdmFyIHRyYW5zaXRpb25Qcm9wZXJ0eSA9IGdldENvbXB1dGVkU3R5bGUoc3RhdGUuZWxlbWVudHMucG9wcGVyKS50cmFuc2l0aW9uUHJvcGVydHkgfHwgJyc7XG5cbiAgICBpZiAoYWRhcHRpdmUgJiYgWyd0cmFuc2Zvcm0nLCAndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbScsICdsZWZ0J10uc29tZShmdW5jdGlvbiAocHJvcGVydHkpIHtcbiAgICAgIHJldHVybiB0cmFuc2l0aW9uUHJvcGVydHkuaW5kZXhPZihwcm9wZXJ0eSkgPj0gMDtcbiAgICB9KSkge1xuICAgICAgY29uc29sZS53YXJuKFsnUG9wcGVyOiBEZXRlY3RlZCBDU1MgdHJhbnNpdGlvbnMgb24gYXQgbGVhc3Qgb25lIG9mIHRoZSBmb2xsb3dpbmcnLCAnQ1NTIHByb3BlcnRpZXM6IFwidHJhbnNmb3JtXCIsIFwidG9wXCIsIFwicmlnaHRcIiwgXCJib3R0b21cIiwgXCJsZWZ0XCIuJywgJ1xcblxcbicsICdEaXNhYmxlIHRoZSBcImNvbXB1dGVTdHlsZXNcIiBtb2RpZmllclxcJ3MgYGFkYXB0aXZlYCBvcHRpb24gdG8gYWxsb3cnLCAnZm9yIHNtb290aCB0cmFuc2l0aW9ucywgb3IgcmVtb3ZlIHRoZXNlIHByb3BlcnRpZXMgZnJvbSB0aGUgQ1NTJywgJ3RyYW5zaXRpb24gZGVjbGFyYXRpb24gb24gdGhlIHBvcHBlciBlbGVtZW50IGlmIG9ubHkgdHJhbnNpdGlvbmluZycsICdvcGFjaXR5IG9yIGJhY2tncm91bmQtY29sb3IgZm9yIGV4YW1wbGUuJywgJ1xcblxcbicsICdXZSByZWNvbW1lbmQgdXNpbmcgdGhlIHBvcHBlciBlbGVtZW50IGFzIGEgd3JhcHBlciBhcm91bmQgYW4gaW5uZXInLCAnZWxlbWVudCB0aGF0IGNhbiBoYXZlIGFueSBDU1MgcHJvcGVydHkgdHJhbnNpdGlvbmVkIGZvciBhbmltYXRpb25zLiddLmpvaW4oJyAnKSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGNvbW1vblN0eWxlcyA9IHtcbiAgICBwbGFjZW1lbnQ6IGdldEJhc2VQbGFjZW1lbnQoc3RhdGUucGxhY2VtZW50KSxcbiAgICBwb3BwZXI6IHN0YXRlLmVsZW1lbnRzLnBvcHBlcixcbiAgICBwb3BwZXJSZWN0OiBzdGF0ZS5yZWN0cy5wb3BwZXIsXG4gICAgZ3B1QWNjZWxlcmF0aW9uOiBncHVBY2NlbGVyYXRpb25cbiAgfTtcblxuICBpZiAoc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzICE9IG51bGwpIHtcbiAgICBzdGF0ZS5zdHlsZXMucG9wcGVyID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUuc3R5bGVzLnBvcHBlciwge30sIG1hcFRvU3R5bGVzKE9iamVjdC5hc3NpZ24oe30sIGNvbW1vblN0eWxlcywge1xuICAgICAgb2Zmc2V0czogc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzLFxuICAgICAgcG9zaXRpb246IHN0YXRlLm9wdGlvbnMuc3RyYXRlZ3ksXG4gICAgICBhZGFwdGl2ZTogYWRhcHRpdmVcbiAgICB9KSkpO1xuICB9XG5cbiAgaWYgKHN0YXRlLm1vZGlmaWVyc0RhdGEuYXJyb3cgIT0gbnVsbCkge1xuICAgIHN0YXRlLnN0eWxlcy5hcnJvdyA9IE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLnN0eWxlcy5hcnJvdywge30sIG1hcFRvU3R5bGVzKE9iamVjdC5hc3NpZ24oe30sIGNvbW1vblN0eWxlcywge1xuICAgICAgb2Zmc2V0czogc3RhdGUubW9kaWZpZXJzRGF0YS5hcnJvdyxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgYWRhcHRpdmU6IGZhbHNlXG4gICAgfSkpKTtcbiAgfVxuXG4gIHN0YXRlLmF0dHJpYnV0ZXMucG9wcGVyID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUuYXR0cmlidXRlcy5wb3BwZXIsIHtcbiAgICAnZGF0YS1wb3BwZXItcGxhY2VtZW50Jzogc3RhdGUucGxhY2VtZW50XG4gIH0pO1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxudmFyIGNvbXB1dGVTdHlsZXMkMSA9IHtcbiAgbmFtZTogJ2NvbXB1dGVTdHlsZXMnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ2JlZm9yZVdyaXRlJyxcbiAgZm46IGNvbXB1dGVTdHlsZXMsXG4gIGRhdGE6IHt9XG59O1xuXG4vLyBhbmQgYXBwbGllcyB0aGVtIHRvIHRoZSBIVE1MRWxlbWVudHMgc3VjaCBhcyBwb3BwZXIgYW5kIGFycm93XG5cbmZ1bmN0aW9uIGFwcGx5U3R5bGVzKF9yZWYpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZTtcbiAgT2JqZWN0LmtleXMoc3RhdGUuZWxlbWVudHMpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB2YXIgc3R5bGUgPSBzdGF0ZS5zdHlsZXNbbmFtZV0gfHwge307XG4gICAgdmFyIGF0dHJpYnV0ZXMgPSBzdGF0ZS5hdHRyaWJ1dGVzW25hbWVdIHx8IHt9O1xuICAgIHZhciBlbGVtZW50ID0gc3RhdGUuZWxlbWVudHNbbmFtZV07IC8vIGFycm93IGlzIG9wdGlvbmFsICsgdmlydHVhbCBlbGVtZW50c1xuXG4gICAgaWYgKCFpc0hUTUxFbGVtZW50KGVsZW1lbnQpIHx8ICFnZXROb2RlTmFtZShlbGVtZW50KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gRmxvdyBkb2Vzbid0IHN1cHBvcnQgdG8gZXh0ZW5kIHRoaXMgcHJvcGVydHksIGJ1dCBpdCdzIHRoZSBtb3N0XG4gICAgLy8gZWZmZWN0aXZlIHdheSB0byBhcHBseSBzdHlsZXMgdG8gYW4gSFRNTEVsZW1lbnRcbiAgICAvLyAkRmxvd0ZpeE1lXG5cblxuICAgIE9iamVjdC5hc3NpZ24oZWxlbWVudC5zdHlsZSwgc3R5bGUpO1xuICAgIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGF0dHJpYnV0ZXNbbmFtZV07XG5cbiAgICAgIGlmICh2YWx1ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSA9PT0gdHJ1ZSA/ICcnIDogdmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZWZmZWN0JDEoX3JlZjIpIHtcbiAgdmFyIHN0YXRlID0gX3JlZjIuc3RhdGU7XG4gIHZhciBpbml0aWFsU3R5bGVzID0ge1xuICAgIHBvcHBlcjoge1xuICAgICAgcG9zaXRpb246IHN0YXRlLm9wdGlvbnMuc3RyYXRlZ3ksXG4gICAgICBsZWZ0OiAnMCcsXG4gICAgICB0b3A6ICcwJyxcbiAgICAgIG1hcmdpbjogJzAnXG4gICAgfSxcbiAgICBhcnJvdzoge1xuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZSdcbiAgICB9LFxuICAgIHJlZmVyZW5jZToge31cbiAgfTtcbiAgT2JqZWN0LmFzc2lnbihzdGF0ZS5lbGVtZW50cy5wb3BwZXIuc3R5bGUsIGluaXRpYWxTdHlsZXMucG9wcGVyKTtcblxuICBpZiAoc3RhdGUuZWxlbWVudHMuYXJyb3cpIHtcbiAgICBPYmplY3QuYXNzaWduKHN0YXRlLmVsZW1lbnRzLmFycm93LnN0eWxlLCBpbml0aWFsU3R5bGVzLmFycm93KTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgT2JqZWN0LmtleXMoc3RhdGUuZWxlbWVudHMpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIHZhciBlbGVtZW50ID0gc3RhdGUuZWxlbWVudHNbbmFtZV07XG4gICAgICB2YXIgYXR0cmlidXRlcyA9IHN0YXRlLmF0dHJpYnV0ZXNbbmFtZV0gfHwge307XG4gICAgICB2YXIgc3R5bGVQcm9wZXJ0aWVzID0gT2JqZWN0LmtleXMoc3RhdGUuc3R5bGVzLmhhc093blByb3BlcnR5KG5hbWUpID8gc3RhdGUuc3R5bGVzW25hbWVdIDogaW5pdGlhbFN0eWxlc1tuYW1lXSk7IC8vIFNldCBhbGwgdmFsdWVzIHRvIGFuIGVtcHR5IHN0cmluZyB0byB1bnNldCB0aGVtXG5cbiAgICAgIHZhciBzdHlsZSA9IHN0eWxlUHJvcGVydGllcy5yZWR1Y2UoZnVuY3Rpb24gKHN0eWxlLCBwcm9wZXJ0eSkge1xuICAgICAgICBzdHlsZVtwcm9wZXJ0eV0gPSAnJztcbiAgICAgICAgcmV0dXJuIHN0eWxlO1xuICAgICAgfSwge30pOyAvLyBhcnJvdyBpcyBvcHRpb25hbCArIHZpcnR1YWwgZWxlbWVudHNcblxuICAgICAgaWYgKCFpc0hUTUxFbGVtZW50KGVsZW1lbnQpIHx8ICFnZXROb2RlTmFtZShlbGVtZW50KSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIEZsb3cgZG9lc24ndCBzdXBwb3J0IHRvIGV4dGVuZCB0aGlzIHByb3BlcnR5LCBidXQgaXQncyB0aGUgbW9zdFxuICAgICAgLy8gZWZmZWN0aXZlIHdheSB0byBhcHBseSBzdHlsZXMgdG8gYW4gSFRNTEVsZW1lbnRcbiAgICAgIC8vICRGbG93Rml4TWVcblxuXG4gICAgICBPYmplY3QuYXNzaWduKGVsZW1lbnQuc3R5bGUsIHN0eWxlKTtcbiAgICAgIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGF0dHJpYnV0ZSkge1xuICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGUpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG52YXIgYXBwbHlTdHlsZXMkMSA9IHtcbiAgbmFtZTogJ2FwcGx5U3R5bGVzJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICd3cml0ZScsXG4gIGZuOiBhcHBseVN0eWxlcyxcbiAgZWZmZWN0OiBlZmZlY3QkMSxcbiAgcmVxdWlyZXM6IFsnY29tcHV0ZVN0eWxlcyddXG59O1xuXG5mdW5jdGlvbiBkaXN0YW5jZUFuZFNraWRkaW5nVG9YWShwbGFjZW1lbnQsIHJlY3RzLCBvZmZzZXQpIHtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCk7XG4gIHZhciBpbnZlcnREaXN0YW5jZSA9IFtsZWZ0LCB0b3BdLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgPj0gMCA/IC0xIDogMTtcblxuICB2YXIgX3JlZiA9IHR5cGVvZiBvZmZzZXQgPT09ICdmdW5jdGlvbicgPyBvZmZzZXQoT2JqZWN0LmFzc2lnbih7fSwgcmVjdHMsIHtcbiAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudFxuICB9KSkgOiBvZmZzZXQsXG4gICAgICBza2lkZGluZyA9IF9yZWZbMF0sXG4gICAgICBkaXN0YW5jZSA9IF9yZWZbMV07XG5cbiAgc2tpZGRpbmcgPSBza2lkZGluZyB8fCAwO1xuICBkaXN0YW5jZSA9IChkaXN0YW5jZSB8fCAwKSAqIGludmVydERpc3RhbmNlO1xuICByZXR1cm4gW2xlZnQsIHJpZ2h0XS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpID49IDAgPyB7XG4gICAgeDogZGlzdGFuY2UsXG4gICAgeTogc2tpZGRpbmdcbiAgfSA6IHtcbiAgICB4OiBza2lkZGluZyxcbiAgICB5OiBkaXN0YW5jZVxuICB9O1xufVxuXG5mdW5jdGlvbiBvZmZzZXQoX3JlZjIpIHtcbiAgdmFyIHN0YXRlID0gX3JlZjIuc3RhdGUsXG4gICAgICBvcHRpb25zID0gX3JlZjIub3B0aW9ucyxcbiAgICAgIG5hbWUgPSBfcmVmMi5uYW1lO1xuICB2YXIgX29wdGlvbnMkb2Zmc2V0ID0gb3B0aW9ucy5vZmZzZXQsXG4gICAgICBvZmZzZXQgPSBfb3B0aW9ucyRvZmZzZXQgPT09IHZvaWQgMCA/IFswLCAwXSA6IF9vcHRpb25zJG9mZnNldDtcbiAgdmFyIGRhdGEgPSBwbGFjZW1lbnRzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwbGFjZW1lbnQpIHtcbiAgICBhY2NbcGxhY2VtZW50XSA9IGRpc3RhbmNlQW5kU2tpZGRpbmdUb1hZKHBsYWNlbWVudCwgc3RhdGUucmVjdHMsIG9mZnNldCk7XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xuICB2YXIgX2RhdGEkc3RhdGUkcGxhY2VtZW50ID0gZGF0YVtzdGF0ZS5wbGFjZW1lbnRdLFxuICAgICAgeCA9IF9kYXRhJHN0YXRlJHBsYWNlbWVudC54LFxuICAgICAgeSA9IF9kYXRhJHN0YXRlJHBsYWNlbWVudC55O1xuXG4gIGlmIChzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMgIT0gbnVsbCkge1xuICAgIHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cy54ICs9IHg7XG4gICAgc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzLnkgKz0geTtcbiAgfVxuXG4gIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0gPSBkYXRhO1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxudmFyIG9mZnNldCQxID0ge1xuICBuYW1lOiAnb2Zmc2V0JyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdtYWluJyxcbiAgcmVxdWlyZXM6IFsncG9wcGVyT2Zmc2V0cyddLFxuICBmbjogb2Zmc2V0XG59O1xuXG52YXIgaGFzaCA9IHtcbiAgbGVmdDogJ3JpZ2h0JyxcbiAgcmlnaHQ6ICdsZWZ0JyxcbiAgYm90dG9tOiAndG9wJyxcbiAgdG9wOiAnYm90dG9tJ1xufTtcbmZ1bmN0aW9uIGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCkge1xuICByZXR1cm4gcGxhY2VtZW50LnJlcGxhY2UoL2xlZnR8cmlnaHR8Ym90dG9tfHRvcC9nLCBmdW5jdGlvbiAobWF0Y2hlZCkge1xuICAgIHJldHVybiBoYXNoW21hdGNoZWRdO1xuICB9KTtcbn1cblxudmFyIGhhc2gkMSA9IHtcbiAgc3RhcnQ6ICdlbmQnLFxuICBlbmQ6ICdzdGFydCdcbn07XG5mdW5jdGlvbiBnZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIHBsYWNlbWVudC5yZXBsYWNlKC9zdGFydHxlbmQvZywgZnVuY3Rpb24gKG1hdGNoZWQpIHtcbiAgICByZXR1cm4gaGFzaCQxW21hdGNoZWRdO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0Vmlld3BvcnRSZWN0KGVsZW1lbnQpIHtcbiAgdmFyIHdpbiA9IGdldFdpbmRvdyhlbGVtZW50KTtcbiAgdmFyIHZpc3VhbFZpZXdwb3J0ID0gd2luLnZpc3VhbFZpZXdwb3J0O1xuICB2YXIgd2lkdGggPSB3aW4uaW5uZXJXaWR0aDtcbiAgdmFyIGhlaWdodCA9IHdpbi5pbm5lckhlaWdodDsgLy8gV2UgZG9uJ3Qga25vdyB3aGljaCBicm93c2VycyBoYXZlIGJ1Z2d5IG9yIG9kZCBpbXBsZW1lbnRhdGlvbnMgb2YgdGhpcywgc29cbiAgLy8gZm9yIG5vdyB3ZSdyZSBvbmx5IGFwcGx5aW5nIGl0IHRvIGlPUyB0byBmaXggdGhlIGtleWJvYXJkIGlzc3VlLlxuICAvLyBJbnZlc3RpZ2F0aW9uIHJlcXVpcmVkXG5cbiAgaWYgKHZpc3VhbFZpZXdwb3J0ICYmIC9pUGhvbmV8aVBvZHxpUGFkLy50ZXN0KG5hdmlnYXRvci5wbGF0Zm9ybSkpIHtcbiAgICB3aWR0aCA9IHZpc3VhbFZpZXdwb3J0LndpZHRoO1xuICAgIGhlaWdodCA9IHZpc3VhbFZpZXdwb3J0LmhlaWdodDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0LFxuICAgIHg6IDAsXG4gICAgeTogMFxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXREb2N1bWVudFJlY3QoZWxlbWVudCkge1xuICB2YXIgd2luID0gZ2V0V2luZG93KGVsZW1lbnQpO1xuICB2YXIgd2luU2Nyb2xsID0gZ2V0V2luZG93U2Nyb2xsKGVsZW1lbnQpO1xuICB2YXIgZG9jdW1lbnRSZWN0ID0gZ2V0Q29tcG9zaXRlUmVjdChnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCksIHdpbik7XG4gIGRvY3VtZW50UmVjdC5oZWlnaHQgPSBNYXRoLm1heChkb2N1bWVudFJlY3QuaGVpZ2h0LCB3aW4uaW5uZXJIZWlnaHQpO1xuICBkb2N1bWVudFJlY3Qud2lkdGggPSBNYXRoLm1heChkb2N1bWVudFJlY3Qud2lkdGgsIHdpbi5pbm5lcldpZHRoKTtcbiAgZG9jdW1lbnRSZWN0LnggPSAtd2luU2Nyb2xsLnNjcm9sbExlZnQ7XG4gIGRvY3VtZW50UmVjdC55ID0gLXdpblNjcm9sbC5zY3JvbGxUb3A7XG4gIHJldHVybiBkb2N1bWVudFJlY3Q7XG59XG5cbmZ1bmN0aW9uIHRvTnVtYmVyKGNzc1ZhbHVlKSB7XG4gIHJldHVybiBwYXJzZUZsb2F0KGNzc1ZhbHVlKSB8fCAwO1xufVxuXG5mdW5jdGlvbiBnZXRCb3JkZXJzKGVsZW1lbnQpIHtcbiAgdmFyIGNvbXB1dGVkU3R5bGUgPSBpc0hUTUxFbGVtZW50KGVsZW1lbnQpID8gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KSA6IHt9O1xuICByZXR1cm4ge1xuICAgIHRvcDogdG9OdW1iZXIoY29tcHV0ZWRTdHlsZS5ib3JkZXJUb3BXaWR0aCksXG4gICAgcmlnaHQ6IHRvTnVtYmVyKGNvbXB1dGVkU3R5bGUuYm9yZGVyUmlnaHRXaWR0aCksXG4gICAgYm90dG9tOiB0b051bWJlcihjb21wdXRlZFN0eWxlLmJvcmRlckJvdHRvbVdpZHRoKSxcbiAgICBsZWZ0OiB0b051bWJlcihjb21wdXRlZFN0eWxlLmJvcmRlckxlZnRXaWR0aClcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0RGVjb3JhdGlvbnMoZWxlbWVudCkge1xuICB2YXIgd2luID0gZ2V0V2luZG93KGVsZW1lbnQpO1xuICB2YXIgYm9yZGVycyA9IGdldEJvcmRlcnMoZWxlbWVudCk7XG4gIHZhciBpc0hUTUwgPSBnZXROb2RlTmFtZShlbGVtZW50KSA9PT0gJ2h0bWwnO1xuICB2YXIgd2luU2Nyb2xsQmFyWCA9IGdldFdpbmRvd1Njcm9sbEJhclgoZWxlbWVudCk7XG4gIHZhciB4ID0gZWxlbWVudC5jbGllbnRXaWR0aCArIGJvcmRlcnMucmlnaHQ7XG4gIHZhciB5ID0gZWxlbWVudC5jbGllbnRIZWlnaHQgKyBib3JkZXJzLmJvdHRvbTsgLy8gSEFDSzpcbiAgLy8gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCBvbiBpT1MgcmVwb3J0cyB0aGUgaGVpZ2h0IG9mIHRoZVxuICAvLyB2aWV3cG9ydCBpbmNsdWRpbmcgdGhlIGJvdHRvbSBiYXIsIGV2ZW4gaWYgdGhlIGJvdHRvbSBiYXIgaXNuJ3QgdmlzaWJsZS5cbiAgLy8gSWYgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiB3aW5kb3cgaW5uZXJIZWlnaHQgYW5kIGh0bWwgY2xpZW50SGVpZ2h0IGlzIG1vcmVcbiAgLy8gdGhhbiA1MCwgd2UgYXNzdW1lIGl0J3MgYSBtb2JpbGUgYm90dG9tIGJhciBhbmQgaWdub3JlIHNjcm9sbGJhcnMuXG4gIC8vICogQSA1MHB4IHRoaWNrIHNjcm9sbGJhciBpcyBsaWtlbHkgbm9uLWV4aXN0ZW50IChtYWNPUyBpcyAxNXB4IGFuZCBXaW5kb3dzXG4gIC8vICAgaXMgYWJvdXQgMTdweClcbiAgLy8gKiBUaGUgbW9iaWxlIGJhciBpcyAxMTRweCB0YWxsXG5cbiAgaWYgKGlzSFRNTCAmJiB3aW4uaW5uZXJIZWlnaHQgLSBlbGVtZW50LmNsaWVudEhlaWdodCA+IDUwKSB7XG4gICAgeSA9IHdpbi5pbm5lckhlaWdodCAtIGJvcmRlcnMuYm90dG9tO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0b3A6IGlzSFRNTCA/IDAgOiBlbGVtZW50LmNsaWVudFRvcCxcbiAgICByaWdodDogLy8gUlRMIHNjcm9sbGJhciAoc2Nyb2xsaW5nIGNvbnRhaW5lcnMgb25seSlcbiAgICBlbGVtZW50LmNsaWVudExlZnQgPiBib3JkZXJzLmxlZnQgPyBib3JkZXJzLnJpZ2h0IDogLy8gTFRSIHNjcm9sbGJhclxuICAgIGlzSFRNTCA/IHdpbi5pbm5lcldpZHRoIC0geCAtIHdpblNjcm9sbEJhclggOiBlbGVtZW50Lm9mZnNldFdpZHRoIC0geCxcbiAgICBib3R0b206IGlzSFRNTCA/IHdpbi5pbm5lckhlaWdodCAtIHkgOiBlbGVtZW50Lm9mZnNldEhlaWdodCAtIHksXG4gICAgbGVmdDogaXNIVE1MID8gd2luU2Nyb2xsQmFyWCA6IGVsZW1lbnQuY2xpZW50TGVmdFxuICB9O1xufVxuXG5mdW5jdGlvbiBjb250YWlucyhwYXJlbnQsIGNoaWxkKSB7XG4gIC8vICRGbG93Rml4TWU6IGhhc093blByb3BlcnR5IGRvZXNuJ3Qgc2VlbSB0byB3b3JrIGluIHRlc3RzXG4gIHZhciBpc1NoYWRvdyA9IEJvb2xlYW4oY2hpbGQuZ2V0Um9vdE5vZGUgJiYgY2hpbGQuZ2V0Um9vdE5vZGUoKS5ob3N0KTsgLy8gRmlyc3QsIGF0dGVtcHQgd2l0aCBmYXN0ZXIgbmF0aXZlIG1ldGhvZFxuXG4gIGlmIChwYXJlbnQuY29udGFpbnMoY2hpbGQpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gLy8gdGhlbiBmYWxsYmFjayB0byBjdXN0b20gaW1wbGVtZW50YXRpb24gd2l0aCBTaGFkb3cgRE9NIHN1cHBvcnRcbiAgZWxzZSBpZiAoaXNTaGFkb3cpIHtcbiAgICAgIHZhciBuZXh0ID0gY2hpbGQ7XG5cbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKG5leHQgJiYgcGFyZW50LmlzU2FtZU5vZGUobmV4dCkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSAvLyAkRmxvd0ZpeE1lOiBuZWVkIGEgYmV0dGVyIHdheSB0byBoYW5kbGUgdGhpcy4uLlxuXG5cbiAgICAgICAgbmV4dCA9IG5leHQucGFyZW50Tm9kZSB8fCBuZXh0Lmhvc3Q7XG4gICAgICB9IHdoaWxlIChuZXh0KTtcbiAgICB9IC8vIEdpdmUgdXAsIHRoZSByZXN1bHQgaXMgZmFsc2VcblxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gcmVjdFRvQ2xpZW50UmVjdChyZWN0KSB7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCByZWN0LCB7XG4gICAgbGVmdDogcmVjdC54LFxuICAgIHRvcDogcmVjdC55LFxuICAgIHJpZ2h0OiByZWN0LnggKyByZWN0LndpZHRoLFxuICAgIGJvdHRvbTogcmVjdC55ICsgcmVjdC5oZWlnaHRcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldENsaWVudFJlY3RGcm9tTWl4ZWRUeXBlKGVsZW1lbnQsIGNsaXBwaW5nUGFyZW50KSB7XG4gIHJldHVybiBjbGlwcGluZ1BhcmVudCA9PT0gdmlld3BvcnQgPyByZWN0VG9DbGllbnRSZWN0KGdldFZpZXdwb3J0UmVjdChlbGVtZW50KSkgOiBpc0hUTUxFbGVtZW50KGNsaXBwaW5nUGFyZW50KSA/IGdldEJvdW5kaW5nQ2xpZW50UmVjdChjbGlwcGluZ1BhcmVudCkgOiByZWN0VG9DbGllbnRSZWN0KGdldERvY3VtZW50UmVjdChnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCkpKTtcbn0gLy8gQSBcImNsaXBwaW5nIHBhcmVudFwiIGlzIGFuIG92ZXJmbG93YWJsZSBjb250YWluZXIgd2l0aCB0aGUgY2hhcmFjdGVyaXN0aWMgb2Zcbi8vIGNsaXBwaW5nIChvciBoaWRpbmcpIG92ZXJmbG93aW5nIGVsZW1lbnRzIHdpdGggYSBwb3NpdGlvbiBkaWZmZXJlbnQgZnJvbVxuLy8gYGluaXRpYWxgXG5cblxuZnVuY3Rpb24gZ2V0Q2xpcHBpbmdQYXJlbnRzKGVsZW1lbnQpIHtcbiAgdmFyIGNsaXBwaW5nUGFyZW50cyA9IGxpc3RTY3JvbGxQYXJlbnRzKGVsZW1lbnQpO1xuICB2YXIgY2FuRXNjYXBlQ2xpcHBpbmcgPSBbJ2Fic29sdXRlJywgJ2ZpeGVkJ10uaW5kZXhPZihnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLnBvc2l0aW9uKSA+PSAwO1xuICB2YXIgY2xpcHBlckVsZW1lbnQgPSBjYW5Fc2NhcGVDbGlwcGluZyAmJiBpc0hUTUxFbGVtZW50KGVsZW1lbnQpID8gZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQpIDogZWxlbWVudDtcblxuICBpZiAoIWlzRWxlbWVudChjbGlwcGVyRWxlbWVudCkpIHtcbiAgICByZXR1cm4gW107XG4gIH0gLy8gJEZsb3dGaXhNZTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzE0MTRcblxuXG4gIHJldHVybiBjbGlwcGluZ1BhcmVudHMuZmlsdGVyKGZ1bmN0aW9uIChjbGlwcGluZ1BhcmVudCkge1xuICAgIHJldHVybiBpc0VsZW1lbnQoY2xpcHBpbmdQYXJlbnQpICYmIGNvbnRhaW5zKGNsaXBwaW5nUGFyZW50LCBjbGlwcGVyRWxlbWVudCk7XG4gIH0pO1xufSAvLyBHZXRzIHRoZSBtYXhpbXVtIGFyZWEgdGhhdCB0aGUgZWxlbWVudCBpcyB2aXNpYmxlIGluIGR1ZSB0byBhbnkgbnVtYmVyIG9mXG4vLyBjbGlwcGluZyBwYXJlbnRzXG5cblxuZnVuY3Rpb24gZ2V0Q2xpcHBpbmdSZWN0KGVsZW1lbnQsIGJvdW5kYXJ5LCByb290Qm91bmRhcnkpIHtcbiAgdmFyIG1haW5DbGlwcGluZ1BhcmVudHMgPSBib3VuZGFyeSA9PT0gJ2NsaXBwaW5nUGFyZW50cycgPyBnZXRDbGlwcGluZ1BhcmVudHMoZWxlbWVudCkgOiBbXS5jb25jYXQoYm91bmRhcnkpO1xuICB2YXIgY2xpcHBpbmdQYXJlbnRzID0gW10uY29uY2F0KG1haW5DbGlwcGluZ1BhcmVudHMsIFtyb290Qm91bmRhcnldKTtcbiAgdmFyIGZpcnN0Q2xpcHBpbmdQYXJlbnQgPSBjbGlwcGluZ1BhcmVudHNbMF07XG4gIHZhciBjbGlwcGluZ1JlY3QgPSBjbGlwcGluZ1BhcmVudHMucmVkdWNlKGZ1bmN0aW9uIChhY2NSZWN0LCBjbGlwcGluZ1BhcmVudCkge1xuICAgIHZhciByZWN0ID0gZ2V0Q2xpZW50UmVjdEZyb21NaXhlZFR5cGUoZWxlbWVudCwgY2xpcHBpbmdQYXJlbnQpO1xuICAgIHZhciBkZWNvcmF0aW9ucyA9IGdldERlY29yYXRpb25zKGlzSFRNTEVsZW1lbnQoY2xpcHBpbmdQYXJlbnQpID8gY2xpcHBpbmdQYXJlbnQgOiBnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCkpO1xuICAgIGFjY1JlY3QudG9wID0gTWF0aC5tYXgocmVjdC50b3AgKyBkZWNvcmF0aW9ucy50b3AsIGFjY1JlY3QudG9wKTtcbiAgICBhY2NSZWN0LnJpZ2h0ID0gTWF0aC5taW4ocmVjdC5yaWdodCAtIGRlY29yYXRpb25zLnJpZ2h0LCBhY2NSZWN0LnJpZ2h0KTtcbiAgICBhY2NSZWN0LmJvdHRvbSA9IE1hdGgubWluKHJlY3QuYm90dG9tIC0gZGVjb3JhdGlvbnMuYm90dG9tLCBhY2NSZWN0LmJvdHRvbSk7XG4gICAgYWNjUmVjdC5sZWZ0ID0gTWF0aC5tYXgocmVjdC5sZWZ0ICsgZGVjb3JhdGlvbnMubGVmdCwgYWNjUmVjdC5sZWZ0KTtcbiAgICByZXR1cm4gYWNjUmVjdDtcbiAgfSwgZ2V0Q2xpZW50UmVjdEZyb21NaXhlZFR5cGUoZWxlbWVudCwgZmlyc3RDbGlwcGluZ1BhcmVudCkpO1xuICBjbGlwcGluZ1JlY3Qud2lkdGggPSBjbGlwcGluZ1JlY3QucmlnaHQgLSBjbGlwcGluZ1JlY3QubGVmdDtcbiAgY2xpcHBpbmdSZWN0LmhlaWdodCA9IGNsaXBwaW5nUmVjdC5ib3R0b20gLSBjbGlwcGluZ1JlY3QudG9wO1xuICBjbGlwcGluZ1JlY3QueCA9IGNsaXBwaW5nUmVjdC5sZWZ0O1xuICBjbGlwcGluZ1JlY3QueSA9IGNsaXBwaW5nUmVjdC50b3A7XG4gIHJldHVybiBjbGlwcGluZ1JlY3Q7XG59XG5cbmZ1bmN0aW9uIGdldEZyZXNoU2lkZU9iamVjdCgpIHtcbiAgcmV0dXJuIHtcbiAgICB0b3A6IDAsXG4gICAgcmlnaHQ6IDAsXG4gICAgYm90dG9tOiAwLFxuICAgIGxlZnQ6IDBcbiAgfTtcbn1cblxuZnVuY3Rpb24gbWVyZ2VQYWRkaW5nT2JqZWN0KHBhZGRpbmdPYmplY3QpIHtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGdldEZyZXNoU2lkZU9iamVjdCgpLCB7fSwgcGFkZGluZ09iamVjdCk7XG59XG5cbmZ1bmN0aW9uIGV4cGFuZFRvSGFzaE1hcCh2YWx1ZSwga2V5cykge1xuICByZXR1cm4ga2V5cy5yZWR1Y2UoZnVuY3Rpb24gKGhhc2hNYXAsIGtleSkge1xuICAgIGhhc2hNYXBba2V5XSA9IHZhbHVlO1xuICAgIHJldHVybiBoYXNoTWFwO1xuICB9LCB7fSk7XG59XG5cbmZ1bmN0aW9uIGRldGVjdE92ZXJmbG93KHN0YXRlLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgX29wdGlvbnMkcGxhY2VtZW50ID0gX29wdGlvbnMucGxhY2VtZW50LFxuICAgICAgcGxhY2VtZW50ID0gX29wdGlvbnMkcGxhY2VtZW50ID09PSB2b2lkIDAgPyBzdGF0ZS5wbGFjZW1lbnQgOiBfb3B0aW9ucyRwbGFjZW1lbnQsXG4gICAgICBfb3B0aW9ucyRib3VuZGFyeSA9IF9vcHRpb25zLmJvdW5kYXJ5LFxuICAgICAgYm91bmRhcnkgPSBfb3B0aW9ucyRib3VuZGFyeSA9PT0gdm9pZCAwID8gY2xpcHBpbmdQYXJlbnRzIDogX29wdGlvbnMkYm91bmRhcnksXG4gICAgICBfb3B0aW9ucyRyb290Qm91bmRhcnkgPSBfb3B0aW9ucy5yb290Qm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnkgPSBfb3B0aW9ucyRyb290Qm91bmRhcnkgPT09IHZvaWQgMCA/IHZpZXdwb3J0IDogX29wdGlvbnMkcm9vdEJvdW5kYXJ5LFxuICAgICAgX29wdGlvbnMkZWxlbWVudENvbnRlID0gX29wdGlvbnMuZWxlbWVudENvbnRleHQsXG4gICAgICBlbGVtZW50Q29udGV4dCA9IF9vcHRpb25zJGVsZW1lbnRDb250ZSA9PT0gdm9pZCAwID8gcG9wcGVyIDogX29wdGlvbnMkZWxlbWVudENvbnRlLFxuICAgICAgX29wdGlvbnMkYWx0Qm91bmRhcnkgPSBfb3B0aW9ucy5hbHRCb3VuZGFyeSxcbiAgICAgIGFsdEJvdW5kYXJ5ID0gX29wdGlvbnMkYWx0Qm91bmRhcnkgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkYWx0Qm91bmRhcnksXG4gICAgICBfb3B0aW9ucyRwYWRkaW5nID0gX29wdGlvbnMucGFkZGluZyxcbiAgICAgIHBhZGRpbmcgPSBfb3B0aW9ucyRwYWRkaW5nID09PSB2b2lkIDAgPyAwIDogX29wdGlvbnMkcGFkZGluZztcbiAgdmFyIHBhZGRpbmdPYmplY3QgPSBtZXJnZVBhZGRpbmdPYmplY3QodHlwZW9mIHBhZGRpbmcgIT09ICdudW1iZXInID8gcGFkZGluZyA6IGV4cGFuZFRvSGFzaE1hcChwYWRkaW5nLCBiYXNlUGxhY2VtZW50cykpO1xuICB2YXIgYWx0Q29udGV4dCA9IGVsZW1lbnRDb250ZXh0ID09PSBwb3BwZXIgPyByZWZlcmVuY2UgOiBwb3BwZXI7XG4gIHZhciByZWZlcmVuY2VFbGVtZW50ID0gc3RhdGUuZWxlbWVudHMucmVmZXJlbmNlO1xuICB2YXIgcG9wcGVyUmVjdCA9IHN0YXRlLnJlY3RzLnBvcHBlcjtcbiAgdmFyIGVsZW1lbnQgPSBzdGF0ZS5lbGVtZW50c1thbHRCb3VuZGFyeSA/IGFsdENvbnRleHQgOiBlbGVtZW50Q29udGV4dF07XG4gIHZhciBjbGlwcGluZ0NsaWVudFJlY3QgPSBnZXRDbGlwcGluZ1JlY3QoaXNFbGVtZW50KGVsZW1lbnQpID8gZWxlbWVudCA6IGVsZW1lbnQuY29udGV4dEVsZW1lbnQgfHwgZ2V0RG9jdW1lbnRFbGVtZW50KHN0YXRlLmVsZW1lbnRzLnBvcHBlciksIGJvdW5kYXJ5LCByb290Qm91bmRhcnkpO1xuICB2YXIgcmVmZXJlbmNlQ2xpZW50UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChyZWZlcmVuY2VFbGVtZW50KTtcbiAgdmFyIHBvcHBlck9mZnNldHMgPSBjb21wdXRlT2Zmc2V0cyh7XG4gICAgcmVmZXJlbmNlOiByZWZlcmVuY2VDbGllbnRSZWN0LFxuICAgIGVsZW1lbnQ6IHBvcHBlclJlY3QsXG4gICAgc3RyYXRlZ3k6ICdhYnNvbHV0ZScsXG4gICAgcGxhY2VtZW50OiBwbGFjZW1lbnRcbiAgfSk7XG4gIHZhciBwb3BwZXJDbGllbnRSZWN0ID0gcmVjdFRvQ2xpZW50UmVjdChPYmplY3QuYXNzaWduKHt9LCBwb3BwZXJSZWN0LCB7fSwgcG9wcGVyT2Zmc2V0cykpO1xuICB2YXIgZWxlbWVudENsaWVudFJlY3QgPSBlbGVtZW50Q29udGV4dCA9PT0gcG9wcGVyID8gcG9wcGVyQ2xpZW50UmVjdCA6IHJlZmVyZW5jZUNsaWVudFJlY3Q7IC8vIHBvc2l0aXZlID0gb3ZlcmZsb3dpbmcgdGhlIGNsaXBwaW5nIHJlY3RcbiAgLy8gMCBvciBuZWdhdGl2ZSA9IHdpdGhpbiB0aGUgY2xpcHBpbmcgcmVjdFxuXG4gIHZhciBvdmVyZmxvd09mZnNldHMgPSB7XG4gICAgdG9wOiBjbGlwcGluZ0NsaWVudFJlY3QudG9wIC0gZWxlbWVudENsaWVudFJlY3QudG9wICsgcGFkZGluZ09iamVjdC50b3AsXG4gICAgYm90dG9tOiBlbGVtZW50Q2xpZW50UmVjdC5ib3R0b20gLSBjbGlwcGluZ0NsaWVudFJlY3QuYm90dG9tICsgcGFkZGluZ09iamVjdC5ib3R0b20sXG4gICAgbGVmdDogY2xpcHBpbmdDbGllbnRSZWN0LmxlZnQgLSBlbGVtZW50Q2xpZW50UmVjdC5sZWZ0ICsgcGFkZGluZ09iamVjdC5sZWZ0LFxuICAgIHJpZ2h0OiBlbGVtZW50Q2xpZW50UmVjdC5yaWdodCAtIGNsaXBwaW5nQ2xpZW50UmVjdC5yaWdodCArIHBhZGRpbmdPYmplY3QucmlnaHRcbiAgfTtcbiAgdmFyIG9mZnNldERhdGEgPSBzdGF0ZS5tb2RpZmllcnNEYXRhLm9mZnNldDsgLy8gT2Zmc2V0cyBjYW4gYmUgYXBwbGllZCBvbmx5IHRvIHRoZSBwb3BwZXIgZWxlbWVudFxuXG4gIGlmIChlbGVtZW50Q29udGV4dCA9PT0gcG9wcGVyICYmIG9mZnNldERhdGEpIHtcbiAgICB2YXIgb2Zmc2V0ID0gb2Zmc2V0RGF0YVtwbGFjZW1lbnRdO1xuICAgIE9iamVjdC5rZXlzKG92ZXJmbG93T2Zmc2V0cykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICB2YXIgbXVsdGlwbHkgPSBbcmlnaHQsIGJvdHRvbV0uaW5kZXhPZihrZXkpID49IDAgPyAxIDogLTE7XG4gICAgICB2YXIgYXhpcyA9IFt0b3AsIGJvdHRvbV0uaW5kZXhPZihrZXkpID49IDAgPyAneScgOiAneCc7XG4gICAgICBvdmVyZmxvd09mZnNldHNba2V5XSArPSBvZmZzZXRbYXhpc10gKiBtdWx0aXBseTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBvdmVyZmxvd09mZnNldHM7XG59XG5cbi8qOjogdHlwZSBPdmVyZmxvd3NNYXAgPSB7IFtDb21wdXRlZFBsYWNlbWVudF06IG51bWJlciB9OyAqL1xuXG4vKjs7IHR5cGUgT3ZlcmZsb3dzTWFwID0geyBba2V5IGluIENvbXB1dGVkUGxhY2VtZW50XTogbnVtYmVyIH07ICovXG5mdW5jdGlvbiBjb21wdXRlQXV0b1BsYWNlbWVudChzdGF0ZSwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIHBsYWNlbWVudCA9IF9vcHRpb25zLnBsYWNlbWVudCxcbiAgICAgIGJvdW5kYXJ5ID0gX29wdGlvbnMuYm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnkgPSBfb3B0aW9ucy5yb290Qm91bmRhcnksXG4gICAgICBwYWRkaW5nID0gX29wdGlvbnMucGFkZGluZyxcbiAgICAgIGZsaXBWYXJpYXRpb25zID0gX29wdGlvbnMuZmxpcFZhcmlhdGlvbnMsXG4gICAgICBfb3B0aW9ucyRhbGxvd2VkQXV0b1AgPSBfb3B0aW9ucy5hbGxvd2VkQXV0b1BsYWNlbWVudHMsXG4gICAgICBhbGxvd2VkQXV0b1BsYWNlbWVudHMgPSBfb3B0aW9ucyRhbGxvd2VkQXV0b1AgPT09IHZvaWQgMCA/IHBsYWNlbWVudHMgOiBfb3B0aW9ucyRhbGxvd2VkQXV0b1A7XG4gIHZhciB2YXJpYXRpb24gPSBnZXRWYXJpYXRpb24ocGxhY2VtZW50KTtcbiAgdmFyIHBsYWNlbWVudHMkMSA9ICh2YXJpYXRpb24gPyBmbGlwVmFyaWF0aW9ucyA/IHZhcmlhdGlvblBsYWNlbWVudHMgOiB2YXJpYXRpb25QbGFjZW1lbnRzLmZpbHRlcihmdW5jdGlvbiAocGxhY2VtZW50KSB7XG4gICAgcmV0dXJuIGdldFZhcmlhdGlvbihwbGFjZW1lbnQpID09PSB2YXJpYXRpb247XG4gIH0pIDogYmFzZVBsYWNlbWVudHMpLmZpbHRlcihmdW5jdGlvbiAocGxhY2VtZW50KSB7XG4gICAgcmV0dXJuIGFsbG93ZWRBdXRvUGxhY2VtZW50cy5pbmRleE9mKHBsYWNlbWVudCkgPj0gMDtcbiAgfSk7IC8vICRGbG93Rml4TWU6IEZsb3cgc2VlbXMgdG8gaGF2ZSBwcm9ibGVtcyB3aXRoIHR3byBhcnJheSB1bmlvbnMuLi5cblxuICB2YXIgb3ZlcmZsb3dzID0gcGxhY2VtZW50cyQxLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwbGFjZW1lbnQpIHtcbiAgICBhY2NbcGxhY2VtZW50XSA9IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudCxcbiAgICAgIGJvdW5kYXJ5OiBib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeTogcm9vdEJvdW5kYXJ5LFxuICAgICAgcGFkZGluZzogcGFkZGluZ1xuICAgIH0pW2dldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KV07XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xuICByZXR1cm4gT2JqZWN0LmtleXMob3ZlcmZsb3dzKS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIG92ZXJmbG93c1thXSAtIG92ZXJmbG93c1tiXTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldEV4cGFuZGVkRmFsbGJhY2tQbGFjZW1lbnRzKHBsYWNlbWVudCkge1xuICBpZiAoZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpID09PSBhdXRvKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgdmFyIG9wcG9zaXRlUGxhY2VtZW50ID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KTtcbiAgcmV0dXJuIFtnZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudChwbGFjZW1lbnQpLCBvcHBvc2l0ZVBsYWNlbWVudCwgZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQob3Bwb3NpdGVQbGFjZW1lbnQpXTtcbn1cblxuZnVuY3Rpb24gZmxpcChfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBvcHRpb25zID0gX3JlZi5vcHRpb25zLFxuICAgICAgbmFtZSA9IF9yZWYubmFtZTtcblxuICBpZiAoc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXS5fc2tpcCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBfb3B0aW9ucyRtYWluQXhpcyA9IG9wdGlvbnMubWFpbkF4aXMsXG4gICAgICBjaGVja01haW5BeGlzID0gX29wdGlvbnMkbWFpbkF4aXMgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRtYWluQXhpcyxcbiAgICAgIF9vcHRpb25zJGFsdEF4aXMgPSBvcHRpb25zLmFsdEF4aXMsXG4gICAgICBjaGVja0FsdEF4aXMgPSBfb3B0aW9ucyRhbHRBeGlzID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkYWx0QXhpcyxcbiAgICAgIHNwZWNpZmllZEZhbGxiYWNrUGxhY2VtZW50cyA9IG9wdGlvbnMuZmFsbGJhY2tQbGFjZW1lbnRzLFxuICAgICAgcGFkZGluZyA9IG9wdGlvbnMucGFkZGluZyxcbiAgICAgIGJvdW5kYXJ5ID0gb3B0aW9ucy5ib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeSA9IG9wdGlvbnMucm9vdEJvdW5kYXJ5LFxuICAgICAgYWx0Qm91bmRhcnkgPSBvcHRpb25zLmFsdEJvdW5kYXJ5LFxuICAgICAgX29wdGlvbnMkZmxpcFZhcmlhdGlvID0gb3B0aW9ucy5mbGlwVmFyaWF0aW9ucyxcbiAgICAgIGZsaXBWYXJpYXRpb25zID0gX29wdGlvbnMkZmxpcFZhcmlhdGlvID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkZmxpcFZhcmlhdGlvLFxuICAgICAgYWxsb3dlZEF1dG9QbGFjZW1lbnRzID0gb3B0aW9ucy5hbGxvd2VkQXV0b1BsYWNlbWVudHM7XG4gIHZhciBwcmVmZXJyZWRQbGFjZW1lbnQgPSBzdGF0ZS5vcHRpb25zLnBsYWNlbWVudDtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHByZWZlcnJlZFBsYWNlbWVudCk7XG4gIHZhciBpc0Jhc2VQbGFjZW1lbnQgPSBiYXNlUGxhY2VtZW50ID09PSBwcmVmZXJyZWRQbGFjZW1lbnQ7XG4gIHZhciBmYWxsYmFja1BsYWNlbWVudHMgPSBzcGVjaWZpZWRGYWxsYmFja1BsYWNlbWVudHMgfHwgKGlzQmFzZVBsYWNlbWVudCB8fCAhZmxpcFZhcmlhdGlvbnMgPyBbZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocHJlZmVycmVkUGxhY2VtZW50KV0gOiBnZXRFeHBhbmRlZEZhbGxiYWNrUGxhY2VtZW50cyhwcmVmZXJyZWRQbGFjZW1lbnQpKTtcbiAgdmFyIHBsYWNlbWVudHMgPSBbcHJlZmVycmVkUGxhY2VtZW50XS5jb25jYXQoZmFsbGJhY2tQbGFjZW1lbnRzKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGxhY2VtZW50KSB7XG4gICAgcmV0dXJuIGFjYy5jb25jYXQoZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpID09PSBhdXRvID8gY29tcHV0ZUF1dG9QbGFjZW1lbnQoc3RhdGUsIHtcbiAgICAgIHBsYWNlbWVudDogcGxhY2VtZW50LFxuICAgICAgYm91bmRhcnk6IGJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5OiByb290Qm91bmRhcnksXG4gICAgICBwYWRkaW5nOiBwYWRkaW5nLFxuICAgICAgZmxpcFZhcmlhdGlvbnM6IGZsaXBWYXJpYXRpb25zLFxuICAgICAgYWxsb3dlZEF1dG9QbGFjZW1lbnRzOiBhbGxvd2VkQXV0b1BsYWNlbWVudHNcbiAgICB9KSA6IHBsYWNlbWVudCk7XG4gIH0sIFtdKTtcbiAgdmFyIHJlZmVyZW5jZVJlY3QgPSBzdGF0ZS5yZWN0cy5yZWZlcmVuY2U7XG4gIHZhciBwb3BwZXJSZWN0ID0gc3RhdGUucmVjdHMucG9wcGVyO1xuICB2YXIgY2hlY2tzTWFwID0gbmV3IE1hcCgpO1xuICB2YXIgbWFrZUZhbGxiYWNrQ2hlY2tzID0gdHJ1ZTtcbiAgdmFyIGZpcnN0Rml0dGluZ1BsYWNlbWVudCA9IHBsYWNlbWVudHNbMF07XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwbGFjZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHBsYWNlbWVudCA9IHBsYWNlbWVudHNbaV07XG5cbiAgICB2YXIgX2Jhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCk7XG5cbiAgICB2YXIgaXNTdGFydFZhcmlhdGlvbiA9IGdldFZhcmlhdGlvbihwbGFjZW1lbnQpID09PSBzdGFydDtcbiAgICB2YXIgaXNWZXJ0aWNhbCA9IFt0b3AsIGJvdHRvbV0uaW5kZXhPZihfYmFzZVBsYWNlbWVudCkgPj0gMDtcbiAgICB2YXIgbGVuID0gaXNWZXJ0aWNhbCA/ICd3aWR0aCcgOiAnaGVpZ2h0JztcbiAgICB2YXIgb3ZlcmZsb3cgPSBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwge1xuICAgICAgcGxhY2VtZW50OiBwbGFjZW1lbnQsXG4gICAgICBib3VuZGFyeTogYm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnk6IHJvb3RCb3VuZGFyeSxcbiAgICAgIGFsdEJvdW5kYXJ5OiBhbHRCb3VuZGFyeSxcbiAgICAgIHBhZGRpbmc6IHBhZGRpbmdcbiAgICB9KTtcbiAgICB2YXIgbWFpblZhcmlhdGlvblNpZGUgPSBpc1ZlcnRpY2FsID8gaXNTdGFydFZhcmlhdGlvbiA/IHJpZ2h0IDogbGVmdCA6IGlzU3RhcnRWYXJpYXRpb24gPyBib3R0b20gOiB0b3A7XG5cbiAgICBpZiAocmVmZXJlbmNlUmVjdFtsZW5dID4gcG9wcGVyUmVjdFtsZW5dKSB7XG4gICAgICBtYWluVmFyaWF0aW9uU2lkZSA9IGdldE9wcG9zaXRlUGxhY2VtZW50KG1haW5WYXJpYXRpb25TaWRlKTtcbiAgICB9XG5cbiAgICB2YXIgYWx0VmFyaWF0aW9uU2lkZSA9IGdldE9wcG9zaXRlUGxhY2VtZW50KG1haW5WYXJpYXRpb25TaWRlKTtcbiAgICB2YXIgY2hlY2tzID0gW107XG5cbiAgICBpZiAoY2hlY2tNYWluQXhpcykge1xuICAgICAgY2hlY2tzLnB1c2gob3ZlcmZsb3dbX2Jhc2VQbGFjZW1lbnRdIDw9IDApO1xuICAgIH1cblxuICAgIGlmIChjaGVja0FsdEF4aXMpIHtcbiAgICAgIGNoZWNrcy5wdXNoKG92ZXJmbG93W21haW5WYXJpYXRpb25TaWRlXSA8PSAwLCBvdmVyZmxvd1thbHRWYXJpYXRpb25TaWRlXSA8PSAwKTtcbiAgICB9XG5cbiAgICBpZiAoY2hlY2tzLmV2ZXJ5KGZ1bmN0aW9uIChjaGVjaykge1xuICAgICAgcmV0dXJuIGNoZWNrO1xuICAgIH0pKSB7XG4gICAgICBmaXJzdEZpdHRpbmdQbGFjZW1lbnQgPSBwbGFjZW1lbnQ7XG4gICAgICBtYWtlRmFsbGJhY2tDaGVja3MgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGNoZWNrc01hcC5zZXQocGxhY2VtZW50LCBjaGVja3MpO1xuICB9XG5cbiAgaWYgKG1ha2VGYWxsYmFja0NoZWNrcykge1xuICAgIC8vIGAyYCBtYXkgYmUgZGVzaXJlZCBpbiBzb21lIGNhc2VzIOKAkyByZXNlYXJjaCBsYXRlclxuICAgIHZhciBudW1iZXJPZkNoZWNrcyA9IGZsaXBWYXJpYXRpb25zID8gMyA6IDE7XG5cbiAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcChfaSkge1xuICAgICAgdmFyIGZpdHRpbmdQbGFjZW1lbnQgPSBwbGFjZW1lbnRzLmZpbmQoZnVuY3Rpb24gKHBsYWNlbWVudCkge1xuICAgICAgICB2YXIgY2hlY2tzID0gY2hlY2tzTWFwLmdldChwbGFjZW1lbnQpO1xuXG4gICAgICAgIGlmIChjaGVja3MpIHtcbiAgICAgICAgICByZXR1cm4gY2hlY2tzLnNsaWNlKDAsIF9pKS5ldmVyeShmdW5jdGlvbiAoY2hlY2spIHtcbiAgICAgICAgICAgIHJldHVybiBjaGVjaztcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChmaXR0aW5nUGxhY2VtZW50KSB7XG4gICAgICAgIGZpcnN0Rml0dGluZ1BsYWNlbWVudCA9IGZpdHRpbmdQbGFjZW1lbnQ7XG4gICAgICAgIHJldHVybiBcImJyZWFrXCI7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGZvciAodmFyIF9pID0gbnVtYmVyT2ZDaGVja3M7IF9pID4gMDsgX2ktLSkge1xuICAgICAgdmFyIF9yZXQgPSBfbG9vcChfaSk7XG5cbiAgICAgIGlmIChfcmV0ID09PSBcImJyZWFrXCIpIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzdGF0ZS5wbGFjZW1lbnQgIT09IGZpcnN0Rml0dGluZ1BsYWNlbWVudCkge1xuICAgIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0uX3NraXAgPSB0cnVlO1xuICAgIHN0YXRlLnBsYWNlbWVudCA9IGZpcnN0Rml0dGluZ1BsYWNlbWVudDtcbiAgICBzdGF0ZS5yZXNldCA9IHRydWU7XG4gIH1cbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbnZhciBmbGlwJDEgPSB7XG4gIG5hbWU6ICdmbGlwJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdtYWluJyxcbiAgZm46IGZsaXAsXG4gIHJlcXVpcmVzSWZFeGlzdHM6IFsnb2Zmc2V0J10sXG4gIGRhdGE6IHtcbiAgICBfc2tpcDogZmFsc2VcbiAgfVxufTtcblxuZnVuY3Rpb24gZ2V0QWx0QXhpcyhheGlzKSB7XG4gIHJldHVybiBheGlzID09PSAneCcgPyAneScgOiAneCc7XG59XG5cbmZ1bmN0aW9uIHdpdGhpbihtaW4sIHZhbHVlLCBtYXgpIHtcbiAgcmV0dXJuIE1hdGgubWF4KG1pbiwgTWF0aC5taW4odmFsdWUsIG1heCkpO1xufVxuXG5mdW5jdGlvbiBwcmV2ZW50T3ZlcmZsb3coX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgb3B0aW9ucyA9IF9yZWYub3B0aW9ucyxcbiAgICAgIG5hbWUgPSBfcmVmLm5hbWU7XG4gIHZhciBfb3B0aW9ucyRtYWluQXhpcyA9IG9wdGlvbnMubWFpbkF4aXMsXG4gICAgICBjaGVja01haW5BeGlzID0gX29wdGlvbnMkbWFpbkF4aXMgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRtYWluQXhpcyxcbiAgICAgIF9vcHRpb25zJGFsdEF4aXMgPSBvcHRpb25zLmFsdEF4aXMsXG4gICAgICBjaGVja0FsdEF4aXMgPSBfb3B0aW9ucyRhbHRBeGlzID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJGFsdEF4aXMsXG4gICAgICBib3VuZGFyeSA9IG9wdGlvbnMuYm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnkgPSBvcHRpb25zLnJvb3RCb3VuZGFyeSxcbiAgICAgIGFsdEJvdW5kYXJ5ID0gb3B0aW9ucy5hbHRCb3VuZGFyeSxcbiAgICAgIHBhZGRpbmcgPSBvcHRpb25zLnBhZGRpbmcsXG4gICAgICBfb3B0aW9ucyR0ZXRoZXIgPSBvcHRpb25zLnRldGhlcixcbiAgICAgIHRldGhlciA9IF9vcHRpb25zJHRldGhlciA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJHRldGhlcixcbiAgICAgIF9vcHRpb25zJHRldGhlck9mZnNldCA9IG9wdGlvbnMudGV0aGVyT2Zmc2V0LFxuICAgICAgdGV0aGVyT2Zmc2V0ID0gX29wdGlvbnMkdGV0aGVyT2Zmc2V0ID09PSB2b2lkIDAgPyAwIDogX29wdGlvbnMkdGV0aGVyT2Zmc2V0O1xuICB2YXIgb3ZlcmZsb3cgPSBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwge1xuICAgIGJvdW5kYXJ5OiBib3VuZGFyeSxcbiAgICByb290Qm91bmRhcnk6IHJvb3RCb3VuZGFyeSxcbiAgICBwYWRkaW5nOiBwYWRkaW5nLFxuICAgIGFsdEJvdW5kYXJ5OiBhbHRCb3VuZGFyeVxuICB9KTtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHN0YXRlLnBsYWNlbWVudCk7XG4gIHZhciB2YXJpYXRpb24gPSBnZXRWYXJpYXRpb24oc3RhdGUucGxhY2VtZW50KTtcbiAgdmFyIGlzQmFzZVBsYWNlbWVudCA9ICF2YXJpYXRpb247XG4gIHZhciBtYWluQXhpcyA9IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudChiYXNlUGxhY2VtZW50KTtcbiAgdmFyIGFsdEF4aXMgPSBnZXRBbHRBeGlzKG1haW5BeGlzKTtcbiAgdmFyIHBvcHBlck9mZnNldHMgPSBzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHM7XG4gIHZhciByZWZlcmVuY2VSZWN0ID0gc3RhdGUucmVjdHMucmVmZXJlbmNlO1xuICB2YXIgcG9wcGVyUmVjdCA9IHN0YXRlLnJlY3RzLnBvcHBlcjtcbiAgdmFyIHRldGhlck9mZnNldFZhbHVlID0gdHlwZW9mIHRldGhlck9mZnNldCA9PT0gJ2Z1bmN0aW9uJyA/IHRldGhlck9mZnNldChPYmplY3QuYXNzaWduKHt9LCBzdGF0ZS5yZWN0cywge1xuICAgIHBsYWNlbWVudDogc3RhdGUucGxhY2VtZW50XG4gIH0pKSA6IHRldGhlck9mZnNldDtcbiAgdmFyIGRhdGEgPSB7XG4gICAgeDogMCxcbiAgICB5OiAwXG4gIH07XG5cbiAgaWYgKCFwb3BwZXJPZmZzZXRzKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGNoZWNrTWFpbkF4aXMpIHtcbiAgICB2YXIgbWFpblNpZGUgPSBtYWluQXhpcyA9PT0gJ3knID8gdG9wIDogbGVmdDtcbiAgICB2YXIgYWx0U2lkZSA9IG1haW5BeGlzID09PSAneScgPyBib3R0b20gOiByaWdodDtcbiAgICB2YXIgbGVuID0gbWFpbkF4aXMgPT09ICd5JyA/ICdoZWlnaHQnIDogJ3dpZHRoJztcbiAgICB2YXIgb2Zmc2V0ID0gcG9wcGVyT2Zmc2V0c1ttYWluQXhpc107XG4gICAgdmFyIG1pbiA9IHBvcHBlck9mZnNldHNbbWFpbkF4aXNdICsgb3ZlcmZsb3dbbWFpblNpZGVdO1xuICAgIHZhciBtYXggPSBwb3BwZXJPZmZzZXRzW21haW5BeGlzXSAtIG92ZXJmbG93W2FsdFNpZGVdO1xuICAgIHZhciBhZGRpdGl2ZSA9IHRldGhlciA/IC1wb3BwZXJSZWN0W2xlbl0gLyAyIDogMDtcbiAgICB2YXIgbWluTGVuID0gdmFyaWF0aW9uID09PSBzdGFydCA/IHJlZmVyZW5jZVJlY3RbbGVuXSA6IHBvcHBlclJlY3RbbGVuXTtcbiAgICB2YXIgbWF4TGVuID0gdmFyaWF0aW9uID09PSBzdGFydCA/IC1wb3BwZXJSZWN0W2xlbl0gOiAtcmVmZXJlbmNlUmVjdFtsZW5dOyAvLyBXZSBuZWVkIHRvIGluY2x1ZGUgdGhlIGFycm93IGluIHRoZSBjYWxjdWxhdGlvbiBzbyB0aGUgYXJyb3cgZG9lc24ndCBnb1xuICAgIC8vIG91dHNpZGUgdGhlIHJlZmVyZW5jZSBib3VuZHNcblxuICAgIHZhciBhcnJvd0VsZW1lbnQgPSBzdGF0ZS5lbGVtZW50cy5hcnJvdztcbiAgICB2YXIgYXJyb3dSZWN0ID0gdGV0aGVyICYmIGFycm93RWxlbWVudCA/IGdldExheW91dFJlY3QoYXJyb3dFbGVtZW50KSA6IHtcbiAgICAgIHdpZHRoOiAwLFxuICAgICAgaGVpZ2h0OiAwXG4gICAgfTtcbiAgICB2YXIgYXJyb3dQYWRkaW5nT2JqZWN0ID0gc3RhdGUubW9kaWZpZXJzRGF0YVsnYXJyb3cjcGVyc2lzdGVudCddID8gc3RhdGUubW9kaWZpZXJzRGF0YVsnYXJyb3cjcGVyc2lzdGVudCddLnBhZGRpbmcgOiBnZXRGcmVzaFNpZGVPYmplY3QoKTtcbiAgICB2YXIgYXJyb3dQYWRkaW5nTWluID0gYXJyb3dQYWRkaW5nT2JqZWN0W21haW5TaWRlXTtcbiAgICB2YXIgYXJyb3dQYWRkaW5nTWF4ID0gYXJyb3dQYWRkaW5nT2JqZWN0W2FsdFNpZGVdOyAvLyBJZiB0aGUgcmVmZXJlbmNlIGxlbmd0aCBpcyBzbWFsbGVyIHRoYW4gdGhlIGFycm93IGxlbmd0aCwgd2UgZG9uJ3Qgd2FudFxuICAgIC8vIHRvIGluY2x1ZGUgaXRzIGZ1bGwgc2l6ZSBpbiB0aGUgY2FsY3VsYXRpb24uIElmIHRoZSByZWZlcmVuY2UgaXMgc21hbGxcbiAgICAvLyBhbmQgbmVhciB0aGUgZWRnZSBvZiBhIGJvdW5kYXJ5LCB0aGUgcG9wcGVyIGNhbiBvdmVyZmxvdyBldmVuIGlmIHRoZVxuICAgIC8vIHJlZmVyZW5jZSBpcyBub3Qgb3ZlcmZsb3dpbmcgYXMgd2VsbCAoZS5nLiB2aXJ0dWFsIGVsZW1lbnRzIHdpdGggbm9cbiAgICAvLyB3aWR0aCBvciBoZWlnaHQpXG5cbiAgICB2YXIgYXJyb3dMZW4gPSB3aXRoaW4oMCwgcmVmZXJlbmNlUmVjdFtsZW5dLCBhcnJvd1JlY3RbbGVuXSk7XG4gICAgdmFyIG1pbk9mZnNldCA9IGlzQmFzZVBsYWNlbWVudCA/IHJlZmVyZW5jZVJlY3RbbGVuXSAvIDIgLSBhZGRpdGl2ZSAtIGFycm93TGVuIC0gYXJyb3dQYWRkaW5nTWluIC0gdGV0aGVyT2Zmc2V0VmFsdWUgOiBtaW5MZW4gLSBhcnJvd0xlbiAtIGFycm93UGFkZGluZ01pbiAtIHRldGhlck9mZnNldFZhbHVlO1xuICAgIHZhciBtYXhPZmZzZXQgPSBpc0Jhc2VQbGFjZW1lbnQgPyAtcmVmZXJlbmNlUmVjdFtsZW5dIC8gMiArIGFkZGl0aXZlICsgYXJyb3dMZW4gKyBhcnJvd1BhZGRpbmdNYXggKyB0ZXRoZXJPZmZzZXRWYWx1ZSA6IG1heExlbiArIGFycm93TGVuICsgYXJyb3dQYWRkaW5nTWF4ICsgdGV0aGVyT2Zmc2V0VmFsdWU7XG4gICAgdmFyIGFycm93T2Zmc2V0UGFyZW50ID0gc3RhdGUuZWxlbWVudHMuYXJyb3cgJiYgZ2V0T2Zmc2V0UGFyZW50KHN0YXRlLmVsZW1lbnRzLmFycm93KTtcbiAgICB2YXIgY2xpZW50T2Zmc2V0ID0gYXJyb3dPZmZzZXRQYXJlbnQgPyBtYWluQXhpcyA9PT0gJ3knID8gYXJyb3dPZmZzZXRQYXJlbnQuY2xpZW50VG9wIHx8IDAgOiBhcnJvd09mZnNldFBhcmVudC5jbGllbnRMZWZ0IHx8IDAgOiAwO1xuICAgIHZhciBvZmZzZXRNb2RpZmllclZhbHVlID0gc3RhdGUubW9kaWZpZXJzRGF0YS5vZmZzZXQgPyBzdGF0ZS5tb2RpZmllcnNEYXRhLm9mZnNldFtzdGF0ZS5wbGFjZW1lbnRdW21haW5BeGlzXSA6IDA7XG4gICAgdmFyIHRldGhlck1pbiA9IHBvcHBlck9mZnNldHNbbWFpbkF4aXNdICsgbWluT2Zmc2V0IC0gb2Zmc2V0TW9kaWZpZXJWYWx1ZSAtIGNsaWVudE9mZnNldDtcbiAgICB2YXIgdGV0aGVyTWF4ID0gcG9wcGVyT2Zmc2V0c1ttYWluQXhpc10gKyBtYXhPZmZzZXQgLSBvZmZzZXRNb2RpZmllclZhbHVlO1xuICAgIHZhciBwcmV2ZW50ZWRPZmZzZXQgPSB3aXRoaW4odGV0aGVyID8gTWF0aC5taW4obWluLCB0ZXRoZXJNaW4pIDogbWluLCBvZmZzZXQsIHRldGhlciA/IE1hdGgubWF4KG1heCwgdGV0aGVyTWF4KSA6IG1heCk7XG4gICAgcG9wcGVyT2Zmc2V0c1ttYWluQXhpc10gPSBwcmV2ZW50ZWRPZmZzZXQ7XG4gICAgZGF0YVttYWluQXhpc10gPSBwcmV2ZW50ZWRPZmZzZXQgLSBvZmZzZXQ7XG4gIH1cblxuICBpZiAoY2hlY2tBbHRBeGlzKSB7XG4gICAgdmFyIF9tYWluU2lkZSA9IG1haW5BeGlzID09PSAneCcgPyB0b3AgOiBsZWZ0O1xuXG4gICAgdmFyIF9hbHRTaWRlID0gbWFpbkF4aXMgPT09ICd4JyA/IGJvdHRvbSA6IHJpZ2h0O1xuXG4gICAgdmFyIF9vZmZzZXQgPSBwb3BwZXJPZmZzZXRzW2FsdEF4aXNdO1xuXG4gICAgdmFyIF9taW4gPSBfb2Zmc2V0ICsgb3ZlcmZsb3dbX21haW5TaWRlXTtcblxuICAgIHZhciBfbWF4ID0gX29mZnNldCAtIG92ZXJmbG93W19hbHRTaWRlXTtcblxuICAgIHZhciBfcHJldmVudGVkT2Zmc2V0ID0gd2l0aGluKF9taW4sIF9vZmZzZXQsIF9tYXgpO1xuXG4gICAgcG9wcGVyT2Zmc2V0c1thbHRBeGlzXSA9IF9wcmV2ZW50ZWRPZmZzZXQ7XG4gICAgZGF0YVthbHRBeGlzXSA9IF9wcmV2ZW50ZWRPZmZzZXQgLSBfb2Zmc2V0O1xuICB9XG5cbiAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXSA9IGRhdGE7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG52YXIgcHJldmVudE92ZXJmbG93JDEgPSB7XG4gIG5hbWU6ICdwcmV2ZW50T3ZlcmZsb3cnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ21haW4nLFxuICBmbjogcHJldmVudE92ZXJmbG93LFxuICByZXF1aXJlc0lmRXhpc3RzOiBbJ29mZnNldCddXG59O1xuXG5mdW5jdGlvbiBhcnJvdyhfcmVmKSB7XG4gIHZhciBfc3RhdGUkbW9kaWZpZXJzRGF0YSQ7XG5cbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIG5hbWUgPSBfcmVmLm5hbWU7XG4gIHZhciBhcnJvd0VsZW1lbnQgPSBzdGF0ZS5lbGVtZW50cy5hcnJvdztcbiAgdmFyIHBvcHBlck9mZnNldHMgPSBzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHM7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gZ2V0QmFzZVBsYWNlbWVudChzdGF0ZS5wbGFjZW1lbnQpO1xuICB2YXIgYXhpcyA9IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudChiYXNlUGxhY2VtZW50KTtcbiAgdmFyIGlzVmVydGljYWwgPSBbbGVmdCwgcmlnaHRdLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgPj0gMDtcbiAgdmFyIGxlbiA9IGlzVmVydGljYWwgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG5cbiAgaWYgKCFhcnJvd0VsZW1lbnQgfHwgIXBvcHBlck9mZnNldHMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgcGFkZGluZ09iamVjdCA9IHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZSArIFwiI3BlcnNpc3RlbnRcIl0ucGFkZGluZztcbiAgdmFyIGFycm93UmVjdCA9IGdldExheW91dFJlY3QoYXJyb3dFbGVtZW50KTtcbiAgdmFyIG1pblByb3AgPSBheGlzID09PSAneScgPyB0b3AgOiBsZWZ0O1xuICB2YXIgbWF4UHJvcCA9IGF4aXMgPT09ICd5JyA/IGJvdHRvbSA6IHJpZ2h0O1xuICB2YXIgZW5kRGlmZiA9IHN0YXRlLnJlY3RzLnJlZmVyZW5jZVtsZW5dICsgc3RhdGUucmVjdHMucmVmZXJlbmNlW2F4aXNdIC0gcG9wcGVyT2Zmc2V0c1theGlzXSAtIHN0YXRlLnJlY3RzLnBvcHBlcltsZW5dO1xuICB2YXIgc3RhcnREaWZmID0gcG9wcGVyT2Zmc2V0c1theGlzXSAtIHN0YXRlLnJlY3RzLnJlZmVyZW5jZVtheGlzXTtcbiAgdmFyIGFycm93T2Zmc2V0UGFyZW50ID0gZ2V0T2Zmc2V0UGFyZW50KGFycm93RWxlbWVudCk7XG4gIHZhciBjbGllbnRTaXplID0gYXJyb3dPZmZzZXRQYXJlbnQgPyBheGlzID09PSAneScgPyBhcnJvd09mZnNldFBhcmVudC5jbGllbnRIZWlnaHQgfHwgMCA6IGFycm93T2Zmc2V0UGFyZW50LmNsaWVudFdpZHRoIHx8IDAgOiAwO1xuICB2YXIgY2VudGVyVG9SZWZlcmVuY2UgPSBlbmREaWZmIC8gMiAtIHN0YXJ0RGlmZiAvIDI7IC8vIE1ha2Ugc3VyZSB0aGUgYXJyb3cgZG9lc24ndCBvdmVyZmxvdyB0aGUgcG9wcGVyIGlmIHRoZSBjZW50ZXIgcG9pbnQgaXNcbiAgLy8gb3V0c2lkZSBvZiB0aGUgcG9wcGVyIGJvdW5kc1xuXG4gIHZhciBtaW4gPSBwYWRkaW5nT2JqZWN0W21pblByb3BdO1xuICB2YXIgbWF4ID0gY2xpZW50U2l6ZSAtIGFycm93UmVjdFtsZW5dIC0gcGFkZGluZ09iamVjdFttYXhQcm9wXTtcbiAgdmFyIGNlbnRlciA9IGNsaWVudFNpemUgLyAyIC0gYXJyb3dSZWN0W2xlbl0gLyAyICsgY2VudGVyVG9SZWZlcmVuY2U7XG4gIHZhciBvZmZzZXQgPSB3aXRoaW4obWluLCBjZW50ZXIsIG1heCk7IC8vIFByZXZlbnRzIGJyZWFraW5nIHN5bnRheCBoaWdobGlnaHRpbmcuLi5cblxuICB2YXIgYXhpc1Byb3AgPSBheGlzO1xuICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdID0gKF9zdGF0ZSRtb2RpZmllcnNEYXRhJCA9IHt9LCBfc3RhdGUkbW9kaWZpZXJzRGF0YSRbYXhpc1Byb3BdID0gb2Zmc2V0LCBfc3RhdGUkbW9kaWZpZXJzRGF0YSQuY2VudGVyT2Zmc2V0ID0gb2Zmc2V0IC0gY2VudGVyLCBfc3RhdGUkbW9kaWZpZXJzRGF0YSQpO1xufVxuXG5mdW5jdGlvbiBlZmZlY3QkMihfcmVmMikge1xuICB2YXIgc3RhdGUgPSBfcmVmMi5zdGF0ZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmMi5vcHRpb25zLFxuICAgICAgbmFtZSA9IF9yZWYyLm5hbWU7XG4gIHZhciBfb3B0aW9ucyRlbGVtZW50ID0gb3B0aW9ucy5lbGVtZW50LFxuICAgICAgYXJyb3dFbGVtZW50ID0gX29wdGlvbnMkZWxlbWVudCA9PT0gdm9pZCAwID8gJ1tkYXRhLXBvcHBlci1hcnJvd10nIDogX29wdGlvbnMkZWxlbWVudCxcbiAgICAgIF9vcHRpb25zJHBhZGRpbmcgPSBvcHRpb25zLnBhZGRpbmcsXG4gICAgICBwYWRkaW5nID0gX29wdGlvbnMkcGFkZGluZyA9PT0gdm9pZCAwID8gMCA6IF9vcHRpb25zJHBhZGRpbmc7XG5cbiAgaWYgKGFycm93RWxlbWVudCA9PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9IC8vIENTUyBzZWxlY3RvclxuXG5cbiAgaWYgKHR5cGVvZiBhcnJvd0VsZW1lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgYXJyb3dFbGVtZW50ID0gc3RhdGUuZWxlbWVudHMucG9wcGVyLnF1ZXJ5U2VsZWN0b3IoYXJyb3dFbGVtZW50KTtcblxuICAgIGlmICghYXJyb3dFbGVtZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIGlmICghaXNIVE1MRWxlbWVudChhcnJvd0VsZW1lbnQpKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFsnUG9wcGVyOiBcImFycm93XCIgZWxlbWVudCBtdXN0IGJlIGFuIEhUTUxFbGVtZW50IChub3QgYW4gU1ZHRWxlbWVudCkuJywgJ1RvIHVzZSBhbiBTVkcgYXJyb3csIHdyYXAgaXQgaW4gYW4gSFRNTEVsZW1lbnQgdGhhdCB3aWxsIGJlIHVzZWQgYXMnLCAndGhlIGFycm93LiddLmpvaW4oJyAnKSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFjb250YWlucyhzdGF0ZS5lbGVtZW50cy5wb3BwZXIsIGFycm93RWxlbWVudCkpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFsnUG9wcGVyOiBcImFycm93XCIgbW9kaWZpZXJcXCdzIGBlbGVtZW50YCBtdXN0IGJlIGEgY2hpbGQgb2YgdGhlIHBvcHBlcicsICdlbGVtZW50LiddLmpvaW4oJyAnKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3RhdGUuZWxlbWVudHMuYXJyb3cgPSBhcnJvd0VsZW1lbnQ7XG4gIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZSArIFwiI3BlcnNpc3RlbnRcIl0gPSB7XG4gICAgcGFkZGluZzogbWVyZ2VQYWRkaW5nT2JqZWN0KHR5cGVvZiBwYWRkaW5nICE9PSAnbnVtYmVyJyA/IHBhZGRpbmcgOiBleHBhbmRUb0hhc2hNYXAocGFkZGluZywgYmFzZVBsYWNlbWVudHMpKVxuICB9O1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxudmFyIGFycm93JDEgPSB7XG4gIG5hbWU6ICdhcnJvdycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnbWFpbicsXG4gIGZuOiBhcnJvdyxcbiAgZWZmZWN0OiBlZmZlY3QkMixcbiAgcmVxdWlyZXM6IFsncG9wcGVyT2Zmc2V0cyddLFxuICByZXF1aXJlc0lmRXhpc3RzOiBbJ3ByZXZlbnRPdmVyZmxvdyddXG59O1xuXG5mdW5jdGlvbiBnZXRTaWRlT2Zmc2V0cyhvdmVyZmxvdywgcmVjdCwgcHJldmVudGVkT2Zmc2V0cykge1xuICBpZiAocHJldmVudGVkT2Zmc2V0cyA9PT0gdm9pZCAwKSB7XG4gICAgcHJldmVudGVkT2Zmc2V0cyA9IHtcbiAgICAgIHg6IDAsXG4gICAgICB5OiAwXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdG9wOiBvdmVyZmxvdy50b3AgLSByZWN0LmhlaWdodCAtIHByZXZlbnRlZE9mZnNldHMueSxcbiAgICByaWdodDogb3ZlcmZsb3cucmlnaHQgLSByZWN0LndpZHRoICsgcHJldmVudGVkT2Zmc2V0cy54LFxuICAgIGJvdHRvbTogb3ZlcmZsb3cuYm90dG9tIC0gcmVjdC5oZWlnaHQgKyBwcmV2ZW50ZWRPZmZzZXRzLnksXG4gICAgbGVmdDogb3ZlcmZsb3cubGVmdCAtIHJlY3Qud2lkdGggLSBwcmV2ZW50ZWRPZmZzZXRzLnhcbiAgfTtcbn1cblxuZnVuY3Rpb24gaXNBbnlTaWRlRnVsbHlDbGlwcGVkKG92ZXJmbG93KSB7XG4gIHJldHVybiBbdG9wLCByaWdodCwgYm90dG9tLCBsZWZ0XS5zb21lKGZ1bmN0aW9uIChzaWRlKSB7XG4gICAgcmV0dXJuIG92ZXJmbG93W3NpZGVdID49IDA7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBoaWRlKF9yZWYpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIG5hbWUgPSBfcmVmLm5hbWU7XG4gIHZhciByZWZlcmVuY2VSZWN0ID0gc3RhdGUucmVjdHMucmVmZXJlbmNlO1xuICB2YXIgcG9wcGVyUmVjdCA9IHN0YXRlLnJlY3RzLnBvcHBlcjtcbiAgdmFyIHByZXZlbnRlZE9mZnNldHMgPSBzdGF0ZS5tb2RpZmllcnNEYXRhLnByZXZlbnRPdmVyZmxvdztcbiAgdmFyIHJlZmVyZW5jZU92ZXJmbG93ID0gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIHtcbiAgICBlbGVtZW50Q29udGV4dDogJ3JlZmVyZW5jZSdcbiAgfSk7XG4gIHZhciBwb3BwZXJBbHRPdmVyZmxvdyA9IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgYWx0Qm91bmRhcnk6IHRydWVcbiAgfSk7XG4gIHZhciByZWZlcmVuY2VDbGlwcGluZ09mZnNldHMgPSBnZXRTaWRlT2Zmc2V0cyhyZWZlcmVuY2VPdmVyZmxvdywgcmVmZXJlbmNlUmVjdCk7XG4gIHZhciBwb3BwZXJFc2NhcGVPZmZzZXRzID0gZ2V0U2lkZU9mZnNldHMocG9wcGVyQWx0T3ZlcmZsb3csIHBvcHBlclJlY3QsIHByZXZlbnRlZE9mZnNldHMpO1xuICB2YXIgaXNSZWZlcmVuY2VIaWRkZW4gPSBpc0FueVNpZGVGdWxseUNsaXBwZWQocmVmZXJlbmNlQ2xpcHBpbmdPZmZzZXRzKTtcbiAgdmFyIGhhc1BvcHBlckVzY2FwZWQgPSBpc0FueVNpZGVGdWxseUNsaXBwZWQocG9wcGVyRXNjYXBlT2Zmc2V0cyk7XG4gIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0gPSB7XG4gICAgcmVmZXJlbmNlQ2xpcHBpbmdPZmZzZXRzOiByZWZlcmVuY2VDbGlwcGluZ09mZnNldHMsXG4gICAgcG9wcGVyRXNjYXBlT2Zmc2V0czogcG9wcGVyRXNjYXBlT2Zmc2V0cyxcbiAgICBpc1JlZmVyZW5jZUhpZGRlbjogaXNSZWZlcmVuY2VIaWRkZW4sXG4gICAgaGFzUG9wcGVyRXNjYXBlZDogaGFzUG9wcGVyRXNjYXBlZFxuICB9O1xuICBzdGF0ZS5hdHRyaWJ1dGVzLnBvcHBlciA9IE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLmF0dHJpYnV0ZXMucG9wcGVyLCB7XG4gICAgJ2RhdGEtcG9wcGVyLXJlZmVyZW5jZS1oaWRkZW4nOiBpc1JlZmVyZW5jZUhpZGRlbixcbiAgICAnZGF0YS1wb3BwZXItZXNjYXBlZCc6IGhhc1BvcHBlckVzY2FwZWRcbiAgfSk7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG52YXIgaGlkZSQxID0ge1xuICBuYW1lOiAnaGlkZScsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnbWFpbicsXG4gIHJlcXVpcmVzSWZFeGlzdHM6IFsncHJldmVudE92ZXJmbG93J10sXG4gIGZuOiBoaWRlXG59O1xuXG52YXIgZGVmYXVsdE1vZGlmaWVycyA9IFtldmVudExpc3RlbmVycywgcG9wcGVyT2Zmc2V0cyQxLCBjb21wdXRlU3R5bGVzJDEsIGFwcGx5U3R5bGVzJDEsIG9mZnNldCQxLCBmbGlwJDEsIHByZXZlbnRPdmVyZmxvdyQxLCBhcnJvdyQxLCBoaWRlJDFdO1xudmFyIGNyZWF0ZVBvcHBlciA9IC8qI19fUFVSRV9fKi9wb3BwZXJHZW5lcmF0b3Ioe1xuICBkZWZhdWx0TW9kaWZpZXJzOiBkZWZhdWx0TW9kaWZpZXJzXG59KTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5leHBvcnRzLmNyZWF0ZVBvcHBlciA9IGNyZWF0ZVBvcHBlcjtcbmV4cG9ydHMuZGVmYXVsdE1vZGlmaWVycyA9IGRlZmF1bHRNb2RpZmllcnM7XG5leHBvcnRzLmRldGVjdE92ZXJmbG93ID0gZGV0ZWN0T3ZlcmZsb3c7XG5leHBvcnRzLnBvcHBlckdlbmVyYXRvciA9IHBvcHBlckdlbmVyYXRvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBvcHBlci5qcy5tYXBcbiIsIid1c2Ugc3RyaWN0J1xuXG5leHBvcnRzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5leHBvcnRzLnRvQnl0ZUFycmF5ID0gdG9CeXRlQXJyYXlcbmV4cG9ydHMuZnJvbUJ5dGVBcnJheSA9IGZyb21CeXRlQXJyYXlcblxudmFyIGxvb2t1cCA9IFtdXG52YXIgcmV2TG9va3VwID0gW11cbnZhciBBcnIgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OEFycmF5IDogQXJyYXlcblxudmFyIGNvZGUgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLydcbmZvciAodmFyIGkgPSAwLCBsZW4gPSBjb2RlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gIGxvb2t1cFtpXSA9IGNvZGVbaV1cbiAgcmV2TG9va3VwW2NvZGUuY2hhckNvZGVBdChpKV0gPSBpXG59XG5cbi8vIFN1cHBvcnQgZGVjb2RpbmcgVVJMLXNhZmUgYmFzZTY0IHN0cmluZ3MsIGFzIE5vZGUuanMgZG9lcy5cbi8vIFNlZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmFzZTY0I1VSTF9hcHBsaWNhdGlvbnNcbnJldkxvb2t1cFsnLScuY2hhckNvZGVBdCgwKV0gPSA2MlxucmV2TG9va3VwWydfJy5jaGFyQ29kZUF0KDApXSA9IDYzXG5cbmZ1bmN0aW9uIGdldExlbnMgKGI2NCkge1xuICB2YXIgbGVuID0gYjY0Lmxlbmd0aFxuXG4gIGlmIChsZW4gJSA0ID4gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNCcpXG4gIH1cblxuICAvLyBUcmltIG9mZiBleHRyYSBieXRlcyBhZnRlciBwbGFjZWhvbGRlciBieXRlcyBhcmUgZm91bmRcbiAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vYmVhdGdhbW1pdC9iYXNlNjQtanMvaXNzdWVzLzQyXG4gIHZhciB2YWxpZExlbiA9IGI2NC5pbmRleE9mKCc9JylcbiAgaWYgKHZhbGlkTGVuID09PSAtMSkgdmFsaWRMZW4gPSBsZW5cblxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gdmFsaWRMZW4gPT09IGxlblxuICAgID8gMFxuICAgIDogNCAtICh2YWxpZExlbiAlIDQpXG5cbiAgcmV0dXJuIFt2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuXVxufVxuXG4vLyBiYXNlNjQgaXMgNC8zICsgdXAgdG8gdHdvIGNoYXJhY3RlcnMgb2YgdGhlIG9yaWdpbmFsIGRhdGFcbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKGI2NCkge1xuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiBfYnl0ZUxlbmd0aCAoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSB7XG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiB0b0J5dGVBcnJheSAoYjY0KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuXG4gIHZhciBhcnIgPSBuZXcgQXJyKF9ieXRlTGVuZ3RoKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikpXG5cbiAgdmFyIGN1ckJ5dGUgPSAwXG5cbiAgLy8gaWYgdGhlcmUgYXJlIHBsYWNlaG9sZGVycywgb25seSBnZXQgdXAgdG8gdGhlIGxhc3QgY29tcGxldGUgNCBjaGFyc1xuICB2YXIgbGVuID0gcGxhY2VIb2xkZXJzTGVuID4gMFxuICAgID8gdmFsaWRMZW4gLSA0XG4gICAgOiB2YWxpZExlblxuXG4gIHZhciBpXG4gIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxOCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDEyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPDwgNikgfFxuICAgICAgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAzKV1cbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gMTYpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDIpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldID4+IDQpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAxKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDEwKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgNCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildID4+IDIpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkge1xuICByZXR1cm4gbG9va3VwW251bSA+PiAxOCAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDEyICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gNiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtICYgMHgzRl1cbn1cblxuZnVuY3Rpb24gZW5jb2RlQ2h1bmsgKHVpbnQ4LCBzdGFydCwgZW5kKSB7XG4gIHZhciB0bXBcbiAgdmFyIG91dHB1dCA9IFtdXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSAzKSB7XG4gICAgdG1wID1cbiAgICAgICgodWludDhbaV0gPDwgMTYpICYgMHhGRjAwMDApICtcbiAgICAgICgodWludDhbaSArIDFdIDw8IDgpICYgMHhGRjAwKSArXG4gICAgICAodWludDhbaSArIDJdICYgMHhGRilcbiAgICBvdXRwdXQucHVzaCh0cmlwbGV0VG9CYXNlNjQodG1wKSlcbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIGZyb21CeXRlQXJyYXkgKHVpbnQ4KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbiA9IHVpbnQ4Lmxlbmd0aFxuICB2YXIgZXh0cmFCeXRlcyA9IGxlbiAlIDMgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXNcbiAgdmFyIHBhcnRzID0gW11cbiAgdmFyIG1heENodW5rTGVuZ3RoID0gMTYzODMgLy8gbXVzdCBiZSBtdWx0aXBsZSBvZiAzXG5cbiAgLy8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlclxuICBmb3IgKHZhciBpID0gMCwgbGVuMiA9IGxlbiAtIGV4dHJhQnl0ZXM7IGkgPCBsZW4yOyBpICs9IG1heENodW5rTGVuZ3RoKSB7XG4gICAgcGFydHMucHVzaChlbmNvZGVDaHVuayhcbiAgICAgIHVpbnQ4LCBpLCAoaSArIG1heENodW5rTGVuZ3RoKSA+IGxlbjIgPyBsZW4yIDogKGkgKyBtYXhDaHVua0xlbmd0aClcbiAgICApKVxuICB9XG5cbiAgLy8gcGFkIHRoZSBlbmQgd2l0aCB6ZXJvcywgYnV0IG1ha2Ugc3VyZSB0byBub3QgZm9yZ2V0IHRoZSBleHRyYSBieXRlc1xuICBpZiAoZXh0cmFCeXRlcyA9PT0gMSkge1xuICAgIHRtcCA9IHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgNCkgJiAweDNGXSArXG4gICAgICAnPT0nXG4gICAgKVxuICB9IGVsc2UgaWYgKGV4dHJhQnl0ZXMgPT09IDIpIHtcbiAgICB0bXAgPSAodWludDhbbGVuIC0gMl0gPDwgOCkgKyB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDEwXSArXG4gICAgICBsb29rdXBbKHRtcCA+PiA0KSAmIDB4M0ZdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDIpICYgMHgzRl0gK1xuICAgICAgJz0nXG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIHBhcnRzLmpvaW4oJycpXG59XG4iLCIvKiFcbiAqIFRoZSBidWZmZXIgbW9kdWxlIGZyb20gbm9kZS5qcywgZm9yIHRoZSBicm93c2VyLlxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG5cbid1c2Ugc3RyaWN0J1xuXG52YXIgYmFzZTY0ID0gcmVxdWlyZSgnYmFzZTY0LWpzJylcbnZhciBpZWVlNzU0ID0gcmVxdWlyZSgnaWVlZTc1NCcpXG52YXIgY3VzdG9tSW5zcGVjdFN5bWJvbCA9XG4gICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2wuZm9yID09PSAnZnVuY3Rpb24nKVxuICAgID8gU3ltYm9sLmZvcignbm9kZWpzLnV0aWwuaW5zcGVjdC5jdXN0b20nKVxuICAgIDogbnVsbFxuXG5leHBvcnRzLkJ1ZmZlciA9IEJ1ZmZlclxuZXhwb3J0cy5TbG93QnVmZmVyID0gU2xvd0J1ZmZlclxuZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFUyA9IDUwXG5cbnZhciBLX01BWF9MRU5HVEggPSAweDdmZmZmZmZmXG5leHBvcnRzLmtNYXhMZW5ndGggPSBLX01BWF9MRU5HVEhcblxuLyoqXG4gKiBJZiBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgOlxuICogICA9PT0gdHJ1ZSAgICBVc2UgVWludDhBcnJheSBpbXBsZW1lbnRhdGlvbiAoZmFzdGVzdClcbiAqICAgPT09IGZhbHNlICAgUHJpbnQgd2FybmluZyBhbmQgcmVjb21tZW5kIHVzaW5nIGBidWZmZXJgIHY0Lnggd2hpY2ggaGFzIGFuIE9iamVjdFxuICogICAgICAgICAgICAgICBpbXBsZW1lbnRhdGlvbiAobW9zdCBjb21wYXRpYmxlLCBldmVuIElFNilcbiAqXG4gKiBCcm93c2VycyB0aGF0IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGFyZSBJRSAxMCssIEZpcmVmb3ggNCssIENocm9tZSA3KywgU2FmYXJpIDUuMSssXG4gKiBPcGVyYSAxMS42KywgaU9TIDQuMisuXG4gKlxuICogV2UgcmVwb3J0IHRoYXQgdGhlIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCB0eXBlZCBhcnJheXMgaWYgdGhlIGFyZSBub3Qgc3ViY2xhc3NhYmxlXG4gKiB1c2luZyBfX3Byb3RvX18uIEZpcmVmb3ggNC0yOSBsYWNrcyBzdXBwb3J0IGZvciBhZGRpbmcgbmV3IHByb3BlcnRpZXMgdG8gYFVpbnQ4QXJyYXlgXG4gKiAoU2VlOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02OTU0MzgpLiBJRSAxMCBsYWNrcyBzdXBwb3J0XG4gKiBmb3IgX19wcm90b19fIGFuZCBoYXMgYSBidWdneSB0eXBlZCBhcnJheSBpbXBsZW1lbnRhdGlvbi5cbiAqL1xuQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSB0eXBlZEFycmF5U3VwcG9ydCgpXG5cbmlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIGNvbnNvbGUuZXJyb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgY29uc29sZS5lcnJvcihcbiAgICAnVGhpcyBicm93c2VyIGxhY2tzIHR5cGVkIGFycmF5IChVaW50OEFycmF5KSBzdXBwb3J0IHdoaWNoIGlzIHJlcXVpcmVkIGJ5ICcgK1xuICAgICdgYnVmZmVyYCB2NS54LiBVc2UgYGJ1ZmZlcmAgdjQueCBpZiB5b3UgcmVxdWlyZSBvbGQgYnJvd3NlciBzdXBwb3J0LidcbiAgKVxufVxuXG5mdW5jdGlvbiB0eXBlZEFycmF5U3VwcG9ydCAoKSB7XG4gIC8vIENhbiB0eXBlZCBhcnJheSBpbnN0YW5jZXMgY2FuIGJlIGF1Z21lbnRlZD9cbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gbmV3IFVpbnQ4QXJyYXkoMSlcbiAgICB2YXIgcHJvdG8gPSB7IGZvbzogZnVuY3Rpb24gKCkgeyByZXR1cm4gNDIgfSB9XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHByb3RvLCBVaW50OEFycmF5LnByb3RvdHlwZSlcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoYXJyLCBwcm90bylcbiAgICByZXR1cm4gYXJyLmZvbygpID09PSA0MlxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlci5wcm90b3R5cGUsICdwYXJlbnQnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKHRoaXMpKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgcmV0dXJuIHRoaXMuYnVmZmVyXG4gIH1cbn0pXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIucHJvdG90eXBlLCAnb2Zmc2V0Jywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0aGlzKSkgcmV0dXJuIHVuZGVmaW5lZFxuICAgIHJldHVybiB0aGlzLmJ5dGVPZmZzZXRcbiAgfVxufSlcblxuZnVuY3Rpb24gY3JlYXRlQnVmZmVyIChsZW5ndGgpIHtcbiAgaWYgKGxlbmd0aCA+IEtfTUFYX0xFTkdUSCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgXCInICsgbGVuZ3RoICsgJ1wiIGlzIGludmFsaWQgZm9yIG9wdGlvbiBcInNpemVcIicpXG4gIH1cbiAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2VcbiAgdmFyIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGJ1ZiwgQnVmZmVyLnByb3RvdHlwZSlcbiAgcmV0dXJuIGJ1ZlxufVxuXG4vKipcbiAqIFRoZSBCdWZmZXIgY29uc3RydWN0b3IgcmV0dXJucyBpbnN0YW5jZXMgb2YgYFVpbnQ4QXJyYXlgIHRoYXQgaGF2ZSB0aGVpclxuICogcHJvdG90eXBlIGNoYW5nZWQgdG8gYEJ1ZmZlci5wcm90b3R5cGVgLiBGdXJ0aGVybW9yZSwgYEJ1ZmZlcmAgaXMgYSBzdWJjbGFzcyBvZlxuICogYFVpbnQ4QXJyYXlgLCBzbyB0aGUgcmV0dXJuZWQgaW5zdGFuY2VzIHdpbGwgaGF2ZSBhbGwgdGhlIG5vZGUgYEJ1ZmZlcmAgbWV0aG9kc1xuICogYW5kIHRoZSBgVWludDhBcnJheWAgbWV0aG9kcy4gU3F1YXJlIGJyYWNrZXQgbm90YXRpb24gd29ya3MgYXMgZXhwZWN0ZWQgLS0gaXRcbiAqIHJldHVybnMgYSBzaW5nbGUgb2N0ZXQuXG4gKlxuICogVGhlIGBVaW50OEFycmF5YCBwcm90b3R5cGUgcmVtYWlucyB1bm1vZGlmaWVkLlxuICovXG5cbmZ1bmN0aW9uIEJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgLy8gQ29tbW9uIGNhc2UuXG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmdPck9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICdUaGUgXCJzdHJpbmdcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgc3RyaW5nLiBSZWNlaXZlZCB0eXBlIG51bWJlcidcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIGFsbG9jVW5zYWZlKGFyZylcbiAgfVxuICByZXR1cm4gZnJvbShhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnBvb2xTaXplID0gODE5MiAvLyBub3QgdXNlZCBieSB0aGlzIGltcGxlbWVudGF0aW9uXG5cbmZ1bmN0aW9uIGZyb20gKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZnJvbVN0cmluZyh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldClcbiAgfVxuXG4gIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheUxpa2UodmFsdWUpXG4gIH1cblxuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAnVGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgJyArXG4gICAgICAnb3IgQXJyYXktbGlrZSBPYmplY3QuIFJlY2VpdmVkIHR5cGUgJyArICh0eXBlb2YgdmFsdWUpXG4gICAgKVxuICB9XG5cbiAgaWYgKGlzSW5zdGFuY2UodmFsdWUsIEFycmF5QnVmZmVyKSB8fFxuICAgICAgKHZhbHVlICYmIGlzSW5zdGFuY2UodmFsdWUuYnVmZmVyLCBBcnJheUJ1ZmZlcikpKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcih2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBTaGFyZWRBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgIChpc0luc3RhbmNlKHZhbHVlLCBTaGFyZWRBcnJheUJ1ZmZlcikgfHxcbiAgICAgICh2YWx1ZSAmJiBpc0luc3RhbmNlKHZhbHVlLmJ1ZmZlciwgU2hhcmVkQXJyYXlCdWZmZXIpKSkpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAnVGhlIFwidmFsdWVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBvZiB0eXBlIG51bWJlci4gUmVjZWl2ZWQgdHlwZSBudW1iZXInXG4gICAgKVxuICB9XG5cbiAgdmFyIHZhbHVlT2YgPSB2YWx1ZS52YWx1ZU9mICYmIHZhbHVlLnZhbHVlT2YoKVxuICBpZiAodmFsdWVPZiAhPSBudWxsICYmIHZhbHVlT2YgIT09IHZhbHVlKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHZhbHVlT2YsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIHZhciBiID0gZnJvbU9iamVjdCh2YWx1ZSlcbiAgaWYgKGIpIHJldHVybiBiXG5cbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1ByaW1pdGl2ZSAhPSBudWxsICYmXG4gICAgICB0eXBlb2YgdmFsdWVbU3ltYm9sLnRvUHJpbWl0aXZlXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbShcbiAgICAgIHZhbHVlW1N5bWJvbC50b1ByaW1pdGl2ZV0oJ3N0cmluZycpLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGhcbiAgICApXG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICdUaGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBvbmUgb2YgdHlwZSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCAnICtcbiAgICAnb3IgQXJyYXktbGlrZSBPYmplY3QuIFJlY2VpdmVkIHR5cGUgJyArICh0eXBlb2YgdmFsdWUpXG4gIClcbn1cblxuLyoqXG4gKiBGdW5jdGlvbmFsbHkgZXF1aXZhbGVudCB0byBCdWZmZXIoYXJnLCBlbmNvZGluZykgYnV0IHRocm93cyBhIFR5cGVFcnJvclxuICogaWYgdmFsdWUgaXMgYSBudW1iZXIuXG4gKiBCdWZmZXIuZnJvbShzdHJbLCBlbmNvZGluZ10pXG4gKiBCdWZmZXIuZnJvbShhcnJheSlcbiAqIEJ1ZmZlci5mcm9tKGJ1ZmZlcilcbiAqIEJ1ZmZlci5mcm9tKGFycmF5QnVmZmVyWywgYnl0ZU9mZnNldFssIGxlbmd0aF1dKVxuICoqL1xuQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gZnJvbSh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG4vLyBOb3RlOiBDaGFuZ2UgcHJvdG90eXBlICphZnRlciogQnVmZmVyLmZyb20gaXMgZGVmaW5lZCB0byB3b3JrYXJvdW5kIENocm9tZSBidWc6XG4vLyBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9wdWxsLzE0OFxuT2JqZWN0LnNldFByb3RvdHlwZU9mKEJ1ZmZlci5wcm90b3R5cGUsIFVpbnQ4QXJyYXkucHJvdG90eXBlKVxuT2JqZWN0LnNldFByb3RvdHlwZU9mKEJ1ZmZlciwgVWludDhBcnJheSlcblxuZnVuY3Rpb24gYXNzZXJ0U2l6ZSAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIG51bWJlcicpXG4gIH0gZWxzZSBpZiAoc2l6ZSA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIFwiJyArIHNpemUgKyAnXCIgaXMgaW52YWxpZCBmb3Igb3B0aW9uIFwic2l6ZVwiJylcbiAgfVxufVxuXG5mdW5jdGlvbiBhbGxvYyAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICBpZiAoc2l6ZSA8PSAwKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcihzaXplKVxuICB9XG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPbmx5IHBheSBhdHRlbnRpb24gdG8gZW5jb2RpbmcgaWYgaXQncyBhIHN0cmluZy4gVGhpc1xuICAgIC8vIHByZXZlbnRzIGFjY2lkZW50YWxseSBzZW5kaW5nIGluIGEgbnVtYmVyIHRoYXQgd291bGRcbiAgICAvLyBiZSBpbnRlcnByZXR0ZWQgYXMgYSBzdGFydCBvZmZzZXQuXG4gICAgcmV0dXJuIHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZydcbiAgICAgID8gY3JlYXRlQnVmZmVyKHNpemUpLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgICA6IGNyZWF0ZUJ1ZmZlcihzaXplKS5maWxsKGZpbGwpXG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcihzaXplKVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqIGFsbG9jKHNpemVbLCBmaWxsWywgZW5jb2RpbmddXSlcbiAqKi9cbkJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICByZXR1cm4gYWxsb2Moc2l6ZSwgZmlsbCwgZW5jb2RpbmcpXG59XG5cbmZ1bmN0aW9uIGFsbG9jVW5zYWZlIChzaXplKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcihzaXplIDwgMCA/IDAgOiBjaGVja2VkKHNpemUpIHwgMClcbn1cblxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIEJ1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShzaXplKVxufVxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIFNsb3dCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShzaXplKVxufVxuXG5mdW5jdGlvbiBmcm9tU3RyaW5nIChzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnIHx8IGVuY29kaW5nID09PSAnJykge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gIH1cblxuICBpZiAoIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMFxuICB2YXIgYnVmID0gY3JlYXRlQnVmZmVyKGxlbmd0aClcblxuICB2YXIgYWN0dWFsID0gYnVmLndyaXRlKHN0cmluZywgZW5jb2RpbmcpXG5cbiAgaWYgKGFjdHVhbCAhPT0gbGVuZ3RoKSB7XG4gICAgLy8gV3JpdGluZyBhIGhleCBzdHJpbmcsIGZvciBleGFtcGxlLCB0aGF0IGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyB3aWxsXG4gICAgLy8gY2F1c2UgZXZlcnl0aGluZyBhZnRlciB0aGUgZmlyc3QgaW52YWxpZCBjaGFyYWN0ZXIgdG8gYmUgaWdub3JlZC4gKGUuZy5cbiAgICAvLyAnYWJ4eGNkJyB3aWxsIGJlIHRyZWF0ZWQgYXMgJ2FiJylcbiAgICBidWYgPSBidWYuc2xpY2UoMCwgYWN0dWFsKVxuICB9XG5cbiAgcmV0dXJuIGJ1ZlxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlMaWtlIChhcnJheSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoIDwgMCA/IDAgOiBjaGVja2VkKGFycmF5Lmxlbmd0aCkgfCAwXG4gIHZhciBidWYgPSBjcmVhdGVCdWZmZXIobGVuZ3RoKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgYnVmW2ldID0gYXJyYXlbaV0gJiAyNTVcbiAgfVxuICByZXR1cm4gYnVmXG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlciAoYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJvZmZzZXRcIiBpcyBvdXRzaWRlIG9mIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0ICsgKGxlbmd0aCB8fCAwKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcImxlbmd0aFwiIGlzIG91dHNpZGUgb2YgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICB2YXIgYnVmXG4gIGlmIChieXRlT2Zmc2V0ID09PSB1bmRlZmluZWQgJiYgbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBidWYgPSBuZXcgVWludDhBcnJheShhcnJheSlcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0KVxuICB9IGVsc2Uge1xuICAgIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZVxuICBPYmplY3Quc2V0UHJvdG90eXBlT2YoYnVmLCBCdWZmZXIucHJvdG90eXBlKVxuXG4gIHJldHVybiBidWZcbn1cblxuZnVuY3Rpb24gZnJvbU9iamVjdCAob2JqKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIob2JqKSkge1xuICAgIHZhciBsZW4gPSBjaGVja2VkKG9iai5sZW5ndGgpIHwgMFxuICAgIHZhciBidWYgPSBjcmVhdGVCdWZmZXIobGVuKVxuXG4gICAgaWYgKGJ1Zi5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBidWZcbiAgICB9XG5cbiAgICBvYmouY29weShidWYsIDAsIDAsIGxlbilcbiAgICByZXR1cm4gYnVmXG4gIH1cblxuICBpZiAob2JqLmxlbmd0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKHR5cGVvZiBvYmoubGVuZ3RoICE9PSAnbnVtYmVyJyB8fCBudW1iZXJJc05hTihvYmoubGVuZ3RoKSkge1xuICAgICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcigwKVxuICAgIH1cbiAgICByZXR1cm4gZnJvbUFycmF5TGlrZShvYmopXG4gIH1cblxuICBpZiAob2JqLnR5cGUgPT09ICdCdWZmZXInICYmIEFycmF5LmlzQXJyYXkob2JqLmRhdGEpKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheUxpa2Uob2JqLmRhdGEpXG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tlZCAobGVuZ3RoKSB7XG4gIC8vIE5vdGU6IGNhbm5vdCB1c2UgYGxlbmd0aCA8IEtfTUFYX0xFTkdUSGAgaGVyZSBiZWNhdXNlIHRoYXQgZmFpbHMgd2hlblxuICAvLyBsZW5ndGggaXMgTmFOICh3aGljaCBpcyBvdGhlcndpc2UgY29lcmNlZCB0byB6ZXJvLilcbiAgaWYgKGxlbmd0aCA+PSBLX01BWF9MRU5HVEgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byBhbGxvY2F0ZSBCdWZmZXIgbGFyZ2VyIHRoYW4gbWF4aW11bSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAnc2l6ZTogMHgnICsgS19NQVhfTEVOR1RILnRvU3RyaW5nKDE2KSArICcgYnl0ZXMnKVxuICB9XG4gIHJldHVybiBsZW5ndGggfCAwXG59XG5cbmZ1bmN0aW9uIFNsb3dCdWZmZXIgKGxlbmd0aCkge1xuICBpZiAoK2xlbmd0aCAhPSBsZW5ndGgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcbiAgICBsZW5ndGggPSAwXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlci5hbGxvYygrbGVuZ3RoKVxufVxuXG5CdWZmZXIuaXNCdWZmZXIgPSBmdW5jdGlvbiBpc0J1ZmZlciAoYikge1xuICByZXR1cm4gYiAhPSBudWxsICYmIGIuX2lzQnVmZmVyID09PSB0cnVlICYmXG4gICAgYiAhPT0gQnVmZmVyLnByb3RvdHlwZSAvLyBzbyBCdWZmZXIuaXNCdWZmZXIoQnVmZmVyLnByb3RvdHlwZSkgd2lsbCBiZSBmYWxzZVxufVxuXG5CdWZmZXIuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKGEsIGIpIHtcbiAgaWYgKGlzSW5zdGFuY2UoYSwgVWludDhBcnJheSkpIGEgPSBCdWZmZXIuZnJvbShhLCBhLm9mZnNldCwgYS5ieXRlTGVuZ3RoKVxuICBpZiAoaXNJbnN0YW5jZShiLCBVaW50OEFycmF5KSkgYiA9IEJ1ZmZlci5mcm9tKGIsIGIub2Zmc2V0LCBiLmJ5dGVMZW5ndGgpXG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGEpIHx8ICFCdWZmZXIuaXNCdWZmZXIoYikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ1RoZSBcImJ1ZjFcIiwgXCJidWYyXCIgYXJndW1lbnRzIG11c3QgYmUgb25lIG9mIHR5cGUgQnVmZmVyIG9yIFVpbnQ4QXJyYXknXG4gICAgKVxuICB9XG5cbiAgaWYgKGEgPT09IGIpIHJldHVybiAwXG5cbiAgdmFyIHggPSBhLmxlbmd0aFxuICB2YXIgeSA9IGIubGVuZ3RoXG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgeCA9IGFbaV1cbiAgICAgIHkgPSBiW2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuQnVmZmVyLmlzRW5jb2RpbmcgPSBmdW5jdGlvbiBpc0VuY29kaW5nIChlbmNvZGluZykge1xuICBzd2l0Y2ggKFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2hleCc6XG4gICAgY2FzZSAndXRmOCc6XG4gICAgY2FzZSAndXRmLTgnOlxuICAgIGNhc2UgJ2FzY2lpJzpcbiAgICBjYXNlICdsYXRpbjEnOlxuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICBjYXNlICd1Y3MyJzpcbiAgICBjYXNlICd1Y3MtMic6XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgcmV0dXJuIHRydWVcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuQnVmZmVyLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdCAobGlzdCwgbGVuZ3RoKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShsaXN0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gIH1cblxuICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gQnVmZmVyLmFsbG9jKDApXG4gIH1cblxuICB2YXIgaVxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBsZW5ndGggPSAwXG4gICAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICAgIGxlbmd0aCArPSBsaXN0W2ldLmxlbmd0aFxuICAgIH1cbiAgfVxuXG4gIHZhciBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuZ3RoKVxuICB2YXIgcG9zID0gMFxuICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgIHZhciBidWYgPSBsaXN0W2ldXG4gICAgaWYgKGlzSW5zdGFuY2UoYnVmLCBVaW50OEFycmF5KSkge1xuICAgICAgYnVmID0gQnVmZmVyLmZyb20oYnVmKVxuICAgIH1cbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICAgIH1cbiAgICBidWYuY29weShidWZmZXIsIHBvcylcbiAgICBwb3MgKz0gYnVmLmxlbmd0aFxuICB9XG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHN0cmluZykpIHtcbiAgICByZXR1cm4gc3RyaW5nLmxlbmd0aFxuICB9XG4gIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBpc0luc3RhbmNlKHN0cmluZywgQXJyYXlCdWZmZXIpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5ieXRlTGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICdUaGUgXCJzdHJpbmdcIiBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIHN0cmluZywgQnVmZmVyLCBvciBBcnJheUJ1ZmZlci4gJyArXG4gICAgICAnUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIHN0cmluZ1xuICAgIClcbiAgfVxuXG4gIHZhciBsZW4gPSBzdHJpbmcubGVuZ3RoXG4gIHZhciBtdXN0TWF0Y2ggPSAoYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdID09PSB0cnVlKVxuICBpZiAoIW11c3RNYXRjaCAmJiBsZW4gPT09IDApIHJldHVybiAwXG5cbiAgLy8gVXNlIGEgZm9yIGxvb3AgdG8gYXZvaWQgcmVjdXJzaW9uXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxlblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIGxlbiAqIDJcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBsZW4gPj4+IDFcbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHtcbiAgICAgICAgICByZXR1cm4gbXVzdE1hdGNoID8gLTEgOiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aCAvLyBhc3N1bWUgdXRmOFxuICAgICAgICB9XG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5CdWZmZXIuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcblxuZnVuY3Rpb24gc2xvd1RvU3RyaW5nIChlbmNvZGluZywgc3RhcnQsIGVuZCkge1xuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuXG4gIC8vIE5vIG5lZWQgdG8gdmVyaWZ5IHRoYXQgXCJ0aGlzLmxlbmd0aCA8PSBNQVhfVUlOVDMyXCIgc2luY2UgaXQncyBhIHJlYWQtb25seVxuICAvLyBwcm9wZXJ0eSBvZiBhIHR5cGVkIGFycmF5LlxuXG4gIC8vIFRoaXMgYmVoYXZlcyBuZWl0aGVyIGxpa2UgU3RyaW5nIG5vciBVaW50OEFycmF5IGluIHRoYXQgd2Ugc2V0IHN0YXJ0L2VuZFxuICAvLyB0byB0aGVpciB1cHBlci9sb3dlciBib3VuZHMgaWYgdGhlIHZhbHVlIHBhc3NlZCBpcyBvdXQgb2YgcmFuZ2UuXG4gIC8vIHVuZGVmaW5lZCBpcyBoYW5kbGVkIHNwZWNpYWxseSBhcyBwZXIgRUNNQS0yNjIgNnRoIEVkaXRpb24sXG4gIC8vIFNlY3Rpb24gMTMuMy4zLjcgUnVudGltZSBTZW1hbnRpY3M6IEtleWVkQmluZGluZ0luaXRpYWxpemF0aW9uLlxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCB8fCBzdGFydCA8IDApIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICAvLyBSZXR1cm4gZWFybHkgaWYgc3RhcnQgPiB0aGlzLmxlbmd0aC4gRG9uZSBoZXJlIHRvIHByZXZlbnQgcG90ZW50aWFsIHVpbnQzMlxuICAvLyBjb2VyY2lvbiBmYWlsIGJlbG93LlxuICBpZiAoc3RhcnQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChlbmQgPD0gMCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgLy8gRm9yY2UgY29lcnNpb24gdG8gdWludDMyLiBUaGlzIHdpbGwgYWxzbyBjb2VyY2UgZmFsc2V5L05hTiB2YWx1ZXMgdG8gMC5cbiAgZW5kID4+Pj0gMFxuICBzdGFydCA+Pj49IDBcblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHV0ZjE2bGVTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuLy8gVGhpcyBwcm9wZXJ0eSBpcyB1c2VkIGJ5IGBCdWZmZXIuaXNCdWZmZXJgIChhbmQgdGhlIGBpcy1idWZmZXJgIG5wbSBwYWNrYWdlKVxuLy8gdG8gZGV0ZWN0IGEgQnVmZmVyIGluc3RhbmNlLiBJdCdzIG5vdCBwb3NzaWJsZSB0byB1c2UgYGluc3RhbmNlb2YgQnVmZmVyYFxuLy8gcmVsaWFibHkgaW4gYSBicm93c2VyaWZ5IGNvbnRleHQgYmVjYXVzZSB0aGVyZSBjb3VsZCBiZSBtdWx0aXBsZSBkaWZmZXJlbnRcbi8vIGNvcGllcyBvZiB0aGUgJ2J1ZmZlcicgcGFja2FnZSBpbiB1c2UuIFRoaXMgbWV0aG9kIHdvcmtzIGV2ZW4gZm9yIEJ1ZmZlclxuLy8gaW5zdGFuY2VzIHRoYXQgd2VyZSBjcmVhdGVkIGZyb20gYW5vdGhlciBjb3B5IG9mIHRoZSBgYnVmZmVyYCBwYWNrYWdlLlxuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9pc3N1ZXMvMTU0XG5CdWZmZXIucHJvdG90eXBlLl9pc0J1ZmZlciA9IHRydWVcblxuZnVuY3Rpb24gc3dhcCAoYiwgbiwgbSkge1xuICB2YXIgaSA9IGJbbl1cbiAgYltuXSA9IGJbbV1cbiAgYlttXSA9IGlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMTYgPSBmdW5jdGlvbiBzd2FwMTYgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDIgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDE2LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDIpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAxKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDMyID0gZnVuY3Rpb24gc3dhcDMyICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA0ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAzMi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgMilcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXA2NCA9IGZ1bmN0aW9uIHN3YXA2NCAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgOCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNjQtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gOCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDcpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDYpXG4gICAgc3dhcCh0aGlzLCBpICsgMiwgaSArIDUpXG4gICAgc3dhcCh0aGlzLCBpICsgMywgaSArIDQpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW5ndGggPT09IDApIHJldHVybiAnJ1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCAwLCBsZW5ndGgpXG4gIHJldHVybiBzbG93VG9TdHJpbmcuYXBwbHkodGhpcywgYXJndW1lbnRzKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvTG9jYWxlU3RyaW5nID0gQnVmZmVyLnByb3RvdHlwZS50b1N0cmluZ1xuXG5CdWZmZXIucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyAoYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIGlmICh0aGlzID09PSBiKSByZXR1cm4gdHJ1ZVxuICByZXR1cm4gQnVmZmVyLmNvbXBhcmUodGhpcywgYikgPT09IDBcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gIHZhciBzdHIgPSAnJ1xuICB2YXIgbWF4ID0gZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFU1xuICBzdHIgPSB0aGlzLnRvU3RyaW5nKCdoZXgnLCAwLCBtYXgpLnJlcGxhY2UoLyguezJ9KS9nLCAnJDEgJykudHJpbSgpXG4gIGlmICh0aGlzLmxlbmd0aCA+IG1heCkgc3RyICs9ICcgLi4uICdcbiAgcmV0dXJuICc8QnVmZmVyICcgKyBzdHIgKyAnPidcbn1cbmlmIChjdXN0b21JbnNwZWN0U3ltYm9sKSB7XG4gIEJ1ZmZlci5wcm90b3R5cGVbY3VzdG9tSW5zcGVjdFN5bWJvbF0gPSBCdWZmZXIucHJvdG90eXBlLmluc3BlY3Rcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAodGFyZ2V0LCBzdGFydCwgZW5kLCB0aGlzU3RhcnQsIHRoaXNFbmQpIHtcbiAgaWYgKGlzSW5zdGFuY2UodGFyZ2V0LCBVaW50OEFycmF5KSkge1xuICAgIHRhcmdldCA9IEJ1ZmZlci5mcm9tKHRhcmdldCwgdGFyZ2V0Lm9mZnNldCwgdGFyZ2V0LmJ5dGVMZW5ndGgpXG4gIH1cbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAnVGhlIFwidGFyZ2V0XCIgYXJndW1lbnQgbXVzdCBiZSBvbmUgb2YgdHlwZSBCdWZmZXIgb3IgVWludDhBcnJheS4gJyArXG4gICAgICAnUmVjZWl2ZWQgdHlwZSAnICsgKHR5cGVvZiB0YXJnZXQpXG4gICAgKVxuICB9XG5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmQgPSB0YXJnZXQgPyB0YXJnZXQubGVuZ3RoIDogMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNTdGFydCA9IDBcbiAgfVxuICBpZiAodGhpc0VuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc0VuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoc3RhcnQgPCAwIHx8IGVuZCA+IHRhcmdldC5sZW5ndGggfHwgdGhpc1N0YXJ0IDwgMCB8fCB0aGlzRW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCAmJiBzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCkge1xuICAgIHJldHVybiAtMVxuICB9XG4gIGlmIChzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMVxuICB9XG5cbiAgc3RhcnQgPj4+PSAwXG4gIGVuZCA+Pj49IDBcbiAgdGhpc1N0YXJ0ID4+Pj0gMFxuICB0aGlzRW5kID4+Pj0gMFxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQpIHJldHVybiAwXG5cbiAgdmFyIHggPSB0aGlzRW5kIC0gdGhpc1N0YXJ0XG4gIHZhciB5ID0gZW5kIC0gc3RhcnRcbiAgdmFyIGxlbiA9IE1hdGgubWluKHgsIHkpXG5cbiAgdmFyIHRoaXNDb3B5ID0gdGhpcy5zbGljZSh0aGlzU3RhcnQsIHRoaXNFbmQpXG4gIHZhciB0YXJnZXRDb3B5ID0gdGFyZ2V0LnNsaWNlKHN0YXJ0LCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIGlmICh0aGlzQ29weVtpXSAhPT0gdGFyZ2V0Q29weVtpXSkge1xuICAgICAgeCA9IHRoaXNDb3B5W2ldXG4gICAgICB5ID0gdGFyZ2V0Q29weVtpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbi8vIEZpbmRzIGVpdGhlciB0aGUgZmlyc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0ID49IGBieXRlT2Zmc2V0YCxcbi8vIE9SIHRoZSBsYXN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA8PSBgYnl0ZU9mZnNldGAuXG4vL1xuLy8gQXJndW1lbnRzOlxuLy8gLSBidWZmZXIgLSBhIEJ1ZmZlciB0byBzZWFyY2hcbi8vIC0gdmFsIC0gYSBzdHJpbmcsIEJ1ZmZlciwgb3IgbnVtYmVyXG4vLyAtIGJ5dGVPZmZzZXQgLSBhbiBpbmRleCBpbnRvIGBidWZmZXJgOyB3aWxsIGJlIGNsYW1wZWQgdG8gYW4gaW50MzJcbi8vIC0gZW5jb2RpbmcgLSBhbiBvcHRpb25hbCBlbmNvZGluZywgcmVsZXZhbnQgaXMgdmFsIGlzIGEgc3RyaW5nXG4vLyAtIGRpciAtIHRydWUgZm9yIGluZGV4T2YsIGZhbHNlIGZvciBsYXN0SW5kZXhPZlxuZnVuY3Rpb24gYmlkaXJlY3Rpb25hbEluZGV4T2YgKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIC8vIEVtcHR5IGJ1ZmZlciBtZWFucyBubyBtYXRjaFxuICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIC0xXG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXRcbiAgaWYgKHR5cGVvZiBieXRlT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gYnl0ZU9mZnNldFxuICAgIGJ5dGVPZmZzZXQgPSAwXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA+IDB4N2ZmZmZmZmYpIHtcbiAgICBieXRlT2Zmc2V0ID0gMHg3ZmZmZmZmZlxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAtMHg4MDAwMDAwMCkge1xuICAgIGJ5dGVPZmZzZXQgPSAtMHg4MDAwMDAwMFxuICB9XG4gIGJ5dGVPZmZzZXQgPSArYnl0ZU9mZnNldCAvLyBDb2VyY2UgdG8gTnVtYmVyLlxuICBpZiAobnVtYmVySXNOYU4oYnl0ZU9mZnNldCkpIHtcbiAgICAvLyBieXRlT2Zmc2V0OiBpdCBpdCdzIHVuZGVmaW5lZCwgbnVsbCwgTmFOLCBcImZvb1wiLCBldGMsIHNlYXJjaCB3aG9sZSBidWZmZXJcbiAgICBieXRlT2Zmc2V0ID0gZGlyID8gMCA6IChidWZmZXIubGVuZ3RoIC0gMSlcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0OiBuZWdhdGl2ZSBvZmZzZXRzIHN0YXJ0IGZyb20gdGhlIGVuZCBvZiB0aGUgYnVmZmVyXG4gIGlmIChieXRlT2Zmc2V0IDwgMCkgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggKyBieXRlT2Zmc2V0XG4gIGlmIChieXRlT2Zmc2V0ID49IGJ1ZmZlci5sZW5ndGgpIHtcbiAgICBpZiAoZGlyKSByZXR1cm4gLTFcbiAgICBlbHNlIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoIC0gMVxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAwKSB7XG4gICAgaWYgKGRpcikgYnl0ZU9mZnNldCA9IDBcbiAgICBlbHNlIHJldHVybiAtMVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIHZhbFxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YWwgPSBCdWZmZXIuZnJvbSh2YWwsIGVuY29kaW5nKVxuICB9XG5cbiAgLy8gRmluYWxseSwgc2VhcmNoIGVpdGhlciBpbmRleE9mIChpZiBkaXIgaXMgdHJ1ZSkgb3IgbGFzdEluZGV4T2ZcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcih2YWwpKSB7XG4gICAgLy8gU3BlY2lhbCBjYXNlOiBsb29raW5nIGZvciBlbXB0eSBzdHJpbmcvYnVmZmVyIGFsd2F5cyBmYWlsc1xuICAgIGlmICh2YWwubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gLTFcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDB4RkYgLy8gU2VhcmNoIGZvciBhIGJ5dGUgdmFsdWUgWzAtMjU1XVxuICAgIGlmICh0eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKGRpcikge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCBbdmFsXSwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbCBtdXN0IGJlIHN0cmluZywgbnVtYmVyIG9yIEJ1ZmZlcicpXG59XG5cbmZ1bmN0aW9uIGFycmF5SW5kZXhPZiAoYXJyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgdmFyIGluZGV4U2l6ZSA9IDFcbiAgdmFyIGFyckxlbmd0aCA9IGFyci5sZW5ndGhcbiAgdmFyIHZhbExlbmd0aCA9IHZhbC5sZW5ndGhcblxuICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgaWYgKGVuY29kaW5nID09PSAndWNzMicgfHwgZW5jb2RpbmcgPT09ICd1Y3MtMicgfHxcbiAgICAgICAgZW5jb2RpbmcgPT09ICd1dGYxNmxlJyB8fCBlbmNvZGluZyA9PT0gJ3V0Zi0xNmxlJykge1xuICAgICAgaWYgKGFyci5sZW5ndGggPCAyIHx8IHZhbC5sZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiAtMVxuICAgICAgfVxuICAgICAgaW5kZXhTaXplID0gMlxuICAgICAgYXJyTGVuZ3RoIC89IDJcbiAgICAgIHZhbExlbmd0aCAvPSAyXG4gICAgICBieXRlT2Zmc2V0IC89IDJcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFkIChidWYsIGkpIHtcbiAgICBpZiAoaW5kZXhTaXplID09PSAxKSB7XG4gICAgICByZXR1cm4gYnVmW2ldXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBidWYucmVhZFVJbnQxNkJFKGkgKiBpbmRleFNpemUpXG4gICAgfVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGRpcikge1xuICAgIHZhciBmb3VuZEluZGV4ID0gLTFcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpIDwgYXJyTGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChyZWFkKGFyciwgaSkgPT09IHJlYWQodmFsLCBmb3VuZEluZGV4ID09PSAtMSA/IDAgOiBpIC0gZm91bmRJbmRleCkpIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggPT09IC0xKSBmb3VuZEluZGV4ID0gaVxuICAgICAgICBpZiAoaSAtIGZvdW5kSW5kZXggKyAxID09PSB2YWxMZW5ndGgpIHJldHVybiBmb3VuZEluZGV4ICogaW5kZXhTaXplXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZm91bmRJbmRleCAhPT0gLTEpIGkgLT0gaSAtIGZvdW5kSW5kZXhcbiAgICAgICAgZm91bmRJbmRleCA9IC0xXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChieXRlT2Zmc2V0ICsgdmFsTGVuZ3RoID4gYXJyTGVuZ3RoKSBieXRlT2Zmc2V0ID0gYXJyTGVuZ3RoIC0gdmFsTGVuZ3RoXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBmb3VuZCA9IHRydWVcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsTGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKHJlYWQoYXJyLCBpICsgaikgIT09IHJlYWQodmFsLCBqKSkge1xuICAgICAgICAgIGZvdW5kID0gZmFsc2VcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZm91bmQpIHJldHVybiBpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5jbHVkZXMgPSBmdW5jdGlvbiBpbmNsdWRlcyAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gdGhpcy5pbmRleE9mKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpICE9PSAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCB0cnVlKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24gbGFzdEluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGZhbHNlKVxufVxuXG5mdW5jdGlvbiBoZXhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIG9mZnNldCA9IE51bWJlcihvZmZzZXQpIHx8IDBcbiAgdmFyIHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKVxuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICAgIH1cbiAgfVxuXG4gIHZhciBzdHJMZW4gPSBzdHJpbmcubGVuZ3RoXG5cbiAgaWYgKGxlbmd0aCA+IHN0ckxlbiAvIDIpIHtcbiAgICBsZW5ndGggPSBzdHJMZW4gLyAyXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIHZhciBwYXJzZWQgPSBwYXJzZUludChzdHJpbmcuc3Vic3RyKGkgKiAyLCAyKSwgMTYpXG4gICAgaWYgKG51bWJlcklzTmFOKHBhcnNlZCkpIHJldHVybiBpXG4gICAgYnVmW29mZnNldCArIGldID0gcGFyc2VkXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gdXRmOFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmOFRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYXNjaWlXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGFzY2lpVG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBsYXRpbjFXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBhc2NpaVdyaXRlKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYmFzZTY0V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihiYXNlNjRUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIHVjczJXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjE2bGVUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiB3cml0ZSAoc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCwgZW5jb2RpbmcpIHtcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZylcbiAgaWYgKG9mZnNldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgZW5jb2RpbmcpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIG9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IG9mZnNldFxuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBvZmZzZXRbLCBsZW5ndGhdWywgZW5jb2RpbmddKVxuICB9IGVsc2UgaWYgKGlzRmluaXRlKG9mZnNldCkpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgICBpZiAoaXNGaW5pdGUobGVuZ3RoKSkge1xuICAgICAgbGVuZ3RoID0gbGVuZ3RoID4+PiAwXG4gICAgICBpZiAoZW5jb2RpbmcgPT09IHVuZGVmaW5lZCkgZW5jb2RpbmcgPSAndXRmOCdcbiAgICB9IGVsc2Uge1xuICAgICAgZW5jb2RpbmcgPSBsZW5ndGhcbiAgICAgIGxlbmd0aCA9IHVuZGVmaW5lZFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnQnVmZmVyLndyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldFssIGxlbmd0aF0pIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQnXG4gICAgKVxuICB9XG5cbiAgdmFyIHJlbWFpbmluZyA9IHRoaXMubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCB8fCBsZW5ndGggPiByZW1haW5pbmcpIGxlbmd0aCA9IHJlbWFpbmluZ1xuXG4gIGlmICgoc3RyaW5nLmxlbmd0aCA+IDAgJiYgKGxlbmd0aCA8IDAgfHwgb2Zmc2V0IDwgMCkpIHx8IG9mZnNldCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gd3JpdGUgb3V0c2lkZSBidWZmZXIgYm91bmRzJylcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgLy8gV2FybmluZzogbWF4TGVuZ3RoIG5vdCB0YWtlbiBpbnRvIGFjY291bnQgaW4gYmFzZTY0V3JpdGVcbiAgICAgICAgcmV0dXJuIGJhc2U2NFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1Y3MyV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnQnVmZmVyJyxcbiAgICBkYXRhOiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLl9hcnIgfHwgdGhpcywgMClcbiAgfVxufVxuXG5mdW5jdGlvbiBiYXNlNjRTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGlmIChzdGFydCA9PT0gMCAmJiBlbmQgPT09IGJ1Zi5sZW5ndGgpIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYuc2xpY2Uoc3RhcnQsIGVuZCkpXG4gIH1cbn1cblxuZnVuY3Rpb24gdXRmOFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuICB2YXIgcmVzID0gW11cblxuICB2YXIgaSA9IHN0YXJ0XG4gIHdoaWxlIChpIDwgZW5kKSB7XG4gICAgdmFyIGZpcnN0Qnl0ZSA9IGJ1ZltpXVxuICAgIHZhciBjb2RlUG9pbnQgPSBudWxsXG4gICAgdmFyIGJ5dGVzUGVyU2VxdWVuY2UgPSAoZmlyc3RCeXRlID4gMHhFRikgPyA0XG4gICAgICA6IChmaXJzdEJ5dGUgPiAweERGKSA/IDNcbiAgICAgICAgOiAoZmlyc3RCeXRlID4gMHhCRikgPyAyXG4gICAgICAgICAgOiAxXG5cbiAgICBpZiAoaSArIGJ5dGVzUGVyU2VxdWVuY2UgPD0gZW5kKSB7XG4gICAgICB2YXIgc2Vjb25kQnl0ZSwgdGhpcmRCeXRlLCBmb3VydGhCeXRlLCB0ZW1wQ29kZVBvaW50XG5cbiAgICAgIHN3aXRjaCAoYnl0ZXNQZXJTZXF1ZW5jZSkge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgaWYgKGZpcnN0Qnl0ZSA8IDB4ODApIHtcbiAgICAgICAgICAgIGNvZGVQb2ludCA9IGZpcnN0Qnl0ZVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweDFGKSA8PCAweDYgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0YpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHhDIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAodGhpcmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3RkYgJiYgKHRlbXBDb2RlUG9pbnQgPCAweEQ4MDAgfHwgdGVtcENvZGVQb2ludCA+IDB4REZGRikpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgZm91cnRoQnl0ZSA9IGJ1ZltpICsgM11cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKGZvdXJ0aEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4MTIgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4QyB8ICh0aGlyZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAoZm91cnRoQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4RkZGRiAmJiB0ZW1wQ29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY29kZVBvaW50ID09PSBudWxsKSB7XG4gICAgICAvLyB3ZSBkaWQgbm90IGdlbmVyYXRlIGEgdmFsaWQgY29kZVBvaW50IHNvIGluc2VydCBhXG4gICAgICAvLyByZXBsYWNlbWVudCBjaGFyIChVK0ZGRkQpIGFuZCBhZHZhbmNlIG9ubHkgMSBieXRlXG4gICAgICBjb2RlUG9pbnQgPSAweEZGRkRcbiAgICAgIGJ5dGVzUGVyU2VxdWVuY2UgPSAxXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPiAweEZGRkYpIHtcbiAgICAgIC8vIGVuY29kZSB0byB1dGYxNiAoc3Vycm9nYXRlIHBhaXIgZGFuY2UpXG4gICAgICBjb2RlUG9pbnQgLT0gMHgxMDAwMFxuICAgICAgcmVzLnB1c2goY29kZVBvaW50ID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKVxuICAgICAgY29kZVBvaW50ID0gMHhEQzAwIHwgY29kZVBvaW50ICYgMHgzRkZcbiAgICB9XG5cbiAgICByZXMucHVzaChjb2RlUG9pbnQpXG4gICAgaSArPSBieXRlc1BlclNlcXVlbmNlXG4gIH1cblxuICByZXR1cm4gZGVjb2RlQ29kZVBvaW50c0FycmF5KHJlcylcbn1cblxuLy8gQmFzZWQgb24gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjI3NDcyNzIvNjgwNzQyLCB0aGUgYnJvd3NlciB3aXRoXG4vLyB0aGUgbG93ZXN0IGxpbWl0IGlzIENocm9tZSwgd2l0aCAweDEwMDAwIGFyZ3MuXG4vLyBXZSBnbyAxIG1hZ25pdHVkZSBsZXNzLCBmb3Igc2FmZXR5XG52YXIgTUFYX0FSR1VNRU5UU19MRU5HVEggPSAweDEwMDBcblxuZnVuY3Rpb24gZGVjb2RlQ29kZVBvaW50c0FycmF5IChjb2RlUG9pbnRzKSB7XG4gIHZhciBsZW4gPSBjb2RlUG9pbnRzLmxlbmd0aFxuICBpZiAobGVuIDw9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjb2RlUG9pbnRzKSAvLyBhdm9pZCBleHRyYSBzbGljZSgpXG4gIH1cblxuICAvLyBEZWNvZGUgaW4gY2h1bmtzIHRvIGF2b2lkIFwiY2FsbCBzdGFjayBzaXplIGV4Y2VlZGVkXCIuXG4gIHZhciByZXMgPSAnJ1xuICB2YXIgaSA9IDBcbiAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShcbiAgICAgIFN0cmluZyxcbiAgICAgIGNvZGVQb2ludHMuc2xpY2UoaSwgaSArPSBNQVhfQVJHVU1FTlRTX0xFTkdUSClcbiAgICApXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSAmIDB4N0YpXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBsYXRpbjFTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0pXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBoZXhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSBidWYubGVuZ3RoXG5cbiAgaWYgKCFzdGFydCB8fCBzdGFydCA8IDApIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCB8fCBlbmQgPCAwIHx8IGVuZCA+IGxlbikgZW5kID0gbGVuXG5cbiAgdmFyIG91dCA9ICcnXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgb3V0ICs9IGhleFNsaWNlTG9va3VwVGFibGVbYnVmW2ldXVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGJ5dGVzID0gYnVmLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHZhciByZXMgPSAnJ1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0gKyAoYnl0ZXNbaSArIDFdICogMjU2KSlcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiBzbGljZSAoc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgc3RhcnQgPSB+fnN0YXJ0XG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogfn5lbmRcblxuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgKz0gbGVuXG4gICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIH0gZWxzZSBpZiAoc3RhcnQgPiBsZW4pIHtcbiAgICBzdGFydCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IDApIHtcbiAgICBlbmQgKz0gbGVuXG4gICAgaWYgKGVuZCA8IDApIGVuZCA9IDBcbiAgfSBlbHNlIGlmIChlbmQgPiBsZW4pIHtcbiAgICBlbmQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICB2YXIgbmV3QnVmID0gdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKVxuICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZVxuICBPYmplY3Quc2V0UHJvdG90eXBlT2YobmV3QnVmLCBCdWZmZXIucHJvdG90eXBlKVxuXG4gIHJldHVybiBuZXdCdWZcbn1cblxuLypcbiAqIE5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgYnVmZmVyIGlzbid0IHRyeWluZyB0byB3cml0ZSBvdXQgb2YgYm91bmRzLlxuICovXG5mdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkge1xuICBpZiAoKG9mZnNldCAlIDEpICE9PSAwIHx8IG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgaXMgbm90IHVpbnQnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gbGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50QkUgPSBmdW5jdGlvbiByZWFkVUludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcbiAgfVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF1cbiAgdmFyIG11bCA9IDFcbiAgd2hpbGUgKGJ5dGVMZW5ndGggPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50OCA9IGZ1bmN0aW9uIHJlYWRVSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkJFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCA4KSB8IHRoaXNbb2Zmc2V0ICsgMV1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyTEUgPSBmdW5jdGlvbiByZWFkVUludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICgodGhpc1tvZmZzZXRdKSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikpICtcbiAgICAgICh0aGlzW29mZnNldCArIDNdICogMHgxMDAwMDAwKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSAqIDB4MTAwMDAwMCkgK1xuICAgICgodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICB0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRMRSA9IGZ1bmN0aW9uIHJlYWRJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50QkUgPSBmdW5jdGlvbiByZWFkSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoXG4gIHZhciBtdWwgPSAxXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0taV1cbiAgd2hpbGUgKGkgPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiByZWFkSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgaWYgKCEodGhpc1tvZmZzZXRdICYgMHg4MCkpIHJldHVybiAodGhpc1tvZmZzZXRdKVxuICByZXR1cm4gKCgweGZmIC0gdGhpc1tvZmZzZXRdICsgMSkgKiAtMSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkJFID0gZnVuY3Rpb24gcmVhZEludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgKHRoaXNbb2Zmc2V0XSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDNdIDw8IDI0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkJFID0gZnVuY3Rpb24gcmVhZEludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgMjQpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRMRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdExFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiByZWFkRmxvYXRCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlTEUgPSBmdW5jdGlvbiByZWFkRG91YmxlTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCA1MiwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlQkUgPSBmdW5jdGlvbiByZWFkRG91YmxlQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgNTIsIDgpXG59XG5cbmZ1bmN0aW9uIGNoZWNrSW50IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZmZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJylcbiAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IGlzIG91dCBvZiBib3VuZHMnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludEJFID0gZnVuY3Rpb24gd3JpdGVVSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVVSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4ZmYsIDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgKDggKiBieXRlTGVuZ3RoKSAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gMFxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgLSAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50QkUgPSBmdW5jdGlvbiB3cml0ZUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsICg4ICogYnl0ZUxlbmd0aCkgLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpICsgMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDggPSBmdW5jdGlvbiB3cml0ZUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweDdmLCAtMHg4MClcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmICsgdmFsdWUgKyAxXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5mdW5jdGlvbiBjaGVja0lFRUU3NTQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG4gIGlmIChvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuZnVuY3Rpb24gd3JpdGVGbG9hdCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gd3JpdGVGbG9hdExFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gd3JpdGVEb3VibGUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDgsIDEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4LCAtMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgNTIsIDgpXG4gIHJldHVybiBvZmZzZXQgKyA4XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVMRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUJFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuLy8gY29weSh0YXJnZXRCdWZmZXIsIHRhcmdldFN0YXJ0PTAsIHNvdXJjZVN0YXJ0PTAsIHNvdXJjZUVuZD1idWZmZXIubGVuZ3RoKVxuQnVmZmVyLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAodGFyZ2V0LCB0YXJnZXRTdGFydCwgc3RhcnQsIGVuZCkge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0YXJnZXQpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdhcmd1bWVudCBzaG91bGQgYmUgYSBCdWZmZXInKVxuICBpZiAoIXN0YXJ0KSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgJiYgZW5kICE9PSAwKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0U3RhcnQgPj0gdGFyZ2V0Lmxlbmd0aCkgdGFyZ2V0U3RhcnQgPSB0YXJnZXQubGVuZ3RoXG4gIGlmICghdGFyZ2V0U3RhcnQpIHRhcmdldFN0YXJ0ID0gMFxuICBpZiAoZW5kID4gMCAmJiBlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICAvLyBDb3B5IDAgYnl0ZXM7IHdlJ3JlIGRvbmVcbiAgaWYgKGVuZCA9PT0gc3RhcnQpIHJldHVybiAwXG4gIGlmICh0YXJnZXQubGVuZ3RoID09PSAwIHx8IHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIEZhdGFsIGVycm9yIGNvbmRpdGlvbnNcbiAgaWYgKHRhcmdldFN0YXJ0IDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd0YXJnZXRTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgfVxuICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ID49IHRoaXMubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbiAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0IDwgZW5kIC0gc3RhcnQpIHtcbiAgICBlbmQgPSB0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgKyBzdGFydFxuICB9XG5cbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0XG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCAmJiB0eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIFVzZSBidWlsdC1pbiB3aGVuIGF2YWlsYWJsZSwgbWlzc2luZyBmcm9tIElFMTFcbiAgICB0aGlzLmNvcHlXaXRoaW4odGFyZ2V0U3RhcnQsIHN0YXJ0LCBlbmQpXG4gIH0gZWxzZSBpZiAodGhpcyA9PT0gdGFyZ2V0ICYmIHN0YXJ0IDwgdGFyZ2V0U3RhcnQgJiYgdGFyZ2V0U3RhcnQgPCBlbmQpIHtcbiAgICAvLyBkZXNjZW5kaW5nIGNvcHkgZnJvbSBlbmRcbiAgICBmb3IgKHZhciBpID0gbGVuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKFxuICAgICAgdGFyZ2V0LFxuICAgICAgdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKSxcbiAgICAgIHRhcmdldFN0YXJ0XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIGxlblxufVxuXG4vLyBVc2FnZTpcbi8vICAgIGJ1ZmZlci5maWxsKG51bWJlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoYnVmZmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChzdHJpbmdbLCBvZmZzZXRbLCBlbmRdXVssIGVuY29kaW5nXSlcbkJ1ZmZlci5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uIGZpbGwgKHZhbCwgc3RhcnQsIGVuZCwgZW5jb2RpbmcpIHtcbiAgLy8gSGFuZGxlIHN0cmluZyBjYXNlczpcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKHR5cGVvZiBzdGFydCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gc3RhcnRcbiAgICAgIHN0YXJ0ID0gMFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbmQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IGVuZFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9XG4gICAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZW5jb2RpbmcgbXVzdCBiZSBhIHN0cmluZycpXG4gICAgfVxuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnICYmICFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICB9XG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZhciBjb2RlID0gdmFsLmNoYXJDb2RlQXQoMClcbiAgICAgIGlmICgoZW5jb2RpbmcgPT09ICd1dGY4JyAmJiBjb2RlIDwgMTI4KSB8fFxuICAgICAgICAgIGVuY29kaW5nID09PSAnbGF0aW4xJykge1xuICAgICAgICAvLyBGYXN0IHBhdGg6IElmIGB2YWxgIGZpdHMgaW50byBhIHNpbmdsZSBieXRlLCB1c2UgdGhhdCBudW1lcmljIHZhbHVlLlxuICAgICAgICB2YWwgPSBjb2RlXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMjU1XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgdmFsID0gTnVtYmVyKHZhbClcbiAgfVxuXG4gIC8vIEludmFsaWQgcmFuZ2VzIGFyZSBub3Qgc2V0IHRvIGEgZGVmYXVsdCwgc28gY2FuIHJhbmdlIGNoZWNrIGVhcmx5LlxuICBpZiAoc3RhcnQgPCAwIHx8IHRoaXMubGVuZ3RoIDwgc3RhcnQgfHwgdGhpcy5sZW5ndGggPCBlbmQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignT3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgc3RhcnQgPSBzdGFydCA+Pj4gMFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IHRoaXMubGVuZ3RoIDogZW5kID4+PiAwXG5cbiAgaWYgKCF2YWwpIHZhbCA9IDBcblxuICB2YXIgaVxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgICB0aGlzW2ldID0gdmFsXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBieXRlcyA9IEJ1ZmZlci5pc0J1ZmZlcih2YWwpXG4gICAgICA/IHZhbFxuICAgICAgOiBCdWZmZXIuZnJvbSh2YWwsIGVuY29kaW5nKVxuICAgIHZhciBsZW4gPSBieXRlcy5sZW5ndGhcbiAgICBpZiAobGVuID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgdmFsdWUgXCInICsgdmFsICtcbiAgICAgICAgJ1wiIGlzIGludmFsaWQgZm9yIGFyZ3VtZW50IFwidmFsdWVcIicpXG4gICAgfVxuICAgIGZvciAoaSA9IDA7IGkgPCBlbmQgLSBzdGFydDsgKytpKSB7XG4gICAgICB0aGlzW2kgKyBzdGFydF0gPSBieXRlc1tpICUgbGVuXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8vIEhFTFBFUiBGVU5DVElPTlNcbi8vID09PT09PT09PT09PT09PT1cblxudmFyIElOVkFMSURfQkFTRTY0X1JFID0gL1teKy8wLTlBLVphLXotX10vZ1xuXG5mdW5jdGlvbiBiYXNlNjRjbGVhbiAoc3RyKSB7XG4gIC8vIE5vZGUgdGFrZXMgZXF1YWwgc2lnbnMgYXMgZW5kIG9mIHRoZSBCYXNlNjQgZW5jb2RpbmdcbiAgc3RyID0gc3RyLnNwbGl0KCc9JylbMF1cbiAgLy8gTm9kZSBzdHJpcHMgb3V0IGludmFsaWQgY2hhcmFjdGVycyBsaWtlIFxcbiBhbmQgXFx0IGZyb20gdGhlIHN0cmluZywgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHN0ciA9IHN0ci50cmltKCkucmVwbGFjZShJTlZBTElEX0JBU0U2NF9SRSwgJycpXG4gIC8vIE5vZGUgY29udmVydHMgc3RyaW5ncyB3aXRoIGxlbmd0aCA8IDIgdG8gJydcbiAgaWYgKHN0ci5sZW5ndGggPCAyKSByZXR1cm4gJydcbiAgLy8gTm9kZSBhbGxvd3MgZm9yIG5vbi1wYWRkZWQgYmFzZTY0IHN0cmluZ3MgKG1pc3NpbmcgdHJhaWxpbmcgPT09KSwgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHdoaWxlIChzdHIubGVuZ3RoICUgNCAhPT0gMCkge1xuICAgIHN0ciA9IHN0ciArICc9J1xuICB9XG4gIHJldHVybiBzdHJcbn1cblxuZnVuY3Rpb24gdXRmOFRvQnl0ZXMgKHN0cmluZywgdW5pdHMpIHtcbiAgdW5pdHMgPSB1bml0cyB8fCBJbmZpbml0eVxuICB2YXIgY29kZVBvaW50XG4gIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoXG4gIHZhciBsZWFkU3Vycm9nYXRlID0gbnVsbFxuICB2YXIgYnl0ZXMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBjb2RlUG9pbnQgPSBzdHJpbmcuY2hhckNvZGVBdChpKVxuXG4gICAgLy8gaXMgc3Vycm9nYXRlIGNvbXBvbmVudFxuICAgIGlmIChjb2RlUG9pbnQgPiAweEQ3RkYgJiYgY29kZVBvaW50IDwgMHhFMDAwKSB7XG4gICAgICAvLyBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCFsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAgIC8vIG5vIGxlYWQgeWV0XG4gICAgICAgIGlmIChjb2RlUG9pbnQgPiAweERCRkYpIHtcbiAgICAgICAgICAvLyB1bmV4cGVjdGVkIHRyYWlsXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIGlmIChpICsgMSA9PT0gbGVuZ3RoKSB7XG4gICAgICAgICAgLy8gdW5wYWlyZWQgbGVhZFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyB2YWxpZCBsZWFkXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyAyIGxlYWRzIGluIGEgcm93XG4gICAgICBpZiAoY29kZVBvaW50IDwgMHhEQzAwKSB7XG4gICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIHZhbGlkIHN1cnJvZ2F0ZSBwYWlyXG4gICAgICBjb2RlUG9pbnQgPSAobGVhZFN1cnJvZ2F0ZSAtIDB4RDgwMCA8PCAxMCB8IGNvZGVQb2ludCAtIDB4REMwMCkgKyAweDEwMDAwXG4gICAgfSBlbHNlIGlmIChsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAvLyB2YWxpZCBibXAgY2hhciwgYnV0IGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICB9XG5cbiAgICBsZWFkU3Vycm9nYXRlID0gbnVsbFxuXG4gICAgLy8gZW5jb2RlIHV0ZjhcbiAgICBpZiAoY29kZVBvaW50IDwgMHg4MCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAxKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKGNvZGVQb2ludClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4ODAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgfCAweEMwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAzKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDIHwgMHhFMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gNCkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4MTIgfCAweEYwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNvZGUgcG9pbnQnKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBieXRlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVRvQnl0ZXMgKHN0cikge1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICAvLyBOb2RlJ3MgY29kZSBzZWVtcyB0byBiZSBkb2luZyB0aGlzIGFuZCBub3QgJiAweDdGLi5cbiAgICBieXRlQXJyYXkucHVzaChzdHIuY2hhckNvZGVBdChpKSAmIDB4RkYpXG4gIH1cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiB1dGYxNmxlVG9CeXRlcyAoc3RyLCB1bml0cykge1xuICB2YXIgYywgaGksIGxvXG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuXG4gICAgYyA9IHN0ci5jaGFyQ29kZUF0KGkpXG4gICAgaGkgPSBjID4+IDhcbiAgICBsbyA9IGMgJSAyNTZcbiAgICBieXRlQXJyYXkucHVzaChsbylcbiAgICBieXRlQXJyYXkucHVzaChoaSlcbiAgfVxuXG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gYmFzZTY0VG9CeXRlcyAoc3RyKSB7XG4gIHJldHVybiBiYXNlNjQudG9CeXRlQXJyYXkoYmFzZTY0Y2xlYW4oc3RyKSlcbn1cblxuZnVuY3Rpb24gYmxpdEJ1ZmZlciAoc3JjLCBkc3QsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKGkgKyBvZmZzZXQgPj0gZHN0Lmxlbmd0aCkgfHwgKGkgPj0gc3JjLmxlbmd0aCkpIGJyZWFrXG4gICAgZHN0W2kgKyBvZmZzZXRdID0gc3JjW2ldXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuLy8gQXJyYXlCdWZmZXIgb3IgVWludDhBcnJheSBvYmplY3RzIGZyb20gb3RoZXIgY29udGV4dHMgKGkuZS4gaWZyYW1lcykgZG8gbm90IHBhc3Ncbi8vIHRoZSBgaW5zdGFuY2VvZmAgY2hlY2sgYnV0IHRoZXkgc2hvdWxkIGJlIHRyZWF0ZWQgYXMgb2YgdGhhdCB0eXBlLlxuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9pc3N1ZXMvMTY2XG5mdW5jdGlvbiBpc0luc3RhbmNlIChvYmosIHR5cGUpIHtcbiAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIHR5cGUgfHxcbiAgICAob2JqICE9IG51bGwgJiYgb2JqLmNvbnN0cnVjdG9yICE9IG51bGwgJiYgb2JqLmNvbnN0cnVjdG9yLm5hbWUgIT0gbnVsbCAmJlxuICAgICAgb2JqLmNvbnN0cnVjdG9yLm5hbWUgPT09IHR5cGUubmFtZSlcbn1cbmZ1bmN0aW9uIG51bWJlcklzTmFOIChvYmopIHtcbiAgLy8gRm9yIElFMTEgc3VwcG9ydFxuICByZXR1cm4gb2JqICE9PSBvYmogLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcbn1cblxuLy8gQ3JlYXRlIGxvb2t1cCB0YWJsZSBmb3IgYHRvU3RyaW5nKCdoZXgnKWBcbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvaXNzdWVzLzIxOVxudmFyIGhleFNsaWNlTG9va3VwVGFibGUgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgYWxwaGFiZXQgPSAnMDEyMzQ1Njc4OWFiY2RlZidcbiAgdmFyIHRhYmxlID0gbmV3IEFycmF5KDI1NilcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgKytpKSB7XG4gICAgdmFyIGkxNiA9IGkgKiAxNlxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgMTY7ICsraikge1xuICAgICAgdGFibGVbaTE2ICsgal0gPSBhbHBoYWJldFtpXSArIGFscGhhYmV0W2pdXG4gICAgfVxuICB9XG4gIHJldHVybiB0YWJsZVxufSkoKVxuIiwiZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSAoZSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSAobSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICgodmFsdWUgKiBjKSAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsIi8qKiFcbiogdGlwcHkuanMgdjYuMS4wXG4qIChjKSAyMDE3LTIwMjAgYXRvbWlrc1xuKiBNSVQgTGljZW5zZVxuKi9cbid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxudmFyIGNvcmUgPSByZXF1aXJlKCdAcG9wcGVyanMvY29yZScpO1xuXG52YXIgUEFTU0lWRSA9IHtcbiAgcGFzc2l2ZTogdHJ1ZVxufTtcbnZhciBST1VORF9BUlJPVyA9ICc8c3ZnIHdpZHRoPVwiMTZcIiBoZWlnaHQ9XCI2XCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPjxwYXRoIGQ9XCJNMCA2czEuNzk2LS4wMTMgNC42Ny0zLjYxNUM1Ljg1MS45IDYuOTMuMDA2IDggMGMxLjA3LS4wMDYgMi4xNDguODg3IDMuMzQzIDIuMzg1QzE0LjIzMyA2LjAwNSAxNiA2IDE2IDZIMHpcIj48L3N2Zz4nO1xudmFyIElPU19DTEFTUyA9IFwidGlwcHktaU9TXCI7XG52YXIgQk9YX0NMQVNTID0gXCJ0aXBweS1ib3hcIjtcbnZhciBDT05URU5UX0NMQVNTID0gXCJ0aXBweS1jb250ZW50XCI7XG52YXIgQkFDS0RST1BfQ0xBU1MgPSBcInRpcHB5LWJhY2tkcm9wXCI7XG52YXIgQVJST1dfQ0xBU1MgPSBcInRpcHB5LWFycm93XCI7XG52YXIgU1ZHX0FSUk9XX0NMQVNTID0gXCJ0aXBweS1zdmctYXJyb3dcIjtcblxuZnVuY3Rpb24gaGFzT3duUHJvcGVydHkob2JqLCBrZXkpIHtcbiAgcmV0dXJuIHt9Lmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpO1xufVxuZnVuY3Rpb24gZ2V0VmFsdWVBdEluZGV4T3JSZXR1cm4odmFsdWUsIGluZGV4LCBkZWZhdWx0VmFsdWUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgdmFyIHYgPSB2YWx1ZVtpbmRleF07XG4gICAgcmV0dXJuIHYgPT0gbnVsbCA/IEFycmF5LmlzQXJyYXkoZGVmYXVsdFZhbHVlKSA/IGRlZmF1bHRWYWx1ZVtpbmRleF0gOiBkZWZhdWx0VmFsdWUgOiB2O1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gaXNUeXBlKHZhbHVlLCB0eXBlKSB7XG4gIHZhciBzdHIgPSB7fS50b1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgcmV0dXJuIHN0ci5pbmRleE9mKCdbb2JqZWN0JykgPT09IDAgJiYgc3RyLmluZGV4T2YodHlwZSArIFwiXVwiKSA+IC0xO1xufVxuZnVuY3Rpb24gaW52b2tlV2l0aEFyZ3NPclJldHVybih2YWx1ZSwgYXJncykge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nID8gdmFsdWUuYXBwbHkodm9pZCAwLCBhcmdzKSA6IHZhbHVlO1xufVxuZnVuY3Rpb24gZGVib3VuY2UoZm4sIG1zKSB7XG4gIC8vIEF2b2lkIHdyYXBwaW5nIGluIGBzZXRUaW1lb3V0YCBpZiBtcyBpcyAwIGFueXdheVxuICBpZiAobXMgPT09IDApIHtcbiAgICByZXR1cm4gZm47XG4gIH1cblxuICB2YXIgdGltZW91dDtcbiAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgZm4oYXJnKTtcbiAgICB9LCBtcyk7XG4gIH07XG59XG5mdW5jdGlvbiByZW1vdmVQcm9wZXJ0aWVzKG9iaiwga2V5cykge1xuICB2YXIgY2xvbmUgPSBPYmplY3QuYXNzaWduKHt9LCBvYmopO1xuICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGRlbGV0ZSBjbG9uZVtrZXldO1xuICB9KTtcbiAgcmV0dXJuIGNsb25lO1xufVxuZnVuY3Rpb24gc3BsaXRCeVNwYWNlcyh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUuc3BsaXQoL1xccysvKS5maWx0ZXIoQm9vbGVhbik7XG59XG5mdW5jdGlvbiBub3JtYWxpemVUb0FycmF5KHZhbHVlKSB7XG4gIHJldHVybiBbXS5jb25jYXQodmFsdWUpO1xufVxuZnVuY3Rpb24gcHVzaElmVW5pcXVlKGFyciwgdmFsdWUpIHtcbiAgaWYgKGFyci5pbmRleE9mKHZhbHVlKSA9PT0gLTEpIHtcbiAgICBhcnIucHVzaCh2YWx1ZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHVuaXF1ZShhcnIpIHtcbiAgcmV0dXJuIGFyci5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG4gICAgcmV0dXJuIGFyci5pbmRleE9mKGl0ZW0pID09PSBpbmRleDtcbiAgfSk7XG59XG5mdW5jdGlvbiBnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCkge1xuICByZXR1cm4gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG59XG5mdW5jdGlvbiBhcnJheUZyb20odmFsdWUpIHtcbiAgcmV0dXJuIFtdLnNsaWNlLmNhbGwodmFsdWUpO1xufVxuXG5mdW5jdGlvbiBkaXYoKSB7XG4gIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbn1cbmZ1bmN0aW9uIGlzRWxlbWVudCh2YWx1ZSkge1xuICByZXR1cm4gaXNUeXBlKHZhbHVlLCAnRWxlbWVudCcpO1xufVxuZnVuY3Rpb24gaXNOb2RlTGlzdCh2YWx1ZSkge1xuICByZXR1cm4gaXNUeXBlKHZhbHVlLCAnTm9kZUxpc3QnKTtcbn1cbmZ1bmN0aW9uIGlzTW91c2VFdmVudCh2YWx1ZSkge1xuICByZXR1cm4gaXNUeXBlKHZhbHVlLCAnTW91c2VFdmVudCcpO1xufVxuZnVuY3Rpb24gaXNSZWZlcmVuY2VFbGVtZW50KHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fdGlwcHkgJiYgdmFsdWUuX3RpcHB5LnJlZmVyZW5jZSA9PT0gdmFsdWUpO1xufVxuZnVuY3Rpb24gZ2V0QXJyYXlPZkVsZW1lbnRzKHZhbHVlKSB7XG4gIGlmIChpc0VsZW1lbnQodmFsdWUpKSB7XG4gICAgcmV0dXJuIFt2YWx1ZV07XG4gIH1cblxuICBpZiAoaXNOb2RlTGlzdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gYXJyYXlGcm9tKHZhbHVlKTtcbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBhcnJheUZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh2YWx1ZSkpO1xufVxuZnVuY3Rpb24gc2V0VHJhbnNpdGlvbkR1cmF0aW9uKGVscywgdmFsdWUpIHtcbiAgZWxzLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgaWYgKGVsKSB7XG4gICAgICBlbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSB2YWx1ZSArIFwibXNcIjtcbiAgICB9XG4gIH0pO1xufVxuZnVuY3Rpb24gc2V0VmlzaWJpbGl0eVN0YXRlKGVscywgc3RhdGUpIHtcbiAgZWxzLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgaWYgKGVsKSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc3RhdGUnLCBzdGF0ZSk7XG4gICAgfVxuICB9KTtcbn1cbmZ1bmN0aW9uIGdldE93bmVyRG9jdW1lbnQoZWxlbWVudE9yRWxlbWVudHMpIHtcbiAgdmFyIF9ub3JtYWxpemVUb0FycmF5ID0gbm9ybWFsaXplVG9BcnJheShlbGVtZW50T3JFbGVtZW50cyksXG4gICAgICBlbGVtZW50ID0gX25vcm1hbGl6ZVRvQXJyYXlbMF07XG5cbiAgcmV0dXJuIGVsZW1lbnQgPyBlbGVtZW50Lm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQgOiBkb2N1bWVudDtcbn1cbmZ1bmN0aW9uIGlzQ3Vyc29yT3V0c2lkZUludGVyYWN0aXZlQm9yZGVyKHBvcHBlclRyZWVEYXRhLCBldmVudCkge1xuICB2YXIgY2xpZW50WCA9IGV2ZW50LmNsaWVudFgsXG4gICAgICBjbGllbnRZID0gZXZlbnQuY2xpZW50WTtcbiAgcmV0dXJuIHBvcHBlclRyZWVEYXRhLmV2ZXJ5KGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIHBvcHBlclJlY3QgPSBfcmVmLnBvcHBlclJlY3QsXG4gICAgICAgIHBvcHBlclN0YXRlID0gX3JlZi5wb3BwZXJTdGF0ZSxcbiAgICAgICAgcHJvcHMgPSBfcmVmLnByb3BzO1xuICAgIHZhciBpbnRlcmFjdGl2ZUJvcmRlciA9IHByb3BzLmludGVyYWN0aXZlQm9yZGVyO1xuICAgIHZhciBiYXNlUGxhY2VtZW50ID0gZ2V0QmFzZVBsYWNlbWVudChwb3BwZXJTdGF0ZS5wbGFjZW1lbnQpO1xuICAgIHZhciBvZmZzZXREYXRhID0gcG9wcGVyU3RhdGUubW9kaWZpZXJzRGF0YS5vZmZzZXQ7XG5cbiAgICBpZiAoIW9mZnNldERhdGEpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHZhciB0b3BEaXN0YW5jZSA9IGJhc2VQbGFjZW1lbnQgPT09ICdib3R0b20nID8gb2Zmc2V0RGF0YS50b3AueSA6IDA7XG4gICAgdmFyIGJvdHRvbURpc3RhbmNlID0gYmFzZVBsYWNlbWVudCA9PT0gJ3RvcCcgPyBvZmZzZXREYXRhLmJvdHRvbS55IDogMDtcbiAgICB2YXIgbGVmdERpc3RhbmNlID0gYmFzZVBsYWNlbWVudCA9PT0gJ3JpZ2h0JyA/IG9mZnNldERhdGEubGVmdC54IDogMDtcbiAgICB2YXIgcmlnaHREaXN0YW5jZSA9IGJhc2VQbGFjZW1lbnQgPT09ICdsZWZ0JyA/IG9mZnNldERhdGEucmlnaHQueCA6IDA7XG4gICAgdmFyIGV4Y2VlZHNUb3AgPSBwb3BwZXJSZWN0LnRvcCAtIGNsaWVudFkgKyB0b3BEaXN0YW5jZSA+IGludGVyYWN0aXZlQm9yZGVyO1xuICAgIHZhciBleGNlZWRzQm90dG9tID0gY2xpZW50WSAtIHBvcHBlclJlY3QuYm90dG9tIC0gYm90dG9tRGlzdGFuY2UgPiBpbnRlcmFjdGl2ZUJvcmRlcjtcbiAgICB2YXIgZXhjZWVkc0xlZnQgPSBwb3BwZXJSZWN0LmxlZnQgLSBjbGllbnRYICsgbGVmdERpc3RhbmNlID4gaW50ZXJhY3RpdmVCb3JkZXI7XG4gICAgdmFyIGV4Y2VlZHNSaWdodCA9IGNsaWVudFggLSBwb3BwZXJSZWN0LnJpZ2h0IC0gcmlnaHREaXN0YW5jZSA+IGludGVyYWN0aXZlQm9yZGVyO1xuICAgIHJldHVybiBleGNlZWRzVG9wIHx8IGV4Y2VlZHNCb3R0b20gfHwgZXhjZWVkc0xlZnQgfHwgZXhjZWVkc1JpZ2h0O1xuICB9KTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZVRyYW5zaXRpb25FbmRMaXN0ZW5lcihib3gsIGFjdGlvbiwgbGlzdGVuZXIpIHtcbiAgdmFyIG1ldGhvZCA9IGFjdGlvbiArIFwiRXZlbnRMaXN0ZW5lclwiOyAvLyBzb21lIGJyb3dzZXJzIGFwcGFyZW50bHkgc3VwcG9ydCBgdHJhbnNpdGlvbmAgKHVucHJlZml4ZWQpIGJ1dCBvbmx5IGZpcmVcbiAgLy8gYHdlYmtpdFRyYW5zaXRpb25FbmRgLi4uXG5cbiAgWyd0cmFuc2l0aW9uZW5kJywgJ3dlYmtpdFRyYW5zaXRpb25FbmQnXS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xuICAgIGJveFttZXRob2RdKGV2ZW50LCBsaXN0ZW5lcik7XG4gIH0pO1xufVxuXG52YXIgY3VycmVudElucHV0ID0ge1xuICBpc1RvdWNoOiBmYWxzZVxufTtcbnZhciBsYXN0TW91c2VNb3ZlVGltZSA9IDA7XG4vKipcbiAqIFdoZW4gYSBgdG91Y2hzdGFydGAgZXZlbnQgaXMgZmlyZWQsIGl0J3MgYXNzdW1lZCB0aGUgdXNlciBpcyB1c2luZyB0b3VjaFxuICogaW5wdXQuIFdlJ2xsIGJpbmQgYSBgbW91c2Vtb3ZlYCBldmVudCBsaXN0ZW5lciB0byBsaXN0ZW4gZm9yIG1vdXNlIGlucHV0IGluXG4gKiB0aGUgZnV0dXJlLiBUaGlzIHdheSwgdGhlIGBpc1RvdWNoYCBwcm9wZXJ0eSBpcyBmdWxseSBkeW5hbWljIGFuZCB3aWxsIGhhbmRsZVxuICogaHlicmlkIGRldmljZXMgdGhhdCB1c2UgYSBtaXggb2YgdG91Y2ggKyBtb3VzZSBpbnB1dC5cbiAqL1xuXG5mdW5jdGlvbiBvbkRvY3VtZW50VG91Y2hTdGFydCgpIHtcbiAgaWYgKGN1cnJlbnRJbnB1dC5pc1RvdWNoKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY3VycmVudElucHV0LmlzVG91Y2ggPSB0cnVlO1xuXG4gIGlmICh3aW5kb3cucGVyZm9ybWFuY2UpIHtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBvbkRvY3VtZW50TW91c2VNb3ZlKTtcbiAgfVxufVxuLyoqXG4gKiBXaGVuIHR3byBgbW91c2Vtb3ZlYCBldmVudCBhcmUgZmlyZWQgY29uc2VjdXRpdmVseSB3aXRoaW4gMjBtcywgaXQncyBhc3N1bWVkXG4gKiB0aGUgdXNlciBpcyB1c2luZyBtb3VzZSBpbnB1dCBhZ2Fpbi4gYG1vdXNlbW92ZWAgY2FuIGZpcmUgb24gdG91Y2ggZGV2aWNlcyBhc1xuICogd2VsbCwgYnV0IHZlcnkgcmFyZWx5IHRoYXQgcXVpY2tseS5cbiAqL1xuXG5mdW5jdGlvbiBvbkRvY3VtZW50TW91c2VNb3ZlKCkge1xuICB2YXIgbm93ID0gcGVyZm9ybWFuY2Uubm93KCk7XG5cbiAgaWYgKG5vdyAtIGxhc3RNb3VzZU1vdmVUaW1lIDwgMjApIHtcbiAgICBjdXJyZW50SW5wdXQuaXNUb3VjaCA9IGZhbHNlO1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIG9uRG9jdW1lbnRNb3VzZU1vdmUpO1xuICB9XG5cbiAgbGFzdE1vdXNlTW92ZVRpbWUgPSBub3c7XG59XG4vKipcbiAqIFdoZW4gYW4gZWxlbWVudCBpcyBpbiBmb2N1cyBhbmQgaGFzIGEgdGlwcHksIGxlYXZpbmcgdGhlIHRhYi93aW5kb3cgYW5kXG4gKiByZXR1cm5pbmcgY2F1c2VzIGl0IHRvIHNob3cgYWdhaW4uIEZvciBtb3VzZSB1c2VycyB0aGlzIGlzIHVuZXhwZWN0ZWQsIGJ1dFxuICogZm9yIGtleWJvYXJkIHVzZSBpdCBtYWtlcyBzZW5zZS5cbiAqIFRPRE86IGZpbmQgYSBiZXR0ZXIgdGVjaG5pcXVlIHRvIHNvbHZlIHRoaXMgcHJvYmxlbVxuICovXG5cbmZ1bmN0aW9uIG9uV2luZG93Qmx1cigpIHtcbiAgdmFyIGFjdGl2ZUVsZW1lbnQgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXG4gIGlmIChpc1JlZmVyZW5jZUVsZW1lbnQoYWN0aXZlRWxlbWVudCkpIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBhY3RpdmVFbGVtZW50Ll90aXBweTtcblxuICAgIGlmIChhY3RpdmVFbGVtZW50LmJsdXIgJiYgIWluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZSkge1xuICAgICAgYWN0aXZlRWxlbWVudC5ibHVyKCk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBiaW5kR2xvYmFsRXZlbnRMaXN0ZW5lcnMoKSB7XG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBvbkRvY3VtZW50VG91Y2hTdGFydCwgT2JqZWN0LmFzc2lnbih7fSwgUEFTU0lWRSwge1xuICAgIGNhcHR1cmU6IHRydWVcbiAgfSkpO1xuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIG9uV2luZG93Qmx1cik7XG59XG5cbnZhciBpc0Jyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnO1xudmFyIHVhID0gaXNCcm93c2VyID8gbmF2aWdhdG9yLnVzZXJBZ2VudCA6ICcnO1xudmFyIGlzSUUgPSAvTVNJRSB8VHJpZGVudFxcLy8udGVzdCh1YSk7XG52YXIgaXNJT1MgPSBpc0Jyb3dzZXIgJiYgL2lQaG9uZXxpUGFkfGlQb2QvLnRlc3QobmF2aWdhdG9yLnBsYXRmb3JtKTtcblxuZnVuY3Rpb24gY3JlYXRlTWVtb3J5TGVha1dhcm5pbmcobWV0aG9kKSB7XG4gIHZhciB0eHQgPSBtZXRob2QgPT09ICdkZXN0cm95JyA/ICduIGFscmVhZHktJyA6ICcgJztcbiAgcmV0dXJuIFttZXRob2QgKyBcIigpIHdhcyBjYWxsZWQgb24gYVwiICsgdHh0ICsgXCJkZXN0cm95ZWQgaW5zdGFuY2UuIFRoaXMgaXMgYSBuby1vcCBidXRcIiwgJ2luZGljYXRlcyBhIHBvdGVudGlhbCBtZW1vcnkgbGVhay4nXS5qb2luKCcgJyk7XG59XG5mdW5jdGlvbiBjbGVhbih2YWx1ZSkge1xuICB2YXIgc3BhY2VzQW5kVGFicyA9IC9bIFxcdF17Mix9L2c7XG4gIHZhciBsaW5lU3RhcnRXaXRoU3BhY2VzID0gL15bIFxcdF0qL2dtO1xuICByZXR1cm4gdmFsdWUucmVwbGFjZShzcGFjZXNBbmRUYWJzLCAnICcpLnJlcGxhY2UobGluZVN0YXJ0V2l0aFNwYWNlcywgJycpLnRyaW0oKTtcbn1cblxuZnVuY3Rpb24gZ2V0RGV2TWVzc2FnZShtZXNzYWdlKSB7XG4gIHJldHVybiBjbGVhbihcIlxcbiAgJWN0aXBweS5qc1xcblxcbiAgJWNcIiArIGNsZWFuKG1lc3NhZ2UpICsgXCJcXG5cXG4gICVjXFx1RDgzRFxcdURDNzdcXHUyMDBEIFRoaXMgaXMgYSBkZXZlbG9wbWVudC1vbmx5IG1lc3NhZ2UuIEl0IHdpbGwgYmUgcmVtb3ZlZCBpbiBwcm9kdWN0aW9uLlxcbiAgXCIpO1xufVxuXG5mdW5jdGlvbiBnZXRGb3JtYXR0ZWRNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgcmV0dXJuIFtnZXREZXZNZXNzYWdlKG1lc3NhZ2UpLCAvLyB0aXRsZVxuICAnY29sb3I6ICMwMEM1ODQ7IGZvbnQtc2l6ZTogMS4zZW07IGZvbnQtd2VpZ2h0OiBib2xkOycsIC8vIG1lc3NhZ2VcbiAgJ2xpbmUtaGVpZ2h0OiAxLjUnLCAvLyBmb290ZXJcbiAgJ2NvbG9yOiAjYTZhMDk1OyddO1xufVxuLyoqXG4gKiBIZWxwZnVsIHdyYXBwZXIgYXJvdW5kIGBjb25zb2xlLndhcm4oKWAuXG4gKiBUT0RPOiBTaG91bGQgd2UgdXNlIGEgY2FjaGUgc28gaXQgb25seSB3YXJucyBhIHNpbmdsZSB0aW1lIGFuZCBub3Qgc3BhbSB0aGVcbiAqIGNvbnNvbGU/IChOZWVkIHRvIGNvbnNpZGVyIGhvdCByZWxvYWRpbmcgYW5kIGludmFsaWRhdGlvbiB0aG91Z2gpLiBDaHJvbWVcbiAqIGFscmVhZHkgYmF0Y2hlcyB3YXJuaW5ncyBhcyB3ZWxsLlxuICovXG5cbmZ1bmN0aW9uIHdhcm5XaGVuKGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICBpZiAoY29uZGl0aW9uKSB7XG4gICAgdmFyIF9jb25zb2xlO1xuXG4gICAgKF9jb25zb2xlID0gY29uc29sZSkud2Fybi5hcHBseShfY29uc29sZSwgZ2V0Rm9ybWF0dGVkTWVzc2FnZShtZXNzYWdlKSk7XG4gIH1cbn1cbi8qKlxuICogSGVscGZ1bCB3cmFwcGVyIGFyb3VuZCBgY29uc29sZS5lcnJvcigpYFxuICovXG5cbmZ1bmN0aW9uIGVycm9yV2hlbihjb25kaXRpb24sIG1lc3NhZ2UpIHtcbiAgaWYgKGNvbmRpdGlvbikge1xuICAgIHZhciBfY29uc29sZTI7XG5cbiAgICAoX2NvbnNvbGUyID0gY29uc29sZSkuZXJyb3IuYXBwbHkoX2NvbnNvbGUyLCBnZXRGb3JtYXR0ZWRNZXNzYWdlKG1lc3NhZ2UpKTtcbiAgfVxufVxuLyoqXG4gKiBWYWxpZGF0ZXMgdGhlIGB0YXJnZXRzYCB2YWx1ZSBwYXNzZWQgdG8gYHRpcHB5KClgXG4gKi9cblxuZnVuY3Rpb24gdmFsaWRhdGVUYXJnZXRzKHRhcmdldHMpIHtcbiAgdmFyIGRpZFBhc3NGYWxzeVZhbHVlID0gIXRhcmdldHM7XG4gIHZhciBkaWRQYXNzUGxhaW5PYmplY3QgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodGFyZ2V0cykgPT09ICdbb2JqZWN0IE9iamVjdF0nICYmICF0YXJnZXRzLmFkZEV2ZW50TGlzdGVuZXI7XG4gIGVycm9yV2hlbihkaWRQYXNzRmFsc3lWYWx1ZSwgWyd0aXBweSgpIHdhcyBwYXNzZWQnLCAnYCcgKyBTdHJpbmcodGFyZ2V0cykgKyAnYCcsICdhcyBpdHMgdGFyZ2V0cyAoZmlyc3QpIGFyZ3VtZW50LiBWYWxpZCB0eXBlcyBhcmU6IFN0cmluZywgRWxlbWVudCwnLCAnRWxlbWVudFtdLCBvciBOb2RlTGlzdC4nXS5qb2luKCcgJykpO1xuICBlcnJvcldoZW4oZGlkUGFzc1BsYWluT2JqZWN0LCBbJ3RpcHB5KCkgd2FzIHBhc3NlZCBhIHBsYWluIG9iamVjdCB3aGljaCBpcyBub3Qgc3VwcG9ydGVkIGFzIGFuIGFyZ3VtZW50JywgJ2ZvciB2aXJ0dWFsIHBvc2l0aW9uaW5nLiBVc2UgcHJvcHMuZ2V0UmVmZXJlbmNlQ2xpZW50UmVjdCBpbnN0ZWFkLiddLmpvaW4oJyAnKSk7XG59XG5cbnZhciBwbHVnaW5Qcm9wcyA9IHtcbiAgYW5pbWF0ZUZpbGw6IGZhbHNlLFxuICBmb2xsb3dDdXJzb3I6IGZhbHNlLFxuICBpbmxpbmVQb3NpdGlvbmluZzogZmFsc2UsXG4gIHN0aWNreTogZmFsc2Vcbn07XG52YXIgcmVuZGVyUHJvcHMgPSB7XG4gIGFsbG93SFRNTDogZmFsc2UsXG4gIGFuaW1hdGlvbjogJ2ZhZGUnLFxuICBhcnJvdzogdHJ1ZSxcbiAgY29udGVudDogJycsXG4gIGluZXJ0aWE6IGZhbHNlLFxuICBtYXhXaWR0aDogMzUwLFxuICByb2xlOiAndG9vbHRpcCcsXG4gIHRoZW1lOiAnJyxcbiAgekluZGV4OiA5OTk5XG59O1xudmFyIGRlZmF1bHRQcm9wcyA9IE9iamVjdC5hc3NpZ24oe1xuICBhcHBlbmRUbzogZnVuY3Rpb24gYXBwZW5kVG8oKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmJvZHk7XG4gIH0sXG4gIGFyaWE6IHtcbiAgICBjb250ZW50OiAnYXV0bycsXG4gICAgZXhwYW5kZWQ6ICdhdXRvJ1xuICB9LFxuICBjb250ZW50OiAnJyxcbiAgZGVsYXk6IDAsXG4gIGR1cmF0aW9uOiBbMzAwLCAyNTBdLFxuICBnZXRSZWZlcmVuY2VDbGllbnRSZWN0OiBudWxsLFxuICBoaWRlT25DbGljazogdHJ1ZSxcbiAgaWdub3JlQXR0cmlidXRlczogZmFsc2UsXG4gIGludGVyYWN0aXZlOiBmYWxzZSxcbiAgaW50ZXJhY3RpdmVCb3JkZXI6IDIsXG4gIGludGVyYWN0aXZlRGVib3VuY2U6IDAsXG4gIG1vdmVUcmFuc2l0aW9uOiAnJyxcbiAgb2Zmc2V0OiBbMCwgMTBdLFxuICBvbkFmdGVyVXBkYXRlOiBmdW5jdGlvbiBvbkFmdGVyVXBkYXRlKCkge30sXG4gIG9uQmVmb3JlVXBkYXRlOiBmdW5jdGlvbiBvbkJlZm9yZVVwZGF0ZSgpIHt9LFxuICBvbkNyZWF0ZTogZnVuY3Rpb24gb25DcmVhdGUoKSB7fSxcbiAgb25EZXN0cm95OiBmdW5jdGlvbiBvbkRlc3Ryb3koKSB7fSxcbiAgb25IaWRkZW46IGZ1bmN0aW9uIG9uSGlkZGVuKCkge30sXG4gIG9uSGlkZTogZnVuY3Rpb24gb25IaWRlKCkge30sXG4gIG9uTW91bnQ6IGZ1bmN0aW9uIG9uTW91bnQoKSB7fSxcbiAgb25TaG93OiBmdW5jdGlvbiBvblNob3coKSB7fSxcbiAgb25TaG93bjogZnVuY3Rpb24gb25TaG93bigpIHt9LFxuICBvblRyaWdnZXI6IGZ1bmN0aW9uIG9uVHJpZ2dlcigpIHt9LFxuICBvblVudHJpZ2dlcjogZnVuY3Rpb24gb25VbnRyaWdnZXIoKSB7fSxcbiAgb25DbGlja091dHNpZGU6IGZ1bmN0aW9uIG9uQ2xpY2tPdXRzaWRlKCkge30sXG4gIHBsYWNlbWVudDogJ3RvcCcsXG4gIHBsdWdpbnM6IFtdLFxuICBwb3BwZXJPcHRpb25zOiB7fSxcbiAgcmVuZGVyOiBudWxsLFxuICBzaG93T25DcmVhdGU6IGZhbHNlLFxuICB0b3VjaDogdHJ1ZSxcbiAgdHJpZ2dlcjogJ21vdXNlZW50ZXIgZm9jdXMnLFxuICB0cmlnZ2VyVGFyZ2V0OiBudWxsXG59LCBwbHVnaW5Qcm9wcywge30sIHJlbmRlclByb3BzKTtcbnZhciBkZWZhdWx0S2V5cyA9IE9iamVjdC5rZXlzKGRlZmF1bHRQcm9wcyk7XG52YXIgc2V0RGVmYXVsdFByb3BzID0gZnVuY3Rpb24gc2V0RGVmYXVsdFByb3BzKHBhcnRpYWxQcm9wcykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgdmFsaWRhdGVQcm9wcyhwYXJ0aWFsUHJvcHMsIFtdKTtcbiAgfVxuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMocGFydGlhbFByb3BzKTtcbiAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBkZWZhdWx0UHJvcHNba2V5XSA9IHBhcnRpYWxQcm9wc1trZXldO1xuICB9KTtcbn07XG5mdW5jdGlvbiBnZXRFeHRlbmRlZFBhc3NlZFByb3BzKHBhc3NlZFByb3BzKSB7XG4gIHZhciBwbHVnaW5zID0gcGFzc2VkUHJvcHMucGx1Z2lucyB8fCBbXTtcbiAgdmFyIHBsdWdpblByb3BzID0gcGx1Z2lucy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGx1Z2luKSB7XG4gICAgdmFyIG5hbWUgPSBwbHVnaW4ubmFtZSxcbiAgICAgICAgZGVmYXVsdFZhbHVlID0gcGx1Z2luLmRlZmF1bHRWYWx1ZTtcblxuICAgIGlmIChuYW1lKSB7XG4gICAgICBhY2NbbmFtZV0gPSBwYXNzZWRQcm9wc1tuYW1lXSAhPT0gdW5kZWZpbmVkID8gcGFzc2VkUHJvcHNbbmFtZV0gOiBkZWZhdWx0VmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgcGFzc2VkUHJvcHMsIHt9LCBwbHVnaW5Qcm9wcyk7XG59XG5mdW5jdGlvbiBnZXREYXRhQXR0cmlidXRlUHJvcHMocmVmZXJlbmNlLCBwbHVnaW5zKSB7XG4gIHZhciBwcm9wS2V5cyA9IHBsdWdpbnMgPyBPYmplY3Qua2V5cyhnZXRFeHRlbmRlZFBhc3NlZFByb3BzKE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRQcm9wcywge1xuICAgIHBsdWdpbnM6IHBsdWdpbnNcbiAgfSkpKSA6IGRlZmF1bHRLZXlzO1xuICB2YXIgcHJvcHMgPSBwcm9wS2V5cy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywga2V5KSB7XG4gICAgdmFyIHZhbHVlQXNTdHJpbmcgPSAocmVmZXJlbmNlLmdldEF0dHJpYnV0ZShcImRhdGEtdGlwcHktXCIgKyBrZXkpIHx8ICcnKS50cmltKCk7XG5cbiAgICBpZiAoIXZhbHVlQXNTdHJpbmcpIHtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfVxuXG4gICAgaWYgKGtleSA9PT0gJ2NvbnRlbnQnKSB7XG4gICAgICBhY2Nba2V5XSA9IHZhbHVlQXNTdHJpbmc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGFjY1trZXldID0gSlNPTi5wYXJzZSh2YWx1ZUFzU3RyaW5nKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgYWNjW2tleV0gPSB2YWx1ZUFzU3RyaW5nO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbiAgcmV0dXJuIHByb3BzO1xufVxuZnVuY3Rpb24gZXZhbHVhdGVQcm9wcyhyZWZlcmVuY2UsIHByb3BzKSB7XG4gIHZhciBvdXQgPSBPYmplY3QuYXNzaWduKHt9LCBwcm9wcywge1xuICAgIGNvbnRlbnQ6IGludm9rZVdpdGhBcmdzT3JSZXR1cm4ocHJvcHMuY29udGVudCwgW3JlZmVyZW5jZV0pXG4gIH0sIHByb3BzLmlnbm9yZUF0dHJpYnV0ZXMgPyB7fSA6IGdldERhdGFBdHRyaWJ1dGVQcm9wcyhyZWZlcmVuY2UsIHByb3BzLnBsdWdpbnMpKTtcbiAgb3V0LmFyaWEgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0UHJvcHMuYXJpYSwge30sIG91dC5hcmlhKTtcbiAgb3V0LmFyaWEgPSB7XG4gICAgZXhwYW5kZWQ6IG91dC5hcmlhLmV4cGFuZGVkID09PSAnYXV0bycgPyBwcm9wcy5pbnRlcmFjdGl2ZSA6IG91dC5hcmlhLmV4cGFuZGVkLFxuICAgIGNvbnRlbnQ6IG91dC5hcmlhLmNvbnRlbnQgPT09ICdhdXRvJyA/IHByb3BzLmludGVyYWN0aXZlID8gbnVsbCA6ICdkZXNjcmliZWRieScgOiBvdXQuYXJpYS5jb250ZW50XG4gIH07XG4gIHJldHVybiBvdXQ7XG59XG5mdW5jdGlvbiB2YWxpZGF0ZVByb3BzKHBhcnRpYWxQcm9wcywgcGx1Z2lucykge1xuICBpZiAocGFydGlhbFByb3BzID09PSB2b2lkIDApIHtcbiAgICBwYXJ0aWFsUHJvcHMgPSB7fTtcbiAgfVxuXG4gIGlmIChwbHVnaW5zID09PSB2b2lkIDApIHtcbiAgICBwbHVnaW5zID0gW107XG4gIH1cblxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHBhcnRpYWxQcm9wcyk7XG4gIGtleXMuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgIHZhciBub25QbHVnaW5Qcm9wcyA9IHJlbW92ZVByb3BlcnRpZXMoZGVmYXVsdFByb3BzLCBPYmplY3Qua2V5cyhwbHVnaW5Qcm9wcykpO1xuICAgIHZhciBkaWRQYXNzVW5rbm93blByb3AgPSAhaGFzT3duUHJvcGVydHkobm9uUGx1Z2luUHJvcHMsIHByb3ApOyAvLyBDaGVjayBpZiB0aGUgcHJvcCBleGlzdHMgaW4gYHBsdWdpbnNgXG5cbiAgICBpZiAoZGlkUGFzc1Vua25vd25Qcm9wKSB7XG4gICAgICBkaWRQYXNzVW5rbm93blByb3AgPSBwbHVnaW5zLmZpbHRlcihmdW5jdGlvbiAocGx1Z2luKSB7XG4gICAgICAgIHJldHVybiBwbHVnaW4ubmFtZSA9PT0gcHJvcDtcbiAgICAgIH0pLmxlbmd0aCA9PT0gMDtcbiAgICB9XG5cbiAgICB3YXJuV2hlbihkaWRQYXNzVW5rbm93blByb3AsIFtcImBcIiArIHByb3AgKyBcImBcIiwgXCJpcyBub3QgYSB2YWxpZCBwcm9wLiBZb3UgbWF5IGhhdmUgc3BlbGxlZCBpdCBpbmNvcnJlY3RseSwgb3IgaWYgaXQnc1wiLCAnYSBwbHVnaW4sIGZvcmdvdCB0byBwYXNzIGl0IGluIGFuIGFycmF5IGFzIHByb3BzLnBsdWdpbnMuJywgJ1xcblxcbicsICdBbGwgcHJvcHM6IGh0dHBzOi8vYXRvbWlrcy5naXRodWIuaW8vdGlwcHlqcy92Ni9hbGwtcHJvcHMvXFxuJywgJ1BsdWdpbnM6IGh0dHBzOi8vYXRvbWlrcy5naXRodWIuaW8vdGlwcHlqcy92Ni9wbHVnaW5zLyddLmpvaW4oJyAnKSk7XG4gIH0pO1xufVxuXG52YXIgaW5uZXJIVE1MID0gZnVuY3Rpb24gaW5uZXJIVE1MKCkge1xuICByZXR1cm4gJ2lubmVySFRNTCc7XG59O1xuXG5mdW5jdGlvbiBkYW5nZXJvdXNseVNldElubmVySFRNTChlbGVtZW50LCBodG1sKSB7XG4gIGVsZW1lbnRbaW5uZXJIVE1MKCldID0gaHRtbDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQXJyb3dFbGVtZW50KHZhbHVlKSB7XG4gIHZhciBhcnJvdyA9IGRpdigpO1xuXG4gIGlmICh2YWx1ZSA9PT0gdHJ1ZSkge1xuICAgIGFycm93LmNsYXNzTmFtZSA9IEFSUk9XX0NMQVNTO1xuICB9IGVsc2Uge1xuICAgIGFycm93LmNsYXNzTmFtZSA9IFNWR19BUlJPV19DTEFTUztcblxuICAgIGlmIChpc0VsZW1lbnQodmFsdWUpKSB7XG4gICAgICBhcnJvdy5hcHBlbmRDaGlsZCh2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKGFycm93LCB2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGFycm93O1xufVxuXG5mdW5jdGlvbiBzZXRDb250ZW50KGNvbnRlbnQsIHByb3BzKSB7XG4gIGlmIChpc0VsZW1lbnQocHJvcHMuY29udGVudCkpIHtcbiAgICBkYW5nZXJvdXNseVNldElubmVySFRNTChjb250ZW50LCAnJyk7XG4gICAgY29udGVudC5hcHBlbmRDaGlsZChwcm9wcy5jb250ZW50KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvcHMuY29udGVudCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmIChwcm9wcy5hbGxvd0hUTUwpIHtcbiAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKGNvbnRlbnQsIHByb3BzLmNvbnRlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb250ZW50LnRleHRDb250ZW50ID0gcHJvcHMuY29udGVudDtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGdldENoaWxkcmVuKHBvcHBlcikge1xuICB2YXIgYm94ID0gcG9wcGVyLmZpcnN0RWxlbWVudENoaWxkO1xuICB2YXIgYm94Q2hpbGRyZW4gPSBhcnJheUZyb20oYm94LmNoaWxkcmVuKTtcbiAgcmV0dXJuIHtcbiAgICBib3g6IGJveCxcbiAgICBjb250ZW50OiBib3hDaGlsZHJlbi5maW5kKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICByZXR1cm4gbm9kZS5jbGFzc0xpc3QuY29udGFpbnMoQ09OVEVOVF9DTEFTUyk7XG4gICAgfSksXG4gICAgYXJyb3c6IGJveENoaWxkcmVuLmZpbmQoZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIHJldHVybiBub2RlLmNsYXNzTGlzdC5jb250YWlucyhBUlJPV19DTEFTUykgfHwgbm9kZS5jbGFzc0xpc3QuY29udGFpbnMoU1ZHX0FSUk9XX0NMQVNTKTtcbiAgICB9KSxcbiAgICBiYWNrZHJvcDogYm94Q2hpbGRyZW4uZmluZChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgcmV0dXJuIG5vZGUuY2xhc3NMaXN0LmNvbnRhaW5zKEJBQ0tEUk9QX0NMQVNTKTtcbiAgICB9KVxuICB9O1xufVxuZnVuY3Rpb24gcmVuZGVyKGluc3RhbmNlKSB7XG4gIHZhciBwb3BwZXIgPSBkaXYoKTtcbiAgdmFyIGJveCA9IGRpdigpO1xuICBib3guY2xhc3NOYW1lID0gQk9YX0NMQVNTO1xuICBib3guc2V0QXR0cmlidXRlKCdkYXRhLXN0YXRlJywgJ2hpZGRlbicpO1xuICBib3guc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsICctMScpO1xuICB2YXIgY29udGVudCA9IGRpdigpO1xuICBjb250ZW50LmNsYXNzTmFtZSA9IENPTlRFTlRfQ0xBU1M7XG4gIGNvbnRlbnQuc2V0QXR0cmlidXRlKCdkYXRhLXN0YXRlJywgJ2hpZGRlbicpO1xuICBzZXRDb250ZW50KGNvbnRlbnQsIGluc3RhbmNlLnByb3BzKTtcbiAgcG9wcGVyLmFwcGVuZENoaWxkKGJveCk7XG4gIGJveC5hcHBlbmRDaGlsZChjb250ZW50KTtcbiAgb25VcGRhdGUoaW5zdGFuY2UucHJvcHMsIGluc3RhbmNlLnByb3BzKTtcblxuICBmdW5jdGlvbiBvblVwZGF0ZShwcmV2UHJvcHMsIG5leHRQcm9wcykge1xuICAgIHZhciBfZ2V0Q2hpbGRyZW4gPSBnZXRDaGlsZHJlbihwb3BwZXIpLFxuICAgICAgICBib3ggPSBfZ2V0Q2hpbGRyZW4uYm94LFxuICAgICAgICBjb250ZW50ID0gX2dldENoaWxkcmVuLmNvbnRlbnQsXG4gICAgICAgIGFycm93ID0gX2dldENoaWxkcmVuLmFycm93O1xuXG4gICAgaWYgKG5leHRQcm9wcy50aGVtZSkge1xuICAgICAgYm94LnNldEF0dHJpYnV0ZSgnZGF0YS10aGVtZScsIG5leHRQcm9wcy50aGVtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJveC5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtdGhlbWUnKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG5leHRQcm9wcy5hbmltYXRpb24gPT09ICdzdHJpbmcnKSB7XG4gICAgICBib3guc2V0QXR0cmlidXRlKCdkYXRhLWFuaW1hdGlvbicsIG5leHRQcm9wcy5hbmltYXRpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICBib3gucmVtb3ZlQXR0cmlidXRlKCdkYXRhLWFuaW1hdGlvbicpO1xuICAgIH1cblxuICAgIGlmIChuZXh0UHJvcHMuaW5lcnRpYSkge1xuICAgICAgYm94LnNldEF0dHJpYnV0ZSgnZGF0YS1pbmVydGlhJywgJycpO1xuICAgIH0gZWxzZSB7XG4gICAgICBib3gucmVtb3ZlQXR0cmlidXRlKCdkYXRhLWluZXJ0aWEnKTtcbiAgICB9XG5cbiAgICBib3guc3R5bGUubWF4V2lkdGggPSB0eXBlb2YgbmV4dFByb3BzLm1heFdpZHRoID09PSAnbnVtYmVyJyA/IG5leHRQcm9wcy5tYXhXaWR0aCArIFwicHhcIiA6IG5leHRQcm9wcy5tYXhXaWR0aDtcblxuICAgIGlmIChuZXh0UHJvcHMucm9sZSkge1xuICAgICAgYm94LnNldEF0dHJpYnV0ZSgncm9sZScsIG5leHRQcm9wcy5yb2xlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYm94LnJlbW92ZUF0dHJpYnV0ZSgncm9sZScpO1xuICAgIH1cblxuICAgIGlmIChwcmV2UHJvcHMuY29udGVudCAhPT0gbmV4dFByb3BzLmNvbnRlbnQpIHtcbiAgICAgIHNldENvbnRlbnQoY29udGVudCwgaW5zdGFuY2UucHJvcHMpO1xuICAgIH1cblxuICAgIGlmIChuZXh0UHJvcHMuYXJyb3cpIHtcbiAgICAgIGlmICghYXJyb3cpIHtcbiAgICAgICAgYm94LmFwcGVuZENoaWxkKGNyZWF0ZUFycm93RWxlbWVudChuZXh0UHJvcHMuYXJyb3cpKTtcbiAgICAgIH0gZWxzZSBpZiAocHJldlByb3BzLmFycm93ICE9PSBuZXh0UHJvcHMuYXJyb3cpIHtcbiAgICAgICAgYm94LnJlbW92ZUNoaWxkKGFycm93KTtcbiAgICAgICAgYm94LmFwcGVuZENoaWxkKGNyZWF0ZUFycm93RWxlbWVudChuZXh0UHJvcHMuYXJyb3cpKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGFycm93KSB7XG4gICAgICBib3gucmVtb3ZlQ2hpbGQoYXJyb3cpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcG9wcGVyOiBwb3BwZXIsXG4gICAgb25VcGRhdGU6IG9uVXBkYXRlXG4gIH07XG59IC8vIFJ1bnRpbWUgY2hlY2sgdG8gaWRlbnRpZnkgaWYgdGhlIHJlbmRlciBmdW5jdGlvbiBpcyB0aGUgZGVmYXVsdCBvbmU7IHRoaXNcbi8vIHdheSB3ZSBjYW4gYXBwbHkgZGVmYXVsdCBDU1MgdHJhbnNpdGlvbnMgbG9naWMgYW5kIGl0IGNhbiBiZSB0cmVlLXNoYWtlbiBhd2F5XG5cbnJlbmRlci4kJHRpcHB5ID0gdHJ1ZTtcblxudmFyIGlkQ291bnRlciA9IDE7XG52YXIgbW91c2VNb3ZlTGlzdGVuZXJzID0gW107IC8vIFVzZWQgYnkgYGhpZGVBbGwoKWBcblxudmFyIG1vdW50ZWRJbnN0YW5jZXMgPSBbXTtcbmZ1bmN0aW9uIGNyZWF0ZVRpcHB5KHJlZmVyZW5jZSwgcGFzc2VkUHJvcHMpIHtcbiAgdmFyIHByb3BzID0gZXZhbHVhdGVQcm9wcyhyZWZlcmVuY2UsIE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRQcm9wcywge30sIGdldEV4dGVuZGVkUGFzc2VkUHJvcHMocGFzc2VkUHJvcHMpKSk7IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAvLyDwn5SSIFByaXZhdGUgbWVtYmVyc1xuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICB2YXIgc2hvd1RpbWVvdXQ7XG4gIHZhciBoaWRlVGltZW91dDtcbiAgdmFyIHNjaGVkdWxlSGlkZUFuaW1hdGlvbkZyYW1lO1xuICB2YXIgaXNWaXNpYmxlRnJvbUNsaWNrID0gZmFsc2U7XG4gIHZhciBkaWRIaWRlRHVlVG9Eb2N1bWVudE1vdXNlRG93biA9IGZhbHNlO1xuICB2YXIgaWdub3JlT25GaXJzdFVwZGF0ZSA9IGZhbHNlO1xuICB2YXIgbGFzdFRyaWdnZXJFdmVudDtcbiAgdmFyIGN1cnJlbnRUcmFuc2l0aW9uRW5kTGlzdGVuZXI7XG4gIHZhciBvbkZpcnN0VXBkYXRlO1xuICB2YXIgbGlzdGVuZXJzID0gW107XG4gIHZhciBkZWJvdW5jZWRPbk1vdXNlTW92ZSA9IGRlYm91bmNlKG9uTW91c2VNb3ZlLCBwcm9wcy5pbnRlcmFjdGl2ZURlYm91bmNlKTtcbiAgdmFyIGN1cnJlbnRUYXJnZXQ7XG4gIHZhciBkb2MgPSBnZXRPd25lckRvY3VtZW50KHByb3BzLnRyaWdnZXJUYXJnZXQgfHwgcmVmZXJlbmNlKTsgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIC8vIPCflJEgUHVibGljIG1lbWJlcnNcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIGlkID0gaWRDb3VudGVyKys7XG4gIHZhciBwb3BwZXJJbnN0YW5jZSA9IG51bGw7XG4gIHZhciBwbHVnaW5zID0gdW5pcXVlKHByb3BzLnBsdWdpbnMpO1xuICB2YXIgc3RhdGUgPSB7XG4gICAgLy8gSXMgdGhlIGluc3RhbmNlIGN1cnJlbnRseSBlbmFibGVkP1xuICAgIGlzRW5hYmxlZDogdHJ1ZSxcbiAgICAvLyBJcyB0aGUgdGlwcHkgY3VycmVudGx5IHNob3dpbmcgYW5kIG5vdCB0cmFuc2l0aW9uaW5nIG91dD9cbiAgICBpc1Zpc2libGU6IGZhbHNlLFxuICAgIC8vIEhhcyB0aGUgaW5zdGFuY2UgYmVlbiBkZXN0cm95ZWQ/XG4gICAgaXNEZXN0cm95ZWQ6IGZhbHNlLFxuICAgIC8vIElzIHRoZSB0aXBweSBjdXJyZW50bHkgbW91bnRlZCB0byB0aGUgRE9NP1xuICAgIGlzTW91bnRlZDogZmFsc2UsXG4gICAgLy8gSGFzIHRoZSB0aXBweSBmaW5pc2hlZCB0cmFuc2l0aW9uaW5nIGluP1xuICAgIGlzU2hvd246IGZhbHNlXG4gIH07XG4gIHZhciBpbnN0YW5jZSA9IHtcbiAgICAvLyBwcm9wZXJ0aWVzXG4gICAgaWQ6IGlkLFxuICAgIHJlZmVyZW5jZTogcmVmZXJlbmNlLFxuICAgIHBvcHBlcjogZGl2KCksXG4gICAgcG9wcGVySW5zdGFuY2U6IHBvcHBlckluc3RhbmNlLFxuICAgIHByb3BzOiBwcm9wcyxcbiAgICBzdGF0ZTogc3RhdGUsXG4gICAgcGx1Z2luczogcGx1Z2lucyxcbiAgICAvLyBtZXRob2RzXG4gICAgY2xlYXJEZWxheVRpbWVvdXRzOiBjbGVhckRlbGF5VGltZW91dHMsXG4gICAgc2V0UHJvcHM6IHNldFByb3BzLFxuICAgIHNldENvbnRlbnQ6IHNldENvbnRlbnQsXG4gICAgc2hvdzogc2hvdyxcbiAgICBoaWRlOiBoaWRlLFxuICAgIGVuYWJsZTogZW5hYmxlLFxuICAgIGRpc2FibGU6IGRpc2FibGUsXG4gICAgdW5tb3VudDogdW5tb3VudCxcbiAgICBkZXN0cm95OiBkZXN0cm95XG4gIH07IC8vIFRPRE86IEludmVzdGlnYXRlIHdoeSB0aGlzIGVhcmx5IHJldHVybiBjYXVzZXMgYSBURFogZXJyb3IgaW4gdGhlIHRlc3RzIOKAlFxuICAvLyBpdCBkb2Vzbid0IHNlZW0gdG8gaGFwcGVuIGluIHRoZSBicm93c2VyXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5cbiAgaWYgKCFwcm9wcy5yZW5kZXIpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICBlcnJvcldoZW4odHJ1ZSwgJ3JlbmRlcigpIGZ1bmN0aW9uIGhhcyBub3QgYmVlbiBzdXBwbGllZC4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH0gLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIC8vIEluaXRpYWwgbXV0YXRpb25zXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5cbiAgdmFyIF9wcm9wcyRyZW5kZXIgPSBwcm9wcy5yZW5kZXIoaW5zdGFuY2UpLFxuICAgICAgcG9wcGVyID0gX3Byb3BzJHJlbmRlci5wb3BwZXIsXG4gICAgICBvblVwZGF0ZSA9IF9wcm9wcyRyZW5kZXIub25VcGRhdGU7XG5cbiAgcG9wcGVyLnNldEF0dHJpYnV0ZSgnZGF0YS10aXBweS1yb290JywgJycpO1xuICBwb3BwZXIuaWQgPSBcInRpcHB5LVwiICsgaW5zdGFuY2UuaWQ7XG4gIGluc3RhbmNlLnBvcHBlciA9IHBvcHBlcjtcbiAgcmVmZXJlbmNlLl90aXBweSA9IGluc3RhbmNlO1xuICBwb3BwZXIuX3RpcHB5ID0gaW5zdGFuY2U7XG4gIHZhciBwbHVnaW5zSG9va3MgPSBwbHVnaW5zLm1hcChmdW5jdGlvbiAocGx1Z2luKSB7XG4gICAgcmV0dXJuIHBsdWdpbi5mbihpbnN0YW5jZSk7XG4gIH0pO1xuICB2YXIgaGFzQXJpYUV4cGFuZGVkID0gcmVmZXJlbmNlLmhhc0F0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcpO1xuICBhZGRMaXN0ZW5lcnMoKTtcbiAgaGFuZGxlQXJpYUV4cGFuZGVkQXR0cmlidXRlKCk7XG4gIGhhbmRsZVN0eWxlcygpO1xuICBpbnZva2VIb29rKCdvbkNyZWF0ZScsIFtpbnN0YW5jZV0pO1xuXG4gIGlmIChwcm9wcy5zaG93T25DcmVhdGUpIHtcbiAgICBzY2hlZHVsZVNob3coKTtcbiAgfSAvLyBQcmV2ZW50IGEgdGlwcHkgd2l0aCBhIGRlbGF5IGZyb20gaGlkaW5nIGlmIHRoZSBjdXJzb3IgbGVmdCB0aGVuIHJldHVybmVkXG4gIC8vIGJlZm9yZSBpdCBzdGFydGVkIGhpZGluZ1xuXG5cbiAgcG9wcGVyLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGluc3RhbmNlLnByb3BzLmludGVyYWN0aXZlICYmIGluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZSkge1xuICAgICAgaW5zdGFuY2UuY2xlYXJEZWxheVRpbWVvdXRzKCk7XG4gICAgfVxuICB9KTtcbiAgcG9wcGVyLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBpZiAoaW5zdGFuY2UucHJvcHMuaW50ZXJhY3RpdmUgJiYgaW5zdGFuY2UucHJvcHMudHJpZ2dlci5pbmRleE9mKCdtb3VzZWVudGVyJykgPj0gMCkge1xuICAgICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGRlYm91bmNlZE9uTW91c2VNb3ZlKTtcbiAgICAgIGRlYm91bmNlZE9uTW91c2VNb3ZlKGV2ZW50KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gaW5zdGFuY2U7IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAvLyDwn5SSIFByaXZhdGUgbWV0aG9kc1xuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiBnZXROb3JtYWxpemVkVG91Y2hTZXR0aW5ncygpIHtcbiAgICB2YXIgdG91Y2ggPSBpbnN0YW5jZS5wcm9wcy50b3VjaDtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh0b3VjaCkgPyB0b3VjaCA6IFt0b3VjaCwgMF07XG4gIH1cblxuICBmdW5jdGlvbiBnZXRJc0N1c3RvbVRvdWNoQmVoYXZpb3IoKSB7XG4gICAgcmV0dXJuIGdldE5vcm1hbGl6ZWRUb3VjaFNldHRpbmdzKClbMF0gPT09ICdob2xkJztcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldElzRGVmYXVsdFJlbmRlckZuKCkge1xuICAgIHZhciBfaW5zdGFuY2UkcHJvcHMkcmVuZGU7XG5cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgcmV0dXJuICEhKChfaW5zdGFuY2UkcHJvcHMkcmVuZGUgPSBpbnN0YW5jZS5wcm9wcy5yZW5kZXIpID09IG51bGwgPyB2b2lkIDAgOiBfaW5zdGFuY2UkcHJvcHMkcmVuZGUuJCR0aXBweSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRDdXJyZW50VGFyZ2V0KCkge1xuICAgIHJldHVybiBjdXJyZW50VGFyZ2V0IHx8IHJlZmVyZW5jZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldERlZmF1bHRUZW1wbGF0ZUNoaWxkcmVuKCkge1xuICAgIHJldHVybiBnZXRDaGlsZHJlbihwb3BwZXIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0RGVsYXkoaXNTaG93KSB7XG4gICAgLy8gRm9yIHRvdWNoIG9yIGtleWJvYXJkIGlucHV0LCBmb3JjZSBgMGAgZGVsYXkgZm9yIFVYIHJlYXNvbnNcbiAgICAvLyBBbHNvIGlmIHRoZSBpbnN0YW5jZSBpcyBtb3VudGVkIGJ1dCBub3QgdmlzaWJsZSAodHJhbnNpdGlvbmluZyBvdXQpLFxuICAgIC8vIGlnbm9yZSBkZWxheVxuICAgIGlmIChpbnN0YW5jZS5zdGF0ZS5pc01vdW50ZWQgJiYgIWluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZSB8fCBjdXJyZW50SW5wdXQuaXNUb3VjaCB8fCBsYXN0VHJpZ2dlckV2ZW50ICYmIGxhc3RUcmlnZ2VyRXZlbnQudHlwZSA9PT0gJ2ZvY3VzJykge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIGdldFZhbHVlQXRJbmRleE9yUmV0dXJuKGluc3RhbmNlLnByb3BzLmRlbGF5LCBpc1Nob3cgPyAwIDogMSwgZGVmYXVsdFByb3BzLmRlbGF5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVN0eWxlcygpIHtcbiAgICBwb3BwZXIuc3R5bGUucG9pbnRlckV2ZW50cyA9IGluc3RhbmNlLnByb3BzLmludGVyYWN0aXZlICYmIGluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZSA/ICcnIDogJ25vbmUnO1xuICAgIHBvcHBlci5zdHlsZS56SW5kZXggPSBcIlwiICsgaW5zdGFuY2UucHJvcHMuekluZGV4O1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlSU9TQ2xhc3MoaXNBZGQpIHtcbiAgICB2YXIgc2hvdWxkQWRkID0gaXNBZGQgJiYgaXNJT1MgJiYgY3VycmVudElucHV0LmlzVG91Y2g7XG4gICAgZG9jLmJvZHkuY2xhc3NMaXN0W3Nob3VsZEFkZCA/ICdhZGQnIDogJ3JlbW92ZSddKElPU19DTEFTUyk7XG4gIH1cblxuICBmdW5jdGlvbiBpbnZva2VIb29rKGhvb2ssIGFyZ3MsIHNob3VsZEludm9rZVByb3BzSG9vaykge1xuICAgIGlmIChzaG91bGRJbnZva2VQcm9wc0hvb2sgPT09IHZvaWQgMCkge1xuICAgICAgc2hvdWxkSW52b2tlUHJvcHNIb29rID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBwbHVnaW5zSG9va3MuZm9yRWFjaChmdW5jdGlvbiAocGx1Z2luSG9va3MpIHtcbiAgICAgIGlmIChwbHVnaW5Ib29rc1tob29rXSkge1xuICAgICAgICBwbHVnaW5Ib29rc1tob29rXS5hcHBseSh2b2lkIDAsIGFyZ3MpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKHNob3VsZEludm9rZVByb3BzSG9vaykge1xuICAgICAgdmFyIF9pbnN0YW5jZSRwcm9wcztcblxuICAgICAgKF9pbnN0YW5jZSRwcm9wcyA9IGluc3RhbmNlLnByb3BzKVtob29rXS5hcHBseShfaW5zdGFuY2UkcHJvcHMsIGFyZ3MpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUFyaWFDb250ZW50QXR0cmlidXRlKCkge1xuICAgIHZhciBhcmlhID0gaW5zdGFuY2UucHJvcHMuYXJpYTtcblxuICAgIGlmICghYXJpYS5jb250ZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGF0dHIgPSBcImFyaWEtXCIgKyBhcmlhLmNvbnRlbnQ7XG4gICAgdmFyIGlkID0gcG9wcGVyLmlkO1xuICAgIHZhciBub2RlcyA9IG5vcm1hbGl6ZVRvQXJyYXkoaW5zdGFuY2UucHJvcHMudHJpZ2dlclRhcmdldCB8fCByZWZlcmVuY2UpO1xuICAgIG5vZGVzLmZvckVhY2goZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIHZhciBjdXJyZW50VmFsdWUgPSBub2RlLmdldEF0dHJpYnV0ZShhdHRyKTtcblxuICAgICAgaWYgKGluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZSkge1xuICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShhdHRyLCBjdXJyZW50VmFsdWUgPyBjdXJyZW50VmFsdWUgKyBcIiBcIiArIGlkIDogaWQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIG5leHRWYWx1ZSA9IGN1cnJlbnRWYWx1ZSAmJiBjdXJyZW50VmFsdWUucmVwbGFjZShpZCwgJycpLnRyaW0oKTtcblxuICAgICAgICBpZiAobmV4dFZhbHVlKSB7XG4gICAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoYXR0ciwgbmV4dFZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShhdHRyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlQXJpYUV4cGFuZGVkQXR0cmlidXRlKCkge1xuICAgIGlmIChoYXNBcmlhRXhwYW5kZWQgfHwgIWluc3RhbmNlLnByb3BzLmFyaWEuZXhwYW5kZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbm9kZXMgPSBub3JtYWxpemVUb0FycmF5KGluc3RhbmNlLnByb3BzLnRyaWdnZXJUYXJnZXQgfHwgcmVmZXJlbmNlKTtcbiAgICBub2Rlcy5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICBpZiAoaW5zdGFuY2UucHJvcHMuaW50ZXJhY3RpdmUpIHtcbiAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCBpbnN0YW5jZS5zdGF0ZS5pc1Zpc2libGUgJiYgbm9kZSA9PT0gZ2V0Q3VycmVudFRhcmdldCgpID8gJ3RydWUnIDogJ2ZhbHNlJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gY2xlYW51cEludGVyYWN0aXZlTW91c2VMaXN0ZW5lcnMoKSB7XG4gICAgZG9jLmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIHNjaGVkdWxlSGlkZSk7XG4gICAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGRlYm91bmNlZE9uTW91c2VNb3ZlKTtcbiAgICBtb3VzZU1vdmVMaXN0ZW5lcnMgPSBtb3VzZU1vdmVMaXN0ZW5lcnMuZmlsdGVyKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIGxpc3RlbmVyICE9PSBkZWJvdW5jZWRPbk1vdXNlTW92ZTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uRG9jdW1lbnRNb3VzZURvd24oZXZlbnQpIHtcbiAgICAvLyBDbGlja2VkIG9uIGludGVyYWN0aXZlIHBvcHBlclxuICAgIGlmIChpbnN0YW5jZS5wcm9wcy5pbnRlcmFjdGl2ZSAmJiBwb3BwZXIuY29udGFpbnMoZXZlbnQudGFyZ2V0KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gQ2xpY2tlZCBvbiB0aGUgZXZlbnQgbGlzdGVuZXJzIHRhcmdldFxuXG5cbiAgICBpZiAoZ2V0Q3VycmVudFRhcmdldCgpLmNvbnRhaW5zKGV2ZW50LnRhcmdldCkpIHtcbiAgICAgIGlmIChjdXJyZW50SW5wdXQuaXNUb3VjaCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChpbnN0YW5jZS5zdGF0ZS5pc1Zpc2libGUgJiYgaW5zdGFuY2UucHJvcHMudHJpZ2dlci5pbmRleE9mKCdjbGljaycpID49IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpbnN0YW5jZS5wcm9wcy5vbkNsaWNrT3V0c2lkZShpbnN0YW5jZSwgZXZlbnQpO1xuICAgIH1cblxuICAgIGlmIChpbnN0YW5jZS5wcm9wcy5oaWRlT25DbGljayA9PT0gdHJ1ZSkge1xuICAgICAgaXNWaXNpYmxlRnJvbUNsaWNrID0gZmFsc2U7XG4gICAgICBpbnN0YW5jZS5jbGVhckRlbGF5VGltZW91dHMoKTtcbiAgICAgIGluc3RhbmNlLmhpZGUoKTsgLy8gYG1vdXNlZG93bmAgZXZlbnQgaXMgZmlyZWQgcmlnaHQgYmVmb3JlIGBmb2N1c2AgaWYgcHJlc3NpbmcgdGhlXG4gICAgICAvLyBjdXJyZW50VGFyZ2V0LiBUaGlzIGxldHMgYSB0aXBweSB3aXRoIGBmb2N1c2AgdHJpZ2dlciBrbm93IHRoYXQgaXRcbiAgICAgIC8vIHNob3VsZCBub3Qgc2hvd1xuXG4gICAgICBkaWRIaWRlRHVlVG9Eb2N1bWVudE1vdXNlRG93biA9IHRydWU7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZGlkSGlkZUR1ZVRvRG9jdW1lbnRNb3VzZURvd24gPSBmYWxzZTtcbiAgICAgIH0pOyAvLyBUaGUgbGlzdGVuZXIgZ2V0cyBhZGRlZCBpbiBgc2NoZWR1bGVTaG93KClgLCBidXQgdGhpcyBtYXkgYmUgaGlkaW5nIGl0XG4gICAgICAvLyBiZWZvcmUgaXQgc2hvd3MsIGFuZCBoaWRlKCkncyBlYXJseSBiYWlsLW91dCBiZWhhdmlvciBjYW4gcHJldmVudCBpdFxuICAgICAgLy8gZnJvbSBiZWluZyBjbGVhbmVkIHVwXG5cbiAgICAgIGlmICghaW5zdGFuY2Uuc3RhdGUuaXNNb3VudGVkKSB7XG4gICAgICAgIHJlbW92ZURvY3VtZW50TW91c2VEb3duTGlzdGVuZXIoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhZGREb2N1bWVudE1vdXNlRG93bkxpc3RlbmVyKCkge1xuICAgIGRvYy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBvbkRvY3VtZW50TW91c2VEb3duLCB0cnVlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZURvY3VtZW50TW91c2VEb3duTGlzdGVuZXIoKSB7XG4gICAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIG9uRG9jdW1lbnRNb3VzZURvd24sIHRydWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25UcmFuc2l0aW9uZWRPdXQoZHVyYXRpb24sIGNhbGxiYWNrKSB7XG4gICAgb25UcmFuc2l0aW9uRW5kKGR1cmF0aW9uLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIWluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZSAmJiBwb3BwZXIucGFyZW50Tm9kZSAmJiBwb3BwZXIucGFyZW50Tm9kZS5jb250YWlucyhwb3BwZXIpKSB7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBvblRyYW5zaXRpb25lZEluKGR1cmF0aW9uLCBjYWxsYmFjaykge1xuICAgIG9uVHJhbnNpdGlvbkVuZChkdXJhdGlvbiwgY2FsbGJhY2spO1xuICB9XG5cbiAgZnVuY3Rpb24gb25UcmFuc2l0aW9uRW5kKGR1cmF0aW9uLCBjYWxsYmFjaykge1xuICAgIHZhciBib3ggPSBnZXREZWZhdWx0VGVtcGxhdGVDaGlsZHJlbigpLmJveDtcblxuICAgIGZ1bmN0aW9uIGxpc3RlbmVyKGV2ZW50KSB7XG4gICAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSBib3gpIHtcbiAgICAgICAgdXBkYXRlVHJhbnNpdGlvbkVuZExpc3RlbmVyKGJveCwgJ3JlbW92ZScsIGxpc3RlbmVyKTtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICB9IC8vIE1ha2UgY2FsbGJhY2sgc3luY2hyb25vdXMgaWYgZHVyYXRpb24gaXMgMFxuICAgIC8vIGB0cmFuc2l0aW9uZW5kYCB3b24ndCBmaXJlIG90aGVyd2lzZVxuXG5cbiAgICBpZiAoZHVyYXRpb24gPT09IDApIHtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH1cblxuICAgIHVwZGF0ZVRyYW5zaXRpb25FbmRMaXN0ZW5lcihib3gsICdyZW1vdmUnLCBjdXJyZW50VHJhbnNpdGlvbkVuZExpc3RlbmVyKTtcbiAgICB1cGRhdGVUcmFuc2l0aW9uRW5kTGlzdGVuZXIoYm94LCAnYWRkJywgbGlzdGVuZXIpO1xuICAgIGN1cnJlbnRUcmFuc2l0aW9uRW5kTGlzdGVuZXIgPSBsaXN0ZW5lcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uKGV2ZW50VHlwZSwgaGFuZGxlciwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgbm9kZXMgPSBub3JtYWxpemVUb0FycmF5KGluc3RhbmNlLnByb3BzLnRyaWdnZXJUYXJnZXQgfHwgcmVmZXJlbmNlKTtcbiAgICBub2Rlcy5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgICAgIGxpc3RlbmVycy5wdXNoKHtcbiAgICAgICAgbm9kZTogbm9kZSxcbiAgICAgICAgZXZlbnRUeXBlOiBldmVudFR5cGUsXG4gICAgICAgIGhhbmRsZXI6IGhhbmRsZXIsXG4gICAgICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gYWRkTGlzdGVuZXJzKCkge1xuICAgIGlmIChnZXRJc0N1c3RvbVRvdWNoQmVoYXZpb3IoKSkge1xuICAgICAgb24oJ3RvdWNoc3RhcnQnLCBvblRyaWdnZXIsIFBBU1NJVkUpO1xuICAgICAgb24oJ3RvdWNoZW5kJywgb25Nb3VzZUxlYXZlLCBQQVNTSVZFKTtcbiAgICB9XG5cbiAgICBzcGxpdEJ5U3BhY2VzKGluc3RhbmNlLnByb3BzLnRyaWdnZXIpLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50VHlwZSkge1xuICAgICAgaWYgKGV2ZW50VHlwZSA9PT0gJ21hbnVhbCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBvbihldmVudFR5cGUsIG9uVHJpZ2dlcik7XG5cbiAgICAgIHN3aXRjaCAoZXZlbnRUeXBlKSB7XG4gICAgICAgIGNhc2UgJ21vdXNlZW50ZXInOlxuICAgICAgICAgIG9uKCdtb3VzZWxlYXZlJywgb25Nb3VzZUxlYXZlKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdmb2N1cyc6XG4gICAgICAgICAgb24oaXNJRSA/ICdmb2N1c291dCcgOiAnYmx1cicsIG9uQmx1ck9yRm9jdXNPdXQpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2ZvY3VzaW4nOlxuICAgICAgICAgIG9uKCdmb2N1c291dCcsIG9uQmx1ck9yRm9jdXNPdXQpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXJzKCkge1xuICAgIGxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICB2YXIgbm9kZSA9IF9yZWYubm9kZSxcbiAgICAgICAgICBldmVudFR5cGUgPSBfcmVmLmV2ZW50VHlwZSxcbiAgICAgICAgICBoYW5kbGVyID0gX3JlZi5oYW5kbGVyLFxuICAgICAgICAgIG9wdGlvbnMgPSBfcmVmLm9wdGlvbnM7XG4gICAgICBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgICB9KTtcbiAgICBsaXN0ZW5lcnMgPSBbXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uVHJpZ2dlcihldmVudCkge1xuICAgIHZhciBzaG91bGRTY2hlZHVsZUNsaWNrSGlkZSA9IGZhbHNlO1xuXG4gICAgaWYgKCFpbnN0YW5jZS5zdGF0ZS5pc0VuYWJsZWQgfHwgaXNFdmVudExpc3RlbmVyU3RvcHBlZChldmVudCkgfHwgZGlkSGlkZUR1ZVRvRG9jdW1lbnRNb3VzZURvd24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsYXN0VHJpZ2dlckV2ZW50ID0gZXZlbnQ7XG4gICAgY3VycmVudFRhcmdldCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQ7XG4gICAgaGFuZGxlQXJpYUV4cGFuZGVkQXR0cmlidXRlKCk7XG5cbiAgICBpZiAoIWluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZSAmJiBpc01vdXNlRXZlbnQoZXZlbnQpKSB7XG4gICAgICAvLyBJZiBzY3JvbGxpbmcsIGBtb3VzZWVudGVyYCBldmVudHMgY2FuIGJlIGZpcmVkIGlmIHRoZSBjdXJzb3IgbGFuZHNcbiAgICAgIC8vIG92ZXIgYSBuZXcgdGFyZ2V0LCBidXQgYG1vdXNlbW92ZWAgZXZlbnRzIGRvbid0IGdldCBmaXJlZC4gVGhpc1xuICAgICAgLy8gY2F1c2VzIGludGVyYWN0aXZlIHRvb2x0aXBzIHRvIGdldCBzdHVjayBvcGVuIHVudGlsIHRoZSBjdXJzb3IgaXNcbiAgICAgIC8vIG1vdmVkXG4gICAgICBtb3VzZU1vdmVMaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RlbmVyKGV2ZW50KTtcbiAgICAgIH0pO1xuICAgIH0gLy8gVG9nZ2xlIHNob3cvaGlkZSB3aGVuIGNsaWNraW5nIGNsaWNrLXRyaWdnZXJlZCB0b29sdGlwc1xuXG5cbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ2NsaWNrJyAmJiAoaW5zdGFuY2UucHJvcHMudHJpZ2dlci5pbmRleE9mKCdtb3VzZWVudGVyJykgPCAwIHx8IGlzVmlzaWJsZUZyb21DbGljaykgJiYgaW5zdGFuY2UucHJvcHMuaGlkZU9uQ2xpY2sgIT09IGZhbHNlICYmIGluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZSkge1xuICAgICAgc2hvdWxkU2NoZWR1bGVDbGlja0hpZGUgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgX2dldE5vcm1hbGl6ZWRUb3VjaFNlID0gZ2V0Tm9ybWFsaXplZFRvdWNoU2V0dGluZ3MoKSxcbiAgICAgICAgICB2YWx1ZSA9IF9nZXROb3JtYWxpemVkVG91Y2hTZVswXSxcbiAgICAgICAgICBkdXJhdGlvbiA9IF9nZXROb3JtYWxpemVkVG91Y2hTZVsxXTtcblxuICAgICAgaWYgKGN1cnJlbnRJbnB1dC5pc1RvdWNoICYmIHZhbHVlID09PSAnaG9sZCcgJiYgZHVyYXRpb24pIHtcbiAgICAgICAgLy8gV2UgY2FuIGhpamFjayB0aGUgc2hvdyB0aW1lb3V0IGhlcmUsIGl0IHdpbGwgYmUgY2xlYXJlZCBieVxuICAgICAgICAvLyBgc2NoZWR1bGVIaWRlKClgIHdoZW4gbmVjZXNzYXJ5XG4gICAgICAgIHNob3dUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc2NoZWR1bGVTaG93KGV2ZW50KTtcbiAgICAgICAgfSwgZHVyYXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2NoZWR1bGVTaG93KGV2ZW50KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ2NsaWNrJykge1xuICAgICAgaXNWaXNpYmxlRnJvbUNsaWNrID0gIXNob3VsZFNjaGVkdWxlQ2xpY2tIaWRlO1xuICAgIH1cblxuICAgIGlmIChzaG91bGRTY2hlZHVsZUNsaWNrSGlkZSkge1xuICAgICAgc2NoZWR1bGVIaWRlKGV2ZW50KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvbk1vdXNlTW92ZShldmVudCkge1xuICAgIHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG4gICAgdmFyIGlzQ3Vyc29yT3ZlclJlZmVyZW5jZU9yUG9wcGVyID0gcmVmZXJlbmNlLmNvbnRhaW5zKHRhcmdldCkgfHwgcG9wcGVyLmNvbnRhaW5zKHRhcmdldCk7XG5cbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ21vdXNlbW92ZScgJiYgaXNDdXJzb3JPdmVyUmVmZXJlbmNlT3JQb3BwZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgcG9wcGVyVHJlZURhdGEgPSBnZXROZXN0ZWRQb3BwZXJUcmVlKCkuY29uY2F0KHBvcHBlcikubWFwKGZ1bmN0aW9uIChwb3BwZXIpIHtcbiAgICAgIHZhciBfaW5zdGFuY2UkcG9wcGVySW5zdGE7XG5cbiAgICAgIHZhciBpbnN0YW5jZSA9IHBvcHBlci5fdGlwcHk7XG4gICAgICB2YXIgc3RhdGUgPSAoX2luc3RhbmNlJHBvcHBlckluc3RhID0gaW5zdGFuY2UucG9wcGVySW5zdGFuY2UpID09IG51bGwgPyB2b2lkIDAgOiBfaW5zdGFuY2UkcG9wcGVySW5zdGEuc3RhdGU7XG5cbiAgICAgIGlmIChzdGF0ZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHBvcHBlclJlY3Q6IHBvcHBlci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgICBwb3BwZXJTdGF0ZTogc3RhdGUsXG4gICAgICAgICAgcHJvcHM6IHByb3BzXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0pLmZpbHRlcihCb29sZWFuKTtcblxuICAgIGlmIChpc0N1cnNvck91dHNpZGVJbnRlcmFjdGl2ZUJvcmRlcihwb3BwZXJUcmVlRGF0YSwgZXZlbnQpKSB7XG4gICAgICBjbGVhbnVwSW50ZXJhY3RpdmVNb3VzZUxpc3RlbmVycygpO1xuICAgICAgc2NoZWR1bGVIaWRlKGV2ZW50KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvbk1vdXNlTGVhdmUoZXZlbnQpIHtcbiAgICB2YXIgc2hvdWxkQmFpbCA9IGlzRXZlbnRMaXN0ZW5lclN0b3BwZWQoZXZlbnQpIHx8IGluc3RhbmNlLnByb3BzLnRyaWdnZXIuaW5kZXhPZignY2xpY2snKSA+PSAwICYmIGlzVmlzaWJsZUZyb21DbGljaztcblxuICAgIGlmIChzaG91bGRCYWlsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGluc3RhbmNlLnByb3BzLmludGVyYWN0aXZlKSB7XG4gICAgICBkb2MuYm9keS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgc2NoZWR1bGVIaWRlKTtcbiAgICAgIGRvYy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBkZWJvdW5jZWRPbk1vdXNlTW92ZSk7XG4gICAgICBwdXNoSWZVbmlxdWUobW91c2VNb3ZlTGlzdGVuZXJzLCBkZWJvdW5jZWRPbk1vdXNlTW92ZSk7XG4gICAgICBkZWJvdW5jZWRPbk1vdXNlTW92ZShldmVudCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc2NoZWR1bGVIaWRlKGV2ZW50KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQmx1ck9yRm9jdXNPdXQoZXZlbnQpIHtcbiAgICBpZiAoaW5zdGFuY2UucHJvcHMudHJpZ2dlci5pbmRleE9mKCdmb2N1c2luJykgPCAwICYmIGV2ZW50LnRhcmdldCAhPT0gZ2V0Q3VycmVudFRhcmdldCgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBJZiBmb2N1cyB3YXMgbW92ZWQgdG8gd2l0aGluIHRoZSBwb3BwZXJcblxuXG4gICAgaWYgKGluc3RhbmNlLnByb3BzLmludGVyYWN0aXZlICYmIGV2ZW50LnJlbGF0ZWRUYXJnZXQgJiYgcG9wcGVyLmNvbnRhaW5zKGV2ZW50LnJlbGF0ZWRUYXJnZXQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc2NoZWR1bGVIaWRlKGV2ZW50KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzRXZlbnRMaXN0ZW5lclN0b3BwZWQoZXZlbnQpIHtcbiAgICByZXR1cm4gY3VycmVudElucHV0LmlzVG91Y2ggPyBnZXRJc0N1c3RvbVRvdWNoQmVoYXZpb3IoKSAhPT0gZXZlbnQudHlwZS5pbmRleE9mKCd0b3VjaCcpID49IDAgOiBmYWxzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVBvcHBlckluc3RhbmNlKCkge1xuICAgIGRlc3Ryb3lQb3BwZXJJbnN0YW5jZSgpO1xuICAgIHZhciBfaW5zdGFuY2UkcHJvcHMyID0gaW5zdGFuY2UucHJvcHMsXG4gICAgICAgIHBvcHBlck9wdGlvbnMgPSBfaW5zdGFuY2UkcHJvcHMyLnBvcHBlck9wdGlvbnMsXG4gICAgICAgIHBsYWNlbWVudCA9IF9pbnN0YW5jZSRwcm9wczIucGxhY2VtZW50LFxuICAgICAgICBvZmZzZXQgPSBfaW5zdGFuY2UkcHJvcHMyLm9mZnNldCxcbiAgICAgICAgZ2V0UmVmZXJlbmNlQ2xpZW50UmVjdCA9IF9pbnN0YW5jZSRwcm9wczIuZ2V0UmVmZXJlbmNlQ2xpZW50UmVjdCxcbiAgICAgICAgbW92ZVRyYW5zaXRpb24gPSBfaW5zdGFuY2UkcHJvcHMyLm1vdmVUcmFuc2l0aW9uO1xuICAgIHZhciBhcnJvdyA9IGdldElzRGVmYXVsdFJlbmRlckZuKCkgPyBnZXRDaGlsZHJlbihwb3BwZXIpLmFycm93IDogbnVsbDtcbiAgICB2YXIgY29tcHV0ZWRSZWZlcmVuY2UgPSBnZXRSZWZlcmVuY2VDbGllbnRSZWN0ID8ge1xuICAgICAgZ2V0Qm91bmRpbmdDbGllbnRSZWN0OiBnZXRSZWZlcmVuY2VDbGllbnRSZWN0XG4gICAgfSA6IHJlZmVyZW5jZTtcbiAgICB2YXIgdGlwcHlNb2RpZmllciA9IHtcbiAgICAgIG5hbWU6ICckJHRpcHB5JyxcbiAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICBwaGFzZTogJ2JlZm9yZVdyaXRlJyxcbiAgICAgIHJlcXVpcmVzOiBbJ2NvbXB1dGVTdHlsZXMnXSxcbiAgICAgIGZuOiBmdW5jdGlvbiBmbihfcmVmMikge1xuICAgICAgICB2YXIgc3RhdGUgPSBfcmVmMi5zdGF0ZTtcblxuICAgICAgICBpZiAoZ2V0SXNEZWZhdWx0UmVuZGVyRm4oKSkge1xuICAgICAgICAgIHZhciBfZ2V0RGVmYXVsdFRlbXBsYXRlQ2ggPSBnZXREZWZhdWx0VGVtcGxhdGVDaGlsZHJlbigpLFxuICAgICAgICAgICAgICBib3ggPSBfZ2V0RGVmYXVsdFRlbXBsYXRlQ2guYm94O1xuXG4gICAgICAgICAgWydwbGFjZW1lbnQnLCAncmVmZXJlbmNlLWhpZGRlbicsICdlc2NhcGVkJ10uZm9yRWFjaChmdW5jdGlvbiAoYXR0cikge1xuICAgICAgICAgICAgaWYgKGF0dHIgPT09ICdwbGFjZW1lbnQnKSB7XG4gICAgICAgICAgICAgIGJveC5zZXRBdHRyaWJ1dGUoJ2RhdGEtcGxhY2VtZW50Jywgc3RhdGUucGxhY2VtZW50KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmIChzdGF0ZS5hdHRyaWJ1dGVzLnBvcHBlcltcImRhdGEtcG9wcGVyLVwiICsgYXR0cl0pIHtcbiAgICAgICAgICAgICAgICBib3guc2V0QXR0cmlidXRlKFwiZGF0YS1cIiArIGF0dHIsICcnKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBib3gucmVtb3ZlQXR0cmlidXRlKFwiZGF0YS1cIiArIGF0dHIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc3RhdGUuYXR0cmlidXRlcy5wb3BwZXIgPSB7fTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgdmFyIGFycm93TW9kaWZpZXIgPSB7XG4gICAgICBuYW1lOiAnYXJyb3cnLFxuICAgICAgZW5hYmxlZDogISFhcnJvdyxcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgZWxlbWVudDogYXJyb3csXG4gICAgICAgIHBhZGRpbmc6IDNcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciBtb2RpZmllcnMgPSBbe1xuICAgICAgbmFtZTogJ29mZnNldCcsXG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIG9mZnNldDogb2Zmc2V0XG4gICAgICB9XG4gICAgfSwge1xuICAgICAgbmFtZTogJ3ByZXZlbnRPdmVyZmxvdycsXG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIHBhZGRpbmc6IHtcbiAgICAgICAgICB0b3A6IDIsXG4gICAgICAgICAgYm90dG9tOiAyLFxuICAgICAgICAgIGxlZnQ6IDUsXG4gICAgICAgICAgcmlnaHQ6IDVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIG5hbWU6ICdmbGlwJyxcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgcGFkZGluZzogNVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIG5hbWU6ICdjb21wdXRlU3R5bGVzJyxcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgYWRhcHRpdmU6ICFtb3ZlVHJhbnNpdGlvblxuICAgICAgfVxuICAgIH1dLmNvbmNhdChnZXRJc0RlZmF1bHRSZW5kZXJGbigpID8gW2Fycm93TW9kaWZpZXJdIDogW10sIChwb3BwZXJPcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBwb3BwZXJPcHRpb25zLm1vZGlmaWVycykgfHwgW10sIFt0aXBweU1vZGlmaWVyXSk7XG4gICAgaW5zdGFuY2UucG9wcGVySW5zdGFuY2UgPSBjb3JlLmNyZWF0ZVBvcHBlcihjb21wdXRlZFJlZmVyZW5jZSwgcG9wcGVyLCBPYmplY3QuYXNzaWduKHt9LCBwb3BwZXJPcHRpb25zLCB7XG4gICAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudCxcbiAgICAgIG9uRmlyc3RVcGRhdGU6IG9uRmlyc3RVcGRhdGUsXG4gICAgICBtb2RpZmllcnM6IG1vZGlmaWVyc1xuICAgIH0pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlc3Ryb3lQb3BwZXJJbnN0YW5jZSgpIHtcbiAgICBpZiAoaW5zdGFuY2UucG9wcGVySW5zdGFuY2UpIHtcbiAgICAgIGluc3RhbmNlLnBvcHBlckluc3RhbmNlLmRlc3Ryb3koKTtcbiAgICAgIGluc3RhbmNlLnBvcHBlckluc3RhbmNlID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICB2YXIgYXBwZW5kVG8gPSBpbnN0YW5jZS5wcm9wcy5hcHBlbmRUbztcbiAgICB2YXIgcGFyZW50Tm9kZTsgLy8gQnkgZGVmYXVsdCwgd2UnbGwgYXBwZW5kIHRoZSBwb3BwZXIgdG8gdGhlIHRyaWdnZXJUYXJnZXRzJ3MgcGFyZW50Tm9kZSBzb1xuICAgIC8vIGl0J3MgZGlyZWN0bHkgYWZ0ZXIgdGhlIHJlZmVyZW5jZSBlbGVtZW50IHNvIHRoZSBlbGVtZW50cyBpbnNpZGUgdGhlXG4gICAgLy8gdGlwcHkgY2FuIGJlIHRhYmJlZCB0b1xuICAgIC8vIElmIHRoZXJlIGFyZSBjbGlwcGluZyBpc3N1ZXMsIHRoZSB1c2VyIGNhbiBzcGVjaWZ5IGEgZGlmZmVyZW50IGFwcGVuZFRvXG4gICAgLy8gYW5kIGVuc3VyZSBmb2N1cyBtYW5hZ2VtZW50IGlzIGhhbmRsZWQgY29ycmVjdGx5IG1hbnVhbGx5XG5cbiAgICB2YXIgbm9kZSA9IGdldEN1cnJlbnRUYXJnZXQoKTtcblxuICAgIGlmIChpbnN0YW5jZS5wcm9wcy5pbnRlcmFjdGl2ZSAmJiBhcHBlbmRUbyA9PT0gZGVmYXVsdFByb3BzLmFwcGVuZFRvIHx8IGFwcGVuZFRvID09PSAncGFyZW50Jykge1xuICAgICAgcGFyZW50Tm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFyZW50Tm9kZSA9IGludm9rZVdpdGhBcmdzT3JSZXR1cm4oYXBwZW5kVG8sIFtub2RlXSk7XG4gICAgfSAvLyBUaGUgcG9wcGVyIGVsZW1lbnQgbmVlZHMgdG8gZXhpc3Qgb24gdGhlIERPTSBiZWZvcmUgaXRzIHBvc2l0aW9uIGNhbiBiZVxuICAgIC8vIHVwZGF0ZWQgYXMgUG9wcGVyIG5lZWRzIHRvIHJlYWQgaXRzIGRpbWVuc2lvbnNcblxuXG4gICAgaWYgKCFwYXJlbnROb2RlLmNvbnRhaW5zKHBvcHBlcikpIHtcbiAgICAgIHBhcmVudE5vZGUuYXBwZW5kQ2hpbGQocG9wcGVyKTtcbiAgICB9XG5cbiAgICBjcmVhdGVQb3BwZXJJbnN0YW5jZSgpO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAvLyBBY2Nlc3NpYmlsaXR5IGNoZWNrXG4gICAgICB3YXJuV2hlbihpbnN0YW5jZS5wcm9wcy5pbnRlcmFjdGl2ZSAmJiBhcHBlbmRUbyA9PT0gZGVmYXVsdFByb3BzLmFwcGVuZFRvICYmIG5vZGUubmV4dEVsZW1lbnRTaWJsaW5nICE9PSBwb3BwZXIsIFsnSW50ZXJhY3RpdmUgdGlwcHkgZWxlbWVudCBtYXkgbm90IGJlIGFjY2Vzc2libGUgdmlhIGtleWJvYXJkJywgJ25hdmlnYXRpb24gYmVjYXVzZSBpdCBpcyBub3QgZGlyZWN0bHkgYWZ0ZXIgdGhlIHJlZmVyZW5jZSBlbGVtZW50JywgJ2luIHRoZSBET00gc291cmNlIG9yZGVyLicsICdcXG5cXG4nLCAnVXNpbmcgYSB3cmFwcGVyIDxkaXY+IG9yIDxzcGFuPiB0YWcgYXJvdW5kIHRoZSByZWZlcmVuY2UgZWxlbWVudCcsICdzb2x2ZXMgdGhpcyBieSBjcmVhdGluZyBhIG5ldyBwYXJlbnROb2RlIGNvbnRleHQuJywgJ1xcblxcbicsICdTcGVjaWZ5aW5nIGBhcHBlbmRUbzogZG9jdW1lbnQuYm9keWAgc2lsZW5jZXMgdGhpcyB3YXJuaW5nLCBidXQgaXQnLCAnYXNzdW1lcyB5b3UgYXJlIHVzaW5nIGEgZm9jdXMgbWFuYWdlbWVudCBzb2x1dGlvbiB0byBoYW5kbGUnLCAna2V5Ym9hcmQgbmF2aWdhdGlvbi4nLCAnXFxuXFxuJywgJ1NlZTogaHR0cHM6Ly9hdG9taWtzLmdpdGh1Yi5pby90aXBweWpzL3Y2L2FjY2Vzc2liaWxpdHkvI2ludGVyYWN0aXZpdHknXS5qb2luKCcgJykpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldE5lc3RlZFBvcHBlclRyZWUoKSB7XG4gICAgcmV0dXJuIGFycmF5RnJvbShwb3BwZXIucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtdGlwcHktcm9vdF0nKSk7XG4gIH1cblxuICBmdW5jdGlvbiBzY2hlZHVsZVNob3coZXZlbnQpIHtcbiAgICBpbnN0YW5jZS5jbGVhckRlbGF5VGltZW91dHMoKTtcblxuICAgIGlmIChldmVudCkge1xuICAgICAgaW52b2tlSG9vaygnb25UcmlnZ2VyJywgW2luc3RhbmNlLCBldmVudF0pO1xuICAgIH1cblxuICAgIGFkZERvY3VtZW50TW91c2VEb3duTGlzdGVuZXIoKTtcbiAgICB2YXIgZGVsYXkgPSBnZXREZWxheSh0cnVlKTtcblxuICAgIGlmIChkZWxheSkge1xuICAgICAgc2hvd1RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaW5zdGFuY2Uuc2hvdygpO1xuICAgICAgfSwgZGVsYXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnN0YW5jZS5zaG93KCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2NoZWR1bGVIaWRlKGV2ZW50KSB7XG4gICAgaW5zdGFuY2UuY2xlYXJEZWxheVRpbWVvdXRzKCk7XG4gICAgaW52b2tlSG9vaygnb25VbnRyaWdnZXInLCBbaW5zdGFuY2UsIGV2ZW50XSk7XG5cbiAgICBpZiAoIWluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZSkge1xuICAgICAgcmVtb3ZlRG9jdW1lbnRNb3VzZURvd25MaXN0ZW5lcigpO1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gRm9yIGludGVyYWN0aXZlIHRpcHBpZXMsIHNjaGVkdWxlSGlkZSBpcyBhZGRlZCB0byBhIGRvY3VtZW50LmJvZHkgaGFuZGxlclxuICAgIC8vIGZyb20gb25Nb3VzZUxlYXZlIHNvIG11c3QgaW50ZXJjZXB0IHNjaGVkdWxlZCBoaWRlcyBmcm9tIG1vdXNlbW92ZS9sZWF2ZVxuICAgIC8vIGV2ZW50cyB3aGVuIHRyaWdnZXIgY29udGFpbnMgbW91c2VlbnRlciBhbmQgY2xpY2ssIGFuZCB0aGUgdGlwIGlzXG4gICAgLy8gY3VycmVudGx5IHNob3duIGFzIGEgcmVzdWx0IG9mIGEgY2xpY2suXG5cblxuICAgIGlmIChpbnN0YW5jZS5wcm9wcy50cmlnZ2VyLmluZGV4T2YoJ21vdXNlZW50ZXInKSA+PSAwICYmIGluc3RhbmNlLnByb3BzLnRyaWdnZXIuaW5kZXhPZignY2xpY2snKSA+PSAwICYmIFsnbW91c2VsZWF2ZScsICdtb3VzZW1vdmUnXS5pbmRleE9mKGV2ZW50LnR5cGUpID49IDAgJiYgaXNWaXNpYmxlRnJvbUNsaWNrKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGRlbGF5ID0gZ2V0RGVsYXkoZmFsc2UpO1xuXG4gICAgaWYgKGRlbGF5KSB7XG4gICAgICBoaWRlVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoaW5zdGFuY2Uuc3RhdGUuaXNWaXNpYmxlKSB7XG4gICAgICAgICAgaW5zdGFuY2UuaGlkZSgpO1xuICAgICAgICB9XG4gICAgICB9LCBkZWxheSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEZpeGVzIGEgYHRyYW5zaXRpb25lbmRgIHByb2JsZW0gd2hlbiBpdCBmaXJlcyAxIGZyYW1lIHRvb1xuICAgICAgLy8gbGF0ZSBzb21ldGltZXMsIHdlIGRvbid0IHdhbnQgaGlkZSgpIHRvIGJlIGNhbGxlZC5cbiAgICAgIHNjaGVkdWxlSGlkZUFuaW1hdGlvbkZyYW1lID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaW5zdGFuY2UuaGlkZSgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAvLyDwn5SRIFB1YmxpYyBtZXRob2RzXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5cbiAgZnVuY3Rpb24gZW5hYmxlKCkge1xuICAgIGluc3RhbmNlLnN0YXRlLmlzRW5hYmxlZCA9IHRydWU7XG4gIH1cblxuICBmdW5jdGlvbiBkaXNhYmxlKCkge1xuICAgIC8vIERpc2FibGluZyB0aGUgaW5zdGFuY2Ugc2hvdWxkIGFsc28gaGlkZSBpdFxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hdG9taWtzL3RpcHB5LmpzLXJlYWN0L2lzc3Vlcy8xMDZcbiAgICBpbnN0YW5jZS5oaWRlKCk7XG4gICAgaW5zdGFuY2Uuc3RhdGUuaXNFbmFibGVkID0gZmFsc2U7XG4gIH1cblxuICBmdW5jdGlvbiBjbGVhckRlbGF5VGltZW91dHMoKSB7XG4gICAgY2xlYXJUaW1lb3V0KHNob3dUaW1lb3V0KTtcbiAgICBjbGVhclRpbWVvdXQoaGlkZVRpbWVvdXQpO1xuICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHNjaGVkdWxlSGlkZUFuaW1hdGlvbkZyYW1lKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldFByb3BzKHBhcnRpYWxQcm9wcykge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgd2FybldoZW4oaW5zdGFuY2Uuc3RhdGUuaXNEZXN0cm95ZWQsIGNyZWF0ZU1lbW9yeUxlYWtXYXJuaW5nKCdzZXRQcm9wcycpKTtcbiAgICB9XG5cbiAgICBpZiAoaW5zdGFuY2Uuc3RhdGUuaXNEZXN0cm95ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpbnZva2VIb29rKCdvbkJlZm9yZVVwZGF0ZScsIFtpbnN0YW5jZSwgcGFydGlhbFByb3BzXSk7XG4gICAgcmVtb3ZlTGlzdGVuZXJzKCk7XG4gICAgdmFyIHByZXZQcm9wcyA9IGluc3RhbmNlLnByb3BzO1xuICAgIHZhciBuZXh0UHJvcHMgPSBldmFsdWF0ZVByb3BzKHJlZmVyZW5jZSwgT2JqZWN0LmFzc2lnbih7fSwgaW5zdGFuY2UucHJvcHMsIHt9LCBwYXJ0aWFsUHJvcHMsIHtcbiAgICAgIGlnbm9yZUF0dHJpYnV0ZXM6IHRydWVcbiAgICB9KSk7XG4gICAgaW5zdGFuY2UucHJvcHMgPSBuZXh0UHJvcHM7XG4gICAgYWRkTGlzdGVuZXJzKCk7XG5cbiAgICBpZiAocHJldlByb3BzLmludGVyYWN0aXZlRGVib3VuY2UgIT09IG5leHRQcm9wcy5pbnRlcmFjdGl2ZURlYm91bmNlKSB7XG4gICAgICBjbGVhbnVwSW50ZXJhY3RpdmVNb3VzZUxpc3RlbmVycygpO1xuICAgICAgZGVib3VuY2VkT25Nb3VzZU1vdmUgPSBkZWJvdW5jZShvbk1vdXNlTW92ZSwgbmV4dFByb3BzLmludGVyYWN0aXZlRGVib3VuY2UpO1xuICAgIH0gLy8gRW5zdXJlIHN0YWxlIGFyaWEtZXhwYW5kZWQgYXR0cmlidXRlcyBhcmUgcmVtb3ZlZFxuXG5cbiAgICBpZiAocHJldlByb3BzLnRyaWdnZXJUYXJnZXQgJiYgIW5leHRQcm9wcy50cmlnZ2VyVGFyZ2V0KSB7XG4gICAgICBub3JtYWxpemVUb0FycmF5KHByZXZQcm9wcy50cmlnZ2VyVGFyZ2V0KS5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJyk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKG5leHRQcm9wcy50cmlnZ2VyVGFyZ2V0KSB7XG4gICAgICByZWZlcmVuY2UucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJyk7XG4gICAgfVxuXG4gICAgaGFuZGxlQXJpYUV4cGFuZGVkQXR0cmlidXRlKCk7XG4gICAgaGFuZGxlU3R5bGVzKCk7XG5cbiAgICBpZiAob25VcGRhdGUpIHtcbiAgICAgIG9uVXBkYXRlKHByZXZQcm9wcywgbmV4dFByb3BzKTtcbiAgICB9XG5cbiAgICBpZiAoaW5zdGFuY2UucG9wcGVySW5zdGFuY2UpIHtcbiAgICAgIGNyZWF0ZVBvcHBlckluc3RhbmNlKCk7IC8vIEZpeGVzIGFuIGlzc3VlIHdpdGggbmVzdGVkIHRpcHBpZXMgaWYgdGhleSBhcmUgYWxsIGdldHRpbmcgcmUtcmVuZGVyZWQsXG4gICAgICAvLyBhbmQgdGhlIG5lc3RlZCBvbmVzIGdldCByZS1yZW5kZXJlZCBmaXJzdC5cbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hdG9taWtzL3RpcHB5anMtcmVhY3QvaXNzdWVzLzE3N1xuICAgICAgLy8gVE9ETzogZmluZCBhIGNsZWFuZXIgLyBtb3JlIGVmZmljaWVudCBzb2x1dGlvbighKVxuXG4gICAgICBnZXROZXN0ZWRQb3BwZXJUcmVlKCkuZm9yRWFjaChmdW5jdGlvbiAobmVzdGVkUG9wcGVyKSB7XG4gICAgICAgIC8vIFJlYWN0IChhbmQgb3RoZXIgVUkgbGlicyBsaWtlbHkpIHJlcXVpcmVzIGEgckFGIHdyYXBwZXIgYXMgaXQgZmx1c2hlc1xuICAgICAgICAvLyBpdHMgd29yayBpbiBvbmVcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKG5lc3RlZFBvcHBlci5fdGlwcHkucG9wcGVySW5zdGFuY2UuZm9yY2VVcGRhdGUpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaW52b2tlSG9vaygnb25BZnRlclVwZGF0ZScsIFtpbnN0YW5jZSwgcGFydGlhbFByb3BzXSk7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRDb250ZW50KGNvbnRlbnQpIHtcbiAgICBpbnN0YW5jZS5zZXRQcm9wcyh7XG4gICAgICBjb250ZW50OiBjb250ZW50XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBzaG93KCkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgd2FybldoZW4oaW5zdGFuY2Uuc3RhdGUuaXNEZXN0cm95ZWQsIGNyZWF0ZU1lbW9yeUxlYWtXYXJuaW5nKCdzaG93JykpO1xuICAgIH0gLy8gRWFybHkgYmFpbC1vdXRcblxuXG4gICAgdmFyIGlzQWxyZWFkeVZpc2libGUgPSBpbnN0YW5jZS5zdGF0ZS5pc1Zpc2libGU7XG4gICAgdmFyIGlzRGVzdHJveWVkID0gaW5zdGFuY2Uuc3RhdGUuaXNEZXN0cm95ZWQ7XG4gICAgdmFyIGlzRGlzYWJsZWQgPSAhaW5zdGFuY2Uuc3RhdGUuaXNFbmFibGVkO1xuICAgIHZhciBpc1RvdWNoQW5kVG91Y2hEaXNhYmxlZCA9IGN1cnJlbnRJbnB1dC5pc1RvdWNoICYmICFpbnN0YW5jZS5wcm9wcy50b3VjaDtcbiAgICB2YXIgZHVyYXRpb24gPSBnZXRWYWx1ZUF0SW5kZXhPclJldHVybihpbnN0YW5jZS5wcm9wcy5kdXJhdGlvbiwgMCwgZGVmYXVsdFByb3BzLmR1cmF0aW9uKTtcblxuICAgIGlmIChpc0FscmVhZHlWaXNpYmxlIHx8IGlzRGVzdHJveWVkIHx8IGlzRGlzYWJsZWQgfHwgaXNUb3VjaEFuZFRvdWNoRGlzYWJsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIE5vcm1hbGl6ZSBgZGlzYWJsZWRgIGJlaGF2aW9yIGFjcm9zcyBicm93c2Vycy5cbiAgICAvLyBGaXJlZm94IGFsbG93cyBldmVudHMgb24gZGlzYWJsZWQgZWxlbWVudHMsIGJ1dCBDaHJvbWUgZG9lc24ndC5cbiAgICAvLyBVc2luZyBhIHdyYXBwZXIgZWxlbWVudCAoaS5lLiA8c3Bhbj4pIGlzIHJlY29tbWVuZGVkLlxuXG5cbiAgICBpZiAoZ2V0Q3VycmVudFRhcmdldCgpLmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGludm9rZUhvb2soJ29uU2hvdycsIFtpbnN0YW5jZV0sIGZhbHNlKTtcblxuICAgIGlmIChpbnN0YW5jZS5wcm9wcy5vblNob3coaW5zdGFuY2UpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZSA9IHRydWU7XG5cbiAgICBpZiAoZ2V0SXNEZWZhdWx0UmVuZGVyRm4oKSkge1xuICAgICAgcG9wcGVyLnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XG4gICAgfVxuXG4gICAgaGFuZGxlU3R5bGVzKCk7XG4gICAgYWRkRG9jdW1lbnRNb3VzZURvd25MaXN0ZW5lcigpO1xuXG4gICAgaWYgKCFpbnN0YW5jZS5zdGF0ZS5pc01vdW50ZWQpIHtcbiAgICAgIHBvcHBlci5zdHlsZS50cmFuc2l0aW9uID0gJ25vbmUnO1xuICAgIH0gLy8gSWYgZmxpcHBpbmcgdG8gdGhlIG9wcG9zaXRlIHNpZGUgYWZ0ZXIgaGlkaW5nIGF0IGxlYXN0IG9uY2UsIHRoZVxuICAgIC8vIGFuaW1hdGlvbiB3aWxsIHVzZSB0aGUgd3JvbmcgcGxhY2VtZW50IHdpdGhvdXQgcmVzZXR0aW5nIHRoZSBkdXJhdGlvblxuXG5cbiAgICBpZiAoZ2V0SXNEZWZhdWx0UmVuZGVyRm4oKSkge1xuICAgICAgdmFyIF9nZXREZWZhdWx0VGVtcGxhdGVDaDIgPSBnZXREZWZhdWx0VGVtcGxhdGVDaGlsZHJlbigpLFxuICAgICAgICAgIGJveCA9IF9nZXREZWZhdWx0VGVtcGxhdGVDaDIuYm94LFxuICAgICAgICAgIGNvbnRlbnQgPSBfZ2V0RGVmYXVsdFRlbXBsYXRlQ2gyLmNvbnRlbnQ7XG5cbiAgICAgIHNldFRyYW5zaXRpb25EdXJhdGlvbihbYm94LCBjb250ZW50XSwgMCk7XG4gICAgfVxuXG4gICAgb25GaXJzdFVwZGF0ZSA9IGZ1bmN0aW9uIG9uRmlyc3RVcGRhdGUoKSB7XG4gICAgICBpZiAoIWluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZSB8fCBpZ25vcmVPbkZpcnN0VXBkYXRlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWdub3JlT25GaXJzdFVwZGF0ZSA9IHRydWU7IC8vIHJlZmxvd1xuXG4gICAgICB2b2lkIHBvcHBlci5vZmZzZXRIZWlnaHQ7XG4gICAgICBwb3BwZXIuc3R5bGUudHJhbnNpdGlvbiA9IGluc3RhbmNlLnByb3BzLm1vdmVUcmFuc2l0aW9uO1xuXG4gICAgICBpZiAoZ2V0SXNEZWZhdWx0UmVuZGVyRm4oKSAmJiBpbnN0YW5jZS5wcm9wcy5hbmltYXRpb24pIHtcbiAgICAgICAgdmFyIF9nZXREZWZhdWx0VGVtcGxhdGVDaDMgPSBnZXREZWZhdWx0VGVtcGxhdGVDaGlsZHJlbigpLFxuICAgICAgICAgICAgX2JveCA9IF9nZXREZWZhdWx0VGVtcGxhdGVDaDMuYm94LFxuICAgICAgICAgICAgX2NvbnRlbnQgPSBfZ2V0RGVmYXVsdFRlbXBsYXRlQ2gzLmNvbnRlbnQ7XG5cbiAgICAgICAgc2V0VHJhbnNpdGlvbkR1cmF0aW9uKFtfYm94LCBfY29udGVudF0sIGR1cmF0aW9uKTtcbiAgICAgICAgc2V0VmlzaWJpbGl0eVN0YXRlKFtfYm94LCBfY29udGVudF0sICd2aXNpYmxlJyk7XG4gICAgICB9XG5cbiAgICAgIGhhbmRsZUFyaWFDb250ZW50QXR0cmlidXRlKCk7XG4gICAgICBoYW5kbGVBcmlhRXhwYW5kZWRBdHRyaWJ1dGUoKTtcbiAgICAgIHB1c2hJZlVuaXF1ZShtb3VudGVkSW5zdGFuY2VzLCBpbnN0YW5jZSk7XG4gICAgICB1cGRhdGVJT1NDbGFzcyh0cnVlKTtcbiAgICAgIGluc3RhbmNlLnN0YXRlLmlzTW91bnRlZCA9IHRydWU7XG4gICAgICBpbnZva2VIb29rKCdvbk1vdW50JywgW2luc3RhbmNlXSk7XG5cbiAgICAgIGlmIChpbnN0YW5jZS5wcm9wcy5hbmltYXRpb24gJiYgZ2V0SXNEZWZhdWx0UmVuZGVyRm4oKSkge1xuICAgICAgICBvblRyYW5zaXRpb25lZEluKGR1cmF0aW9uLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaW5zdGFuY2Uuc3RhdGUuaXNTaG93biA9IHRydWU7XG4gICAgICAgICAgaW52b2tlSG9vaygnb25TaG93bicsIFtpbnN0YW5jZV0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgbW91bnQoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhpZGUoKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICB3YXJuV2hlbihpbnN0YW5jZS5zdGF0ZS5pc0Rlc3Ryb3llZCwgY3JlYXRlTWVtb3J5TGVha1dhcm5pbmcoJ2hpZGUnKSk7XG4gICAgfSAvLyBFYXJseSBiYWlsLW91dFxuXG5cbiAgICB2YXIgaXNBbHJlYWR5SGlkZGVuID0gIWluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZTtcbiAgICB2YXIgaXNEZXN0cm95ZWQgPSBpbnN0YW5jZS5zdGF0ZS5pc0Rlc3Ryb3llZDtcbiAgICB2YXIgaXNEaXNhYmxlZCA9ICFpbnN0YW5jZS5zdGF0ZS5pc0VuYWJsZWQ7XG4gICAgdmFyIGR1cmF0aW9uID0gZ2V0VmFsdWVBdEluZGV4T3JSZXR1cm4oaW5zdGFuY2UucHJvcHMuZHVyYXRpb24sIDEsIGRlZmF1bHRQcm9wcy5kdXJhdGlvbik7XG5cbiAgICBpZiAoaXNBbHJlYWR5SGlkZGVuIHx8IGlzRGVzdHJveWVkIHx8IGlzRGlzYWJsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpbnZva2VIb29rKCdvbkhpZGUnLCBbaW5zdGFuY2VdLCBmYWxzZSk7XG5cbiAgICBpZiAoaW5zdGFuY2UucHJvcHMub25IaWRlKGluc3RhbmNlKSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpbnN0YW5jZS5zdGF0ZS5pc1Zpc2libGUgPSBmYWxzZTtcbiAgICBpbnN0YW5jZS5zdGF0ZS5pc1Nob3duID0gZmFsc2U7XG4gICAgaWdub3JlT25GaXJzdFVwZGF0ZSA9IGZhbHNlO1xuXG4gICAgaWYgKGdldElzRGVmYXVsdFJlbmRlckZuKCkpIHtcbiAgICAgIHBvcHBlci5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XG4gICAgfVxuXG4gICAgY2xlYW51cEludGVyYWN0aXZlTW91c2VMaXN0ZW5lcnMoKTtcbiAgICByZW1vdmVEb2N1bWVudE1vdXNlRG93bkxpc3RlbmVyKCk7XG4gICAgaGFuZGxlU3R5bGVzKCk7XG5cbiAgICBpZiAoZ2V0SXNEZWZhdWx0UmVuZGVyRm4oKSkge1xuICAgICAgdmFyIF9nZXREZWZhdWx0VGVtcGxhdGVDaDQgPSBnZXREZWZhdWx0VGVtcGxhdGVDaGlsZHJlbigpLFxuICAgICAgICAgIGJveCA9IF9nZXREZWZhdWx0VGVtcGxhdGVDaDQuYm94LFxuICAgICAgICAgIGNvbnRlbnQgPSBfZ2V0RGVmYXVsdFRlbXBsYXRlQ2g0LmNvbnRlbnQ7XG5cbiAgICAgIGlmIChpbnN0YW5jZS5wcm9wcy5hbmltYXRpb24pIHtcbiAgICAgICAgc2V0VHJhbnNpdGlvbkR1cmF0aW9uKFtib3gsIGNvbnRlbnRdLCBkdXJhdGlvbik7XG4gICAgICAgIHNldFZpc2liaWxpdHlTdGF0ZShbYm94LCBjb250ZW50XSwgJ2hpZGRlbicpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGhhbmRsZUFyaWFDb250ZW50QXR0cmlidXRlKCk7XG4gICAgaGFuZGxlQXJpYUV4cGFuZGVkQXR0cmlidXRlKCk7XG5cbiAgICBpZiAoaW5zdGFuY2UucHJvcHMuYW5pbWF0aW9uKSB7XG4gICAgICBpZiAoZ2V0SXNEZWZhdWx0UmVuZGVyRm4oKSkge1xuICAgICAgICBvblRyYW5zaXRpb25lZE91dChkdXJhdGlvbiwgaW5zdGFuY2UudW5tb3VudCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGluc3RhbmNlLnVubW91bnQoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB1bm1vdW50KCkge1xuICAgIGlmIChpbnN0YW5jZS5zdGF0ZS5pc1Zpc2libGUpIHtcbiAgICAgIGluc3RhbmNlLmhpZGUoKTtcbiAgICB9XG5cbiAgICBpZiAoIWluc3RhbmNlLnN0YXRlLmlzTW91bnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGRlc3Ryb3lQb3BwZXJJbnN0YW5jZSgpOyAvLyBJZiBhIHBvcHBlciBpcyBub3QgaW50ZXJhY3RpdmUsIGl0IHdpbGwgYmUgYXBwZW5kZWQgb3V0c2lkZSB0aGUgcG9wcGVyXG4gICAgLy8gdHJlZSBieSBkZWZhdWx0LiBUaGlzIHNlZW1zIG1haW5seSBmb3IgaW50ZXJhY3RpdmUgdGlwcGllcywgYnV0IHdlIHNob3VsZFxuICAgIC8vIGZpbmQgYSB3b3JrYXJvdW5kIGlmIHBvc3NpYmxlXG5cbiAgICBnZXROZXN0ZWRQb3BwZXJUcmVlKCkuZm9yRWFjaChmdW5jdGlvbiAobmVzdGVkUG9wcGVyKSB7XG4gICAgICBuZXN0ZWRQb3BwZXIuX3RpcHB5LnVubW91bnQoKTtcbiAgICB9KTtcblxuICAgIGlmIChwb3BwZXIucGFyZW50Tm9kZSkge1xuICAgICAgcG9wcGVyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQocG9wcGVyKTtcbiAgICB9XG5cbiAgICBtb3VudGVkSW5zdGFuY2VzID0gbW91bnRlZEluc3RhbmNlcy5maWx0ZXIoZnVuY3Rpb24gKGkpIHtcbiAgICAgIHJldHVybiBpICE9PSBpbnN0YW5jZTtcbiAgICB9KTtcblxuICAgIGlmIChtb3VudGVkSW5zdGFuY2VzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdXBkYXRlSU9TQ2xhc3MoZmFsc2UpO1xuICAgIH1cblxuICAgIGluc3RhbmNlLnN0YXRlLmlzTW91bnRlZCA9IGZhbHNlO1xuICAgIGludm9rZUhvb2soJ29uSGlkZGVuJywgW2luc3RhbmNlXSk7XG4gIH1cblxuICBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgd2FybldoZW4oaW5zdGFuY2Uuc3RhdGUuaXNEZXN0cm95ZWQsIGNyZWF0ZU1lbW9yeUxlYWtXYXJuaW5nKCdkZXN0cm95JykpO1xuICAgIH1cblxuICAgIGlmIChpbnN0YW5jZS5zdGF0ZS5pc0Rlc3Ryb3llZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGluc3RhbmNlLmNsZWFyRGVsYXlUaW1lb3V0cygpO1xuICAgIGluc3RhbmNlLnVubW91bnQoKTtcbiAgICByZW1vdmVMaXN0ZW5lcnMoKTtcbiAgICBkZWxldGUgcmVmZXJlbmNlLl90aXBweTtcbiAgICBpbnN0YW5jZS5zdGF0ZS5pc0Rlc3Ryb3llZCA9IHRydWU7XG4gICAgaW52b2tlSG9vaygnb25EZXN0cm95JywgW2luc3RhbmNlXSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdGlwcHkodGFyZ2V0cywgb3B0aW9uYWxQcm9wcykge1xuICBpZiAob3B0aW9uYWxQcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9uYWxQcm9wcyA9IHt9O1xuICB9XG5cbiAgdmFyIHBsdWdpbnMgPSBkZWZhdWx0UHJvcHMucGx1Z2lucy5jb25jYXQob3B0aW9uYWxQcm9wcy5wbHVnaW5zIHx8IFtdKTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgdmFsaWRhdGVUYXJnZXRzKHRhcmdldHMpO1xuICAgIHZhbGlkYXRlUHJvcHMob3B0aW9uYWxQcm9wcywgcGx1Z2lucyk7XG4gIH1cblxuICBiaW5kR2xvYmFsRXZlbnRMaXN0ZW5lcnMoKTtcbiAgdmFyIHBhc3NlZFByb3BzID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9uYWxQcm9wcywge1xuICAgIHBsdWdpbnM6IHBsdWdpbnNcbiAgfSk7XG4gIHZhciBlbGVtZW50cyA9IGdldEFycmF5T2ZFbGVtZW50cyh0YXJnZXRzKTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgdmFyIGlzU2luZ2xlQ29udGVudEVsZW1lbnQgPSBpc0VsZW1lbnQocGFzc2VkUHJvcHMuY29udGVudCk7XG4gICAgdmFyIGlzTW9yZVRoYW5PbmVSZWZlcmVuY2VFbGVtZW50ID0gZWxlbWVudHMubGVuZ3RoID4gMTtcbiAgICB3YXJuV2hlbihpc1NpbmdsZUNvbnRlbnRFbGVtZW50ICYmIGlzTW9yZVRoYW5PbmVSZWZlcmVuY2VFbGVtZW50LCBbJ3RpcHB5KCkgd2FzIHBhc3NlZCBhbiBFbGVtZW50IGFzIHRoZSBgY29udGVudGAgcHJvcCwgYnV0IG1vcmUgdGhhbicsICdvbmUgdGlwcHkgaW5zdGFuY2Ugd2FzIGNyZWF0ZWQgYnkgdGhpcyBpbnZvY2F0aW9uLiBUaGlzIG1lYW5zIHRoZScsICdjb250ZW50IGVsZW1lbnQgd2lsbCBvbmx5IGJlIGFwcGVuZGVkIHRvIHRoZSBsYXN0IHRpcHB5IGluc3RhbmNlLicsICdcXG5cXG4nLCAnSW5zdGVhZCwgcGFzcyB0aGUgLmlubmVySFRNTCBvZiB0aGUgZWxlbWVudCwgb3IgdXNlIGEgZnVuY3Rpb24gdGhhdCcsICdyZXR1cm5zIGEgY2xvbmVkIHZlcnNpb24gb2YgdGhlIGVsZW1lbnQgaW5zdGVhZC4nLCAnXFxuXFxuJywgJzEpIGNvbnRlbnQ6IGVsZW1lbnQuaW5uZXJIVE1MXFxuJywgJzIpIGNvbnRlbnQ6ICgpID0+IGVsZW1lbnQuY2xvbmVOb2RlKHRydWUpJ10uam9pbignICcpKTtcbiAgfVxuXG4gIHZhciBpbnN0YW5jZXMgPSBlbGVtZW50cy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcmVmZXJlbmNlKSB7XG4gICAgdmFyIGluc3RhbmNlID0gcmVmZXJlbmNlICYmIGNyZWF0ZVRpcHB5KHJlZmVyZW5jZSwgcGFzc2VkUHJvcHMpO1xuXG4gICAgaWYgKGluc3RhbmNlKSB7XG4gICAgICBhY2MucHVzaChpbnN0YW5jZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjYztcbiAgfSwgW10pO1xuICByZXR1cm4gaXNFbGVtZW50KHRhcmdldHMpID8gaW5zdGFuY2VzWzBdIDogaW5zdGFuY2VzO1xufVxuXG50aXBweS5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG50aXBweS5zZXREZWZhdWx0UHJvcHMgPSBzZXREZWZhdWx0UHJvcHM7XG50aXBweS5jdXJyZW50SW5wdXQgPSBjdXJyZW50SW5wdXQ7XG52YXIgaGlkZUFsbCA9IGZ1bmN0aW9uIGhpZGVBbGwoX3RlbXApIHtcbiAgdmFyIF9yZWYgPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcCxcbiAgICAgIGV4Y2x1ZGVkUmVmZXJlbmNlT3JJbnN0YW5jZSA9IF9yZWYuZXhjbHVkZSxcbiAgICAgIGR1cmF0aW9uID0gX3JlZi5kdXJhdGlvbjtcblxuICBtb3VudGVkSW5zdGFuY2VzLmZvckVhY2goZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgdmFyIGlzRXhjbHVkZWQgPSBmYWxzZTtcblxuICAgIGlmIChleGNsdWRlZFJlZmVyZW5jZU9ySW5zdGFuY2UpIHtcbiAgICAgIGlzRXhjbHVkZWQgPSBpc1JlZmVyZW5jZUVsZW1lbnQoZXhjbHVkZWRSZWZlcmVuY2VPckluc3RhbmNlKSA/IGluc3RhbmNlLnJlZmVyZW5jZSA9PT0gZXhjbHVkZWRSZWZlcmVuY2VPckluc3RhbmNlIDogaW5zdGFuY2UucG9wcGVyID09PSBleGNsdWRlZFJlZmVyZW5jZU9ySW5zdGFuY2UucG9wcGVyO1xuICAgIH1cblxuICAgIGlmICghaXNFeGNsdWRlZCkge1xuICAgICAgdmFyIG9yaWdpbmFsRHVyYXRpb24gPSBpbnN0YW5jZS5wcm9wcy5kdXJhdGlvbjtcbiAgICAgIGluc3RhbmNlLnNldFByb3BzKHtcbiAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uXG4gICAgICB9KTtcbiAgICAgIGluc3RhbmNlLmhpZGUoKTtcblxuICAgICAgaWYgKCFpbnN0YW5jZS5zdGF0ZS5pc0Rlc3Ryb3llZCkge1xuICAgICAgICBpbnN0YW5jZS5zZXRQcm9wcyh7XG4gICAgICAgICAgZHVyYXRpb246IG9yaWdpbmFsRHVyYXRpb25cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn07XG5cbnZhciBjcmVhdGVTaW5nbGV0b24gPSBmdW5jdGlvbiBjcmVhdGVTaW5nbGV0b24odGlwcHlJbnN0YW5jZXMsIG9wdGlvbmFsUHJvcHMpIHtcbiAgaWYgKG9wdGlvbmFsUHJvcHMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbmFsUHJvcHMgPSB7fTtcbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBlcnJvcldoZW4oIUFycmF5LmlzQXJyYXkodGlwcHlJbnN0YW5jZXMpLCBbJ1RoZSBmaXJzdCBhcmd1bWVudCBwYXNzZWQgdG8gY3JlYXRlU2luZ2xldG9uKCkgbXVzdCBiZSBhbiBhcnJheSBvZicsICd0aXBweSBpbnN0YW5jZXMuIFRoZSBwYXNzZWQgdmFsdWUgd2FzJywgU3RyaW5nKHRpcHB5SW5zdGFuY2VzKV0uam9pbignICcpKTtcbiAgfVxuXG4gIHRpcHB5SW5zdGFuY2VzLmZvckVhY2goZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgaW5zdGFuY2UuZGlzYWJsZSgpO1xuICB9KTtcbiAgdmFyIGN1cnJlbnRUYXJnZXQ7XG4gIHZhciByZWZlcmVuY2VzID0gdGlwcHlJbnN0YW5jZXMubWFwKGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgIHJldHVybiBpbnN0YW5jZS5yZWZlcmVuY2U7XG4gIH0pO1xuICB2YXIgc2luZ2xldG9uID0ge1xuICAgIGZuOiBmdW5jdGlvbiBmbigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG9uRGVzdHJveTogZnVuY3Rpb24gb25EZXN0cm95KCkge1xuICAgICAgICAgIHRpcHB5SW5zdGFuY2VzLmZvckVhY2goZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgICAgICAgICBpbnN0YW5jZS5lbmFibGUoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgb25UcmlnZ2VyOiBmdW5jdGlvbiBvblRyaWdnZXIoaW5zdGFuY2UsIGV2ZW50KSB7XG4gICAgICAgICAgdmFyIHRhcmdldCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQ7XG4gICAgICAgICAgdmFyIGluZGV4ID0gcmVmZXJlbmNlcy5pbmRleE9mKHRhcmdldCk7IC8vIGJhaWwtb3V0XG5cbiAgICAgICAgICBpZiAodGFyZ2V0ID09PSBjdXJyZW50VGFyZ2V0KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY3VycmVudFRhcmdldCA9IHRhcmdldDtcbiAgICAgICAgICB2YXIgb3ZlcnJpZGVQcm9wcyA9IChvcHRpb25hbFByb3BzLm92ZXJyaWRlcyB8fCBbXSkuY29uY2F0KCdjb250ZW50JykucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHByb3ApIHtcbiAgICAgICAgICAgIGFjY1twcm9wXSA9IHRpcHB5SW5zdGFuY2VzW2luZGV4XS5wcm9wc1twcm9wXTtcbiAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgICAgfSwge30pO1xuICAgICAgICAgIGluc3RhbmNlLnNldFByb3BzKE9iamVjdC5hc3NpZ24oe30sIG92ZXJyaWRlUHJvcHMsIHtcbiAgICAgICAgICAgIGdldFJlZmVyZW5jZUNsaWVudFJlY3Q6IGZ1bmN0aW9uIGdldFJlZmVyZW5jZUNsaWVudFJlY3QoKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHRpcHB5KGRpdigpLCBPYmplY3QuYXNzaWduKHt9LCByZW1vdmVQcm9wZXJ0aWVzKG9wdGlvbmFsUHJvcHMsIFsnb3ZlcnJpZGVzJ10pLCB7XG4gICAgcGx1Z2luczogW3NpbmdsZXRvbl0uY29uY2F0KG9wdGlvbmFsUHJvcHMucGx1Z2lucyB8fCBbXSksXG4gICAgdHJpZ2dlclRhcmdldDogcmVmZXJlbmNlc1xuICB9KSk7XG59O1xuXG52YXIgQlVCQkxJTkdfRVZFTlRTX01BUCA9IHtcbiAgbW91c2VvdmVyOiAnbW91c2VlbnRlcicsXG4gIGZvY3VzaW46ICdmb2N1cycsXG4gIGNsaWNrOiAnY2xpY2snXG59O1xuLyoqXG4gKiBDcmVhdGVzIGEgZGVsZWdhdGUgaW5zdGFuY2UgdGhhdCBjb250cm9scyB0aGUgY3JlYXRpb24gb2YgdGlwcHkgaW5zdGFuY2VzXG4gKiBmb3IgY2hpbGQgZWxlbWVudHMgKGB0YXJnZXRgIENTUyBzZWxlY3RvcikuXG4gKi9cblxuZnVuY3Rpb24gZGVsZWdhdGUodGFyZ2V0cywgcHJvcHMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIGVycm9yV2hlbighKHByb3BzICYmIHByb3BzLnRhcmdldCksIFsnWW91IG11c3Qgc3BlY2l0eSBhIGB0YXJnZXRgIHByb3AgaW5kaWNhdGluZyBhIENTUyBzZWxlY3RvciBzdHJpbmcgbWF0Y2hpbmcnLCAndGhlIHRhcmdldCBlbGVtZW50cyB0aGF0IHNob3VsZCByZWNlaXZlIGEgdGlwcHkuJ10uam9pbignICcpKTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lcnMgPSBbXTtcbiAgdmFyIGNoaWxkVGlwcHlJbnN0YW5jZXMgPSBbXTtcbiAgdmFyIHRhcmdldCA9IHByb3BzLnRhcmdldDtcbiAgdmFyIG5hdGl2ZVByb3BzID0gcmVtb3ZlUHJvcGVydGllcyhwcm9wcywgWyd0YXJnZXQnXSk7XG4gIHZhciBwYXJlbnRQcm9wcyA9IE9iamVjdC5hc3NpZ24oe30sIG5hdGl2ZVByb3BzLCB7XG4gICAgdHJpZ2dlcjogJ21hbnVhbCdcbiAgfSk7XG4gIHZhciBjaGlsZFByb3BzID0gT2JqZWN0LmFzc2lnbih7fSwgbmF0aXZlUHJvcHMsIHtcbiAgICBzaG93T25DcmVhdGU6IHRydWVcbiAgfSk7XG4gIHZhciByZXR1cm5WYWx1ZSA9IHRpcHB5KHRhcmdldHMsIHBhcmVudFByb3BzKTtcbiAgdmFyIG5vcm1hbGl6ZWRSZXR1cm5WYWx1ZSA9IG5vcm1hbGl6ZVRvQXJyYXkocmV0dXJuVmFsdWUpO1xuXG4gIGZ1bmN0aW9uIG9uVHJpZ2dlcihldmVudCkge1xuICAgIGlmICghZXZlbnQudGFyZ2V0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHRhcmdldE5vZGUgPSBldmVudC50YXJnZXQuY2xvc2VzdCh0YXJnZXQpO1xuXG4gICAgaWYgKCF0YXJnZXROb2RlKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBHZXQgcmVsZXZhbnQgdHJpZ2dlciB3aXRoIGZhbGxiYWNrczpcbiAgICAvLyAxLiBDaGVjayBgZGF0YS10aXBweS10cmlnZ2VyYCBhdHRyaWJ1dGUgb24gdGFyZ2V0IG5vZGVcbiAgICAvLyAyLiBGYWxsYmFjayB0byBgdHJpZ2dlcmAgcGFzc2VkIHRvIGBkZWxlZ2F0ZSgpYFxuICAgIC8vIDMuIEZhbGxiYWNrIHRvIGBkZWZhdWx0UHJvcHMudHJpZ2dlcmBcblxuXG4gICAgdmFyIHRyaWdnZXIgPSB0YXJnZXROb2RlLmdldEF0dHJpYnV0ZSgnZGF0YS10aXBweS10cmlnZ2VyJykgfHwgcHJvcHMudHJpZ2dlciB8fCBkZWZhdWx0UHJvcHMudHJpZ2dlcjsgLy8gT25seSBjcmVhdGUgdGhlIGluc3RhbmNlIGlmIHRoZSBidWJibGluZyBldmVudCBtYXRjaGVzIHRoZSB0cmlnZ2VyIHR5cGUsXG4gICAgLy8gb3IgdGhlIG5vZGUgYWxyZWFkeSBoYXMgYSB0aXBweSBpbnN0YW5jZSBhdHRhY2hlZFxuXG4gICAgaWYgKHRyaWdnZXIuaW5kZXhPZihCVUJCTElOR19FVkVOVFNfTUFQW2V2ZW50LnR5cGVdKSA8IDAgfHwgLy8gQHRzLWlnbm9yZVxuICAgIHRhcmdldE5vZGUuX3RpcHB5KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGluc3RhbmNlID0gdGlwcHkodGFyZ2V0Tm9kZSwgY2hpbGRQcm9wcyk7XG5cbiAgICBpZiAoaW5zdGFuY2UpIHtcbiAgICAgIGNoaWxkVGlwcHlJbnN0YW5jZXMgPSBjaGlsZFRpcHB5SW5zdGFuY2VzLmNvbmNhdChpbnN0YW5jZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb24obm9kZSwgZXZlbnRUeXBlLCBoYW5kbGVyLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IGZhbHNlO1xuICAgIH1cblxuICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICAgIGxpc3RlbmVycy5wdXNoKHtcbiAgICAgIG5vZGU6IG5vZGUsXG4gICAgICBldmVudFR5cGU6IGV2ZW50VHlwZSxcbiAgICAgIGhhbmRsZXI6IGhhbmRsZXIsXG4gICAgICBvcHRpb25zOiBvcHRpb25zXG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBhZGRFdmVudExpc3RlbmVycyhpbnN0YW5jZSkge1xuICAgIHZhciByZWZlcmVuY2UgPSBpbnN0YW5jZS5yZWZlcmVuY2U7XG4gICAgb24ocmVmZXJlbmNlLCAnbW91c2VvdmVyJywgb25UcmlnZ2VyKTtcbiAgICBvbihyZWZlcmVuY2UsICdmb2N1c2luJywgb25UcmlnZ2VyKTtcbiAgICBvbihyZWZlcmVuY2UsICdjbGljaycsIG9uVHJpZ2dlcik7XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVycygpIHtcbiAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAoX3JlZikge1xuICAgICAgdmFyIG5vZGUgPSBfcmVmLm5vZGUsXG4gICAgICAgICAgZXZlbnRUeXBlID0gX3JlZi5ldmVudFR5cGUsXG4gICAgICAgICAgaGFuZGxlciA9IF9yZWYuaGFuZGxlcixcbiAgICAgICAgICBvcHRpb25zID0gX3JlZi5vcHRpb25zO1xuICAgICAgbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgaGFuZGxlciwgb3B0aW9ucyk7XG4gICAgfSk7XG4gICAgbGlzdGVuZXJzID0gW107XG4gIH1cblxuICBmdW5jdGlvbiBhcHBseU11dGF0aW9ucyhpbnN0YW5jZSkge1xuICAgIHZhciBvcmlnaW5hbERlc3Ryb3kgPSBpbnN0YW5jZS5kZXN0cm95O1xuXG4gICAgaW5zdGFuY2UuZGVzdHJveSA9IGZ1bmN0aW9uIChzaG91bGREZXN0cm95Q2hpbGRJbnN0YW5jZXMpIHtcbiAgICAgIGlmIChzaG91bGREZXN0cm95Q2hpbGRJbnN0YW5jZXMgPT09IHZvaWQgMCkge1xuICAgICAgICBzaG91bGREZXN0cm95Q2hpbGRJbnN0YW5jZXMgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2hvdWxkRGVzdHJveUNoaWxkSW5zdGFuY2VzKSB7XG4gICAgICAgIGNoaWxkVGlwcHlJbnN0YW5jZXMuZm9yRWFjaChmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAgICAgICBpbnN0YW5jZS5kZXN0cm95KCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBjaGlsZFRpcHB5SW5zdGFuY2VzID0gW107XG4gICAgICByZW1vdmVFdmVudExpc3RlbmVycygpO1xuICAgICAgb3JpZ2luYWxEZXN0cm95KCk7XG4gICAgfTtcblxuICAgIGFkZEV2ZW50TGlzdGVuZXJzKGluc3RhbmNlKTtcbiAgfVxuXG4gIG5vcm1hbGl6ZWRSZXR1cm5WYWx1ZS5mb3JFYWNoKGFwcGx5TXV0YXRpb25zKTtcbiAgcmV0dXJuIHJldHVyblZhbHVlO1xufVxuXG52YXIgYW5pbWF0ZUZpbGwgPSB7XG4gIG5hbWU6ICdhbmltYXRlRmlsbCcsXG4gIGRlZmF1bHRWYWx1ZTogZmFsc2UsXG4gIGZuOiBmdW5jdGlvbiBmbihpbnN0YW5jZSkge1xuICAgIHZhciBfaW5zdGFuY2UkcHJvcHMkcmVuZGU7XG5cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgaWYgKCEoKF9pbnN0YW5jZSRwcm9wcyRyZW5kZSA9IGluc3RhbmNlLnByb3BzLnJlbmRlcikgPT0gbnVsbCA/IHZvaWQgMCA6IF9pbnN0YW5jZSRwcm9wcyRyZW5kZS4kJHRpcHB5KSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICBlcnJvcldoZW4oaW5zdGFuY2UucHJvcHMuYW5pbWF0ZUZpbGwsICdUaGUgYGFuaW1hdGVGaWxsYCBwbHVnaW4gcmVxdWlyZXMgdGhlIGRlZmF1bHQgcmVuZGVyIGZ1bmN0aW9uLicpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge307XG4gICAgfVxuXG4gICAgdmFyIF9nZXRDaGlsZHJlbiA9IGdldENoaWxkcmVuKGluc3RhbmNlLnBvcHBlciksXG4gICAgICAgIGJveCA9IF9nZXRDaGlsZHJlbi5ib3gsXG4gICAgICAgIGNvbnRlbnQgPSBfZ2V0Q2hpbGRyZW4uY29udGVudDtcblxuICAgIHZhciBiYWNrZHJvcCA9IGluc3RhbmNlLnByb3BzLmFuaW1hdGVGaWxsID8gY3JlYXRlQmFja2Ryb3BFbGVtZW50KCkgOiBudWxsO1xuICAgIHJldHVybiB7XG4gICAgICBvbkNyZWF0ZTogZnVuY3Rpb24gb25DcmVhdGUoKSB7XG4gICAgICAgIGlmIChiYWNrZHJvcCkge1xuICAgICAgICAgIGJveC5pbnNlcnRCZWZvcmUoYmFja2Ryb3AsIGJveC5maXJzdEVsZW1lbnRDaGlsZCk7XG4gICAgICAgICAgYm94LnNldEF0dHJpYnV0ZSgnZGF0YS1hbmltYXRlZmlsbCcsICcnKTtcbiAgICAgICAgICBib3guc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJztcbiAgICAgICAgICBpbnN0YW5jZS5zZXRQcm9wcyh7XG4gICAgICAgICAgICBhcnJvdzogZmFsc2UsXG4gICAgICAgICAgICBhbmltYXRpb246ICdzaGlmdC1hd2F5J1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb25Nb3VudDogZnVuY3Rpb24gb25Nb3VudCgpIHtcbiAgICAgICAgaWYgKGJhY2tkcm9wKSB7XG4gICAgICAgICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbiA9IGJveC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb247XG4gICAgICAgICAgdmFyIGR1cmF0aW9uID0gTnVtYmVyKHRyYW5zaXRpb25EdXJhdGlvbi5yZXBsYWNlKCdtcycsICcnKSk7IC8vIFRoZSBjb250ZW50IHNob3VsZCBmYWRlIGluIGFmdGVyIHRoZSBiYWNrZHJvcCBoYXMgbW9zdGx5IGZpbGxlZCB0aGVcbiAgICAgICAgICAvLyB0b29sdGlwIGVsZW1lbnQuIGBjbGlwLXBhdGhgIGlzIHRoZSBvdGhlciBhbHRlcm5hdGl2ZSBidXQgaXMgbm90XG4gICAgICAgICAgLy8gd2VsbC1zdXBwb3J0ZWQgYW5kIGlzIGJ1Z2d5IG9uIHNvbWUgZGV2aWNlcy5cblxuICAgICAgICAgIGNvbnRlbnQuc3R5bGUudHJhbnNpdGlvbkRlbGF5ID0gTWF0aC5yb3VuZChkdXJhdGlvbiAvIDEwKSArIFwibXNcIjtcbiAgICAgICAgICBiYWNrZHJvcC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSB0cmFuc2l0aW9uRHVyYXRpb247XG4gICAgICAgICAgc2V0VmlzaWJpbGl0eVN0YXRlKFtiYWNrZHJvcF0sICd2aXNpYmxlJyk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvblNob3c6IGZ1bmN0aW9uIG9uU2hvdygpIHtcbiAgICAgICAgaWYgKGJhY2tkcm9wKSB7XG4gICAgICAgICAgYmFja2Ryb3Auc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gJzBtcyc7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvbkhpZGU6IGZ1bmN0aW9uIG9uSGlkZSgpIHtcbiAgICAgICAgaWYgKGJhY2tkcm9wKSB7XG4gICAgICAgICAgc2V0VmlzaWJpbGl0eVN0YXRlKFtiYWNrZHJvcF0sICdoaWRkZW4nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZUJhY2tkcm9wRWxlbWVudCgpIHtcbiAgdmFyIGJhY2tkcm9wID0gZGl2KCk7XG4gIGJhY2tkcm9wLmNsYXNzTmFtZSA9IEJBQ0tEUk9QX0NMQVNTO1xuICBzZXRWaXNpYmlsaXR5U3RhdGUoW2JhY2tkcm9wXSwgJ2hpZGRlbicpO1xuICByZXR1cm4gYmFja2Ryb3A7XG59XG5cbnZhciBmb2xsb3dDdXJzb3IgPSB7XG4gIG5hbWU6ICdmb2xsb3dDdXJzb3InLFxuICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICBmbjogZnVuY3Rpb24gZm4oaW5zdGFuY2UpIHtcbiAgICB2YXIgcmVmZXJlbmNlID0gaW5zdGFuY2UucmVmZXJlbmNlO1xuICAgIHZhciBkb2MgPSBnZXRPd25lckRvY3VtZW50KGluc3RhbmNlLnByb3BzLnRyaWdnZXJUYXJnZXQgfHwgcmVmZXJlbmNlKTtcbiAgICB2YXIgaW5pdGlhbE1vdXNlQ29vcmRzID0gbnVsbDtcblxuICAgIGZ1bmN0aW9uIGdldElzTWFudWFsKCkge1xuICAgICAgcmV0dXJuIGluc3RhbmNlLnByb3BzLnRyaWdnZXIudHJpbSgpID09PSAnbWFudWFsJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRJc0VuYWJsZWQoKSB7XG4gICAgICAvLyAjNTk3XG4gICAgICB2YXIgaXNWYWxpZE1vdXNlRXZlbnQgPSBnZXRJc01hbnVhbCgpID8gdHJ1ZSA6IC8vIENoZWNrIGlmIGEga2V5Ym9hcmQgXCJjbGlja1wiXG4gICAgICBpbml0aWFsTW91c2VDb29yZHMgIT09IG51bGwgJiYgIShpbml0aWFsTW91c2VDb29yZHMuY2xpZW50WCA9PT0gMCAmJiBpbml0aWFsTW91c2VDb29yZHMuY2xpZW50WSA9PT0gMCk7XG4gICAgICByZXR1cm4gaW5zdGFuY2UucHJvcHMuZm9sbG93Q3Vyc29yICYmIGlzVmFsaWRNb3VzZUV2ZW50O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldElzSW5pdGlhbEJlaGF2aW9yKCkge1xuICAgICAgcmV0dXJuIGN1cnJlbnRJbnB1dC5pc1RvdWNoIHx8IGluc3RhbmNlLnByb3BzLmZvbGxvd0N1cnNvciA9PT0gJ2luaXRpYWwnICYmIGluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1bnNldFJlZmVyZW5jZUNsaWVudFJlY3Qoc2hvdWxkVW5zZXQpIHtcbiAgICAgIGlmIChzaG91bGRVbnNldCkge1xuICAgICAgICBpbnN0YW5jZS5zZXRQcm9wcyh7XG4gICAgICAgICAgZ2V0UmVmZXJlbmNlQ2xpZW50UmVjdDogbnVsbFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVNb3VzZU1vdmVMaXN0ZW5lcigpIHtcbiAgICAgIGlmIChnZXRJc0VuYWJsZWQoKSkge1xuICAgICAgICBhZGRMaXN0ZW5lcigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdW5zZXRSZWZlcmVuY2VDbGllbnRSZWN0KGluc3RhbmNlLnByb3BzLmZvbGxvd0N1cnNvcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdHJpZ2dlckxhc3RNb3VzZU1vdmUoKSB7XG4gICAgICBpZiAoZ2V0SXNFbmFibGVkKCkpIHtcbiAgICAgICAgb25Nb3VzZU1vdmUoaW5pdGlhbE1vdXNlQ29vcmRzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRMaXN0ZW5lcigpIHtcbiAgICAgIGRvYy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBvbk1vdXNlTW92ZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIoKSB7XG4gICAgICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgb25Nb3VzZU1vdmUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uTW91c2VNb3ZlKGV2ZW50KSB7XG4gICAgICBpbml0aWFsTW91c2VDb29yZHMgPSB7XG4gICAgICAgIGNsaWVudFg6IGV2ZW50LmNsaWVudFgsXG4gICAgICAgIGNsaWVudFk6IGV2ZW50LmNsaWVudFlcbiAgICAgIH07IC8vIElmIHRoZSBpbnN0YW5jZSBpcyBpbnRlcmFjdGl2ZSwgYXZvaWQgdXBkYXRpbmcgdGhlIHBvc2l0aW9uIHVubGVzcyBpdCdzXG4gICAgICAvLyBvdmVyIHRoZSByZWZlcmVuY2UgZWxlbWVudFxuXG4gICAgICB2YXIgaXNDdXJzb3JPdmVyUmVmZXJlbmNlID0gZXZlbnQudGFyZ2V0ID8gcmVmZXJlbmNlLmNvbnRhaW5zKGV2ZW50LnRhcmdldCkgOiB0cnVlO1xuICAgICAgdmFyIGZvbGxvd0N1cnNvciA9IGluc3RhbmNlLnByb3BzLmZvbGxvd0N1cnNvcjtcbiAgICAgIHZhciBjbGllbnRYID0gZXZlbnQuY2xpZW50WCxcbiAgICAgICAgICBjbGllbnRZID0gZXZlbnQuY2xpZW50WTtcbiAgICAgIHZhciByZWN0ID0gcmVmZXJlbmNlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgdmFyIHJlbGF0aXZlWCA9IGNsaWVudFggLSByZWN0LmxlZnQ7XG4gICAgICB2YXIgcmVsYXRpdmVZID0gY2xpZW50WSAtIHJlY3QudG9wO1xuXG4gICAgICBpZiAoaXNDdXJzb3JPdmVyUmVmZXJlbmNlIHx8ICFpbnN0YW5jZS5wcm9wcy5pbnRlcmFjdGl2ZSkge1xuICAgICAgICBpbnN0YW5jZS5zZXRQcm9wcyh7XG4gICAgICAgICAgZ2V0UmVmZXJlbmNlQ2xpZW50UmVjdDogZnVuY3Rpb24gZ2V0UmVmZXJlbmNlQ2xpZW50UmVjdCgpIHtcbiAgICAgICAgICAgIHZhciByZWN0ID0gcmVmZXJlbmNlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgdmFyIHggPSBjbGllbnRYO1xuICAgICAgICAgICAgdmFyIHkgPSBjbGllbnRZO1xuXG4gICAgICAgICAgICBpZiAoZm9sbG93Q3Vyc29yID09PSAnaW5pdGlhbCcpIHtcbiAgICAgICAgICAgICAgeCA9IHJlY3QubGVmdCArIHJlbGF0aXZlWDtcbiAgICAgICAgICAgICAgeSA9IHJlY3QudG9wICsgcmVsYXRpdmVZO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgdG9wID0gZm9sbG93Q3Vyc29yID09PSAnaG9yaXpvbnRhbCcgPyByZWN0LnRvcCA6IHk7XG4gICAgICAgICAgICB2YXIgcmlnaHQgPSBmb2xsb3dDdXJzb3IgPT09ICd2ZXJ0aWNhbCcgPyByZWN0LnJpZ2h0IDogeDtcbiAgICAgICAgICAgIHZhciBib3R0b20gPSBmb2xsb3dDdXJzb3IgPT09ICdob3Jpem9udGFsJyA/IHJlY3QuYm90dG9tIDogeTtcbiAgICAgICAgICAgIHZhciBsZWZ0ID0gZm9sbG93Q3Vyc29yID09PSAndmVydGljYWwnID8gcmVjdC5sZWZ0IDogeDtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIHdpZHRoOiByaWdodCAtIGxlZnQsXG4gICAgICAgICAgICAgIGhlaWdodDogYm90dG9tIC0gdG9wLFxuICAgICAgICAgICAgICB0b3A6IHRvcCxcbiAgICAgICAgICAgICAgcmlnaHQ6IHJpZ2h0LFxuICAgICAgICAgICAgICBib3R0b206IGJvdHRvbSxcbiAgICAgICAgICAgICAgbGVmdDogbGVmdFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoZ2V0SXNJbml0aWFsQmVoYXZpb3IoKSkge1xuICAgICAgICByZW1vdmVMaXN0ZW5lcigpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBvbkFmdGVyVXBkYXRlOiBmdW5jdGlvbiBvbkFmdGVyVXBkYXRlKF8sIF9yZWYpIHtcbiAgICAgICAgdmFyIGZvbGxvd0N1cnNvciA9IF9yZWYuZm9sbG93Q3Vyc29yO1xuXG4gICAgICAgIGlmIChmb2xsb3dDdXJzb3IgIT09IHVuZGVmaW5lZCAmJiAhZm9sbG93Q3Vyc29yKSB7XG4gICAgICAgICAgdW5zZXRSZWZlcmVuY2VDbGllbnRSZWN0KHRydWUpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb25Nb3VudDogZnVuY3Rpb24gb25Nb3VudCgpIHtcbiAgICAgICAgdHJpZ2dlckxhc3RNb3VzZU1vdmUoKTtcbiAgICAgIH0sXG4gICAgICBvblNob3c6IGZ1bmN0aW9uIG9uU2hvdygpIHtcbiAgICAgICAgaWYgKGdldElzTWFudWFsKCkpIHtcbiAgICAgICAgICAvLyBTaW5jZSB0aGVyZSdzIG5vIHRyaWdnZXIgZXZlbnQgdG8gdXNlLCB3ZSBoYXZlIHRvIHVzZSB0aGVzZSBhc1xuICAgICAgICAgIC8vIGJhc2VsaW5lIGNvb3Jkc1xuICAgICAgICAgIGluaXRpYWxNb3VzZUNvb3JkcyA9IHtcbiAgICAgICAgICAgIGNsaWVudFg6IDAsXG4gICAgICAgICAgICBjbGllbnRZOiAwXG4gICAgICAgICAgfTtcbiAgICAgICAgICBoYW5kbGVNb3VzZU1vdmVMaXN0ZW5lcigpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb25UcmlnZ2VyOiBmdW5jdGlvbiBvblRyaWdnZXIoXywgZXZlbnQpIHtcbiAgICAgICAgLy8gVGFwcGluZyBvbiB0b3VjaCBkZXZpY2VzIGNhbiB0cmlnZ2VyIGBtb3VzZWVudGVyYCB0aGVuIGBmb2N1c2BcbiAgICAgICAgaWYgKGluaXRpYWxNb3VzZUNvb3Jkcykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc01vdXNlRXZlbnQoZXZlbnQpKSB7XG4gICAgICAgICAgaW5pdGlhbE1vdXNlQ29vcmRzID0ge1xuICAgICAgICAgICAgY2xpZW50WDogZXZlbnQuY2xpZW50WCxcbiAgICAgICAgICAgIGNsaWVudFk6IGV2ZW50LmNsaWVudFlcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgaGFuZGxlTW91c2VNb3ZlTGlzdGVuZXIoKTtcbiAgICAgIH0sXG4gICAgICBvblVudHJpZ2dlcjogZnVuY3Rpb24gb25VbnRyaWdnZXIoKSB7XG4gICAgICAgIC8vIElmIHVudHJpZ2dlcmVkIGJlZm9yZSBzaG93aW5nIChgb25IaWRkZW5gIHdpbGwgbmV2ZXIgYmUgaW52b2tlZClcbiAgICAgICAgaWYgKCFpbnN0YW5jZS5zdGF0ZS5pc1Zpc2libGUpIHtcbiAgICAgICAgICByZW1vdmVMaXN0ZW5lcigpO1xuICAgICAgICAgIGluaXRpYWxNb3VzZUNvb3JkcyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvbkhpZGRlbjogZnVuY3Rpb24gb25IaWRkZW4oKSB7XG4gICAgICAgIHJlbW92ZUxpc3RlbmVyKCk7XG4gICAgICAgIGluaXRpYWxNb3VzZUNvb3JkcyA9IG51bGw7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufTtcblxuLy8gcG9zaXRpb24uXG5cbnZhciBpbmxpbmVQb3NpdGlvbmluZyA9IHtcbiAgbmFtZTogJ2lubGluZVBvc2l0aW9uaW5nJyxcbiAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgZm46IGZ1bmN0aW9uIGZuKGluc3RhbmNlKSB7XG4gICAgdmFyIHJlZmVyZW5jZSA9IGluc3RhbmNlLnJlZmVyZW5jZTtcblxuICAgIGZ1bmN0aW9uIGlzRW5hYmxlZCgpIHtcbiAgICAgIHJldHVybiAhIWluc3RhbmNlLnByb3BzLmlubGluZVBvc2l0aW9uaW5nO1xuICAgIH1cblxuICAgIHZhciBwbGFjZW1lbnQ7XG4gICAgdmFyIG1vZGlmaWVyID0ge1xuICAgICAgbmFtZTogJ3RpcHB5SW5saW5lUG9zaXRpb25pbmcnLFxuICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgIHBoYXNlOiAnYWZ0ZXJXcml0ZScsXG4gICAgICBmbjogZnVuY3Rpb24gZm4oX3JlZikge1xuICAgICAgICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlO1xuXG4gICAgICAgIGlmIChpc0VuYWJsZWQoKSkge1xuICAgICAgICAgIGlmIChwbGFjZW1lbnQgIT09IHN0YXRlLnBsYWNlbWVudCkge1xuICAgICAgICAgICAgaW5zdGFuY2Uuc2V0UHJvcHMoe1xuICAgICAgICAgICAgICBnZXRSZWZlcmVuY2VDbGllbnRSZWN0OiBmdW5jdGlvbiBnZXRSZWZlcmVuY2VDbGllbnRSZWN0KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfZ2V0UmVmZXJlbmNlQ2xpZW50UmVjdChzdGF0ZS5wbGFjZW1lbnQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwbGFjZW1lbnQgPSBzdGF0ZS5wbGFjZW1lbnQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gX2dldFJlZmVyZW5jZUNsaWVudFJlY3QocGxhY2VtZW50KSB7XG4gICAgICByZXR1cm4gZ2V0SW5saW5lQm91bmRpbmdDbGllbnRSZWN0KGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KSwgcmVmZXJlbmNlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLCBhcnJheUZyb20ocmVmZXJlbmNlLmdldENsaWVudFJlY3RzKCkpKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgb25DcmVhdGU6IGZ1bmN0aW9uIG9uQ3JlYXRlKCkge1xuICAgICAgICB2YXIgX2luc3RhbmNlJHByb3BzJHBvcHBlO1xuXG4gICAgICAgIGluc3RhbmNlLnNldFByb3BzKHtcbiAgICAgICAgICBwb3BwZXJPcHRpb25zOiBPYmplY3QuYXNzaWduKHt9LCBpbnN0YW5jZS5wcm9wcy5wb3BwZXJPcHRpb25zLCB7XG4gICAgICAgICAgICBtb2RpZmllcnM6IFtdLmNvbmNhdCgoKF9pbnN0YW5jZSRwcm9wcyRwb3BwZSA9IGluc3RhbmNlLnByb3BzLnBvcHBlck9wdGlvbnMpID09IG51bGwgPyB2b2lkIDAgOiBfaW5zdGFuY2UkcHJvcHMkcG9wcGUubW9kaWZpZXJzKSB8fCBbXSwgW21vZGlmaWVyXSlcbiAgICAgICAgICB9KVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59O1xuZnVuY3Rpb24gZ2V0SW5saW5lQm91bmRpbmdDbGllbnRSZWN0KGN1cnJlbnRCYXNlUGxhY2VtZW50LCBib3VuZGluZ1JlY3QsIGNsaWVudFJlY3RzKSB7XG4gIC8vIE5vdCBhbiBpbmxpbmUgZWxlbWVudCwgb3IgcGxhY2VtZW50IGlzIG5vdCB5ZXQga25vd25cbiAgaWYgKGNsaWVudFJlY3RzLmxlbmd0aCA8IDIgfHwgY3VycmVudEJhc2VQbGFjZW1lbnQgPT09IG51bGwpIHtcbiAgICByZXR1cm4gYm91bmRpbmdSZWN0O1xuICB9XG5cbiAgc3dpdGNoIChjdXJyZW50QmFzZVBsYWNlbWVudCkge1xuICAgIGNhc2UgJ3RvcCc6XG4gICAgY2FzZSAnYm90dG9tJzpcbiAgICAgIHtcbiAgICAgICAgdmFyIGZpcnN0UmVjdCA9IGNsaWVudFJlY3RzWzBdO1xuICAgICAgICB2YXIgbGFzdFJlY3QgPSBjbGllbnRSZWN0c1tjbGllbnRSZWN0cy5sZW5ndGggLSAxXTtcbiAgICAgICAgdmFyIGlzVG9wID0gY3VycmVudEJhc2VQbGFjZW1lbnQgPT09ICd0b3AnO1xuICAgICAgICB2YXIgdG9wID0gZmlyc3RSZWN0LnRvcDtcbiAgICAgICAgdmFyIGJvdHRvbSA9IGxhc3RSZWN0LmJvdHRvbTtcbiAgICAgICAgdmFyIGxlZnQgPSBpc1RvcCA/IGZpcnN0UmVjdC5sZWZ0IDogbGFzdFJlY3QubGVmdDtcbiAgICAgICAgdmFyIHJpZ2h0ID0gaXNUb3AgPyBmaXJzdFJlY3QucmlnaHQgOiBsYXN0UmVjdC5yaWdodDtcbiAgICAgICAgdmFyIHdpZHRoID0gcmlnaHQgLSBsZWZ0O1xuICAgICAgICB2YXIgaGVpZ2h0ID0gYm90dG9tIC0gdG9wO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHRvcDogdG9wLFxuICAgICAgICAgIGJvdHRvbTogYm90dG9tLFxuICAgICAgICAgIGxlZnQ6IGxlZnQsXG4gICAgICAgICAgcmlnaHQ6IHJpZ2h0LFxuICAgICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgICBoZWlnaHQ6IGhlaWdodFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgY2FzZSAnbGVmdCc6XG4gICAgY2FzZSAncmlnaHQnOlxuICAgICAge1xuICAgICAgICB2YXIgbWluTGVmdCA9IE1hdGgubWluLmFwcGx5KE1hdGgsIGNsaWVudFJlY3RzLm1hcChmdW5jdGlvbiAocmVjdHMpIHtcbiAgICAgICAgICByZXR1cm4gcmVjdHMubGVmdDtcbiAgICAgICAgfSkpO1xuICAgICAgICB2YXIgbWF4UmlnaHQgPSBNYXRoLm1heC5hcHBseShNYXRoLCBjbGllbnRSZWN0cy5tYXAoZnVuY3Rpb24gKHJlY3RzKSB7XG4gICAgICAgICAgcmV0dXJuIHJlY3RzLnJpZ2h0O1xuICAgICAgICB9KSk7XG4gICAgICAgIHZhciBtZWFzdXJlUmVjdHMgPSBjbGllbnRSZWN0cy5maWx0ZXIoZnVuY3Rpb24gKHJlY3QpIHtcbiAgICAgICAgICByZXR1cm4gY3VycmVudEJhc2VQbGFjZW1lbnQgPT09ICdsZWZ0JyA/IHJlY3QubGVmdCA9PT0gbWluTGVmdCA6IHJlY3QucmlnaHQgPT09IG1heFJpZ2h0O1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIF90b3AgPSBtZWFzdXJlUmVjdHNbMF0udG9wO1xuICAgICAgICB2YXIgX2JvdHRvbSA9IG1lYXN1cmVSZWN0c1ttZWFzdXJlUmVjdHMubGVuZ3RoIC0gMV0uYm90dG9tO1xuICAgICAgICB2YXIgX2xlZnQgPSBtaW5MZWZ0O1xuICAgICAgICB2YXIgX3JpZ2h0ID0gbWF4UmlnaHQ7XG5cbiAgICAgICAgdmFyIF93aWR0aCA9IF9yaWdodCAtIF9sZWZ0O1xuXG4gICAgICAgIHZhciBfaGVpZ2h0ID0gX2JvdHRvbSAtIF90b3A7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0b3A6IF90b3AsXG4gICAgICAgICAgYm90dG9tOiBfYm90dG9tLFxuICAgICAgICAgIGxlZnQ6IF9sZWZ0LFxuICAgICAgICAgIHJpZ2h0OiBfcmlnaHQsXG4gICAgICAgICAgd2lkdGg6IF93aWR0aCxcbiAgICAgICAgICBoZWlnaHQ6IF9oZWlnaHRcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgIGRlZmF1bHQ6XG4gICAgICB7XG4gICAgICAgIHJldHVybiBib3VuZGluZ1JlY3Q7XG4gICAgICB9XG4gIH1cbn1cblxudmFyIHN0aWNreSA9IHtcbiAgbmFtZTogJ3N0aWNreScsXG4gIGRlZmF1bHRWYWx1ZTogZmFsc2UsXG4gIGZuOiBmdW5jdGlvbiBmbihpbnN0YW5jZSkge1xuICAgIHZhciByZWZlcmVuY2UgPSBpbnN0YW5jZS5yZWZlcmVuY2UsXG4gICAgICAgIHBvcHBlciA9IGluc3RhbmNlLnBvcHBlcjtcblxuICAgIGZ1bmN0aW9uIGdldFJlZmVyZW5jZSgpIHtcbiAgICAgIHJldHVybiBpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZSA/IGluc3RhbmNlLnBvcHBlckluc3RhbmNlLnN0YXRlLmVsZW1lbnRzLnJlZmVyZW5jZSA6IHJlZmVyZW5jZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzaG91bGRDaGVjayh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGluc3RhbmNlLnByb3BzLnN0aWNreSA9PT0gdHJ1ZSB8fCBpbnN0YW5jZS5wcm9wcy5zdGlja3kgPT09IHZhbHVlO1xuICAgIH1cblxuICAgIHZhciBwcmV2UmVmUmVjdCA9IG51bGw7XG4gICAgdmFyIHByZXZQb3BSZWN0ID0gbnVsbDtcblxuICAgIGZ1bmN0aW9uIHVwZGF0ZVBvc2l0aW9uKCkge1xuICAgICAgdmFyIGN1cnJlbnRSZWZSZWN0ID0gc2hvdWxkQ2hlY2soJ3JlZmVyZW5jZScpID8gZ2V0UmVmZXJlbmNlKCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgOiBudWxsO1xuICAgICAgdmFyIGN1cnJlbnRQb3BSZWN0ID0gc2hvdWxkQ2hlY2soJ3BvcHBlcicpID8gcG9wcGVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIDogbnVsbDtcblxuICAgICAgaWYgKGN1cnJlbnRSZWZSZWN0ICYmIGFyZVJlY3RzRGlmZmVyZW50KHByZXZSZWZSZWN0LCBjdXJyZW50UmVmUmVjdCkgfHwgY3VycmVudFBvcFJlY3QgJiYgYXJlUmVjdHNEaWZmZXJlbnQocHJldlBvcFJlY3QsIGN1cnJlbnRQb3BSZWN0KSkge1xuICAgICAgICBpZiAoaW5zdGFuY2UucG9wcGVySW5zdGFuY2UpIHtcbiAgICAgICAgICBpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZS51cGRhdGUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBwcmV2UmVmUmVjdCA9IGN1cnJlbnRSZWZSZWN0O1xuICAgICAgcHJldlBvcFJlY3QgPSBjdXJyZW50UG9wUmVjdDtcblxuICAgICAgaWYgKGluc3RhbmNlLnN0YXRlLmlzTW91bnRlZCkge1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodXBkYXRlUG9zaXRpb24pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBvbk1vdW50OiBmdW5jdGlvbiBvbk1vdW50KCkge1xuICAgICAgICBpZiAoaW5zdGFuY2UucHJvcHMuc3RpY2t5KSB7XG4gICAgICAgICAgdXBkYXRlUG9zaXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGFyZVJlY3RzRGlmZmVyZW50KHJlY3RBLCByZWN0Qikge1xuICBpZiAocmVjdEEgJiYgcmVjdEIpIHtcbiAgICByZXR1cm4gcmVjdEEudG9wICE9PSByZWN0Qi50b3AgfHwgcmVjdEEucmlnaHQgIT09IHJlY3RCLnJpZ2h0IHx8IHJlY3RBLmJvdHRvbSAhPT0gcmVjdEIuYm90dG9tIHx8IHJlY3RBLmxlZnQgIT09IHJlY3RCLmxlZnQ7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxudGlwcHkuc2V0RGVmYXVsdFByb3BzKHtcbiAgcmVuZGVyOiByZW5kZXJcbn0pO1xuXG5leHBvcnRzLmFuaW1hdGVGaWxsID0gYW5pbWF0ZUZpbGw7XG5leHBvcnRzLmNyZWF0ZVNpbmdsZXRvbiA9IGNyZWF0ZVNpbmdsZXRvbjtcbmV4cG9ydHMuZGVmYXVsdCA9IHRpcHB5O1xuZXhwb3J0cy5kZWxlZ2F0ZSA9IGRlbGVnYXRlO1xuZXhwb3J0cy5mb2xsb3dDdXJzb3IgPSBmb2xsb3dDdXJzb3I7XG5leHBvcnRzLmhpZGVBbGwgPSBoaWRlQWxsO1xuZXhwb3J0cy5pbmxpbmVQb3NpdGlvbmluZyA9IGlubGluZVBvc2l0aW9uaW5nO1xuZXhwb3J0cy5yb3VuZEFycm93ID0gUk9VTkRfQVJST1c7XG5leHBvcnRzLnN0aWNreSA9IHN0aWNreTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRpcHB5LmNqcy5qcy5tYXBcbiJdfQ==
