!function i(u,s,a){function c(t,e){if(!s[t]){if(!u[t]){var n="function"==typeof require&&require;if(!e&&n)return n(t,!0);if(l)return l(t,!0);var r=new Error("Cannot find module '"+t+"'");throw r.code="MODULE_NOT_FOUND",r}var o=s[t]={exports:{}};u[t][0].call(o.exports,function(e){return c(u[t][1][e]||e)},o,o.exports,i,u,s,a)}return s[t].exports}for(var l="function"==typeof require&&require,e=0;e<a.length;e++)c(a[e]);return c}({1:[function(t,n,r){"use strict";function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var o,s=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==u(e)&&"function"!=typeof e)return{default:e};var t=a();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e){var i;Object.prototype.hasOwnProperty.call(e,o)&&((i=r?Object.getOwnPropertyDescriptor(e,o):null)&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o])}n.default=e,t&&t.set(e,n);return n}(t("@microsoft/signalr")),l=(o=t("tippy.js"))&&o.__esModule?o:{default:o};function a(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return a=function(){return e},e}var c=document.getElementById("wiki-talk-send");c&&(c.completelyDisabled=!0,c.disabled=!0);var D=document.getElementById("wiki-talk-newmessage-input");window.wikimvcchat={connection:null,messageListUl:null,userNamespace:"Users",init:function(e,t,n,r){if(window.wikimvcchat.userNamespace=t,window.wikimvcchat.messageListUl=document.getElementById("wiki-talk-message-list"),null!=window.wikimvcchat.messageListUl){r=JSON.parse(r)||[];for(var o,i=0;i<r.length;i++)window.wikimvcchat.addMessage(r[i]);0<r.length&&(null!=(o=document.getElementById("wiki-message-div-".concat(r[r.length-1].id)))&&o.classList.contains("wiki-message-thread")&&o.classList.add("expanded")),e&&e.length&&n&&n.length&&(window.wikimvcchat.connection=(new s.HubConnectionBuilder).withUrl(e).withAutomaticReconnect().build(),window.wikimvcchat.connection.on("Receive",window.wikimvcchat.addMessage),window.wikimvcchat.connection.start().then(function(){c.completelyDisabled=!1}).catch(function(e){return console.error("An error occurred while connecting to chat")}),D&&(D.addEventListener("input",function(){c.completelyDisabled||(c.disabled=!(D.value&&0<D.value.length))}),D.addEventListener("keypress",function(e){13!==e.keyCode||e.shiftKey||(window.wikimvcchat.sendMessage(n,D.value),e.preventDefault(),e.stopPropagation())})),c&&c.addEventListener("click",function(e){window.wikimvcchat.sendMessage(n,D.value),e.preventDefault(),e.stopPropagation()}))}},addMessage:function(t){var n,r,o,i,u,s,a,c,l,D,p,f,h,d,g,v,m,y,F,E,b,C,w,B;null!=t&&null!=t.content&&null!=t.content.length&&0<t.content.length&&((n=null!=t.replyMessageId&&null!=t.replyMessageId.length&&0<t.replyMessageId.length)&&/(?:\uD83D(?:\uDD73\uFE0F?|\uDC41(?:(?:\uFE0F(?:\u200D\uD83D\uDDE8\uFE0F?)?|\u200D\uD83D\uDDE8\uFE0F?))?|[\uDDE8\uDDEF]\uFE0F?|\uDC4B(?:\uD83C[\uDFFB-\uDFFF])?|\uDD90(?:(?:\uD83C[\uDFFB-\uDFFF]|\uFE0F))?|[\uDD96\uDC4C\uDC48\uDC49\uDC46\uDD95\uDC47\uDC4D\uDC4E\uDC4A\uDC4F\uDE4C\uDC50\uDE4F\uDC85\uDCAA\uDC42\uDC43\uDC76\uDC66\uDC67](?:\uD83C[\uDFFB-\uDFFF])?|\uDC71(?:(?:\uD83C(?:[\uDFFB-\uDFFF](?:\u200D(?:[\u2640\u2642]\uFE0F?))?)|\u200D(?:[\u2640\u2642]\uFE0F?)))?|\uDC68(?:(?:\uD83C(?:\uDFFB(?:\u200D(?:\uD83E(?:\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFC-\uDFFF]|[\uDDB0\uDDB1\uDDB3\uDDB2\uDDAF\uDDBC\uDDBD])|\u2695\uFE0F?|\uD83C[\uDF93\uDFEB\uDF3E\uDF73\uDFED\uDFA4\uDFA8]|\u2696\uFE0F?|\uD83D[\uDD27\uDCBC\uDD2C\uDCBB\uDE80\uDE92]|\u2708\uFE0F?))?|\uDFFC(?:\u200D(?:\uD83E(?:\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB\uDFFD-\uDFFF]|[\uDDB0\uDDB1\uDDB3\uDDB2\uDDAF\uDDBC\uDDBD])|\u2695\uFE0F?|\uD83C[\uDF93\uDFEB\uDF3E\uDF73\uDFED\uDFA4\uDFA8]|\u2696\uFE0F?|\uD83D[\uDD27\uDCBC\uDD2C\uDCBB\uDE80\uDE92]|\u2708\uFE0F?))?|\uDFFD(?:\u200D(?:\uD83E(?:\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF]|[\uDDB0\uDDB1\uDDB3\uDDB2\uDDAF\uDDBC\uDDBD])|\u2695\uFE0F?|\uD83C[\uDF93\uDFEB\uDF3E\uDF73\uDFED\uDFA4\uDFA8]|\u2696\uFE0F?|\uD83D[\uDD27\uDCBC\uDD2C\uDCBB\uDE80\uDE92]|\u2708\uFE0F?))?|\uDFFE(?:\u200D(?:\uD83E(?:\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB-\uDFFD\uDFFF]|[\uDDB0\uDDB1\uDDB3\uDDB2\uDDAF\uDDBC\uDDBD])|\u2695\uFE0F?|\uD83C[\uDF93\uDFEB\uDF3E\uDF73\uDFED\uDFA4\uDFA8]|\u2696\uFE0F?|\uD83D[\uDD27\uDCBC\uDD2C\uDCBB\uDE80\uDE92]|\u2708\uFE0F?))?|\uDFFF(?:\u200D(?:\uD83E(?:\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB-\uDFFE]|[\uDDB0\uDDB1\uDDB3\uDDB2\uDDAF\uDDBC\uDDBD])|\u2695\uFE0F?|\uD83C[\uDF93\uDFEB\uDF3E\uDF73\uDFED\uDFA4\uDFA8]|\u2696\uFE0F?|\uD83D[\uDD27\uDCBC\uDD2C\uDCBB\uDE80\uDE92]|\u2708\uFE0F?))?)|\u200D(?:\uD83E[\uDDB0\uDDB1\uDDB3\uDDB2\uDDAF\uDDBC\uDDBD]|\u2695\uFE0F?|\uD83C[\uDF93\uDFEB\uDF3E\uDF73\uDFED\uDFA4\uDFA8]|\u2696\uFE0F?|\uD83D(?:\uDC69\u200D\uD83D(?:\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?)|\uDC68\u200D\uD83D(?:\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?)|\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?|[\uDD27\uDCBC\uDD2C\uDCBB\uDE80\uDE92])|\u2708\uFE0F?|\u2764(?:\uFE0F\u200D\uD83D(?:\uDC8B\u200D\uD83D\uDC68|\uDC68)|\u200D\uD83D(?:\uDC8B\u200D\uD83D\uDC68|\uDC68)))))?|\uDC69(?:(?:\uD83C(?:\uDFFB(?:\u200D(?:\uD83E(?:\uDD1D\u200D\uD83D(?:\uDC69\uD83C[\uDFFC-\uDFFF]|\uDC68\uD83C[\uDFFC-\uDFFF])|[\uDDB0\uDDB1\uDDB3\uDDB2\uDDAF\uDDBC\uDDBD])|\u2695\uFE0F?|\uD83C[\uDF93\uDFEB\uDF3E\uDF73\uDFED\uDFA4\uDFA8]|\u2696\uFE0F?|\uD83D[\uDD27\uDCBC\uDD2C\uDCBB\uDE80\uDE92]|\u2708\uFE0F?))?|\uDFFC(?:\u200D(?:\uD83E(?:\uDD1D\u200D\uD83D(?:\uDC69\uD83C[\uDFFB\uDFFD-\uDFFF]|\uDC68\uD83C[\uDFFB\uDFFD-\uDFFF])|[\uDDB0\uDDB1\uDDB3\uDDB2\uDDAF\uDDBC\uDDBD])|\u2695\uFE0F?|\uD83C[\uDF93\uDFEB\uDF3E\uDF73\uDFED\uDFA4\uDFA8]|\u2696\uFE0F?|\uD83D[\uDD27\uDCBC\uDD2C\uDCBB\uDE80\uDE92]|\u2708\uFE0F?))?|\uDFFD(?:\u200D(?:\uD83E(?:\uDD1D\u200D\uD83D(?:\uDC69\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF]|\uDC68\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])|[\uDDB0\uDDB1\uDDB3\uDDB2\uDDAF\uDDBC\uDDBD])|\u2695\uFE0F?|\uD83C[\uDF93\uDFEB\uDF3E\uDF73\uDFED\uDFA4\uDFA8]|\u2696\uFE0F?|\uD83D[\uDD27\uDCBC\uDD2C\uDCBB\uDE80\uDE92]|\u2708\uFE0F?))?|\uDFFE(?:\u200D(?:\uD83E(?:\uDD1D\u200D\uD83D(?:\uDC69\uD83C[\uDFFB-\uDFFD\uDFFF]|\uDC68\uD83C[\uDFFB-\uDFFD\uDFFF])|[\uDDB0\uDDB1\uDDB3\uDDB2\uDDAF\uDDBC\uDDBD])|\u2695\uFE0F?|\uD83C[\uDF93\uDFEB\uDF3E\uDF73\uDFED\uDFA4\uDFA8]|\u2696\uFE0F?|\uD83D[\uDD27\uDCBC\uDD2C\uDCBB\uDE80\uDE92]|\u2708\uFE0F?))?|\uDFFF(?:\u200D(?:\uD83E(?:\uDD1D\u200D\uD83D(?:\uDC69\uD83C[\uDFFB-\uDFFE]|\uDC68\uD83C[\uDFFB-\uDFFE])|[\uDDB0\uDDB1\uDDB3\uDDB2\uDDAF\uDDBC\uDDBD])|\u2695\uFE0F?|\uD83C[\uDF93\uDFEB\uDF3E\uDF73\uDFED\uDFA4\uDFA8]|\u2696\uFE0F?|\uD83D[\uDD27\uDCBC\uDD2C\uDCBB\uDE80\uDE92]|\u2708\uFE0F?))?)|\u200D(?:\uD83E[\uDDB0\uDDB1\uDDB3\uDDB2\uDDAF\uDDBC\uDDBD]|\u2695\uFE0F?|\uD83C[\uDF93\uDFEB\uDF3E\uDF73\uDFED\uDFA4\uDFA8]|\u2696\uFE0F?|\uD83D(?:\uDC69\u200D\uD83D(?:\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?)|\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?|[\uDD27\uDCBC\uDD2C\uDCBB\uDE80\uDE92])|\u2708\uFE0F?|\u2764(?:\uFE0F\u200D\uD83D(?:\uDC8B\u200D\uD83D[\uDC68\uDC69]|[\uDC68\uDC69])|\u200D\uD83D(?:\uDC8B\u200D\uD83D[\uDC68\uDC69]|[\uDC68\uDC69])))))?|[\uDC74\uDC75](?:\uD83C[\uDFFB-\uDFFF])?|[\uDE4D\uDE4E\uDE45\uDE46\uDC81\uDE4B\uDE47\uDC6E](?:(?:\uD83C(?:[\uDFFB-\uDFFF](?:\u200D(?:[\u2642\u2640]\uFE0F?))?)|\u200D(?:[\u2642\u2640]\uFE0F?)))?|\uDD75(?:(?:\uFE0F(?:\u200D(?:[\u2642\u2640]\uFE0F?))?|\uD83C(?:[\uDFFB-\uDFFF](?:\u200D(?:[\u2642\u2640]\uFE0F?))?)|\u200D(?:[\u2642\u2640]\uFE0F?)))?|[\uDC82\uDC77](?:(?:\uD83C(?:[\uDFFB-\uDFFF](?:\u200D(?:[\u2642\u2640]\uFE0F?))?)|\u200D(?:[\u2642\u2640]\uFE0F?)))?|\uDC78(?:\uD83C[\uDFFB-\uDFFF])?|\uDC73(?:(?:\uD83C(?:[\uDFFB-\uDFFF](?:\u200D(?:[\u2642\u2640]\uFE0F?))?)|\u200D(?:[\u2642\u2640]\uFE0F?)))?|[\uDC72\uDC70\uDC7C](?:\uD83C[\uDFFB-\uDFFF])?|[\uDC86\uDC87\uDEB6](?:(?:\uD83C(?:[\uDFFB-\uDFFF](?:\u200D(?:[\u2642\u2640]\uFE0F?))?)|\u200D(?:[\u2642\u2640]\uFE0F?)))?|[\uDC83\uDD7A](?:\uD83C[\uDFFB-\uDFFF])?|\uDD74(?:(?:\uD83C[\uDFFB-\uDFFF]|\uFE0F))?|\uDC6F(?:\u200D(?:[\u2642\u2640]\uFE0F?))?|[\uDEA3\uDEB4\uDEB5](?:(?:\uD83C(?:[\uDFFB-\uDFFF](?:\u200D(?:[\u2642\u2640]\uFE0F?))?)|\u200D(?:[\u2642\u2640]\uFE0F?)))?|[\uDEC0\uDECC\uDC6D\uDC6B\uDC6C](?:\uD83C[\uDFFB-\uDFFF])?|\uDDE3\uFE0F?|\uDC15(?:\u200D\uD83E\uDDBA)?|[\uDC3F\uDD4A\uDD77\uDD78\uDDFA\uDEE3\uDEE4\uDEE2\uDEF3\uDEE5\uDEE9\uDEF0\uDECE\uDD70\uDD79\uDDBC\uDD76\uDECD\uDDA5\uDDA8\uDDB1\uDDB2\uDCFD\uDD6F\uDDDE\uDDF3\uDD8B\uDD8A\uDD8C\uDD8D\uDDC2\uDDD2\uDDD3\uDD87\uDDC3\uDDC4\uDDD1\uDDDD\uDEE0\uDDE1\uDEE1\uDDDC\uDECF\uDECB\uDD49]\uFE0F?|[\uDE00\uDE03\uDE04\uDE01\uDE06\uDE05\uDE02\uDE42\uDE43\uDE09\uDE0A\uDE07\uDE0D\uDE18\uDE17\uDE1A\uDE19\uDE0B\uDE1B-\uDE1D\uDE10\uDE11\uDE36\uDE0F\uDE12\uDE44\uDE2C\uDE0C\uDE14\uDE2A\uDE34\uDE37\uDE35\uDE0E\uDE15\uDE1F\uDE41\uDE2E\uDE2F\uDE32\uDE33\uDE26-\uDE28\uDE30\uDE25\uDE22\uDE2D\uDE31\uDE16\uDE23\uDE1E\uDE13\uDE29\uDE2B\uDE24\uDE21\uDE20\uDE08\uDC7F\uDC80\uDCA9\uDC79-\uDC7B\uDC7D\uDC7E\uDE3A\uDE38\uDE39\uDE3B-\uDE3D\uDE40\uDE3F\uDE3E\uDE48-\uDE4A\uDC8B\uDC8C\uDC98\uDC9D\uDC96\uDC97\uDC93\uDC9E\uDC95\uDC9F\uDC94\uDC9B\uDC9A\uDC99\uDC9C\uDDA4\uDCAF\uDCA2\uDCA5\uDCAB\uDCA6\uDCA8\uDCA3\uDCAC\uDCAD\uDCA4\uDC40\uDC45\uDC44\uDC8F\uDC91\uDC6A\uDC64\uDC65\uDC63\uDC35\uDC12\uDC36\uDC29\uDC3A\uDC31\uDC08\uDC2F\uDC05\uDC06\uDC34\uDC0E\uDC2E\uDC02-\uDC04\uDC37\uDC16\uDC17\uDC3D\uDC0F\uDC11\uDC10\uDC2A\uDC2B\uDC18\uDC2D\uDC01\uDC00\uDC39\uDC30\uDC07\uDC3B\uDC28\uDC3C\uDC3E\uDC14\uDC13\uDC23-\uDC27\uDC38\uDC0A\uDC22\uDC0D\uDC32\uDC09\uDC33\uDC0B\uDC2C\uDC1F-\uDC21\uDC19\uDC1A\uDC0C\uDC1B-\uDC1E\uDC90\uDCAE\uDD2A\uDDFE\uDDFB\uDC92\uDDFC\uDDFD\uDD4C\uDED5\uDD4D\uDD4B\uDC88\uDE82-\uDE8A\uDE9D\uDE9E\uDE8B-\uDE8E\uDE90-\uDE9C\uDEF5\uDEFA\uDEB2\uDEF4\uDEF9\uDE8F\uDEA8\uDEA5\uDEA6\uDED1\uDEA7\uDEF6\uDEA4\uDEA2\uDEEB\uDEEC\uDCBA\uDE81\uDE9F-\uDEA1\uDE80\uDEF8\uDD5B\uDD67\uDD50\uDD5C\uDD51\uDD5D\uDD52\uDD5E\uDD53\uDD5F\uDD54\uDD60\uDD55\uDD61\uDD56\uDD62\uDD57\uDD63\uDD58\uDD64\uDD59\uDD65\uDD5A\uDD66\uDD25\uDCA7\uDEF7\uDD2E\uDC53-\uDC62\uDC51\uDC52\uDCFF\uDC84\uDC8D\uDC8E\uDD07-\uDD0A\uDCE2\uDCE3\uDCEF\uDD14\uDD15\uDCFB\uDCF1\uDCF2\uDCDE-\uDCE0\uDD0B\uDD0C\uDCBB\uDCBD-\uDCC0\uDCFA\uDCF7-\uDCF9\uDCFC\uDD0D\uDD0E\uDCA1\uDD26\uDCD4-\uDCDA\uDCD3\uDCD2\uDCC3\uDCDC\uDCC4\uDCF0\uDCD1\uDD16\uDCB0\uDCB4-\uDCB8\uDCB3\uDCB9\uDCB1\uDCB2\uDCE7-\uDCE9\uDCE4-\uDCE6\uDCEB\uDCEA\uDCEC-\uDCEE\uDCDD\uDCBC\uDCC1\uDCC2\uDCC5-\uDCD0\uDD12\uDD13\uDD0F-\uDD11\uDD28\uDD2B\uDD27\uDD29\uDD17\uDD2C\uDD2D\uDCE1\uDC89\uDC8A\uDEAA\uDEBD\uDEBF\uDEC1\uDED2\uDEAC\uDDFF\uDEAE\uDEB0\uDEB9-\uDEBC\uDEBE\uDEC2-\uDEC5\uDEB8\uDEAB\uDEB3\uDEAD\uDEAF\uDEB1\uDEB7\uDCF5\uDD1E\uDD03\uDD04\uDD19-\uDD1D\uDED0\uDD4E\uDD2F\uDD00-\uDD02\uDD3C\uDD3D\uDD05\uDD06\uDCF6\uDCF3\uDCF4\uDD31\uDCDB\uDD30\uDD1F-\uDD24\uDD34\uDFE0-\uDFE2\uDD35\uDFE3-\uDFE5\uDFE7-\uDFE9\uDFE6\uDFEA\uDFEB\uDD36-\uDD3B\uDCA0\uDD18\uDD33\uDD32\uDEA9])|\uD83E(?:[\uDD1A\uDD0F\uDD1E\uDD1F\uDD18\uDD19\uDD1B\uDD1C\uDD32\uDD33\uDDB5\uDDB6\uDDBB\uDDD2](?:\uD83C[\uDFFB-\uDFFF])?|\uDDD1(?:(?:\uD83C(?:[\uDFFB-\uDFFF](?:\u200D(?:\uD83E(?:\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF]|[\uDDB0\uDDB1\uDDB3\uDDB2\uDDAF\uDDBC\uDDBD])|\u2695\uFE0F?|\uD83C[\uDF93\uDFEB\uDF3E\uDF73\uDFED\uDFA4\uDFA8]|\u2696\uFE0F?|\uD83D[\uDD27\uDCBC\uDD2C\uDCBB\uDE80\uDE92]|\u2708\uFE0F?))?)|\u200D(?:\uD83E(?:\uDD1D\u200D\uD83E\uDDD1|[\uDDB0\uDDB1\uDDB3\uDDB2\uDDAF\uDDBC\uDDBD])|\u2695\uFE0F?|\uD83C[\uDF93\uDFEB\uDF3E\uDF73\uDFED\uDFA4\uDFA8]|\u2696\uFE0F?|\uD83D[\uDD27\uDCBC\uDD2C\uDCBB\uDE80\uDE92]|\u2708\uFE0F?)))?|[\uDDD4\uDDD3](?:\uD83C[\uDFFB-\uDFFF])?|[\uDDCF\uDD26\uDD37](?:(?:\uD83C(?:[\uDFFB-\uDFFF](?:\u200D(?:[\u2642\u2640]\uFE0F?))?)|\u200D(?:[\u2642\u2640]\uFE0F?)))?|[\uDD34\uDDD5\uDD35\uDD30\uDD31\uDD36](?:\uD83C[\uDFFB-\uDFFF])?|[\uDDB8\uDDB9\uDDD9-\uDDDD](?:(?:\uD83C(?:[\uDFFB-\uDFFF](?:\u200D(?:[\u2642\u2640]\uFE0F?))?)|\u200D(?:[\u2642\u2640]\uFE0F?)))?|[\uDDDE\uDDDF](?:\u200D(?:[\u2642\u2640]\uFE0F?))?|[\uDDCD\uDDCE\uDDD6\uDDD7\uDD38](?:(?:\uD83C(?:[\uDFFB-\uDFFF](?:\u200D(?:[\u2642\u2640]\uFE0F?))?)|\u200D(?:[\u2642\u2640]\uFE0F?)))?|\uDD3C(?:\u200D(?:[\u2642\u2640]\uFE0F?))?|[\uDD3D\uDD3E\uDD39\uDDD8](?:(?:\uD83C(?:[\uDFFB-\uDFFF](?:\u200D(?:[\u2642\u2640]\uFE0F?))?)|\u200D(?:[\u2642\u2640]\uFE0F?)))?|[\uDD23\uDD70\uDD29\uDD2A\uDD11\uDD17\uDD2D\uDD2B\uDD14\uDD10\uDD28\uDD25\uDD24\uDD12\uDD15\uDD22\uDD2E\uDD27\uDD75\uDD76\uDD74\uDD2F\uDD20\uDD73\uDD13\uDDD0\uDD7A\uDD71\uDD2C\uDD21\uDD16\uDDE1\uDD0E\uDD0D\uDD1D\uDDBE\uDDBF\uDDE0\uDDB7\uDDB4\uDD3A\uDDB0\uDDB1\uDDB3\uDDB2\uDD8D\uDDA7\uDDAE\uDD8A\uDD9D\uDD81\uDD84\uDD93\uDD8C\uDD99\uDD92\uDD8F\uDD9B\uDD94\uDD87\uDDA5\uDDA6\uDDA8\uDD98\uDDA1\uDD83\uDD85\uDD86\uDDA2\uDD89\uDDA9\uDD9A\uDD9C\uDD8E\uDD95\uDD96\uDD88\uDD8B\uDD97\uDD82\uDD9F\uDDA0\uDD40\uDD6D\uDD5D\uDD65\uDD51\uDD54\uDD55\uDD52\uDD6C\uDD66\uDDC4\uDDC5\uDD5C\uDD50\uDD56\uDD68\uDD6F\uDD5E\uDDC7\uDDC0\uDD69\uDD53\uDD6A\uDD59\uDDC6\uDD5A\uDD58\uDD63\uDD57\uDDC8\uDDC2\uDD6B\uDD6E\uDD5F-\uDD61\uDD80\uDD9E\uDD90\uDD91\uDDAA\uDDC1\uDD67\uDD5B\uDD42\uDD43\uDD64\uDDC3\uDDC9\uDDCA\uDD62\uDD44\uDDED\uDDF1\uDDBD\uDDBC\uDE82\uDDF3\uDE90\uDDE8\uDDE7\uDD47-\uDD49\uDD4E\uDD4F\uDD4D\uDD4A\uDD4B\uDD45\uDD3F\uDD4C\uDE80\uDE81\uDDFF\uDDE9\uDDF8\uDDF5\uDDF6\uDD7D\uDD7C\uDDBA\uDDE3-\uDDE6\uDD7B\uDE71-\uDE73\uDD7E\uDD7F\uDE70\uDDE2\uDE95\uDD41\uDDEE\uDE94\uDDFE\uDE93\uDDAF\uDDF0\uDDF2\uDDEA-\uDDEC\uDE78-\uDE7A\uDE91\uDE92\uDDF4\uDDF7\uDDF9-\uDDFD\uDDEF])|[\u263A\u2639\u2620\u2763\u2764]\uFE0F?|\u270B(?:\uD83C[\uDFFB-\uDFFF])?|[\u270C\u261D](?:(?:\uD83C[\uDFFB-\uDFFF]|\uFE0F))?|\u270A(?:\uD83C[\uDFFB-\uDFFF])?|\u270D(?:(?:\uD83C[\uDFFB-\uDFFF]|\uFE0F))?|\uD83C(?:\uDF85(?:\uD83C[\uDFFB-\uDFFF])?|\uDFC3(?:(?:\uD83C(?:[\uDFFB-\uDFFF](?:\u200D(?:[\u2642\u2640]\uFE0F?))?)|\u200D(?:[\u2642\u2640]\uFE0F?)))?|[\uDFC7\uDFC2](?:\uD83C[\uDFFB-\uDFFF])?|\uDFCC(?:(?:\uFE0F(?:\u200D(?:[\u2642\u2640]\uFE0F?))?|\uD83C(?:[\uDFFB-\uDFFF](?:\u200D(?:[\u2642\u2640]\uFE0F?))?)|\u200D(?:[\u2642\u2640]\uFE0F?)))?|[\uDFC4\uDFCA](?:(?:\uD83C(?:[\uDFFB-\uDFFF](?:\u200D(?:[\u2642\u2640]\uFE0F?))?)|\u200D(?:[\u2642\u2640]\uFE0F?)))?|\uDFCB(?:(?:\uFE0F(?:\u200D(?:[\u2642\u2640]\uFE0F?))?|\uD83C(?:[\uDFFB-\uDFFF](?:\u200D(?:[\u2642\u2640]\uFE0F?))?)|\u200D(?:[\u2642\u2640]\uFE0F?)))?|[\uDFF5\uDF36\uDF7D\uDFD4-\uDFD6\uDFDC-\uDFDF\uDFDB\uDFD7\uDFD8\uDFDA\uDFD9\uDFCE\uDFCD\uDF21\uDF24-\uDF2C\uDF97\uDF9F\uDF96\uDF99-\uDF9B\uDF9E\uDFF7\uDD70\uDD71\uDD7E\uDD7F\uDE02\uDE37]\uFE0F?|\uDFF4(?:(?:\u200D\u2620\uFE0F?|\uDB40\uDC67\uDB40\uDC62\uDB40(?:\uDC65\uDB40\uDC6E\uDB40\uDC67\uDB40\uDC7F|\uDC73\uDB40\uDC63\uDB40\uDC74\uDB40\uDC7F|\uDC77\uDB40\uDC6C\uDB40\uDC73\uDB40\uDC7F)))?|\uDFF3(?:(?:\uFE0F(?:\u200D\uD83C\uDF08)?|\u200D\uD83C\uDF08))?|\uDDE6\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF]|\uDDE7\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF]|\uDDE8\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF]|\uDDE9\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF]|\uDDEA\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA]|\uDDEB\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7]|\uDDEC\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE]|\uDDED\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA]|\uDDEE\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9]|\uDDEF\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5]|\uDDF0\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF]|\uDDF1\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE]|\uDDF2\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF]|\uDDF3\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF]|\uDDF4\uD83C\uDDF2|\uDDF5\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE]|\uDDF6\uD83C\uDDE6|\uDDF7\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC]|\uDDF8\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF]|\uDDF9\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF]|\uDDFA\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF]|\uDDFB\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA]|\uDDFC\uD83C[\uDDEB\uDDF8]|\uDDFD\uD83C\uDDF0|\uDDFE\uD83C[\uDDEA\uDDF9]|\uDDFF\uD83C[\uDDE6\uDDF2\uDDFC]|[\uDFFB-\uDFFF\uDF38-\uDF3C\uDF37\uDF31-\uDF35\uDF3E-\uDF43\uDF47-\uDF53\uDF45\uDF46\uDF3D\uDF44\uDF30\uDF5E\uDF56\uDF57\uDF54\uDF5F\uDF55\uDF2D-\uDF2F\uDF73\uDF72\uDF7F\uDF71\uDF58-\uDF5D\uDF60\uDF62-\uDF65\uDF61\uDF66-\uDF6A\uDF82\uDF70\uDF6B-\uDF6F\uDF7C\uDF75\uDF76\uDF7E\uDF77-\uDF7B\uDF74\uDFFA\uDF0D-\uDF10\uDF0B\uDFE0-\uDFE6\uDFE8-\uDFED\uDFEF\uDFF0\uDF01\uDF03-\uDF07\uDF09\uDFA0-\uDFA2\uDFAA\uDF11-\uDF20\uDF0C\uDF00\uDF08\uDF02\uDF0A\uDF83\uDF84\uDF86-\uDF8B\uDF8D-\uDF91\uDF80\uDF81\uDFAB\uDFC6\uDFC5\uDFC0\uDFD0\uDFC8\uDFC9\uDFBE\uDFB3\uDFCF\uDFD1-\uDFD3\uDFF8\uDFA3\uDFBD\uDFBF\uDFAF\uDFB1\uDFAE\uDFB0\uDFB2\uDCCF\uDC04\uDFB4\uDFAD\uDFA8\uDF92\uDFA9\uDF93\uDFBC\uDFB5\uDFB6\uDFA4\uDFA7\uDFB7-\uDFBB\uDFA5\uDFAC\uDFEE\uDFF9\uDFE7\uDFA6\uDD8E\uDD91-\uDD9A\uDE01\uDE36\uDE2F\uDE50\uDE39\uDE1A\uDE32\uDE51\uDE38\uDE34\uDE33\uDE3A\uDE35\uDFC1\uDF8C])|\u26F7\uFE0F?|\u26F9(?:(?:\uFE0F(?:\u200D(?:[\u2642\u2640]\uFE0F?))?|\uD83C(?:[\uDFFB-\uDFFF](?:\u200D(?:[\u2642\u2640]\uFE0F?))?)|\u200D(?:[\u2642\u2640]\uFE0F?)))?|[\u2618\u26F0\u26E9\u2668\u26F4\u2708\u23F1\u23F2\u2600\u2601\u26C8\u2602\u26F1\u2744\u2603\u2604\u26F8\u2660\u2665\u2666\u2663\u265F\u26D1\u260E\u2328\u2709\u270F\u2712\u2702\u26CF\u2692\u2694\u2699\u2696\u26D3\u2697\u26B0\u26B1\u26A0\u2622\u2623\u2B06\u2197\u27A1\u2198\u2B07\u2199\u2B05\u2196\u2195\u2194\u21A9\u21AA\u2934\u2935\u269B\u2721\u2638\u262F\u271D\u2626\u262A\u262E\u25B6\u23ED\u23EF\u25C0\u23EE\u23F8-\u23FA\u23CF\u2640\u2642\u2695\u267E\u267B\u269C\u2611\u2714\u2716\u303D\u2733\u2734\u2747\u203C\u2049\u3030\u00A9\u00AE\u2122]\uFE0F?|[\u0023\u002A\u0030-\u0039](?:\uFE0F\u20E3|\u20E3)|[\u2139\u24C2\u3297\u3299\u25FC\u25FB\u25AA\u25AB]\uFE0F?|[\u2615\u26EA\u26F2\u26FA\u26FD\u2693\u26F5\u231B\u23F3\u231A\u23F0\u2B50\u26C5\u2614\u26A1\u26C4\u2728\u26BD\u26BE\u26F3\u267F\u26D4\u2648-\u2653\u26CE\u23E9-\u23EC\u2B55\u2705\u274C\u274E\u2795-\u2797\u27B0\u27BF\u2753-\u2755\u2757\u26AB\u26AA\u2B1B\u2B1C\u25FE\u25FD])/.test(t.content)?this.addReaction(t):(null!=(r=document.getElementById("wiki-talk-nomessages"))&&r.remove(),(o=document.createElement("li")).id="wiki-message-".concat(t.id),i=document.createElement("div"),o.appendChild(i),i.id="wiki-message-div-".concat(t.id),i.classList.add("wiki-message","collapsible","collapsed"),u=document.createElement("div"),i.appendChild(u),u.classList.add("wiki-message-header"),s=document.createElement("span"),u.appendChild(s),s.classList.add("wiki-message-sender"),a=document.createTextNode(t.senderName),t.senderExists?(c=document.createElement("a"),s.appendChild(c),c.classList.add("wiki-username","wiki-username-link"),c.href="/".concat(window.wikimvcchat.userNamespace,":").concat(t.senderId),c.title="Visit the user page for ".concat(t.senderName),c.appendChild(a)):(l=document.createElement("span"),s.appendChild(l),userLink.classList.add("wiki-username","wiki-username-nolink"),userLink.appendChild(a)),D=document.createElement("span"),u.appendChild(D),D.classList.add("wiki-message-reactions","wiki-message-reactions-".concat(t.id)),p=document.createElement("span"),u.appendChild(p),p.classList.add("wiki-message-timestamp"),f=document.createTextNode(new Date(t.timestamp/1e4-22089888e5).toLocaleString()),p.appendChild(f),h=document.createElement("div"),u.appendChild(h),h.classList.add("wiki-message-thread-toggler"),h.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" width="12" height="12"><path d="M4 1.533v9.671l4.752-4.871z" /></svg >',h.onclick=function(e){e.target.parentElement.parentElement.classList.toggle("expanded")},d=document.createElement("div"),i.appendChild(d),d.classList.add("wiki-message-content"),g=document.createTextNode(t.content),d.appendChild(g),v=document.createElement("div"),i.appendChild(v),v.classList.add("wiki-message-collapse-toggler"),m=document.createElement("a"),v.appendChild(m),m.href="javascript: void(0);",m.onclick=function(e){e.target.parentElement.parentElement.classList.toggle("collapsed")},n?null!=(y=document.getElementById("wiki-message-div-".concat(t.replyMessageId)))&&(y.classList.add("wiki-message-thread"),null==(F=y.getElementsByTagName("ul"))&&(F=document.createElement("ul"),y.appendChild(F)),F.appendChild(o)):(E=document.createElement("div"),i.appendChild(E),E.classList.add("wiki-talk-reply"),b=document.createElement("div"),E.appendChild(b),b.classList.add("form-group"),C=document.createElement("label"),b.appendChild(C),C.htmlFor="wiki-talk-message-input-".concat(t.id),C.textContent="Reply",w=document.createElement("textarea"),b.appendChild(w),w.id="wiki-talk-message-input-".concat(t.id),b.classList.add("form-control"),B=document.createElement("button"),E.appendChild(B),B.id="wiki-talk-reply-button-".concat(t.id),B.type="button",B.classList.add("btn","btn-primary"),B.textContent="Post",B.addEventListener("click",function(t){t=t||window.event;var n,r,o=(e.target||e.srcElement).id;null==o||null==o.length||o.length<=23||(o=o.substr(23),null==(n=document.getElementById("wiki-talk-message-input-".concat(o)))||null!=(r=n.value)&&null!=r.length&&0<r.length&&(window.wikimvcchat.connection.invoke("Send",{Markdown:r,MessageId:o,TopicId:topicId}).catch(function(e){return console.error("An error occurred while sending a chat message")}),t.preventDefault(),t.stopPropagation()))}),window.wikimvcchat.messageListUl.appendChild(o)),parseInt(getComputedStyle(d).getPropertyValue("height"))<parseInt(getComputedStyle(d).getPropertyValue("max-height"))&&i.classList.remove("collapsible")))},addReaction:function(e){var t,n;null==e||null==e.messageId||!(null!=e.replyMessageId||null!=e.replyMessageId.length||0<e.replyMessageId.length)||null!=(t=document.getElementById("wiki-message-reactions-".concat(e.replyMessageId)))&&(n=e.content.replace(/[^a-zA-Z]/g,""),null==t.getElementById("wiki-message-reactions-".concat(n,"-").concat(e.messageId))&&window.wikimvcchat.addReactionList(e.replyMessageId,e.topicId,t,n,e.content),window.wikimvcchat.addReactionToList(e,n))},addReactionList:function(t,n,e,r,o){var i=document.createElement("span");e.appendChild(i),i.id="wiki-message-reactions-".concat(r,"-").concat(t),i.classList.add("wiki-message-reactions");var u=document.createElement("span");i.appendChild(u),u.classList.add("wiki-message-reaction-icon"),u.onclick=function(e){window.wikimvcchat.connection.invoke("Send",{Markdown:o,MessageId:t,TopicId:n}).catch(function(e){return console.error("An error occurred while attempting to send a chat reaction")}),e.preventDefault(),e.stopPropagation()};var s=document.createElement("span");i.appendChild(s),i.id="wiki-message-reaction-count-".concat(r,"-").concat(t),s.classList.add("wiki-message-reaction-count");var a=document.createTextNode("0");s.appendChild(a);var c=document.createElement("ul");return i.appendChild(c),c.id="wiki-message-reaction-list-".concat(r,"-").concat(t),c.classList.add("wiki-message-reaction-list"),c.style.display="none",(0,l.default)(i,{content:function(){return document.getElementById("wiki-message-reaction-list-".concat(r,"-").concat(t)).innerHTML},placement:"auto",allowHTML:!0}),i},addReactionToList:function(e,t){var n,r=document.getElementById("wiki-message-reaction-count-".concat(t,"-").concat(e.replyMessageId));null!=r&&(n=parseInt(r.textContent),n++,r.textContent=n.toLocaleString());var o=document.getElementById("wiki-message-reaction-list-".concat(t,"-").concat(e.replyMessageId));null!=o&&window.wikimvcchat.addReactionToList(o,e);var u=document.createElement("li");o.appendChild(u);var s,a,c=document.createTextNode(e.senderName);e.senderExists?(s=document.createElement("a"),u.appendChild(s),s.classList.add("wiki-username","wiki-username-link"),s.href="/".concat(window.wikimvcchat.userNamespace,":").concat(e.senderId),s.title="Visit the user page for ".concat(e.senderName),s.appendChild(c)):(a=document.createElement("span"),u.appendChild(a),a.classList.add("wiki-username","wiki-username-nolink"),a.appendChild(c));var l=document.createElement("span");u.appendChild(l);var D=document.createTextNode(new Date(list[i].timestamp/1e4-22089888e5).toLocaleString());l.appendChild(D)},sendMessage:function(e,t){t&&t.length&&window.wikimvcchat.connection.invoke("Send",{Markdown:t,TopicId:e}).catch(function(e){return console.error(e)})}}},{"@microsoft/signalr":24,"tippy.js":30}],2:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=(o.prototype.abort=function(){this.isAborted||(this.isAborted=!0,this.onabort&&this.onabort())},Object.defineProperty(o.prototype,"signal",{get:function(){return this},enumerable:!0,configurable:!0}),Object.defineProperty(o.prototype,"aborted",{get:function(){return this.isAborted},enumerable:!0,configurable:!0}),o);function o(){this.isAborted=!1,this.onabort=null}n.AbortController=r},{}],3:[function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(n,"__esModule",{value:!0});var i,u=e("./Errors"),s=e("./FetchHttpClient"),a=e("./HttpClient"),c=e("./Utils"),l=e("./XhrHttpClient"),D=(i=a.HttpClient,o(p,i),p.prototype.send=function(e){return e.abortSignal&&e.abortSignal.aborted?Promise.reject(new u.AbortError):e.method?e.url?this.httpClient.send(e):Promise.reject(new Error("No url defined.")):Promise.reject(new Error("No method defined."))},p.prototype.getCookieString=function(e){return this.httpClient.getCookieString(e)},p);function p(e){var t=i.call(this)||this;if("undefined"!=typeof fetch||c.Platform.isNode)t.httpClient=new s.FetchHttpClient(e);else{if("undefined"==typeof XMLHttpRequest)throw new Error("No usable HttpClient found.");t.httpClient=new l.XhrHttpClient(e)}return t}n.DefaultHttpClient=D},{"./Errors":5,"./FetchHttpClient":6,"./HttpClient":8,"./Utils":21,"./XhrHttpClient":23}],4:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=[0,2e3,1e4,3e4,null],o=(i.prototype.nextRetryDelayInMilliseconds=function(e){return this.retryDelays[e.previousRetryCount]},i);function i(e){this.retryDelays=void 0!==e?e.concat([null]):r}n.DefaultReconnectPolicy=o},{}],5:[function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(n,"__esModule",{value:!0});var i,u=(i=Error,o(s,i),s);function s(e,t){var n=this,r=this.constructor.prototype;return(n=i.call(this,e)||this).statusCode=t,n.__proto__=r,n}n.HttpError=u;var a,c=(a=Error,o(l,a),l);function l(e){void 0===e&&(e="A timeout occurred.");var t=this,n=this.constructor.prototype;return(t=a.call(this,e)||this).__proto__=n,t}n.TimeoutError=c;var D,p=(D=Error,o(f,D),f);function f(e){void 0===e&&(e="An abort occurred.");var t=this,n=this.constructor.prototype;return(t=D.call(this,e)||this).__proto__=n,t}n.AbortError=p},{}],6:[function(r,e,t){"use strict";var o,n=this&&this.__extends||(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),l=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},i=this&&this.__awaiter||function(i,u,s,a){return new(s=s||Promise)(function(e,t){function n(e){try{o(a.next(e))}catch(e){t(e)}}function r(e){try{o(a.throw(e))}catch(e){t(e)}}function o(t){t.done?e(t.value):new s(function(e){e(t.value)}).then(n,r)}o((a=a.apply(i,u||[])).next())})},D=this&&this.__generator||function(n,r){var o,i,u,s={label:0,sent:function(){if(1&u[0])throw u[1];return u[1]},trys:[],ops:[]},e={next:t(0),throw:t(1),return:t(2)};return"function"==typeof Symbol&&(e[Symbol.iterator]=function(){return this}),e;function t(t){return function(e){return function(t){if(o)throw new TypeError("Generator is already executing.");for(;s;)try{if(o=1,i&&(u=2&t[0]?i.return:t[0]?i.throw||((u=i.return)&&u.call(i),0):i.next)&&!(u=u.call(i,t[1])).done)return u;switch(i=0,u&&(t=[2&t[0],u.value]),t[0]){case 0:case 1:u=t;break;case 4:return s.label++,{value:t[1],done:!1};case 5:s.label++,i=t[1],t=[0];continue;case 7:t=s.ops.pop(),s.trys.pop();continue;default:if(!(u=0<(u=s.trys).length&&u[u.length-1])&&(6===t[0]||2===t[0])){s=0;continue}if(3===t[0]&&(!u||t[1]>u[0]&&t[1]<u[3])){s.label=t[1];break}if(6===t[0]&&s.label<u[1]){s.label=u[1],u=t;break}if(u&&s.label<u[2]){s.label=u[2],s.ops.push(t);break}u[2]&&s.ops.pop(),s.trys.pop();continue}t=r.call(n,s)}catch(e){t=[6,e],i=0}finally{o=u=0}if(5&t[0])throw t[1];return{value:t[0]?t[1]:void 0,done:!0}}([t,e])}}};Object.defineProperty(t,"__esModule",{value:!0});var u,p=r("./Errors"),f=r("./HttpClient"),h=r("./ILogger"),s=r("./Utils"),a=(u=f.HttpClient,n(c,u),c.prototype.send=function(c){return i(this,void 0,void 0,function(){var t,n,r,o,i,u,s,a=this;return D(this,function(e){switch(e.label){case 0:if(c.abortSignal&&c.abortSignal.aborted)throw new p.AbortError;if(!c.method)throw new Error("No method defined.");if(!c.url)throw new Error("No url defined.");t=new this.abortControllerType,c.abortSignal&&(c.abortSignal.onabort=function(){t.abort(),n=new p.AbortError}),r=null,c.timeout&&(o=c.timeout,r=setTimeout(function(){t.abort(),a.logger.log(h.LogLevel.Warning,"Timeout from HTTP request."),n=new p.TimeoutError},o)),e.label=1;case 1:return e.trys.push([1,3,4,5]),[4,this.fetchType(c.url,{body:c.content,cache:"no-cache",credentials:!0===c.withCredentials?"include":"same-origin",headers:l({"Content-Type":"text/plain;charset=UTF-8","X-Requested-With":"XMLHttpRequest"},c.headers),method:c.method,mode:"cors",redirect:"manual",signal:t.signal})];case 2:return i=e.sent(),[3,5];case 3:if(u=e.sent(),n)throw n;throw this.logger.log(h.LogLevel.Warning,"Error from HTTP request. "+u+"."),u;case 4:return r&&clearTimeout(r),c.abortSignal&&(c.abortSignal.onabort=null),[7];case 5:if(!i.ok)throw new p.HttpError(i.statusText,i.status);return[4,function(e,t){var n;switch(t){case"arraybuffer":n=e.arrayBuffer();break;case"text":n=e.text();break;case"blob":case"document":case"json":throw new Error(t+" is not supported.");default:n=e.text()}return n}(i,c.responseType)];case 6:return s=e.sent(),[2,new f.HttpResponse(i.status,i.statusText,s)]}})})},c.prototype.getCookieString=function(e){var n="";return s.Platform.isNode&&this.jar&&this.jar.getCookies(e,function(e,t){return n=t.join("; ")}),n},c);function c(e){var t,n=u.call(this)||this;return n.logger=e,"undefined"==typeof fetch?(t="function"==typeof __webpack_require__?__non_webpack_require__:r,n.jar=new(t("tough-cookie").CookieJar),n.fetchType=t("node-fetch"),n.fetchType=t("fetch-cookie")(n.fetchType,n.jar),n.abortControllerType=t("abort-controller")):(n.fetchType=fetch.bind(self),n.abortControllerType=AbortController),n}t.FetchHttpClient=a},{"./Errors":5,"./HttpClient":8,"./ILogger":13,"./Utils":21}],7:[function(n,e,r){(function(c){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var l=n("./TextMessageFormat"),D=n("./Utils"),e=(t.prototype.writeHandshakeRequest=function(e){return l.TextMessageFormat.write(JSON.stringify(e))},t.prototype.parseHandshakeResponse=function(e){if(D.isArrayBuffer(e)||void 0!==c&&e instanceof c){var t=new Uint8Array(e);if(-1===(i=t.indexOf(l.TextMessageFormat.RecordSeparatorCode)))throw new Error("Message is incomplete.");var n=i+1,r=String.fromCharCode.apply(null,t.slice(0,n)),o=t.byteLength>n?t.slice(n).buffer:null}else{var i,u=e;if(-1===(i=u.indexOf(l.TextMessageFormat.RecordSeparator)))throw new Error("Message is incomplete.");n=i+1,r=u.substring(0,n),o=u.length>n?u.substring(n):null}var s=l.TextMessageFormat.parse(r),a=JSON.parse(s[0]);if(a.type)throw new Error("Expected a handshake response from the server.");return[o,a]},t);function t(){}r.HandshakeProtocol=e}).call(this,n("buffer").Buffer)},{"./TextMessageFormat":20,"./Utils":21,buffer:27}],8:[function(e,t,n){"use strict";var r=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e};Object.defineProperty(n,"__esModule",{value:!0});function o(e,t,n){this.statusCode=e,this.statusText=t,this.content=n}n.HttpResponse=o;var i=(u.prototype.get=function(e,t){return this.send(r({},t,{method:"GET",url:e}))},u.prototype.post=function(e,t){return this.send(r({},t,{method:"POST",url:e}))},u.prototype.delete=function(e,t){return this.send(r({},t,{method:"DELETE",url:e}))},u.prototype.getCookieString=function(e){return""},u);function u(){}n.HttpClient=i},{}],9:[function(i,e,t){"use strict";var D=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},r=this&&this.__awaiter||function(i,u,s,a){return new(s=s||Promise)(function(e,t){function n(e){try{o(a.next(e))}catch(e){t(e)}}function r(e){try{o(a.throw(e))}catch(e){t(e)}}function o(t){t.done?e(t.value):new s(function(e){e(t.value)}).then(n,r)}o((a=a.apply(i,u||[])).next())})},g=this&&this.__generator||function(n,r){var o,i,u,s={label:0,sent:function(){if(1&u[0])throw u[1];return u[1]},trys:[],ops:[]},e={next:t(0),throw:t(1),return:t(2)};return"function"==typeof Symbol&&(e[Symbol.iterator]=function(){return this}),e;function t(t){return function(e){return function(t){if(o)throw new TypeError("Generator is already executing.");for(;s;)try{if(o=1,i&&(u=2&t[0]?i.return:t[0]?i.throw||((u=i.return)&&u.call(i),0):i.next)&&!(u=u.call(i,t[1])).done)return u;switch(i=0,u&&(t=[2&t[0],u.value]),t[0]){case 0:case 1:u=t;break;case 4:return s.label++,{value:t[1],done:!1};case 5:s.label++,i=t[1],t=[0];continue;case 7:t=s.ops.pop(),s.trys.pop();continue;default:if(!(u=0<(u=s.trys).length&&u[u.length-1])&&(6===t[0]||2===t[0])){s=0;continue}if(3===t[0]&&(!u||t[1]>u[0]&&t[1]<u[3])){s.label=t[1];break}if(6===t[0]&&s.label<u[1]){s.label=u[1],u=t;break}if(u&&s.label<u[2]){s.label=u[2],s.ops.push(t);break}u[2]&&s.ops.pop(),s.trys.pop();continue}t=r.call(n,s)}catch(e){t=[6,e],i=0}finally{o=u=0}if(5&t[0])throw t[1];return{value:t[0]?t[1]:void 0,done:!0}}([t,e])}}};Object.defineProperty(t,"__esModule",{value:!0});var u=i("./DefaultHttpClient"),v=i("./ILogger"),a=i("./ITransport"),c=i("./LongPollingTransport"),n=i("./ServerSentEventsTransport"),p=i("./Utils"),o=i("./WebSocketTransport"),s=(l.prototype.start=function(n){return r(this,void 0,void 0,function(){var t;return g(this,function(e){switch(e.label){case 0:return n=n||a.TransferFormat.Binary,p.Arg.isIn(n,a.TransferFormat,"transferFormat"),this.logger.log(v.LogLevel.Debug,"Starting connection with transfer format '"+a.TransferFormat[n]+"'."),"Disconnected"!==this.connectionState?[2,Promise.reject(new Error("Cannot start an HttpConnection that is not in the 'Disconnected' state."))]:(this.connectionState="Connecting",this.startInternalPromise=this.startInternal(n),[4,this.startInternalPromise]);case 1:return e.sent(),"Disconnecting"!==this.connectionState?[3,3]:(t="Failed to start the HttpConnection before stop() was called.",this.logger.log(v.LogLevel.Error,t),[4,this.stopPromise]);case 2:return e.sent(),[2,Promise.reject(new Error(t))];case 3:if("Connected"!==this.connectionState)return t="HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!",this.logger.log(v.LogLevel.Error,t),[2,Promise.reject(new Error(t))];e.label=4;case 4:return this.connectionStarted=!0,[2]}})})},l.prototype.send=function(e){return"Connected"!==this.connectionState?Promise.reject(new Error("Cannot send data if the connection is not in the 'Connected' State.")):(this.sendQueue||(this.sendQueue=new f(this.transport)),this.sendQueue.send(e))},l.prototype.stop=function(n){return r(this,void 0,void 0,function(){var t=this;return g(this,function(e){switch(e.label){case 0:return"Disconnected"===this.connectionState?(this.logger.log(v.LogLevel.Debug,"Call to HttpConnection.stop("+n+") ignored because the connection is already in the disconnected state."),[2,Promise.resolve()]):"Disconnecting"===this.connectionState?(this.logger.log(v.LogLevel.Debug,"Call to HttpConnection.stop("+n+") ignored because the connection is already in the disconnecting state."),[2,this.stopPromise]):(this.connectionState="Disconnecting",this.stopPromise=new Promise(function(e){t.stopPromiseResolver=e}),[4,this.stopInternal(n)]);case 1:return e.sent(),[4,this.stopPromise];case 2:return e.sent(),[2]}})})},l.prototype.stopInternal=function(n){return r(this,void 0,void 0,function(){var t;return g(this,function(e){switch(e.label){case 0:this.stopError=n,e.label=1;case 1:return e.trys.push([1,3,,4]),[4,this.startInternalPromise];case 2:case 3:return e.sent(),[3,4];case 4:if(!this.transport)return[3,9];e.label=5;case 5:return e.trys.push([5,7,,8]),[4,this.transport.stop()];case 6:return e.sent(),[3,8];case 7:return t=e.sent(),this.logger.log(v.LogLevel.Error,"HttpConnection.transport.stop() threw error '"+t+"'."),this.stopConnection(),[3,8];case 8:return this.transport=void 0,[3,10];case 9:this.logger.log(v.LogLevel.Debug,"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed."),this.stopConnection(),e.label=10;case 10:return[2]}})})},l.prototype.startInternal=function(s){return r(this,void 0,void 0,function(){var n,r,o,t,i,u;return g(this,function(e){switch(e.label){case 0:n=this.baseUrl,this.accessTokenFactory=this.options.accessTokenFactory,e.label=1;case 1:return e.trys.push([1,12,,13]),this.options.skipNegotiation?this.options.transport!==a.HttpTransportType.WebSockets?[3,3]:(this.transport=this.constructTransport(a.HttpTransportType.WebSockets),[4,this.startTransport(n,s)]):[3,5];case 2:return e.sent(),[3,4];case 3:throw new Error("Negotiation can only be skipped when using the WebSocket transport directly.");case 4:return[3,11];case 5:r=null,o=0,t=function(){var t;return g(this,function(e){switch(e.label){case 0:return[4,i.getNegotiationResponse(n)];case 1:if(r=e.sent(),"Disconnecting"===i.connectionState||"Disconnected"===i.connectionState)throw new Error("The connection was stopped during negotiation.");if(r.error)throw new Error(r.error);if(r.ProtocolVersion)throw new Error("Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.");return r.url&&(n=r.url),r.accessToken&&(t=r.accessToken,i.accessTokenFactory=function(){return t}),o++,[2]}})},i=this,e.label=6;case 6:return[5,t()];case 7:e.sent(),e.label=8;case 8:if(r.url&&o<100)return[3,6];e.label=9;case 9:if(100===o&&r.url)throw new Error("Negotiate redirection limit exceeded.");return[4,this.createTransport(n,this.options.transport,r,s)];case 10:e.sent(),e.label=11;case 11:return this.transport instanceof c.LongPollingTransport&&(this.features.inherentKeepAlive=!0),"Connecting"===this.connectionState&&(this.logger.log(v.LogLevel.Debug,"The HttpConnection connected successfully."),this.connectionState="Connected"),[3,13];case 12:return u=e.sent(),this.logger.log(v.LogLevel.Error,"Failed to start the connection: "+u),this.connectionState="Disconnected",this.transport=void 0,[2,Promise.reject(u)];case 13:return[2]}})})},l.prototype.getNegotiationResponse=function(l){return r(this,void 0,void 0,function(){var t,n,r,o,i,u,s,a,c;return g(this,function(e){switch(e.label){case 0:return t={},this.accessTokenFactory?[4,this.accessTokenFactory()]:[3,2];case 1:(n=e.sent())&&(t.Authorization="Bearer "+n),e.label=2;case 2:r=p.getUserAgentHeader(),o=r[0],i=r[1],t[o]=i,u=this.resolveNegotiateUrl(l),this.logger.log(v.LogLevel.Debug,"Sending negotiation request: "+u+"."),e.label=3;case 3:return e.trys.push([3,5,,6]),[4,this.httpClient.post(u,{content:"",headers:D({},t,this.options.headers),withCredentials:this.options.withCredentials})];case 4:return 200!==(s=e.sent()).statusCode?[2,Promise.reject(new Error("Unexpected status code returned from negotiate '"+s.statusCode+"'"))]:((!(a=JSON.parse(s.content)).negotiateVersion||a.negotiateVersion<1)&&(a.connectionToken=a.connectionId),[2,a]);case 5:return c=e.sent(),this.logger.log(v.LogLevel.Error,"Failed to complete negotiation with the server: "+c),[2,Promise.reject(c)];case 6:return[2]}})})},l.prototype.createConnectUrl=function(e,t){return t?e+(-1===e.indexOf("?")?"?":"&")+"id="+t:e},l.prototype.createTransport=function(p,f,h,d){return r(this,void 0,void 0,function(){var t,n,r,o,i,u,s,a,c,l,D;return g(this,function(e){switch(e.label){case 0:return t=this.createConnectUrl(p,h.connectionToken),this.isITransport(f)?(this.logger.log(v.LogLevel.Debug,"Connection was provided an instance of ITransport, using that directly."),this.transport=f,[4,this.startTransport(t,d)]):[3,2];case 1:return e.sent(),this.connectionId=h.connectionId,[2];case 2:n=[],r=h.availableTransports||[],o=h,i=0,u=r,e.label=3;case 3:return i<u.length?(s=u[i],(a=this.resolveTransportOrError(s,f,d))instanceof Error?(n.push(s.transport+" failed: "+a),[3,12]):[3,4]):[3,13];case 4:if(!this.isITransport(a))return[3,12];if(this.transport=a,o)return[3,9];e.label=5;case 5:return e.trys.push([5,7,,8]),[4,this.getNegotiationResponse(p)];case 6:return o=e.sent(),[3,8];case 7:return c=e.sent(),[2,Promise.reject(c)];case 8:t=this.createConnectUrl(p,o.connectionToken),e.label=9;case 9:return e.trys.push([9,11,,12]),[4,this.startTransport(t,d)];case 10:return e.sent(),this.connectionId=o.connectionId,[2];case 11:return l=e.sent(),this.logger.log(v.LogLevel.Error,"Failed to start the transport '"+s.transport+"': "+l),o=void 0,n.push(s.transport+" failed: "+l),"Connecting"!==this.connectionState?(D="Failed to select transport before stop() was called.",this.logger.log(v.LogLevel.Debug,D),[2,Promise.reject(new Error(D))]):[3,12];case 12:return i++,[3,3];case 13:return 0<n.length?[2,Promise.reject(new Error("Unable to connect to the server with any of the available transports. "+n.join(" ")))]:[2,Promise.reject(new Error("None of the transports supported by the client are supported by the server."))]}})})},l.prototype.constructTransport=function(e){switch(e){case a.HttpTransportType.WebSockets:if(!this.options.WebSocket)throw new Error("'WebSocket' is not supported in your environment.");return new o.WebSocketTransport(this.httpClient,this.accessTokenFactory,this.logger,this.options.logMessageContent||!1,this.options.WebSocket,this.options.headers||{});case a.HttpTransportType.ServerSentEvents:if(!this.options.EventSource)throw new Error("'EventSource' is not supported in your environment.");return new n.ServerSentEventsTransport(this.httpClient,this.accessTokenFactory,this.logger,this.options.logMessageContent||!1,this.options.EventSource,this.options.withCredentials,this.options.headers||{});case a.HttpTransportType.LongPolling:return new c.LongPollingTransport(this.httpClient,this.accessTokenFactory,this.logger,this.options.logMessageContent||!1,this.options.withCredentials,this.options.headers||{});default:throw new Error("Unknown transport: "+e+".")}},l.prototype.startTransport=function(e,t){var n=this;return this.transport.onreceive=this.onreceive,this.transport.onclose=function(e){return n.stopConnection(e)},this.transport.connect(e,t)},l.prototype.resolveTransportOrError=function(e,t,n){var r,o,i=a.HttpTransportType[e.transport];if(null==i)return this.logger.log(v.LogLevel.Debug,"Skipping transport '"+e.transport+"' because it is not supported by this client."),new Error("Skipping transport '"+e.transport+"' because it is not supported by this client.");if(o=i,(r=t)&&0==(o&r))return this.logger.log(v.LogLevel.Debug,"Skipping transport '"+a.HttpTransportType[i]+"' because it was disabled by the client."),new Error("'"+a.HttpTransportType[i]+"' is disabled by the client.");if(!(0<=e.transferFormats.map(function(e){return a.TransferFormat[e]}).indexOf(n)))return this.logger.log(v.LogLevel.Debug,"Skipping transport '"+a.HttpTransportType[i]+"' because it does not support the requested transfer format '"+a.TransferFormat[n]+"'."),new Error("'"+a.HttpTransportType[i]+"' does not support "+a.TransferFormat[n]+".");if(i===a.HttpTransportType.WebSockets&&!this.options.WebSocket||i===a.HttpTransportType.ServerSentEvents&&!this.options.EventSource)return this.logger.log(v.LogLevel.Debug,"Skipping transport '"+a.HttpTransportType[i]+"' because it is not supported in your environment.'"),new Error("'"+a.HttpTransportType[i]+"' is not supported in your environment.");this.logger.log(v.LogLevel.Debug,"Selecting transport '"+a.HttpTransportType[i]+"'.");try{return this.constructTransport(i)}catch(e){return e}},l.prototype.isITransport=function(e){return e&&"object"==typeof e&&"connect"in e},l.prototype.stopConnection=function(t){var n=this;if(this.logger.log(v.LogLevel.Debug,"HttpConnection.stopConnection("+t+") called while in state "+this.connectionState+"."),this.transport=void 0,t=this.stopError||t,this.stopError=void 0,"Disconnected"!==this.connectionState){if("Connecting"===this.connectionState)throw this.logger.log(v.LogLevel.Warning,"Call to HttpConnection.stopConnection("+t+") was ignored because the connection is still in the connecting state."),new Error("HttpConnection.stopConnection("+t+") was called while the connection is still in the connecting state.");if("Disconnecting"===this.connectionState&&this.stopPromiseResolver(),t?this.logger.log(v.LogLevel.Error,"Connection disconnected with error '"+t+"'."):this.logger.log(v.LogLevel.Information,"Connection disconnected."),this.sendQueue&&(this.sendQueue.stop().catch(function(e){n.logger.log(v.LogLevel.Error,"TransportSendQueue.stop() threw error '"+e+"'.")}),this.sendQueue=void 0),this.connectionId=void 0,this.connectionState="Disconnected",this.connectionStarted){this.connectionStarted=!1;try{this.onclose&&this.onclose(t)}catch(e){this.logger.log(v.LogLevel.Error,"HttpConnection.onclose("+t+") threw error '"+e+"'.")}}}else this.logger.log(v.LogLevel.Debug,"Call to HttpConnection.stopConnection("+t+") was ignored because the connection is already in the disconnected state.")},l.prototype.resolveUrl=function(e){if(0===e.lastIndexOf("https://",0)||0===e.lastIndexOf("http://",0))return e;if(!p.Platform.isBrowser||!window.document)throw new Error("Cannot resolve '"+e+"'.");var t=window.document.createElement("a");return t.href=e,this.logger.log(v.LogLevel.Information,"Normalizing '"+e+"' to '"+t.href+"'."),t.href},l.prototype.resolveNegotiateUrl=function(e){var t=e.indexOf("?"),n=e.substring(0,-1===t?e.length:t);return"/"!==n[n.length-1]&&(n+="/"),n+="negotiate",-1===(n+=-1===t?"":e.substring(t)).indexOf("negotiateVersion")&&(n+=-1===t?"?":"&",n+="negotiateVersion="+this.negotiateVersion),n},l);function l(e,t){if(void 0===t&&(t={}),this.features={},this.negotiateVersion=1,p.Arg.isRequired(e,"url"),this.logger=p.createLogger(t.logger),this.baseUrl=this.resolveUrl(e),(t=t||{}).logMessageContent=void 0!==t.logMessageContent&&t.logMessageContent,"boolean"!=typeof t.withCredentials&&void 0!==t.withCredentials)throw new Error("withCredentials option was not a 'boolean' or 'undefined' value");t.withCredentials=void 0===t.withCredentials||t.withCredentials;var n,r=null,o=null;p.Platform.isNode&&void 0!==i&&(r=(n="function"==typeof __webpack_require__?__non_webpack_require__:i)("ws"),o=n("eventsource")),p.Platform.isNode||"undefined"==typeof WebSocket||t.WebSocket?p.Platform.isNode&&!t.WebSocket&&r&&(t.WebSocket=r):t.WebSocket=WebSocket,p.Platform.isNode||"undefined"==typeof EventSource||t.EventSource?p.Platform.isNode&&!t.EventSource&&void 0!==o&&(t.EventSource=o):t.EventSource=EventSource,this.httpClient=t.httpClient||new u.DefaultHttpClient(this.logger),this.connectionState="Disconnected",this.connectionStarted=!1,this.options=t,this.onreceive=null,this.onclose=null}t.HttpConnection=s;var f=(h.prototype.send=function(e){return this.bufferData(e),this.transportResult||(this.transportResult=new d),this.transportResult.promise},h.prototype.stop=function(){return this.executing=!1,this.sendBufferedData.resolve(),this.sendLoopPromise},h.prototype.bufferData=function(e){if(this.buffer.length&&typeof this.buffer[0]!=typeof e)throw new Error("Expected data to be of type "+typeof this.buffer+" but was of type "+typeof e);this.buffer.push(e),this.sendBufferedData.resolve()},h.prototype.sendLoop=function(){return r(this,void 0,void 0,function(){var t,n,r;return g(this,function(e){switch(e.label){case 0:return[4,this.sendBufferedData.promise];case 1:if(e.sent(),!this.executing)return this.transportResult&&this.transportResult.reject("Connection stopped."),[3,6];this.sendBufferedData=new d,t=this.transportResult,this.transportResult=void 0,n="string"==typeof this.buffer[0]?this.buffer.join(""):h.concatBuffers(this.buffer),this.buffer.length=0,e.label=2;case 2:return e.trys.push([2,4,,5]),[4,this.transport.send(n)];case 3:return e.sent(),t.resolve(),[3,5];case 4:return r=e.sent(),t.reject(r),[3,5];case 5:return[3,0];case 6:return[2]}})})},h.concatBuffers=function(e){for(var t=e.map(function(e){return e.byteLength}).reduce(function(e,t){return e+t}),n=new Uint8Array(t),r=0,o=0,i=e;o<i.length;o++){var u=i[o];n.set(new Uint8Array(u),r),r+=u.byteLength}return n.buffer},h);function h(e){this.transport=e,this.buffer=[],this.executing=!0,this.sendBufferedData=new d,this.transportResult=new d,this.sendLoopPromise=this.sendLoop()}t.TransportSendQueue=f;var d=(m.prototype.resolve=function(){this.resolver()},m.prototype.reject=function(e){this.rejecter(e)},m);function m(){var r=this;this.promise=new Promise(function(e,t){var n=[e,t];return r.resolver=n[0],r.rejecter=n[1],n})}},{"./DefaultHttpClient":3,"./ILogger":13,"./ITransport":14,"./LongPollingTransport":17,"./ServerSentEventsTransport":18,"./Utils":21,"./WebSocketTransport":22}],10:[function(e,t,n){"use strict";var r=this&&this.__awaiter||function(i,u,s,a){return new(s=s||Promise)(function(e,t){function n(e){try{o(a.next(e))}catch(e){t(e)}}function r(e){try{o(a.throw(e))}catch(e){t(e)}}function o(t){t.done?e(t.value):new s(function(e){e(t.value)}).then(n,r)}o((a=a.apply(i,u||[])).next())})},a=this&&this.__generator||function(n,r){var o,i,u,s={label:0,sent:function(){if(1&u[0])throw u[1];return u[1]},trys:[],ops:[]},e={next:t(0),throw:t(1),return:t(2)};return"function"==typeof Symbol&&(e[Symbol.iterator]=function(){return this}),e;function t(t){return function(e){return function(t){if(o)throw new TypeError("Generator is already executing.");for(;s;)try{if(o=1,i&&(u=2&t[0]?i.return:t[0]?i.throw||((u=i.return)&&u.call(i),0):i.next)&&!(u=u.call(i,t[1])).done)return u;switch(i=0,u&&(t=[2&t[0],u.value]),t[0]){case 0:case 1:u=t;break;case 4:return s.label++,{value:t[1],done:!1};case 5:s.label++,i=t[1],t=[0];continue;case 7:t=s.ops.pop(),s.trys.pop();continue;default:if(!(u=0<(u=s.trys).length&&u[u.length-1])&&(6===t[0]||2===t[0])){s=0;continue}if(3===t[0]&&(!u||t[1]>u[0]&&t[1]<u[3])){s.label=t[1];break}if(6===t[0]&&s.label<u[1]){s.label=u[1],u=t;break}if(u&&s.label<u[2]){s.label=u[2],s.ops.push(t);break}u[2]&&s.ops.pop(),s.trys.pop();continue}t=r.call(n,s)}catch(e){t=[6,e],i=0}finally{o=u=0}if(5&t[0])throw t[1];return{value:t[0]?t[1]:void 0,done:!0}}([t,e])}}};Object.defineProperty(n,"__esModule",{value:!0});var c,o,i=e("./HandshakeProtocol"),l=e("./IHubProtocol"),D=e("./ILogger"),p=e("./Subject"),u=e("./Utils");(o=c=n.HubConnectionState||(n.HubConnectionState={})).Disconnected="Disconnected",o.Connecting="Connecting",o.Connected="Connected",o.Disconnecting="Disconnecting",o.Reconnecting="Reconnecting";var s=(f.create=function(e,t,n,r){return new f(e,t,n,r)},Object.defineProperty(f.prototype,"state",{get:function(){return this.connectionState},enumerable:!0,configurable:!0}),Object.defineProperty(f.prototype,"connectionId",{get:function(){return this.connection&&this.connection.connectionId||null},enumerable:!0,configurable:!0}),Object.defineProperty(f.prototype,"baseUrl",{get:function(){return this.connection.baseUrl||""},set:function(e){if(this.connectionState!==c.Disconnected&&this.connectionState!==c.Reconnecting)throw new Error("The HubConnection must be in the Disconnected or Reconnecting state to change the url.");if(!e)throw new Error("The HubConnection url must be a valid url.");this.connection.baseUrl=e},enumerable:!0,configurable:!0}),f.prototype.start=function(){return this.startPromise=this.startWithStateTransitions(),this.startPromise},f.prototype.startWithStateTransitions=function(){return r(this,void 0,void 0,function(){var t;return a(this,function(e){switch(e.label){case 0:if(this.connectionState!==c.Disconnected)return[2,Promise.reject(new Error("Cannot start a HubConnection that is not in the 'Disconnected' state."))];this.connectionState=c.Connecting,this.logger.log(D.LogLevel.Debug,"Starting HubConnection."),e.label=1;case 1:return e.trys.push([1,3,,4]),[4,this.startInternal()];case 2:return e.sent(),this.connectionState=c.Connected,this.connectionStarted=!0,this.logger.log(D.LogLevel.Debug,"HubConnection connected successfully."),[3,4];case 3:return t=e.sent(),this.connectionState=c.Disconnected,this.logger.log(D.LogLevel.Debug,"HubConnection failed to start successfully because of error '"+t+"'."),[2,Promise.reject(t)];case 4:return[2]}})})},f.prototype.startInternal=function(){return r(this,void 0,void 0,function(){var t,n,r,o=this;return a(this,function(e){switch(e.label){case 0:return this.stopDuringStartError=void 0,this.receivedHandshakeResponse=!1,t=new Promise(function(e,t){o.handshakeResolver=e,o.handshakeRejecter=t}),[4,this.connection.start(this.protocol.transferFormat)];case 1:e.sent(),e.label=2;case 2:return e.trys.push([2,5,,7]),n={protocol:this.protocol.name,version:this.protocol.version},this.logger.log(D.LogLevel.Debug,"Sending handshake request."),[4,this.sendMessage(this.handshakeProtocol.writeHandshakeRequest(n))];case 3:return e.sent(),this.logger.log(D.LogLevel.Information,"Using HubProtocol '"+this.protocol.name+"'."),this.cleanupTimeout(),this.resetTimeoutPeriod(),this.resetKeepAliveInterval(),[4,t];case 4:if(e.sent(),this.stopDuringStartError)throw this.stopDuringStartError;return[3,7];case 5:return r=e.sent(),this.logger.log(D.LogLevel.Debug,"Hub handshake failed with error '"+r+"' during start(). Stopping HubConnection."),this.cleanupTimeout(),this.cleanupPingTimer(),[4,this.connection.stop(r)];case 6:throw e.sent(),r;case 7:return[2]}})})},f.prototype.stop=function(){return r(this,void 0,void 0,function(){var t;return a(this,function(e){switch(e.label){case 0:return t=this.startPromise,this.stopPromise=this.stopInternal(),[4,this.stopPromise];case 1:e.sent(),e.label=2;case 2:return e.trys.push([2,4,,5]),[4,t];case 3:case 4:return e.sent(),[3,5];case 5:return[2]}})})},f.prototype.stopInternal=function(e){return this.connectionState===c.Disconnected?(this.logger.log(D.LogLevel.Debug,"Call to HubConnection.stop("+e+") ignored because it is already in the disconnected state."),Promise.resolve()):this.connectionState===c.Disconnecting?(this.logger.log(D.LogLevel.Debug,"Call to HttpConnection.stop("+e+") ignored because the connection is already in the disconnecting state."),this.stopPromise):(this.connectionState=c.Disconnecting,this.logger.log(D.LogLevel.Debug,"Stopping HubConnection."),this.reconnectDelayHandle?(this.logger.log(D.LogLevel.Debug,"Connection stopped during reconnect delay. Done reconnecting."),clearTimeout(this.reconnectDelayHandle),this.reconnectDelayHandle=void 0,this.completeClose(),Promise.resolve()):(this.cleanupTimeout(),this.cleanupPingTimer(),this.stopDuringStartError=e||new Error("The connection was stopped before the hub handshake could complete."),this.connection.stop(e)))},f.prototype.stream=function(e){for(var t=this,n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];var o,i=this.replaceStreamingParams(n),u=i[0],s=i[1],a=this.createStreamInvocation(e,n,s),c=new p.Subject;return c.cancelCallback=function(){var e=t.createCancelInvocation(a.invocationId);return delete t.callbacks[a.invocationId],o.then(function(){return t.sendWithProtocol(e)})},this.callbacks[a.invocationId]=function(e,t){t?c.error(t):e&&(e.type===l.MessageType.Completion?e.error?c.error(new Error(e.error)):c.complete():c.next(e.item))},o=this.sendWithProtocol(a).catch(function(e){c.error(e),delete t.callbacks[a.invocationId]}),this.launchStreams(u,o),c},f.prototype.sendMessage=function(e){return this.resetKeepAliveInterval(),this.connection.send(e)},f.prototype.sendWithProtocol=function(e){return this.sendMessage(this.protocol.writeMessage(e))},f.prototype.send=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var r=this.replaceStreamingParams(t),o=r[0],i=r[1],u=this.sendWithProtocol(this.createInvocation(e,t,!0,i));return this.launchStreams(o,u),u},f.prototype.invoke=function(e){for(var t=this,n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];var o=this.replaceStreamingParams(n),i=o[0],u=o[1],s=this.createInvocation(e,n,!1,u);return new Promise(function(n,r){t.callbacks[s.invocationId]=function(e,t){t?r(t):e&&(e.type===l.MessageType.Completion?e.error?r(new Error(e.error)):n(e.result):r(new Error("Unexpected message type: "+e.type)))};var e=t.sendWithProtocol(s).catch(function(e){r(e),delete t.callbacks[s.invocationId]});t.launchStreams(i,e)})},f.prototype.on=function(e,t){e&&t&&(e=e.toLowerCase(),this.methods[e]||(this.methods[e]=[]),-1===this.methods[e].indexOf(t)&&this.methods[e].push(t))},f.prototype.off=function(e,t){var n,r;e&&(e=e.toLowerCase(),(n=this.methods[e])&&(t?-1!==(r=n.indexOf(t))&&(n.splice(r,1),0===n.length&&delete this.methods[e]):delete this.methods[e]))},f.prototype.onclose=function(e){e&&this.closedCallbacks.push(e)},f.prototype.onreconnecting=function(e){e&&this.reconnectingCallbacks.push(e)},f.prototype.onreconnected=function(e){e&&this.reconnectedCallbacks.push(e)},f.prototype.processIncomingData=function(e){if(this.cleanupTimeout(),this.receivedHandshakeResponse||(e=this.processHandshakeResponse(e),this.receivedHandshakeResponse=!0),e)for(var t=0,n=this.protocol.parseMessages(e,this.logger);t<n.length;t++){var r=n[t];switch(r.type){case l.MessageType.Invocation:this.invokeClientMethod(r);break;case l.MessageType.StreamItem:case l.MessageType.Completion:var o=this.callbacks[r.invocationId];o&&(r.type===l.MessageType.Completion&&delete this.callbacks[r.invocationId],o(r));break;case l.MessageType.Ping:break;case l.MessageType.Close:this.logger.log(D.LogLevel.Information,"Close message received from server.");var i=r.error?new Error("Server returned an error on close: "+r.error):void 0;!0===r.allowReconnect?this.connection.stop(i):this.stopPromise=this.stopInternal(i);break;default:this.logger.log(D.LogLevel.Warning,"Invalid message type: "+r.type+".")}}this.resetTimeoutPeriod()},f.prototype.processHandshakeResponse=function(e){var t,n,r;try{r=(t=this.handshakeProtocol.parseHandshakeResponse(e))[0],n=t[1]}catch(e){var o="Error parsing handshake response: "+e;this.logger.log(D.LogLevel.Error,o);var i=new Error(o);throw this.handshakeRejecter(i),i}if(n.error)throw o="Server returned handshake error: "+n.error,this.logger.log(D.LogLevel.Error,o),i=new Error(o),this.handshakeRejecter(i),i;return this.logger.log(D.LogLevel.Debug,"Server handshake complete."),this.handshakeResolver(),r},f.prototype.resetKeepAliveInterval=function(){var e=this;this.connection.features.inherentKeepAlive||(this.cleanupPingTimer(),this.pingServerHandle=setTimeout(function(){return r(e,void 0,void 0,function(){return a(this,function(e){switch(e.label){case 0:if(this.connectionState!==c.Connected)return[3,4];e.label=1;case 1:return e.trys.push([1,3,,4]),[4,this.sendMessage(this.cachedPingMessage)];case 2:return e.sent(),[3,4];case 3:return e.sent(),this.cleanupPingTimer(),[3,4];case 4:return[2]}})})},this.keepAliveIntervalInMilliseconds))},f.prototype.resetTimeoutPeriod=function(){var e=this;this.connection.features&&this.connection.features.inherentKeepAlive||(this.timeoutHandle=setTimeout(function(){return e.serverTimeout()},this.serverTimeoutInMilliseconds))},f.prototype.serverTimeout=function(){this.connection.stop(new Error("Server timeout elapsed without receiving a message from the server."))},f.prototype.invokeClientMethod=function(t){var e,n=this,r=this.methods[t.target.toLowerCase()];if(r){try{r.forEach(function(e){return e.apply(n,t.arguments)})}catch(e){this.logger.log(D.LogLevel.Error,"A callback for the method "+t.target.toLowerCase()+" threw error '"+e+"'.")}t.invocationId&&(e="Server requested a response, which is not supported in this version of the client.",this.logger.log(D.LogLevel.Error,e),this.stopPromise=this.stopInternal(new Error(e)))}else this.logger.log(D.LogLevel.Warning,"No client method with the name '"+t.target+"' found.")},f.prototype.connectionClosed=function(e){this.logger.log(D.LogLevel.Debug,"HubConnection.connectionClosed("+e+") called while in state "+this.connectionState+"."),this.stopDuringStartError=this.stopDuringStartError||e||new Error("The underlying connection was closed before the hub handshake could complete."),this.handshakeResolver&&this.handshakeResolver(),this.cancelCallbacksWithError(e||new Error("Invocation canceled due to the underlying connection being closed.")),this.cleanupTimeout(),this.cleanupPingTimer(),this.connectionState===c.Disconnecting?this.completeClose(e):this.connectionState===c.Connected&&this.reconnectPolicy?this.reconnect(e):this.connectionState===c.Connected&&this.completeClose(e)},f.prototype.completeClose=function(t){var n=this;if(this.connectionStarted){this.connectionState=c.Disconnected,this.connectionStarted=!1;try{this.closedCallbacks.forEach(function(e){return e.apply(n,[t])})}catch(e){this.logger.log(D.LogLevel.Error,"An onclose callback called with error '"+t+"' threw error '"+e+"'.")}}},f.prototype.reconnect=function(s){return r(this,void 0,void 0,function(){var t,n,r,o,i,u=this;return a(this,function(e){switch(e.label){case 0:if(t=Date.now(),r=void(n=0)!==s?s:new Error("Attempting to reconnect due to a unknown error."),null===(o=this.getNextRetryDelay(n++,0,r)))return this.logger.log(D.LogLevel.Debug,"Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt."),this.completeClose(s),[2];if(this.connectionState=c.Reconnecting,s?this.logger.log(D.LogLevel.Information,"Connection reconnecting because of error '"+s+"'."):this.logger.log(D.LogLevel.Information,"Connection reconnecting."),this.onreconnecting){try{this.reconnectingCallbacks.forEach(function(e){return e.apply(u,[s])})}catch(e){this.logger.log(D.LogLevel.Error,"An onreconnecting callback called with error '"+s+"' threw error '"+e+"'.")}if(this.connectionState!==c.Reconnecting)return this.logger.log(D.LogLevel.Debug,"Connection left the reconnecting state in onreconnecting callback. Done reconnecting."),[2]}e.label=1;case 1:return null===o?[3,7]:(this.logger.log(D.LogLevel.Information,"Reconnect attempt number "+n+" will start in "+o+" ms."),[4,new Promise(function(e){u.reconnectDelayHandle=setTimeout(e,o)})]);case 2:if(e.sent(),this.reconnectDelayHandle=void 0,this.connectionState!==c.Reconnecting)return this.logger.log(D.LogLevel.Debug,"Connection left the reconnecting state during reconnect delay. Done reconnecting."),[2];e.label=3;case 3:return e.trys.push([3,5,,6]),[4,this.startInternal()];case 4:if(e.sent(),this.connectionState=c.Connected,this.logger.log(D.LogLevel.Information,"HubConnection reconnected successfully."),this.onreconnected)try{this.reconnectedCallbacks.forEach(function(e){return e.apply(u,[u.connection.connectionId])})}catch(e){this.logger.log(D.LogLevel.Error,"An onreconnected callback called with connectionId '"+this.connection.connectionId+"; threw error '"+e+"'.")}return[2];case 5:return i=e.sent(),this.logger.log(D.LogLevel.Information,"Reconnect attempt failed because of error '"+i+"'."),this.connectionState!==c.Reconnecting?(this.logger.log(D.LogLevel.Debug,"Connection left the reconnecting state during reconnect attempt. Done reconnecting."),[2]):(r=i instanceof Error?i:new Error(i.toString()),o=this.getNextRetryDelay(n++,Date.now()-t,r),[3,6]);case 6:return[3,1];case 7:return this.logger.log(D.LogLevel.Information,"Reconnect retries have been exhausted after "+(Date.now()-t)+" ms and "+n+" failed attempts. Connection disconnecting."),this.completeClose(),[2]}})})},f.prototype.getNextRetryDelay=function(t,n,e){try{return this.reconnectPolicy.nextRetryDelayInMilliseconds({elapsedMilliseconds:n,previousRetryCount:t,retryReason:e})}catch(e){return this.logger.log(D.LogLevel.Error,"IRetryPolicy.nextRetryDelayInMilliseconds("+t+", "+n+") threw error '"+e+"'."),null}},f.prototype.cancelCallbacksWithError=function(t){var n=this.callbacks;this.callbacks={},Object.keys(n).forEach(function(e){(0,n[e])(null,t)})},f.prototype.cleanupPingTimer=function(){this.pingServerHandle&&clearTimeout(this.pingServerHandle)},f.prototype.cleanupTimeout=function(){this.timeoutHandle&&clearTimeout(this.timeoutHandle)},f.prototype.createInvocation=function(e,t,n,r){if(n)return 0!==r.length?{arguments:t,streamIds:r,target:e,type:l.MessageType.Invocation}:{arguments:t,target:e,type:l.MessageType.Invocation};var o=this.invocationId;return this.invocationId++,0!==r.length?{arguments:t,invocationId:o.toString(),streamIds:r,target:e,type:l.MessageType.Invocation}:{arguments:t,invocationId:o.toString(),target:e,type:l.MessageType.Invocation}},f.prototype.launchStreams=function(e,r){var o=this;if(0!==e.length){r=r||Promise.resolve();var t=function(n){e[n].subscribe({complete:function(){r=r.then(function(){return o.sendWithProtocol(o.createCompletionMessage(n))})},error:function(e){var t=e instanceof Error?e.message:e&&e.toString?e.toString():"Unknown error";r=r.then(function(){return o.sendWithProtocol(o.createCompletionMessage(n,t))})},next:function(e){r=r.then(function(){return o.sendWithProtocol(o.createStreamItemMessage(n,e))})}})};for(var n in e)t(n)}},f.prototype.replaceStreamingParams=function(e){for(var t=[],n=[],r=0;r<e.length;r++){var o,i=e[r];this.isObservable(i)&&(o=this.invocationId,this.invocationId++,t[o]=i,n.push(o.toString()),e.splice(r,1))}return[t,n]},f.prototype.isObservable=function(e){return e&&e.subscribe&&"function"==typeof e.subscribe},f.prototype.createStreamInvocation=function(e,t,n){var r=this.invocationId;return this.invocationId++,0!==n.length?{arguments:t,invocationId:r.toString(),streamIds:n,target:e,type:l.MessageType.StreamInvocation}:{arguments:t,invocationId:r.toString(),target:e,type:l.MessageType.StreamInvocation}},f.prototype.createCancelInvocation=function(e){return{invocationId:e,type:l.MessageType.CancelInvocation}},f.prototype.createStreamItemMessage=function(e,t){return{invocationId:e,item:t,type:l.MessageType.StreamItem}},f.prototype.createCompletionMessage=function(e,t,n){return t?{error:t,invocationId:e,type:l.MessageType.Completion}:{invocationId:e,result:n,type:l.MessageType.Completion}},f);function f(e,t,n,r){var o=this;u.Arg.isRequired(e,"connection"),u.Arg.isRequired(t,"logger"),u.Arg.isRequired(n,"protocol"),this.serverTimeoutInMilliseconds=3e4,this.keepAliveIntervalInMilliseconds=15e3,this.logger=t,this.protocol=n,this.connection=e,this.reconnectPolicy=r,this.handshakeProtocol=new i.HandshakeProtocol,this.connection.onreceive=function(e){return o.processIncomingData(e)},this.connection.onclose=function(e){return o.connectionClosed(e)},this.callbacks={},this.methods={},this.closedCallbacks=[],this.reconnectingCallbacks=[],this.reconnectedCallbacks=[],this.invocationId=0,this.receivedHandshakeResponse=!1,this.connectionState=c.Disconnected,this.connectionStarted=!1,this.cachedPingMessage=this.protocol.writeMessage({type:l.MessageType.Ping})}n.HubConnection=s},{"./HandshakeProtocol":7,"./IHubProtocol":12,"./ILogger":13,"./Subject":19,"./Utils":21}],11:[function(e,t,n){"use strict";var r=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e};Object.defineProperty(n,"__esModule",{value:!0});var o=e("./DefaultReconnectPolicy"),i=e("./HttpConnection"),u=e("./HubConnection"),s=e("./ILogger"),a=e("./JsonHubProtocol"),c=e("./Loggers"),l=e("./Utils"),D={trace:s.LogLevel.Trace,debug:s.LogLevel.Debug,info:s.LogLevel.Information,information:s.LogLevel.Information,warn:s.LogLevel.Warning,warning:s.LogLevel.Warning,error:s.LogLevel.Error,critical:s.LogLevel.Critical,none:s.LogLevel.None};var p=(f.prototype.configureLogging=function(e){var t;return l.Arg.isRequired(e,"logging"),void 0!==e.log?this.logger=e:"string"==typeof e?(t=function(e){var t=D[e.toLowerCase()];if(void 0!==t)return t;throw new Error("Unknown log level: "+e)}(e),this.logger=new l.ConsoleLogger(t)):this.logger=new l.ConsoleLogger(e),this},f.prototype.withUrl=function(e,t){return l.Arg.isRequired(e,"url"),this.url=e,this.httpConnectionOptions=r({},this.httpConnectionOptions,"object"==typeof t?t:{transport:t}),this},f.prototype.withHubProtocol=function(e){return l.Arg.isRequired(e,"protocol"),this.protocol=e,this},f.prototype.withAutomaticReconnect=function(e){if(this.reconnectPolicy)throw new Error("A reconnectPolicy has already been set.");return e?Array.isArray(e)?this.reconnectPolicy=new o.DefaultReconnectPolicy(e):this.reconnectPolicy=e:this.reconnectPolicy=new o.DefaultReconnectPolicy,this},f.prototype.build=function(){var e=this.httpConnectionOptions||{};if(void 0===e.logger&&(e.logger=this.logger),!this.url)throw new Error("The 'HubConnectionBuilder.withUrl' method must be called before building the connection.");var t=new i.HttpConnection(this.url,e);return u.HubConnection.create(t,this.logger||c.NullLogger.instance,this.protocol||new a.JsonHubProtocol,this.reconnectPolicy)},f);function f(){}n.HubConnectionBuilder=p},{"./DefaultReconnectPolicy":4,"./HttpConnection":9,"./HubConnection":10,"./ILogger":13,"./JsonHubProtocol":15,"./Loggers":16,"./Utils":21}],12:[function(e,t,n){"use strict";var r;Object.defineProperty(n,"__esModule",{value:!0}),(r=n.MessageType||(n.MessageType={}))[r.Invocation=1]="Invocation",r[r.StreamItem=2]="StreamItem",r[r.Completion=3]="Completion",r[r.StreamInvocation=4]="StreamInvocation",r[r.CancelInvocation=5]="CancelInvocation",r[r.Ping=6]="Ping",r[r.Close=7]="Close"},{}],13:[function(e,t,n){"use strict";var r;Object.defineProperty(n,"__esModule",{value:!0}),(r=n.LogLevel||(n.LogLevel={}))[r.Trace=0]="Trace",r[r.Debug=1]="Debug",r[r.Information=2]="Information",r[r.Warning=3]="Warning",r[r.Error=4]="Error",r[r.Critical=5]="Critical",r[r.None=6]="None"},{}],14:[function(e,t,n){"use strict";var r,o;Object.defineProperty(n,"__esModule",{value:!0}),(r=n.HttpTransportType||(n.HttpTransportType={}))[r.None=0]="None",r[r.WebSockets=1]="WebSockets",r[r.ServerSentEvents=2]="ServerSentEvents",r[r.LongPolling=4]="LongPolling",(o=n.TransferFormat||(n.TransferFormat={}))[o.Text=1]="Text",o[o.Binary=2]="Binary"},{}],15:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var s=e("./IHubProtocol"),a=e("./ILogger"),r=e("./ITransport"),c=e("./Loggers"),l=e("./TextMessageFormat"),o=(i.prototype.parseMessages=function(e,t){if("string"!=typeof e)throw new Error("Invalid input for JSON hub protocol. Expected a string.");if(!e)return[];null===t&&(t=c.NullLogger.instance);for(var n=[],r=0,o=l.TextMessageFormat.parse(e);r<o.length;r++){var i=o[r],u=JSON.parse(i);if("number"!=typeof u.type)throw new Error("Invalid payload.");switch(u.type){case s.MessageType.Invocation:this.isInvocationMessage(u);break;case s.MessageType.StreamItem:this.isStreamItemMessage(u);break;case s.MessageType.Completion:this.isCompletionMessage(u);break;case s.MessageType.Ping:case s.MessageType.Close:break;default:t.log(a.LogLevel.Information,"Unknown message type '"+u.type+"' ignored.");continue}n.push(u)}return n},i.prototype.writeMessage=function(e){return l.TextMessageFormat.write(JSON.stringify(e))},i.prototype.isInvocationMessage=function(e){this.assertNotEmptyString(e.target,"Invalid payload for Invocation message."),void 0!==e.invocationId&&this.assertNotEmptyString(e.invocationId,"Invalid payload for Invocation message.")},i.prototype.isStreamItemMessage=function(e){if(this.assertNotEmptyString(e.invocationId,"Invalid payload for StreamItem message."),void 0===e.item)throw new Error("Invalid payload for StreamItem message.")},i.prototype.isCompletionMessage=function(e){if(e.result&&e.error)throw new Error("Invalid payload for Completion message.");!e.result&&e.error&&this.assertNotEmptyString(e.error,"Invalid payload for Completion message."),this.assertNotEmptyString(e.invocationId,"Invalid payload for Completion message.")},i.prototype.assertNotEmptyString=function(e,t){if("string"!=typeof e||""===e)throw new Error(t)},i);function i(){this.name="json",this.version=1,this.transferFormat=r.TransferFormat.Text}n.JsonHubProtocol=o},{"./IHubProtocol":12,"./ILogger":13,"./ITransport":14,"./Loggers":16,"./TextMessageFormat":20}],16:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=(o.prototype.log=function(e,t){},o.instance=new o,o);function o(){}n.NullLogger=r},{}],17:[function(e,t,n){"use strict";var p=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},r=this&&this.__awaiter||function(i,u,s,a){return new(s=s||Promise)(function(e,t){function n(e){try{o(a.next(e))}catch(e){t(e)}}function r(e){try{o(a.throw(e))}catch(e){t(e)}}function o(t){t.done?e(t.value):new s(function(e){e(t.value)}).then(n,r)}o((a=a.apply(i,u||[])).next())})},f=this&&this.__generator||function(n,r){var o,i,u,s={label:0,sent:function(){if(1&u[0])throw u[1];return u[1]},trys:[],ops:[]},e={next:t(0),throw:t(1),return:t(2)};return"function"==typeof Symbol&&(e[Symbol.iterator]=function(){return this}),e;function t(t){return function(e){return function(t){if(o)throw new TypeError("Generator is already executing.");for(;s;)try{if(o=1,i&&(u=2&t[0]?i.return:t[0]?i.throw||((u=i.return)&&u.call(i),0):i.next)&&!(u=u.call(i,t[1])).done)return u;switch(i=0,u&&(t=[2&t[0],u.value]),t[0]){case 0:case 1:u=t;break;case 4:return s.label++,{value:t[1],done:!1};case 5:s.label++,i=t[1],t=[0];continue;case 7:t=s.ops.pop(),s.trys.pop();continue;default:if(!(u=0<(u=s.trys).length&&u[u.length-1])&&(6===t[0]||2===t[0])){s=0;continue}if(3===t[0]&&(!u||t[1]>u[0]&&t[1]<u[3])){s.label=t[1];break}if(6===t[0]&&s.label<u[1]){s.label=u[1],u=t;break}if(u&&s.label<u[2]){s.label=u[2],s.ops.push(t);break}u[2]&&s.ops.pop(),s.trys.pop();continue}t=r.call(n,s)}catch(e){t=[6,e],i=0}finally{o=u=0}if(5&t[0])throw t[1];return{value:t[0]?t[1]:void 0,done:!0}}([t,e])}}};Object.defineProperty(n,"__esModule",{value:!0});var u=e("./AbortController"),h=e("./Errors"),d=e("./ILogger"),g=e("./ITransport"),v=e("./Utils"),o=(Object.defineProperty(i.prototype,"pollAborted",{get:function(){return this.pollAbort.aborted},enumerable:!0,configurable:!0}),i.prototype.connect=function(l,D){return r(this,void 0,void 0,function(){var t,n,r,o,i,u,s,a,c;return f(this,function(e){switch(e.label){case 0:if(v.Arg.isRequired(l,"url"),v.Arg.isRequired(D,"transferFormat"),v.Arg.isIn(D,g.TransferFormat,"transferFormat"),this.url=l,this.logger.log(d.LogLevel.Trace,"(LongPolling transport) Connecting."),D===g.TransferFormat.Binary&&"undefined"!=typeof XMLHttpRequest&&"string"!=typeof(new XMLHttpRequest).responseType)throw new Error("Binary protocols over XmlHttpRequest not implementing advanced features are not supported.");return n=v.getUserAgentHeader(),r=n[0],o=n[1],i=p(((t={})[r]=o,t),this.headers),u={abortSignal:this.pollAbort.signal,headers:i,timeout:1e5,withCredentials:this.withCredentials},D===g.TransferFormat.Binary&&(u.responseType="arraybuffer"),[4,this.getAccessToken()];case 1:return s=e.sent(),this.updateHeaderToken(u,s),a=l+"&_="+Date.now(),this.logger.log(d.LogLevel.Trace,"(LongPolling transport) polling: "+a+"."),[4,this.httpClient.get(a,u)];case 2:return 200!==(c=e.sent()).statusCode?(this.logger.log(d.LogLevel.Error,"(LongPolling transport) Unexpected response code: "+c.statusCode+"."),this.closeError=new h.HttpError(c.statusText||"",c.statusCode),this.running=!1):this.running=!0,this.receiving=this.poll(this.url,u),[2]}})})},i.prototype.getAccessToken=function(){return r(this,void 0,void 0,function(){return f(this,function(e){switch(e.label){case 0:return this.accessTokenFactory?[4,this.accessTokenFactory()]:[3,2];case 1:return[2,e.sent()];case 2:return[2,null]}})})},i.prototype.updateHeaderToken=function(e,t){e.headers||(e.headers={}),t?e.headers.Authorization="Bearer "+t:e.headers.Authorization&&delete e.headers.Authorization},i.prototype.poll=function(i,u){return r(this,void 0,void 0,function(){var t,n,r,o;return f(this,function(e){switch(e.label){case 0:e.trys.push([0,,8,9]),e.label=1;case 1:return this.running?[4,this.getAccessToken()]:[3,7];case 2:t=e.sent(),this.updateHeaderToken(u,t),e.label=3;case 3:return e.trys.push([3,5,,6]),n=i+"&_="+Date.now(),this.logger.log(d.LogLevel.Trace,"(LongPolling transport) polling: "+n+"."),[4,this.httpClient.get(n,u)];case 4:return 204===(r=e.sent()).statusCode?(this.logger.log(d.LogLevel.Information,"(LongPolling transport) Poll terminated by server."),this.running=!1):200!==r.statusCode?(this.logger.log(d.LogLevel.Error,"(LongPolling transport) Unexpected response code: "+r.statusCode+"."),this.closeError=new h.HttpError(r.statusText||"",r.statusCode),this.running=!1):r.content?(this.logger.log(d.LogLevel.Trace,"(LongPolling transport) data received. "+v.getDataDetail(r.content,this.logMessageContent)+"."),this.onreceive&&this.onreceive(r.content)):this.logger.log(d.LogLevel.Trace,"(LongPolling transport) Poll timed out, reissuing."),[3,6];case 5:return o=e.sent(),this.running?o instanceof h.TimeoutError?this.logger.log(d.LogLevel.Trace,"(LongPolling transport) Poll timed out, reissuing."):(this.closeError=o,this.running=!1):this.logger.log(d.LogLevel.Trace,"(LongPolling transport) Poll errored after shutdown: "+o.message),[3,6];case 6:return[3,1];case 7:return[3,9];case 8:return this.logger.log(d.LogLevel.Trace,"(LongPolling transport) Polling complete."),this.pollAborted||this.raiseOnClose(),[7];case 9:return[2]}})})},i.prototype.send=function(t){return r(this,void 0,void 0,function(){return f(this,function(e){return this.running?[2,v.sendMessage(this.logger,"LongPolling",this.httpClient,this.url,this.accessTokenFactory,t,this.logMessageContent,this.withCredentials,this.headers)]:[2,Promise.reject(new Error("Cannot send until the transport is connected"))]})})},i.prototype.stop=function(){return r(this,void 0,void 0,function(){var t,n,r,o,i,u;return f(this,function(e){switch(e.label){case 0:this.logger.log(d.LogLevel.Trace,"(LongPolling transport) Stopping polling."),this.running=!1,this.pollAbort.abort(),e.label=1;case 1:return e.trys.push([1,,5,6]),[4,this.receiving];case 2:return e.sent(),this.logger.log(d.LogLevel.Trace,"(LongPolling transport) sending DELETE request to "+this.url+"."),t={},n=v.getUserAgentHeader(),r=n[0],o=n[1],t[r]=o,i={headers:p({},t,this.headers),withCredentials:this.withCredentials},[4,this.getAccessToken()];case 3:return u=e.sent(),this.updateHeaderToken(i,u),[4,this.httpClient.delete(this.url,i)];case 4:return e.sent(),this.logger.log(d.LogLevel.Trace,"(LongPolling transport) DELETE request sent."),[3,6];case 5:return this.logger.log(d.LogLevel.Trace,"(LongPolling transport) Stop finished."),this.raiseOnClose(),[7];case 6:return[2]}})})},i.prototype.raiseOnClose=function(){var e;this.onclose&&(e="(LongPolling transport) Firing onclose event.",this.closeError&&(e+=" Error: "+this.closeError),this.logger.log(d.LogLevel.Trace,e),this.onclose(this.closeError))},i);function i(e,t,n,r,o,i){this.httpClient=e,this.accessTokenFactory=t,this.logger=n,this.pollAbort=new u.AbortController,this.logMessageContent=r,this.withCredentials=o,this.headers=i,this.running=!1,this.onreceive=null,this.onclose=null}n.LongPollingTransport=o},{"./AbortController":2,"./Errors":5,"./ILogger":13,"./ITransport":14,"./Utils":21}],18:[function(e,t,n){"use strict";var p=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},r=this&&this.__awaiter||function(i,u,s,a){return new(s=s||Promise)(function(e,t){function n(e){try{o(a.next(e))}catch(e){t(e)}}function r(e){try{o(a.throw(e))}catch(e){t(e)}}function o(t){t.done?e(t.value):new s(function(e){e(t.value)}).then(n,r)}o((a=a.apply(i,u||[])).next())})},o=this&&this.__generator||function(n,r){var o,i,u,s={label:0,sent:function(){if(1&u[0])throw u[1];return u[1]},trys:[],ops:[]},e={next:t(0),throw:t(1),return:t(2)};return"function"==typeof Symbol&&(e[Symbol.iterator]=function(){return this}),e;function t(t){return function(e){return function(t){if(o)throw new TypeError("Generator is already executing.");for(;s;)try{if(o=1,i&&(u=2&t[0]?i.return:t[0]?i.throw||((u=i.return)&&u.call(i),0):i.next)&&!(u=u.call(i,t[1])).done)return u;switch(i=0,u&&(t=[2&t[0],u.value]),t[0]){case 0:case 1:u=t;break;case 4:return s.label++,{value:t[1],done:!1};case 5:s.label++,i=t[1],t=[0];continue;case 7:t=s.ops.pop(),s.trys.pop();continue;default:if(!(u=0<(u=s.trys).length&&u[u.length-1])&&(6===t[0]||2===t[0])){s=0;continue}if(3===t[0]&&(!u||t[1]>u[0]&&t[1]<u[3])){s.label=t[1];break}if(6===t[0]&&s.label<u[1]){s.label=u[1],u=t;break}if(u&&s.label<u[2]){s.label=u[2],s.ops.push(t);break}u[2]&&s.ops.pop(),s.trys.pop();continue}t=r.call(n,s)}catch(e){t=[6,e],i=0}finally{o=u=0}if(5&t[0])throw t[1];return{value:t[0]?t[1]:void 0,done:!0}}([t,e])}}};Object.defineProperty(n,"__esModule",{value:!0});var f=e("./ILogger"),h=e("./ITransport"),d=e("./Utils"),i=(u.prototype.connect=function(l,D){return r(this,void 0,void 0,function(){var t,c=this;return o(this,function(e){switch(e.label){case 0:return d.Arg.isRequired(l,"url"),d.Arg.isRequired(D,"transferFormat"),d.Arg.isIn(D,h.TransferFormat,"transferFormat"),this.logger.log(f.LogLevel.Trace,"(SSE transport) Connecting."),this.url=l,this.accessTokenFactory?[4,this.accessTokenFactory()]:[3,2];case 1:(t=e.sent())&&(l+=(l.indexOf("?")<0?"?":"&")+"access_token="+encodeURIComponent(t)),e.label=2;case 2:return[2,new Promise(function(e,n){var r=!1;if(D===h.TransferFormat.Text){var t,o,i,u,s,a=d.Platform.isBrowser||d.Platform.isWebWorker?new c.eventSourceConstructor(l,{withCredentials:c.withCredentials}):(t=c.httpClient.getCookieString(l),(o={}).Cookie=t,u=(i=d.getUserAgentHeader())[0],s=i[1],o[u]=s,new c.eventSourceConstructor(l,{withCredentials:c.withCredentials,headers:p({},o,c.headers)}));try{a.onmessage=function(e){if(c.onreceive)try{c.logger.log(f.LogLevel.Trace,"(SSE transport) data received. "+d.getDataDetail(e.data,c.logMessageContent)+"."),c.onreceive(e.data)}catch(e){return void c.close(e)}},a.onerror=function(e){var t=new Error(e.data||"Error occurred");r?c.close(t):n(t)},a.onopen=function(){c.logger.log(f.LogLevel.Information,"SSE connected to "+c.url),c.eventSource=a,r=!0,e()}}catch(e){return void n(e)}}else n(new Error("The Server-Sent Events transport only supports the 'Text' transfer format"))})]}})})},u.prototype.send=function(t){return r(this,void 0,void 0,function(){return o(this,function(e){return this.eventSource?[2,d.sendMessage(this.logger,"SSE",this.httpClient,this.url,this.accessTokenFactory,t,this.logMessageContent,this.withCredentials,this.headers)]:[2,Promise.reject(new Error("Cannot send until the transport is connected"))]})})},u.prototype.stop=function(){return this.close(),Promise.resolve()},u.prototype.close=function(e){this.eventSource&&(this.eventSource.close(),this.eventSource=void 0,this.onclose&&this.onclose(e))},u);function u(e,t,n,r,o,i,u){this.httpClient=e,this.accessTokenFactory=t,this.logger=n,this.logMessageContent=r,this.withCredentials=i,this.eventSourceConstructor=o,this.headers=u,this.onreceive=null,this.onclose=null}n.ServerSentEventsTransport=i},{"./ILogger":13,"./ITransport":14,"./Utils":21}],19:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e("./Utils"),o=(i.prototype.next=function(e){for(var t=0,n=this.observers;t<n.length;t++)n[t].next(e)},i.prototype.error=function(e){for(var t=0,n=this.observers;t<n.length;t++){var r=n[t];r.error&&r.error(e)}},i.prototype.complete=function(){for(var e=0,t=this.observers;e<t.length;e++){var n=t[e];n.complete&&n.complete()}},i.prototype.subscribe=function(e){return this.observers.push(e),new r.SubjectSubscription(this,e)},i);function i(){this.observers=[]}n.Subject=o},{"./Utils":21}],20:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=(o.write=function(e){return""+e+o.RecordSeparator},o.parse=function(e){if(e[e.length-1]!==o.RecordSeparator)throw new Error("Message is incomplete.");var t=e.split(o.RecordSeparator);return t.pop(),t},o.RecordSeparatorCode=30,o.RecordSeparator=String.fromCharCode(o.RecordSeparatorCode),o);function o(){}n.TextMessageFormat=r},{}],21:[function(f,e,h){(function(t){"use strict";var m=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},e=this&&this.__awaiter||function(i,u,s,a){return new(s=s||Promise)(function(e,t){function n(e){try{o(a.next(e))}catch(e){t(e)}}function r(e){try{o(a.throw(e))}catch(e){t(e)}}function o(t){t.done?e(t.value):new s(function(e){e(t.value)}).then(n,r)}o((a=a.apply(i,u||[])).next())})},y=this&&this.__generator||function(n,r){var o,i,u,s={label:0,sent:function(){if(1&u[0])throw u[1];return u[1]},trys:[],ops:[]},e={next:t(0),throw:t(1),return:t(2)};return"function"==typeof Symbol&&(e[Symbol.iterator]=function(){return this}),e;function t(t){return function(e){return function(t){if(o)throw new TypeError("Generator is already executing.");for(;s;)try{if(o=1,i&&(u=2&t[0]?i.return:t[0]?i.throw||((u=i.return)&&u.call(i),0):i.next)&&!(u=u.call(i,t[1])).done)return u;switch(i=0,u&&(t=[2&t[0],u.value]),t[0]){case 0:case 1:u=t;break;case 4:return s.label++,{value:t[1],done:!1};case 5:s.label++,i=t[1],t=[0];continue;case 7:t=s.ops.pop(),s.trys.pop();continue;default:if(!(u=0<(u=s.trys).length&&u[u.length-1])&&(6===t[0]||2===t[0])){s=0;continue}if(3===t[0]&&(!u||t[1]>u[0]&&t[1]<u[3])){s.label=t[1];break}if(6===t[0]&&s.label<u[1]){s.label=u[1],u=t;break}if(u&&s.label<u[2]){s.label=u[2],s.ops.push(t);break}u[2]&&s.ops.pop(),s.trys.pop();continue}t=r.call(n,s)}catch(e){t=[6,e],i=0}finally{o=u=0}if(5&t[0])throw t[1];return{value:t[0]?t[1]:void 0,done:!0}}([t,e])}}};Object.defineProperty(h,"__esModule",{value:!0});var F=f("./ILogger"),n=f("./Loggers");h.VERSION="5.0.0-preview.4.20257.10";var r=(o.isRequired=function(e,t){if(null==e)throw new Error("The '"+t+"' argument is required.")},o.isIn=function(e,t,n){if(!(e in t))throw new Error("Unknown "+n+" value: "+e+".")},o);function o(){}h.Arg=r;var i=(Object.defineProperty(u,"isBrowser",{get:function(){return"object"==typeof window},enumerable:!0,configurable:!0}),Object.defineProperty(u,"isWebWorker",{get:function(){return"object"==typeof self&&"importScripts"in self},enumerable:!0,configurable:!0}),Object.defineProperty(u,"isNode",{get:function(){return!this.isBrowser&&!this.isWebWorker},enumerable:!0,configurable:!0}),u);function u(){}function E(e,t){var n="";return b(e)?(n="Binary data of length "+e.byteLength,t&&(n+=". Content: '"+s(e)+"'")):"string"==typeof e&&(n="String data of length "+e.length,t&&(n+=". Content: '"+e+"'")),n}function s(e){var t=new Uint8Array(e),n="";return t.forEach(function(e){n+="0x"+(e<16?"0":"")+e.toString(16)+" "}),n.substr(0,n.length-1)}function b(e){return e&&"undefined"!=typeof ArrayBuffer&&(e instanceof ArrayBuffer||e.constructor&&"ArrayBuffer"===e.constructor.name)}h.Platform=i,h.getDataDetail=E,h.formatArrayBuffer=s,h.isArrayBuffer=b,h.sendMessage=function(c,l,D,p,f,h,d,g,v){return e(this,void 0,void 0,function(){var t,n,r,o,i,u,s,a;return y(this,function(e){switch(e.label){case 0:return n={},f?[4,f()]:[3,2];case 1:(r=e.sent())&&((t={}).Authorization="Bearer "+r,n=t),e.label=2;case 2:return o=C(),i=o[0],u=o[1],n[i]=u,c.log(F.LogLevel.Trace,"("+l+" transport) sending data. "+E(h,d)+"."),s=b(h)?"arraybuffer":"text",[4,D.post(p,{content:h,headers:m({},n,v),responseType:s,withCredentials:g})];case 3:return a=e.sent(),c.log(F.LogLevel.Trace,"("+l+" transport) request complete. Response status: "+a.statusCode+"."),[2]}})})},h.createLogger=function(e){return void 0===e?new l(F.LogLevel.Information):null===e?n.NullLogger.instance:e.log?e:new l(e)};var a=(c.prototype.dispose=function(){var e=this.subject.observers.indexOf(this.observer);-1<e&&this.subject.observers.splice(e,1),0===this.subject.observers.length&&this.subject.cancelCallback&&this.subject.cancelCallback().catch(function(e){})},c);function c(e,t){this.subject=e,this.observer=t}h.SubjectSubscription=a;var l=(D.prototype.log=function(e,t){if(e>=this.minimumLogLevel)switch(e){case F.LogLevel.Critical:case F.LogLevel.Error:this.outputConsole.error("["+(new Date).toISOString()+"] "+F.LogLevel[e]+": "+t);break;case F.LogLevel.Warning:this.outputConsole.warn("["+(new Date).toISOString()+"] "+F.LogLevel[e]+": "+t);break;case F.LogLevel.Information:this.outputConsole.info("["+(new Date).toISOString()+"] "+F.LogLevel[e]+": "+t);break;default:this.outputConsole.log("["+(new Date).toISOString()+"] "+F.LogLevel[e]+": "+t)}},D);function D(e){this.minimumLogLevel=e,this.outputConsole=console}function C(){var e="X-SignalR-User-Agent";return i.isNode&&(e="User-Agent"),[e,p(h.VERSION,function(){{if(!i.isNode)return"";switch(t.platform){case"win32":return"Windows NT";case"darwin":return"macOS";case"linux":return"Linux";default:return t.platform}}}(),i.isNode?"NodeJS":"Browser",function(){if(i.isNode)return t.versions.node;return}())]}function p(e,t,n,r){var o="Microsoft SignalR/",i=e.split(".");return o+=i[0]+"."+i[1],o+=" ("+e+"; ",o+=t&&""!==t?t+"; ":"Unknown OS; ",o+=""+n,o+=r?"; "+r:"; Unknown Runtime Version",o+=")"}h.ConsoleLogger=l,h.getUserAgentHeader=C,h.constructUserAgent=p}).call(this,f("_process"))},{"./ILogger":13,"./Loggers":16,_process:29}],22:[function(e,t,n){"use strict";var p=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},r=this&&this.__awaiter||function(i,u,s,a){return new(s=s||Promise)(function(e,t){function n(e){try{o(a.next(e))}catch(e){t(e)}}function r(e){try{o(a.throw(e))}catch(e){t(e)}}function o(t){t.done?e(t.value):new s(function(e){e(t.value)}).then(n,r)}o((a=a.apply(i,u||[])).next())})},o=this&&this.__generator||function(n,r){var o,i,u,s={label:0,sent:function(){if(1&u[0])throw u[1];return u[1]},trys:[],ops:[]},e={next:t(0),throw:t(1),return:t(2)};return"function"==typeof Symbol&&(e[Symbol.iterator]=function(){return this}),e;function t(t){return function(e){return function(t){if(o)throw new TypeError("Generator is already executing.");for(;s;)try{if(o=1,i&&(u=2&t[0]?i.return:t[0]?i.throw||((u=i.return)&&u.call(i),0):i.next)&&!(u=u.call(i,t[1])).done)return u;switch(i=0,u&&(t=[2&t[0],u.value]),t[0]){case 0:case 1:u=t;break;case 4:return s.label++,{value:t[1],done:!1};case 5:s.label++,i=t[1],t=[0];continue;case 7:t=s.ops.pop(),s.trys.pop();continue;default:if(!(u=0<(u=s.trys).length&&u[u.length-1])&&(6===t[0]||2===t[0])){s=0;continue}if(3===t[0]&&(!u||t[1]>u[0]&&t[1]<u[3])){s.label=t[1];break}if(6===t[0]&&s.label<u[1]){s.label=u[1],u=t;break}if(u&&s.label<u[2]){s.label=u[2],s.ops.push(t);break}u[2]&&s.ops.pop(),s.trys.pop();continue}t=r.call(n,s)}catch(e){t=[6,e],i=0}finally{o=u=0}if(5&t[0])throw t[1];return{value:t[0]?t[1]:void 0,done:!0}}([t,e])}}};Object.defineProperty(n,"__esModule",{value:!0});var f=e("./ILogger"),h=e("./ITransport"),d=e("./Utils"),i=(u.prototype.connect=function(l,D){return r(this,void 0,void 0,function(){var t,c=this;return o(this,function(e){switch(e.label){case 0:return d.Arg.isRequired(l,"url"),d.Arg.isRequired(D,"transferFormat"),d.Arg.isIn(D,h.TransferFormat,"transferFormat"),this.logger.log(f.LogLevel.Trace,"(WebSockets transport) Connecting."),this.accessTokenFactory?[4,this.accessTokenFactory()]:[3,2];case 1:(t=e.sent())&&(l+=(l.indexOf("?")<0?"?":"&")+"access_token="+encodeURIComponent(t)),e.label=2;case 2:return[2,new Promise(function(t,n){var r;l=l.replace(/^http/,"ws");var e,o,i,u,s=c.httpClient.getCookieString(l),a=!1;d.Platform.isNode&&(e={},i=(o=d.getUserAgentHeader())[0],u=o[1],e[i]=u,s&&(e.Cookie=""+s),r=new c.webSocketConstructor(l,void 0,{headers:p({},e,c.headers)})),r=r||new c.webSocketConstructor(l),D===h.TransferFormat.Binary&&(r.binaryType="arraybuffer"),r.onopen=function(e){c.logger.log(f.LogLevel.Information,"WebSocket connected to "+l+"."),c.webSocket=r,a=!0,t()},r.onerror=function(e){var t=null,t="undefined"!=typeof ErrorEvent&&e instanceof ErrorEvent?e.error:new Error("There was an error with the transport.");n(t)},r.onmessage=function(e){if(c.logger.log(f.LogLevel.Trace,"(WebSockets transport) data received. "+d.getDataDetail(e.data,c.logMessageContent)+"."),c.onreceive)try{c.onreceive(e.data)}catch(e){return void c.close(e)}},r.onclose=function(e){var t;a?c.close(e):(t=null,t="undefined"!=typeof ErrorEvent&&e instanceof ErrorEvent?e.error:new Error("There was an error with the transport."),n(t))}})]}})})},u.prototype.send=function(e){return this.webSocket&&this.webSocket.readyState===this.webSocketConstructor.OPEN?(this.logger.log(f.LogLevel.Trace,"(WebSockets transport) sending data. "+d.getDataDetail(e,this.logMessageContent)+"."),this.webSocket.send(e),Promise.resolve()):Promise.reject("WebSocket is not in the OPEN state")},u.prototype.stop=function(){return this.webSocket&&this.close(void 0),Promise.resolve()},u.prototype.close=function(e){this.webSocket&&(this.webSocket.onclose=function(){},this.webSocket.onmessage=function(){},this.webSocket.onerror=function(){},this.webSocket.close(),this.webSocket=void 0),this.logger.log(f.LogLevel.Trace,"(WebSockets transport) socket closed."),this.onclose&&(!this.isCloseEvent(e)||!1!==e.wasClean&&1e3===e.code?e instanceof Error?this.onclose(e):this.onclose():this.onclose(new Error("WebSocket closed with status code: "+e.code+" ("+e.reason+").")))},u.prototype.isCloseEvent=function(e){return e&&"boolean"==typeof e.wasClean&&"number"==typeof e.code},u);function u(e,t,n,r,o,i){this.logger=n,this.accessTokenFactory=t,this.logMessageContent=r,this.webSocketConstructor=o,this.httpClient=e,this.onreceive=null,this.onclose=null,this.headers=i}n.WebSocketTransport=i},{"./ILogger":13,"./ITransport":14,"./Utils":21}],23:[function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(n,"__esModule",{value:!0});var i,u=e("./Errors"),s=e("./HttpClient"),a=e("./ILogger"),c=(i=s.HttpClient,o(l,i),l.prototype.send=function(o){var i=this;return o.abortSignal&&o.abortSignal.aborted?Promise.reject(new u.AbortError):o.method?o.url?new Promise(function(e,t){var n=new XMLHttpRequest;n.open(o.method,o.url,!0),n.withCredentials=void 0===o.withCredentials||o.withCredentials,n.setRequestHeader("X-Requested-With","XMLHttpRequest"),n.setRequestHeader("Content-Type","text/plain;charset=UTF-8");var r=o.headers;r&&Object.keys(r).forEach(function(e){n.setRequestHeader(e,r[e])}),o.responseType&&(n.responseType=o.responseType),o.abortSignal&&(o.abortSignal.onabort=function(){n.abort(),t(new u.AbortError)}),o.timeout&&(n.timeout=o.timeout),n.onload=function(){o.abortSignal&&(o.abortSignal.onabort=null),200<=n.status&&n.status<300?e(new s.HttpResponse(n.status,n.statusText,n.response||n.responseText)):t(new u.HttpError(n.statusText,n.status))},n.onerror=function(){i.logger.log(a.LogLevel.Warning,"Error from HTTP request. "+n.status+": "+n.statusText+"."),t(new u.HttpError(n.statusText,n.status))},n.ontimeout=function(){i.logger.log(a.LogLevel.Warning,"Timeout from HTTP request."),t(new u.TimeoutError)},n.send(o.content||"")}):Promise.reject(new Error("No url defined.")):Promise.reject(new Error("No method defined."))},l);function l(e){var t=i.call(this)||this;return t.logger=e,t}n.XhrHttpClient=c},{"./Errors":5,"./HttpClient":8,"./ILogger":13}],24:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e("./Errors");n.AbortError=r.AbortError,n.HttpError=r.HttpError,n.TimeoutError=r.TimeoutError;var o=e("./HttpClient");n.HttpClient=o.HttpClient,n.HttpResponse=o.HttpResponse;var i=e("./DefaultHttpClient");n.DefaultHttpClient=i.DefaultHttpClient;var u=e("./HubConnection");n.HubConnection=u.HubConnection,n.HubConnectionState=u.HubConnectionState;var s=e("./HubConnectionBuilder");n.HubConnectionBuilder=s.HubConnectionBuilder;var a=e("./IHubProtocol");n.MessageType=a.MessageType;var c=e("./ILogger");n.LogLevel=c.LogLevel;var l=e("./ITransport");n.HttpTransportType=l.HttpTransportType,n.TransferFormat=l.TransferFormat;var D=e("./Loggers");n.NullLogger=D.NullLogger;var p=e("./JsonHubProtocol");n.JsonHubProtocol=p.JsonHubProtocol;var f=e("./Subject");n.Subject=f.Subject;var h=e("./Utils");n.VERSION=h.VERSION},{"./DefaultHttpClient":3,"./Errors":5,"./HttpClient":8,"./HubConnection":10,"./HubConnectionBuilder":11,"./IHubProtocol":12,"./ILogger":13,"./ITransport":14,"./JsonHubProtocol":15,"./Loggers":16,"./Subject":19,"./Utils":21}],25:[function(e,t,a){(function(F){"use strict";function T(e){var t=e.getBoundingClientRect();return{width:t.width,height:t.height,top:t.top,right:t.right,bottom:t.bottom,left:t.left,x:t.left,y:t.top}}function w(e){if("[object Window]"===e.toString())return e;var t=e.ownerDocument;return t?t.defaultView:window}function l(e){var t=w(e);return{scrollLeft:t.pageXOffset,scrollTop:t.pageYOffset}}function A(e){return e instanceof w(e).Element||e instanceof Element}function D(e){return e instanceof w(e).HTMLElement||e instanceof HTMLElement}function c(e){return e?(e.nodeName||"").toLowerCase():null}function S(e){return(A(e)?e.ownerDocument:e.document).documentElement}function p(e){return T(S(e)).left+l(e).scrollLeft}function E(e){return w(e).getComputedStyle(e)}function f(e){var t=E(e),n=t.overflow,r=t.overflowX,o=t.overflowY;return/auto|scroll|overlay|hidden/.test(n+o+r)}function b(e,t,n){void 0===n&&(n=!1);var r,o,i=S(t),u=T(e),s={scrollLeft:0,scrollTop:0},a={x:0,y:0};return n||("body"===c(t)&&!f(i)||(s=(r=t)!==w(r)&&D(r)?{scrollLeft:(o=r).scrollLeft,scrollTop:o.scrollTop}:l(r)),D(t)?((a=T(t)).x+=t.clientLeft,a.y+=t.clientTop):i&&(a.x=p(i))),{x:u.left+s.scrollLeft-a.x,y:u.top+s.scrollTop-a.y,width:u.width,height:u.height}}function ee(e){return{x:e.offsetLeft,y:e.offsetTop,width:e.offsetWidth,height:e.offsetHeight}}function s(e){return"html"===c(e)?e:e.assignedSlot||e.parentNode||e.host||S(e)}function C(e,t){void 0===t&&(t=[]);var n=function e(t){return 0<=["html","body","#document"].indexOf(c(t))?t.ownerDocument.body:D(t)&&f(t)?t:e(s(t))}(e),r="body"===c(n),o=w(n),i=r?[o].concat(o.visualViewport||[],f(n)?n:[]):n,u=t.concat(i);return r?u:u.concat(C(s(i)))}function r(e){return D(e)&&"fixed"!==E(e).position?e.offsetParent:null}function te(e){for(var t=w(e),n=r(e);n&&0<=["table","td","th"].indexOf(c(n));)n=r(n);return(!n||"body"!==c(n)||"static"!==E(n).position)&&n||t}Object.defineProperty(a,"__esModule",{value:!0});var ne="top",re="bottom",oe="right",ie="left",j="auto",H=[ne,re,oe,ie],ue="start",h="end",k="clippingParents",P="viewport",O="popper",I="reference",R=H.reduce(function(e,t){return e.concat([t+"-"+ue,t+"-"+h])},[]),N=[].concat(H,[j]).reduce(function(e,t){return e.concat([t,t+"-"+ue,t+"-"+h])},[]),B=["beforeRead","read","afterRead","beforeMain","main","afterMain","beforeWrite","write","afterWrite"];function L(e){var r=new Map,o=new Set,t=[];return e.forEach(function(e){r.set(e.name,e)}),e.forEach(function(e){o.has(e.name)||!function n(e){o.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach(function(e){var t;o.has(e)||(t=r.get(e))&&n(t)}),t.push(e)}(e)}),t}function x(e){for(var t=arguments.length,n=new Array(1<t?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return[].concat(n).reduce(function(e,t){return e.replace(/%s/,t)},e)}var M='Popper: modifier "%s" provided an invalid %s property, expected %s but got %s',_='Popper: modifier "%s" requires "%s", but "%s" modifier is not available',U=["name","enabled","phase","fn","effect","requires","options"];function se(e){return e.split("-")[0]}var W="Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.",o={placement:"bottom",modifiers:[],strategy:"absolute"};function q(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return!t.some(function(e){return!(e&&"function"==typeof e.getBoundingClientRect)})}function e(e){void 0===e&&(e={});var t=e.defaultModifiers,m=void 0===t?[]:t,n=e.defaultOptions,y=void 0===n?o:n;return function(p,f,t){void 0===t&&(t=y);var n,r,h={placement:"bottom",orderedModifiers:[],options:Object.assign({},o,{},y),modifiersData:{},elements:{reference:p,popper:f},attributes:{},styles:{}},d=[],l=!1,g={state:h,setOptions:function(e){v(),h.options=Object.assign({},y,{},h.options,{},e),h.scrollParents={reference:A(p)?C(p):p.contextElement?C(p.contextElement):[],popper:C(f)};var t,n,r,o,i,u,s,a,c,l,D=(r=[].concat(m,h.options.modifiers),o=r.reduce(function(e,t){var n=e[t.name];return e[t.name]=n?Object.assign({},n,{},t,{options:Object.assign({},n.options,{},t.options),data:Object.assign({},n.data,{},t.data)}):t,e},{}),t=Object.keys(o).map(function(e){return o[e]}),n=L(t),B.reduce(function(e,t){return e.concat(n.filter(function(e){return e.phase===t}))},[]));return h.orderedModifiers=D.filter(function(e){return e.enabled}),"production"!==F.env.NODE_ENV&&(a=[].concat(D,h.options.modifiers),c=function(e){return e.name},l=new Set,i=a.filter(function(e){var t=c(e);if(!l.has(t))return l.add(t),!0}),(s=i).forEach(function(n){Object.keys(n).forEach(function(e){switch(e){case"name":"string"!=typeof n.name&&console.error(x(M,String(n.name),'"name"','"string"','"'+String(n.name)+'"'));break;case"enabled":"boolean"!=typeof n.enabled&&console.error(x(M,n.name,'"enabled"','"boolean"','"'+String(n.enabled)+'"'));case"phase":B.indexOf(n.phase)<0&&console.error(x(M,n.name,'"phase"',"either "+B.join(", "),'"'+String(n.phase)+'"'));break;case"fn":"function"!=typeof n.fn&&console.error(x(M,n.name,'"fn"','"function"','"'+String(n.fn)+'"'));break;case"effect":"function"!=typeof n.effect&&console.error(x(M,n.name,'"effect"','"function"','"'+String(n.fn)+'"'));break;case"requires":Array.isArray(n.requires)||console.error(x(M,n.name,'"requires"','"array"','"'+String(n.requires)+'"'));break;case"requiresIfExists":Array.isArray(n.requiresIfExists)||console.error(x(M,n.name,'"requiresIfExists"','"array"','"'+String(n.requiresIfExists)+'"'));break;case"options":case"data":break;default:console.error('PopperJS: an invalid property has been provided to the "'+n.name+'" modifier, valid properties are '+U.map(function(e){return'"'+e+'"'}).join(", ")+'; but "'+e+'" was provided.')}n.requires&&n.requires.forEach(function(t){null==s.find(function(e){return e.name===t})&&console.error(x(_,String(n.name),t,t))})})}),se(h.options.placement)===j&&(h.orderedModifiers.find(function(e){return"flip"===e.name})||console.error(['Popper: "auto" placements require the "flip" modifier be',"present and enabled to work."].join(" "))),[(u=E(f)).marginTop,u.marginRight,u.marginBottom,u.marginLeft].some(function(e){return parseFloat(e)})&&console.warn(['Popper: CSS "margin" styles cannot be used to apply padding',"between the popper and its reference element or boundary.","To replicate margin, use the `offset` modifier, as well as","the `padding` option in the `preventOverflow` and `flip`","modifiers."].join(" "))),h.orderedModifiers.forEach(function(e){var t,n=e.name,r=e.options,o=void 0===r?{}:r,i=e.effect;"function"==typeof i&&(t=i({state:h,name:n,instance:g,options:o}),d.push(t||function(){}))}),g.update()},forceUpdate:function(){if(!l){var e=h.elements,t=e.reference,n=e.popper;if(q(t,n)){h.rects={reference:b(t,te(n),"fixed"===h.options.strategy),popper:ee(n)},h.reset=!1,h.placement=h.options.placement,h.orderedModifiers.forEach(function(e){return h.modifiersData[e.name]=Object.assign({},e.data)});for(var r,o,i,u,s,a=0,c=0;c<h.orderedModifiers.length;c++){if("production"!==F.env.NODE_ENV&&100<(a+=1)){console.error("Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.");break}!0!==h.reset?(o=(r=h.orderedModifiers[c]).fn,u=void 0===(i=r.options)?{}:i,s=r.name,"function"==typeof o&&(h=o({state:h,options:u,name:s,instance:g})||h)):(h.reset=!1,c=-1)}}else"production"!==F.env.NODE_ENV&&console.error(W)}},update:(n=function(){return new Promise(function(e){g.forceUpdate(),e(h)})},function(){return r=r||new Promise(function(e){Promise.resolve().then(function(){r=void 0,e(n())})})}),destroy:function(){v(),l=!0}};if(!q(p,f))return"production"!==F.env.NODE_ENV&&console.error(W),g;function v(){d.forEach(function(e){return e()}),d=[]}return g.setOptions(t).then(function(e){!l&&t.onFirstUpdate&&t.onFirstUpdate(e)}),g}}var d={passive:!0};function ae(e){return e.split("-")[1]}function ce(e){return 0<=["top","bottom"].indexOf(e)?"x":"y"}function V(e){var t,n=e.reference,r=e.element,o=e.placement,i=o?se(o):null,u=o?ae(o):null,s=n.x+n.width/2-r.width/2,a=n.y+n.height/2-r.height/2;switch(i){case ne:t={x:s,y:n.y-r.height};break;case re:t={x:s,y:n.y+n.height};break;case oe:t={x:n.x+n.width,y:a};break;case ie:t={x:n.x-r.width,y:a};break;default:t={x:n.x,y:n.y}}var c=i?ce(i):null;if(null!=c){var l="y"===c?"height":"width";switch(u){case ue:t[c]=Math.floor(t[c])-Math.floor(n[l]/2-r[l]/2);break;case h:t[c]=Math.floor(t[c])+Math.ceil(n[l]/2-r[l]/2)}}return t}var z={top:"auto",right:"auto",bottom:"auto",left:"auto"};function g(e){var t,n,r,o,i,u,s=e.popper,a=e.popperRect,c=e.placement,l=e.offsets,D=e.position,p=e.gpuAcceleration,f=e.adaptive,h=(r=(n=l).x,o=n.y,i=window.devicePixelRatio||1,{x:Math.round(r*i)/i||0,y:Math.round(o*i)/i||0}),d=h.x,g=h.y,v=l.hasOwnProperty("x"),m=l.hasOwnProperty("y"),y=ie,F=ne,E=window;f&&((u=te(s))===w(s)&&(u=S(s)),c===ne&&(F=re,g-=u.clientHeight-a.height,g*=p?1:-1),c===ie&&(y=oe,d-=u.clientWidth-a.width,d*=p?1:-1));var b,C=Object.assign({position:D},f&&z);return p?Object.assign({},C,((b={})[F]=m?"0":"",b[y]=v?"0":"",b.transform=(E.devicePixelRatio||1)<2?"translate("+d+"px, "+g+"px)":"translate3d("+d+"px, "+g+"px, 0)",b)):Object.assign({},C,((t={})[F]=m?g+"px":"",t[y]=v?d+"px":"",t.transform="",t))}var t={left:"right",right:"left",bottom:"top",top:"bottom"};function X(e){return e.replace(/left|right|bottom|top/g,function(e){return t[e]})}var n={start:"end",end:"start"};function J(e){return e.replace(/start|end/g,function(e){return n[e]})}function v(e){return parseFloat(e)||0}function m(e){var t,n,r=w(e),o={top:v((n=D(t=e)?E(t):{}).borderTopWidth),right:v(n.borderRightWidth),bottom:v(n.borderBottomWidth),left:v(n.borderLeftWidth)},i="html"===c(e),u=p(e),s=e.clientWidth+o.right,a=e.clientHeight+o.bottom;return i&&50<r.innerHeight-e.clientHeight&&(a=r.innerHeight-o.bottom),{top:i?0:e.clientTop,right:e.clientLeft>o.left?o.right:i?r.innerWidth-s-u:e.offsetWidth-s,bottom:i?r.innerHeight-a:e.offsetHeight-a,left:i?u:e.clientLeft}}function y(e,t){var n=Boolean(t.getRootNode&&t.getRootNode().host);if(e.contains(t))return!0;if(n){var r=t;do{if(r&&e.isSameNode(r))return!0;r=r.parentNode||r.host}while(r)}return!1}function Y(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function G(e,t){return t===P?Y((u=w(e),s=u.visualViewport,a=u.innerWidth,c=u.innerHeight,s&&/iPhone|iPod|iPad/.test(navigator.platform)&&(a=s.width,c=s.height),{width:a,height:c,x:0,y:0})):D(t)?T(t):Y((n=S(e),r=w(n),o=l(n),(i=b(S(n),r)).height=Math.max(i.height,r.innerHeight),i.width=Math.max(i.width,r.innerWidth),i.x=-o.scrollLeft,i.y=-o.scrollTop,i));var n,r,o,i,u,s,a,c}function Q(o,e,t){var n,r,i,u="clippingParents"===e?(r=C(n=o),A(i=0<=["absolute","fixed"].indexOf(E(n).position)&&D(n)?te(n):n)?r.filter(function(e){return A(e)&&y(e,i)}):[]):[].concat(e),s=[].concat(u,[t]),a=s[0],c=s.reduce(function(e,t){var n=G(o,t),r=m(D(t)?t:S(o));return e.top=Math.max(n.top+r.top,e.top),e.right=Math.min(n.right-r.right,e.right),e.bottom=Math.min(n.bottom-r.bottom,e.bottom),e.left=Math.max(n.left+r.left,e.left),e},G(o,a));return c.width=c.right-c.left,c.height=c.bottom-c.top,c.x=c.left,c.y=c.top,c}function le(){return{top:0,right:0,bottom:0,left:0}}function $(e){return Object.assign({},le(),{},e)}function K(n,e){return e.reduce(function(e,t){return e[t]=n,e},{})}function De(e,t){void 0===t&&(t={});var r,n=t.placement,o=void 0===n?e.placement:n,i=t.boundary,u=void 0===i?k:i,s=t.rootBoundary,a=void 0===s?P:s,c=t.elementContext,l=void 0===c?O:c,D=t.altBoundary,p=void 0!==D&&D,f=t.padding,h=void 0===f?0:f,d=$("number"!=typeof h?h:K(h,H)),g=l===O?I:O,v=e.elements.reference,m=e.rects.popper,y=e.elements[p?g:l],F=Q(A(y)?y:y.contextElement||S(e.elements.popper),u,a),E=T(v),b=V({reference:E,element:m,strategy:"absolute",placement:o}),C=Y(Object.assign({},m,{},b)),w=l===O?C:E,B={top:F.top-w.top+d.top,bottom:w.bottom-F.bottom+d.bottom,left:F.left-w.left+d.left,right:w.right-F.right+d.right},L=e.modifiersData.offset;return l===O&&L&&(r=L[o],Object.keys(B).forEach(function(e){var t=0<=[oe,re].indexOf(e)?1:-1,n=0<=[ne,re].indexOf(e)?"y":"x";B[e]+=r[n]*t})),B}function pe(e,t,n){return Math.max(e,Math.min(t,n))}function Z(e,t,n){return void 0===n&&(n={x:0,y:0}),{top:e.top-t.height-n.y,right:e.right-t.width+n.x,bottom:e.bottom-t.height+n.y,left:e.left-t.width-n.x}}function fe(t){return[ne,oe,re,ie].some(function(e){return 0<=t[e]})}var i=[{name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var t=e.state,n=e.instance,r=e.options,o=r.scroll,i=void 0===o||o,u=r.resize,s=void 0===u||u,a=w(t.elements.popper),c=[].concat(t.scrollParents.reference,t.scrollParents.popper);return i&&c.forEach(function(e){e.addEventListener("scroll",n.update,d)}),s&&a.addEventListener("resize",n.update,d),function(){i&&c.forEach(function(e){e.removeEventListener("scroll",n.update,d)}),s&&a.removeEventListener("resize",n.update,d)}},data:{}},{name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,n=e.name;t.modifiersData[n]=V({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}},{name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t,n=e.state,r=e.options,o=r.gpuAcceleration,i=void 0===o||o,u=r.adaptive,s=void 0===u||u;"production"!==F.env.NODE_ENV&&(t=E(n.elements.popper).transitionProperty||"",s&&["transform","top","right","bottom","left"].some(function(e){return 0<=t.indexOf(e)})&&console.warn(["Popper: Detected CSS transitions on at least one of the following",'CSS properties: "transform", "top", "right", "bottom", "left".',"\n\n",'Disable the "computeStyles" modifier\'s `adaptive` option to allow',"for smooth transitions, or remove these properties from the CSS","transition declaration on the popper element if only transitioning","opacity or background-color for example.","\n\n","We recommend using the popper element as a wrapper around an inner","element that can have any CSS property transitioned for animations."].join(" ")));var a={placement:se(n.placement),popper:n.elements.popper,popperRect:n.rects.popper,gpuAcceleration:i};null!=n.modifiersData.popperOffsets&&(n.styles.popper=Object.assign({},n.styles.popper,{},g(Object.assign({},a,{offsets:n.modifiersData.popperOffsets,position:n.options.strategy,adaptive:s})))),null!=n.modifiersData.arrow&&(n.styles.arrow=Object.assign({},n.styles.arrow,{},g(Object.assign({},a,{offsets:n.modifiersData.arrow,position:"absolute",adaptive:!1})))),n.attributes.popper=Object.assign({},n.attributes.popper,{"data-popper-placement":n.placement})},data:{}},{name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var o=e.state;Object.keys(o.elements).forEach(function(e){var t=o.styles[e]||{},n=o.attributes[e]||{},r=o.elements[e];D(r)&&c(r)&&(Object.assign(r.style,t),Object.keys(n).forEach(function(e){var t=n[e];!1===t?r.removeAttribute(e):r.setAttribute(e,!0===t?"":t)}))})},effect:function(e){var o=e.state,i={popper:{position:o.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(o.elements.popper.style,i.popper),o.elements.arrow&&Object.assign(o.elements.arrow.style,i.arrow),function(){Object.keys(o.elements).forEach(function(e){var t=o.elements[e],n=o.attributes[e]||{},r=Object.keys(o.styles.hasOwnProperty(e)?o.styles[e]:i[e]).reduce(function(e,t){return e[t]="",e},{});D(t)&&c(t)&&(Object.assign(t.style,r),Object.keys(n).forEach(function(e){t.removeAttribute(e)}))})}},requires:["computeStyles"]},{name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var l=e.state,t=e.options,n=e.name,r=t.offset,D=void 0===r?[0,0]:r,o=N.reduce(function(e,t){var n,r,o,i,u,s,a,c;return e[t]=(n=t,r=l.rects,o=D,i=se(n),u=0<=[ie,ne].indexOf(i)?-1:1,s="function"==typeof o?o(Object.assign({},r,{placement:n})):o,a=(a=s[0])||0,c=((c=s[1])||0)*u,0<=[ie,oe].indexOf(i)?{x:c,y:a}:{x:a,y:c}),e},{}),i=o[l.placement],u=i.x,s=i.y;null!=l.modifiersData.popperOffsets&&(l.modifiersData.popperOffsets.x+=u,l.modifiersData.popperOffsets.y+=s),l.modifiersData[n]=o}},{name:"flip",enabled:!0,phase:"main",fn:function(e){var n=e.state,t=e.options,r=e.name;if(!n.modifiersData[r]._skip){for(var o=t.mainAxis,i=void 0===o||o,u=t.altAxis,s=void 0===u||u,a=t.fallbackPlacements,c=t.padding,l=t.boundary,D=t.rootBoundary,p=t.altBoundary,f=t.flipVariations,h=void 0===f||f,d=t.allowedAutoPlacements,g=n.options.placement,v=se(g),m=a||(v===g||!h?[X(g)]:function(e){if(se(e)===j)return[];var t=X(e);return[J(e),t,J(t)]}(g)),y=[g].concat(m).reduce(function(e,t){return e.concat(se(t)===j?function(n,e){void 0===e&&(e={});var t=e.placement,r=e.boundary,o=e.rootBoundary,i=e.padding,u=e.flipVariations,s=e.allowedAutoPlacements,a=void 0===s?N:s,c=ae(t),l=(c?u?R:R.filter(function(e){return ae(e)===c}):H).filter(function(e){return 0<=a.indexOf(e)}).reduce(function(e,t){return e[t]=De(n,{placement:t,boundary:r,rootBoundary:o,padding:i})[se(t)],e},{});return Object.keys(l).sort(function(e,t){return l[e]-l[t]})}(n,{placement:t,boundary:l,rootBoundary:D,padding:c,flipVariations:h,allowedAutoPlacements:d}):t)},[]),F=n.rects.reference,E=n.rects.popper,b=new Map,C=!0,w=y[0],B=0;B<y.length;B++){var L=y[B],T=se(L),A=ae(L)===ue,S=0<=[ne,re].indexOf(T),k=S?"width":"height",P=De(n,{placement:L,boundary:l,rootBoundary:D,altBoundary:p,padding:c}),O=S?A?oe:ie:A?re:ne;F[k]>E[k]&&(O=X(O));var I=X(O),x=[];if(i&&x.push(P[T]<=0),s&&x.push(P[O]<=0,P[I]<=0),x.every(function(e){return e})){w=L,C=!1;break}b.set(L,x)}if(C)for(var M=function(n){var e=y.find(function(e){var t=b.get(e);if(t)return t.slice(0,n).every(function(e){return e})});if(e)return w=e,"break"},_=h?3:1;0<_;_--){if("break"===M(_))break}n.placement!==w&&(n.modifiersData[r]._skip=!0,n.placement=w,n.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}},{name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var t,n,r,o,i,u,s,a,c,l,D,p,f,h,d,g,v,m,y,F,E,b,C,w,B,L,T,A=e.state,S=e.options,k=e.name,P=S.mainAxis,O=void 0===P||P,I=S.altAxis,x=void 0!==I&&I,M=S.boundary,_=S.rootBoundary,j=S.altBoundary,H=S.padding,R=S.tether,N=void 0===R||R,U=S.tetherOffset,W=void 0===U?0:U,q=De(A,{boundary:M,rootBoundary:_,padding:H,altBoundary:j}),V=se(A.placement),z=ae(A.placement),X=!z,J=ce(V),Y="x"===J?"y":"x",G=A.modifiersData.popperOffsets,Q=A.rects.reference,$=A.rects.popper,K="function"==typeof W?W(Object.assign({},A.rects,{placement:A.placement})):W,Z={x:0,y:0};G&&(O&&(t="y"===J?ne:ie,n="y"===J?re:oe,r="y"===J?"height":"width",o=G[J],i=G[J]+q[t],u=G[J]-q[n],s=N?-$[r]/2:0,a=z===ue?Q[r]:$[r],c=z===ue?-$[r]:-Q[r],l=A.elements.arrow,D=N&&l?ee(l):{width:0,height:0},f=(p=A.modifiersData["arrow#persistent"]?A.modifiersData["arrow#persistent"].padding:le())[t],h=p[n],d=pe(0,Q[r],D[r]),g=X?Q[r]/2-s-d-f-K:a-d-f-K,v=X?-Q[r]/2+s+d+h+K:c+d+h+K,y=(m=A.elements.arrow&&te(A.elements.arrow))?"y"===J?m.clientTop||0:m.clientLeft||0:0,F=A.modifiersData.offset?A.modifiersData.offset[A.placement][J]:0,E=G[J]+g-F-y,b=G[J]+v-F,C=pe(N?Math.min(i,E):i,o,N?Math.max(u,b):u),G[J]=C,Z[J]=C-o),x&&(w="x"===J?ne:ie,B="x"===J?re:oe,T=pe((L=G[Y])+q[w],L,L-q[B]),G[Y]=T,Z[Y]=T-L),A.modifiersData[k]=Z)},requiresIfExists:["offset"]},{name:"arrow",enabled:!0,phase:"main",fn:function(e){var t,n,r,o,i,u,s,a,c,l,D,p,f,h,d=e.state,g=e.name,v=d.elements.arrow,m=d.modifiersData.popperOffsets,y=se(d.placement),F=ce(y),E=0<=[ie,oe].indexOf(y)?"height":"width";v&&m&&(n=d.modifiersData[g+"#persistent"].padding,r=ee(v),o="y"===F?ne:ie,i="y"===F?re:oe,u=d.rects.reference[E]+d.rects.reference[F]-m[F]-d.rects.popper[E],s=m[F]-d.rects.reference[F],c=(a=te(v))?"y"===F?a.clientHeight||0:a.clientWidth||0:0,l=u/2-s/2,D=n[o],p=c-r[E]-n[i],h=pe(D,f=c/2-r[E]/2+l,p),d.modifiersData[g]=((t={})[F]=h,t.centerOffset=h-f,t))},effect:function(e){var t=e.state,n=e.options,r=e.name,o=n.element,i=void 0===o?"[data-popper-arrow]":o,u=n.padding,s=void 0===u?0:u;null!=i&&("string"==typeof i&&!(i=t.elements.popper.querySelector(i))||("production"!==F.env.NODE_ENV&&(D(i)||console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).',"To use an SVG arrow, wrap it in an HTMLElement that will be used as","the arrow."].join(" "))),y(t.elements.popper,i)?(t.elements.arrow=i,t.modifiersData[r+"#persistent"]={padding:$("number"!=typeof s?s:K(s,H))}):"production"!==F.env.NODE_ENV&&console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper',"element."].join(" "))))},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]},{name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,n=e.name,r=t.rects.reference,o=t.rects.popper,i=t.modifiersData.preventOverflow,u=De(t,{elementContext:"reference"}),s=De(t,{altBoundary:!0}),a=Z(u,r),c=Z(s,o,i),l=fe(a),D=fe(c);t.modifiersData[n]={referenceClippingOffsets:a,popperEscapeOffsets:c,isReferenceHidden:l,hasPopperEscaped:D},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":l,"data-popper-escaped":D})}}],u=e({defaultModifiers:i});a.createPopper=u,a.defaultModifiers=i,a.detectOverflow=De,a.popperGenerator=e}).call(this,e("_process"))},{_process:29}],26:[function(e,t,n){"use strict";n.byteLength=function(e){var t=D(e),n=t[0],r=t[1];return 3*(n+r)/4-r},n.toByteArray=function(e){var t,n,r=D(e),o=r[0],i=r[1],u=new l(function(e,t){return 3*(e+t)/4-t}(o,i)),s=0,a=0<i?o-4:o;for(n=0;n<a;n+=4)t=c[e.charCodeAt(n)]<<18|c[e.charCodeAt(n+1)]<<12|c[e.charCodeAt(n+2)]<<6|c[e.charCodeAt(n+3)],u[s++]=t>>16&255,u[s++]=t>>8&255,u[s++]=255&t;2===i&&(t=c[e.charCodeAt(n)]<<2|c[e.charCodeAt(n+1)]>>4,u[s++]=255&t);1===i&&(t=c[e.charCodeAt(n)]<<10|c[e.charCodeAt(n+1)]<<4|c[e.charCodeAt(n+2)]>>2,u[s++]=t>>8&255,u[s++]=255&t);return u},n.fromByteArray=function(e){for(var t,n=e.length,r=n%3,o=[],i=0,u=n-r;i<u;i+=16383)o.push(a(e,i,u<i+16383?u:i+16383));1==r?(t=e[n-1],o.push(s[t>>2]+s[t<<4&63]+"==")):2==r&&(t=(e[n-2]<<8)+e[n-1],o.push(s[t>>10]+s[t>>4&63]+s[t<<2&63]+"="));return o.join("")};for(var s=[],c=[],l="undefined"!=typeof Uint8Array?Uint8Array:Array,r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",o=0,i=r.length;o<i;++o)s[o]=r[o],c[r.charCodeAt(o)]=o;function D(e){var t=e.length;if(0<t%4)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function a(e,t,n){for(var r,o,i=[],u=t;u<n;u+=3)r=(e[u]<<16&16711680)+(e[u+1]<<8&65280)+(255&e[u+2]),i.push(s[(o=r)>>18&63]+s[o>>12&63]+s[o>>6&63]+s[63&o]);return i.join("")}c["-".charCodeAt(0)]=62,c["_".charCodeAt(0)]=63},{}],27:[function(H,e,R){(function(D){"use strict";var r=H("base64-js"),i=H("ieee754"),e="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;R.Buffer=D,R.SlowBuffer=function(e){+e!=e&&(e=0);return D.alloc(+e)},R.INSPECT_MAX_BYTES=50;var n=2147483647;function u(e){if(n<e)throw new RangeError('The value "'+e+'" is invalid for option "size"');var t=new Uint8Array(e);return Object.setPrototypeOf(t,D.prototype),t}function D(e,t,n){if("number"!=typeof e)return o(e,t,n);if("string"==typeof t)throw new TypeError('The "string" argument must be of type string. Received type number');return a(e)}function o(e,t,n){if("string"==typeof e)return function(e,t){"string"==typeof t&&""!==t||(t="utf8");if(!D.isEncoding(t))throw new TypeError("Unknown encoding: "+t);var n=0|f(e,t),r=u(n),o=r.write(e,t);o!==n&&(r=r.slice(0,o));return r}(e,t);if(ArrayBuffer.isView(e))return c(e);if(null==e)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(M(e,ArrayBuffer)||e&&M(e.buffer,ArrayBuffer))return l(e,t,n);if("undefined"!=typeof SharedArrayBuffer&&(M(e,SharedArrayBuffer)||e&&M(e.buffer,SharedArrayBuffer)))return l(e,t,n);if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type number');var r=e.valueOf&&e.valueOf();if(null!=r&&r!==e)return D.from(r,t,n);var o=function(e){if(D.isBuffer(e)){var t=0|p(e.length),n=u(t);return 0===n.length?n:(e.copy(n,0,0,t),n)}if(void 0!==e.length)return"number"!=typeof e.length||_(e.length)?u(0):c(e);if("Buffer"===e.type&&Array.isArray(e.data))return c(e.data)}(e);if(o)return o;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return D.from(e[Symbol.toPrimitive]("string"),t,n);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function s(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function a(e){return s(e),u(e<0?0:0|p(e))}function c(e){for(var t=e.length<0?0:0|p(e.length),n=u(t),r=0;r<t;r+=1)n[r]=255&e[r];return n}function l(e,t,n){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(n||0))throw new RangeError('"length" is outside of buffer bounds');var r=void 0===t&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,t):new Uint8Array(e,t,n);return Object.setPrototypeOf(r,D.prototype),r}function p(e){if(n<=e)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+n.toString(16)+" bytes");return 0|e}function f(e,t){if(D.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||M(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);var n=e.length,r=2<arguments.length&&!0===arguments[2];if(!r&&0===n)return 0;for(var o=!1;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":return O(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return I(e).length;default:if(o)return r?-1:O(e).length;t=(""+t).toLowerCase(),o=!0}}function h(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function d(e,t,n,r,o){if(0===e.length)return-1;if("string"==typeof n?(r=n,n=0):2147483647<n?n=2147483647:n<-2147483648&&(n=-2147483648),_(n=+n)&&(n=o?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(o)return-1;n=e.length-1}else if(n<0){if(!o)return-1;n=0}if("string"==typeof t&&(t=D.from(t,r)),D.isBuffer(t))return 0===t.length?-1:g(e,t,n,r,o);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):g(e,[t],n,r,o);throw new TypeError("val must be string, number or Buffer")}function g(e,t,n,r,o){var i=1,u=e.length,s=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;u/=i=2,s/=2,n/=2}function a(e,t){return 1===i?e[t]:e.readUInt16BE(t*i)}if(o)for(var c=-1,l=n;l<u;l++)if(a(e,l)===a(t,-1===c?0:l-c)){if(-1===c&&(c=l),l-c+1===s)return c*i}else-1!==c&&(l-=l-c),c=-1;else for(u<n+s&&(n=u-s),l=n;0<=l;l--){for(var D=!0,p=0;p<s;p++)if(a(e,l+p)!==a(t,p)){D=!1;break}if(D)return l}return-1}function v(e,t,n,r){n=Number(n)||0;var o=e.length-n;(!r||o<(r=Number(r)))&&(r=o);var i=t.length;i/2<r&&(r=i/2);for(var u=0;u<r;++u){var s=parseInt(t.substr(2*u,2),16);if(_(s))return u;e[n+u]=s}return u}function m(e,t,n,r){return x(function(e){for(var t=[],n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,r)}function y(e,t,n,r){return x(function(e,t){for(var n,r,o,i=[],u=0;u<e.length&&!((t-=2)<0);++u)n=e.charCodeAt(u),r=n>>8,o=n%256,i.push(o),i.push(r);return i}(t,e.length-n),e,n,r)}function F(e,t,n){return 0===t&&n===e.length?r.fromByteArray(e):r.fromByteArray(e.slice(t,n))}function E(e,t,n){n=Math.min(e.length,n);for(var r=[],o=t;o<n;){var i,u,s,a,c=e[o],l=null,D=239<c?4:223<c?3:191<c?2:1;if(o+D<=n)switch(D){case 1:c<128&&(l=c);break;case 2:128==(192&(i=e[o+1]))&&127<(a=(31&c)<<6|63&i)&&(l=a);break;case 3:i=e[o+1],u=e[o+2],128==(192&i)&&128==(192&u)&&2047<(a=(15&c)<<12|(63&i)<<6|63&u)&&(a<55296||57343<a)&&(l=a);break;case 4:i=e[o+1],u=e[o+2],s=e[o+3],128==(192&i)&&128==(192&u)&&128==(192&s)&&65535<(a=(15&c)<<18|(63&i)<<12|(63&u)<<6|63&s)&&a<1114112&&(l=a)}null===l?(l=65533,D=1):65535<l&&(l-=65536,r.push(l>>>10&1023|55296),l=56320|1023&l),r.push(l),o+=D}return function(e){var t=e.length;if(t<=b)return String.fromCharCode.apply(String,e);var n="",r=0;for(;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=b));return n}(r)}R.kMaxLength=n,(D.TYPED_ARRAY_SUPPORT=function(){try{var e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}())||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(D.prototype,"parent",{enumerable:!0,get:function(){if(D.isBuffer(this))return this.buffer}}),Object.defineProperty(D.prototype,"offset",{enumerable:!0,get:function(){if(D.isBuffer(this))return this.byteOffset}}),D.poolSize=8192,D.from=o,Object.setPrototypeOf(D.prototype,Uint8Array.prototype),Object.setPrototypeOf(D,Uint8Array),D.alloc=function(e,t,n){return o=t,i=n,s(r=e),r<=0||void 0===o?u(r):"string"==typeof i?u(r).fill(o,i):u(r).fill(o);var r,o,i},D.allocUnsafe=a,D.allocUnsafeSlow=a,D.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==D.prototype},D.compare=function(e,t){if(M(e,Uint8Array)&&(e=D.from(e,e.offset,e.byteLength)),M(t,Uint8Array)&&(t=D.from(t,t.offset,t.byteLength)),!D.isBuffer(e)||!D.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;for(var n=e.length,r=t.length,o=0,i=Math.min(n,r);o<i;++o)if(e[o]!==t[o]){n=e[o],r=t[o];break}return n<r?-1:r<n?1:0},D.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},D.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return D.alloc(0);if(void 0===t)for(o=t=0;o<e.length;++o)t+=e[o].length;for(var n=D.allocUnsafe(t),r=0,o=0;o<e.length;++o){var i=e[o];if(M(i,Uint8Array)&&(i=D.from(i)),!D.isBuffer(i))throw new TypeError('"list" argument must be an Array of Buffers');i.copy(n,r),r+=i.length}return n},D.byteLength=f,D.prototype._isBuffer=!0,D.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)h(this,t,t+1);return this},D.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)h(this,t,t+3),h(this,t+1,t+2);return this},D.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)h(this,t,t+7),h(this,t+1,t+6),h(this,t+2,t+5),h(this,t+3,t+4);return this},D.prototype.toLocaleString=D.prototype.toString=function(){var e=this.length;return 0===e?"":0===arguments.length?E(this,0,e):function(e,t,n){var r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e=e||"utf8";;)switch(e){case"hex":return B(this,t,n);case"utf8":case"utf-8":return E(this,t,n);case"ascii":return C(this,t,n);case"latin1":case"binary":return w(this,t,n);case"base64":return F(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return L(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}.apply(this,arguments)},D.prototype.equals=function(e){if(!D.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===D.compare(this,e)},D.prototype.inspect=function(){var e="",t=R.INSPECT_MAX_BYTES,e=this.toString("hex",0,t).replace(/(.{2})/g,"$1 ").trim();return this.length>t&&(e+=" ... "),"<Buffer "+e+">"},e&&(D.prototype[e]=D.prototype.inspect),D.prototype.compare=function(e,t,n,r,o){if(M(e,Uint8Array)&&(e=D.from(e,e.offset,e.byteLength)),!D.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===r&&(r=0),void 0===o&&(o=this.length),t<0||n>e.length||r<0||o>this.length)throw new RangeError("out of range index");if(o<=r&&n<=t)return 0;if(o<=r)return-1;if(n<=t)return 1;if(this===e)return 0;for(var i=(o>>>=0)-(r>>>=0),u=(n>>>=0)-(t>>>=0),s=Math.min(i,u),a=this.slice(r,o),c=e.slice(t,n),l=0;l<s;++l)if(a[l]!==c[l]){i=a[l],u=c[l];break}return i<u?-1:u<i?1:0},D.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},D.prototype.indexOf=function(e,t,n){return d(this,e,t,n,!0)},D.prototype.lastIndexOf=function(e,t,n){return d(this,e,t,n,!1)},D.prototype.write=function(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(n)?(n>>>=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var o=this.length-t;if((void 0===n||o<n)&&(n=o),0<e.length&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r=r||"utf8";for(var i,u,s,a,c,l,D=!1;;)switch(r){case"hex":return v(this,e,t,n);case"utf8":case"utf-8":return c=t,l=n,x(O(e,(a=this).length-c),a,c,l);case"ascii":return m(this,e,t,n);case"latin1":case"binary":return m(this,e,t,n);case"base64":return i=this,u=t,s=n,x(I(e),i,u,s);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return y(this,e,t,n);default:if(D)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),D=!0}},D.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var b=4096;function C(e,t,n){var r="";n=Math.min(e.length,n);for(var o=t;o<n;++o)r+=String.fromCharCode(127&e[o]);return r}function w(e,t,n){var r="";n=Math.min(e.length,n);for(var o=t;o<n;++o)r+=String.fromCharCode(e[o]);return r}function B(e,t,n){var r=e.length;(!t||t<0)&&(t=0),(!n||n<0||r<n)&&(n=r);for(var o="",i=t;i<n;++i)o+=j[e[i]];return o}function L(e,t,n){for(var r=e.slice(t,n),o="",i=0;i<r.length;i+=2)o+=String.fromCharCode(r[i]+256*r[i+1]);return o}function T(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(n<e+t)throw new RangeError("Trying to access beyond buffer length")}function A(e,t,n,r,o,i){if(!D.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(o<t||t<i)throw new RangeError('"value" argument is out of bounds');if(n+r>e.length)throw new RangeError("Index out of range")}function S(e,t,n,r){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function k(e,t,n,r,o){return t=+t,n>>>=0,o||S(e,0,n,4),i.write(e,t,n,r,23,4),n+4}function P(e,t,n,r,o){return t=+t,n>>>=0,o||S(e,0,n,8),i.write(e,t,n,r,52,8),n+8}D.prototype.slice=function(e,t){var n=this.length;(e=~~e)<0?(e+=n)<0&&(e=0):n<e&&(e=n),(t=void 0===t?n:~~t)<0?(t+=n)<0&&(t=0):n<t&&(t=n),t<e&&(t=e);var r=this.subarray(e,t);return Object.setPrototypeOf(r,D.prototype),r},D.prototype.readUIntLE=function(e,t,n){e>>>=0,t>>>=0,n||T(e,t,this.length);for(var r=this[e],o=1,i=0;++i<t&&(o*=256);)r+=this[e+i]*o;return r},D.prototype.readUIntBE=function(e,t,n){e>>>=0,t>>>=0,n||T(e,t,this.length);for(var r=this[e+--t],o=1;0<t&&(o*=256);)r+=this[e+--t]*o;return r},D.prototype.readUInt8=function(e,t){return e>>>=0,t||T(e,1,this.length),this[e]},D.prototype.readUInt16LE=function(e,t){return e>>>=0,t||T(e,2,this.length),this[e]|this[e+1]<<8},D.prototype.readUInt16BE=function(e,t){return e>>>=0,t||T(e,2,this.length),this[e]<<8|this[e+1]},D.prototype.readUInt32LE=function(e,t){return e>>>=0,t||T(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},D.prototype.readUInt32BE=function(e,t){return e>>>=0,t||T(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},D.prototype.readIntLE=function(e,t,n){e>>>=0,t>>>=0,n||T(e,t,this.length);for(var r=this[e],o=1,i=0;++i<t&&(o*=256);)r+=this[e+i]*o;return(o*=128)<=r&&(r-=Math.pow(2,8*t)),r},D.prototype.readIntBE=function(e,t,n){e>>>=0,t>>>=0,n||T(e,t,this.length);for(var r=t,o=1,i=this[e+--r];0<r&&(o*=256);)i+=this[e+--r]*o;return(o*=128)<=i&&(i-=Math.pow(2,8*t)),i},D.prototype.readInt8=function(e,t){return e>>>=0,t||T(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},D.prototype.readInt16LE=function(e,t){e>>>=0,t||T(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},D.prototype.readInt16BE=function(e,t){e>>>=0,t||T(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},D.prototype.readInt32LE=function(e,t){return e>>>=0,t||T(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},D.prototype.readInt32BE=function(e,t){return e>>>=0,t||T(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},D.prototype.readFloatLE=function(e,t){return e>>>=0,t||T(e,4,this.length),i.read(this,e,!0,23,4)},D.prototype.readFloatBE=function(e,t){return e>>>=0,t||T(e,4,this.length),i.read(this,e,!1,23,4)},D.prototype.readDoubleLE=function(e,t){return e>>>=0,t||T(e,8,this.length),i.read(this,e,!0,52,8)},D.prototype.readDoubleBE=function(e,t){return e>>>=0,t||T(e,8,this.length),i.read(this,e,!1,52,8)},D.prototype.writeUIntLE=function(e,t,n,r){e=+e,t>>>=0,n>>>=0,r||A(this,e,t,n,Math.pow(2,8*n)-1,0);var o=1,i=0;for(this[t]=255&e;++i<n&&(o*=256);)this[t+i]=e/o&255;return t+n},D.prototype.writeUIntBE=function(e,t,n,r){e=+e,t>>>=0,n>>>=0,r||A(this,e,t,n,Math.pow(2,8*n)-1,0);var o=n-1,i=1;for(this[t+o]=255&e;0<=--o&&(i*=256);)this[t+o]=e/i&255;return t+n},D.prototype.writeUInt8=function(e,t,n){return e=+e,t>>>=0,n||A(this,e,t,1,255,0),this[t]=255&e,t+1},D.prototype.writeUInt16LE=function(e,t,n){return e=+e,t>>>=0,n||A(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},D.prototype.writeUInt16BE=function(e,t,n){return e=+e,t>>>=0,n||A(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},D.prototype.writeUInt32LE=function(e,t,n){return e=+e,t>>>=0,n||A(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},D.prototype.writeUInt32BE=function(e,t,n){return e=+e,t>>>=0,n||A(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},D.prototype.writeIntLE=function(e,t,n,r){var o;e=+e,t>>>=0,r||A(this,e,t,n,(o=Math.pow(2,8*n-1))-1,-o);var i=0,u=1,s=0;for(this[t]=255&e;++i<n&&(u*=256);)e<0&&0===s&&0!==this[t+i-1]&&(s=1),this[t+i]=(e/u>>0)-s&255;return t+n},D.prototype.writeIntBE=function(e,t,n,r){var o;e=+e,t>>>=0,r||A(this,e,t,n,(o=Math.pow(2,8*n-1))-1,-o);var i=n-1,u=1,s=0;for(this[t+i]=255&e;0<=--i&&(u*=256);)e<0&&0===s&&0!==this[t+i+1]&&(s=1),this[t+i]=(e/u>>0)-s&255;return t+n},D.prototype.writeInt8=function(e,t,n){return e=+e,t>>>=0,n||A(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},D.prototype.writeInt16LE=function(e,t,n){return e=+e,t>>>=0,n||A(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},D.prototype.writeInt16BE=function(e,t,n){return e=+e,t>>>=0,n||A(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},D.prototype.writeInt32LE=function(e,t,n){return e=+e,t>>>=0,n||A(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},D.prototype.writeInt32BE=function(e,t,n){return e=+e,t>>>=0,n||A(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},D.prototype.writeFloatLE=function(e,t,n){return k(this,e,t,!0,n)},D.prototype.writeFloatBE=function(e,t,n){return k(this,e,t,!1,n)},D.prototype.writeDoubleLE=function(e,t,n){return P(this,e,t,!0,n)},D.prototype.writeDoubleBE=function(e,t,n){return P(this,e,t,!1,n)},D.prototype.copy=function(e,t,n,r){if(!D.isBuffer(e))throw new TypeError("argument should be a Buffer");if(n=n||0,r||0===r||(r=this.length),t>=e.length&&(t=e.length),t=t||0,0<r&&r<n&&(r=n),r===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);var o=r-n;if(this===e&&"function"==typeof Uint8Array.prototype.copyWithin)this.copyWithin(t,n,r);else if(this===e&&n<t&&t<r)for(var i=o-1;0<=i;--i)e[i+t]=this[i+n];else Uint8Array.prototype.set.call(e,this.subarray(n,r),t);return o},D.prototype.fill=function(e,t,n,r){if("string"==typeof e){if("string"==typeof t?(r=t,t=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!D.isEncoding(r))throw new TypeError("Unknown encoding: "+r);var o;1===e.length&&(o=e.charCodeAt(0),("utf8"===r&&o<128||"latin1"===r)&&(e=o))}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;var i;if(t>>>=0,n=void 0===n?this.length:n>>>0,"number"==typeof(e=e||0))for(i=t;i<n;++i)this[i]=e;else{var u=D.isBuffer(e)?e:D.from(e,r),s=u.length;if(0===s)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(i=0;i<n-t;++i)this[i+t]=u[i%s]}return this};var t=/[^+/0-9A-Za-z-_]/g;function O(e,t){var n;t=t||1/0;for(var r=e.length,o=null,i=[],u=0;u<r;++u){if(55295<(n=e.charCodeAt(u))&&n<57344){if(!o){if(56319<n){-1<(t-=3)&&i.push(239,191,189);continue}if(u+1===r){-1<(t-=3)&&i.push(239,191,189);continue}o=n;continue}if(n<56320){-1<(t-=3)&&i.push(239,191,189),o=n;continue}n=65536+(o-55296<<10|n-56320)}else o&&-1<(t-=3)&&i.push(239,191,189);if(o=null,n<128){if(--t<0)break;i.push(n)}else if(n<2048){if((t-=2)<0)break;i.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;i.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;i.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return i}function I(e){return r.toByteArray(function(e){if((e=(e=e.split("=")[0]).trim().replace(t,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function x(e,t,n,r){for(var o=0;o<r&&!(o+n>=t.length||o>=e.length);++o)t[o+n]=e[o];return o}function M(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function _(e){return e!=e}var j=function(){for(var e="0123456789abcdef",t=new Array(256),n=0;n<16;++n)for(var r=16*n,o=0;o<16;++o)t[r+o]=e[n]+e[o];return t}()}).call(this,H("buffer").Buffer)},{"base64-js":26,buffer:27,ieee754:28}],28:[function(e,t,n){n.read=function(e,t,n,r,o){var i,u,s=8*o-r-1,a=(1<<s)-1,c=a>>1,l=-7,D=n?o-1:0,p=n?-1:1,f=e[t+D];for(D+=p,i=f&(1<<-l)-1,f>>=-l,l+=s;0<l;i=256*i+e[t+D],D+=p,l-=8);for(u=i&(1<<-l)-1,i>>=-l,l+=r;0<l;u=256*u+e[t+D],D+=p,l-=8);if(0===i)i=1-c;else{if(i===a)return u?NaN:1/0*(f?-1:1);u+=Math.pow(2,r),i-=c}return(f?-1:1)*u*Math.pow(2,i-r)},n.write=function(e,t,n,r,o,i){var u,s,a,c=8*i-o-1,l=(1<<c)-1,D=l>>1,p=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,f=r?0:i-1,h=r?1:-1,d=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(s=isNaN(t)?1:0,u=l):(u=Math.floor(Math.log(t)/Math.LN2),t*(a=Math.pow(2,-u))<1&&(u--,a*=2),2<=(t+=1<=u+D?p/a:p*Math.pow(2,1-D))*a&&(u++,a/=2),l<=u+D?(s=0,u=l):1<=u+D?(s=(t*a-1)*Math.pow(2,o),u+=D):(s=t*Math.pow(2,D-1)*Math.pow(2,o),u=0));8<=o;e[n+f]=255&s,f+=h,s/=256,o-=8);for(u=u<<o|s,c+=o;0<c;e[n+f]=255&u,f+=h,u/=256,c-=8);e[n+f-h]|=128*d}},{}],29:[function(e,t,n){var r,o,i=t.exports={};function u(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(t){if(r===setTimeout)return setTimeout(t,0);if((r===u||!r)&&setTimeout)return r=setTimeout,setTimeout(t,0);try{return r(t,0)}catch(e){try{return r.call(null,t,0)}catch(e){return r.call(this,t,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:u}catch(e){r=u}try{o="function"==typeof clearTimeout?clearTimeout:s}catch(e){o=s}}();var c,l=[],D=!1,p=-1;function f(){D&&c&&(D=!1,c.length?l=c.concat(l):p=-1,l.length&&h())}function h(){if(!D){var e=a(f);D=!0;for(var t=l.length;t;){for(c=l,l=[];++p<t;)c&&c[p].run();p=-1,t=l.length}c=null,D=!1,function(t){if(o===clearTimeout)return clearTimeout(t);if((o===s||!o)&&clearTimeout)return o=clearTimeout,clearTimeout(t);try{o(t)}catch(e){try{return o.call(null,t)}catch(e){return o.call(this,t)}}}(e)}}function d(e,t){this.fun=e,this.array=t}function g(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(1<arguments.length)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];l.push(new d(e,t)),1!==l.length||D||a(h)},d.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=g,i.addListener=g,i.once=g,i.off=g,i.removeListener=g,i.removeAllListeners=g,i.emit=g,i.prependListener=g,i.prependOnceListener=g,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},{}],30:[function(I,e,x){(function(ee){"use strict";Object.defineProperty(x,"__esModule",{value:!0});var te=I("@popperjs/core"),ne={passive:!0},re="tippy-iOS",r="tippy-content",s="tippy-backdrop",o="tippy-arrow",i="tippy-svg-arrow";function oe(e,t,n){if(Array.isArray(e)){var r=e[t];return null==r?Array.isArray(n)?n[t]:n:r}return e}function t(e,t){var n={}.toString.call(e);return 0===n.indexOf("[object")&&-1<n.indexOf(t+"]")}function ie(e,t){return"function"==typeof e?e.apply(void 0,t):e}function ue(t,n){return 0===n?t:function(e){clearTimeout(r),r=setTimeout(function(){t(e)},n)};var r}function D(e,t){var n=Object.assign({},e);return t.forEach(function(e){delete n[e]}),n}function se(e){return[].concat(e)}function ae(e,t){-1===e.indexOf(t)&&e.push(t)}function ce(e){return e.split("-")[0]}function le(e){return[].slice.call(e)}function De(){return document.createElement("div")}function p(e){return t(e,"Element")}function pe(e){return t(e,"MouseEvent")}function u(e){return e&&e._tippy&&e._tippy.reference===e}function f(e){return p(e)?[e]:t(e,"NodeList")?le(e):Array.isArray(e)?e:le(document.querySelectorAll(e))}function fe(e,t){e.forEach(function(e){e&&(e.style.transitionDuration=t+"ms")})}function he(e,t){e.forEach(function(e){e&&e.setAttribute("data-state",t)})}function de(e){var t=se(e)[0];return t&&t.ownerDocument||document}function ge(t,e,n){var r=e+"EventListener";["transitionend","webkitTransitionEnd"].forEach(function(e){t[r](e,n)})}var ve={isTouch:!1},n=0;function h(){ve.isTouch||(ve.isTouch=!0,window.performance&&document.addEventListener("mousemove",a))}function a(){var e=performance.now();e-n<20&&(ve.isTouch=!1,document.removeEventListener("mousemove",a)),n=e}function d(){var e,t=document.activeElement;u(t)&&(e=t._tippy,t.blur&&!e.state.isVisible&&t.blur())}var e="undefined"!=typeof window&&"undefined"!=typeof document,c=e?navigator.userAgent:"",me=/MSIE |Trident\//.test(c),ye=e&&/iPhone|iPad|iPod/.test(navigator.platform);function Fe(e){return[e+"() was called on a"+("destroy"===e?"n already-":" ")+"destroyed instance. This is a no-op but","indicates a potential memory leak."].join(" ")}function l(e){return e.replace(/[ \t]{2,}/g," ").replace(/^[ \t]*/gm,"").trim()}function g(e){return[l("\n  %ctippy.js\n\n  %c"+l(e)+"\n\n  %c👷‍ This is a development-only message. It will be removed in production.\n  "),"color: #00C584; font-size: 1.3em; font-weight: bold;","line-height: 1.5","color: #a6a095;"]}function Ee(e,t){var n;e&&(n=console).warn.apply(n,g(t))}function be(e,t){var n;e&&(n=console).error.apply(n,g(t))}var v={animateFill:!1,followCursor:!1,inlinePositioning:!1,sticky:!1},Ce=Object.assign({appendTo:function(){return document.body},aria:{content:"auto",expanded:"auto"},content:"",delay:0,duration:[300,250],getReferenceClientRect:null,hideOnClick:!0,ignoreAttributes:!1,interactive:!1,interactiveBorder:2,interactiveDebounce:0,moveTransition:"",offset:[0,10],onAfterUpdate:function(){},onBeforeUpdate:function(){},onCreate:function(){},onDestroy:function(){},onHidden:function(){},onHide:function(){},onMount:function(){},onShow:function(){},onShown:function(){},onTrigger:function(){},onUntrigger:function(){},onClickOutside:function(){},placement:"top",plugins:[],popperOptions:{},render:null,showOnCreate:!1,touch:!0,trigger:"mouseenter focus",triggerTarget:null},v,{},{allowHTML:!1,animation:"fade",arrow:!0,content:"",inertia:!1,maxWidth:350,role:"tooltip",theme:"",zIndex:9999}),m=Object.keys(Ce);function we(o){var e=(o.plugins||[]).reduce(function(e,t){var n=t.name,r=t.defaultValue;return n&&(e[n]=void 0!==o[n]?o[n]:r),e},{});return Object.assign({},o,{},e)}function Be(e,t){var o,n,r=Object.assign({},t,{content:ie(t.content,[e])},t.ignoreAttributes?{}:(o=e,((n=t.plugins)?Object.keys(we(Object.assign({},Ce,{plugins:n}))):m).reduce(function(t,n){var r=(o.getAttribute("data-tippy-"+n)||"").trim();if(!r)return t;if("content"===n)t[n]=r;else try{t[n]=JSON.parse(r)}catch(e){t[n]=r}return t},{})));return r.aria=Object.assign({},Ce.aria,{},r.aria),r.aria={expanded:"auto"===r.aria.expanded?t.interactive:r.aria.expanded,content:"auto"===r.aria.content?t.interactive?null:"describedby":r.aria.content},r}function y(e,o){void 0===e&&(e={}),void 0===o&&(o=[]),Object.keys(e).forEach(function(t){var e,n,r=D(Ce,Object.keys(v));Ee((e=r,n=t,!{}.hasOwnProperty.call(e,n))&&0===o.filter(function(e){return e.name===t}).length,["`"+t+"`","is not a valid prop. You may have spelled it incorrectly, or if it's","a plugin, forgot to pass it in an array as props.plugins.","\n\n","All props: https://atomiks.github.io/tippyjs/v6/all-props/\n","Plugins: https://atomiks.github.io/tippyjs/v6/plugins/"].join(" "))})}var F=function(){return"innerHTML"};function E(e,t){e[F()]=t}function b(e){var t=De();return!0===e?t.className=o:(t.className=i,p(e)?t.appendChild(e):E(t,e)),t}function C(e,t){p(t.content)?(E(e,""),e.appendChild(t.content)):"function"!=typeof t.content&&(t.allowHTML?E(e,t.content):e.textContent=t.content)}function Le(e){var t=e.firstElementChild,n=le(t.children);return{box:t,content:n.find(function(e){return e.classList.contains(r)}),arrow:n.find(function(e){return e.classList.contains(o)||e.classList.contains(i)}),backdrop:n.find(function(e){return e.classList.contains(s)})}}function w(u){var s=De(),e=De();e.className="tippy-box",e.setAttribute("data-state","hidden"),e.setAttribute("tabindex","-1");var t=De();function n(e,t){var n=Le(s),r=n.box,o=n.content,i=n.arrow;t.theme?r.setAttribute("data-theme",t.theme):r.removeAttribute("data-theme"),"string"==typeof t.animation?r.setAttribute("data-animation",t.animation):r.removeAttribute("data-animation"),t.inertia?r.setAttribute("data-inertia",""):r.removeAttribute("data-inertia"),r.style.maxWidth="number"==typeof t.maxWidth?t.maxWidth+"px":t.maxWidth,t.role?r.setAttribute("role",t.role):r.removeAttribute("role"),e.content!==t.content&&C(o,u.props),t.arrow?i?e.arrow!==t.arrow&&(r.removeChild(i),r.appendChild(b(t.arrow))):r.appendChild(b(t.arrow)):i&&r.removeChild(i)}return t.className=r,t.setAttribute("data-state","hidden"),C(t,u.props),s.appendChild(e),e.appendChild(t),n(u.props,u.props),{popper:s,onUpdate:n}}w.$$tippy=!0;var Te=1,Ae=[],Se=[];function B(D,e){var i,n,r,u,o,p,s,a,c=Be(D,Object.assign({},Ce,{},we(e))),l=!1,f=!1,h=!1,d=[],g=ue(z,c.interactiveDebounce),v=de(c.triggerTarget||D),t=Te++,m=(a=c.plugins).filter(function(e,t){return a.indexOf(e)===t}),y={id:t,reference:D,popper:De(),popperInstance:null,props:c,state:{isEnabled:!0,isVisible:!1,isDestroyed:!1,isMounted:!1,isShown:!1},plugins:m,clearDelayTimeouts:function(){clearTimeout(i),clearTimeout(n),cancelAnimationFrame(r)},setProps:function(e){"production"!==ee.env.NODE_ENV&&Ee(y.state.isDestroyed,Fe("setProps"));if(y.state.isDestroyed)return;I("onBeforeUpdate",[y,e]),q();var t=y.props,n=Be(D,Object.assign({},y.props,{},e,{ignoreAttributes:!0}));y.props=n,W(),t.interactiveDebounce!==n.interactiveDebounce&&(_(),g=ue(z,n.interactiveDebounce));t.triggerTarget&&!n.triggerTarget?se(t.triggerTarget).forEach(function(e){e.removeAttribute("aria-expanded")}):n.triggerTarget&&D.removeAttribute("aria-expanded");M(),P(),b&&b(t,n);y.popperInstance&&(G(),$().forEach(function(e){requestAnimationFrame(e._tippy.popperInstance.forceUpdate)}));I("onAfterUpdate",[y,e])},setContent:function(e){y.setProps({content:e})},show:function(){"production"!==ee.env.NODE_ENV&&Ee(y.state.isDestroyed,Fe("show"));var e=y.state.isVisible,t=y.state.isDestroyed,n=!y.state.isEnabled,r=ve.isTouch&&!y.props.touch,o=oe(y.props.duration,0,Ce.duration);if(e||t||n||r)return;if(A().hasAttribute("disabled"))return;if(I("onShow",[y],!1),!1===y.props.onShow(y))return;y.state.isVisible=!0,T()&&(E.style.visibility="visible");P(),H(),y.state.isMounted||(E.style.transition="none");{var i,u,s;T()&&(i=S(),u=i.box,s=i.content,fe([u,s],0))}p=function(){var e,t,n;y.state.isVisible&&!h&&(h=!0,E.offsetHeight,E.style.transition=y.props.moveTransition,T()&&y.props.animation&&(fe([t=(e=S()).box,n=e.content],o),he([t,n],"visible")),x(),M(),ae(Se,y),O(!0),y.state.isMounted=!0,I("onMount",[y]),y.props.animation&&T()&&N(o,function(){y.state.isShown=!0,I("onShown",[y])}))},function(){var e,t=y.props.appendTo,n=A();e=y.props.interactive&&t===Ce.appendTo||"parent"===t?n.parentNode:ie(t,[n]);e.contains(E)||e.appendChild(E);G(),"production"!==ee.env.NODE_ENV&&Ee(y.props.interactive&&t===Ce.appendTo&&n.nextElementSibling!==E,["Interactive tippy element may not be accessible via keyboard","navigation because it is not directly after the reference element","in the DOM source order.","\n\n","Using a wrapper <div> or <span> tag around the reference element","solves this by creating a new parentNode context.","\n\n","Specifying `appendTo: document.body` silences this warning, but it","assumes you are using a focus management solution to handle","keyboard navigation.","\n\n","See: https://atomiks.github.io/tippyjs/v6/accessibility/#interactivity"].join(" "))}()},hide:function(){"production"!==ee.env.NODE_ENV&&Ee(y.state.isDestroyed,Fe("hide"));var e=!y.state.isVisible,t=y.state.isDestroyed,n=!y.state.isEnabled,r=oe(y.props.duration,1,Ce.duration);if(e||t||n)return;if(I("onHide",[y],!1),!1===y.props.onHide(y))return;y.state.isVisible=!1,y.state.isShown=!1,h=!1,T()&&(E.style.visibility="hidden");{var o,i,u;_(),R(),P(),T()&&(o=S(),i=o.box,u=o.content,y.props.animation&&(fe([i,u],r),he([i,u],"hidden")))}x(),M(),y.props.animation?T()&&function(e,t){N(e,function(){!y.state.isVisible&&E.parentNode&&E.parentNode.contains(E)&&t()})}(r,y.unmount):y.unmount()},enable:function(){y.state.isEnabled=!0},disable:function(){y.hide(),y.state.isEnabled=!1},unmount:function(){y.state.isVisible&&y.hide();if(!y.state.isMounted)return;Q(),$().forEach(function(e){e._tippy.unmount()}),E.parentNode&&E.parentNode.removeChild(E);0===(Se=Se.filter(function(e){return e!==y})).length&&O(!1);y.state.isMounted=!1,I("onHidden",[y])},destroy:function(){"production"!==ee.env.NODE_ENV&&Ee(y.state.isDestroyed,Fe("destroy"));if(y.state.isDestroyed)return;y.clearDelayTimeouts(),y.unmount(),q(),delete D._tippy,y.state.isDestroyed=!0,I("onDestroy",[y])}};if(!c.render)return"production"!==ee.env.NODE_ENV&&be(!0,"render() function has not been supplied."),y;var F=c.render(y),E=F.popper,b=F.onUpdate;E.setAttribute("data-tippy-root",""),E.id="tippy-"+y.id,y.popper=E,D._tippy=y,E._tippy=y;var C=m.map(function(e){return e.fn(y)}),w=D.hasAttribute("aria-expanded");return W(),M(),P(),I("onCreate",[y]),c.showOnCreate&&K(),E.addEventListener("mouseenter",function(){y.props.interactive&&y.state.isVisible&&y.clearDelayTimeouts()}),E.addEventListener("mouseleave",function(e){y.props.interactive&&0<=y.props.trigger.indexOf("mouseenter")&&(v.addEventListener("mousemove",g),g(e))}),y;function B(){var e=y.props.touch;return Array.isArray(e)?e:[e,0]}function L(){return"hold"===B()[0]}function T(){var e;return null!=(e=y.props.render)&&e.$$tippy}function A(){return s||D}function S(){return Le(E)}function k(e){return y.state.isMounted&&!y.state.isVisible||ve.isTouch||u&&"focus"===u.type?0:oe(y.props.delay,e?0:1,Ce.delay)}function P(){E.style.pointerEvents=y.props.interactive&&y.state.isVisible?"":"none",E.style.zIndex=""+y.props.zIndex}function O(e){var t=e&&ye&&ve.isTouch;v.body.classList[t?"add":"remove"](re)}function I(t,n,e){var r;void 0===e&&(e=!0),C.forEach(function(e){e[t]&&e[t].apply(void 0,n)}),e&&(r=y.props)[t].apply(r,n)}function x(){var r,o,e=y.props.aria;e.content&&(r="aria-"+e.content,o=E.id,se(y.props.triggerTarget||D).forEach(function(e){var t,n=e.getAttribute(r);y.state.isVisible?e.setAttribute(r,n?n+" "+o:o):(t=n&&n.replace(o,"").trim())?e.setAttribute(r,t):e.removeAttribute(r)}))}function M(){!w&&y.props.aria.expanded&&se(y.props.triggerTarget||D).forEach(function(e){y.props.interactive?e.setAttribute("aria-expanded",y.state.isVisible&&e===A()?"true":"false"):e.removeAttribute("aria-expanded")})}function _(){v.body.removeEventListener("mouseleave",Z),v.removeEventListener("mousemove",g),Ae=Ae.filter(function(e){return e!==g})}function j(e){if(!y.props.interactive||!E.contains(e.target)){if(A().contains(e.target)){if(ve.isTouch)return;if(y.state.isVisible&&0<=y.props.trigger.indexOf("click"))return}else y.props.onClickOutside(y,e);!0===y.props.hideOnClick&&(l=!1,y.clearDelayTimeouts(),y.hide(),f=!0,setTimeout(function(){f=!1}),y.state.isMounted||R())}}function H(){v.addEventListener("mousedown",j,!0)}function R(){v.removeEventListener("mousedown",j,!0)}function N(e,t){var n=S().box;function r(e){e.target===n&&(ge(n,"remove",r),t())}if(0===e)return t();ge(n,"remove",o),ge(n,"add",r),o=r}function U(t,n,r){void 0===r&&(r=!1),se(y.props.triggerTarget||D).forEach(function(e){e.addEventListener(t,n,r),d.push({node:e,eventType:t,handler:n,options:r})})}function W(){L()&&(U("touchstart",V,ne),U("touchend",X,ne)),y.props.trigger.split(/\s+/).filter(Boolean).forEach(function(e){if("manual"!==e)switch(U(e,V),e){case"mouseenter":U("mouseleave",X);break;case"focus":U(me?"focusout":"blur",J);break;case"focusin":U("focusout",J)}})}function q(){d.forEach(function(e){var t=e.node,n=e.eventType,r=e.handler,o=e.options;t.removeEventListener(n,r,o)}),d=[]}function V(t){var e,n,r,o=!1;!y.state.isEnabled||Y(t)||f||(s=(u=t).currentTarget,M(),!y.state.isVisible&&pe(t)&&Ae.forEach(function(e){return e(t)}),"click"===t.type&&(y.props.trigger.indexOf("mouseenter")<0||l)&&!1!==y.props.hideOnClick&&y.state.isVisible?o=!0:(n=(e=B())[0],r=e[1],ve.isTouch&&"hold"===n&&r?i=setTimeout(function(){K(t)},r):K(t)),"click"===t.type&&(l=!o),o&&Z(t))}function z(e){var t,n,r,h,d,o=e.target,i=D.contains(o)||E.contains(o);"mousemove"===e.type&&i||(t=$().concat(E).map(function(e){var t,n=null==(t=e._tippy.popperInstance)?void 0:t.state;return n?{popperRect:e.getBoundingClientRect(),popperState:n,props:c}:null}).filter(Boolean),n=t,h=(r=e).clientX,d=r.clientY,n.every(function(e){var t=e.popperRect,n=e.popperState,r=e.props.interactiveBorder,o=ce(n.placement),i=n.modifiersData.offset;if(!i)return!0;var u="bottom"===o?i.top.y:0,s="top"===o?i.bottom.y:0,a="right"===o?i.left.x:0,c="left"===o?i.right.x:0,l=t.top-d+u>r,D=d-t.bottom-s>r,p=t.left-h+a>r,f=h-t.right-c>r;return l||D||p||f})&&(_(),Z(e)))}function X(e){if(!(Y(e)||0<=y.props.trigger.indexOf("click")&&l))return y.props.interactive?(v.body.addEventListener("mouseleave",Z),v.addEventListener("mousemove",g),ae(Ae,g),void g(e)):void Z(e)}function J(e){y.props.trigger.indexOf("focusin")<0&&e.target!==A()||y.props.interactive&&e.relatedTarget&&E.contains(e.relatedTarget)||Z(e)}function Y(e){return!!ve.isTouch&&L()!==0<=e.type.indexOf("touch")}function G(){Q();var e=y.props,t=e.popperOptions,n=e.placement,r=e.offset,o=e.getReferenceClientRect,i=e.moveTransition,u=T()?Le(E).arrow:null,s=o?{getBoundingClientRect:o}:D,a={name:"$$tippy",enabled:!0,phase:"beforeWrite",requires:["computeStyles"],fn:function(e){var t,n=e.state;T()&&(t=S().box,["placement","reference-hidden","escaped"].forEach(function(e){"placement"===e?t.setAttribute("data-placement",n.placement):n.attributes.popper["data-popper-"+e]?t.setAttribute("data-"+e,""):t.removeAttribute("data-"+e)}),n.attributes.popper={})}},c={name:"arrow",enabled:!!u,options:{element:u,padding:3}},l=[{name:"offset",options:{offset:r}},{name:"preventOverflow",options:{padding:{top:2,bottom:2,left:5,right:5}}},{name:"flip",options:{padding:5}},{name:"computeStyles",options:{adaptive:!i}}].concat(T()?[c]:[],(null==t?void 0:t.modifiers)||[],[a]);y.popperInstance=te.createPopper(s,E,Object.assign({},t,{placement:n,onFirstUpdate:p,modifiers:l}))}function Q(){y.popperInstance&&(y.popperInstance.destroy(),y.popperInstance=null)}function $(){return le(E.querySelectorAll("[data-tippy-root]"))}function K(e){y.clearDelayTimeouts(),e&&I("onTrigger",[y,e]),H();var t=k(!0);t?i=setTimeout(function(){y.show()},t):y.show()}function Z(e){var t;y.clearDelayTimeouts(),I("onUntrigger",[y,e]),y.state.isVisible?0<=y.props.trigger.indexOf("mouseenter")&&0<=y.props.trigger.indexOf("click")&&0<=["mouseleave","mousemove"].indexOf(e.type)&&l||((t=k(!1))?n=setTimeout(function(){y.state.isVisible&&y.hide()},t):r=requestAnimationFrame(function(){y.hide()})):R()}}function L(e,t){void 0===t&&(t={});var n,r,o,i=Ce.plugins.concat(t.plugins||[]);"production"!==ee.env.NODE_ENV&&(r=!(n=e),o="[object Object]"===Object.prototype.toString.call(n)&&!n.addEventListener,be(r,["tippy() was passed","`"+String(n)+"`","as its targets (first) argument. Valid types are: String, Element,","Element[], or NodeList."].join(" ")),be(o,["tippy() was passed a plain object which is not supported as an argument","for virtual positioning. Use props.getReferenceClientRect instead."].join(" ")),y(t,i)),document.addEventListener("touchstart",h,Object.assign({},ne,{capture:!0})),window.addEventListener("blur",d);var u,s,a=Object.assign({},t,{plugins:i}),c=f(e);"production"!==ee.env.NODE_ENV&&(u=p(a.content),s=1<c.length,Ee(u&&s,["tippy() was passed an Element as the `content` prop, but more than","one tippy instance was created by this invocation. This means the","content element will only be appended to the last tippy instance.","\n\n","Instead, pass the .innerHTML of the element, or use a function that","returns a cloned version of the element instead.","\n\n","1) content: element.innerHTML\n","2) content: () => element.cloneNode(true)"].join(" ")));var l=c.reduce(function(e,t){var n=t&&B(t,a);return n&&e.push(n),e},[]);return p(e)?l[0]:l}L.defaultProps=Ce,L.setDefaultProps=function(t){"production"!==ee.env.NODE_ENV&&y(t,[]),Object.keys(t).forEach(function(e){Ce[e]=t[e]})},L.currentInput=ve;var T={mouseover:"mouseenter",focusin:"focus",click:"click"};var A={name:"animateFill",defaultValue:!1,fn:function(e){var t;if(null==(t=e.props.render)||!t.$$tippy)return"production"!==ee.env.NODE_ENV&&be(e.props.animateFill,"The `animateFill` plugin requires the default render function."),{};var n,r=Le(e.popper),o=r.box,i=r.content,u=e.props.animateFill?((n=De()).className=s,he([n],"hidden"),n):null;return{onCreate:function(){u&&(o.insertBefore(u,o.firstElementChild),o.setAttribute("data-animatefill",""),o.style.overflow="hidden",e.setProps({arrow:!1,animation:"shift-away"}))},onMount:function(){var e,t;u&&(e=o.style.transitionDuration,t=Number(e.replace("ms","")),i.style.transitionDelay=Math.round(t/10)+"ms",u.style.transitionDuration=e,he([u],"visible"))},onShow:function(){u&&(u.style.transitionDuration="0ms")},onHide:function(){u&&he([u],"hidden")}}}};var S={name:"followCursor",defaultValue:!1,fn:function(r){var p=r.reference,e=de(r.props.triggerTarget||p),o=null;function t(){return"manual"===r.props.trigger.trim()}function n(){var e=!!t()||null!==o&&!(0===o.clientX&&0===o.clientY);return r.props.followCursor&&e}function i(e){e&&r.setProps({getReferenceClientRect:null})}function u(){n()?e.addEventListener("mousemove",s):i(r.props.followCursor)}function f(){e.removeEventListener("mousemove",s)}function s(e){o={clientX:e.clientX,clientY:e.clientY};var t=!e.target||p.contains(e.target),s=r.props.followCursor,a=e.clientX,c=e.clientY,n=p.getBoundingClientRect(),l=a-n.left,D=c-n.top;!t&&r.props.interactive||r.setProps({getReferenceClientRect:function(){var e=p.getBoundingClientRect(),t=a,n=c;"initial"===s&&(t=e.left+l,n=e.top+D);var r="horizontal"===s?e.top:n,o="vertical"===s?e.right:t,i="horizontal"===s?e.bottom:n,u="vertical"===s?e.left:t;return{width:o-u,height:i-r,top:r,right:o,bottom:i,left:u}}}),(ve.isTouch||"initial"===r.props.followCursor&&r.state.isVisible)&&f()}return{onAfterUpdate:function(e,t){var n=t.followCursor;void 0===n||n||i(!0)},onMount:function(){n()&&s(o)},onShow:function(){t()&&(o={clientX:0,clientY:0},u())},onTrigger:function(e,t){o||(pe(t)&&(o={clientX:t.clientX,clientY:t.clientY}),u())},onUntrigger:function(){r.state.isVisible||(f(),o=null)},onHidden:function(){f(),o=null}}}},k={name:"inlinePositioning",defaultValue:!1,fn:function(n){var r,o=n.reference;var t={name:"tippyInlinePositioning",enabled:!0,phase:"afterWrite",fn:function(e){var t=e.state;n.props.inlinePositioning&&(r!==t.placement&&n.setProps({getReferenceClientRect:function(){return function(t,e,n){if(n.length<2||null===t)return e;switch(t){case"top":case"bottom":var r=n[0],o=n[n.length-1],i="top"===t,u=r.top,s=o.bottom,a=i?r.left:o.left,c=i?r.right:o.right;return{top:u,bottom:s,left:a,right:c,width:c-a,height:s-u};case"left":case"right":var l=Math.min.apply(Math,n.map(function(e){return e.left})),D=Math.max.apply(Math,n.map(function(e){return e.right})),p=n.filter(function(e){return"left"===t?e.left===l:e.right===D}),f=p[0].top,h=p[p.length-1].bottom;return{top:f,bottom:h,left:l,right:D,width:D-l,height:h-f};default:return e}}(ce(t.placement),o.getBoundingClientRect(),le(o.getClientRects()))}}),r=t.placement)}};return{onCreate:function(){var e;n.setProps({popperOptions:Object.assign({},n.props.popperOptions,{modifiers:[].concat((null==(e=n.props.popperOptions)?void 0:e.modifiers)||[],[t])})})}}}};var P={name:"sticky",defaultValue:!1,fn:function(n){var r=n.reference,o=n.popper;function i(e){return!0===n.props.sticky||n.props.sticky===e}var u=null,s=null;function a(){var e=i("reference")?(n.popperInstance?n.popperInstance.state.elements.reference:r).getBoundingClientRect():null,t=i("popper")?o.getBoundingClientRect():null;(e&&O(u,e)||t&&O(s,t))&&n.popperInstance&&n.popperInstance.update(),u=e,s=t,n.state.isMounted&&requestAnimationFrame(a)}return{onMount:function(){n.props.sticky&&a()}}}};function O(e,t){return!e||!t||(e.top!==t.top||e.right!==t.right||e.bottom!==t.bottom||e.left!==t.left)}L.setDefaultProps({render:w}),x.animateFill=A,x.createSingleton=function(i,u){var s;void 0===u&&(u={}),"production"!==ee.env.NODE_ENV&&be(!Array.isArray(i),["The first argument passed to createSingleton() must be an array of","tippy instances. The passed value was",String(i)].join(" ")),i.forEach(function(e){e.disable()});var a=i.map(function(e){return e.reference}),e={fn:function(){return{onDestroy:function(){i.forEach(function(e){e.enable()})},onTrigger:function(e,t){var n,r=t.currentTarget,o=a.indexOf(r);r!==s&&(s=r,n=(u.overrides||[]).concat("content").reduce(function(e,t){return e[t]=i[o].props[t],e},{}),e.setProps(Object.assign({},n,{getReferenceClientRect:function(){return r.getBoundingClientRect()}})))}}}};return L(De(),Object.assign({},D(u,["overrides"]),{plugins:[e].concat(u.plugins||[]),triggerTarget:a}))},x.default=L,x.delegate=function(e,r){"production"!==ee.env.NODE_ENV&&be(!(r&&r.target),["You must specity a `target` prop indicating a CSS selector string matching","the target elements that should receive a tippy."].join(" "));var o=[],i=[],u=r.target,t=D(r,["target"]),n=Object.assign({},t,{trigger:"manual"}),s=Object.assign({},t,{showOnCreate:!0}),a=L(e,n);function c(e){var t,n;!e.target||(t=e.target.closest(u))&&((t.getAttribute("data-tippy-trigger")||r.trigger||Ce.trigger).indexOf(T[e.type])<0||t._tippy||(n=L(t,s))&&(i=i.concat(n)))}function l(e,t,n,r){void 0===r&&(r=!1),e.addEventListener(t,n,r),o.push({node:e,eventType:t,handler:n,options:r})}return se(a).forEach(function(e){var t,n=e.destroy;e.destroy=function(e){void 0===e&&(e=!0),e&&i.forEach(function(e){e.destroy()}),i=[],o.forEach(function(e){var t=e.node,n=e.eventType,r=e.handler,o=e.options;t.removeEventListener(n,r,o)}),o=[],n()},l(t=e.reference,"mouseover",c),l(t,"focusin",c),l(t,"click",c)}),a},x.followCursor=S,x.hideAll=function(e){var t=void 0===e?{}:e,r=t.exclude,o=t.duration;Se.forEach(function(e){var t,n=!1;r&&(n=u(r)?e.reference===r:e.popper===r.popper),n||(t=e.props.duration,e.setProps({duration:o}),e.hide(),e.state.isDestroyed||e.setProps({duration:t}))})},x.inlinePositioning=k,x.roundArrow='<svg width="16" height="6" xmlns="http://www.w3.org/2000/svg"><path d="M0 6s1.796-.013 4.67-3.615C5.851.9 6.93.006 8 0c1.07-.006 2.148.887 3.343 2.385C14.233 6.005 16 6 16 6H0z"></svg>',x.sticky=P}).call(this,I("_process"))},{"@popperjs/core":25,_process:29}]},{},[1]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJjb250ZW50L2NoYXQuanMiLCJub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9zaWduYWxyL2Rpc3QvY2pzL0Fib3J0Q29udHJvbGxlci5qcyIsIm5vZGVfbW9kdWxlcy9AbWljcm9zb2Z0L3NpZ25hbHIvZGlzdC9janMvRGVmYXVsdEh0dHBDbGllbnQuanMiLCJub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9zaWduYWxyL2Rpc3QvY2pzL0RlZmF1bHRSZWNvbm5lY3RQb2xpY3kuanMiLCJub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9zaWduYWxyL2Rpc3QvY2pzL0Vycm9ycy5qcyIsIm5vZGVfbW9kdWxlcy9AbWljcm9zb2Z0L3NpZ25hbHIvZGlzdC9janMvRmV0Y2hIdHRwQ2xpZW50LmpzIiwibm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvc2lnbmFsci9kaXN0L2Nqcy9IYW5kc2hha2VQcm90b2NvbC5qcyIsIm5vZGVfbW9kdWxlcy9AbWljcm9zb2Z0L3NpZ25hbHIvZGlzdC9janMvSHR0cENsaWVudC5qcyIsIm5vZGVfbW9kdWxlcy9AbWljcm9zb2Z0L3NpZ25hbHIvZGlzdC9janMvSHR0cENvbm5lY3Rpb24uanMiLCJub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9zaWduYWxyL2Rpc3QvY2pzL0h1YkNvbm5lY3Rpb24uanMiLCJub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9zaWduYWxyL2Rpc3QvY2pzL0h1YkNvbm5lY3Rpb25CdWlsZGVyLmpzIiwibm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvc2lnbmFsci9kaXN0L2Nqcy9JSHViUHJvdG9jb2wuanMiLCJub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9zaWduYWxyL2Rpc3QvY2pzL0lMb2dnZXIuanMiLCJub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9zaWduYWxyL2Rpc3QvY2pzL0lUcmFuc3BvcnQuanMiLCJub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9zaWduYWxyL2Rpc3QvY2pzL0pzb25IdWJQcm90b2NvbC5qcyIsIm5vZGVfbW9kdWxlcy9AbWljcm9zb2Z0L3NpZ25hbHIvZGlzdC9janMvTG9nZ2Vycy5qcyIsIm5vZGVfbW9kdWxlcy9AbWljcm9zb2Z0L3NpZ25hbHIvZGlzdC9janMvTG9uZ1BvbGxpbmdUcmFuc3BvcnQuanMiLCJub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9zaWduYWxyL2Rpc3QvY2pzL1NlcnZlclNlbnRFdmVudHNUcmFuc3BvcnQuanMiLCJub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9zaWduYWxyL2Rpc3QvY2pzL1N1YmplY3QuanMiLCJub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9zaWduYWxyL2Rpc3QvY2pzL1RleHRNZXNzYWdlRm9ybWF0LmpzIiwibm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvc2lnbmFsci9kaXN0L2Nqcy9VdGlscy5qcyIsIm5vZGVfbW9kdWxlcy9AbWljcm9zb2Z0L3NpZ25hbHIvZGlzdC9janMvV2ViU29ja2V0VHJhbnNwb3J0LmpzIiwibm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvc2lnbmFsci9kaXN0L2Nqcy9YaHJIdHRwQ2xpZW50LmpzIiwibm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvc2lnbmFsci9kaXN0L2Nqcy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9kaXN0L2Nqcy9wb3BwZXIuanMiLCJub2RlX21vZHVsZXMvYmFzZTY0LWpzL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2J1ZmZlci9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9pZWVlNzU0L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIm5vZGVfbW9kdWxlcy90aXBweS5qcy9kaXN0L3RpcHB5LmNqcy5qcyJdLCJuYW1lcyI6WyJyIiwiZSIsIm4iLCJ0IiwibyIsImkiLCJmIiwiYyIsInJlcXVpcmUiLCJ1IiwiYSIsIkVycm9yIiwiY29kZSIsInAiLCJleHBvcnRzIiwiY2FsbCIsImxlbmd0aCIsIjEiLCJtb2R1bGUiLCJzaWduYWxSIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfdGlwcHkiLCJzZW5kQnV0dG9uIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImNvbXBsZXRlbHlEaXNhYmxlZCIsImRpc2FibGVkIiwiY2hhdElucHV0Iiwid2luZG93Iiwid2lraW12Y2NoYXQiLCJjb25uZWN0aW9uIiwibWVzc2FnZUxpc3RVbCIsInVzZXJOYW1lc3BhY2UiLCJpbml0IiwidXJsIiwidG9waWNJZCIsIm1lc3NhZ2VzIiwiSlNPTiIsInBhcnNlIiwibGFzdCIsIl9pIiwiYWRkTWVzc2FnZSIsImNvbmNhdCIsImlkIiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJhZGQiLCJIdWJDb25uZWN0aW9uQnVpbGRlciIsIndpdGhVcmwiLCJ3aXRoQXV0b21hdGljUmVjb25uZWN0IiwiYnVpbGQiLCJvbiIsInN0YXJ0IiwidGhlbiIsImVyciIsImNvbnNvbGUiLCJlcnJvciIsImFkZEV2ZW50TGlzdGVuZXIiLCJ2YWx1ZSIsImV2ZW50Iiwia2V5Q29kZSIsInNoaWZ0S2V5Iiwic2VuZE1lc3NhZ2UiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsIm1lc3NhZ2UiLCJpc1JlcGx5Iiwibm9tZXNzYWdlcyIsIm1lc3NhZ2VMaSIsIm1lc3NhZ2VEaXYiLCJtZXNzYWdlSGVhZGVyIiwic2VuZGVyIiwidXNlcm5hbWUiLCJfdXNlckxpbmsiLCJ1c2VyU3BhbiIsInJlYWN0aW9uc1NwYW4iLCJtZXNzYWdlVGltZXN0YW1wIiwidGltZXN0YW1wIiwidGhyZWFkVG9nZ2xlciIsIm1lc3NhZ2VDb250ZW50IiwiY29udGVudCIsImNvbGxhcHNlVG9nZ2xlciIsInRvZ2dsZUxpbmsiLCJwYXJlbnQiLCJjaGlsZE1lc3NhZ2VMaXN0IiwicmVwbHlEaXYiLCJmb3JtRGl2IiwiZm9ybUxhYmVsIiwiZm9ybVRleHRBcmVhIiwicmVwbHlCdXR0b24iLCJyZXBseU1lc3NhZ2VJZCIsInRlc3QiLCJ0aGlzIiwiYWRkUmVhY3Rpb24iLCJyZW1vdmUiLCJjcmVhdGVFbGVtZW50IiwiYXBwZW5kQ2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsInNlbmRlck5hbWUiLCJzZW5kZXJFeGlzdHMiLCJocmVmIiwic2VuZGVySWQiLCJ0aXRsZSIsInVzZXJMaW5rIiwiRGF0ZSIsInRvTG9jYWxlU3RyaW5nIiwiaW5uZXJIVE1MIiwib25jbGljayIsInRhcmdldCIsInBhcmVudEVsZW1lbnQiLCJ0b2dnbGUiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImh0bWxGb3IiLCJ0ZXh0Q29udGVudCIsInR5cGUiLCJyZXBseSIsInNyY0VsZW1lbnQiLCJzdWJzdHIiLCJpbnZva2UiLCJNYXJrZG93biIsIk1lc3NhZ2VJZCIsIlRvcGljSWQiLCJwYXJzZUludCIsImdldENvbXB1dGVkU3R5bGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwicmVhY3Rpb24iLCJwYXJlbnRSZWFjdGlvblNwYW4iLCJ0eXBlTmFtZSIsIm1lc3NhZ2VJZCIsInJlcGxhY2UiLCJhZGRSZWFjdGlvbkxpc3QiLCJhZGRSZWFjdGlvblRvTGlzdCIsInNwYW4iLCJyZWFjdGlvblR5cGVTcGFuIiwicmVhY3Rpb25JY29uU3BhbiIsInJlYWN0aW9uQ291bnRTcGFuIiwicmVhY3Rpb25Db3VudCIsInJlYWN0aW9uTGlzdCIsInN0eWxlIiwiZGlzcGxheSIsInBsYWNlbWVudCIsImFsbG93SFRNTCIsImNvdW50IiwiY291bnRTcGFuIiwicmVhY3Rpb25MaXN0SXRlbSIsIl91c2VyTGluazIiLCJyZWFjdGlvblRpbWVzdGFtcCIsImxpc3QiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIkFib3J0Q29udHJvbGxlciIsInByb3RvdHlwZSIsImFib3J0IiwiaXNBYm9ydGVkIiwib25hYm9ydCIsImdldCIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJleHRlbmRTdGF0aWNzIiwiX19leHRlbmRzIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJBcnJheSIsImQiLCJiIiwiaGFzT3duUHJvcGVydHkiLCJfXyIsImNvbnN0cnVjdG9yIiwiY3JlYXRlIiwiX3N1cGVyIiwiRXJyb3JzXzEiLCJGZXRjaEh0dHBDbGllbnRfMSIsIkh0dHBDbGllbnRfMSIsIlV0aWxzXzEiLCJYaHJIdHRwQ2xpZW50XzEiLCJEZWZhdWx0SHR0cENsaWVudCIsIkh0dHBDbGllbnQiLCJzZW5kIiwicmVxdWVzdCIsImFib3J0U2lnbmFsIiwiYWJvcnRlZCIsIlByb21pc2UiLCJyZWplY3QiLCJBYm9ydEVycm9yIiwibWV0aG9kIiwiaHR0cENsaWVudCIsImdldENvb2tpZVN0cmluZyIsImxvZ2dlciIsIl90aGlzIiwiZmV0Y2giLCJQbGF0Zm9ybSIsImlzTm9kZSIsIkZldGNoSHR0cENsaWVudCIsIlhNTEh0dHBSZXF1ZXN0IiwiWGhySHR0cENsaWVudCIsIkRFRkFVTFRfUkVUUllfREVMQVlTX0lOX01JTExJU0VDT05EUyIsIkRlZmF1bHRSZWNvbm5lY3RQb2xpY3kiLCJuZXh0UmV0cnlEZWxheUluTWlsbGlzZWNvbmRzIiwicmV0cnlDb250ZXh0IiwicmV0cnlEZWxheXMiLCJwcmV2aW91c1JldHJ5Q291bnQiLCJ1bmRlZmluZWQiLCJIdHRwRXJyb3IiLCJlcnJvck1lc3NhZ2UiLCJzdGF0dXNDb2RlIiwidHJ1ZVByb3RvIiwiVGltZW91dEVycm9yIiwiX19hc3NpZ24iLCJhc3NpZ24iLCJzIiwiYXJndW1lbnRzIiwiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwicmVzb2x2ZSIsImZ1bGZpbGxlZCIsInN0ZXAiLCJuZXh0IiwicmVqZWN0ZWQiLCJyZXN1bHQiLCJkb25lIiwiYXBwbHkiLCJfX2dlbmVyYXRvciIsImJvZHkiLCJ5IiwiXyIsImxhYmVsIiwic2VudCIsInRyeXMiLCJvcHMiLCJnIiwidmVyYiIsInRocm93IiwicmV0dXJuIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJ2Iiwib3AiLCJUeXBlRXJyb3IiLCJwb3AiLCJwdXNoIiwiSUxvZ2dlcl8xIiwiYWJvcnRDb250cm9sbGVyIiwidGltZW91dElkIiwibXNUaW1lb3V0IiwicmVzcG9uc2UiLCJlXzEiLCJwYXlsb2FkIiwiX2EiLCJhYm9ydENvbnRyb2xsZXJUeXBlIiwidGltZW91dCIsInNldFRpbWVvdXQiLCJsb2ciLCJMb2dMZXZlbCIsIldhcm5pbmciLCJmZXRjaFR5cGUiLCJjYWNoZSIsImNyZWRlbnRpYWxzIiwid2l0aENyZWRlbnRpYWxzIiwiaGVhZGVycyIsIkNvbnRlbnQtVHlwZSIsIlgtUmVxdWVzdGVkLVdpdGgiLCJtb2RlIiwicmVkaXJlY3QiLCJzaWduYWwiLCJjbGVhclRpbWVvdXQiLCJvayIsInN0YXR1c1RleHQiLCJzdGF0dXMiLCJyZXNwb25zZVR5cGUiLCJhcnJheUJ1ZmZlciIsInRleHQiLCJkZXNlcmlhbGl6ZUNvbnRlbnQiLCJIdHRwUmVzcG9uc2UiLCJjb29raWVzIiwiamFyIiwiZ2V0Q29va2llcyIsImpvaW4iLCJyZXF1aXJlRnVuYyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJfX25vbl93ZWJwYWNrX3JlcXVpcmVfXyIsIkNvb2tpZUphciIsImJpbmQiLCJzZWxmIiwiVGV4dE1lc3NhZ2VGb3JtYXRfMSIsIkhhbmRzaGFrZVByb3RvY29sIiwid3JpdGVIYW5kc2hha2VSZXF1ZXN0IiwiaGFuZHNoYWtlUmVxdWVzdCIsIlRleHRNZXNzYWdlRm9ybWF0Iiwid3JpdGUiLCJzdHJpbmdpZnkiLCJwYXJzZUhhbmRzaGFrZVJlc3BvbnNlIiwiZGF0YSIsImlzQXJyYXlCdWZmZXIiLCJCdWZmZXIiLCJiaW5hcnlEYXRhIiwiVWludDhBcnJheSIsInNlcGFyYXRvckluZGV4IiwiaW5kZXhPZiIsIlJlY29yZFNlcGFyYXRvckNvZGUiLCJyZXNwb25zZUxlbmd0aCIsIm1lc3NhZ2VEYXRhIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwic2xpY2UiLCJyZW1haW5pbmdEYXRhIiwiYnl0ZUxlbmd0aCIsImJ1ZmZlciIsInRleHREYXRhIiwiUmVjb3JkU2VwYXJhdG9yIiwic3Vic3RyaW5nIiwib3B0aW9ucyIsInBvc3QiLCJkZWxldGUiLCJEZWZhdWx0SHR0cENsaWVudF8xIiwiSVRyYW5zcG9ydF8xIiwiTG9uZ1BvbGxpbmdUcmFuc3BvcnRfMSIsIlNlcnZlclNlbnRFdmVudHNUcmFuc3BvcnRfMSIsIldlYlNvY2tldFRyYW5zcG9ydF8xIiwiSHR0cENvbm5lY3Rpb24iLCJ0cmFuc2ZlckZvcm1hdCIsIlRyYW5zZmVyRm9ybWF0IiwiQmluYXJ5IiwiQXJnIiwiaXNJbiIsIkRlYnVnIiwiY29ubmVjdGlvblN0YXRlIiwic3RhcnRJbnRlcm5hbFByb21pc2UiLCJzdGFydEludGVybmFsIiwic3RvcFByb21pc2UiLCJjb25uZWN0aW9uU3RhcnRlZCIsInNlbmRRdWV1ZSIsIlRyYW5zcG9ydFNlbmRRdWV1ZSIsInRyYW5zcG9ydCIsInN0b3AiLCJzdG9wUHJvbWlzZVJlc29sdmVyIiwic3RvcEludGVybmFsIiwiZV8yIiwic3RvcEVycm9yIiwic3RvcENvbm5lY3Rpb24iLCJuZWdvdGlhdGVSZXNwb25zZSIsInJlZGlyZWN0cyIsIl9sb29wXzEiLCJ0aGlzXzEiLCJlXzMiLCJiYXNlVXJsIiwiYWNjZXNzVG9rZW5GYWN0b3J5Iiwic2tpcE5lZ290aWF0aW9uIiwiSHR0cFRyYW5zcG9ydFR5cGUiLCJXZWJTb2NrZXRzIiwiY29uc3RydWN0VHJhbnNwb3J0Iiwic3RhcnRUcmFuc3BvcnQiLCJhY2Nlc3NUb2tlbl8xIiwiZ2V0TmVnb3RpYXRpb25SZXNwb25zZSIsIlByb3RvY29sVmVyc2lvbiIsImFjY2Vzc1Rva2VuIiwiY3JlYXRlVHJhbnNwb3J0IiwiTG9uZ1BvbGxpbmdUcmFuc3BvcnQiLCJmZWF0dXJlcyIsImluaGVyZW50S2VlcEFsaXZlIiwidG9rZW4iLCJuYW1lIiwibmVnb3RpYXRlVXJsIiwiZV80IiwiX2IiLCJnZXRVc2VyQWdlbnRIZWFkZXIiLCJyZXNvbHZlTmVnb3RpYXRlVXJsIiwibmVnb3RpYXRlVmVyc2lvbiIsImNvbm5lY3Rpb25Ub2tlbiIsImNvbm5lY3Rpb25JZCIsImNyZWF0ZUNvbm5lY3RVcmwiLCJyZXF1ZXN0ZWRUcmFuc3BvcnQiLCJyZXF1ZXN0ZWRUcmFuc2ZlckZvcm1hdCIsImNvbm5lY3RVcmwiLCJ0cmFuc3BvcnRFeGNlcHRpb25zIiwidHJhbnNwb3J0cyIsIm5lZ290aWF0ZSIsInRyYW5zcG9ydHNfMSIsImVuZHBvaW50IiwidHJhbnNwb3J0T3JFcnJvciIsImV4XzEiLCJleF8yIiwiaXNJVHJhbnNwb3J0IiwiYXZhaWxhYmxlVHJhbnNwb3J0cyIsInJlc29sdmVUcmFuc3BvcnRPckVycm9yIiwiV2ViU29ja2V0IiwiV2ViU29ja2V0VHJhbnNwb3J0IiwibG9nTWVzc2FnZUNvbnRlbnQiLCJTZXJ2ZXJTZW50RXZlbnRzIiwiRXZlbnRTb3VyY2UiLCJTZXJ2ZXJTZW50RXZlbnRzVHJhbnNwb3J0IiwiTG9uZ1BvbGxpbmciLCJvbnJlY2VpdmUiLCJvbmNsb3NlIiwiY29ubmVjdCIsImFjdHVhbFRyYW5zcG9ydCIsInRyYW5zZmVyRm9ybWF0cyIsIm1hcCIsImV4IiwiSW5mb3JtYXRpb24iLCJjYXRjaCIsInJlc29sdmVVcmwiLCJsYXN0SW5kZXhPZiIsImlzQnJvd3NlciIsImFUYWciLCJpbmRleCIsImlzUmVxdWlyZWQiLCJjcmVhdGVMb2dnZXIiLCJ3ZWJTb2NrZXRNb2R1bGUiLCJldmVudFNvdXJjZU1vZHVsZSIsImJ1ZmZlckRhdGEiLCJ0cmFuc3BvcnRSZXN1bHQiLCJQcm9taXNlU291cmNlIiwicHJvbWlzZSIsImV4ZWN1dGluZyIsInNlbmRCdWZmZXJlZERhdGEiLCJzZW5kTG9vcFByb21pc2UiLCJzZW5kTG9vcCIsImVycm9yXzEiLCJjb25jYXRCdWZmZXJzIiwiYXJyYXlCdWZmZXJzIiwidG90YWxMZW5ndGgiLCJyZWR1Y2UiLCJvZmZzZXQiLCJhcnJheUJ1ZmZlcnNfMSIsIml0ZW0iLCJzZXQiLCJyZXNvbHZlciIsInJlYXNvbiIsInJlamVjdGVyIiwiSHViQ29ubmVjdGlvblN0YXRlIiwiSGFuZHNoYWtlUHJvdG9jb2xfMSIsIklIdWJQcm90b2NvbF8xIiwiU3ViamVjdF8xIiwiSHViQ29ubmVjdGlvbiIsInByb3RvY29sIiwicmVjb25uZWN0UG9saWN5IiwiRGlzY29ubmVjdGVkIiwiUmVjb25uZWN0aW5nIiwic3RhcnRQcm9taXNlIiwic3RhcnRXaXRoU3RhdGVUcmFuc2l0aW9ucyIsIkNvbm5lY3RpbmciLCJDb25uZWN0ZWQiLCJoYW5kc2hha2VQcm9taXNlIiwic3RvcER1cmluZ1N0YXJ0RXJyb3IiLCJyZWNlaXZlZEhhbmRzaGFrZVJlc3BvbnNlIiwiaGFuZHNoYWtlUmVzb2x2ZXIiLCJoYW5kc2hha2VSZWplY3RlciIsInZlcnNpb24iLCJoYW5kc2hha2VQcm90b2NvbCIsImNsZWFudXBUaW1lb3V0IiwicmVzZXRUaW1lb3V0UGVyaW9kIiwicmVzZXRLZWVwQWxpdmVJbnRlcnZhbCIsImNsZWFudXBQaW5nVGltZXIiLCJEaXNjb25uZWN0aW5nIiwicmVjb25uZWN0RGVsYXlIYW5kbGUiLCJjb21wbGV0ZUNsb3NlIiwic3RyZWFtIiwibWV0aG9kTmFtZSIsImFyZ3MiLCJwcm9taXNlUXVldWUiLCJyZXBsYWNlU3RyZWFtaW5nUGFyYW1zIiwic3RyZWFtcyIsInN0cmVhbUlkcyIsImludm9jYXRpb25EZXNjcmlwdG9yIiwiY3JlYXRlU3RyZWFtSW52b2NhdGlvbiIsInN1YmplY3QiLCJTdWJqZWN0IiwiY2FuY2VsQ2FsbGJhY2siLCJjYW5jZWxJbnZvY2F0aW9uIiwiY3JlYXRlQ2FuY2VsSW52b2NhdGlvbiIsImludm9jYXRpb25JZCIsImNhbGxiYWNrcyIsInNlbmRXaXRoUHJvdG9jb2wiLCJpbnZvY2F0aW9uRXZlbnQiLCJNZXNzYWdlVHlwZSIsIkNvbXBsZXRpb24iLCJjb21wbGV0ZSIsImxhdW5jaFN0cmVhbXMiLCJ3cml0ZU1lc3NhZ2UiLCJzZW5kUHJvbWlzZSIsImNyZWF0ZUludm9jYXRpb24iLCJuZXdNZXRob2QiLCJ0b0xvd2VyQ2FzZSIsIm1ldGhvZHMiLCJvZmYiLCJoYW5kbGVycyIsInJlbW92ZUlkeCIsInNwbGljZSIsImNhbGxiYWNrIiwiY2xvc2VkQ2FsbGJhY2tzIiwib25yZWNvbm5lY3RpbmciLCJyZWNvbm5lY3RpbmdDYWxsYmFja3MiLCJvbnJlY29ubmVjdGVkIiwicmVjb25uZWN0ZWRDYWxsYmFja3MiLCJwcm9jZXNzSW5jb21pbmdEYXRhIiwicHJvY2Vzc0hhbmRzaGFrZVJlc3BvbnNlIiwibWVzc2FnZXNfMSIsInBhcnNlTWVzc2FnZXMiLCJJbnZvY2F0aW9uIiwiaW52b2tlQ2xpZW50TWV0aG9kIiwiU3RyZWFtSXRlbSIsIlBpbmciLCJDbG9zZSIsImFsbG93UmVjb25uZWN0IiwicmVzcG9uc2VNZXNzYWdlIiwicGluZ1NlcnZlckhhbmRsZSIsImNhY2hlZFBpbmdNZXNzYWdlIiwia2VlcEFsaXZlSW50ZXJ2YWxJbk1pbGxpc2Vjb25kcyIsInRpbWVvdXRIYW5kbGUiLCJzZXJ2ZXJUaW1lb3V0Iiwic2VydmVyVGltZW91dEluTWlsbGlzZWNvbmRzIiwiaW52b2NhdGlvbk1lc3NhZ2UiLCJmb3JFYWNoIiwibSIsImNvbm5lY3Rpb25DbG9zZWQiLCJjYW5jZWxDYWxsYmFja3NXaXRoRXJyb3IiLCJyZWNvbm5lY3QiLCJyZWNvbm5lY3RTdGFydFRpbWUiLCJwcmV2aW91c1JlY29ubmVjdEF0dGVtcHRzIiwicmV0cnlFcnJvciIsIm5leHRSZXRyeURlbGF5Iiwibm93IiwiZ2V0TmV4dFJldHJ5RGVsYXkiLCJ0b1N0cmluZyIsImVsYXBzZWRNaWxsaXNlY29uZHMiLCJyZXRyeVJlYXNvbiIsImtleXMiLCJrZXkiLCJub25ibG9ja2luZyIsInN0cmVhbUlkIiwic3Vic2NyaWJlIiwiY3JlYXRlQ29tcGxldGlvbk1lc3NhZ2UiLCJjcmVhdGVTdHJlYW1JdGVtTWVzc2FnZSIsImFyZ3VtZW50IiwiaXNPYnNlcnZhYmxlIiwiYXJnIiwiU3RyZWFtSW52b2NhdGlvbiIsIkNhbmNlbEludm9jYXRpb24iLCJEZWZhdWx0UmVjb25uZWN0UG9saWN5XzEiLCJIdHRwQ29ubmVjdGlvbl8xIiwiSHViQ29ubmVjdGlvbl8xIiwiSnNvbkh1YlByb3RvY29sXzEiLCJMb2dnZXJzXzEiLCJMb2dMZXZlbE5hbWVNYXBwaW5nIiwidHJhY2UiLCJUcmFjZSIsImRlYnVnIiwiaW5mbyIsImluZm9ybWF0aW9uIiwid2FybiIsIndhcm5pbmciLCJjcml0aWNhbCIsIkNyaXRpY2FsIiwibm9uZSIsIk5vbmUiLCJjb25maWd1cmVMb2dnaW5nIiwibG9nZ2luZyIsImxvZ0xldmVsIiwibWFwcGluZyIsInBhcnNlTG9nTGV2ZWwiLCJDb25zb2xlTG9nZ2VyIiwidHJhbnNwb3J0VHlwZU9yT3B0aW9ucyIsImh0dHBDb25uZWN0aW9uT3B0aW9ucyIsIndpdGhIdWJQcm90b2NvbCIsInJldHJ5RGVsYXlzT3JSZWNvbm5lY3RQb2xpY3kiLCJpc0FycmF5IiwiTnVsbExvZ2dlciIsImluc3RhbmNlIiwiSnNvbkh1YlByb3RvY29sIiwiaW5wdXQiLCJodWJNZXNzYWdlcyIsInBhcnNlZE1lc3NhZ2UiLCJpc0ludm9jYXRpb25NZXNzYWdlIiwiaXNTdHJlYW1JdGVtTWVzc2FnZSIsImlzQ29tcGxldGlvbk1lc3NhZ2UiLCJhc3NlcnROb3RFbXB0eVN0cmluZyIsIlRleHQiLCJfbG9nTGV2ZWwiLCJfbWVzc2FnZSIsIkFib3J0Q29udHJvbGxlcl8xIiwicG9sbEFib3J0IiwicG9sbE9wdGlvbnMiLCJwb2xsVXJsIiwiX2MiLCJnZXRBY2Nlc3NUb2tlbiIsInVwZGF0ZUhlYWRlclRva2VuIiwiY2xvc2VFcnJvciIsInJ1bm5pbmciLCJyZWNlaXZpbmciLCJwb2xsIiwiZ2V0RGF0YURldGFpbCIsInBvbGxBYm9ydGVkIiwicmFpc2VPbkNsb3NlIiwibmFtZV8xIiwiZGVsZXRlT3B0aW9ucyIsImxvZ01lc3NhZ2UiLCJlbmNvZGVVUklDb21wb25lbnQiLCJvcGVuZWQiLCJldmVudFNvdXJjZSIsImlzV2ViV29ya2VyIiwiZXZlbnRTb3VyY2VDb25zdHJ1Y3RvciIsIkNvb2tpZSIsIm9ubWVzc2FnZSIsImNsb3NlIiwib25lcnJvciIsIm9ub3BlbiIsIm9ic2VydmVycyIsIm9ic2VydmVyIiwiU3ViamVjdFN1YnNjcmlwdGlvbiIsIm91dHB1dCIsInNwbGl0IiwiVkVSU0lPTiIsInZhbCIsInZhbHVlcyIsImluY2x1ZGVDb250ZW50IiwiZGV0YWlsIiwiZm9ybWF0QXJyYXlCdWZmZXIiLCJ2aWV3Iiwic3RyIiwibnVtIiwiQXJyYXlCdWZmZXIiLCJ0cmFuc3BvcnROYW1lIiwiZGVmYXVsdEhlYWRlcnMiLCJkaXNwb3NlIiwibWluaW11bUxvZ0xldmVsIiwib3V0cHV0Q29uc29sZSIsInRvSVNPU3RyaW5nIiwidXNlckFnZW50SGVhZGVyTmFtZSIsImNvbnN0cnVjdFVzZXJBZ2VudCIsInByb2Nlc3MiLCJwbGF0Zm9ybSIsImdldE9zTmFtZSIsInZlcnNpb25zIiwibm9kZSIsImdldFJ1bnRpbWVWZXJzaW9uIiwib3MiLCJydW50aW1lIiwicnVudGltZVZlcnNpb24iLCJ1c2VyQWdlbnQiLCJtYWpvckFuZE1pbm9yIiwid2ViU29ja2V0Iiwid2ViU29ja2V0Q29uc3RydWN0b3IiLCJiaW5hcnlUeXBlIiwiX2V2ZW50IiwiRXJyb3JFdmVudCIsInJlYWR5U3RhdGUiLCJPUEVOIiwiaXNDbG9zZUV2ZW50Iiwid2FzQ2xlYW4iLCJ4aHIiLCJvcGVuIiwic2V0UmVxdWVzdEhlYWRlciIsImhlYWRlciIsIm9ubG9hZCIsInJlc3BvbnNlVGV4dCIsIm9udGltZW91dCIsIkh1YkNvbm5lY3Rpb25CdWlsZGVyXzEiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJlbGVtZW50IiwicmVjdCIsIndpZHRoIiwiaGVpZ2h0IiwidG9wIiwicmlnaHQiLCJib3R0b20iLCJsZWZ0IiwieCIsImdldFdpbmRvdyIsIm93bmVyRG9jdW1lbnQiLCJkZWZhdWx0VmlldyIsImdldFdpbmRvd1Njcm9sbCIsIndpbiIsInNjcm9sbExlZnQiLCJwYWdlWE9mZnNldCIsInNjcm9sbFRvcCIsInBhZ2VZT2Zmc2V0IiwiaXNFbGVtZW50IiwiRWxlbWVudCIsImlzSFRNTEVsZW1lbnQiLCJIVE1MRWxlbWVudCIsImdldE5vZGVOYW1lIiwibm9kZU5hbWUiLCJnZXREb2N1bWVudEVsZW1lbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJnZXRXaW5kb3dTY3JvbGxCYXJYIiwiaXNTY3JvbGxQYXJlbnQiLCJfZ2V0Q29tcHV0ZWRTdHlsZSIsIm92ZXJmbG93Iiwib3ZlcmZsb3dYIiwib3ZlcmZsb3dZIiwiZ2V0Q29tcG9zaXRlUmVjdCIsImVsZW1lbnRPclZpcnR1YWxFbGVtZW50Iiwib2Zmc2V0UGFyZW50IiwiaXNGaXhlZCIsInNjcm9sbCIsIm9mZnNldHMiLCJjbGllbnRMZWZ0IiwiY2xpZW50VG9wIiwiZ2V0TGF5b3V0UmVjdCIsIm9mZnNldExlZnQiLCJvZmZzZXRUb3AiLCJvZmZzZXRXaWR0aCIsIm9mZnNldEhlaWdodCIsImdldFBhcmVudE5vZGUiLCJhc3NpZ25lZFNsb3QiLCJwYXJlbnROb2RlIiwiaG9zdCIsImxpc3RTY3JvbGxQYXJlbnRzIiwic2Nyb2xsUGFyZW50IiwiZ2V0U2Nyb2xsUGFyZW50IiwiaXNCb2R5IiwidmlzdWFsVmlld3BvcnQiLCJ1cGRhdGVkTGlzdCIsImdldFRydWVPZmZzZXRQYXJlbnQiLCJwb3NpdGlvbiIsImdldE9mZnNldFBhcmVudCIsImF1dG8iLCJiYXNlUGxhY2VtZW50cyIsImVuZCIsImNsaXBwaW5nUGFyZW50cyIsInZpZXdwb3J0IiwicG9wcGVyIiwicmVmZXJlbmNlIiwidmFyaWF0aW9uUGxhY2VtZW50cyIsImFjYyIsInBsYWNlbWVudHMiLCJtb2RpZmllclBoYXNlcyIsIm9yZGVyIiwibW9kaWZpZXJzIiwiTWFwIiwidmlzaXRlZCIsIlNldCIsIm1vZGlmaWVyIiwiaGFzIiwic29ydCIsInJlcXVpcmVzIiwicmVxdWlyZXNJZkV4aXN0cyIsImRlcCIsImRlcE1vZGlmaWVyIiwiZm9ybWF0IiwiX2xlbiIsIl9rZXkiLCJJTlZBTElEX01PRElGSUVSX0VSUk9SIiwiTUlTU0lOR19ERVBFTkRFTkNZX0VSUk9SIiwiVkFMSURfUFJPUEVSVElFUyIsImdldEJhc2VQbGFjZW1lbnQiLCJJTlZBTElEX0VMRU1FTlRfRVJST1IiLCJERUZBVUxUX09QVElPTlMiLCJzdHJhdGVneSIsImFyZVZhbGlkRWxlbWVudHMiLCJzb21lIiwicG9wcGVyR2VuZXJhdG9yIiwiZ2VuZXJhdG9yT3B0aW9ucyIsIl9nZW5lcmF0b3JPcHRpb25zJGRlZiIsImRlZmF1bHRNb2RpZmllcnMiLCJfZ2VuZXJhdG9yT3B0aW9ucyRkZWYyIiwiZGVmYXVsdE9wdGlvbnMiLCJmbiIsInBlbmRpbmciLCJzdGF0ZSIsIm9yZGVyZWRNb2RpZmllcnMiLCJtb2RpZmllcnNEYXRhIiwiZWxlbWVudHMiLCJhdHRyaWJ1dGVzIiwic3R5bGVzIiwiZWZmZWN0Q2xlYW51cEZucyIsImlzRGVzdHJveWVkIiwic2V0T3B0aW9ucyIsImNsZWFudXBNb2RpZmllckVmZmVjdHMiLCJzY3JvbGxQYXJlbnRzIiwiY29udGV4dEVsZW1lbnQiLCJtZXJnZWQiLCJhcnIiLCJpZGVudGlmaWVycyIsImN1cnJlbnQiLCJleGlzdGluZyIsInBoYXNlIiwiZmlsdGVyIiwiZW5hYmxlZCIsImVudiIsIk5PREVfRU5WIiwiX3JlZiIsImlkZW50aWZpZXIiLCJlZmZlY3QiLCJyZXF1aXJlbWVudCIsImZpbmQiLCJtb2QiLCJfcmVmMiIsIm1hcmdpblRvcCIsIm1hcmdpblJpZ2h0IiwibWFyZ2luQm90dG9tIiwibWFyZ2luTGVmdCIsIm1hcmdpbiIsInBhcnNlRmxvYXQiLCJfcmVmMyIsImNsZWFudXBGbiIsIl9yZWYzJG9wdGlvbnMiLCJ1cGRhdGUiLCJmb3JjZVVwZGF0ZSIsIl9zdGF0ZSRlbGVtZW50cyIsInJlY3RzIiwicmVzZXQiLCJfc3RhdGUkb3JkZXJlZE1vZGlmaWUiLCJfc3RhdGUkb3JkZXJlZE1vZGlmaWUyIiwiX29wdGlvbnMiLCJfX2RlYnVnX2xvb3BzX18iLCJkZXN0cm95Iiwib25GaXJzdFVwZGF0ZSIsInBhc3NpdmUiLCJnZXRWYXJpYXRpb24iLCJnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQiLCJjb21wdXRlT2Zmc2V0cyIsImJhc2VQbGFjZW1lbnQiLCJ2YXJpYXRpb24iLCJjb21tb25YIiwiY29tbW9uWSIsIm1haW5BeGlzIiwibGVuIiwiTWF0aCIsImZsb29yIiwiY2VpbCIsInVuc2V0U2lkZXMiLCJtYXBUb1N0eWxlcyIsIl9PYmplY3QkYXNzaWduMiIsImRwciIsInBvcHBlclJlY3QiLCJncHVBY2NlbGVyYXRpb24iLCJhZGFwdGl2ZSIsIl9yb3VuZE9mZnNldHMiLCJkZXZpY2VQaXhlbFJhdGlvIiwicm91bmQiLCJoYXNYIiwiaGFzWSIsInNpZGVYIiwic2lkZVkiLCJjbGllbnRIZWlnaHQiLCJjbGllbnRXaWR0aCIsIl9PYmplY3QkYXNzaWduIiwiY29tbW9uU3R5bGVzIiwidHJhbnNmb3JtIiwiaGFzaCIsImdldE9wcG9zaXRlUGxhY2VtZW50IiwibWF0Y2hlZCIsImhhc2gkMSIsImdldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50IiwidG9OdW1iZXIiLCJjc3NWYWx1ZSIsImdldERlY29yYXRpb25zIiwiY29tcHV0ZWRTdHlsZSIsImJvcmRlcnMiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlclJpZ2h0V2lkdGgiLCJib3JkZXJCb3R0b21XaWR0aCIsImJvcmRlckxlZnRXaWR0aCIsImlzSFRNTCIsIndpblNjcm9sbEJhclgiLCJpbm5lckhlaWdodCIsImlubmVyV2lkdGgiLCJjaGlsZCIsImlzU2hhZG93IiwiQm9vbGVhbiIsImdldFJvb3ROb2RlIiwiaXNTYW1lTm9kZSIsInJlY3RUb0NsaWVudFJlY3QiLCJnZXRDbGllbnRSZWN0RnJvbU1peGVkVHlwZSIsImNsaXBwaW5nUGFyZW50IiwibmF2aWdhdG9yIiwid2luU2Nyb2xsIiwiZG9jdW1lbnRSZWN0IiwibWF4IiwiZ2V0Q2xpcHBpbmdSZWN0IiwiYm91bmRhcnkiLCJyb290Qm91bmRhcnkiLCJjbGlwcGVyRWxlbWVudCIsIm1haW5DbGlwcGluZ1BhcmVudHMiLCJmaXJzdENsaXBwaW5nUGFyZW50IiwiY2xpcHBpbmdSZWN0IiwiYWNjUmVjdCIsImRlY29yYXRpb25zIiwibWluIiwiZ2V0RnJlc2hTaWRlT2JqZWN0IiwibWVyZ2VQYWRkaW5nT2JqZWN0IiwicGFkZGluZ09iamVjdCIsImV4cGFuZFRvSGFzaE1hcCIsImhhc2hNYXAiLCJkZXRlY3RPdmVyZmxvdyIsIl9vcHRpb25zJHBsYWNlbWVudCIsIl9vcHRpb25zJGJvdW5kYXJ5IiwiX29wdGlvbnMkcm9vdEJvdW5kYXJ5IiwiX29wdGlvbnMkZWxlbWVudENvbnRlIiwiZWxlbWVudENvbnRleHQiLCJfb3B0aW9ucyRhbHRCb3VuZGFyeSIsImFsdEJvdW5kYXJ5IiwiX29wdGlvbnMkcGFkZGluZyIsInBhZGRpbmciLCJhbHRDb250ZXh0IiwicmVmZXJlbmNlRWxlbWVudCIsImNsaXBwaW5nQ2xpZW50UmVjdCIsInJlZmVyZW5jZUNsaWVudFJlY3QiLCJwb3BwZXJPZmZzZXRzIiwicG9wcGVyQ2xpZW50UmVjdCIsImVsZW1lbnRDbGllbnRSZWN0Iiwib3ZlcmZsb3dPZmZzZXRzIiwib2Zmc2V0RGF0YSIsIm11bHRpcGx5IiwiYXhpcyIsIndpdGhpbiIsImdldFNpZGVPZmZzZXRzIiwicHJldmVudGVkT2Zmc2V0cyIsImlzQW55U2lkZUZ1bGx5Q2xpcHBlZCIsInNpZGUiLCJfb3B0aW9ucyRzY3JvbGwiLCJfb3B0aW9ucyRyZXNpemUiLCJyZXNpemUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwidHJhbnNpdGlvblByb3BlcnR5IiwiX29wdGlvbnMkZ3B1QWNjZWxlcmF0IiwiX29wdGlvbnMkYWRhcHRpdmUiLCJwcm9wZXJ0eSIsImFycm93IiwiZGF0YS1wb3BwZXItcGxhY2VtZW50IiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwiaW5pdGlhbFN0eWxlcyIsImF0dHJpYnV0ZSIsIl9vcHRpb25zJG9mZnNldCIsImludmVydERpc3RhbmNlIiwic2tpZGRpbmciLCJkaXN0YW5jZSIsIl9kYXRhJHN0YXRlJHBsYWNlbWVudCIsIl9za2lwIiwiX29wdGlvbnMkbWFpbkF4aXMiLCJjaGVja01haW5BeGlzIiwiX29wdGlvbnMkYWx0QXhpcyIsImFsdEF4aXMiLCJjaGVja0FsdEF4aXMiLCJzcGVjaWZpZWRGYWxsYmFja1BsYWNlbWVudHMiLCJmYWxsYmFja1BsYWNlbWVudHMiLCJfb3B0aW9ucyRmbGlwVmFyaWF0aW8iLCJmbGlwVmFyaWF0aW9ucyIsImFsbG93ZWRBdXRvUGxhY2VtZW50cyIsInByZWZlcnJlZFBsYWNlbWVudCIsIm9wcG9zaXRlUGxhY2VtZW50IiwiZ2V0RXhwYW5kZWRGYWxsYmFja1BsYWNlbWVudHMiLCJfb3B0aW9ucyRhbGxvd2VkQXV0b1AiLCJvdmVyZmxvd3MiLCJjb21wdXRlQXV0b1BsYWNlbWVudCIsInJlZmVyZW5jZVJlY3QiLCJjaGVja3NNYXAiLCJtYWtlRmFsbGJhY2tDaGVja3MiLCJmaXJzdEZpdHRpbmdQbGFjZW1lbnQiLCJfYmFzZVBsYWNlbWVudCIsImlzU3RhcnRWYXJpYXRpb24iLCJpc1ZlcnRpY2FsIiwibWFpblZhcmlhdGlvblNpZGUiLCJhbHRWYXJpYXRpb25TaWRlIiwiY2hlY2tzIiwiZXZlcnkiLCJjaGVjayIsIl9sb29wIiwiZml0dGluZ1BsYWNlbWVudCIsIm1haW5TaWRlIiwiYWx0U2lkZSIsImFkZGl0aXZlIiwibWluTGVuIiwibWF4TGVuIiwiYXJyb3dFbGVtZW50IiwiYXJyb3dSZWN0IiwiYXJyb3dQYWRkaW5nT2JqZWN0IiwiYXJyb3dQYWRkaW5nTWluIiwiYXJyb3dQYWRkaW5nTWF4IiwiYXJyb3dMZW4iLCJtaW5PZmZzZXQiLCJtYXhPZmZzZXQiLCJhcnJvd09mZnNldFBhcmVudCIsImNsaWVudE9mZnNldCIsIm9mZnNldE1vZGlmaWVyVmFsdWUiLCJ0ZXRoZXJNaW4iLCJ0ZXRoZXJNYXgiLCJwcmV2ZW50ZWRPZmZzZXQiLCJfbWFpblNpZGUiLCJfYWx0U2lkZSIsIl9vZmZzZXQiLCJfcHJldmVudGVkT2Zmc2V0IiwiX29wdGlvbnMkdGV0aGVyIiwidGV0aGVyIiwiX29wdGlvbnMkdGV0aGVyT2Zmc2V0IiwidGV0aGVyT2Zmc2V0IiwiaXNCYXNlUGxhY2VtZW50IiwidGV0aGVyT2Zmc2V0VmFsdWUiLCJfc3RhdGUkbW9kaWZpZXJzRGF0YSQiLCJtaW5Qcm9wIiwibWF4UHJvcCIsImVuZERpZmYiLCJzdGFydERpZmYiLCJjbGllbnRTaXplIiwiY2VudGVyVG9SZWZlcmVuY2UiLCJjZW50ZXIiLCJjZW50ZXJPZmZzZXQiLCJfb3B0aW9ucyRlbGVtZW50IiwicXVlcnlTZWxlY3RvciIsInByZXZlbnRPdmVyZmxvdyIsInJlZmVyZW5jZU92ZXJmbG93IiwicG9wcGVyQWx0T3ZlcmZsb3ciLCJyZWZlcmVuY2VDbGlwcGluZ09mZnNldHMiLCJwb3BwZXJFc2NhcGVPZmZzZXRzIiwiaXNSZWZlcmVuY2VIaWRkZW4iLCJoYXNQb3BwZXJFc2NhcGVkIiwiZGF0YS1wb3BwZXItcmVmZXJlbmNlLWhpZGRlbiIsImRhdGEtcG9wcGVyLWVzY2FwZWQiLCJjcmVhdGVQb3BwZXIiLCJiNjQiLCJsZW5zIiwiZ2V0TGVucyIsInZhbGlkTGVuIiwicGxhY2VIb2xkZXJzTGVuIiwidG9CeXRlQXJyYXkiLCJ0bXAiLCJBcnIiLCJfYnl0ZUxlbmd0aCIsImN1ckJ5dGUiLCJyZXZMb29rdXAiLCJjaGFyQ29kZUF0IiwiZnJvbUJ5dGVBcnJheSIsInVpbnQ4IiwiZXh0cmFCeXRlcyIsInBhcnRzIiwibGVuMiIsImVuY29kZUNodW5rIiwibG9va3VwIiwiYmFzZTY0IiwiaWVlZTc1NCIsImN1c3RvbUluc3BlY3RTeW1ib2wiLCJmb3IiLCJTbG93QnVmZmVyIiwiYWxsb2MiLCJJTlNQRUNUX01BWF9CWVRFUyIsIktfTUFYX0xFTkdUSCIsImNyZWF0ZUJ1ZmZlciIsIlJhbmdlRXJyb3IiLCJidWYiLCJlbmNvZGluZ09yT2Zmc2V0IiwiZnJvbSIsImFsbG9jVW5zYWZlIiwic3RyaW5nIiwiZW5jb2RpbmciLCJpc0VuY29kaW5nIiwiYWN0dWFsIiwiZnJvbVN0cmluZyIsImlzVmlldyIsImZyb21BcnJheUxpa2UiLCJpc0luc3RhbmNlIiwiZnJvbUFycmF5QnVmZmVyIiwiU2hhcmVkQXJyYXlCdWZmZXIiLCJ2YWx1ZU9mIiwib2JqIiwiaXNCdWZmZXIiLCJjaGVja2VkIiwiY29weSIsIm51bWJlcklzTmFOIiwiZnJvbU9iamVjdCIsInRvUHJpbWl0aXZlIiwiYXNzZXJ0U2l6ZSIsInNpemUiLCJhcnJheSIsImJ5dGVPZmZzZXQiLCJtdXN0TWF0Y2giLCJsb3dlcmVkQ2FzZSIsInV0ZjhUb0J5dGVzIiwiYmFzZTY0VG9CeXRlcyIsInN3YXAiLCJiaWRpcmVjdGlvbmFsSW5kZXhPZiIsImRpciIsImFycmF5SW5kZXhPZiIsImluZGV4U2l6ZSIsImFyckxlbmd0aCIsInZhbExlbmd0aCIsInJlYWQiLCJyZWFkVUludDE2QkUiLCJmb3VuZEluZGV4IiwiZm91bmQiLCJqIiwiaGV4V3JpdGUiLCJOdW1iZXIiLCJyZW1haW5pbmciLCJzdHJMZW4iLCJwYXJzZWQiLCJhc2NpaVdyaXRlIiwiYmxpdEJ1ZmZlciIsImJ5dGVBcnJheSIsImFzY2lpVG9CeXRlcyIsInVjczJXcml0ZSIsInVuaXRzIiwiaGkiLCJsbyIsInV0ZjE2bGVUb0J5dGVzIiwiYmFzZTY0U2xpY2UiLCJ1dGY4U2xpY2UiLCJyZXMiLCJzZWNvbmRCeXRlIiwidGhpcmRCeXRlIiwiZm91cnRoQnl0ZSIsInRlbXBDb2RlUG9pbnQiLCJmaXJzdEJ5dGUiLCJjb2RlUG9pbnQiLCJieXRlc1BlclNlcXVlbmNlIiwiY29kZVBvaW50cyIsIk1BWF9BUkdVTUVOVFNfTEVOR1RIIiwiZGVjb2RlQ29kZVBvaW50c0FycmF5Iiwia01heExlbmd0aCIsIlRZUEVEX0FSUkFZX1NVUFBPUlQiLCJwcm90byIsImZvbyIsInR5cGVkQXJyYXlTdXBwb3J0IiwicG9vbFNpemUiLCJmaWxsIiwiYWxsb2NVbnNhZmVTbG93IiwiX2lzQnVmZmVyIiwiY29tcGFyZSIsInBvcyIsInN3YXAxNiIsInN3YXAzMiIsInN3YXA2NCIsImhleFNsaWNlIiwiYXNjaWlTbGljZSIsImxhdGluMVNsaWNlIiwidXRmMTZsZVNsaWNlIiwiZXF1YWxzIiwiaW5zcGVjdCIsInRyaW0iLCJ0aGlzU3RhcnQiLCJ0aGlzRW5kIiwidGhpc0NvcHkiLCJ0YXJnZXRDb3B5IiwiaW5jbHVkZXMiLCJpc0Zpbml0ZSIsInRvSlNPTiIsIl9hcnIiLCJyZXQiLCJvdXQiLCJoZXhTbGljZUxvb2t1cFRhYmxlIiwiYnl0ZXMiLCJjaGVja09mZnNldCIsImV4dCIsImNoZWNrSW50IiwiY2hlY2tJRUVFNzU0Iiwid3JpdGVGbG9hdCIsImxpdHRsZUVuZGlhbiIsIm5vQXNzZXJ0Iiwid3JpdGVEb3VibGUiLCJuZXdCdWYiLCJzdWJhcnJheSIsInJlYWRVSW50TEUiLCJtdWwiLCJyZWFkVUludEJFIiwicmVhZFVJbnQ4IiwicmVhZFVJbnQxNkxFIiwicmVhZFVJbnQzMkxFIiwicmVhZFVJbnQzMkJFIiwicmVhZEludExFIiwicG93IiwicmVhZEludEJFIiwicmVhZEludDgiLCJyZWFkSW50MTZMRSIsInJlYWRJbnQxNkJFIiwicmVhZEludDMyTEUiLCJyZWFkSW50MzJCRSIsInJlYWRGbG9hdExFIiwicmVhZEZsb2F0QkUiLCJyZWFkRG91YmxlTEUiLCJyZWFkRG91YmxlQkUiLCJ3cml0ZVVJbnRMRSIsIndyaXRlVUludEJFIiwid3JpdGVVSW50OCIsIndyaXRlVUludDE2TEUiLCJ3cml0ZVVJbnQxNkJFIiwid3JpdGVVSW50MzJMRSIsIndyaXRlVUludDMyQkUiLCJ3cml0ZUludExFIiwibGltaXQiLCJzdWIiLCJ3cml0ZUludEJFIiwid3JpdGVJbnQ4Iiwid3JpdGVJbnQxNkxFIiwid3JpdGVJbnQxNkJFIiwid3JpdGVJbnQzMkxFIiwid3JpdGVJbnQzMkJFIiwid3JpdGVGbG9hdExFIiwid3JpdGVGbG9hdEJFIiwid3JpdGVEb3VibGVMRSIsIndyaXRlRG91YmxlQkUiLCJ0YXJnZXRTdGFydCIsImNvcHlXaXRoaW4iLCJJTlZBTElEX0JBU0U2NF9SRSIsIkluZmluaXR5IiwibGVhZFN1cnJvZ2F0ZSIsImJhc2U2NGNsZWFuIiwic3JjIiwiZHN0IiwiYWxwaGFiZXQiLCJ0YWJsZSIsImkxNiIsImlzTEUiLCJtTGVuIiwibkJ5dGVzIiwiZUxlbiIsImVNYXgiLCJlQmlhcyIsIm5CaXRzIiwiTmFOIiwicnQiLCJhYnMiLCJpc05hTiIsIkxOMiIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJjdXJyZW50UXVldWUiLCJxdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJydW4iLCJtYXJrZXIiLCJydW5DbGVhclRpbWVvdXQiLCJJdGVtIiwibm9vcCIsIm5leHRUaWNrIiwiYnJvd3NlciIsImFyZ3YiLCJhZGRMaXN0ZW5lciIsIm9uY2UiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsImVtaXQiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdGVuZXJzIiwiYmluZGluZyIsImN3ZCIsImNoZGlyIiwidW1hc2siLCJjb3JlIiwiUEFTU0lWRSIsIklPU19DTEFTUyIsIkNPTlRFTlRfQ0xBU1MiLCJCQUNLRFJPUF9DTEFTUyIsIkFSUk9XX0NMQVNTIiwiU1ZHX0FSUk9XX0NMQVNTIiwiZ2V0VmFsdWVBdEluZGV4T3JSZXR1cm4iLCJkZWZhdWx0VmFsdWUiLCJpc1R5cGUiLCJpbnZva2VXaXRoQXJnc09yUmV0dXJuIiwiZGVib3VuY2UiLCJtcyIsInJlbW92ZVByb3BlcnRpZXMiLCJjbG9uZSIsIm5vcm1hbGl6ZVRvQXJyYXkiLCJwdXNoSWZVbmlxdWUiLCJhcnJheUZyb20iLCJkaXYiLCJpc01vdXNlRXZlbnQiLCJpc1JlZmVyZW5jZUVsZW1lbnQiLCJnZXRBcnJheU9mRWxlbWVudHMiLCJxdWVyeVNlbGVjdG9yQWxsIiwic2V0VHJhbnNpdGlvbkR1cmF0aW9uIiwiZWxzIiwiZWwiLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJzZXRWaXNpYmlsaXR5U3RhdGUiLCJnZXRPd25lckRvY3VtZW50IiwiZWxlbWVudE9yRWxlbWVudHMiLCJ1cGRhdGVUcmFuc2l0aW9uRW5kTGlzdGVuZXIiLCJib3giLCJhY3Rpb24iLCJsaXN0ZW5lciIsImN1cnJlbnRJbnB1dCIsImlzVG91Y2giLCJsYXN0TW91c2VNb3ZlVGltZSIsIm9uRG9jdW1lbnRUb3VjaFN0YXJ0IiwicGVyZm9ybWFuY2UiLCJvbkRvY3VtZW50TW91c2VNb3ZlIiwib25XaW5kb3dCbHVyIiwiYWN0aXZlRWxlbWVudCIsImJsdXIiLCJpc1Zpc2libGUiLCJ1YSIsImlzSUUiLCJpc0lPUyIsImNyZWF0ZU1lbW9yeUxlYWtXYXJuaW5nIiwiY2xlYW4iLCJnZXRGb3JtYXR0ZWRNZXNzYWdlIiwid2FybldoZW4iLCJjb25kaXRpb24iLCJfY29uc29sZSIsImVycm9yV2hlbiIsIl9jb25zb2xlMiIsInBsdWdpblByb3BzIiwiYW5pbWF0ZUZpbGwiLCJmb2xsb3dDdXJzb3IiLCJpbmxpbmVQb3NpdGlvbmluZyIsInN0aWNreSIsImRlZmF1bHRQcm9wcyIsImFwcGVuZFRvIiwiYXJpYSIsImV4cGFuZGVkIiwiZGVsYXkiLCJkdXJhdGlvbiIsImdldFJlZmVyZW5jZUNsaWVudFJlY3QiLCJoaWRlT25DbGljayIsImlnbm9yZUF0dHJpYnV0ZXMiLCJpbnRlcmFjdGl2ZSIsImludGVyYWN0aXZlQm9yZGVyIiwiaW50ZXJhY3RpdmVEZWJvdW5jZSIsIm1vdmVUcmFuc2l0aW9uIiwib25BZnRlclVwZGF0ZSIsIm9uQmVmb3JlVXBkYXRlIiwib25DcmVhdGUiLCJvbkRlc3Ryb3kiLCJvbkhpZGRlbiIsIm9uSGlkZSIsIm9uTW91bnQiLCJvblNob3ciLCJvblNob3duIiwib25UcmlnZ2VyIiwib25VbnRyaWdnZXIiLCJvbkNsaWNrT3V0c2lkZSIsInBsdWdpbnMiLCJwb3BwZXJPcHRpb25zIiwicmVuZGVyIiwic2hvd09uQ3JlYXRlIiwidG91Y2giLCJ0cmlnZ2VyIiwidHJpZ2dlclRhcmdldCIsImFuaW1hdGlvbiIsImluZXJ0aWEiLCJtYXhXaWR0aCIsInJvbGUiLCJ0aGVtZSIsInpJbmRleCIsImRlZmF1bHRLZXlzIiwiZ2V0RXh0ZW5kZWRQYXNzZWRQcm9wcyIsInBhc3NlZFByb3BzIiwicGx1Z2luIiwiZXZhbHVhdGVQcm9wcyIsInByb3BzIiwidmFsdWVBc1N0cmluZyIsImdldEF0dHJpYnV0ZSIsInZhbGlkYXRlUHJvcHMiLCJwYXJ0aWFsUHJvcHMiLCJwcm9wIiwibm9uUGx1Z2luUHJvcHMiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsImh0bWwiLCJjcmVhdGVBcnJvd0VsZW1lbnQiLCJjbGFzc05hbWUiLCJzZXRDb250ZW50IiwiZ2V0Q2hpbGRyZW4iLCJmaXJzdEVsZW1lbnRDaGlsZCIsImJveENoaWxkcmVuIiwiY2hpbGRyZW4iLCJiYWNrZHJvcCIsIm9uVXBkYXRlIiwicHJldlByb3BzIiwibmV4dFByb3BzIiwiX2dldENoaWxkcmVuIiwicmVtb3ZlQ2hpbGQiLCIkJHRpcHB5IiwiaWRDb3VudGVyIiwibW91c2VNb3ZlTGlzdGVuZXJzIiwibW91bnRlZEluc3RhbmNlcyIsImNyZWF0ZVRpcHB5Iiwic2hvd1RpbWVvdXQiLCJoaWRlVGltZW91dCIsInNjaGVkdWxlSGlkZUFuaW1hdGlvbkZyYW1lIiwibGFzdFRyaWdnZXJFdmVudCIsImN1cnJlbnRUcmFuc2l0aW9uRW5kTGlzdGVuZXIiLCJjdXJyZW50VGFyZ2V0IiwiaXNWaXNpYmxlRnJvbUNsaWNrIiwiZGlkSGlkZUR1ZVRvRG9jdW1lbnRNb3VzZURvd24iLCJpZ25vcmVPbkZpcnN0VXBkYXRlIiwiZGVib3VuY2VkT25Nb3VzZU1vdmUiLCJvbk1vdXNlTW92ZSIsImRvYyIsInBvcHBlckluc3RhbmNlIiwiaXNFbmFibGVkIiwiaXNNb3VudGVkIiwiaXNTaG93biIsImNsZWFyRGVsYXlUaW1lb3V0cyIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwic2V0UHJvcHMiLCJpbnZva2VIb29rIiwicmVtb3ZlTGlzdGVuZXJzIiwiYWRkTGlzdGVuZXJzIiwiY2xlYW51cEludGVyYWN0aXZlTW91c2VMaXN0ZW5lcnMiLCJoYW5kbGVBcmlhRXhwYW5kZWRBdHRyaWJ1dGUiLCJoYW5kbGVTdHlsZXMiLCJjcmVhdGVQb3BwZXJJbnN0YW5jZSIsImdldE5lc3RlZFBvcHBlclRyZWUiLCJuZXN0ZWRQb3BwZXIiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJzaG93IiwiaXNBbHJlYWR5VmlzaWJsZSIsImlzRGlzYWJsZWQiLCJpc1RvdWNoQW5kVG91Y2hEaXNhYmxlZCIsImdldEN1cnJlbnRUYXJnZXQiLCJoYXNBdHRyaWJ1dGUiLCJnZXRJc0RlZmF1bHRSZW5kZXJGbiIsInZpc2liaWxpdHkiLCJhZGREb2N1bWVudE1vdXNlRG93bkxpc3RlbmVyIiwidHJhbnNpdGlvbiIsIl9nZXREZWZhdWx0VGVtcGxhdGVDaDIiLCJnZXREZWZhdWx0VGVtcGxhdGVDaGlsZHJlbiIsIl9nZXREZWZhdWx0VGVtcGxhdGVDaDMiLCJfYm94IiwiX2NvbnRlbnQiLCJoYW5kbGVBcmlhQ29udGVudEF0dHJpYnV0ZSIsInVwZGF0ZUlPU0NsYXNzIiwib25UcmFuc2l0aW9uRW5kIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwibW91bnQiLCJoaWRlIiwiaXNBbHJlYWR5SGlkZGVuIiwiX2dldERlZmF1bHRUZW1wbGF0ZUNoNCIsInJlbW92ZURvY3VtZW50TW91c2VEb3duTGlzdGVuZXIiLCJvblRyYW5zaXRpb25lZE91dCIsInVubW91bnQiLCJlbmFibGUiLCJkaXNhYmxlIiwiZGVzdHJveVBvcHBlckluc3RhbmNlIiwiX3Byb3BzJHJlbmRlciIsInBsdWdpbnNIb29rcyIsImhhc0FyaWFFeHBhbmRlZCIsInNjaGVkdWxlU2hvdyIsImdldE5vcm1hbGl6ZWRUb3VjaFNldHRpbmdzIiwiZ2V0SXNDdXN0b21Ub3VjaEJlaGF2aW9yIiwiX2luc3RhbmNlJHByb3BzJHJlbmRlIiwiZ2V0RGVsYXkiLCJpc1Nob3ciLCJwb2ludGVyRXZlbnRzIiwiaXNBZGQiLCJzaG91bGRBZGQiLCJob29rIiwic2hvdWxkSW52b2tlUHJvcHNIb29rIiwiX2luc3RhbmNlJHByb3BzIiwicGx1Z2luSG9va3MiLCJhdHRyIiwibmV4dFZhbHVlIiwiY3VycmVudFZhbHVlIiwic2NoZWR1bGVIaWRlIiwib25Eb2N1bWVudE1vdXNlRG93biIsImV2ZW50VHlwZSIsImhhbmRsZXIiLCJvbk1vdXNlTGVhdmUiLCJvbkJsdXJPckZvY3VzT3V0IiwiX2dldE5vcm1hbGl6ZWRUb3VjaFNlIiwic2hvdWxkU2NoZWR1bGVDbGlja0hpZGUiLCJpc0V2ZW50TGlzdGVuZXJTdG9wcGVkIiwicG9wcGVyVHJlZURhdGEiLCJjbGllbnRYIiwiY2xpZW50WSIsImlzQ3Vyc29yT3ZlclJlZmVyZW5jZU9yUG9wcGVyIiwiX2luc3RhbmNlJHBvcHBlckluc3RhIiwicG9wcGVyU3RhdGUiLCJ0b3BEaXN0YW5jZSIsImJvdHRvbURpc3RhbmNlIiwibGVmdERpc3RhbmNlIiwicmlnaHREaXN0YW5jZSIsImV4Y2VlZHNUb3AiLCJleGNlZWRzQm90dG9tIiwiZXhjZWVkc0xlZnQiLCJleGNlZWRzUmlnaHQiLCJyZWxhdGVkVGFyZ2V0IiwiX2luc3RhbmNlJHByb3BzMiIsImNvbXB1dGVkUmVmZXJlbmNlIiwidGlwcHlNb2RpZmllciIsImFycm93TW9kaWZpZXIiLCJ0aXBweSIsInRhcmdldHMiLCJvcHRpb25hbFByb3BzIiwiZGlkUGFzc0ZhbHN5VmFsdWUiLCJkaWRQYXNzUGxhaW5PYmplY3QiLCJjYXB0dXJlIiwiaXNTaW5nbGVDb250ZW50RWxlbWVudCIsImlzTW9yZVRoYW5PbmVSZWZlcmVuY2VFbGVtZW50IiwiaW5zdGFuY2VzIiwic2V0RGVmYXVsdFByb3BzIiwiQlVCQkxJTkdfRVZFTlRTX01BUCIsIm1vdXNlb3ZlciIsImZvY3VzaW4iLCJjbGljayIsImluc2VydEJlZm9yZSIsInRyYW5zaXRpb25EZWxheSIsImluaXRpYWxNb3VzZUNvb3JkcyIsImdldElzTWFudWFsIiwiZ2V0SXNFbmFibGVkIiwiaXNWYWxpZE1vdXNlRXZlbnQiLCJ1bnNldFJlZmVyZW5jZUNsaWVudFJlY3QiLCJzaG91bGRVbnNldCIsImhhbmRsZU1vdXNlTW92ZUxpc3RlbmVyIiwiaXNDdXJzb3JPdmVyUmVmZXJlbmNlIiwicmVsYXRpdmVYIiwicmVsYXRpdmVZIiwiY3VycmVudEJhc2VQbGFjZW1lbnQiLCJib3VuZGluZ1JlY3QiLCJjbGllbnRSZWN0cyIsImZpcnN0UmVjdCIsImxhc3RSZWN0IiwiaXNUb3AiLCJtaW5MZWZ0IiwibWF4UmlnaHQiLCJtZWFzdXJlUmVjdHMiLCJfdG9wIiwiX2JvdHRvbSIsImdldElubGluZUJvdW5kaW5nQ2xpZW50UmVjdCIsImdldENsaWVudFJlY3RzIiwiX2luc3RhbmNlJHByb3BzJHBvcHBlIiwic2hvdWxkQ2hlY2siLCJwcmV2UmVmUmVjdCIsInByZXZQb3BSZWN0IiwidXBkYXRlUG9zaXRpb24iLCJjdXJyZW50UmVmUmVjdCIsImN1cnJlbnRQb3BSZWN0IiwiYXJlUmVjdHNEaWZmZXJlbnQiLCJyZWN0QSIsInJlY3RCIiwiY3JlYXRlU2luZ2xldG9uIiwidGlwcHlJbnN0YW5jZXMiLCJyZWZlcmVuY2VzIiwic2luZ2xldG9uIiwib3ZlcnJpZGVQcm9wcyIsIm92ZXJyaWRlcyIsImRlZmF1bHQiLCJkZWxlZ2F0ZSIsImNoaWxkVGlwcHlJbnN0YW5jZXMiLCJuYXRpdmVQcm9wcyIsInBhcmVudFByb3BzIiwiY2hpbGRQcm9wcyIsInJldHVyblZhbHVlIiwidGFyZ2V0Tm9kZSIsImNsb3Nlc3QiLCJvcmlnaW5hbERlc3Ryb3kiLCJzaG91bGREZXN0cm95Q2hpbGRJbnN0YW5jZXMiLCJoaWRlQWxsIiwiX3RlbXAiLCJleGNsdWRlZFJlZmVyZW5jZU9ySW5zdGFuY2UiLCJleGNsdWRlIiwib3JpZ2luYWxEdXJhdGlvbiIsImlzRXhjbHVkZWQiLCJyb3VuZEFycm93Il0sIm1hcHBpbmdzIjoiQ0FBQSxTQUFBQSxFQUFBQyxFQUFBQyxFQUFBQyxHQUFBLFNBQUFDLEVBQUFDLEVBQUFDLEdBQUEsSUFBQUosRUFBQUcsR0FBQSxDQUFBLElBQUFKLEVBQUFJLEdBQUEsQ0FBQSxJQUFBRSxFQUFBLG1CQUFBQyxTQUFBQSxRQUFBLElBQUFGLEdBQUFDLEVBQUEsT0FBQUEsRUFBQUYsR0FBQSxHQUFBLEdBQUFJLEVBQUEsT0FBQUEsRUFBQUosR0FBQSxHQUFBLElBQUFLLEVBQUEsSUFBQUMsTUFBQSx1QkFBQU4sRUFBQSxLQUFBLE1BQUFLLEVBQUFFLEtBQUEsbUJBQUFGLEVBQUEsSUFBQUcsRUFBQVgsRUFBQUcsR0FBQSxDQUFBUyxRQUFBLElBQUFiLEVBQUFJLEdBQUEsR0FBQVUsS0FBQUYsRUFBQUMsUUFBQSxTQUFBZCxHQUFBLE9BQUFJLEVBQUFILEVBQUFJLEdBQUEsR0FBQUwsSUFBQUEsSUFBQWEsRUFBQUEsRUFBQUMsUUFBQWQsRUFBQUMsRUFBQUMsRUFBQUMsR0FBQSxPQUFBRCxFQUFBRyxHQUFBUyxRQUFBLElBQUEsSUFBQUwsRUFBQSxtQkFBQUQsU0FBQUEsUUFBQUgsRUFBQSxFQUFBQSxFQUFBRixFQUFBYSxPQUFBWCxJQUFBRCxFQUFBRCxFQUFBRSxJQUFBLE9BQUFELEVBQUEsQ0FBQSxDQUFBYSxFQUFBLENBQUEsU0FBQVQsRUFBQVUsRUFBQUosZ0IscU9DQUMsSSxFQUFBSyxFLHFhQUFBQyxDQUFBWixFQUFBLHVCQUNEYSxHLEVBQUFiLEVBQUEsYyxvSUFFQSxJQUFNYyxFQUFhQyxTQUFTQyxlQUFlLGtCQUN2Q0YsSUFDQUEsRUFBV0csb0JBQXFCLEVBQ2hDSCxFQUFXSSxVQUFXLEdBRTFCLElBQU1DLEVBQVlKLFNBQVNDLGVBQWUsOEJBRTFDSSxPQUFPQyxZQUFjLENBQ2pCQyxXQUFZLEtBQ1pDLGNBQWUsS0FDZkMsY0FBZSxRQUVmQyxLQUFNLFNBQVVDLEVBQUtGLEVBQWVHLEVBQVNDLEdBSXpDLEdBSEFSLE9BQU9DLFlBQVlHLGNBQWdCQSxFQUVuQ0osT0FBT0MsWUFBWUUsY0FBZ0JSLFNBQVNDLGVBQWUsMEJBQ25CLE1BQXBDSSxPQUFPQyxZQUFZRSxjQUF2QixDQUlBSyxFQUFXQyxLQUFLQyxNQUFNRixJQUFhLEdBQ25DLElBQUssSUFJR0csRUFKQ0MsRUFBSSxFQUFHQSxFQUFJSixFQUFTcEIsT0FBUXdCLElBQ2pDWixPQUFPQyxZQUFZWSxXQUFXTCxFQUFTSSxJQUVyQixFQUFsQkosRUFBU3BCLFNBRUcsT0FEUnVCLEVBQU9oQixTQUFTQyxlQUFULG9CQUFBa0IsT0FBNENOLEVBQVNBLEVBQVNwQixPQUFTLEdBQUcyQixPQUNqRUosRUFBS0ssVUFBVUMsU0FBUyx3QkFDeENOLEVBQUtLLFVBQVVFLElBQUksYUFJdkJaLEdBQU9BLEVBQUlsQixRQUFVbUIsR0FBV0EsRUFBUW5CLFNBQ3hDWSxPQUFPQyxZQUFZQyxZQUFhLElBQUlYLEVBQy9CNEIsc0JBQ0FDLFFBQVFkLEdBQ1JlLHlCQUNBQyxRQUVMdEIsT0FBT0MsWUFBWUMsV0FBV3FCLEdBQUcsVUFBV3ZCLE9BQU9DLFlBQVlZLFlBRS9EYixPQUFPQyxZQUFZQyxXQUFXc0IsUUFBUUMsS0FBSyxXQUN2Qy9CLEVBQVdHLG9CQUFxQixJQURwQyxNQUVTLFNBQVU2QixHQUVmLE9BQU9DLFFBQVFDLE1BQU0sZ0RBR3JCN0IsSUFDQUEsRUFBVThCLGlCQUFpQixRQUFTLFdBQzNCbkMsRUFBV0cscUJBQ1pILEVBQVdJLFdBQVlDLEVBQVUrQixPQUFvQyxFQUF6Qi9CLEVBQVUrQixNQUFNMUMsV0FJcEVXLEVBQVU4QixpQkFBaUIsV0FBWSxTQUFVRSxHQUN2QixLQUFsQkEsRUFBTUMsU0FBbUJELEVBQU1FLFdBQy9CakMsT0FBT0MsWUFBWWlDLFlBQVkzQixFQUFTUixFQUFVK0IsT0FDbERDLEVBQU1JLGlCQUNOSixFQUFNSyxzQkFLZDFDLEdBQ0FBLEVBQVdtQyxpQkFBaUIsUUFBUyxTQUFVRSxHQUMzQy9CLE9BQU9DLFlBQVlpQyxZQUFZM0IsRUFBU1IsRUFBVStCLE9BQ2xEQyxFQUFNSSxpQkFDTkosRUFBTUssdUJBTXRCdkIsV0FBWSxTQUFVd0IsR0FDbEIsSUFJSUMsRUFPQUMsRUFLQUMsRUFHQUMsRUFLQUMsRUFJQUMsRUFJQUMsRUFHSUMsRUFPQUMsRUFNSkMsRUFJQUMsRUFJQUMsRUFHQUMsRUFRQUMsRUFJQUMsRUFHQUMsRUFJQUMsRUE4RElDLEVBR0lDLEVBekRKQyxFQUlBQyxFQUlBQyxFQUtBQyxFQUtBQyxFQXhHTyxNQUFYeEIsR0FBc0MsTUFBbkJBLEVBQVFlLFNBQTZDLE1BQTFCZixFQUFRZSxRQUFRaEUsUUFBNkMsRUFBekJpRCxFQUFRZSxRQUFRaEUsVUFJbEdrRCxFQUFvQyxNQUExQkQsRUFBUXlCLGdCQUEyRCxNQUFqQ3pCLEVBQVF5QixlQUFlMUUsUUFBa0QsRUFBaENpRCxFQUFReUIsZUFBZTFFLFNBQzlGLHE4ZEFDUzJFLEtBQUsxQixFQUFRZSxTQUNwQ1ksS0FBS0MsWUFBWTVCLElBS0gsT0FEZEUsRUFBYTVDLFNBQVNDLGVBQWUsMEJBRXJDMkMsRUFBVzJCLFVBR1gxQixFQUFZN0MsU0FBU3dFLGNBQWMsT0FDN0JwRCxHQUFWLGdCQUFBRCxPQUErQnVCLEVBQVF0QixJQUVuQzBCLEVBQWE5QyxTQUFTd0UsY0FBYyxPQUN4QzNCLEVBQVU0QixZQUFZM0IsR0FDdEJBLEVBQVcxQixHQUFYLG9CQUFBRCxPQUFvQ3VCLEVBQVF0QixJQUM1QzBCLEVBQVd6QixVQUFVRSxJQUFJLGVBQWdCLGNBQWUsYUFFcER3QixFQUFnQi9DLFNBQVN3RSxjQUFjLE9BQzNDMUIsRUFBVzJCLFlBQVkxQixHQUN2QkEsRUFBYzFCLFVBQVVFLElBQUksdUJBRXhCeUIsRUFBU2hELFNBQVN3RSxjQUFjLFFBQ3BDekIsRUFBYzBCLFlBQVl6QixHQUMxQkEsRUFBTzNCLFVBQVVFLElBQUksdUJBRWpCMEIsRUFBV2pELFNBQVMwRSxlQUFlaEMsRUFBUWlDLFlBRTNDakMsRUFBUWtDLGNBQ0oxQixFQUFXbEQsU0FBU3dFLGNBQWMsS0FDdEN4QixFQUFPeUIsWUFBWXZCLEdBQ25CQSxFQUFTN0IsVUFBVUUsSUFBSSxnQkFBaUIsc0JBQ3hDMkIsRUFBUzJCLEtBQVQsSUFBQTFELE9BQW9CZCxPQUFPQyxZQUFZRyxjQUF2QyxLQUFBVSxPQUF3RHVCLEVBQVFvQyxVQUNoRTVCLEVBQVM2QixNQUFULDJCQUFBNUQsT0FBNEN1QixFQUFRaUMsWUFDcER6QixFQUFTdUIsWUFBWXhCLEtBRWpCRSxFQUFXbkQsU0FBU3dFLGNBQWMsUUFDdEN4QixFQUFPeUIsWUFBWXRCLEdBQ25CNkIsU0FBUzNELFVBQVVFLElBQUksZ0JBQWlCLHdCQUN4Q3lELFNBQVNQLFlBQVl4QixJQUdyQkcsRUFBZ0JwRCxTQUFTd0UsY0FBYyxRQUMzQ3pCLEVBQWMwQixZQUFZckIsR0FDMUJBLEVBQWMvQixVQUFVRSxJQUFJLHlCQUE1QiwwQkFBQUosT0FBZ0Z1QixFQUFRdEIsS0FFcEZpQyxFQUFtQnJELFNBQVN3RSxjQUFjLFFBQzlDekIsRUFBYzBCLFlBQVlwQixHQUMxQkEsRUFBaUJoQyxVQUFVRSxJQUFJLDBCQUUzQitCLEVBQVl0RCxTQUFTMEUsZUFBZSxJQUFJTyxLQUFNdkMsRUFBUVksVUFBWSxJQUFTLFlBQWU0QixrQkFDOUY3QixFQUFpQm9CLFlBQVluQixHQUV6QkMsRUFBZ0J2RCxTQUFTd0UsY0FBYyxPQUMzQ3pCLEVBQWMwQixZQUFZbEIsR0FDMUJBLEVBQWNsQyxVQUFVRSxJQUFJLCtCQUM1QmdDLEVBQWM0QixVQUFZLGlIQUMxQjVCLEVBQWM2QixRQUFVLFNBQVVoRCxHQUM5QkEsRUFBTWlELE9BQU9DLGNBQWNBLGNBQWNqRSxVQUFVa0UsT0FBTyxhQUcxRC9CLEVBQWlCeEQsU0FBU3dFLGNBQWMsT0FDNUMxQixFQUFXMkIsWUFBWWpCLEdBQ3ZCQSxFQUFlbkMsVUFBVUUsSUFBSSx3QkFFekJrQyxFQUFVekQsU0FBUzBFLGVBQWVoQyxFQUFRZSxTQUM5Q0QsRUFBZWlCLFlBQVloQixHQUV2QkMsRUFBa0IxRCxTQUFTd0UsY0FBYyxPQUM3QzFCLEVBQVcyQixZQUFZZixHQUN2QkEsRUFBZ0JyQyxVQUFVRSxJQUFJLGlDQUUxQm9DLEVBQWEzRCxTQUFTd0UsY0FBYyxLQUN4Q2QsRUFBZ0JlLFlBQVlkLEdBQzVCQSxFQUFXa0IsS0FBTyx1QkFDbEJsQixFQUFXeUIsUUFBVSxTQUFVaEQsR0FDM0JBLEVBQU1pRCxPQUFPQyxjQUFjQSxjQUFjakUsVUFBVWtFLE9BQU8sY0FHekQ1QyxFQXdEYSxPQURWaUIsRUFBUzVELFNBQVNDLGVBQVQsb0JBQUFrQixPQUE0Q3VCLEVBQVF5QixvQkFFN0RQLEVBQU92QyxVQUFVRSxJQUFJLHVCQUVHLE9BRHBCc0MsRUFBbUJELEVBQU80QixxQkFBcUIsU0FFL0MzQixFQUFtQjdELFNBQVN3RSxjQUFjLE1BQzFDWixFQUFPYSxZQUFZWixJQUV2QkEsRUFBaUJZLFlBQVk1QixLQTlEN0JpQixFQUFXOUQsU0FBU3dFLGNBQWMsT0FDdEMxQixFQUFXMkIsWUFBWVgsR0FDdkJBLEVBQVN6QyxVQUFVRSxJQUFJLG1CQUVuQndDLEVBQVUvRCxTQUFTd0UsY0FBYyxPQUNyQ1YsRUFBU1csWUFBWVYsR0FDckJBLEVBQVExQyxVQUFVRSxJQUFJLGNBRWxCeUMsRUFBWWhFLFNBQVN3RSxjQUFjLFNBQ3ZDVCxFQUFRVSxZQUFZVCxHQUNwQkEsRUFBVXlCLFFBQVYsMkJBQUF0RSxPQUErQ3VCLEVBQVF0QixJQUN2RDRDLEVBQVUwQixZQUFjLFFBRXBCekIsRUFBZWpFLFNBQVN3RSxjQUFjLFlBQzFDVCxFQUFRVSxZQUFZUixHQUNwQkEsRUFBYTdDLEdBQWIsMkJBQUFELE9BQTZDdUIsRUFBUXRCLElBQ3JEMkMsRUFBUTFDLFVBQVVFLElBQUksZ0JBRWxCMkMsRUFBY2xFLFNBQVN3RSxjQUFjLFVBQ3pDVixFQUFTVyxZQUFZUCxHQUNyQkEsRUFBWTlDLEdBQVosMEJBQUFELE9BQTJDdUIsRUFBUXRCLElBQ25EOEMsRUFBWXlCLEtBQU8sU0FDbkJ6QixFQUFZN0MsVUFBVUUsSUFBSSxNQUFPLGVBQ2pDMkMsRUFBWXdCLFlBQWMsT0FDMUJ4QixFQUFZaEMsaUJBQWlCLFFBQVMsU0FBVUUsR0FDNUNBLEVBQVFBLEdBQVMvQixPQUFPK0IsTUFDeEIsSUFNSWhDLEVBSUF3RixFQVRBeEUsR0FEUzFDLEVBQUUyRyxRQUFVM0csRUFBRW1ILFlBQ1h6RSxHQUNOLE1BQU5BLEdBQTJCLE1BQWJBLEVBQUczQixRQUFrQjJCLEVBQUczQixRQUFVLEtBR3BEMkIsRUFBS0EsRUFBRzBFLE9BQU8sSUFFRSxPQURiMUYsRUFBWUosU0FBU0MsZUFBVCwyQkFBQWtCLE9BQW1EQyxNQUt0RCxPQURUd0UsRUFBUXhGLEVBQVUrQixRQUNlLE1BQWhCeUQsRUFBTW5HLFFBQW1DLEVBQWZtRyxFQUFNbkcsU0FHckRZLE9BQU9DLFlBQVlDLFdBQVd3RixPQUFPLE9BQVEsQ0FDekNDLFNBQVVKLEVBQ1ZLLFVBQVc3RSxFQUNYOEUsUUFBU3RGLFVBSGIsTUFJUyxTQUFVbUIsR0FFZixPQUFPQyxRQUFRQyxNQUFNLG9EQUV6QkcsRUFBTUksaUJBQ05KLEVBQU1LLHNCQUdWcEMsT0FBT0MsWUFBWUUsY0FBY2lFLFlBQVk1QixJQWNwQ3NELFNBQVNDLGlCQUFpQjVDLEdBQWdCNkMsaUJBQWlCLFdBQ3hERixTQUFTQyxpQkFBaUI1QyxHQUFnQjZDLGlCQUFpQixnQkFFdkV2RCxFQUFXekIsVUFBVWtELE9BQU8sa0JBSXBDRCxZQUFhLFNBQVVnQyxHQUNuQixJQUlJQyxFQUtBQyxFQVRZLE1BQVpGLEdBQTBDLE1BQXRCQSxFQUFTRyxhQUFnRCxNQUEzQkgsRUFBU25DLGdCQUE0RCxNQUFsQ21DLEVBQVNuQyxlQUFlMUUsUUFBcUQsRUFBakM2RyxFQUFTbkMsZUFBZTFFLFNBS25JLE9BRHRCOEcsRUFBcUJ2RyxTQUFTQyxlQUFULDBCQUFBa0IsT0FBa0RtRixFQUFTbkMsb0JBS2hGcUMsRUFBV0YsRUFBUzdDLFFBQVFpRCxRQUFRLGFBQWMsSUFFckMsTUFEREgsRUFBbUJ0RyxlQUFuQiwwQkFBQWtCLE9BQTREcUYsRUFBNUQsS0FBQXJGLE9BQXdFbUYsRUFBU0csYUFFakZwRyxPQUFPQyxZQUFZcUcsZ0JBQWdCTCxFQUFTbkMsZUFBZ0JtQyxFQUFTMUYsUUFBUzJGLEVBQW9CQyxFQUFVRixFQUFTN0MsU0FHcklwRCxPQUFPQyxZQUFZc0csa0JBQWtCTixFQUFVRSxLQUduREcsZ0JBQWlCLFNBQVVGLEVBQVc3RixFQUFTaUcsRUFBTUwsRUFBVS9DLEdBQzNELElBQUlxRCxFQUFtQjlHLFNBQVN3RSxjQUFjLFFBQzlDcUMsRUFBS3BDLFlBQVlxQyxHQUNqQkEsRUFBaUIxRixHQUFqQiwwQkFBQUQsT0FBZ0RxRixFQUFoRCxLQUFBckYsT0FBNERzRixHQUM1REssRUFBaUJ6RixVQUFVRSxJQUFJLDBCQUUvQixJQUFJd0YsRUFBbUIvRyxTQUFTd0UsY0FBYyxRQUM5Q3NDLEVBQWlCckMsWUFBWXNDLEdBQzdCQSxFQUFpQjFGLFVBQVVFLElBQUksOEJBQy9Cd0YsRUFBaUIzQixRQUFVLFNBQVVoRCxHQUNqQy9CLE9BQU9DLFlBQVlDLFdBQVd3RixPQUFPLE9BQVEsQ0FDekNDLFNBQVV2QyxFQUNWd0MsVUFBV1EsRUFDWFAsUUFBU3RGLElBSGIsTUFJUyxTQUFVbUIsR0FFZixPQUFPQyxRQUFRQyxNQUFNLGdFQUV6QkcsRUFBTUksaUJBQ05KLEVBQU1LLG1CQUdWLElBQUl1RSxFQUFvQmhILFNBQVN3RSxjQUFjLFFBQy9Dc0MsRUFBaUJyQyxZQUFZdUMsR0FDN0JGLEVBQWlCMUYsR0FBakIsK0JBQUFELE9BQXFEcUYsRUFBckQsS0FBQXJGLE9BQWlFc0YsR0FDakVPLEVBQWtCM0YsVUFBVUUsSUFBSSwrQkFFaEMsSUFBSTBGLEVBQWdCakgsU0FBUzBFLGVBQWUsS0FDNUNzQyxFQUFrQnZDLFlBQVl3QyxHQUU5QixJQUFJQyxFQUFlbEgsU0FBU3dFLGNBQWMsTUFjMUMsT0FiQXNDLEVBQWlCckMsWUFBWXlDLEdBQzdCQSxFQUFhOUYsR0FBYiw4QkFBQUQsT0FBZ0RxRixFQUFoRCxLQUFBckYsT0FBNERzRixHQUM1RFMsRUFBYTdGLFVBQVVFLElBQUksOEJBQzNCMkYsRUFBYUMsTUFBTUMsUUFBVSxRQUU3QixFQUFBdEgsRUFBQSxTQUFNZ0gsRUFBa0IsQ0FDcEJyRCxRQURvQixXQUVoQixPQUFPekQsU0FBU0MsZUFBVCw4QkFBQWtCLE9BQXNEcUYsRUFBdEQsS0FBQXJGLE9BQWtFc0YsSUFBYXRCLFdBRTFGa0MsVUFBVyxPQUNYQyxXQUFXLElBR1JSLEdBR1hGLGtCQXBTaUIsU0FvU0NOLEVBQVVFLEdBQ3hCLElBRVFlLEVBRkpDLEVBQVl4SCxTQUFTQyxlQUFULCtCQUFBa0IsT0FBdURxRixFQUF2RCxLQUFBckYsT0FBbUVtRixFQUFTbkMsaUJBQzNFLE1BQWJxRCxJQUNJRCxFQUFRcEIsU0FBU3FCLEVBQVU5QixhQUMvQjZCLElBQ0FDLEVBQVU5QixZQUFjNkIsRUFBTXJDLGtCQUdsQyxJQUFJZ0MsRUFBZWxILFNBQVNDLGVBQVQsOEJBQUFrQixPQUFzRHFGLEVBQXRELEtBQUFyRixPQUFrRW1GLEVBQVNuQyxpQkFDMUUsTUFBaEIrQyxHQUNBN0csT0FBT0MsWUFBWXNHLGtCQUFrQk0sRUFBY1osR0FHdkQsSUFBSW1CLEVBQW1CekgsU0FBU3dFLGNBQWMsTUFDOUMwQyxFQUFhekMsWUFBWWdELEdBRXpCLElBRVFDLEVBT0F2RSxFQVRKRixFQUFXakQsU0FBUzBFLGVBQWU0QixFQUFTM0IsWUFDNUMyQixFQUFTMUIsY0FDTDhDLEVBQVcxSCxTQUFTd0UsY0FBYyxLQUN0Q2lELEVBQWlCaEQsWUFBWWlELEdBQzdCQSxFQUFTckcsVUFBVUUsSUFBSSxnQkFBaUIsc0JBQ3hDbUcsRUFBUzdDLEtBQVQsSUFBQTFELE9BQW9CZCxPQUFPQyxZQUFZRyxjQUF2QyxLQUFBVSxPQUF3RG1GLEVBQVN4QixVQUNqRTRDLEVBQVMzQyxNQUFULDJCQUFBNUQsT0FBNENtRixFQUFTM0IsWUFDckQrQyxFQUFTakQsWUFBWXhCLEtBRWpCRSxFQUFXbkQsU0FBU3dFLGNBQWMsUUFDdENpRCxFQUFpQmhELFlBQVl0QixHQUM3QkEsRUFBUzlCLFVBQVVFLElBQUksZ0JBQWlCLHdCQUN4QzRCLEVBQVNzQixZQUFZeEIsSUFHekIsSUFBSTBFLEVBQW9CM0gsU0FBU3dFLGNBQWMsUUFDL0NpRCxFQUFpQmhELFlBQVlrRCxHQUU3QixJQUFJckUsRUFBWXRELFNBQVMwRSxlQUFlLElBQUlPLEtBQU0yQyxLQUFLOUksR0FBR3dFLFVBQVksSUFBUyxZQUFlNEIsa0JBQzlGeUMsRUFBa0JsRCxZQUFZbkIsSUFHbENmLFlBQWEsU0FBVTNCLEVBQVM4QixHQUN4QkEsR0FBV0EsRUFBUWpELFFBQ25CWSxPQUFPQyxZQUFZQyxXQUFXd0YsT0FBTyxPQUFRLENBQ3pDQyxTQUFVdEQsRUFDVndELFFBQVN0RixJQUZiLE1BR1MsU0FBVW1CLEdBQ2YsT0FBT0MsUUFBUUMsTUFBTUYsUSx5RUN2VnJDOEYsT0FBQUMsZUFBQXZJLEVBQUEsYUFBQSxDQUFBNEMsT0FBQSxJQU1BLElBQUE0RixHQUtBQSxFQUFBQyxVQUFBQyxNQUFBLFdBQ0E1RCxLQUFBNkQsWUFDQTdELEtBQUE2RCxXQUFBLEVBQ0E3RCxLQUFBOEQsU0FDQTlELEtBQUE4RCxZQUlBTixPQUFBQyxlQUFBQyxFQUFBQyxVQUFBLFNBQUEsQ0FDQUksSUFBQSxXQUNBLE9BQUEvRCxNQUVBZ0UsWUFBQSxFQUNBQyxjQUFBLElBRUFULE9BQUFDLGVBQUFDLEVBQUFDLFVBQUEsVUFBQSxDQUNBSSxJQUFBLFdBQ0EsT0FBQS9ELEtBQUE2RCxXQUVBRyxZQUFBLEVBQ0FDLGNBQUEsSUFFQVAsR0ExQkEsU0FBQUEsSUFDQTFELEtBQUE2RCxXQUFBLEVBQ0E3RCxLQUFBOEQsUUFBQSxLQTBCQTVJLEVBQUF3SSxnQkFBQUEsRyxvQ0NuQ0EsSUFDQVEsRUFEQUMsRUFBQW5FLE1BQUFBLEtBQUFtRSxZQUNBRCxFQUFBVixPQUFBWSxnQkFDQSxDQUFBQyxVQUFBLGNBQUFDLE9BQUEsU0FBQUMsRUFBQUMsR0FBQUQsRUFBQUYsVUFBQUcsSUFDQSxTQUFBRCxFQUFBQyxHQUFBLElBQUEsSUFBQXZKLEtBQUF1SixFQUFBQSxFQUFBQyxlQUFBeEosS0FBQXNKLEVBQUF0SixHQUFBdUosRUFBQXZKLEtBQ0EsU0FBQXNKLEVBQUFDLEdBRUEsU0FBQUUsSUFBQTFFLEtBQUEyRSxZQUFBSixFQURBTCxFQUFBSyxFQUFBQyxHQUVBRCxFQUFBWixVQUFBLE9BQUFhLEVBQUFoQixPQUFBb0IsT0FBQUosSUFBQUUsRUFBQWYsVUFBQWEsRUFBQWIsVUFBQSxJQUFBZSxLQUdBbEIsT0FBQUMsZUFBQXZJLEVBQUEsYUFBQSxDQUFBNEMsT0FBQSxJQUNBLElBTUErRyxFQU5BQyxFQUFBbEssRUFBQSxZQUNBbUssRUFBQW5LLEVBQUEscUJBQ0FvSyxFQUFBcEssRUFBQSxnQkFDQXFLLEVBQUFySyxFQUFBLFdBQ0FzSyxFQUFBdEssRUFBQSxtQkFFQXVLLEdBQUFOLEVBa0NBRyxFQUFBSSxXQWpDQWpCLEVBQUFnQixFQUFBTixHQWdCQU0sRUFBQXhCLFVBQUEwQixLQUFBLFNBQUFDLEdBRUEsT0FBQUEsRUFBQUMsYUFBQUQsRUFBQUMsWUFBQUMsUUFDQUMsUUFBQUMsT0FBQSxJQUFBWixFQUFBYSxZQUVBTCxFQUFBTSxPQUdBTixFQUFBaEosSUFHQTBELEtBQUE2RixXQUFBUixLQUFBQyxHQUZBRyxRQUFBQyxPQUFBLElBQUEzSyxNQUFBLG9CQUhBMEssUUFBQUMsT0FBQSxJQUFBM0ssTUFBQSx3QkFPQW9LLEVBQUF4QixVQUFBbUMsZ0JBQUEsU0FBQXhKLEdBQ0EsT0FBQTBELEtBQUE2RixXQUFBQyxnQkFBQXhKLElBRUE2SSxHQTlCQSxTQUFBQSxFQUFBWSxHQUNBLElBQUFDLEVBQUFuQixFQUFBMUosS0FBQTZFLE9BQUFBLEtBQ0EsR0FBQSxvQkFBQWlHLE9BQUFoQixFQUFBaUIsU0FBQUMsT0FDQUgsRUFBQUgsV0FBQSxJQUFBZCxFQUFBcUIsZ0JBQUFMLE9BRUEsQ0FBQSxHQUFBLG9CQUFBTSxlQUlBLE1BQUEsSUFBQXRMLE1BQUEsK0JBSEFpTCxFQUFBSCxXQUFBLElBQUFYLEVBQUFvQixjQUFBUCxHQUtBLE9BQUFDLEVBcUJBOUssRUFBQWlLLGtCQUFBQSxHLHlIQ3BEQTNCLE9BQUFDLGVBQUF2SSxFQUFBLGFBQUEsQ0FBQTRDLE9BQUEsSUFFQSxJQUFBeUksRUFBQSxDQUFBLEVBQUEsSUFBQSxJQUFBLElBQUEsTUFFQUMsR0FJQUEsRUFBQTdDLFVBQUE4Qyw2QkFBQSxTQUFBQyxHQUNBLE9BQUExRyxLQUFBMkcsWUFBQUQsRUFBQUUscUJBRUFKLEdBTkEsU0FBQUEsRUFBQUcsR0FDQTNHLEtBQUEyRyxpQkFBQUUsSUFBQUYsRUFBQUEsRUFBQTdKLE9BQUEsQ0FBQSxPQUFBeUosRUFPQXJMLEVBQUFzTCx1QkFBQUEsRyxvQ0NiQSxJQUNBdEMsRUFEQUMsRUFBQW5FLE1BQUFBLEtBQUFtRSxZQUNBRCxFQUFBVixPQUFBWSxnQkFDQSxDQUFBQyxVQUFBLGNBQUFDLE9BQUEsU0FBQUMsRUFBQUMsR0FBQUQsRUFBQUYsVUFBQUcsSUFDQSxTQUFBRCxFQUFBQyxHQUFBLElBQUEsSUFBQXZKLEtBQUF1SixFQUFBQSxFQUFBQyxlQUFBeEosS0FBQXNKLEVBQUF0SixHQUFBdUosRUFBQXZKLEtBQ0EsU0FBQXNKLEVBQUFDLEdBRUEsU0FBQUUsSUFBQTFFLEtBQUEyRSxZQUFBSixFQURBTCxFQUFBSyxFQUFBQyxHQUVBRCxFQUFBWixVQUFBLE9BQUFhLEVBQUFoQixPQUFBb0IsT0FBQUosSUFBQUUsRUFBQWYsVUFBQWEsRUFBQWIsVUFBQSxJQUFBZSxLQUdBbEIsT0FBQUMsZUFBQXZJLEVBQUEsYUFBQSxDQUFBNEMsT0FBQSxJQUVBLElBQUErRyxFQUFBaUMsR0FBQWpDLEVBbUJBOUosTUFsQkFvSixFQUFBMkMsRUFBQWpDLEdBaUJBaUMsR0FYQSxTQUFBQSxFQUFBQyxFQUFBQyxHQUNBLElBQ0FoQixFQUFBaEcsS0FDQWlILEVBRkFqSCxLQUFBMkUsWUFFQWhCLFVBTUEsT0FMQXFDLEVBQUFuQixFQUFBMUosS0FBQTZFLEtBQUErRyxJQUFBL0csTUFDQWdILFdBQUFBLEVBR0FoQixFQUFBM0IsVUFBQTRDLEVBQ0FqQixFQUlBOUssRUFBQTRMLFVBQUFBLEVBRUEsSUFBQWpDLEVBQUFxQyxHQUFBckMsRUFrQkE5SixNQWpCQW9KLEVBQUErQyxFQUFBckMsR0FnQkFxQyxHQVhBLFNBQUFBLEVBQUFILFFBRUEsSUFBQUEsSUFBQUEsRUFBQSx1QkFDQSxJQUFBZixFQUFBaEcsS0FDQWlILEVBSEFqSCxLQUFBMkUsWUFHQWhCLFVBS0EsT0FKQXFDLEVBQUFuQixFQUFBMUosS0FBQTZFLEtBQUErRyxJQUFBL0csTUFHQXFFLFVBQUE0QyxFQUNBakIsRUFJQTlLLEVBQUFnTSxhQUFBQSxFQUVBLElBQUFyQyxFQUFBYyxHQUFBZCxFQWtCQTlKLE1BakJBb0osRUFBQXdCLEVBQUFkLEdBZ0JBYyxHQVhBLFNBQUFBLEVBQUFvQixRQUVBLElBQUFBLElBQUFBLEVBQUEsc0JBQ0EsSUFBQWYsRUFBQWhHLEtBQ0FpSCxFQUhBakgsS0FBQTJFLFlBR0FoQixVQUtBLE9BSkFxQyxFQUFBbkIsRUFBQTFKLEtBQUE2RSxLQUFBK0csSUFBQS9HLE1BR0FxRSxVQUFBNEMsRUFDQWpCLEVBSUE5SyxFQUFBeUssV0FBQUEsRyxvQ0MxRUEsSUFDQXpCLEVBREFDLEVBQUFuRSxNQUFBQSxLQUFBbUUsWUFDQUQsRUFBQVYsT0FBQVksZ0JBQ0EsQ0FBQUMsVUFBQSxjQUFBQyxPQUFBLFNBQUFDLEVBQUFDLEdBQUFELEVBQUFGLFVBQUFHLElBQ0EsU0FBQUQsRUFBQUMsR0FBQSxJQUFBLElBQUF2SixLQUFBdUosRUFBQUEsRUFBQUMsZUFBQXhKLEtBQUFzSixFQUFBdEosR0FBQXVKLEVBQUF2SixLQUNBLFNBQUFzSixFQUFBQyxHQUVBLFNBQUFFLElBQUExRSxLQUFBMkUsWUFBQUosRUFEQUwsRUFBQUssRUFBQUMsR0FFQUQsRUFBQVosVUFBQSxPQUFBYSxFQUFBaEIsT0FBQW9CLE9BQUFKLElBQUFFLEVBQUFmLFVBQUFhLEVBQUFiLFVBQUEsSUFBQWUsS0FHQXlDLEVBQUFuSCxNQUFBQSxLQUFBbUgsVUFBQTNELE9BQUE0RCxRQUFBLFNBQUE3TSxHQUNBLElBQUEsSUFBQThNLEVBQUE1TSxFQUFBLEVBQUFILEVBQUFnTixVQUFBbE0sT0FBQVgsRUFBQUgsRUFBQUcsSUFFQSxJQUFBLElBQUFRLEtBREFvTSxFQUFBQyxVQUFBN00sR0FDQStJLE9BQUFHLFVBQUFjLGVBQUF0SixLQUFBa00sRUFBQXBNLEtBQ0FWLEVBQUFVLEdBQUFvTSxFQUFBcE0sSUFFQSxPQUFBVixHQUVBZ04sRUFBQXZILE1BQUFBLEtBQUF1SCxXQUFBLFNBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEdBQ0EsT0FBQSxJQUFBRCxFQUFBQSxHQUFBakMsU0FBQSxTQUFBbUMsRUFBQWxDLEdBQ0EsU0FBQW1DLEVBQUEvSixHQUFBLElBQUFnSyxFQUFBSCxFQUFBSSxLQUFBakssSUFBQSxNQUFBekQsR0FBQXFMLEVBQUFyTCxJQUNBLFNBQUEyTixFQUFBbEssR0FBQSxJQUFBZ0ssRUFBQUgsRUFBQSxNQUFBN0osSUFBQSxNQUFBekQsR0FBQXFMLEVBQUFyTCxJQUNBLFNBQUF5TixFQUFBRyxHQUFBQSxFQUFBQyxLQUFBTixFQUFBSyxFQUFBbkssT0FBQSxJQUFBNEosRUFBQSxTQUFBRSxHQUFBQSxFQUFBSyxFQUFBbkssU0FBQUwsS0FBQW9LLEVBQUFHLEdBQ0FGLEdBQUFILEVBQUFBLEVBQUFRLE1BQUFYLEVBQUFDLEdBQUEsS0FBQU0sV0FHQUssRUFBQXBJLE1BQUFBLEtBQUFvSSxhQUFBLFNBQUFaLEVBQUFhLEdBQ0EsSUFBQTNOLEVBQUE0TixFQUFBL04sRUFBQWdPLEVBQUEsQ0FBQUMsTUFBQSxFQUFBQyxLQUFBLFdBQUEsR0FBQSxFQUFBbE8sRUFBQSxHQUFBLE1BQUFBLEVBQUEsR0FBQSxPQUFBQSxFQUFBLElBQUFtTyxLQUFBLEdBQUFDLElBQUEsSUFDQUMsRUFBQSxDQUFBYixLQUFBYyxFQUFBLEdBQUFDLE1BQUFELEVBQUEsR0FBQUUsT0FBQUYsRUFBQSxJQUFBLE1BQUEsbUJBQUFHLFNBQUFKLEVBQUFJLE9BQUFDLFVBQUEsV0FBQSxPQUFBakosT0FBQTRJLEVBQ0EsU0FBQUMsRUFBQXZPLEdBQUEsT0FBQSxTQUFBNE8sR0FBQSxPQUNBLFNBQUFDLEdBQ0EsR0FBQXpPLEVBQUEsTUFBQSxJQUFBME8sVUFBQSxtQ0FDQSxLQUFBYixHQUFBLElBQ0EsR0FBQTdOLEVBQUEsRUFBQTROLElBQUEvTixFQUFBLEVBQUE0TyxFQUFBLEdBQUFiLEVBQUEsT0FBQWEsRUFBQSxHQUFBYixFQUFBLFNBQUEvTixFQUFBK04sRUFBQSxTQUFBL04sRUFBQVksS0FBQW1OLEdBQUEsR0FBQUEsRUFBQVAsU0FBQXhOLEVBQUFBLEVBQUFZLEtBQUFtTixFQUFBYSxFQUFBLEtBQUFqQixLQUFBLE9BQUEzTixFQUVBLE9BREErTixFQUFBLEVBQUEvTixJQUFBNE8sRUFBQSxDQUFBLEVBQUFBLEVBQUEsR0FBQTVPLEVBQUF1RCxRQUNBcUwsRUFBQSxJQUNBLEtBQUEsRUFBQSxLQUFBLEVBQUE1TyxFQUFBNE8sRUFBQSxNQUNBLEtBQUEsRUFBQSxPQUFBWixFQUFBQyxRQUFBLENBQUExSyxNQUFBcUwsRUFBQSxHQUFBakIsTUFBQSxHQUNBLEtBQUEsRUFBQUssRUFBQUMsUUFBQUYsRUFBQWEsRUFBQSxHQUFBQSxFQUFBLENBQUEsR0FBQSxTQUNBLEtBQUEsRUFBQUEsRUFBQVosRUFBQUksSUFBQVUsTUFBQWQsRUFBQUcsS0FBQVcsTUFBQSxTQUNBLFFBQ0EsS0FBQTlPLEVBQUEsR0FBQUEsRUFBQWdPLEVBQUFHLE1BQUF0TixRQUFBYixFQUFBQSxFQUFBYSxPQUFBLE1BQUEsSUFBQStOLEVBQUEsSUFBQSxJQUFBQSxFQUFBLElBQUEsQ0FBQVosRUFBQSxFQUFBLFNBQ0EsR0FBQSxJQUFBWSxFQUFBLE1BQUE1TyxHQUFBNE8sRUFBQSxHQUFBNU8sRUFBQSxJQUFBNE8sRUFBQSxHQUFBNU8sRUFBQSxJQUFBLENBQUFnTyxFQUFBQyxNQUFBVyxFQUFBLEdBQUEsTUFDQSxHQUFBLElBQUFBLEVBQUEsSUFBQVosRUFBQUMsTUFBQWpPLEVBQUEsR0FBQSxDQUFBZ08sRUFBQUMsTUFBQWpPLEVBQUEsR0FBQUEsRUFBQTRPLEVBQUEsTUFDQSxHQUFBNU8sR0FBQWdPLEVBQUFDLE1BQUFqTyxFQUFBLEdBQUEsQ0FBQWdPLEVBQUFDLE1BQUFqTyxFQUFBLEdBQUFnTyxFQUFBSSxJQUFBVyxLQUFBSCxHQUFBLE1BQ0E1TyxFQUFBLElBQUFnTyxFQUFBSSxJQUFBVSxNQUNBZCxFQUFBRyxLQUFBVyxNQUFBLFNBRUFGLEVBQUFkLEVBQUFsTixLQUFBcU0sRUFBQWUsR0FDQSxNQUFBbE8sR0FBQThPLEVBQUEsQ0FBQSxFQUFBOU8sR0FBQWlPLEVBQUEsRUFBQSxRQUFBNU4sRUFBQUgsRUFBQSxFQUNBLEdBQUEsRUFBQTRPLEVBQUEsR0FBQSxNQUFBQSxFQUFBLEdBQUEsTUFBQSxDQUFBckwsTUFBQXFMLEVBQUEsR0FBQUEsRUFBQSxRQUFBLEVBQUFqQixNQUFBLEdBckJBSixDQUFBLENBQUF4TixFQUFBNE8sT0F3QkExRixPQUFBQyxlQUFBdkksRUFBQSxhQUFBLENBQUE0QyxPQUFBLElBQ0EsSUFJQStHLEVBSkFDLEVBQUFsSyxFQUFBLFlBQ0FvSyxFQUFBcEssRUFBQSxnQkFDQTJPLEVBQUEzTyxFQUFBLGFBQ0FxSyxFQUFBckssRUFBQSxXQUNBd0wsR0FBQXZCLEVBZ0hBRyxFQUFBSSxXQS9HQWpCLEVBQUFpQyxFQUFBdkIsR0F3QkF1QixFQUFBekMsVUFBQTBCLEtBQUEsU0FBQUMsR0FDQSxPQUFBaUMsRUFBQXZILFVBQUEsT0FBQSxFQUFBLFdBQ0EsSUFBQXdKLEVBQUE1TCxFQUFBNkwsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFDQTdELEVBQUFoRyxLQUNBLE9BQUFvSSxFQUFBcEksS0FBQSxTQUFBOEosR0FDQSxPQUFBQSxFQUFBdEIsT0FDQSxLQUFBLEVBRUEsR0FBQWxELEVBQUFDLGFBQUFELEVBQUFDLFlBQUFDLFFBQ0EsTUFBQSxJQUFBVixFQUFBYSxXQUVBLElBQUFMLEVBQUFNLE9BQ0EsTUFBQSxJQUFBN0ssTUFBQSxzQkFFQSxJQUFBdUssRUFBQWhKLElBQ0EsTUFBQSxJQUFBdkIsTUFBQSxtQkFFQXlPLEVBQUEsSUFBQXhKLEtBQUErSixvQkFFQXpFLEVBQUFDLGNBQ0FELEVBQUFDLFlBQUF6QixRQUFBLFdBQ0EwRixFQUFBNUYsUUFDQWhHLEVBQUEsSUFBQWtILEVBQUFhLGFBR0E4RCxFQUFBLEtBQ0FuRSxFQUFBMEUsVUFDQU4sRUFBQXBFLEVBQUEwRSxRQUNBUCxFQUFBUSxXQUFBLFdBQ0FULEVBQUE1RixRQUNBb0MsRUFBQUQsT0FBQW1FLElBQUFYLEVBQUFZLFNBQUFDLFFBQUEsOEJBQ0F4TSxFQUFBLElBQUFrSCxFQUFBb0MsY0FDQXdDLElBRUFJLEVBQUF0QixNQUFBLEVBQ0EsS0FBQSxFQUVBLE9BREFzQixFQUFBcEIsS0FBQVksS0FBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLElBQ0EsQ0FBQSxFQUFBdEosS0FBQXFLLFVBQUEvRSxFQUFBaEosSUFBQSxDQUNBK0wsS0FBQS9DLEVBQUFsRyxRQUNBa0wsTUFBQSxXQUNBQyxhQUFBLElBQUFqRixFQUFBa0YsZ0JBQUEsVUFBQSxjQUNBQyxRQUFBdEQsRUFBQSxDQUFBdUQsZUFBQSwyQkFBQUMsbUJBQUEsa0JBQUFyRixFQUFBbUYsU0FDQTdFLE9BQUFOLEVBQUFNLE9BQ0FnRixLQUFBLE9BQ0FDLFNBQUEsU0FDQUMsT0FBQXRCLEVBQUFzQixVQUVBLEtBQUEsRUFFQSxPQURBbkIsRUFBQUcsRUFBQXJCLE9BQ0EsQ0FBQSxFQUFBLEdBQ0EsS0FBQSxFQUVBLEdBREFtQixFQUFBRSxFQUFBckIsT0FDQTdLLEVBQ0EsTUFBQUEsRUFHQSxNQURBb0MsS0FBQStGLE9BQUFtRSxJQUFBWCxFQUFBWSxTQUFBQyxRQUFBLDRCQUFBUixFQUFBLEtBQ0FBLEVBQ0EsS0FBQSxFQU9BLE9BTkFILEdBQ0FzQixhQUFBdEIsR0FFQW5FLEVBQUFDLGNBQ0FELEVBQUFDLFlBQUF6QixRQUFBLE1BRUEsQ0FBQSxHQUNBLEtBQUEsRUFDQSxJQUFBNkYsRUFBQXFCLEdBQ0EsTUFBQSxJQUFBbEcsRUFBQWdDLFVBQUE2QyxFQUFBc0IsV0FBQXRCLEVBQUF1QixRQUdBLE1BQUEsQ0FBQSxFQW1CQSxTQUFBdkIsRUFBQXdCLEdBQ0EsSUFBQS9MLEVBQ0EsT0FBQStMLEdBQ0EsSUFBQSxjQUNBL0wsRUFBQXVLLEVBQUF5QixjQUNBLE1BQ0EsSUFBQSxPQUNBaE0sRUFBQXVLLEVBQUEwQixPQUNBLE1BQ0EsSUFBQSxPQUNBLElBQUEsV0FDQSxJQUFBLE9BQ0EsTUFBQSxJQUFBdFEsTUFBQW9RLEVBQUEsc0JBQ0EsUUFDQS9MLEVBQUF1SyxFQUFBMEIsT0FHQSxPQUFBak0sRUFyQ0FrTSxDQUFBM0IsRUFBQXJFLEVBQUE2RixlQUVBLEtBQUEsRUFFQSxPQURBdEIsRUFBQUMsRUFBQXJCLE9BQ0EsQ0FBQSxFQUFBLElBQUF6RCxFQUFBdUcsYUFBQTVCLEVBQUF1QixPQUFBdkIsRUFBQXNCLFdBQUFwQixVQUtBekQsRUFBQXpDLFVBQUFtQyxnQkFBQSxTQUFBeEosR0FDQSxJQUFBa1AsRUFBQSxHQUtBLE9BSkF2RyxFQUFBaUIsU0FBQUMsUUFBQW5HLEtBQUF5TCxLQUVBekwsS0FBQXlMLElBQUFDLFdBQUFwUCxFQUFBLFNBQUFqQyxFQUFBTSxHQUFBLE9BQUE2USxFQUFBN1EsRUFBQWdSLEtBQUEsUUFFQUgsR0FFQXBGLEdBN0dBLFNBQUFBLEVBQUFMLEdBQ0EsSUFLQTZGLEVBTEE1RixFQUFBbkIsRUFBQTFKLEtBQUE2RSxPQUFBQSxLQW1CQSxPQWxCQWdHLEVBQUFELE9BQUFBLEVBQ0Esb0JBQUFFLE9BR0EyRixFQUFBLG1CQUFBQyxvQkFBQUMsd0JBQUFsUixFQUVBb0wsRUFBQXlGLElBQUEsSUFBQUcsRUFBQSxnQkFBQUcsV0FDQS9GLEVBQUFxRSxVQUFBdUIsRUFBQSxjQUdBNUYsRUFBQXFFLFVBQUF1QixFQUFBLGVBQUFBLENBQUE1RixFQUFBcUUsVUFBQXJFLEVBQUF5RixLQUVBekYsRUFBQStELG9CQUFBNkIsRUFBQSxzQkFHQTVGLEVBQUFxRSxVQUFBcEUsTUFBQStGLEtBQUFDLE1BQ0FqRyxFQUFBK0Qsb0JBQUFyRyxpQkFFQXNDLEVBMkZBOUssRUFBQWtMLGdCQUFBQSxHLDBHQzNLQTVDLE9BQUFDLGVBQUF2SSxFQUFBLGFBQUEsQ0FBQTRDLE9BQUEsSUFDQSxJQUFBb08sRUFBQXRSLEVBQUEsdUJBQ0FxSyxFQUFBckssRUFBQSxXQUVBdVIsR0FJQUEsRUFBQXhJLFVBQUF5SSxzQkFBQSxTQUFBQyxHQUNBLE9BQUFILEVBQUFJLGtCQUFBQyxNQUFBOVAsS0FBQStQLFVBQUFILEtBRUFGLEVBQUF4SSxVQUFBOEksdUJBQUEsU0FBQUMsR0FJQSxHQUFBekgsRUFBQTBILGNBQUFELFNBQUEsSUFBQUUsR0FBQUYsYUFBQUUsRUFBQSxDQUVBLElBQUFDLEVBQUEsSUFBQUMsV0FBQUosR0FFQSxJQUFBLEtBREFLLEVBQUFGLEVBQUFHLFFBQUFkLEVBQUFJLGtCQUFBVyxzQkFFQSxNQUFBLElBQUFsUyxNQUFBLDBCQUlBLElBQUFtUyxFQUFBSCxFQUFBLEVBQ0FJLEVBQUFDLE9BQUFDLGFBQUFsRixNQUFBLEtBQUEwRSxFQUFBUyxNQUFBLEVBQUFKLElBQ0FLLEVBQUFWLEVBQUFXLFdBQUFOLEVBQUFMLEVBQUFTLE1BQUFKLEdBQUFPLE9BQUEsU0FFQSxDQUNBLElBQ0FWLEVBREFXLEVBQUFoQixFQUVBLElBQUEsS0FEQUssRUFBQVcsRUFBQVYsUUFBQWQsRUFBQUksa0JBQUFxQixrQkFFQSxNQUFBLElBQUE1UyxNQUFBLDBCQUlBbVMsRUFBQUgsRUFBQSxFQUNBSSxFQUFBTyxFQUFBRSxVQUFBLEVBQUFWLEdBQ0FLLEVBQUFHLEVBQUF0UyxPQUFBOFIsRUFBQVEsRUFBQUUsVUFBQVYsR0FBQSxLQUdBLElBQUExUSxFQUFBMFAsRUFBQUksa0JBQUE1UCxNQUFBeVEsR0FDQXhELEVBQUFsTixLQUFBQyxNQUFBRixFQUFBLElBQ0EsR0FBQW1OLEVBQUFySSxLQUNBLE1BQUEsSUFBQXZHLE1BQUEsa0RBS0EsTUFBQSxDQUFBd1MsRUFIQTVELElBS0F3QyxHQTlDQSxTQUFBQSxLQWdEQWpSLEVBQUFpUixrQkFBQUEsSSxrSENyREEsSUFBQWhGLEVBQUFuSCxNQUFBQSxLQUFBbUgsVUFBQTNELE9BQUE0RCxRQUFBLFNBQUE3TSxHQUNBLElBQUEsSUFBQThNLEVBQUE1TSxFQUFBLEVBQUFILEVBQUFnTixVQUFBbE0sT0FBQVgsRUFBQUgsRUFBQUcsSUFFQSxJQUFBLElBQUFRLEtBREFvTSxFQUFBQyxVQUFBN00sR0FDQStJLE9BQUFHLFVBQUFjLGVBQUF0SixLQUFBa00sRUFBQXBNLEtBQ0FWLEVBQUFVLEdBQUFvTSxFQUFBcE0sSUFFQSxPQUFBVixHQUVBaUosT0FBQUMsZUFBQXZJLEVBQUEsYUFBQSxDQUFBNEMsT0FBQSxJQUdBLFNBREF5TixFQUNBdkUsRUFBQWlFLEVBQUE3TCxHQUNBWSxLQUFBZ0gsV0FBQUEsRUFDQWhILEtBQUFpTCxXQUFBQSxFQUNBakwsS0FBQVosUUFBQUEsRUFJQWxFLEVBQUFxUSxhQUFBQSxFQUtBLElBQUFuRyxHQUdBQSxFQUFBekIsVUFBQUksSUFBQSxTQUFBekgsRUFBQXVSLEdBQ0EsT0FBQTdOLEtBQUFxRixLQUFBOEIsRUFBQSxHQUFBMEcsRUFBQSxDQUFBakksT0FBQSxNQUFBdEosSUFBQUEsTUFFQThJLEVBQUF6QixVQUFBbUssS0FBQSxTQUFBeFIsRUFBQXVSLEdBQ0EsT0FBQTdOLEtBQUFxRixLQUFBOEIsRUFBQSxHQUFBMEcsRUFBQSxDQUFBakksT0FBQSxPQUFBdEosSUFBQUEsTUFFQThJLEVBQUF6QixVQUFBb0ssT0FBQSxTQUFBelIsRUFBQXVSLEdBQ0EsT0FBQTdOLEtBQUFxRixLQUFBOEIsRUFBQSxHQUFBMEcsRUFBQSxDQUFBakksT0FBQSxTQUFBdEosSUFBQUEsTUFRQThJLEVBQUF6QixVQUFBbUMsZ0JBQUEsU0FBQXhKLEdBQ0EsTUFBQSxJQUVBOEksR0FwQkEsU0FBQUEsS0FzQkFsSyxFQUFBa0ssV0FBQUEsRyxvQ0M5Q0EsSUFBQStCLEVBQUFuSCxNQUFBQSxLQUFBbUgsVUFBQTNELE9BQUE0RCxRQUFBLFNBQUE3TSxHQUNBLElBQUEsSUFBQThNLEVBQUE1TSxFQUFBLEVBQUFILEVBQUFnTixVQUFBbE0sT0FBQVgsRUFBQUgsRUFBQUcsSUFFQSxJQUFBLElBQUFRLEtBREFvTSxFQUFBQyxVQUFBN00sR0FDQStJLE9BQUFHLFVBQUFjLGVBQUF0SixLQUFBa00sRUFBQXBNLEtBQ0FWLEVBQUFVLEdBQUFvTSxFQUFBcE0sSUFFQSxPQUFBVixHQUVBZ04sRUFBQXZILE1BQUFBLEtBQUF1SCxXQUFBLFNBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEdBQ0EsT0FBQSxJQUFBRCxFQUFBQSxHQUFBakMsU0FBQSxTQUFBbUMsRUFBQWxDLEdBQ0EsU0FBQW1DLEVBQUEvSixHQUFBLElBQUFnSyxFQUFBSCxFQUFBSSxLQUFBakssSUFBQSxNQUFBekQsR0FBQXFMLEVBQUFyTCxJQUNBLFNBQUEyTixFQUFBbEssR0FBQSxJQUFBZ0ssRUFBQUgsRUFBQSxNQUFBN0osSUFBQSxNQUFBekQsR0FBQXFMLEVBQUFyTCxJQUNBLFNBQUF5TixFQUFBRyxHQUFBQSxFQUFBQyxLQUFBTixFQUFBSyxFQUFBbkssT0FBQSxJQUFBNEosRUFBQSxTQUFBRSxHQUFBQSxFQUFBSyxFQUFBbkssU0FBQUwsS0FBQW9LLEVBQUFHLEdBQ0FGLEdBQUFILEVBQUFBLEVBQUFRLE1BQUFYLEVBQUFDLEdBQUEsS0FBQU0sV0FHQUssRUFBQXBJLE1BQUFBLEtBQUFvSSxhQUFBLFNBQUFaLEVBQUFhLEdBQ0EsSUFBQTNOLEVBQUE0TixFQUFBL04sRUFBQWdPLEVBQUEsQ0FBQUMsTUFBQSxFQUFBQyxLQUFBLFdBQUEsR0FBQSxFQUFBbE8sRUFBQSxHQUFBLE1BQUFBLEVBQUEsR0FBQSxPQUFBQSxFQUFBLElBQUFtTyxLQUFBLEdBQUFDLElBQUEsSUFDQUMsRUFBQSxDQUFBYixLQUFBYyxFQUFBLEdBQUFDLE1BQUFELEVBQUEsR0FBQUUsT0FBQUYsRUFBQSxJQUFBLE1BQUEsbUJBQUFHLFNBQUFKLEVBQUFJLE9BQUFDLFVBQUEsV0FBQSxPQUFBakosT0FBQTRJLEVBQ0EsU0FBQUMsRUFBQXZPLEdBQUEsT0FBQSxTQUFBNE8sR0FBQSxPQUNBLFNBQUFDLEdBQ0EsR0FBQXpPLEVBQUEsTUFBQSxJQUFBME8sVUFBQSxtQ0FDQSxLQUFBYixHQUFBLElBQ0EsR0FBQTdOLEVBQUEsRUFBQTROLElBQUEvTixFQUFBLEVBQUE0TyxFQUFBLEdBQUFiLEVBQUEsT0FBQWEsRUFBQSxHQUFBYixFQUFBLFNBQUEvTixFQUFBK04sRUFBQSxTQUFBL04sRUFBQVksS0FBQW1OLEdBQUEsR0FBQUEsRUFBQVAsU0FBQXhOLEVBQUFBLEVBQUFZLEtBQUFtTixFQUFBYSxFQUFBLEtBQUFqQixLQUFBLE9BQUEzTixFQUVBLE9BREErTixFQUFBLEVBQUEvTixJQUFBNE8sRUFBQSxDQUFBLEVBQUFBLEVBQUEsR0FBQTVPLEVBQUF1RCxRQUNBcUwsRUFBQSxJQUNBLEtBQUEsRUFBQSxLQUFBLEVBQUE1TyxFQUFBNE8sRUFBQSxNQUNBLEtBQUEsRUFBQSxPQUFBWixFQUFBQyxRQUFBLENBQUExSyxNQUFBcUwsRUFBQSxHQUFBakIsTUFBQSxHQUNBLEtBQUEsRUFBQUssRUFBQUMsUUFBQUYsRUFBQWEsRUFBQSxHQUFBQSxFQUFBLENBQUEsR0FBQSxTQUNBLEtBQUEsRUFBQUEsRUFBQVosRUFBQUksSUFBQVUsTUFBQWQsRUFBQUcsS0FBQVcsTUFBQSxTQUNBLFFBQ0EsS0FBQTlPLEVBQUEsR0FBQUEsRUFBQWdPLEVBQUFHLE1BQUF0TixRQUFBYixFQUFBQSxFQUFBYSxPQUFBLE1BQUEsSUFBQStOLEVBQUEsSUFBQSxJQUFBQSxFQUFBLElBQUEsQ0FBQVosRUFBQSxFQUFBLFNBQ0EsR0FBQSxJQUFBWSxFQUFBLE1BQUE1TyxHQUFBNE8sRUFBQSxHQUFBNU8sRUFBQSxJQUFBNE8sRUFBQSxHQUFBNU8sRUFBQSxJQUFBLENBQUFnTyxFQUFBQyxNQUFBVyxFQUFBLEdBQUEsTUFDQSxHQUFBLElBQUFBLEVBQUEsSUFBQVosRUFBQUMsTUFBQWpPLEVBQUEsR0FBQSxDQUFBZ08sRUFBQUMsTUFBQWpPLEVBQUEsR0FBQUEsRUFBQTRPLEVBQUEsTUFDQSxHQUFBNU8sR0FBQWdPLEVBQUFDLE1BQUFqTyxFQUFBLEdBQUEsQ0FBQWdPLEVBQUFDLE1BQUFqTyxFQUFBLEdBQUFnTyxFQUFBSSxJQUFBVyxLQUFBSCxHQUFBLE1BQ0E1TyxFQUFBLElBQUFnTyxFQUFBSSxJQUFBVSxNQUNBZCxFQUFBRyxLQUFBVyxNQUFBLFNBRUFGLEVBQUFkLEVBQUFsTixLQUFBcU0sRUFBQWUsR0FDQSxNQUFBbE8sR0FBQThPLEVBQUEsQ0FBQSxFQUFBOU8sR0FBQWlPLEVBQUEsRUFBQSxRQUFBNU4sRUFBQUgsRUFBQSxFQUNBLEdBQUEsRUFBQTRPLEVBQUEsR0FBQSxNQUFBQSxFQUFBLEdBQUEsTUFBQSxDQUFBckwsTUFBQXFMLEVBQUEsR0FBQUEsRUFBQSxRQUFBLEVBQUFqQixNQUFBLEdBckJBSixDQUFBLENBQUF4TixFQUFBNE8sT0F3QkExRixPQUFBQyxlQUFBdkksRUFBQSxhQUFBLENBQUE0QyxPQUFBLElBQ0EsSUFBQWtRLEVBQUFwVCxFQUFBLHVCQUNBMk8sRUFBQTNPLEVBQUEsYUFDQXFULEVBQUFyVCxFQUFBLGdCQUNBc1QsRUFBQXRULEVBQUEsMEJBQ0F1VCxFQUFBdlQsRUFBQSwrQkFDQXFLLEVBQUFySyxFQUFBLFdBQ0F3VCxFQUFBeFQsRUFBQSx3QkFHQXlULEdBZ0RBQSxFQUFBMUssVUFBQW5HLE1BQUEsU0FBQThRLEdBQ0EsT0FBQS9HLEVBQUF2SCxVQUFBLE9BQUEsRUFBQSxXQUNBLElBQUEzQixFQUNBLE9BQUErSixFQUFBcEksS0FBQSxTQUFBOEosR0FDQSxPQUFBQSxFQUFBdEIsT0FDQSxLQUFBLEVBSUEsT0FIQThGLEVBQUFBLEdBQUFMLEVBQUFNLGVBQUFDLE9BQ0F2SixFQUFBd0osSUFBQUMsS0FBQUosRUFBQUwsRUFBQU0sZUFBQSxrQkFDQXZPLEtBQUErRixPQUFBbUUsSUFBQVgsRUFBQVksU0FBQXdFLE1BQUEsNkNBQUFWLEVBQUFNLGVBQUFELEdBQUEsTUFDQSxpQkFBQXRPLEtBQUE0TyxnQkFDQSxDQUFBLEVBQUFuSixRQUFBQyxPQUFBLElBQUEzSyxNQUFBLDhFQUVBaUYsS0FBQTRPLGdCQUFBLGFBQ0E1TyxLQUFBNk8scUJBQUE3TyxLQUFBOE8sY0FBQVIsR0FDQSxDQUFBLEVBQUF0TyxLQUFBNk8sdUJBQ0EsS0FBQSxFQUVBLE9BREEvRSxFQUFBckIsT0FDQSxrQkFBQXpJLEtBQUE0TyxnQkFBQSxDQUFBLEVBQUEsSUFDQXZRLEVBQUEsK0RBQ0EyQixLQUFBK0YsT0FBQW1FLElBQUFYLEVBQUFZLFNBQUFwUCxNQUFBc0QsR0FFQSxDQUFBLEVBQUEyQixLQUFBK08sY0FDQSxLQUFBLEVBR0EsT0FEQWpGLEVBQUFyQixPQUNBLENBQUEsRUFBQWhELFFBQUFDLE9BQUEsSUFBQTNLLE1BQUFzRCxLQUNBLEtBQUEsRUFDQSxHQUFBLGNBQUEyQixLQUFBNE8sZ0JBR0EsT0FGQXZRLEVBQUEsOEdBQ0EyQixLQUFBK0YsT0FBQW1FLElBQUFYLEVBQUFZLFNBQUFwUCxNQUFBc0QsR0FDQSxDQUFBLEVBQUFvSCxRQUFBQyxPQUFBLElBQUEzSyxNQUFBc0QsS0FFQXlMLEVBQUF0QixNQUFBLEVBQ0EsS0FBQSxFQUVBLE9BREF4SSxLQUFBZ1AsbUJBQUEsRUFDQSxDQUFBLFNBS0FYLEVBQUExSyxVQUFBMEIsS0FBQSxTQUFBcUgsR0FDQSxNQUFBLGNBQUExTSxLQUFBNE8sZ0JBQ0FuSixRQUFBQyxPQUFBLElBQUEzSyxNQUFBLHlFQUVBaUYsS0FBQWlQLFlBQ0FqUCxLQUFBaVAsVUFBQSxJQUFBQyxFQUFBbFAsS0FBQW1QLFlBR0FuUCxLQUFBaVAsVUFBQTVKLEtBQUFxSCxLQUVBMkIsRUFBQTFLLFVBQUF5TCxLQUFBLFNBQUF4UixHQUNBLE9BQUEySixFQUFBdkgsVUFBQSxPQUFBLEVBQUEsV0FDQSxJQUFBZ0csRUFBQWhHLEtBQ0EsT0FBQW9JLEVBQUFwSSxLQUFBLFNBQUE4SixHQUNBLE9BQUFBLEVBQUF0QixPQUNBLEtBQUEsRUFDQSxNQUFBLGlCQUFBeEksS0FBQTRPLGlCQUNBNU8sS0FBQStGLE9BQUFtRSxJQUFBWCxFQUFBWSxTQUFBd0UsTUFBQSwrQkFBQS9RLEVBQUEsMEVBQ0EsQ0FBQSxFQUFBNkgsUUFBQW1DLFlBRUEsa0JBQUE1SCxLQUFBNE8saUJBQ0E1TyxLQUFBK0YsT0FBQW1FLElBQUFYLEVBQUFZLFNBQUF3RSxNQUFBLCtCQUFBL1EsRUFBQSwyRUFDQSxDQUFBLEVBQUFvQyxLQUFBK08sZUFFQS9PLEtBQUE0TyxnQkFBQSxnQkFDQTVPLEtBQUErTyxZQUFBLElBQUF0SixRQUFBLFNBQUFtQyxHQUVBNUIsRUFBQXFKLG9CQUFBekgsSUFHQSxDQUFBLEVBQUE1SCxLQUFBc1AsYUFBQTFSLEtBQ0EsS0FBQSxFQUdBLE9BREFrTSxFQUFBckIsT0FDQSxDQUFBLEVBQUF6SSxLQUFBK08sYUFDQSxLQUFBLEVBRUEsT0FEQWpGLEVBQUFyQixPQUNBLENBQUEsU0FLQTRGLEVBQUExSyxVQUFBMkwsYUFBQSxTQUFBMVIsR0FDQSxPQUFBMkosRUFBQXZILFVBQUEsT0FBQSxFQUFBLFdBQ0EsSUFBQXVQLEVBQ0EsT0FBQW5ILEVBQUFwSSxLQUFBLFNBQUE4SixHQUNBLE9BQUFBLEVBQUF0QixPQUNBLEtBQUEsRUFJQXhJLEtBQUF3UCxVQUFBNVIsRUFDQWtNLEVBQUF0QixNQUFBLEVBQ0EsS0FBQSxFQUVBLE9BREFzQixFQUFBcEIsS0FBQVksS0FBQSxDQUFBLEVBQUEsRUFBQSxDQUFBLElBQ0EsQ0FBQSxFQUFBdEosS0FBQTZPLHNCQUNBLEtBQUEsRUFHQSxLQUFBLEVBRUEsT0FEQS9FLEVBQUFyQixPQUNBLENBQUEsRUFBQSxHQUNBLEtBQUEsRUFDQSxJQUFBekksS0FBQW1QLFVBQUEsTUFBQSxDQUFBLEVBQUEsR0FDQXJGLEVBQUF0QixNQUFBLEVBQ0EsS0FBQSxFQUVBLE9BREFzQixFQUFBcEIsS0FBQVksS0FBQSxDQUFBLEVBQUEsRUFBQSxDQUFBLElBQ0EsQ0FBQSxFQUFBdEosS0FBQW1QLFVBQUFDLFFBQ0EsS0FBQSxFQUVBLE9BREF0RixFQUFBckIsT0FDQSxDQUFBLEVBQUEsR0FDQSxLQUFBLEVBSUEsT0FIQThHLEVBQUF6RixFQUFBckIsT0FDQXpJLEtBQUErRixPQUFBbUUsSUFBQVgsRUFBQVksU0FBQXBQLE1BQUEsZ0RBQUF3VSxFQUFBLE1BQ0F2UCxLQUFBeVAsaUJBQ0EsQ0FBQSxFQUFBLEdBQ0EsS0FBQSxFQUVBLE9BREF6UCxLQUFBbVAsZUFBQXRJLEVBQ0EsQ0FBQSxFQUFBLElBQ0EsS0FBQSxFQUNBN0csS0FBQStGLE9BQUFtRSxJQUFBWCxFQUFBWSxTQUFBd0UsTUFBQSwwRkFDQTNPLEtBQUF5UCxpQkFDQTNGLEVBQUF0QixNQUFBLEdBQ0EsS0FBQSxHQUFBLE1BQUEsQ0FBQSxTQUtBNkYsRUFBQTFLLFVBQUFtTCxjQUFBLFNBQUFSLEdBQ0EsT0FBQS9HLEVBQUF2SCxVQUFBLE9BQUEsRUFBQSxXQUNBLElBQUExRCxFQUFBb1QsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFDQSxPQUFBMUgsRUFBQXBJLEtBQUEsU0FBQThKLEdBQ0EsT0FBQUEsRUFBQXRCLE9BQ0EsS0FBQSxFQUNBbE0sRUFBQTBELEtBQUErUCxRQUNBL1AsS0FBQWdRLG1CQUFBaFEsS0FBQTZOLFFBQUFtQyxtQkFDQWxHLEVBQUF0QixNQUFBLEVBQ0EsS0FBQSxFQUVBLE9BREFzQixFQUFBcEIsS0FBQVksS0FBQSxDQUFBLEVBQUEsR0FBQSxDQUFBLEtBQ0F0SixLQUFBNk4sUUFBQW9DLGdCQUNBalEsS0FBQTZOLFFBQUFzQixZQUFBbEIsRUFBQWlDLGtCQUFBQyxXQUFBLENBQUEsRUFBQSxJQUVBblEsS0FBQW1QLFVBQUFuUCxLQUFBb1EsbUJBQUFuQyxFQUFBaUMsa0JBQUFDLFlBR0EsQ0FBQSxFQUFBblEsS0FBQXFRLGVBQUEvVCxFQUFBZ1MsS0FOQSxDQUFBLEVBQUEsR0FPQSxLQUFBLEVBSUEsT0FEQXhFLEVBQUFyQixPQUNBLENBQUEsRUFBQSxHQUNBLEtBQUEsRUFBQSxNQUFBLElBQUExTixNQUFBLGdGQUNBLEtBQUEsRUFBQSxNQUFBLENBQUEsRUFBQSxJQUNBLEtBQUEsRUFDQTJVLEVBQUEsS0FDQUMsRUFBQSxFQUNBQyxFQUFBLFdBQ0EsSUFBQVUsRUFDQSxPQUFBbEksRUFBQXBJLEtBQUEsU0FBQThKLEdBQ0EsT0FBQUEsRUFBQXRCLE9BQ0EsS0FBQSxFQUFBLE1BQUEsQ0FBQSxFQUFBcUgsRUFBQVUsdUJBQUFqVSxJQUNBLEtBQUEsRUFHQSxHQUZBb1QsRUFBQTVGLEVBQUFyQixPQUVBLGtCQUFBb0gsRUFBQWpCLGlCQUFBLGlCQUFBaUIsRUFBQWpCLGdCQUNBLE1BQUEsSUFBQTdULE1BQUEsa0RBRUEsR0FBQTJVLEVBQUE5UixNQUNBLE1BQUEsSUFBQTdDLE1BQUEyVSxFQUFBOVIsT0FFQSxHQUFBOFIsRUFBQWMsZ0JBQ0EsTUFBQSxJQUFBelYsTUFBQSxnTUFVQSxPQVJBMlUsRUFBQXBULE1BQ0FBLEVBQUFvVCxFQUFBcFQsS0FFQW9ULEVBQUFlLGNBQ0FILEVBQUFaLEVBQUFlLFlBQ0FaLEVBQUFHLG1CQUFBLFdBQUEsT0FBQU0sSUFFQVgsSUFDQSxDQUFBLE9BSUFFLEVBQUE3UCxLQUNBOEosRUFBQXRCLE1BQUEsRUFDQSxLQUFBLEVBQUEsTUFBQSxDQUFBLEVBQUFvSCxLQUNBLEtBQUEsRUFDQTlGLEVBQUFyQixPQUNBcUIsRUFBQXRCLE1BQUEsRUFDQSxLQUFBLEVBQ0EsR0FBQWtILEVBQUFwVCxLQUFBcVQsRUFsUEEsSUFrUEEsTUFBQSxDQUFBLEVBQUEsR0FDQTdGLEVBQUF0QixNQUFBLEVBQ0EsS0FBQSxFQUNBLEdBclBBLE1BcVBBbUgsR0FBQUQsRUFBQXBULElBQ0EsTUFBQSxJQUFBdkIsTUFBQSx5Q0FFQSxNQUFBLENBQUEsRUFBQWlGLEtBQUEwUSxnQkFBQXBVLEVBQUEwRCxLQUFBNk4sUUFBQXNCLFVBQUFPLEVBQUFwQixJQUNBLEtBQUEsR0FDQXhFLEVBQUFyQixPQUNBcUIsRUFBQXRCLE1BQUEsR0FDQSxLQUFBLEdBVUEsT0FUQXhJLEtBQUFtUCxxQkFBQWpCLEVBQUF5Qyx1QkFDQTNRLEtBQUE0USxTQUFBQyxtQkFBQSxHQUVBLGVBQUE3USxLQUFBNE8sa0JBR0E1TyxLQUFBK0YsT0FBQW1FLElBQUFYLEVBQUFZLFNBQUF3RSxNQUFBLDhDQUNBM08sS0FBQTRPLGdCQUFBLGFBRUEsQ0FBQSxFQUFBLElBQ0EsS0FBQSxHQUtBLE9BSkFrQixFQUFBaEcsRUFBQXJCLE9BQ0F6SSxLQUFBK0YsT0FBQW1FLElBQUFYLEVBQUFZLFNBQUFwUCxNQUFBLG1DQUFBK1UsR0FDQTlQLEtBQUE0TyxnQkFBQSxlQUNBNU8sS0FBQW1QLGVBQUF0SSxFQUNBLENBQUEsRUFBQXBCLFFBQUFDLE9BQUFvSyxJQUNBLEtBQUEsR0FBQSxNQUFBLENBQUEsU0FLQXpCLEVBQUExSyxVQUFBNE0sdUJBQUEsU0FBQWpVLEdBQ0EsT0FBQWlMLEVBQUF2SCxVQUFBLE9BQUEsRUFBQSxXQUNBLElBQUF5SyxFQUFBcUcsRUFBQWhILEVBQUFpSCxFQUFBalQsRUFBQWtULEVBQUFySCxFQUFBK0YsRUFBQXVCLEVBQ0EsT0FBQTdJLEVBQUFwSSxLQUFBLFNBQUFrUixHQUNBLE9BQUFBLEVBQUExSSxPQUNBLEtBQUEsRUFFQSxPQURBaUMsRUFBQSxHQUNBekssS0FBQWdRLG1CQUNBLENBQUEsRUFBQWhRLEtBQUFnUSxzQkFEQSxDQUFBLEVBQUEsR0FFQSxLQUFBLEdBQ0FjLEVBQUFJLEVBQUF6SSxVQUVBZ0MsRUFBQSxjQUFBLFVBQUFxRyxHQUVBSSxFQUFBMUksTUFBQSxFQUNBLEtBQUEsRUFDQXNCLEVBQUE3RSxFQUFBa00scUJBQUFKLEVBQUFqSCxFQUFBLEdBQUFoTSxFQUFBZ00sRUFBQSxHQUNBVyxFQUFBc0csR0FBQWpULEVBQ0FrVCxFQUFBaFIsS0FBQW9SLG9CQUFBOVUsR0FDQTBELEtBQUErRixPQUFBbUUsSUFBQVgsRUFBQVksU0FBQXdFLE1BQUEsZ0NBQUFxQyxFQUFBLEtBQ0FFLEVBQUExSSxNQUFBLEVBQ0EsS0FBQSxFQUVBLE9BREEwSSxFQUFBeEksS0FBQVksS0FBQSxDQUFBLEVBQUEsRUFBQSxDQUFBLElBQ0EsQ0FBQSxFQUFBdEosS0FBQTZGLFdBQUFpSSxLQUFBa0QsRUFBQSxDQUNBNVIsUUFBQSxHQUNBcUwsUUFBQXRELEVBQUEsR0FBQXNELEVBQUF6SyxLQUFBNk4sUUFBQXBELFNBQ0FELGdCQUFBeEssS0FBQTZOLFFBQUFyRCxtQkFFQSxLQUFBLEVBRUEsT0FBQSxPQURBYixFQUFBdUgsRUFBQXpJLFFBQ0F6QixXQUNBLENBQUEsRUFBQXZCLFFBQUFDLE9BQUEsSUFBQTNLLE1BQUEsbURBQUE0TyxFQUFBM0MsV0FBQSxXQUVBMEksRUFBQWpULEtBQUFDLE1BQUFpTixFQUFBdkssVUFDQWlTLGtCQUFBM0IsRUFBQTJCLGlCQUFBLEtBR0EzQixFQUFBNEIsZ0JBQUE1QixFQUFBNkIsY0FFQSxDQUFBLEVBQUE3QixJQUNBLEtBQUEsRUFHQSxPQUZBdUIsRUFBQUMsRUFBQXpJLE9BQ0F6SSxLQUFBK0YsT0FBQW1FLElBQUFYLEVBQUFZLFNBQUFwUCxNQUFBLG1EQUFBa1csR0FDQSxDQUFBLEVBQUF4TCxRQUFBQyxPQUFBdUwsSUFDQSxLQUFBLEVBQUEsTUFBQSxDQUFBLFNBS0E1QyxFQUFBMUssVUFBQTZOLGlCQUFBLFNBQUFsVixFQUFBZ1YsR0FDQSxPQUFBQSxFQUdBaFYsSUFBQSxJQUFBQSxFQUFBMFEsUUFBQSxLQUFBLElBQUEsS0FBQSxNQUFBc0UsRUFGQWhWLEdBSUErUixFQUFBMUssVUFBQStNLGdCQUFBLFNBQUFwVSxFQUFBbVYsRUFBQS9CLEVBQUFnQyxHQUNBLE9BQUFuSyxFQUFBdkgsVUFBQSxPQUFBLEVBQUEsV0FDQSxJQUFBMlIsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQWxWLEVBQUFtVixFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBOVQsRUFDQSxPQUFBK0osRUFBQXBJLEtBQUEsU0FBQThKLEdBQ0EsT0FBQUEsRUFBQXRCLE9BQ0EsS0FBQSxFQUVBLE9BREFtSixFQUFBM1IsS0FBQXdSLGlCQUFBbFYsRUFBQW9ULEVBQUE0QixpQkFDQXRSLEtBQUFvUyxhQUFBWCxJQUNBelIsS0FBQStGLE9BQUFtRSxJQUFBWCxFQUFBWSxTQUFBd0UsTUFBQSwyRUFDQTNPLEtBQUFtUCxVQUFBc0MsRUFDQSxDQUFBLEVBQUF6UixLQUFBcVEsZUFBQXNCLEVBQUFELEtBSEEsQ0FBQSxFQUFBLEdBSUEsS0FBQSxFQUdBLE9BRkE1SCxFQUFBckIsT0FDQXpJLEtBQUF1UixhQUFBN0IsRUFBQTZCLGFBQ0EsQ0FBQSxHQUNBLEtBQUEsRUFDQUssRUFBQSxHQUNBQyxFQUFBbkMsRUFBQTJDLHFCQUFBLEdBQ0FQLEVBQUFwQyxFQUNBOVMsRUFBQSxFQUFBbVYsRUFBQUYsRUFDQS9ILEVBQUF0QixNQUFBLEVBQ0EsS0FBQSxFQUNBLE9BQUE1TCxFQUFBbVYsRUFBQTNXLFFBQ0E0VyxFQUFBRCxFQUFBblYsSUFDQXFWLEVBQUFqUyxLQUFBc1Msd0JBQUFOLEVBQUFQLEVBQUFDLGNBQ0EzVyxPQUVBNlcsRUFBQXRJLEtBQUEwSSxFQUFBN0MsVUFBQSxZQUFBOEMsR0FDQSxDQUFBLEVBQUEsS0FIQSxDQUFBLEVBQUEsSUFIQSxDQUFBLEVBQUEsSUFPQSxLQUFBLEVBQ0EsSUFBQWpTLEtBQUFvUyxhQUFBSCxHQUFBLE1BQUEsQ0FBQSxFQUFBLElBRUEsR0FEQWpTLEtBQUFtUCxVQUFBOEMsRUFDQUgsRUFBQSxNQUFBLENBQUEsRUFBQSxHQUNBaEksRUFBQXRCLE1BQUEsRUFDQSxLQUFBLEVBRUEsT0FEQXNCLEVBQUFwQixLQUFBWSxLQUFBLENBQUEsRUFBQSxFQUFBLENBQUEsSUFDQSxDQUFBLEVBQUF0SixLQUFBdVEsdUJBQUFqVSxJQUNBLEtBQUEsRUFFQSxPQURBd1YsRUFBQWhJLEVBQUFyQixPQUNBLENBQUEsRUFBQSxHQUNBLEtBQUEsRUFFQSxPQURBeUosRUFBQXBJLEVBQUFyQixPQUNBLENBQUEsRUFBQWhELFFBQUFDLE9BQUF3TSxJQUNBLEtBQUEsRUFDQVAsRUFBQTNSLEtBQUF3UixpQkFBQWxWLEVBQUF3VixFQUFBUixpQkFDQXhILEVBQUF0QixNQUFBLEVBQ0EsS0FBQSxFQUVBLE9BREFzQixFQUFBcEIsS0FBQVksS0FBQSxDQUFBLEVBQUEsR0FBQSxDQUFBLEtBQ0EsQ0FBQSxFQUFBdEosS0FBQXFRLGVBQUFzQixFQUFBRCxJQUNBLEtBQUEsR0FHQSxPQUZBNUgsRUFBQXJCLE9BQ0F6SSxLQUFBdVIsYUFBQU8sRUFBQVAsYUFDQSxDQUFBLEdBQ0EsS0FBQSxHQUtBLE9BSkFZLEVBQUFySSxFQUFBckIsT0FDQXpJLEtBQUErRixPQUFBbUUsSUFBQVgsRUFBQVksU0FBQXBQLE1BQUEsa0NBQUFpWCxFQUFBN0MsVUFBQSxNQUFBZ0QsR0FDQUwsT0FBQWpMLEVBQ0ErSyxFQUFBdEksS0FBQTBJLEVBQUE3QyxVQUFBLFlBQUFnRCxHQUNBLGVBQUFuUyxLQUFBNE8saUJBQ0F2USxFQUFBLHVEQUNBMkIsS0FBQStGLE9BQUFtRSxJQUFBWCxFQUFBWSxTQUFBd0UsTUFBQXRRLEdBQ0EsQ0FBQSxFQUFBb0gsUUFBQUMsT0FBQSxJQUFBM0ssTUFBQXNELE1BRUEsQ0FBQSxFQUFBLElBQ0EsS0FBQSxHQUVBLE9BREF6QixJQUNBLENBQUEsRUFBQSxHQUNBLEtBQUEsR0FDQSxPQUFBLEVBQUFnVixFQUFBeFcsT0FDQSxDQUFBLEVBQUFxSyxRQUFBQyxPQUFBLElBQUEzSyxNQUFBLHlFQUFBNlcsRUFBQWpHLEtBQUEsUUFFQSxDQUFBLEVBQUFsRyxRQUFBQyxPQUFBLElBQUEzSyxNQUFBLHVGQUtBc1QsRUFBQTFLLFVBQUF5TSxtQkFBQSxTQUFBakIsR0FDQSxPQUFBQSxHQUNBLEtBQUFsQixFQUFBaUMsa0JBQUFDLFdBQ0EsSUFBQW5RLEtBQUE2TixRQUFBMEUsVUFDQSxNQUFBLElBQUF4WCxNQUFBLHFEQUVBLE9BQUEsSUFBQXFULEVBQUFvRSxtQkFBQXhTLEtBQUE2RixXQUFBN0YsS0FBQWdRLG1CQUFBaFEsS0FBQStGLE9BQUEvRixLQUFBNk4sUUFBQTRFLG9CQUFBLEVBQUF6UyxLQUFBNk4sUUFBQTBFLFVBQUF2UyxLQUFBNk4sUUFBQXBELFNBQUEsSUFDQSxLQUFBd0QsRUFBQWlDLGtCQUFBd0MsaUJBQ0EsSUFBQTFTLEtBQUE2TixRQUFBOEUsWUFDQSxNQUFBLElBQUE1WCxNQUFBLHVEQUVBLE9BQUEsSUFBQW9ULEVBQUF5RSwwQkFBQTVTLEtBQUE2RixXQUFBN0YsS0FBQWdRLG1CQUFBaFEsS0FBQStGLE9BQUEvRixLQUFBNk4sUUFBQTRFLG9CQUFBLEVBQUF6UyxLQUFBNk4sUUFBQThFLFlBQUEzUyxLQUFBNk4sUUFBQXJELGdCQUFBeEssS0FBQTZOLFFBQUFwRCxTQUFBLElBQ0EsS0FBQXdELEVBQUFpQyxrQkFBQTJDLFlBQ0EsT0FBQSxJQUFBM0UsRUFBQXlDLHFCQUFBM1EsS0FBQTZGLFdBQUE3RixLQUFBZ1EsbUJBQUFoUSxLQUFBK0YsT0FBQS9GLEtBQUE2TixRQUFBNEUsb0JBQUEsRUFBQXpTLEtBQUE2TixRQUFBckQsZ0JBQUF4SyxLQUFBNk4sUUFBQXBELFNBQUEsSUFDQSxRQUNBLE1BQUEsSUFBQTFQLE1BQUEsc0JBQUFvVSxFQUFBLE9BR0FkLEVBQUExSyxVQUFBME0sZUFBQSxTQUFBL1QsRUFBQWdTLEdBQ0EsSUFBQXRJLEVBQUFoRyxLQUdBLE9BRkFBLEtBQUFtUCxVQUFBMkQsVUFBQTlTLEtBQUE4UyxVQUNBOVMsS0FBQW1QLFVBQUE0RCxRQUFBLFNBQUExWSxHQUFBLE9BQUEyTCxFQUFBeUosZUFBQXBWLElBQ0EyRixLQUFBbVAsVUFBQTZELFFBQUExVyxFQUFBZ1MsSUFFQUQsRUFBQTFLLFVBQUEyTyx3QkFBQSxTQUFBTixFQUFBUCxFQUFBQyxHQUNBLElBdUhBRCxFQUFBd0IsRUF2SEE5RCxFQUFBbEIsRUFBQWlDLGtCQUFBOEIsRUFBQTdDLFdBQ0EsR0FBQUEsTUFBQUEsRUFFQSxPQURBblAsS0FBQStGLE9BQUFtRSxJQUFBWCxFQUFBWSxTQUFBd0UsTUFBQSx1QkFBQXFELEVBQUE3QyxVQUFBLGlEQUNBLElBQUFwVSxNQUFBLHVCQUFBaVgsRUFBQTdDLFVBQUEsaURBR0EsR0FpSEE4RCxFQWpIQTlELEdBaUhBc0MsRUFqSEFBLElBa0hBLElBQUF3QixFQUFBeEIsR0F6RkEsT0FEQXpSLEtBQUErRixPQUFBbUUsSUFBQVgsRUFBQVksU0FBQXdFLE1BQUEsdUJBQUFWLEVBQUFpQyxrQkFBQWYsR0FBQSw0Q0FDQSxJQUFBcFUsTUFBQSxJQUFBa1QsRUFBQWlDLGtCQUFBZixHQUFBLGdDQXZCQSxLQUFBLEdBREE2QyxFQUFBa0IsZ0JBQUFDLElBQUEsU0FBQTlMLEdBQUEsT0FBQTRHLEVBQUFNLGVBQUFsSCxLQUNBMkYsUUFBQTBFLElBa0JBLE9BREExUixLQUFBK0YsT0FBQW1FLElBQUFYLEVBQUFZLFNBQUF3RSxNQUFBLHVCQUFBVixFQUFBaUMsa0JBQUFmLEdBQUEsZ0VBQUFsQixFQUFBTSxlQUFBbUQsR0FBQSxNQUNBLElBQUEzVyxNQUFBLElBQUFrVCxFQUFBaUMsa0JBQUFmLEdBQUEsc0JBQUFsQixFQUFBTSxlQUFBbUQsR0FBQSxLQWpCQSxHQUFBdkMsSUFBQWxCLEVBQUFpQyxrQkFBQUMsYUFBQW5RLEtBQUE2TixRQUFBMEUsV0FDQXBELElBQUFsQixFQUFBaUMsa0JBQUF3QyxtQkFBQTFTLEtBQUE2TixRQUFBOEUsWUFFQSxPQURBM1MsS0FBQStGLE9BQUFtRSxJQUFBWCxFQUFBWSxTQUFBd0UsTUFBQSx1QkFBQVYsRUFBQWlDLGtCQUFBZixHQUFBLHVEQUNBLElBQUFwVSxNQUFBLElBQUFrVCxFQUFBaUMsa0JBQUFmLEdBQUEsMkNBR0FuUCxLQUFBK0YsT0FBQW1FLElBQUFYLEVBQUFZLFNBQUF3RSxNQUFBLHdCQUFBVixFQUFBaUMsa0JBQUFmLEdBQUEsTUFDQSxJQUNBLE9BQUFuUCxLQUFBb1EsbUJBQUFqQixHQUVBLE1BQUFpRSxHQUNBLE9BQUFBLElBZUEvRSxFQUFBMUssVUFBQXlPLGFBQUEsU0FBQWpELEdBQ0EsT0FBQUEsR0FBQSxpQkFBQSxHQUFBLFlBQUFBLEdBRUFkLEVBQUExSyxVQUFBOEwsZUFBQSxTQUFBN1IsR0FDQSxJQUFBb0ksRUFBQWhHLEtBTUEsR0FMQUEsS0FBQStGLE9BQUFtRSxJQUFBWCxFQUFBWSxTQUFBd0UsTUFBQSxpQ0FBQS9RLEVBQUEsMkJBQUFvQyxLQUFBNE8sZ0JBQUEsS0FDQTVPLEtBQUFtUCxlQUFBdEksRUFFQWpKLEVBQUFvQyxLQUFBd1AsV0FBQTVSLEVBQ0FvQyxLQUFBd1AsZUFBQTNJLEVBQ0EsaUJBQUE3RyxLQUFBNE8sZ0JBQUEsQ0FJQSxHQUFBLGVBQUE1TyxLQUFBNE8sZ0JBRUEsTUFEQTVPLEtBQUErRixPQUFBbUUsSUFBQVgsRUFBQVksU0FBQUMsUUFBQSx5Q0FBQXhNLEVBQUEsMEVBQ0EsSUFBQTdDLE1BQUEsaUNBQUE2QyxFQUFBLHVFQXFCQSxHQW5CQSxrQkFBQW9DLEtBQUE0TyxpQkFHQTVPLEtBQUFxUCxzQkFFQXpSLEVBQ0FvQyxLQUFBK0YsT0FBQW1FLElBQUFYLEVBQUFZLFNBQUFwUCxNQUFBLHVDQUFBNkMsRUFBQSxNQUdBb0MsS0FBQStGLE9BQUFtRSxJQUFBWCxFQUFBWSxTQUFBa0osWUFBQSw0QkFFQXJULEtBQUFpUCxZQUNBalAsS0FBQWlQLFVBQUFHLE9BQUFrRSxNQUFBLFNBQUFqWixHQUNBMkwsRUFBQUQsT0FBQW1FLElBQUFYLEVBQUFZLFNBQUFwUCxNQUFBLDBDQUFBVixFQUFBLFFBRUEyRixLQUFBaVAsZUFBQXBJLEdBRUE3RyxLQUFBdVIsa0JBQUExSyxFQUNBN0csS0FBQTRPLGdCQUFBLGVBQ0E1TyxLQUFBZ1Asa0JBQUEsQ0FDQWhQLEtBQUFnUCxtQkFBQSxFQUNBLElBQ0FoUCxLQUFBK1MsU0FDQS9TLEtBQUErUyxRQUFBblYsR0FHQSxNQUFBdkQsR0FDQTJGLEtBQUErRixPQUFBbUUsSUFBQVgsRUFBQVksU0FBQXBQLE1BQUEsMEJBQUE2QyxFQUFBLGtCQUFBdkQsRUFBQSxhQWxDQTJGLEtBQUErRixPQUFBbUUsSUFBQVgsRUFBQVksU0FBQXdFLE1BQUEseUNBQUEvUSxFQUFBLCtFQXNDQXlRLEVBQUExSyxVQUFBNFAsV0FBQSxTQUFBalgsR0FFQSxHQUFBLElBQUFBLEVBQUFrWCxZQUFBLFdBQUEsSUFBQSxJQUFBbFgsRUFBQWtYLFlBQUEsVUFBQSxHQUNBLE9BQUFsWCxFQUVBLElBQUEySSxFQUFBaUIsU0FBQXVOLFlBQUF6WCxPQUFBTCxTQUNBLE1BQUEsSUFBQVosTUFBQSxtQkFBQXVCLEVBQUEsTUFPQSxJQUFBb1gsRUFBQTFYLE9BQUFMLFNBQUF3RSxjQUFBLEtBR0EsT0FGQXVULEVBQUFsVCxLQUFBbEUsRUFDQTBELEtBQUErRixPQUFBbUUsSUFBQVgsRUFBQVksU0FBQWtKLFlBQUEsZ0JBQUEvVyxFQUFBLFNBQUFvWCxFQUFBbFQsS0FBQSxNQUNBa1QsRUFBQWxULE1BRUE2TixFQUFBMUssVUFBQXlOLG9CQUFBLFNBQUE5VSxHQUNBLElBQUFxWCxFQUFBclgsRUFBQTBRLFFBQUEsS0FDQWdFLEVBQUExVSxFQUFBc1IsVUFBQSxHQUFBLElBQUErRixFQUFBclgsRUFBQWxCLE9BQUF1WSxHQVVBLE1BVEEsTUFBQTNDLEVBQUFBLEVBQUE1VixPQUFBLEtBQ0E0VixHQUFBLEtBRUFBLEdBQUEsYUFFQSxLQURBQSxJQUFBLElBQUEyQyxFQUFBLEdBQUFyWCxFQUFBc1IsVUFBQStGLElBQ0EzRyxRQUFBLHNCQUNBZ0UsSUFBQSxJQUFBMkMsRUFBQSxJQUFBLElBQ0EzQyxHQUFBLG9CQUFBaFIsS0FBQXFSLGtCQUVBTCxHQUVBM0MsR0EvaEJBLFNBQUFBLEVBQUEvUixFQUFBdVIsR0FTQSxRQVJBLElBQUFBLElBQUFBLEVBQUEsSUFDQTdOLEtBQUE0USxTQUFBLEdBQ0E1USxLQUFBcVIsaUJBQUEsRUFDQXBNLEVBQUF3SixJQUFBbUYsV0FBQXRYLEVBQUEsT0FDQTBELEtBQUErRixPQUFBZCxFQUFBNE8sYUFBQWhHLEVBQUE5SCxRQUNBL0YsS0FBQStQLFFBQUEvUCxLQUFBdVQsV0FBQWpYLElBQ0F1UixFQUFBQSxHQUFBLElBQ0E0RSx1QkFBQTVMLElBQUFnSCxFQUFBNEUsbUJBQUE1RSxFQUFBNEUsa0JBQ0Esa0JBQUE1RSxFQUFBckQsc0JBQUEzRCxJQUFBZ0gsRUFBQXJELGdCQUlBLE1BQUEsSUFBQXpQLE1BQUEsbUVBSEE4UyxFQUFBckQscUJBQUEzRCxJQUFBZ0gsRUFBQXJELGlCQUFBcUQsRUFBQXJELGdCQUtBLElBS0FvQixFQUxBa0ksRUFBQSxLQUNBQyxFQUFBLEtBQ0E5TyxFQUFBaUIsU0FBQUMsYUFBQSxJQUFBdkwsSUFJQWtaLEdBREFsSSxFQUFBLG1CQUFBQyxvQkFBQUMsd0JBQUFsUixHQUNBLE1BQ0FtWixFQUFBbkksRUFBQSxnQkFFQTNHLEVBQUFpQixTQUFBQyxRQUFBLG9CQUFBb00sV0FBQTFFLEVBQUEwRSxVQUdBdE4sRUFBQWlCLFNBQUFDLFNBQUEwSCxFQUFBMEUsV0FDQXVCLElBQ0FqRyxFQUFBMEUsVUFBQXVCLEdBSkFqRyxFQUFBMEUsVUFBQUEsVUFPQXROLEVBQUFpQixTQUFBQyxRQUFBLG9CQUFBd00sYUFBQTlFLEVBQUE4RSxZQUdBMU4sRUFBQWlCLFNBQUFDLFNBQUEwSCxFQUFBOEUsa0JBQ0EsSUFBQW9CLElBQ0FsRyxFQUFBOEUsWUFBQW9CLEdBSkFsRyxFQUFBOEUsWUFBQUEsWUFPQTNTLEtBQUE2RixXQUFBZ0ksRUFBQWhJLFlBQUEsSUFBQW1JLEVBQUE3SSxrQkFBQW5GLEtBQUErRixRQUNBL0YsS0FBQTRPLGdCQUFBLGVBQ0E1TyxLQUFBZ1AsbUJBQUEsRUFDQWhQLEtBQUE2TixRQUFBQSxFQUNBN04sS0FBQThTLFVBQUEsS0FDQTlTLEtBQUErUyxRQUFBLEtBb2ZBN1gsRUFBQW1ULGVBQUFBLEVBS0EsSUFBQWEsR0FTQUEsRUFBQXZMLFVBQUEwQixLQUFBLFNBQUFxSCxHQUtBLE9BSkExTSxLQUFBZ1UsV0FBQXRILEdBQ0ExTSxLQUFBaVUsa0JBQ0FqVSxLQUFBaVUsZ0JBQUEsSUFBQUMsR0FFQWxVLEtBQUFpVSxnQkFBQUUsU0FFQWpGLEVBQUF2TCxVQUFBeUwsS0FBQSxXQUdBLE9BRkFwUCxLQUFBb1UsV0FBQSxFQUNBcFUsS0FBQXFVLGlCQUFBek0sVUFDQTVILEtBQUFzVSxpQkFFQXBGLEVBQUF2TCxVQUFBcVEsV0FBQSxTQUFBdEgsR0FDQSxHQUFBMU0sS0FBQXlOLE9BQUFyUyxlQUFBNEUsS0FBQXlOLE9BQUEsV0FBQSxFQUNBLE1BQUEsSUFBQTFTLE1BQUEsc0NBQUFpRixLQUFBLE9BQUEsMkJBQUEsR0FFQUEsS0FBQXlOLE9BQUFuRSxLQUFBb0QsR0FDQTFNLEtBQUFxVSxpQkFBQXpNLFdBRUFzSCxFQUFBdkwsVUFBQTRRLFNBQUEsV0FDQSxPQUFBaE4sRUFBQXZILFVBQUEsT0FBQSxFQUFBLFdBQ0EsSUFBQWlVLEVBQUF2SCxFQUFBOEgsRUFDQSxPQUFBcE0sRUFBQXBJLEtBQUEsU0FBQThKLEdBQ0EsT0FBQUEsRUFBQXRCLE9BQ0EsS0FBQSxFQUVBLE1BQUEsQ0FBQSxFQUFBeEksS0FBQXFVLGlCQUFBRixTQUNBLEtBQUEsRUFFQSxHQURBckssRUFBQXJCLFFBQ0F6SSxLQUFBb1UsVUFJQSxPQUhBcFUsS0FBQWlVLGlCQUNBalUsS0FBQWlVLGdCQUFBdk8sT0FBQSx1QkFFQSxDQUFBLEVBQUEsR0FFQTFGLEtBQUFxVSxpQkFBQSxJQUFBSCxFQUNBRCxFQUFBalUsS0FBQWlVLGdCQUNBalUsS0FBQWlVLHFCQUFBcE4sRUFDQTZGLEVBQUEsaUJBQUExTSxLQUFBeU4sT0FBQSxHQUNBek4sS0FBQXlOLE9BQUE5QixLQUFBLElBQ0F1RCxFQUFBdUYsY0FBQXpVLEtBQUF5TixRQUNBek4sS0FBQXlOLE9BQUFyUyxPQUFBLEVBQ0EwTyxFQUFBdEIsTUFBQSxFQUNBLEtBQUEsRUFFQSxPQURBc0IsRUFBQXBCLEtBQUFZLEtBQUEsQ0FBQSxFQUFBLEVBQUEsQ0FBQSxJQUNBLENBQUEsRUFBQXRKLEtBQUFtUCxVQUFBOUosS0FBQXFILElBQ0EsS0FBQSxFQUdBLE9BRkE1QyxFQUFBckIsT0FDQXdMLEVBQUFyTSxVQUNBLENBQUEsRUFBQSxHQUNBLEtBQUEsRUFHQSxPQUZBNE0sRUFBQTFLLEVBQUFyQixPQUNBd0wsRUFBQXZPLE9BQUE4TyxHQUNBLENBQUEsRUFBQSxHQUNBLEtBQUEsRUFBQSxNQUFBLENBQUEsRUFBQSxHQUNBLEtBQUEsRUFBQSxNQUFBLENBQUEsU0FLQXRGLEVBQUF1RixjQUFBLFNBQUFDLEdBSUEsSUFIQSxJQUFBQyxFQUFBRCxFQUFBdkIsSUFBQSxTQUFBM08sR0FBQSxPQUFBQSxFQUFBZ0osYUFBQW9ILE9BQUEsU0FBQTlaLEVBQUEwSixHQUFBLE9BQUExSixFQUFBMEosSUFDQXlELEVBQUEsSUFBQTZFLFdBQUE2SCxHQUNBRSxFQUFBLEVBQ0FqWSxFQUFBLEVBQUFrWSxFQUFBSixFQUFBOVgsRUFBQWtZLEVBQUExWixPQUFBd0IsSUFBQSxDQUNBLElBQUFtWSxFQUFBRCxFQUFBbFksR0FDQXFMLEVBQUErTSxJQUFBLElBQUFsSSxXQUFBaUksR0FBQUYsR0FDQUEsR0FBQUUsRUFBQXZILFdBRUEsT0FBQXZGLEVBQUF3RixRQUVBeUIsR0EvRUEsU0FBQUEsRUFBQUMsR0FDQW5QLEtBQUFtUCxVQUFBQSxFQUNBblAsS0FBQXlOLE9BQUEsR0FDQXpOLEtBQUFvVSxXQUFBLEVBQ0FwVSxLQUFBcVUsaUJBQUEsSUFBQUgsRUFDQWxVLEtBQUFpVSxnQkFBQSxJQUFBQyxFQUNBbFUsS0FBQXNVLGdCQUFBdFUsS0FBQXVVLFdBMkVBclosRUFBQWdVLG1CQUFBQSxFQUNBLElBQUFnRixHQVFBQSxFQUFBdlEsVUFBQWlFLFFBQUEsV0FDQTVILEtBQUFpVixZQUVBZixFQUFBdlEsVUFBQStCLE9BQUEsU0FBQXdQLEdBQ0FsVixLQUFBbVYsU0FBQUQsSUFFQWhCLEdBYkEsU0FBQUEsSUFDQSxJQUFBbE8sRUFBQWhHLEtBQ0FBLEtBQUFtVSxRQUFBLElBQUExTyxRQUFBLFNBQUFtQyxFQUFBbEMsR0FDQSxJQUNBb0UsRUFBQSxDQUFBbEMsRUFBQWxDLEdBQUEsT0FBQU0sRUFBQWlQLFNBQUFuTCxFQUFBLEdBQUE5RCxFQUFBbVAsU0FBQXJMLEVBQUEsR0FBQUEsTSxpTUNwckJBLElBQUF2QyxFQUFBdkgsTUFBQUEsS0FBQXVILFdBQUEsU0FBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FDQSxPQUFBLElBQUFELEVBQUFBLEdBQUFqQyxTQUFBLFNBQUFtQyxFQUFBbEMsR0FDQSxTQUFBbUMsRUFBQS9KLEdBQUEsSUFBQWdLLEVBQUFILEVBQUFJLEtBQUFqSyxJQUFBLE1BQUF6RCxHQUFBcUwsRUFBQXJMLElBQ0EsU0FBQTJOLEVBQUFsSyxHQUFBLElBQUFnSyxFQUFBSCxFQUFBLE1BQUE3SixJQUFBLE1BQUF6RCxHQUFBcUwsRUFBQXJMLElBQ0EsU0FBQXlOLEVBQUFHLEdBQUFBLEVBQUFDLEtBQUFOLEVBQUFLLEVBQUFuSyxPQUFBLElBQUE0SixFQUFBLFNBQUFFLEdBQUFBLEVBQUFLLEVBQUFuSyxTQUFBTCxLQUFBb0ssRUFBQUcsR0FDQUYsR0FBQUgsRUFBQUEsRUFBQVEsTUFBQVgsRUFBQUMsR0FBQSxLQUFBTSxXQUdBSyxFQUFBcEksTUFBQUEsS0FBQW9JLGFBQUEsU0FBQVosRUFBQWEsR0FDQSxJQUFBM04sRUFBQTROLEVBQUEvTixFQUFBZ08sRUFBQSxDQUFBQyxNQUFBLEVBQUFDLEtBQUEsV0FBQSxHQUFBLEVBQUFsTyxFQUFBLEdBQUEsTUFBQUEsRUFBQSxHQUFBLE9BQUFBLEVBQUEsSUFBQW1PLEtBQUEsR0FBQUMsSUFBQSxJQUNBQyxFQUFBLENBQUFiLEtBQUFjLEVBQUEsR0FBQUMsTUFBQUQsRUFBQSxHQUFBRSxPQUFBRixFQUFBLElBQUEsTUFBQSxtQkFBQUcsU0FBQUosRUFBQUksT0FBQUMsVUFBQSxXQUFBLE9BQUFqSixPQUFBNEksRUFDQSxTQUFBQyxFQUFBdk8sR0FBQSxPQUFBLFNBQUE0TyxHQUFBLE9BQ0EsU0FBQUMsR0FDQSxHQUFBek8sRUFBQSxNQUFBLElBQUEwTyxVQUFBLG1DQUNBLEtBQUFiLEdBQUEsSUFDQSxHQUFBN04sRUFBQSxFQUFBNE4sSUFBQS9OLEVBQUEsRUFBQTRPLEVBQUEsR0FBQWIsRUFBQSxPQUFBYSxFQUFBLEdBQUFiLEVBQUEsU0FBQS9OLEVBQUErTixFQUFBLFNBQUEvTixFQUFBWSxLQUFBbU4sR0FBQSxHQUFBQSxFQUFBUCxTQUFBeE4sRUFBQUEsRUFBQVksS0FBQW1OLEVBQUFhLEVBQUEsS0FBQWpCLEtBQUEsT0FBQTNOLEVBRUEsT0FEQStOLEVBQUEsRUFBQS9OLElBQUE0TyxFQUFBLENBQUEsRUFBQUEsRUFBQSxHQUFBNU8sRUFBQXVELFFBQ0FxTCxFQUFBLElBQ0EsS0FBQSxFQUFBLEtBQUEsRUFBQTVPLEVBQUE0TyxFQUFBLE1BQ0EsS0FBQSxFQUFBLE9BQUFaLEVBQUFDLFFBQUEsQ0FBQTFLLE1BQUFxTCxFQUFBLEdBQUFqQixNQUFBLEdBQ0EsS0FBQSxFQUFBSyxFQUFBQyxRQUFBRixFQUFBYSxFQUFBLEdBQUFBLEVBQUEsQ0FBQSxHQUFBLFNBQ0EsS0FBQSxFQUFBQSxFQUFBWixFQUFBSSxJQUFBVSxNQUFBZCxFQUFBRyxLQUFBVyxNQUFBLFNBQ0EsUUFDQSxLQUFBOU8sRUFBQSxHQUFBQSxFQUFBZ08sRUFBQUcsTUFBQXROLFFBQUFiLEVBQUFBLEVBQUFhLE9BQUEsTUFBQSxJQUFBK04sRUFBQSxJQUFBLElBQUFBLEVBQUEsSUFBQSxDQUFBWixFQUFBLEVBQUEsU0FDQSxHQUFBLElBQUFZLEVBQUEsTUFBQTVPLEdBQUE0TyxFQUFBLEdBQUE1TyxFQUFBLElBQUE0TyxFQUFBLEdBQUE1TyxFQUFBLElBQUEsQ0FBQWdPLEVBQUFDLE1BQUFXLEVBQUEsR0FBQSxNQUNBLEdBQUEsSUFBQUEsRUFBQSxJQUFBWixFQUFBQyxNQUFBak8sRUFBQSxHQUFBLENBQUFnTyxFQUFBQyxNQUFBak8sRUFBQSxHQUFBQSxFQUFBNE8sRUFBQSxNQUNBLEdBQUE1TyxHQUFBZ08sRUFBQUMsTUFBQWpPLEVBQUEsR0FBQSxDQUFBZ08sRUFBQUMsTUFBQWpPLEVBQUEsR0FBQWdPLEVBQUFJLElBQUFXLEtBQUFILEdBQUEsTUFDQTVPLEVBQUEsSUFBQWdPLEVBQUFJLElBQUFVLE1BQ0FkLEVBQUFHLEtBQUFXLE1BQUEsU0FFQUYsRUFBQWQsRUFBQWxOLEtBQUFxTSxFQUFBZSxHQUNBLE1BQUFsTyxHQUFBOE8sRUFBQSxDQUFBLEVBQUE5TyxHQUFBaU8sRUFBQSxFQUFBLFFBQUE1TixFQUFBSCxFQUFBLEVBQ0EsR0FBQSxFQUFBNE8sRUFBQSxHQUFBLE1BQUFBLEVBQUEsR0FBQSxNQUFBLENBQUFyTCxNQUFBcUwsRUFBQSxHQUFBQSxFQUFBLFFBQUEsRUFBQWpCLE1BQUEsR0FyQkFKLENBQUEsQ0FBQXhOLEVBQUE0TyxPQXdCQTFGLE9BQUFDLGVBQUF2SSxFQUFBLGFBQUEsQ0FBQTRDLE9BQUEsSUFDQSxJQVFBc1gsRUFDQUEsRUFUQUMsRUFBQXphLEVBQUEsdUJBQ0EwYSxFQUFBMWEsRUFBQSxrQkFDQTJPLEVBQUEzTyxFQUFBLGFBQ0EyYSxFQUFBM2EsRUFBQSxhQUNBcUssRUFBQXJLLEVBQUEsWUFLQXdhLEVBV0FBLEVBQUFsYSxFQUFBa2EscUJBQUFsYSxFQUFBa2EsbUJBQUEsS0FUQSxhQUFBLGVBRUFBLEVBQUEsV0FBQSxhQUVBQSxFQUFBLFVBQUEsWUFFQUEsRUFBQSxjQUFBLGdCQUVBQSxFQUFBLGFBQUEsZUFHQSxJQUFBSSxHQStCQUEsRUFBQTVRLE9BQUEsU0FBQTFJLEVBQUE2SixFQUFBMFAsRUFBQUMsR0FDQSxPQUFBLElBQUFGLEVBQUF0WixFQUFBNkosRUFBQTBQLEVBQUFDLElBRUFsUyxPQUFBQyxlQUFBK1IsRUFBQTdSLFVBQUEsUUFBQSxDQUVBSSxJQUFBLFdBQ0EsT0FBQS9ELEtBQUE0TyxpQkFFQTVLLFlBQUEsRUFDQUMsY0FBQSxJQUVBVCxPQUFBQyxlQUFBK1IsRUFBQTdSLFVBQUEsZUFBQSxDQUlBSSxJQUFBLFdBQ0EsT0FBQS9ELEtBQUE5RCxZQUFBOEQsS0FBQTlELFdBQUFxVixjQUFBLE1BRUF2TixZQUFBLEVBQ0FDLGNBQUEsSUFFQVQsT0FBQUMsZUFBQStSLEVBQUE3UixVQUFBLFVBQUEsQ0FFQUksSUFBQSxXQUNBLE9BQUEvRCxLQUFBOUQsV0FBQTZULFNBQUEsSUFPQWlGLElBQUEsU0FBQTFZLEdBQ0EsR0FBQTBELEtBQUE0TyxrQkFBQXdHLEVBQUFPLGNBQUEzVixLQUFBNE8sa0JBQUF3RyxFQUFBUSxhQUNBLE1BQUEsSUFBQTdhLE1BQUEsMEZBRUEsSUFBQXVCLEVBQ0EsTUFBQSxJQUFBdkIsTUFBQSw4Q0FFQWlGLEtBQUE5RCxXQUFBNlQsUUFBQXpULEdBRUEwSCxZQUFBLEVBQ0FDLGNBQUEsSUFNQXVSLEVBQUE3UixVQUFBbkcsTUFBQSxXQUVBLE9BREF3QyxLQUFBNlYsYUFBQTdWLEtBQUE4Viw0QkFDQTlWLEtBQUE2VixjQUVBTCxFQUFBN1IsVUFBQW1TLDBCQUFBLFdBQ0EsT0FBQXZPLEVBQUF2SCxVQUFBLE9BQUEsRUFBQSxXQUNBLElBQUE0SixFQUNBLE9BQUF4QixFQUFBcEksS0FBQSxTQUFBOEosR0FDQSxPQUFBQSxFQUFBdEIsT0FDQSxLQUFBLEVBQ0EsR0FBQXhJLEtBQUE0TyxrQkFBQXdHLEVBQUFPLGFBQ0EsTUFBQSxDQUFBLEVBQUFsUSxRQUFBQyxPQUFBLElBQUEzSyxNQUFBLDJFQUVBaUYsS0FBQTRPLGdCQUFBd0csRUFBQVcsV0FDQS9WLEtBQUErRixPQUFBbUUsSUFBQVgsRUFBQVksU0FBQXdFLE1BQUEsMkJBQ0E3RSxFQUFBdEIsTUFBQSxFQUNBLEtBQUEsRUFFQSxPQURBc0IsRUFBQXBCLEtBQUFZLEtBQUEsQ0FBQSxFQUFBLEVBQUEsQ0FBQSxJQUNBLENBQUEsRUFBQXRKLEtBQUE4TyxpQkFDQSxLQUFBLEVBS0EsT0FKQWhGLEVBQUFyQixPQUNBekksS0FBQTRPLGdCQUFBd0csRUFBQVksVUFDQWhXLEtBQUFnUCxtQkFBQSxFQUNBaFAsS0FBQStGLE9BQUFtRSxJQUFBWCxFQUFBWSxTQUFBd0UsTUFBQSx5Q0FDQSxDQUFBLEVBQUEsR0FDQSxLQUFBLEVBSUEsT0FIQS9FLEVBQUFFLEVBQUFyQixPQUNBekksS0FBQTRPLGdCQUFBd0csRUFBQU8sYUFDQTNWLEtBQUErRixPQUFBbUUsSUFBQVgsRUFBQVksU0FBQXdFLE1BQUEsZ0VBQUEvRSxFQUFBLE1BQ0EsQ0FBQSxFQUFBbkUsUUFBQUMsT0FBQWtFLElBQ0EsS0FBQSxFQUFBLE1BQUEsQ0FBQSxTQUtBNEwsRUFBQTdSLFVBQUFtTCxjQUFBLFdBQ0EsT0FBQXZILEVBQUF2SCxVQUFBLE9BQUEsRUFBQSxXQUNBLElBQUFpVyxFQUFBNUosRUFBQWtELEVBQ0F2SixFQUFBaEcsS0FDQSxPQUFBb0ksRUFBQXBJLEtBQUEsU0FBQThKLEdBQ0EsT0FBQUEsRUFBQXRCLE9BQ0EsS0FBQSxFQU9BLE9BTkF4SSxLQUFBa1csMEJBQUFyUCxFQUNBN0csS0FBQW1XLDJCQUFBLEVBQ0FGLEVBQUEsSUFBQXhRLFFBQUEsU0FBQW1DLEVBQUFsQyxHQUNBTSxFQUFBb1Esa0JBQUF4TyxFQUNBNUIsRUFBQXFRLGtCQUFBM1EsSUFFQSxDQUFBLEVBQUExRixLQUFBOUQsV0FBQXNCLE1BQUF3QyxLQUFBeVYsU0FBQW5ILGlCQUNBLEtBQUEsRUFDQXhFLEVBQUFyQixPQUNBcUIsRUFBQXRCLE1BQUEsRUFDQSxLQUFBLEVBT0EsT0FOQXNCLEVBQUFwQixLQUFBWSxLQUFBLENBQUEsRUFBQSxFQUFBLENBQUEsSUFDQStDLEVBQUEsQ0FDQW9KLFNBQUF6VixLQUFBeVYsU0FBQTFFLEtBQ0F1RixRQUFBdFcsS0FBQXlWLFNBQUFhLFNBRUF0VyxLQUFBK0YsT0FBQW1FLElBQUFYLEVBQUFZLFNBQUF3RSxNQUFBLDhCQUNBLENBQUEsRUFBQTNPLEtBQUE5QixZQUFBOEIsS0FBQXVXLGtCQUFBbkssc0JBQUFDLEtBQ0EsS0FBQSxFQU9BLE9BTkF2QyxFQUFBckIsT0FDQXpJLEtBQUErRixPQUFBbUUsSUFBQVgsRUFBQVksU0FBQWtKLFlBQUEsc0JBQUFyVCxLQUFBeVYsU0FBQTFFLEtBQUEsTUFFQS9RLEtBQUF3VyxpQkFDQXhXLEtBQUF5VyxxQkFDQXpXLEtBQUEwVyx5QkFDQSxDQUFBLEVBQUFULEdBQ0EsS0FBQSxFQUtBLEdBSkFuTSxFQUFBckIsT0FJQXpJLEtBQUFrVyxxQkFJQSxNQUFBbFcsS0FBQWtXLHFCQUVBLE1BQUEsQ0FBQSxFQUFBLEdBQ0EsS0FBQSxFQU9BLE9BTkEzRyxFQUFBekYsRUFBQXJCLE9BQ0F6SSxLQUFBK0YsT0FBQW1FLElBQUFYLEVBQUFZLFNBQUF3RSxNQUFBLG9DQUFBWSxFQUFBLDZDQUNBdlAsS0FBQXdXLGlCQUNBeFcsS0FBQTJXLG1CQUdBLENBQUEsRUFBQTNXLEtBQUE5RCxXQUFBa1QsS0FBQUcsSUFDQSxLQUFBLEVBSUEsTUFEQXpGLEVBQUFyQixPQUNBOEcsRUFDQSxLQUFBLEVBQUEsTUFBQSxDQUFBLFNBU0FpRyxFQUFBN1IsVUFBQXlMLEtBQUEsV0FDQSxPQUFBN0gsRUFBQXZILFVBQUEsT0FBQSxFQUFBLFdBQ0EsSUFBQTZWLEVBQ0EsT0FBQXpOLEVBQUFwSSxLQUFBLFNBQUE4SixHQUNBLE9BQUFBLEVBQUF0QixPQUNBLEtBQUEsRUFHQSxPQUZBcU4sRUFBQTdWLEtBQUE2VixhQUNBN1YsS0FBQStPLFlBQUEvTyxLQUFBc1AsZUFDQSxDQUFBLEVBQUF0UCxLQUFBK08sYUFDQSxLQUFBLEVBQ0FqRixFQUFBckIsT0FDQXFCLEVBQUF0QixNQUFBLEVBQ0EsS0FBQSxFQUdBLE9BRkFzQixFQUFBcEIsS0FBQVksS0FBQSxDQUFBLEVBQUEsRUFBQSxDQUFBLElBRUEsQ0FBQSxFQUFBdU0sR0FDQSxLQUFBLEVBSUEsS0FBQSxFQUVBLE9BREEvTCxFQUFBckIsT0FDQSxDQUFBLEVBQUEsR0FDQSxLQUFBLEVBQUEsTUFBQSxDQUFBLFNBS0ErTSxFQUFBN1IsVUFBQTJMLGFBQUEsU0FBQTFSLEdBQ0EsT0FBQW9DLEtBQUE0TyxrQkFBQXdHLEVBQUFPLGNBQ0EzVixLQUFBK0YsT0FBQW1FLElBQUFYLEVBQUFZLFNBQUF3RSxNQUFBLDhCQUFBL1EsRUFBQSw4REFDQTZILFFBQUFtQyxXQUVBNUgsS0FBQTRPLGtCQUFBd0csRUFBQXdCLGVBQ0E1VyxLQUFBK0YsT0FBQW1FLElBQUFYLEVBQUFZLFNBQUF3RSxNQUFBLCtCQUFBL1EsRUFBQSwyRUFDQW9DLEtBQUErTyxjQUVBL08sS0FBQTRPLGdCQUFBd0csRUFBQXdCLGNBQ0E1VyxLQUFBK0YsT0FBQW1FLElBQUFYLEVBQUFZLFNBQUF3RSxNQUFBLDJCQUNBM08sS0FBQTZXLHNCQUlBN1csS0FBQStGLE9BQUFtRSxJQUFBWCxFQUFBWSxTQUFBd0UsTUFBQSxpRUFDQTVELGFBQUEvSyxLQUFBNlcsc0JBQ0E3VyxLQUFBNlcsMEJBQUFoUSxFQUNBN0csS0FBQThXLGdCQUNBclIsUUFBQW1DLFlBRUE1SCxLQUFBd1csaUJBQ0F4VyxLQUFBMlcsbUJBQ0EzVyxLQUFBa1cscUJBQUF0WSxHQUFBLElBQUE3QyxNQUFBLHVFQUlBaUYsS0FBQTlELFdBQUFrVCxLQUFBeFIsTUFTQTRYLEVBQUE3UixVQUFBb1QsT0FBQSxTQUFBQyxHQUdBLElBRkEsSUFBQWhSLEVBQUFoRyxLQUNBaVgsRUFBQSxHQUNBcmEsRUFBQSxFQUFBQSxFQUFBMEssVUFBQWxNLE9BQUF3QixJQUNBcWEsRUFBQXJhLEVBQUEsR0FBQTBLLFVBQUExSyxHQUVBLElBRUFzYSxFQUZBcE4sRUFBQTlKLEtBQUFtWCx1QkFBQUYsR0FBQUcsRUFBQXROLEVBQUEsR0FBQXVOLEVBQUF2TixFQUFBLEdBQ0F3TixFQUFBdFgsS0FBQXVYLHVCQUFBUCxFQUFBQyxFQUFBSSxHQUVBRyxFQUFBLElBQUFqQyxFQUFBa0MsUUFrQ0EsT0FqQ0FELEVBQUFFLGVBQUEsV0FDQSxJQUFBQyxFQUFBM1IsRUFBQTRSLHVCQUFBTixFQUFBTyxjQUVBLGNBREE3UixFQUFBOFIsVUFBQVIsRUFBQU8sY0FDQVgsRUFBQXpaLEtBQUEsV0FDQSxPQUFBdUksRUFBQStSLGlCQUFBSixNQUdBM1gsS0FBQThYLFVBQUFSLEVBQUFPLGNBQUEsU0FBQUcsRUFBQXBhLEdBQ0FBLEVBQ0E0WixFQUFBNVosTUFBQUEsR0FHQW9hLElBRUFBLEVBQUExVyxPQUFBZ1UsRUFBQTJDLFlBQUFDLFdBQ0FGLEVBQUFwYSxNQUNBNFosRUFBQTVaLE1BQUEsSUFBQTdDLE1BQUFpZCxFQUFBcGEsUUFHQTRaLEVBQUFXLFdBSUFYLEVBQUF6UCxLQUFBaVEsRUFBQSxRQUlBZCxFQUFBbFgsS0FBQStYLGlCQUFBVCxHQUNBaEUsTUFBQSxTQUFBalosR0FDQW1kLEVBQUE1WixNQUFBdkQsVUFDQTJMLEVBQUE4UixVQUFBUixFQUFBTyxnQkFFQTdYLEtBQUFvWSxjQUFBaEIsRUFBQUYsR0FDQU0sR0FFQWhDLEVBQUE3UixVQUFBekYsWUFBQSxTQUFBRyxHQUVBLE9BREEyQixLQUFBMFcseUJBQ0ExVyxLQUFBOUQsV0FBQW1KLEtBQUFoSCxJQU1BbVgsRUFBQTdSLFVBQUFvVSxpQkFBQSxTQUFBMVosR0FDQSxPQUFBMkIsS0FBQTlCLFlBQUE4QixLQUFBeVYsU0FBQTRDLGFBQUFoYSxLQVdBbVgsRUFBQTdSLFVBQUEwQixLQUFBLFNBQUEyUixHQUVBLElBREEsSUFBQUMsRUFBQSxHQUNBcmEsRUFBQSxFQUFBQSxFQUFBMEssVUFBQWxNLE9BQUF3QixJQUNBcWEsRUFBQXJhLEVBQUEsR0FBQTBLLFVBQUExSyxHQUVBLElBQUFrTixFQUFBOUosS0FBQW1YLHVCQUFBRixHQUFBRyxFQUFBdE4sRUFBQSxHQUFBdU4sRUFBQXZOLEVBQUEsR0FDQXdPLEVBQUF0WSxLQUFBK1gsaUJBQUEvWCxLQUFBdVksaUJBQUF2QixFQUFBQyxHQUFBLEVBQUFJLElBRUEsT0FEQXJYLEtBQUFvWSxjQUFBaEIsRUFBQWtCLEdBQ0FBLEdBYUE5QyxFQUFBN1IsVUFBQWpDLE9BQUEsU0FBQXNWLEdBR0EsSUFGQSxJQUFBaFIsRUFBQWhHLEtBQ0FpWCxFQUFBLEdBQ0FyYSxFQUFBLEVBQUFBLEVBQUEwSyxVQUFBbE0sT0FBQXdCLElBQ0FxYSxFQUFBcmEsRUFBQSxHQUFBMEssVUFBQTFLLEdBRUEsSUFBQWtOLEVBQUE5SixLQUFBbVgsdUJBQUFGLEdBQUFHLEVBQUF0TixFQUFBLEdBQUF1TixFQUFBdk4sRUFBQSxHQUNBd04sRUFBQXRYLEtBQUF1WSxpQkFBQXZCLEVBQUFDLEdBQUEsRUFBQUksR0ErQkEsT0E5QkEsSUFBQTVSLFFBQUEsU0FBQW1DLEVBQUFsQyxHQUVBTSxFQUFBOFIsVUFBQVIsRUFBQU8sY0FBQSxTQUFBRyxFQUFBcGEsR0FDQUEsRUFDQThILEVBQUE5SCxHQUdBb2EsSUFFQUEsRUFBQTFXLE9BQUFnVSxFQUFBMkMsWUFBQUMsV0FDQUYsRUFBQXBhLE1BQ0E4SCxFQUFBLElBQUEzSyxNQUFBaWQsRUFBQXBhLFFBR0FnSyxFQUFBb1EsRUFBQS9QLFFBSUF2QyxFQUFBLElBQUEzSyxNQUFBLDRCQUFBaWQsRUFBQTFXLFNBSUEsSUFBQTRWLEVBQUFsUixFQUFBK1IsaUJBQUFULEdBQ0FoRSxNQUFBLFNBQUFqWixHQUNBcUwsRUFBQXJMLFVBRUEyTCxFQUFBOFIsVUFBQVIsRUFBQU8sZ0JBRUE3UixFQUFBb1MsY0FBQWhCLEVBQUFGLE1BU0ExQixFQUFBN1IsVUFBQXBHLEdBQUEsU0FBQXlaLEVBQUF3QixHQUNBeEIsR0FBQXdCLElBR0F4QixFQUFBQSxFQUFBeUIsY0FDQXpZLEtBQUEwWSxRQUFBMUIsS0FDQWhYLEtBQUEwWSxRQUFBMUIsR0FBQSxLQUdBLElBQUFoWCxLQUFBMFksUUFBQTFCLEdBQUFoSyxRQUFBd0wsSUFHQXhZLEtBQUEwWSxRQUFBMUIsR0FBQTFOLEtBQUFrUCxLQUVBaEQsRUFBQTdSLFVBQUFnVixJQUFBLFNBQUEzQixFQUFBcFIsR0FDQSxJQUlBZ1QsRUFLQUMsRUFUQTdCLElBR0FBLEVBQUFBLEVBQUF5QixlQUNBRyxFQUFBNVksS0FBQTBZLFFBQUExQixNQUlBcFIsR0FFQSxLQURBaVQsRUFBQUQsRUFBQTVMLFFBQUFwSCxNQUVBZ1QsRUFBQUUsT0FBQUQsRUFBQSxHQUNBLElBQUFELEVBQUF4ZCxlQUNBNEUsS0FBQTBZLFFBQUExQixXQUtBaFgsS0FBQTBZLFFBQUExQixNQU9BeEIsRUFBQTdSLFVBQUFvUCxRQUFBLFNBQUFnRyxHQUNBQSxHQUNBL1ksS0FBQWdaLGdCQUFBMVAsS0FBQXlQLElBT0F2RCxFQUFBN1IsVUFBQXNWLGVBQUEsU0FBQUYsR0FDQUEsR0FDQS9ZLEtBQUFrWixzQkFBQTVQLEtBQUF5UCxJQU9BdkQsRUFBQTdSLFVBQUF3VixjQUFBLFNBQUFKLEdBQ0FBLEdBQ0EvWSxLQUFBb1oscUJBQUE5UCxLQUFBeVAsSUFHQXZELEVBQUE3UixVQUFBMFYsb0JBQUEsU0FBQTNNLEdBT0EsR0FOQTFNLEtBQUF3VyxpQkFDQXhXLEtBQUFtVyw0QkFDQXpKLEVBQUExTSxLQUFBc1oseUJBQUE1TSxHQUNBMU0sS0FBQW1XLDJCQUFBLEdBR0F6SixFQUdBLElBREEsSUFDQTlQLEVBQUEsRUFBQTJjLEVBREF2WixLQUFBeVYsU0FBQStELGNBQUE5TSxFQUFBMU0sS0FBQStGLFFBQ0FuSixFQUFBMmMsRUFBQW5lLE9BQUF3QixJQUFBLENBQ0EsSUFBQXlCLEVBQUFrYixFQUFBM2MsR0FDQSxPQUFBeUIsRUFBQWlELE1BQ0EsS0FBQWdVLEVBQUEyQyxZQUFBd0IsV0FDQXpaLEtBQUEwWixtQkFBQXJiLEdBQ0EsTUFDQSxLQUFBaVgsRUFBQTJDLFlBQUEwQixXQUNBLEtBQUFyRSxFQUFBMkMsWUFBQUMsV0FDQSxJQUFBYSxFQUFBL1ksS0FBQThYLFVBQUF6WixFQUFBd1osY0FDQWtCLElBQ0ExYSxFQUFBaUQsT0FBQWdVLEVBQUEyQyxZQUFBQyxtQkFDQWxZLEtBQUE4WCxVQUFBelosRUFBQXdaLGNBRUFrQixFQUFBMWEsSUFFQSxNQUNBLEtBQUFpWCxFQUFBMkMsWUFBQTJCLEtBRUEsTUFDQSxLQUFBdEUsRUFBQTJDLFlBQUE0QixNQUNBN1osS0FBQStGLE9BQUFtRSxJQUFBWCxFQUFBWSxTQUFBa0osWUFBQSx1Q0FDQSxJQUFBelYsRUFBQVMsRUFBQVQsTUFBQSxJQUFBN0MsTUFBQSxzQ0FBQXNELEVBQUFULFlBQUFpSixHQUNBLElBQUF4SSxFQUFBeWIsZUFJQTlaLEtBQUE5RCxXQUFBa1QsS0FBQXhSLEdBSUFvQyxLQUFBK08sWUFBQS9PLEtBQUFzUCxhQUFBMVIsR0FFQSxNQUNBLFFBQ0FvQyxLQUFBK0YsT0FBQW1FLElBQUFYLEVBQUFZLFNBQUFDLFFBQUEseUJBQUEvTCxFQUFBaUQsS0FBQSxNQUtBdEIsS0FBQXlXLHNCQUVBakIsRUFBQTdSLFVBQUEyVix5QkFBQSxTQUFBNU0sR0FDQSxJQUFBNUMsRUFDQWlRLEVBQ0F4TSxFQUNBLElBQ0FBLEdBQUF6RCxFQUFBOUosS0FBQXVXLGtCQUFBOUosdUJBQUFDLElBQUEsR0FBQXFOLEVBQUFqUSxFQUFBLEdBRUEsTUFBQXpQLEdBQ0EsSUFBQWdFLEVBQUEscUNBQUFoRSxFQUNBMkYsS0FBQStGLE9BQUFtRSxJQUFBWCxFQUFBWSxTQUFBcFAsTUFBQXNELEdBQ0EsSUFBQVQsRUFBQSxJQUFBN0MsTUFBQXNELEdBRUEsTUFEQTJCLEtBQUFxVyxrQkFBQXpZLEdBQ0FBLEVBRUEsR0FBQW1jLEVBQUFuYyxNQUtBLE1BSkFTLEVBQUEsb0NBQUEwYixFQUFBbmMsTUFDQW9DLEtBQUErRixPQUFBbUUsSUFBQVgsRUFBQVksU0FBQXBQLE1BQUFzRCxHQUNBVCxFQUFBLElBQUE3QyxNQUFBc0QsR0FDQTJCLEtBQUFxVyxrQkFBQXpZLEdBQ0FBLEVBTUEsT0FIQW9DLEtBQUErRixPQUFBbUUsSUFBQVgsRUFBQVksU0FBQXdFLE1BQUEsOEJBRUEzTyxLQUFBb1csb0JBQ0E3SSxHQUVBaUksRUFBQTdSLFVBQUErUyx1QkFBQSxXQUNBLElBQUExUSxFQUFBaEcsS0FDQUEsS0FBQTlELFdBQUEwVSxTQUFBQyxvQkFHQTdRLEtBQUEyVyxtQkFDQTNXLEtBQUFnYSxpQkFBQS9QLFdBQUEsV0FBQSxPQUFBMUMsRUFBQXZCLE9BQUEsT0FBQSxFQUFBLFdBRUEsT0FBQW9DLEVBQUFwSSxLQUFBLFNBQUFrUixHQUNBLE9BQUFBLEVBQUExSSxPQUNBLEtBQUEsRUFDQSxHQUFBeEksS0FBQTRPLGtCQUFBd0csRUFBQVksVUFBQSxNQUFBLENBQUEsRUFBQSxHQUNBOUUsRUFBQTFJLE1BQUEsRUFDQSxLQUFBLEVBRUEsT0FEQTBJLEVBQUF4SSxLQUFBWSxLQUFBLENBQUEsRUFBQSxFQUFBLENBQUEsSUFDQSxDQUFBLEVBQUF0SixLQUFBOUIsWUFBQThCLEtBQUFpYSxvQkFDQSxLQUFBLEVBRUEsT0FEQS9JLEVBQUF6SSxPQUNBLENBQUEsRUFBQSxHQUNBLEtBQUEsRUFLQSxPQUpBeUksRUFBQXpJLE9BR0F6SSxLQUFBMlcsbUJBQ0EsQ0FBQSxFQUFBLEdBQ0EsS0FBQSxFQUFBLE1BQUEsQ0FBQSxTQUdBM1csS0FBQWthLG1DQUVBMUUsRUFBQTdSLFVBQUE4UyxtQkFBQSxXQUNBLElBQUF6USxFQUFBaEcsS0FDQUEsS0FBQTlELFdBQUEwVSxVQUFBNVEsS0FBQTlELFdBQUEwVSxTQUFBQyxvQkFFQTdRLEtBQUFtYSxjQUFBbFEsV0FBQSxXQUFBLE9BQUFqRSxFQUFBb1UsaUJBQUFwYSxLQUFBcWEsK0JBR0E3RSxFQUFBN1IsVUFBQXlXLGNBQUEsV0FJQXBhLEtBQUE5RCxXQUFBa1QsS0FBQSxJQUFBclUsTUFBQSx5RUFFQXlhLEVBQUE3UixVQUFBK1YsbUJBQUEsU0FBQVksR0FDQSxJQVdBamMsRUFYQTJILEVBQUFoRyxLQUNBMFksRUFBQTFZLEtBQUEwWSxRQUFBNEIsRUFBQXRaLE9BQUF5WCxlQUNBLEdBQUFDLEVBQUEsQ0FDQSxJQUNBQSxFQUFBNkIsUUFBQSxTQUFBQyxHQUFBLE9BQUFBLEVBQUFyUyxNQUFBbkMsRUFBQXNVLEVBQUFoVCxhQUVBLE1BQUFqTixHQUNBMkYsS0FBQStGLE9BQUFtRSxJQUFBWCxFQUFBWSxTQUFBcFAsTUFBQSw2QkFBQXVmLEVBQUF0WixPQUFBeVgsY0FBQSxpQkFBQXBlLEVBQUEsTUFFQWlnQixFQUFBekMsZUFFQXhaLEVBQUEscUZBQ0EyQixLQUFBK0YsT0FBQW1FLElBQUFYLEVBQUFZLFNBQUFwUCxNQUFBc0QsR0FFQTJCLEtBQUErTyxZQUFBL08sS0FBQXNQLGFBQUEsSUFBQXZVLE1BQUFzRCxVQUlBMkIsS0FBQStGLE9BQUFtRSxJQUFBWCxFQUFBWSxTQUFBQyxRQUFBLG1DQUFBa1EsRUFBQXRaLE9BQUEsYUFHQXdVLEVBQUE3UixVQUFBOFcsaUJBQUEsU0FBQTdjLEdBQ0FvQyxLQUFBK0YsT0FBQW1FLElBQUFYLEVBQUFZLFNBQUF3RSxNQUFBLGtDQUFBL1EsRUFBQSwyQkFBQW9DLEtBQUE0TyxnQkFBQSxLQUVBNU8sS0FBQWtXLHFCQUFBbFcsS0FBQWtXLHNCQUFBdFksR0FBQSxJQUFBN0MsTUFBQSxpRkFHQWlGLEtBQUFvVyxtQkFDQXBXLEtBQUFvVyxvQkFFQXBXLEtBQUEwYSx5QkFBQTljLEdBQUEsSUFBQTdDLE1BQUEsdUVBQ0FpRixLQUFBd1csaUJBQ0F4VyxLQUFBMlcsbUJBQ0EzVyxLQUFBNE8sa0JBQUF3RyxFQUFBd0IsY0FDQTVXLEtBQUE4VyxjQUFBbFosR0FFQW9DLEtBQUE0TyxrQkFBQXdHLEVBQUFZLFdBQUFoVyxLQUFBMFYsZ0JBRUExVixLQUFBMmEsVUFBQS9jLEdBRUFvQyxLQUFBNE8sa0JBQUF3RyxFQUFBWSxXQUNBaFcsS0FBQThXLGNBQUFsWixJQVFBNFgsRUFBQTdSLFVBQUFtVCxjQUFBLFNBQUFsWixHQUNBLElBQUFvSSxFQUFBaEcsS0FDQSxHQUFBQSxLQUFBZ1Asa0JBQUEsQ0FDQWhQLEtBQUE0TyxnQkFBQXdHLEVBQUFPLGFBQ0EzVixLQUFBZ1AsbUJBQUEsRUFDQSxJQUNBaFAsS0FBQWdaLGdCQUFBdUIsUUFBQSxTQUFBNWYsR0FBQSxPQUFBQSxFQUFBd04sTUFBQW5DLEVBQUEsQ0FBQXBJLE1BRUEsTUFBQXZELEdBQ0EyRixLQUFBK0YsT0FBQW1FLElBQUFYLEVBQUFZLFNBQUFwUCxNQUFBLDBDQUFBNkMsRUFBQSxrQkFBQXZELEVBQUEsU0FJQW1iLEVBQUE3UixVQUFBZ1gsVUFBQSxTQUFBL2MsR0FDQSxPQUFBMkosRUFBQXZILFVBQUEsT0FBQSxFQUFBLFdBQ0EsSUFBQTRhLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUE5SixFQUNBakwsRUFBQWhHLEtBQ0EsT0FBQW9JLEVBQUFwSSxLQUFBLFNBQUE4SixHQUNBLE9BQUFBLEVBQUF0QixPQUNBLEtBQUEsRUFLQSxHQUpBb1MsRUFBQWhhLEtBQUFvYSxNQUVBRixPQURBRCxFQUFBLEtBQ0FqZCxFQUFBQSxFQUFBLElBQUE3QyxNQUFBLG1EQUVBLFFBREFnZ0IsRUFBQS9hLEtBQUFpYixrQkFBQUosSUFBQSxFQUFBQyxJQUlBLE9BRkE5YSxLQUFBK0YsT0FBQW1FLElBQUFYLEVBQUFZLFNBQUF3RSxNQUFBLHNHQUNBM08sS0FBQThXLGNBQUFsWixHQUNBLENBQUEsR0FTQSxHQVBBb0MsS0FBQTRPLGdCQUFBd0csRUFBQVEsYUFDQWhZLEVBQ0FvQyxLQUFBK0YsT0FBQW1FLElBQUFYLEVBQUFZLFNBQUFrSixZQUFBLDZDQUFBelYsRUFBQSxNQUdBb0MsS0FBQStGLE9BQUFtRSxJQUFBWCxFQUFBWSxTQUFBa0osWUFBQSw0QkFFQXJULEtBQUFpWixlQUFBLENBQ0EsSUFDQWpaLEtBQUFrWixzQkFBQXFCLFFBQUEsU0FBQTVmLEdBQUEsT0FBQUEsRUFBQXdOLE1BQUFuQyxFQUFBLENBQUFwSSxNQUVBLE1BQUF2RCxHQUNBMkYsS0FBQStGLE9BQUFtRSxJQUFBWCxFQUFBWSxTQUFBcFAsTUFBQSxpREFBQTZDLEVBQUEsa0JBQUF2RCxFQUFBLE1BR0EsR0FBQTJGLEtBQUE0TyxrQkFBQXdHLEVBQUFRLGFBRUEsT0FEQTVWLEtBQUErRixPQUFBbUUsSUFBQVgsRUFBQVksU0FBQXdFLE1BQUEseUZBQ0EsQ0FBQSxHQUdBN0UsRUFBQXRCLE1BQUEsRUFDQSxLQUFBLEVBQ0EsT0FBQSxPQUFBdVMsRUFBQSxDQUFBLEVBQUEsSUFDQS9hLEtBQUErRixPQUFBbUUsSUFBQVgsRUFBQVksU0FBQWtKLFlBQUEsNEJBQUF3SCxFQUFBLGtCQUFBRSxFQUFBLFFBQ0EsQ0FBQSxFQUFBLElBQUF0VixRQUFBLFNBQUFtQyxHQUNBNUIsRUFBQTZRLHFCQUFBNU0sV0FBQXJDLEVBQUFtVCxPQUVBLEtBQUEsRUFHQSxHQUZBalIsRUFBQXJCLE9BQ0F6SSxLQUFBNlcsMEJBQUFoUSxFQUNBN0csS0FBQTRPLGtCQUFBd0csRUFBQVEsYUFFQSxPQURBNVYsS0FBQStGLE9BQUFtRSxJQUFBWCxFQUFBWSxTQUFBd0UsTUFBQSxxRkFDQSxDQUFBLEdBRUE3RSxFQUFBdEIsTUFBQSxFQUNBLEtBQUEsRUFFQSxPQURBc0IsRUFBQXBCLEtBQUFZLEtBQUEsQ0FBQSxFQUFBLEVBQUEsQ0FBQSxJQUNBLENBQUEsRUFBQXRKLEtBQUE4TyxpQkFDQSxLQUFBLEVBSUEsR0FIQWhGLEVBQUFyQixPQUNBekksS0FBQTRPLGdCQUFBd0csRUFBQVksVUFDQWhXLEtBQUErRixPQUFBbUUsSUFBQVgsRUFBQVksU0FBQWtKLFlBQUEsMkNBQ0FyVCxLQUFBbVosY0FDQSxJQUNBblosS0FBQW9aLHFCQUFBbUIsUUFBQSxTQUFBNWYsR0FBQSxPQUFBQSxFQUFBd04sTUFBQW5DLEVBQUEsQ0FBQUEsRUFBQTlKLFdBQUFxVixpQkFFQSxNQUFBbFgsR0FDQTJGLEtBQUErRixPQUFBbUUsSUFBQVgsRUFBQVksU0FBQXBQLE1BQUEsdURBQUFpRixLQUFBOUQsV0FBQXFWLGFBQUEsa0JBQUFsWCxFQUFBLE1BR0EsTUFBQSxDQUFBLEdBQ0EsS0FBQSxFQUdBLE9BRkE0VyxFQUFBbkgsRUFBQXJCLE9BQ0F6SSxLQUFBK0YsT0FBQW1FLElBQUFYLEVBQUFZLFNBQUFrSixZQUFBLDhDQUFBcEMsRUFBQSxNQUNBalIsS0FBQTRPLGtCQUFBd0csRUFBQVEsY0FDQTVWLEtBQUErRixPQUFBbUUsSUFBQVgsRUFBQVksU0FBQXdFLE1BQUEsdUZBQ0EsQ0FBQSxLQUVBbU0sRUFBQTdKLGFBQUFsVyxNQUFBa1csRUFBQSxJQUFBbFcsTUFBQWtXLEVBQUFpSyxZQUNBSCxFQUFBL2EsS0FBQWliLGtCQUFBSixJQUFBamEsS0FBQW9hLE1BQUFKLEVBQUFFLEdBQ0EsQ0FBQSxFQUFBLElBQ0EsS0FBQSxFQUFBLE1BQUEsQ0FBQSxFQUFBLEdBQ0EsS0FBQSxFQUdBLE9BRkE5YSxLQUFBK0YsT0FBQW1FLElBQUFYLEVBQUFZLFNBQUFrSixZQUFBLGdEQUFBelMsS0FBQW9hLE1BQUFKLEdBQUEsV0FBQUMsRUFBQSwrQ0FDQTdhLEtBQUE4VyxnQkFDQSxDQUFBLFNBS0F0QixFQUFBN1IsVUFBQXNYLGtCQUFBLFNBQUFyVSxFQUFBdVUsRUFBQUMsR0FDQSxJQUNBLE9BQUFwYixLQUFBMFYsZ0JBQUFqUCw2QkFBQSxDQUNBMFUsb0JBQUFBLEVBQ0F2VSxtQkFBQUEsRUFDQXdVLFlBQUFBLElBR0EsTUFBQS9nQixHQUVBLE9BREEyRixLQUFBK0YsT0FBQW1FLElBQUFYLEVBQUFZLFNBQUFwUCxNQUFBLDZDQUFBNkwsRUFBQSxLQUFBdVUsRUFBQSxrQkFBQTlnQixFQUFBLE1BQ0EsT0FHQW1iLEVBQUE3UixVQUFBK1cseUJBQUEsU0FBQTljLEdBQ0EsSUFBQWthLEVBQUE5WCxLQUFBOFgsVUFDQTlYLEtBQUE4WCxVQUFBLEdBQ0F0VSxPQUFBNlgsS0FBQXZELEdBQ0F5QyxRQUFBLFNBQUFlLElBRUF2QyxFQURBakIsRUFBQXdELElBQ0EsS0FBQTFkLE1BR0E0WCxFQUFBN1IsVUFBQWdULGlCQUFBLFdBQ0EzVyxLQUFBZ2Esa0JBQ0FqUCxhQUFBL0ssS0FBQWdhLG1CQUdBeEUsRUFBQTdSLFVBQUE2UyxlQUFBLFdBQ0F4VyxLQUFBbWEsZUFDQXBQLGFBQUEvSyxLQUFBbWEsZ0JBR0EzRSxFQUFBN1IsVUFBQTRVLGlCQUFBLFNBQUF2QixFQUFBQyxFQUFBc0UsRUFBQWxFLEdBQ0EsR0FBQWtFLEVBQ0EsT0FBQSxJQUFBbEUsRUFBQWpjLE9BQ0EsQ0FDQWtNLFVBQUEyUCxFQUNBSSxVQUFBQSxFQUNBclcsT0FBQWdXLEVBQ0ExVixLQUFBZ1UsRUFBQTJDLFlBQUF3QixZQUlBLENBQ0FuUyxVQUFBMlAsRUFDQWpXLE9BQUFnVyxFQUNBMVYsS0FBQWdVLEVBQUEyQyxZQUFBd0IsWUFLQSxJQUFBNUIsRUFBQTdYLEtBQUE2WCxhQUVBLE9BREE3WCxLQUFBNlgsZUFDQSxJQUFBUixFQUFBamMsT0FDQSxDQUNBa00sVUFBQTJQLEVBQ0FZLGFBQUFBLEVBQUFxRCxXQUNBN0QsVUFBQUEsRUFDQXJXLE9BQUFnVyxFQUNBMVYsS0FBQWdVLEVBQUEyQyxZQUFBd0IsWUFJQSxDQUNBblMsVUFBQTJQLEVBQ0FZLGFBQUFBLEVBQUFxRCxXQUNBbGEsT0FBQWdXLEVBQ0ExVixLQUFBZ1UsRUFBQTJDLFlBQUF3QixhQUtBakUsRUFBQTdSLFVBQUF5VSxjQUFBLFNBQUFoQixFQUFBRixHQUNBLElBQUFsUixFQUFBaEcsS0FDQSxHQUFBLElBQUFvWCxFQUFBaGMsT0FBQSxDQUtBOGIsRUFEQUEsR0FDQXpSLFFBQUFtQyxVQUVBLElBQUFnSSxFQUFBLFNBQUE0TCxHQUNBcEUsRUFBQW9FLEdBQUFDLFVBQUEsQ0FDQXRELFNBQUEsV0FDQWpCLEVBQUFBLEVBQUF6WixLQUFBLFdBQUEsT0FBQXVJLEVBQUErUixpQkFBQS9SLEVBQUEwVix3QkFBQUYsT0FFQTVkLE1BQUEsU0FBQUYsR0FDQSxJQUVBVyxFQURBWCxhQUFBM0MsTUFDQTJDLEVBQUFXLFFBRUFYLEdBQUFBLEVBQUF3ZCxTQUNBeGQsRUFBQXdkLFdBR0EsZ0JBRUFoRSxFQUFBQSxFQUFBelosS0FBQSxXQUFBLE9BQUF1SSxFQUFBK1IsaUJBQUEvUixFQUFBMFYsd0JBQUFGLEVBQUFuZCxPQUVBMEosS0FBQSxTQUFBZ04sR0FDQW1DLEVBQUFBLEVBQUF6WixLQUFBLFdBQUEsT0FBQXVJLEVBQUErUixpQkFBQS9SLEVBQUEyVix3QkFBQUgsRUFBQXpHLFVBTUEsSUFBQSxJQUFBeUcsS0FBQXBFLEVBQ0F4SCxFQUFBNEwsS0FHQWhHLEVBQUE3UixVQUFBd1QsdUJBQUEsU0FBQUYsR0FHQSxJQUZBLElBQUFHLEVBQUEsR0FDQUMsRUFBQSxHQUNBNWMsRUFBQSxFQUFBQSxFQUFBd2MsRUFBQTdiLE9BQUFYLElBQUEsQ0FDQSxJQUVBK2dCLEVBRkFJLEVBQUEzRSxFQUFBeGMsR0FDQXVGLEtBQUE2YixhQUFBRCxLQUNBSixFQUFBeGIsS0FBQTZYLGFBQ0E3WCxLQUFBNlgsZUFFQVQsRUFBQW9FLEdBQUFJLEVBQ0F2RSxFQUFBL04sS0FBQWtTLEVBQUFOLFlBRUFqRSxFQUFBNkIsT0FBQXJlLEVBQUEsSUFHQSxNQUFBLENBQUEyYyxFQUFBQyxJQUVBN0IsRUFBQTdSLFVBQUFrWSxhQUFBLFNBQUFDLEdBRUEsT0FBQUEsR0FBQUEsRUFBQUwsV0FBQSxtQkFBQUssRUFBQUwsV0FFQWpHLEVBQUE3UixVQUFBNFQsdUJBQUEsU0FBQVAsRUFBQUMsRUFBQUksR0FDQSxJQUFBUSxFQUFBN1gsS0FBQTZYLGFBRUEsT0FEQTdYLEtBQUE2WCxlQUNBLElBQUFSLEVBQUFqYyxPQUNBLENBQ0FrTSxVQUFBMlAsRUFDQVksYUFBQUEsRUFBQXFELFdBQ0E3RCxVQUFBQSxFQUNBclcsT0FBQWdXLEVBQ0ExVixLQUFBZ1UsRUFBQTJDLFlBQUE4RCxrQkFJQSxDQUNBelUsVUFBQTJQLEVBQ0FZLGFBQUFBLEVBQUFxRCxXQUNBbGEsT0FBQWdXLEVBQ0ExVixLQUFBZ1UsRUFBQTJDLFlBQUE4RCxtQkFJQXZHLEVBQUE3UixVQUFBaVUsdUJBQUEsU0FBQTdhLEdBQ0EsTUFBQSxDQUNBOGEsYUFBQTlhLEVBQ0F1RSxLQUFBZ1UsRUFBQTJDLFlBQUErRCxtQkFHQXhHLEVBQUE3UixVQUFBZ1ksd0JBQUEsU0FBQTVlLEVBQUFnWSxHQUNBLE1BQUEsQ0FDQThDLGFBQUE5YSxFQUNBZ1ksS0FBQUEsRUFDQXpULEtBQUFnVSxFQUFBMkMsWUFBQTBCLGFBR0FuRSxFQUFBN1IsVUFBQStYLHdCQUFBLFNBQUEzZSxFQUFBYSxFQUFBcUssR0FDQSxPQUFBckssRUFDQSxDQUNBQSxNQUFBQSxFQUNBaWEsYUFBQTlhLEVBQ0F1RSxLQUFBZ1UsRUFBQTJDLFlBQUFDLFlBR0EsQ0FDQUwsYUFBQTlhLEVBQ0FrTCxPQUFBQSxFQUNBM0csS0FBQWdVLEVBQUEyQyxZQUFBQyxhQUdBMUMsR0F0M0JBLFNBQUFBLEVBQUF0WixFQUFBNkosRUFBQTBQLEVBQUFDLEdBQ0EsSUFBQTFQLEVBQUFoRyxLQUNBaUYsRUFBQXdKLElBQUFtRixXQUFBMVgsRUFBQSxjQUNBK0ksRUFBQXdKLElBQUFtRixXQUFBN04sRUFBQSxVQUNBZCxFQUFBd0osSUFBQW1GLFdBQUE2QixFQUFBLFlBQ0F6VixLQUFBcWEsNEJBdkJBLElBd0JBcmEsS0FBQWthLGdDQXZCQSxLQXdCQWxhLEtBQUErRixPQUFBQSxFQUNBL0YsS0FBQXlWLFNBQUFBLEVBQ0F6VixLQUFBOUQsV0FBQUEsRUFDQThELEtBQUEwVixnQkFBQUEsRUFDQTFWLEtBQUF1VyxrQkFBQSxJQUFBbEIsRUFBQWxKLGtCQUNBbk0sS0FBQTlELFdBQUE0VyxVQUFBLFNBQUFwRyxHQUFBLE9BQUExRyxFQUFBcVQsb0JBQUEzTSxJQUNBMU0sS0FBQTlELFdBQUE2VyxRQUFBLFNBQUFuVixHQUFBLE9BQUFvSSxFQUFBeVUsaUJBQUE3YyxJQUNBb0MsS0FBQThYLFVBQUEsR0FDQTlYLEtBQUEwWSxRQUFBLEdBQ0ExWSxLQUFBZ1osZ0JBQUEsR0FDQWhaLEtBQUFrWixzQkFBQSxHQUNBbFosS0FBQW9aLHFCQUFBLEdBQ0FwWixLQUFBNlgsYUFBQSxFQUNBN1gsS0FBQW1XLDJCQUFBLEVBQ0FuVyxLQUFBNE8sZ0JBQUF3RyxFQUFBTyxhQUNBM1YsS0FBQWdQLG1CQUFBLEVBQ0FoUCxLQUFBaWEsa0JBQUFqYSxLQUFBeVYsU0FBQTRDLGFBQUEsQ0FBQS9XLEtBQUFnVSxFQUFBMkMsWUFBQTJCLE9BaTJCQTFlLEVBQUFzYSxjQUFBQSxHLDJIQ243QkEsSUFBQXJPLEVBQUFuSCxNQUFBQSxLQUFBbUgsVUFBQTNELE9BQUE0RCxRQUFBLFNBQUE3TSxHQUNBLElBQUEsSUFBQThNLEVBQUE1TSxFQUFBLEVBQUFILEVBQUFnTixVQUFBbE0sT0FBQVgsRUFBQUgsRUFBQUcsSUFFQSxJQUFBLElBQUFRLEtBREFvTSxFQUFBQyxVQUFBN00sR0FDQStJLE9BQUFHLFVBQUFjLGVBQUF0SixLQUFBa00sRUFBQXBNLEtBQ0FWLEVBQUFVLEdBQUFvTSxFQUFBcE0sSUFFQSxPQUFBVixHQUVBaUosT0FBQUMsZUFBQXZJLEVBQUEsYUFBQSxDQUFBNEMsT0FBQSxJQUNBLElBQUFtZSxFQUFBcmhCLEVBQUEsNEJBQ0FzaEIsRUFBQXRoQixFQUFBLG9CQUNBdWhCLEVBQUF2aEIsRUFBQSxtQkFDQTJPLEVBQUEzTyxFQUFBLGFBQ0F3aEIsRUFBQXhoQixFQUFBLHFCQUNBeWhCLEVBQUF6aEIsRUFBQSxhQUNBcUssRUFBQXJLLEVBQUEsV0FFQTBoQixFQUFBLENBQ0FDLE1BQUFoVCxFQUFBWSxTQUFBcVMsTUFDQUMsTUFBQWxULEVBQUFZLFNBQUF3RSxNQUNBK04sS0FBQW5ULEVBQUFZLFNBQUFrSixZQUNBc0osWUFBQXBULEVBQUFZLFNBQUFrSixZQUNBdUosS0FBQXJULEVBQUFZLFNBQUFDLFFBQ0F5UyxRQUFBdFQsRUFBQVksU0FBQUMsUUFDQXhNLE1BQUEyTCxFQUFBWSxTQUFBcFAsTUFDQStoQixTQUFBdlQsRUFBQVksU0FBQTRTLFNBQ0FDLEtBQUF6VCxFQUFBWSxTQUFBOFMsTUFlQSxJQUFBOWYsR0FHQUEsRUFBQXdHLFVBQUF1WixpQkFBQSxTQUFBQyxHQUVBLElBSUFDLEVBTUEsT0FYQW5ZLEVBQUF3SixJQUFBbUYsV0FBQXVKLEVBQUEsZ0JBMEVBdFcsSUF6RUFzVyxFQXlFQWpULElBeEVBbEssS0FBQStGLE9BQUFvWCxFQUVBLGlCQUFBQSxHQUNBQyxFQXRCQSxTQUFBck0sR0FJQSxJQUFBc00sRUFBQWYsRUFBQXZMLEVBQUEwSCxlQUNBLFFBQUEsSUFBQTRFLEVBQ0EsT0FBQUEsRUFHQSxNQUFBLElBQUF0aUIsTUFBQSxzQkFBQWdXLEdBYUF1TSxDQUFBSCxHQUNBbmQsS0FBQStGLE9BQUEsSUFBQWQsRUFBQXNZLGNBQUFILElBR0FwZCxLQUFBK0YsT0FBQSxJQUFBZCxFQUFBc1ksY0FBQUosR0FFQW5kLE1BRUE3QyxFQUFBd0csVUFBQXZHLFFBQUEsU0FBQWQsRUFBQWtoQixHQVdBLE9BVkF2WSxFQUFBd0osSUFBQW1GLFdBQUF0WCxFQUFBLE9BQ0EwRCxLQUFBMUQsSUFBQUEsRUFJQTBELEtBQUF5ZCxzQkFBQXRXLEVBQUEsR0FBQW5ILEtBQUF5ZCxzQkFEQSxpQkFBQUQsRUFDQUEsRUFHQSxDQUFBck8sVUFBQXFPLElBRUF4ZCxNQU1BN0MsRUFBQXdHLFVBQUErWixnQkFBQSxTQUFBakksR0FHQSxPQUZBeFEsRUFBQXdKLElBQUFtRixXQUFBNkIsRUFBQSxZQUNBelYsS0FBQXlWLFNBQUFBLEVBQ0F6VixNQUVBN0MsRUFBQXdHLFVBQUF0Ryx1QkFBQSxTQUFBc2dCLEdBQ0EsR0FBQTNkLEtBQUEwVixnQkFDQSxNQUFBLElBQUEzYSxNQUFBLDJDQVdBLE9BVEE0aUIsRUFHQXJaLE1BQUFzWixRQUFBRCxHQUNBM2QsS0FBQTBWLGdCQUFBLElBQUF1RyxFQUFBelYsdUJBQUFtWCxHQUdBM2QsS0FBQTBWLGdCQUFBaUksRUFOQTNkLEtBQUEwVixnQkFBQSxJQUFBdUcsRUFBQXpWLHVCQVFBeEcsTUFNQTdDLEVBQUF3RyxVQUFBckcsTUFBQSxXQUdBLElBQUFtZ0IsRUFBQXpkLEtBQUF5ZCx1QkFBQSxHQU9BLFFBTEE1VyxJQUFBNFcsRUFBQTFYLFNBRUEwWCxFQUFBMVgsT0FBQS9GLEtBQUErRixTQUdBL0YsS0FBQTFELElBQ0EsTUFBQSxJQUFBdkIsTUFBQSw0RkFFQSxJQUFBbUIsRUFBQSxJQUFBZ2dCLEVBQUE3TixlQUFBck8sS0FBQTFELElBQUFtaEIsR0FDQSxPQUFBdEIsRUFBQTNHLGNBQUE1USxPQUFBMUksRUFBQThELEtBQUErRixRQUFBc1csRUFBQXdCLFdBQUFDLFNBQUE5ZCxLQUFBeVYsVUFBQSxJQUFBMkcsRUFBQTJCLGdCQUFBL2QsS0FBQTBWLGtCQUVBdlksR0F6RUEsU0FBQUEsS0EyRUFqQyxFQUFBaUMscUJBQUFBLEcsNktDbkhBLElBQ0E4YSxFQUhBelUsT0FBQUMsZUFBQXZJLEVBQUEsYUFBQSxDQUFBNEMsT0FBQSxLQUdBbWEsRUFlQS9jLEVBQUErYyxjQUFBL2MsRUFBQStjLFlBQUEsS0FiQUEsRUFBQSxXQUFBLEdBQUEsYUFFQUEsRUFBQUEsRUFBQSxXQUFBLEdBQUEsYUFFQUEsRUFBQUEsRUFBQSxXQUFBLEdBQUEsYUFFQUEsRUFBQUEsRUFBQSxpQkFBQSxHQUFBLG1CQUVBQSxFQUFBQSxFQUFBLGlCQUFBLEdBQUEsbUJBRUFBLEVBQUFBLEVBQUEsS0FBQSxHQUFBLE9BRUFBLEVBQUFBLEVBQUEsTUFBQSxHQUFBLFMscUNDWEEsSUFDQTlOLEVBUEEzRyxPQUFBQyxlQUFBdkksRUFBQSxhQUFBLENBQUE0QyxPQUFBLEtBT0FxTSxFQWVBalAsRUFBQWlQLFdBQUFqUCxFQUFBaVAsU0FBQSxLQWJBQSxFQUFBLE1BQUEsR0FBQSxRQUVBQSxFQUFBQSxFQUFBLE1BQUEsR0FBQSxRQUVBQSxFQUFBQSxFQUFBLFlBQUEsR0FBQSxjQUVBQSxFQUFBQSxFQUFBLFFBQUEsR0FBQSxVQUVBQSxFQUFBQSxFQUFBLE1BQUEsR0FBQSxRQUVBQSxFQUFBQSxFQUFBLFNBQUEsR0FBQSxXQUVBQSxFQUFBQSxFQUFBLEtBQUEsR0FBQSxRLHFDQ2xCQSxJQUNBK0YsRUFZQTNCLEVBaEJBL0ssT0FBQUMsZUFBQXZJLEVBQUEsYUFBQSxDQUFBNEMsT0FBQSxLQUlBb1MsRUFTQWhWLEVBQUFnVixvQkFBQWhWLEVBQUFnVixrQkFBQSxLQVBBQSxFQUFBLEtBQUEsR0FBQSxPQUVBQSxFQUFBQSxFQUFBLFdBQUEsR0FBQSxhQUVBQSxFQUFBQSxFQUFBLGlCQUFBLEdBQUEsbUJBRUFBLEVBQUFBLEVBQUEsWUFBQSxHQUFBLGVBSUEzQixFQUtBclQsRUFBQXFULGlCQUFBclQsRUFBQXFULGVBQUEsS0FIQUEsRUFBQSxLQUFBLEdBQUEsT0FFQUEsRUFBQUEsRUFBQSxPQUFBLEdBQUEsVSxxQ0NwQkEvSyxPQUFBQyxlQUFBdkksRUFBQSxhQUFBLENBQUE0QyxPQUFBLElBQ0EsSUFBQXdYLEVBQUExYSxFQUFBLGtCQUNBMk8sRUFBQTNPLEVBQUEsYUFDQXFULEVBQUFyVCxFQUFBLGdCQUNBeWhCLEVBQUF6aEIsRUFBQSxhQUNBc1IsRUFBQXRSLEVBQUEsdUJBR0FtakIsR0FjQUEsRUFBQXBhLFVBQUE2VixjQUFBLFNBQUF3RSxFQUFBalksR0FFQSxHQUFBLGlCQUFBaVksRUFDQSxNQUFBLElBQUFqakIsTUFBQSwyREFFQSxJQUFBaWpCLEVBQ0EsTUFBQSxHQUVBLE9BQUFqWSxJQUNBQSxFQUFBc1csRUFBQXdCLFdBQUFDLFVBS0EsSUFGQSxJQUNBRyxFQUFBLEdBQ0FyaEIsRUFBQSxFQUFBMmMsRUFGQXJOLEVBQUFJLGtCQUFBNVAsTUFBQXNoQixHQUVBcGhCLEVBQUEyYyxFQUFBbmUsT0FBQXdCLElBQUEsQ0FDQSxJQUFBeUIsRUFBQWtiLEVBQUEzYyxHQUNBc2hCLEVBQUF6aEIsS0FBQUMsTUFBQTJCLEdBQ0EsR0FBQSxpQkFBQTZmLEVBQUE1YyxLQUNBLE1BQUEsSUFBQXZHLE1BQUEsb0JBRUEsT0FBQW1qQixFQUFBNWMsTUFDQSxLQUFBZ1UsRUFBQTJDLFlBQUF3QixXQUNBelosS0FBQW1lLG9CQUFBRCxHQUNBLE1BQ0EsS0FBQTVJLEVBQUEyQyxZQUFBMEIsV0FDQTNaLEtBQUFvZSxvQkFBQUYsR0FDQSxNQUNBLEtBQUE1SSxFQUFBMkMsWUFBQUMsV0FDQWxZLEtBQUFxZSxvQkFBQUgsR0FDQSxNQUNBLEtBQUE1SSxFQUFBMkMsWUFBQTJCLEtBR0EsS0FBQXRFLEVBQUEyQyxZQUFBNEIsTUFFQSxNQUNBLFFBRUE5VCxFQUFBbUUsSUFBQVgsRUFBQVksU0FBQWtKLFlBQUEseUJBQUE2SyxFQUFBNWMsS0FBQSxjQUNBLFNBRUEyYyxFQUFBM1UsS0FBQTRVLEdBRUEsT0FBQUQsR0FPQUYsRUFBQXBhLFVBQUEwVSxhQUFBLFNBQUFoYSxHQUNBLE9BQUE2TixFQUFBSSxrQkFBQUMsTUFBQTlQLEtBQUErUCxVQUFBbk8sS0FFQTBmLEVBQUFwYSxVQUFBd2Esb0JBQUEsU0FBQTlmLEdBQ0EyQixLQUFBc2UscUJBQUFqZ0IsRUFBQTJDLE9BQUEsZ0RBQ0E2RixJQUFBeEksRUFBQXdaLGNBQ0E3WCxLQUFBc2UscUJBQUFqZ0IsRUFBQXdaLGFBQUEsNENBR0FrRyxFQUFBcGEsVUFBQXlhLG9CQUFBLFNBQUEvZixHQUVBLEdBREEyQixLQUFBc2UscUJBQUFqZ0IsRUFBQXdaLGFBQUEsZ0RBQ0FoUixJQUFBeEksRUFBQTBXLEtBQ0EsTUFBQSxJQUFBaGEsTUFBQSw0Q0FHQWdqQixFQUFBcGEsVUFBQTBhLG9CQUFBLFNBQUFoZ0IsR0FDQSxHQUFBQSxFQUFBNEosUUFBQTVKLEVBQUFULE1BQ0EsTUFBQSxJQUFBN0MsTUFBQSw0Q0FFQXNELEVBQUE0SixRQUFBNUosRUFBQVQsT0FDQW9DLEtBQUFzZSxxQkFBQWpnQixFQUFBVCxNQUFBLDJDQUVBb0MsS0FBQXNlLHFCQUFBamdCLEVBQUF3WixhQUFBLDRDQUVBa0csRUFBQXBhLFVBQUEyYSxxQkFBQSxTQUFBeGdCLEVBQUFpSixHQUNBLEdBQUEsaUJBQUFqSixHQUFBLEtBQUFBLEVBQ0EsTUFBQSxJQUFBL0MsTUFBQWdNLElBR0FnWCxHQTVGQSxTQUFBQSxJQUVBL2QsS0FBQStRLEtBTEEsT0FPQS9RLEtBQUFzVyxRQUFBLEVBRUF0VyxLQUFBc08sZUFBQUwsRUFBQU0sZUFBQWdRLEtBd0ZBcmpCLEVBQUE2aUIsZ0JBQUFBLEcsaUlDdkdBdmEsT0FBQUMsZUFBQXZJLEVBQUEsYUFBQSxDQUFBNEMsT0FBQSxJQUVBLElBQUErZixHQUtBQSxFQUFBbGEsVUFBQXVHLElBQUEsU0FBQXNVLEVBQUFDLEtBR0FaLEVBQUFDLFNBQUEsSUFBQUQsRUFDQUEsR0FSQSxTQUFBQSxLQVVBM2lCLEVBQUEyaUIsV0FBQUEsRyxxQ0NiQSxJQUFBMVcsRUFBQW5ILE1BQUFBLEtBQUFtSCxVQUFBM0QsT0FBQTRELFFBQUEsU0FBQTdNLEdBQ0EsSUFBQSxJQUFBOE0sRUFBQTVNLEVBQUEsRUFBQUgsRUFBQWdOLFVBQUFsTSxPQUFBWCxFQUFBSCxFQUFBRyxJQUVBLElBQUEsSUFBQVEsS0FEQW9NLEVBQUFDLFVBQUE3TSxHQUNBK0ksT0FBQUcsVUFBQWMsZUFBQXRKLEtBQUFrTSxFQUFBcE0sS0FDQVYsRUFBQVUsR0FBQW9NLEVBQUFwTSxJQUVBLE9BQUFWLEdBRUFnTixFQUFBdkgsTUFBQUEsS0FBQXVILFdBQUEsU0FBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FDQSxPQUFBLElBQUFELEVBQUFBLEdBQUFqQyxTQUFBLFNBQUFtQyxFQUFBbEMsR0FDQSxTQUFBbUMsRUFBQS9KLEdBQUEsSUFBQWdLLEVBQUFILEVBQUFJLEtBQUFqSyxJQUFBLE1BQUF6RCxHQUFBcUwsRUFBQXJMLElBQ0EsU0FBQTJOLEVBQUFsSyxHQUFBLElBQUFnSyxFQUFBSCxFQUFBLE1BQUE3SixJQUFBLE1BQUF6RCxHQUFBcUwsRUFBQXJMLElBQ0EsU0FBQXlOLEVBQUFHLEdBQUFBLEVBQUFDLEtBQUFOLEVBQUFLLEVBQUFuSyxPQUFBLElBQUE0SixFQUFBLFNBQUFFLEdBQUFBLEVBQUFLLEVBQUFuSyxTQUFBTCxLQUFBb0ssRUFBQUcsR0FDQUYsR0FBQUgsRUFBQUEsRUFBQVEsTUFBQVgsRUFBQUMsR0FBQSxLQUFBTSxXQUdBSyxFQUFBcEksTUFBQUEsS0FBQW9JLGFBQUEsU0FBQVosRUFBQWEsR0FDQSxJQUFBM04sRUFBQTROLEVBQUEvTixFQUFBZ08sRUFBQSxDQUFBQyxNQUFBLEVBQUFDLEtBQUEsV0FBQSxHQUFBLEVBQUFsTyxFQUFBLEdBQUEsTUFBQUEsRUFBQSxHQUFBLE9BQUFBLEVBQUEsSUFBQW1PLEtBQUEsR0FBQUMsSUFBQSxJQUNBQyxFQUFBLENBQUFiLEtBQUFjLEVBQUEsR0FBQUMsTUFBQUQsRUFBQSxHQUFBRSxPQUFBRixFQUFBLElBQUEsTUFBQSxtQkFBQUcsU0FBQUosRUFBQUksT0FBQUMsVUFBQSxXQUFBLE9BQUFqSixPQUFBNEksRUFDQSxTQUFBQyxFQUFBdk8sR0FBQSxPQUFBLFNBQUE0TyxHQUFBLE9BQ0EsU0FBQUMsR0FDQSxHQUFBek8sRUFBQSxNQUFBLElBQUEwTyxVQUFBLG1DQUNBLEtBQUFiLEdBQUEsSUFDQSxHQUFBN04sRUFBQSxFQUFBNE4sSUFBQS9OLEVBQUEsRUFBQTRPLEVBQUEsR0FBQWIsRUFBQSxPQUFBYSxFQUFBLEdBQUFiLEVBQUEsU0FBQS9OLEVBQUErTixFQUFBLFNBQUEvTixFQUFBWSxLQUFBbU4sR0FBQSxHQUFBQSxFQUFBUCxTQUFBeE4sRUFBQUEsRUFBQVksS0FBQW1OLEVBQUFhLEVBQUEsS0FBQWpCLEtBQUEsT0FBQTNOLEVBRUEsT0FEQStOLEVBQUEsRUFBQS9OLElBQUE0TyxFQUFBLENBQUEsRUFBQUEsRUFBQSxHQUFBNU8sRUFBQXVELFFBQ0FxTCxFQUFBLElBQ0EsS0FBQSxFQUFBLEtBQUEsRUFBQTVPLEVBQUE0TyxFQUFBLE1BQ0EsS0FBQSxFQUFBLE9BQUFaLEVBQUFDLFFBQUEsQ0FBQTFLLE1BQUFxTCxFQUFBLEdBQUFqQixNQUFBLEdBQ0EsS0FBQSxFQUFBSyxFQUFBQyxRQUFBRixFQUFBYSxFQUFBLEdBQUFBLEVBQUEsQ0FBQSxHQUFBLFNBQ0EsS0FBQSxFQUFBQSxFQUFBWixFQUFBSSxJQUFBVSxNQUFBZCxFQUFBRyxLQUFBVyxNQUFBLFNBQ0EsUUFDQSxLQUFBOU8sRUFBQSxHQUFBQSxFQUFBZ08sRUFBQUcsTUFBQXROLFFBQUFiLEVBQUFBLEVBQUFhLE9BQUEsTUFBQSxJQUFBK04sRUFBQSxJQUFBLElBQUFBLEVBQUEsSUFBQSxDQUFBWixFQUFBLEVBQUEsU0FDQSxHQUFBLElBQUFZLEVBQUEsTUFBQTVPLEdBQUE0TyxFQUFBLEdBQUE1TyxFQUFBLElBQUE0TyxFQUFBLEdBQUE1TyxFQUFBLElBQUEsQ0FBQWdPLEVBQUFDLE1BQUFXLEVBQUEsR0FBQSxNQUNBLEdBQUEsSUFBQUEsRUFBQSxJQUFBWixFQUFBQyxNQUFBak8sRUFBQSxHQUFBLENBQUFnTyxFQUFBQyxNQUFBak8sRUFBQSxHQUFBQSxFQUFBNE8sRUFBQSxNQUNBLEdBQUE1TyxHQUFBZ08sRUFBQUMsTUFBQWpPLEVBQUEsR0FBQSxDQUFBZ08sRUFBQUMsTUFBQWpPLEVBQUEsR0FBQWdPLEVBQUFJLElBQUFXLEtBQUFILEdBQUEsTUFDQTVPLEVBQUEsSUFBQWdPLEVBQUFJLElBQUFVLE1BQ0FkLEVBQUFHLEtBQUFXLE1BQUEsU0FFQUYsRUFBQWQsRUFBQWxOLEtBQUFxTSxFQUFBZSxHQUNBLE1BQUFsTyxHQUFBOE8sRUFBQSxDQUFBLEVBQUE5TyxHQUFBaU8sRUFBQSxFQUFBLFFBQUE1TixFQUFBSCxFQUFBLEVBQ0EsR0FBQSxFQUFBNE8sRUFBQSxHQUFBLE1BQUFBLEVBQUEsR0FBQSxNQUFBLENBQUFyTCxNQUFBcUwsRUFBQSxHQUFBQSxFQUFBLFFBQUEsRUFBQWpCLE1BQUEsR0FyQkFKLENBQUEsQ0FBQXhOLEVBQUE0TyxPQXdCQTFGLE9BQUFDLGVBQUF2SSxFQUFBLGFBQUEsQ0FBQTRDLE9BQUEsSUFDQSxJQUFBNGdCLEVBQUE5akIsRUFBQSxxQkFDQWtLLEVBQUFsSyxFQUFBLFlBQ0EyTyxFQUFBM08sRUFBQSxhQUNBcVQsRUFBQXJULEVBQUEsZ0JBQ0FxSyxFQUFBckssRUFBQSxXQUdBK1YsR0FhQW5OLE9BQUFDLGVBQUFrTixFQUFBaE4sVUFBQSxjQUFBLENBRUFJLElBQUEsV0FDQSxPQUFBL0QsS0FBQTJlLFVBQUFuWixTQUVBeEIsWUFBQSxFQUNBQyxjQUFBLElBRUEwTSxFQUFBaE4sVUFBQXFQLFFBQUEsU0FBQTFXLEVBQUFnUyxHQUNBLE9BQUEvRyxFQUFBdkgsVUFBQSxPQUFBLEVBQUEsV0FDQSxJQUFBOEosRUFBQW9ILEVBQUFILEVBQUFqVCxFQUFBMk0sRUFBQW1VLEVBQUE5TixFQUFBK04sRUFBQWxWLEVBQ0EsT0FBQXZCLEVBQUFwSSxLQUFBLFNBQUE4ZSxHQUNBLE9BQUFBLEVBQUF0VyxPQUNBLEtBQUEsRUFPQSxHQU5BdkQsRUFBQXdKLElBQUFtRixXQUFBdFgsRUFBQSxPQUNBMkksRUFBQXdKLElBQUFtRixXQUFBdEYsRUFBQSxrQkFDQXJKLEVBQUF3SixJQUFBQyxLQUFBSixFQUFBTCxFQUFBTSxlQUFBLGtCQUNBdk8sS0FBQTFELElBQUFBLEVBQ0EwRCxLQUFBK0YsT0FBQW1FLElBQUFYLEVBQUFZLFNBQUFxUyxNQUFBLHVDQUVBbE8sSUFBQUwsRUFBQU0sZUFBQUMsUUFDQSxvQkFBQW5JLGdCQUFBLGlCQUFBLElBQUFBLGdCQUFBOEUsYUFDQSxNQUFBLElBQUFwUSxNQUFBLDhGQWFBLE9BWEFtVyxFQUFBak0sRUFBQWtNLHFCQUFBSixFQUFBRyxFQUFBLEdBQUFwVCxFQUFBb1QsRUFBQSxHQUNBekcsRUFBQXRELElBQUEyQyxFQUFBLElBQUFpSCxHQUFBalQsRUFBQWdNLEdBQUE5SixLQUFBeUssU0FDQW1VLEVBQUEsQ0FDQXJaLFlBQUF2RixLQUFBMmUsVUFBQTdULE9BQ0FMLFFBQUFBLEVBQ0FULFFBQUEsSUFDQVEsZ0JBQUF4SyxLQUFBd0ssaUJBRUE4RCxJQUFBTCxFQUFBTSxlQUFBQyxTQUNBb1EsRUFBQXpULGFBQUEsZUFFQSxDQUFBLEVBQUFuTCxLQUFBK2Usa0JBQ0EsS0FBQSxFQUtBLE9BSkFqTyxFQUFBZ08sRUFBQXJXLE9BQ0F6SSxLQUFBZ2Ysa0JBQUFKLEVBQUE5TixHQUNBK04sRUFBQXZpQixFQUFBLE1BQUFzRSxLQUFBb2EsTUFDQWhiLEtBQUErRixPQUFBbUUsSUFBQVgsRUFBQVksU0FBQXFTLE1BQUEsb0NBQUFxQyxFQUFBLEtBQ0EsQ0FBQSxFQUFBN2UsS0FBQTZGLFdBQUE5QixJQUFBOGEsRUFBQUQsSUFDQSxLQUFBLEVBWUEsT0FWQSxPQURBalYsRUFBQW1WLEVBQUFyVyxRQUNBekIsWUFDQWhILEtBQUErRixPQUFBbUUsSUFBQVgsRUFBQVksU0FBQXBQLE1BQUEscURBQUE0TyxFQUFBM0MsV0FBQSxLQUVBaEgsS0FBQWlmLFdBQUEsSUFBQW5hLEVBQUFnQyxVQUFBNkMsRUFBQXNCLFlBQUEsR0FBQXRCLEVBQUEzQyxZQUNBaEgsS0FBQWtmLFNBQUEsR0FHQWxmLEtBQUFrZixTQUFBLEVBRUFsZixLQUFBbWYsVUFBQW5mLEtBQUFvZixLQUFBcGYsS0FBQTFELElBQUFzaUIsR0FDQSxDQUFBLFNBS0FqTyxFQUFBaE4sVUFBQW9iLGVBQUEsV0FDQSxPQUFBeFgsRUFBQXZILFVBQUEsT0FBQSxFQUFBLFdBQ0EsT0FBQW9JLEVBQUFwSSxLQUFBLFNBQUE4SixHQUNBLE9BQUFBLEVBQUF0QixPQUNBLEtBQUEsRUFDQSxPQUFBeEksS0FBQWdRLG1CQUNBLENBQUEsRUFBQWhRLEtBQUFnUSxzQkFEQSxDQUFBLEVBQUEsR0FFQSxLQUFBLEVBQUEsTUFBQSxDQUFBLEVBQUFsRyxFQUFBckIsUUFDQSxLQUFBLEVBQUEsTUFBQSxDQUFBLEVBQUEsWUFLQWtJLEVBQUFoTixVQUFBcWIsa0JBQUEsU0FBQTFaLEVBQUF3TCxHQUNBeEwsRUFBQW1GLFVBQ0FuRixFQUFBbUYsUUFBQSxJQUVBcUcsRUFFQXhMLEVBQUFtRixRQUFBLGNBQUEsVUFBQXFHLEVBSUF4TCxFQUFBbUYsUUFBQSxzQkFFQW5GLEVBQUFtRixRQUFBLGVBR0FrRyxFQUFBaE4sVUFBQXliLEtBQUEsU0FBQTlpQixFQUFBc2lCLEdBQ0EsT0FBQXJYLEVBQUF2SCxVQUFBLE9BQUEsRUFBQSxXQUNBLElBQUE4USxFQUFBK04sRUFBQWxWLEVBQUFDLEVBQ0EsT0FBQXhCLEVBQUFwSSxLQUFBLFNBQUE4SixHQUNBLE9BQUFBLEVBQUF0QixPQUNBLEtBQUEsRUFDQXNCLEVBQUFwQixLQUFBWSxLQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsSUFDQVEsRUFBQXRCLE1BQUEsRUFDQSxLQUFBLEVBQ0EsT0FBQXhJLEtBQUFrZixRQUNBLENBQUEsRUFBQWxmLEtBQUErZSxrQkFEQSxDQUFBLEVBQUEsR0FFQSxLQUFBLEVBQ0FqTyxFQUFBaEgsRUFBQXJCLE9BQ0F6SSxLQUFBZ2Ysa0JBQUFKLEVBQUE5TixHQUNBaEgsRUFBQXRCLE1BQUEsRUFDQSxLQUFBLEVBSUEsT0FIQXNCLEVBQUFwQixLQUFBWSxLQUFBLENBQUEsRUFBQSxFQUFBLENBQUEsSUFDQXVWLEVBQUF2aUIsRUFBQSxNQUFBc0UsS0FBQW9hLE1BQ0FoYixLQUFBK0YsT0FBQW1FLElBQUFYLEVBQUFZLFNBQUFxUyxNQUFBLG9DQUFBcUMsRUFBQSxLQUNBLENBQUEsRUFBQTdlLEtBQUE2RixXQUFBOUIsSUFBQThhLEVBQUFELElBQ0EsS0FBQSxFQXlCQSxPQXZCQSxPQURBalYsRUFBQUcsRUFBQXJCLFFBQ0F6QixZQUNBaEgsS0FBQStGLE9BQUFtRSxJQUFBWCxFQUFBWSxTQUFBa0osWUFBQSxzREFDQXJULEtBQUFrZixTQUFBLEdBRUEsTUFBQXZWLEVBQUEzQyxZQUNBaEgsS0FBQStGLE9BQUFtRSxJQUFBWCxFQUFBWSxTQUFBcFAsTUFBQSxxREFBQTRPLEVBQUEzQyxXQUFBLEtBRUFoSCxLQUFBaWYsV0FBQSxJQUFBbmEsRUFBQWdDLFVBQUE2QyxFQUFBc0IsWUFBQSxHQUFBdEIsRUFBQTNDLFlBQ0FoSCxLQUFBa2YsU0FBQSxHQUlBdlYsRUFBQXZLLFNBQ0FZLEtBQUErRixPQUFBbUUsSUFBQVgsRUFBQVksU0FBQXFTLE1BQUEsMENBQUF2WCxFQUFBb2EsY0FBQTFWLEVBQUF2SyxRQUFBWSxLQUFBeVMsbUJBQUEsS0FDQXpTLEtBQUE4UyxXQUNBOVMsS0FBQThTLFVBQUFuSixFQUFBdkssVUFLQVksS0FBQStGLE9BQUFtRSxJQUFBWCxFQUFBWSxTQUFBcVMsTUFBQSxzREFHQSxDQUFBLEVBQUEsR0FDQSxLQUFBLEVBaUJBLE9BaEJBNVMsRUFBQUUsRUFBQXJCLE9BQ0F6SSxLQUFBa2YsUUFLQXRWLGFBQUE5RSxFQUFBb0MsYUFFQWxILEtBQUErRixPQUFBbUUsSUFBQVgsRUFBQVksU0FBQXFTLE1BQUEsdURBSUF4YyxLQUFBaWYsV0FBQXJWLEVBQ0E1SixLQUFBa2YsU0FBQSxHQVZBbGYsS0FBQStGLE9BQUFtRSxJQUFBWCxFQUFBWSxTQUFBcVMsTUFBQSx3REFBQTVTLEVBQUF2TCxTQWFBLENBQUEsRUFBQSxHQUNBLEtBQUEsRUFBQSxNQUFBLENBQUEsRUFBQSxHQUNBLEtBQUEsRUFBQSxNQUFBLENBQUEsRUFBQSxHQUNBLEtBQUEsRUFPQSxPQU5BMkIsS0FBQStGLE9BQUFtRSxJQUFBWCxFQUFBWSxTQUFBcVMsTUFBQSw2Q0FHQXhjLEtBQUFzZixhQUNBdGYsS0FBQXVmLGVBRUEsQ0FBQSxHQUNBLEtBQUEsRUFBQSxNQUFBLENBQUEsU0FLQTVPLEVBQUFoTixVQUFBMEIsS0FBQSxTQUFBcUgsR0FDQSxPQUFBbkYsRUFBQXZILFVBQUEsT0FBQSxFQUFBLFdBQ0EsT0FBQW9JLEVBQUFwSSxLQUFBLFNBQUE4SixHQUNBLE9BQUE5SixLQUFBa2YsUUFHQSxDQUFBLEVBQUFqYSxFQUFBL0csWUFBQThCLEtBQUErRixPQUFBLGNBQUEvRixLQUFBNkYsV0FBQTdGLEtBQUExRCxJQUFBMEQsS0FBQWdRLG1CQUFBdEQsRUFBQTFNLEtBQUF5UyxrQkFBQXpTLEtBQUF3SyxnQkFBQXhLLEtBQUF5SyxVQUZBLENBQUEsRUFBQWhGLFFBQUFDLE9BQUEsSUFBQTNLLE1BQUEsdURBTUE0VixFQUFBaE4sVUFBQXlMLEtBQUEsV0FDQSxPQUFBN0gsRUFBQXZILFVBQUEsT0FBQSxFQUFBLFdBQ0EsSUFBQXlLLEVBQUFYLEVBQUEwVixFQUFBMWhCLEVBQUEyaEIsRUFBQTNPLEVBQ0EsT0FBQTFJLEVBQUFwSSxLQUFBLFNBQUFrUixHQUNBLE9BQUFBLEVBQUExSSxPQUNBLEtBQUEsRUFDQXhJLEtBQUErRixPQUFBbUUsSUFBQVgsRUFBQVksU0FBQXFTLE1BQUEsNkNBRUF4YyxLQUFBa2YsU0FBQSxFQUNBbGYsS0FBQTJlLFVBQUEvYSxRQUNBc04sRUFBQTFJLE1BQUEsRUFDQSxLQUFBLEVBRUEsT0FEQTBJLEVBQUF4SSxLQUFBWSxLQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsSUFDQSxDQUFBLEVBQUF0SixLQUFBbWYsV0FDQSxLQUFBLEVBV0EsT0FWQWpPLEVBQUF6SSxPQUVBekksS0FBQStGLE9BQUFtRSxJQUFBWCxFQUFBWSxTQUFBcVMsTUFBQSxxREFBQXhjLEtBQUExRCxJQUFBLEtBQ0FtTyxFQUFBLEdBQ0FYLEVBQUE3RSxFQUFBa00scUJBQUFxTyxFQUFBMVYsRUFBQSxHQUFBaE0sRUFBQWdNLEVBQUEsR0FDQVcsRUFBQStVLEdBQUExaEIsRUFDQTJoQixFQUFBLENBQ0FoVixRQUFBdEQsRUFBQSxHQUFBc0QsRUFBQXpLLEtBQUF5SyxTQUNBRCxnQkFBQXhLLEtBQUF3SyxpQkFFQSxDQUFBLEVBQUF4SyxLQUFBK2Usa0JBQ0EsS0FBQSxFQUdBLE9BRkFqTyxFQUFBSSxFQUFBekksT0FDQXpJLEtBQUFnZixrQkFBQVMsRUFBQTNPLEdBQ0EsQ0FBQSxFQUFBOVEsS0FBQTZGLFdBQUFrSSxPQUFBL04sS0FBQTFELElBQUFtakIsSUFDQSxLQUFBLEVBR0EsT0FGQXZPLEVBQUF6SSxPQUNBekksS0FBQStGLE9BQUFtRSxJQUFBWCxFQUFBWSxTQUFBcVMsTUFBQSxnREFDQSxDQUFBLEVBQUEsR0FDQSxLQUFBLEVBS0EsT0FKQXhjLEtBQUErRixPQUFBbUUsSUFBQVgsRUFBQVksU0FBQXFTLE1BQUEsMENBR0F4YyxLQUFBdWYsZUFDQSxDQUFBLEdBQ0EsS0FBQSxFQUFBLE1BQUEsQ0FBQSxTQUtBNU8sRUFBQWhOLFVBQUE0YixhQUFBLFdBQ0EsSUFDQUcsRUFEQTFmLEtBQUErUyxVQUNBMk0sRUFBQSxnREFDQTFmLEtBQUFpZixhQUNBUyxHQUFBLFdBQUExZixLQUFBaWYsWUFFQWpmLEtBQUErRixPQUFBbUUsSUFBQVgsRUFBQVksU0FBQXFTLE1BQUFrRCxHQUNBMWYsS0FBQStTLFFBQUEvUyxLQUFBaWYsY0FHQXRPLEdBblBBLFNBQUFBLEVBQUE5SyxFQUFBbUssRUFBQWpLLEVBQUEwTSxFQUFBakksRUFBQUMsR0FDQXpLLEtBQUE2RixXQUFBQSxFQUNBN0YsS0FBQWdRLG1CQUFBQSxFQUNBaFEsS0FBQStGLE9BQUFBLEVBQ0EvRixLQUFBMmUsVUFBQSxJQUFBRCxFQUFBaGIsZ0JBQ0ExRCxLQUFBeVMsa0JBQUFBLEVBQ0F6UyxLQUFBd0ssZ0JBQUFBLEVBQ0F4SyxLQUFBeUssUUFBQUEsRUFDQXpLLEtBQUFrZixTQUFBLEVBQ0FsZixLQUFBOFMsVUFBQSxLQUNBOVMsS0FBQStTLFFBQUEsS0EyT0E3WCxFQUFBeVYscUJBQUFBLEcscUhDelNBLElBQUF4SixFQUFBbkgsTUFBQUEsS0FBQW1ILFVBQUEzRCxPQUFBNEQsUUFBQSxTQUFBN00sR0FDQSxJQUFBLElBQUE4TSxFQUFBNU0sRUFBQSxFQUFBSCxFQUFBZ04sVUFBQWxNLE9BQUFYLEVBQUFILEVBQUFHLElBRUEsSUFBQSxJQUFBUSxLQURBb00sRUFBQUMsVUFBQTdNLEdBQ0ErSSxPQUFBRyxVQUFBYyxlQUFBdEosS0FBQWtNLEVBQUFwTSxLQUNBVixFQUFBVSxHQUFBb00sRUFBQXBNLElBRUEsT0FBQVYsR0FFQWdOLEVBQUF2SCxNQUFBQSxLQUFBdUgsV0FBQSxTQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxHQUNBLE9BQUEsSUFBQUQsRUFBQUEsR0FBQWpDLFNBQUEsU0FBQW1DLEVBQUFsQyxHQUNBLFNBQUFtQyxFQUFBL0osR0FBQSxJQUFBZ0ssRUFBQUgsRUFBQUksS0FBQWpLLElBQUEsTUFBQXpELEdBQUFxTCxFQUFBckwsSUFDQSxTQUFBMk4sRUFBQWxLLEdBQUEsSUFBQWdLLEVBQUFILEVBQUEsTUFBQTdKLElBQUEsTUFBQXpELEdBQUFxTCxFQUFBckwsSUFDQSxTQUFBeU4sRUFBQUcsR0FBQUEsRUFBQUMsS0FBQU4sRUFBQUssRUFBQW5LLE9BQUEsSUFBQTRKLEVBQUEsU0FBQUUsR0FBQUEsRUFBQUssRUFBQW5LLFNBQUFMLEtBQUFvSyxFQUFBRyxHQUNBRixHQUFBSCxFQUFBQSxFQUFBUSxNQUFBWCxFQUFBQyxHQUFBLEtBQUFNLFdBR0FLLEVBQUFwSSxNQUFBQSxLQUFBb0ksYUFBQSxTQUFBWixFQUFBYSxHQUNBLElBQUEzTixFQUFBNE4sRUFBQS9OLEVBQUFnTyxFQUFBLENBQUFDLE1BQUEsRUFBQUMsS0FBQSxXQUFBLEdBQUEsRUFBQWxPLEVBQUEsR0FBQSxNQUFBQSxFQUFBLEdBQUEsT0FBQUEsRUFBQSxJQUFBbU8sS0FBQSxHQUFBQyxJQUFBLElBQ0FDLEVBQUEsQ0FBQWIsS0FBQWMsRUFBQSxHQUFBQyxNQUFBRCxFQUFBLEdBQUFFLE9BQUFGLEVBQUEsSUFBQSxNQUFBLG1CQUFBRyxTQUFBSixFQUFBSSxPQUFBQyxVQUFBLFdBQUEsT0FBQWpKLE9BQUE0SSxFQUNBLFNBQUFDLEVBQUF2TyxHQUFBLE9BQUEsU0FBQTRPLEdBQUEsT0FDQSxTQUFBQyxHQUNBLEdBQUF6TyxFQUFBLE1BQUEsSUFBQTBPLFVBQUEsbUNBQ0EsS0FBQWIsR0FBQSxJQUNBLEdBQUE3TixFQUFBLEVBQUE0TixJQUFBL04sRUFBQSxFQUFBNE8sRUFBQSxHQUFBYixFQUFBLE9BQUFhLEVBQUEsR0FBQWIsRUFBQSxTQUFBL04sRUFBQStOLEVBQUEsU0FBQS9OLEVBQUFZLEtBQUFtTixHQUFBLEdBQUFBLEVBQUFQLFNBQUF4TixFQUFBQSxFQUFBWSxLQUFBbU4sRUFBQWEsRUFBQSxLQUFBakIsS0FBQSxPQUFBM04sRUFFQSxPQURBK04sRUFBQSxFQUFBL04sSUFBQTRPLEVBQUEsQ0FBQSxFQUFBQSxFQUFBLEdBQUE1TyxFQUFBdUQsUUFDQXFMLEVBQUEsSUFDQSxLQUFBLEVBQUEsS0FBQSxFQUFBNU8sRUFBQTRPLEVBQUEsTUFDQSxLQUFBLEVBQUEsT0FBQVosRUFBQUMsUUFBQSxDQUFBMUssTUFBQXFMLEVBQUEsR0FBQWpCLE1BQUEsR0FDQSxLQUFBLEVBQUFLLEVBQUFDLFFBQUFGLEVBQUFhLEVBQUEsR0FBQUEsRUFBQSxDQUFBLEdBQUEsU0FDQSxLQUFBLEVBQUFBLEVBQUFaLEVBQUFJLElBQUFVLE1BQUFkLEVBQUFHLEtBQUFXLE1BQUEsU0FDQSxRQUNBLEtBQUE5TyxFQUFBLEdBQUFBLEVBQUFnTyxFQUFBRyxNQUFBdE4sUUFBQWIsRUFBQUEsRUFBQWEsT0FBQSxNQUFBLElBQUErTixFQUFBLElBQUEsSUFBQUEsRUFBQSxJQUFBLENBQUFaLEVBQUEsRUFBQSxTQUNBLEdBQUEsSUFBQVksRUFBQSxNQUFBNU8sR0FBQTRPLEVBQUEsR0FBQTVPLEVBQUEsSUFBQTRPLEVBQUEsR0FBQTVPLEVBQUEsSUFBQSxDQUFBZ08sRUFBQUMsTUFBQVcsRUFBQSxHQUFBLE1BQ0EsR0FBQSxJQUFBQSxFQUFBLElBQUFaLEVBQUFDLE1BQUFqTyxFQUFBLEdBQUEsQ0FBQWdPLEVBQUFDLE1BQUFqTyxFQUFBLEdBQUFBLEVBQUE0TyxFQUFBLE1BQ0EsR0FBQTVPLEdBQUFnTyxFQUFBQyxNQUFBak8sRUFBQSxHQUFBLENBQUFnTyxFQUFBQyxNQUFBak8sRUFBQSxHQUFBZ08sRUFBQUksSUFBQVcsS0FBQUgsR0FBQSxNQUNBNU8sRUFBQSxJQUFBZ08sRUFBQUksSUFBQVUsTUFDQWQsRUFBQUcsS0FBQVcsTUFBQSxTQUVBRixFQUFBZCxFQUFBbE4sS0FBQXFNLEVBQUFlLEdBQ0EsTUFBQWxPLEdBQUE4TyxFQUFBLENBQUEsRUFBQTlPLEdBQUFpTyxFQUFBLEVBQUEsUUFBQTVOLEVBQUFILEVBQUEsRUFDQSxHQUFBLEVBQUE0TyxFQUFBLEdBQUEsTUFBQUEsRUFBQSxHQUFBLE1BQUEsQ0FBQXJMLE1BQUFxTCxFQUFBLEdBQUFBLEVBQUEsUUFBQSxFQUFBakIsTUFBQSxHQXJCQUosQ0FBQSxDQUFBeE4sRUFBQTRPLE9Bd0JBMUYsT0FBQUMsZUFBQXZJLEVBQUEsYUFBQSxDQUFBNEMsT0FBQSxJQUNBLElBQUF5TCxFQUFBM08sRUFBQSxhQUNBcVQsRUFBQXJULEVBQUEsZ0JBQ0FxSyxFQUFBckssRUFBQSxXQUVBZ1ksR0FZQUEsRUFBQWpQLFVBQUFxUCxRQUFBLFNBQUExVyxFQUFBZ1MsR0FDQSxPQUFBL0csRUFBQXZILFVBQUEsT0FBQSxFQUFBLFdBQ0EsSUFBQThRLEVBQ0E5SyxFQUFBaEcsS0FDQSxPQUFBb0ksRUFBQXBJLEtBQUEsU0FBQThKLEdBQ0EsT0FBQUEsRUFBQXRCLE9BQ0EsS0FBQSxFQU9BLE9BTkF2RCxFQUFBd0osSUFBQW1GLFdBQUF0WCxFQUFBLE9BQ0EySSxFQUFBd0osSUFBQW1GLFdBQUF0RixFQUFBLGtCQUNBckosRUFBQXdKLElBQUFDLEtBQUFKLEVBQUFMLEVBQUFNLGVBQUEsa0JBQ0F2TyxLQUFBK0YsT0FBQW1FLElBQUFYLEVBQUFZLFNBQUFxUyxNQUFBLCtCQUVBeGMsS0FBQTFELElBQUFBLEVBQ0EwRCxLQUFBZ1EsbUJBQ0EsQ0FBQSxFQUFBaFEsS0FBQWdRLHNCQURBLENBQUEsRUFBQSxHQUVBLEtBQUEsR0FDQWMsRUFBQWhILEVBQUFyQixVQUVBbk0sSUFBQUEsRUFBQTBRLFFBQUEsS0FBQSxFQUFBLElBQUEsS0FBQSxnQkFBQTJTLG1CQUFBN08sSUFFQWhILEVBQUF0QixNQUFBLEVBQ0EsS0FBQSxFQUFBLE1BQUEsQ0FBQSxFQUFBLElBQUEvQyxRQUFBLFNBQUFtQyxFQUFBbEMsR0FDQSxJQUFBa2EsR0FBQSxFQUNBLEdBQUF0UixJQUFBTCxFQUFBTSxlQUFBZ1EsS0FBQSxDQUlBLElBTUEvUyxFQUNBZixFQUVBWCxFQUFBMFYsRUFBQTFoQixFQVBBK2hCLEVBREE1YSxFQUFBaUIsU0FBQXVOLFdBQUF4TyxFQUFBaUIsU0FBQTRaLFlBQ0EsSUFBQTlaLEVBQUErWix1QkFBQXpqQixFQUFBLENBQUFrTyxnQkFBQXhFLEVBQUF3RSxtQkFJQWdCLEVBQUF4RixFQUFBSCxXQUFBQyxnQkFBQXhKLElBQ0FtTyxFQUFBLElBQ0F1VixPQUFBeFUsRUFDQWdVLEdBQUExVixFQUFBN0UsRUFBQWtNLHNCQUFBLEdBQUFyVCxFQUFBZ00sRUFBQSxHQUNBVyxFQUFBK1UsR0FBQTFoQixFQUNBLElBQUFrSSxFQUFBK1osdUJBQUF6akIsRUFBQSxDQUFBa08sZ0JBQUF4RSxFQUFBd0UsZ0JBQUFDLFFBQUF0RCxFQUFBLEdBQUFzRCxFQUFBekUsRUFBQXlFLFlBRUEsSUFDQW9WLEVBQUFJLFVBQUEsU0FBQTVsQixHQUNBLEdBQUEyTCxFQUFBOE0sVUFDQSxJQUNBOU0sRUFBQUQsT0FBQW1FLElBQUFYLEVBQUFZLFNBQUFxUyxNQUFBLGtDQUFBdlgsRUFBQW9hLGNBQUFobEIsRUFBQXFTLEtBQUExRyxFQUFBeU0sbUJBQUEsS0FDQXpNLEVBQUE4TSxVQUFBelksRUFBQXFTLE1BRUEsTUFBQTlPLEdBRUEsWUFEQW9JLEVBQUFrYSxNQUFBdGlCLEtBS0FpaUIsRUFBQU0sUUFBQSxTQUFBOWxCLEdBQ0EsSUFBQXVELEVBQUEsSUFBQTdDLE1BQUFWLEVBQUFxUyxNQUFBLGtCQUNBa1QsRUFDQTVaLEVBQUFrYSxNQUFBdGlCLEdBR0E4SCxFQUFBOUgsSUFHQWlpQixFQUFBTyxPQUFBLFdBQ0FwYSxFQUFBRCxPQUFBbUUsSUFBQVgsRUFBQVksU0FBQWtKLFlBQUEsb0JBQUFyTixFQUFBMUosS0FDQTBKLEVBQUE2WixZQUFBQSxFQUNBRCxHQUFBLEVBQ0FoWSxLQUdBLE1BQUF2TixHQUVBLFlBREFxTCxFQUFBckwsU0E5Q0FxTCxFQUFBLElBQUEzSyxNQUFBLHVGQXNEQTZYLEVBQUFqUCxVQUFBMEIsS0FBQSxTQUFBcUgsR0FDQSxPQUFBbkYsRUFBQXZILFVBQUEsT0FBQSxFQUFBLFdBQ0EsT0FBQW9JLEVBQUFwSSxLQUFBLFNBQUE4SixHQUNBLE9BQUE5SixLQUFBNmYsWUFHQSxDQUFBLEVBQUE1YSxFQUFBL0csWUFBQThCLEtBQUErRixPQUFBLE1BQUEvRixLQUFBNkYsV0FBQTdGLEtBQUExRCxJQUFBMEQsS0FBQWdRLG1CQUFBdEQsRUFBQTFNLEtBQUF5UyxrQkFBQXpTLEtBQUF3SyxnQkFBQXhLLEtBQUF5SyxVQUZBLENBQUEsRUFBQWhGLFFBQUFDLE9BQUEsSUFBQTNLLE1BQUEsdURBTUE2WCxFQUFBalAsVUFBQXlMLEtBQUEsV0FFQSxPQURBcFAsS0FBQWtnQixRQUNBemEsUUFBQW1DLFdBRUFnTCxFQUFBalAsVUFBQXVjLE1BQUEsU0FBQTdsQixHQUNBMkYsS0FBQTZmLGNBQ0E3ZixLQUFBNmYsWUFBQUssUUFDQWxnQixLQUFBNmYsaUJBQUFoWixFQUNBN0csS0FBQStTLFNBQ0EvUyxLQUFBK1MsUUFBQTFZLEtBSUF1WSxHQWhIQSxTQUFBQSxFQUFBL00sRUFBQW1LLEVBQUFqSyxFQUFBME0sRUFBQXNOLEVBQUF2VixFQUFBQyxHQUNBekssS0FBQTZGLFdBQUFBLEVBQ0E3RixLQUFBZ1EsbUJBQUFBLEVBQ0FoUSxLQUFBK0YsT0FBQUEsRUFDQS9GLEtBQUF5UyxrQkFBQUEsRUFDQXpTLEtBQUF3SyxnQkFBQUEsRUFDQXhLLEtBQUErZix1QkFBQUEsRUFDQS9mLEtBQUF5SyxRQUFBQSxFQUNBekssS0FBQThTLFVBQUEsS0FDQTlTLEtBQUErUyxRQUFBLEtBeUdBN1gsRUFBQTBYLDBCQUFBQSxHLGtGQ25LQXBQLE9BQUFDLGVBQUF2SSxFQUFBLGFBQUEsQ0FBQTRDLE9BQUEsSUFDQSxJQUFBbUgsRUFBQXJLLEVBQUEsV0FFQTZjLEdBSUFBLEVBQUE5VCxVQUFBb0UsS0FBQSxTQUFBZ04sR0FDQSxJQUFBLElBQUFuWSxFQUFBLEVBQUFrTixFQUFBOUosS0FBQXFnQixVQUFBempCLEVBQUFrTixFQUFBMU8sT0FBQXdCLElBQ0FrTixFQUFBbE4sR0FDQW1MLEtBQUFnTixJQUdBMEMsRUFBQTlULFVBQUEvRixNQUFBLFNBQUFGLEdBQ0EsSUFBQSxJQUFBZCxFQUFBLEVBQUFrTixFQUFBOUosS0FBQXFnQixVQUFBempCLEVBQUFrTixFQUFBMU8sT0FBQXdCLElBQUEsQ0FDQSxJQUFBMGpCLEVBQUF4VyxFQUFBbE4sR0FDQTBqQixFQUFBMWlCLE9BQ0EwaUIsRUFBQTFpQixNQUFBRixLQUlBK1osRUFBQTlULFVBQUF3VSxTQUFBLFdBQ0EsSUFBQSxJQUFBdmIsRUFBQSxFQUFBa04sRUFBQTlKLEtBQUFxZ0IsVUFBQXpqQixFQUFBa04sRUFBQTFPLE9BQUF3QixJQUFBLENBQ0EsSUFBQTBqQixFQUFBeFcsRUFBQWxOLEdBQ0EwakIsRUFBQW5JLFVBQ0FtSSxFQUFBbkksYUFJQVYsRUFBQTlULFVBQUE4WCxVQUFBLFNBQUE2RSxHQUVBLE9BREF0Z0IsS0FBQXFnQixVQUFBL1csS0FBQWdYLEdBQ0EsSUFBQXJiLEVBQUFzYixvQkFBQXZnQixLQUFBc2dCLElBRUE3SSxHQTdCQSxTQUFBQSxJQUNBelgsS0FBQXFnQixVQUFBLEdBOEJBbmxCLEVBQUF1YyxRQUFBQSxHLGlEQ25DQWpVLE9BQUFDLGVBQUF2SSxFQUFBLGFBQUEsQ0FBQTRDLE9BQUEsSUFHQSxJQUFBd08sR0FHQUEsRUFBQUMsTUFBQSxTQUFBaVUsR0FDQSxNQUFBLEdBQUFBLEVBQUFsVSxFQUFBcUIsaUJBRUFyQixFQUFBNVAsTUFBQSxTQUFBc2hCLEdBQ0EsR0FBQUEsRUFBQUEsRUFBQTVpQixPQUFBLEtBQUFrUixFQUFBcUIsZ0JBQ0EsTUFBQSxJQUFBNVMsTUFBQSwwQkFFQSxJQUFBeUIsRUFBQXdoQixFQUFBeUMsTUFBQW5VLEVBQUFxQixpQkFFQSxPQURBblIsRUFBQTZNLE1BQ0E3TSxHQUVBOFAsRUFBQVcsb0JBQUEsR0FDQVgsRUFBQXFCLGdCQUFBUCxPQUFBQyxhQUFBZixFQUFBVyxxQkFDQVgsR0FmQSxTQUFBQSxLQWlCQXBSLEVBQUFvUixrQkFBQUEsRyxrRENyQkEsSUFBQW5GLEVBQUFuSCxNQUFBQSxLQUFBbUgsVUFBQTNELE9BQUE0RCxRQUFBLFNBQUE3TSxHQUNBLElBQUEsSUFBQThNLEVBQUE1TSxFQUFBLEVBQUFILEVBQUFnTixVQUFBbE0sT0FBQVgsRUFBQUgsRUFBQUcsSUFFQSxJQUFBLElBQUFRLEtBREFvTSxFQUFBQyxVQUFBN00sR0FDQStJLE9BQUFHLFVBQUFjLGVBQUF0SixLQUFBa00sRUFBQXBNLEtBQ0FWLEVBQUFVLEdBQUFvTSxFQUFBcE0sSUFFQSxPQUFBVixHQUVBZ04sRUFBQXZILE1BQUFBLEtBQUF1SCxXQUFBLFNBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEdBQ0EsT0FBQSxJQUFBRCxFQUFBQSxHQUFBakMsU0FBQSxTQUFBbUMsRUFBQWxDLEdBQ0EsU0FBQW1DLEVBQUEvSixHQUFBLElBQUFnSyxFQUFBSCxFQUFBSSxLQUFBakssSUFBQSxNQUFBekQsR0FBQXFMLEVBQUFyTCxJQUNBLFNBQUEyTixFQUFBbEssR0FBQSxJQUFBZ0ssRUFBQUgsRUFBQSxNQUFBN0osSUFBQSxNQUFBekQsR0FBQXFMLEVBQUFyTCxJQUNBLFNBQUF5TixFQUFBRyxHQUFBQSxFQUFBQyxLQUFBTixFQUFBSyxFQUFBbkssT0FBQSxJQUFBNEosRUFBQSxTQUFBRSxHQUFBQSxFQUFBSyxFQUFBbkssU0FBQUwsS0FBQW9LLEVBQUFHLEdBQ0FGLEdBQUFILEVBQUFBLEVBQUFRLE1BQUFYLEVBQUFDLEdBQUEsS0FBQU0sV0FHQUssRUFBQXBJLE1BQUFBLEtBQUFvSSxhQUFBLFNBQUFaLEVBQUFhLEdBQ0EsSUFBQTNOLEVBQUE0TixFQUFBL04sRUFBQWdPLEVBQUEsQ0FBQUMsTUFBQSxFQUFBQyxLQUFBLFdBQUEsR0FBQSxFQUFBbE8sRUFBQSxHQUFBLE1BQUFBLEVBQUEsR0FBQSxPQUFBQSxFQUFBLElBQUFtTyxLQUFBLEdBQUFDLElBQUEsSUFDQUMsRUFBQSxDQUFBYixLQUFBYyxFQUFBLEdBQUFDLE1BQUFELEVBQUEsR0FBQUUsT0FBQUYsRUFBQSxJQUFBLE1BQUEsbUJBQUFHLFNBQUFKLEVBQUFJLE9BQUFDLFVBQUEsV0FBQSxPQUFBakosT0FBQTRJLEVBQ0EsU0FBQUMsRUFBQXZPLEdBQUEsT0FBQSxTQUFBNE8sR0FBQSxPQUNBLFNBQUFDLEdBQ0EsR0FBQXpPLEVBQUEsTUFBQSxJQUFBME8sVUFBQSxtQ0FDQSxLQUFBYixHQUFBLElBQ0EsR0FBQTdOLEVBQUEsRUFBQTROLElBQUEvTixFQUFBLEVBQUE0TyxFQUFBLEdBQUFiLEVBQUEsT0FBQWEsRUFBQSxHQUFBYixFQUFBLFNBQUEvTixFQUFBK04sRUFBQSxTQUFBL04sRUFBQVksS0FBQW1OLEdBQUEsR0FBQUEsRUFBQVAsU0FBQXhOLEVBQUFBLEVBQUFZLEtBQUFtTixFQUFBYSxFQUFBLEtBQUFqQixLQUFBLE9BQUEzTixFQUVBLE9BREErTixFQUFBLEVBQUEvTixJQUFBNE8sRUFBQSxDQUFBLEVBQUFBLEVBQUEsR0FBQTVPLEVBQUF1RCxRQUNBcUwsRUFBQSxJQUNBLEtBQUEsRUFBQSxLQUFBLEVBQUE1TyxFQUFBNE8sRUFBQSxNQUNBLEtBQUEsRUFBQSxPQUFBWixFQUFBQyxRQUFBLENBQUExSyxNQUFBcUwsRUFBQSxHQUFBakIsTUFBQSxHQUNBLEtBQUEsRUFBQUssRUFBQUMsUUFBQUYsRUFBQWEsRUFBQSxHQUFBQSxFQUFBLENBQUEsR0FBQSxTQUNBLEtBQUEsRUFBQUEsRUFBQVosRUFBQUksSUFBQVUsTUFBQWQsRUFBQUcsS0FBQVcsTUFBQSxTQUNBLFFBQ0EsS0FBQTlPLEVBQUEsR0FBQUEsRUFBQWdPLEVBQUFHLE1BQUF0TixRQUFBYixFQUFBQSxFQUFBYSxPQUFBLE1BQUEsSUFBQStOLEVBQUEsSUFBQSxJQUFBQSxFQUFBLElBQUEsQ0FBQVosRUFBQSxFQUFBLFNBQ0EsR0FBQSxJQUFBWSxFQUFBLE1BQUE1TyxHQUFBNE8sRUFBQSxHQUFBNU8sRUFBQSxJQUFBNE8sRUFBQSxHQUFBNU8sRUFBQSxJQUFBLENBQUFnTyxFQUFBQyxNQUFBVyxFQUFBLEdBQUEsTUFDQSxHQUFBLElBQUFBLEVBQUEsSUFBQVosRUFBQUMsTUFBQWpPLEVBQUEsR0FBQSxDQUFBZ08sRUFBQUMsTUFBQWpPLEVBQUEsR0FBQUEsRUFBQTRPLEVBQUEsTUFDQSxHQUFBNU8sR0FBQWdPLEVBQUFDLE1BQUFqTyxFQUFBLEdBQUEsQ0FBQWdPLEVBQUFDLE1BQUFqTyxFQUFBLEdBQUFnTyxFQUFBSSxJQUFBVyxLQUFBSCxHQUFBLE1BQ0E1TyxFQUFBLElBQUFnTyxFQUFBSSxJQUFBVSxNQUNBZCxFQUFBRyxLQUFBVyxNQUFBLFNBRUFGLEVBQUFkLEVBQUFsTixLQUFBcU0sRUFBQWUsR0FDQSxNQUFBbE8sR0FBQThPLEVBQUEsQ0FBQSxFQUFBOU8sR0FBQWlPLEVBQUEsRUFBQSxRQUFBNU4sRUFBQUgsRUFBQSxFQUNBLEdBQUEsRUFBQTRPLEVBQUEsR0FBQSxNQUFBQSxFQUFBLEdBQUEsTUFBQSxDQUFBckwsTUFBQXFMLEVBQUEsR0FBQUEsRUFBQSxRQUFBLEVBQUFqQixNQUFBLEdBckJBSixDQUFBLENBQUF4TixFQUFBNE8sT0F3QkExRixPQUFBQyxlQUFBdkksRUFBQSxhQUFBLENBQUE0QyxPQUFBLElBQ0EsSUFBQXlMLEVBQUEzTyxFQUFBLGFBQ0F5aEIsRUFBQXpoQixFQUFBLGFBR0FNLEVBQUF3bEIsUUFBQSwyQkFFQSxJQUFBalMsR0FHQUEsRUFBQW1GLFdBQUEsU0FBQStNLEVBQUE1UCxHQUNBLEdBQUE0UCxNQUFBQSxFQUNBLE1BQUEsSUFBQTVsQixNQUFBLFFBQUFnVyxFQUFBLDRCQUdBdEMsRUFBQUMsS0FBQSxTQUFBaVMsRUFBQUMsRUFBQTdQLEdBRUEsS0FBQTRQLEtBQUFDLEdBQ0EsTUFBQSxJQUFBN2xCLE1BQUEsV0FBQWdXLEVBQUEsV0FBQTRQLEVBQUEsTUFHQWxTLEdBYkEsU0FBQUEsS0FlQXZULEVBQUF1VCxJQUFBQSxFQUVBLElBQUF2SSxHQUdBMUMsT0FBQUMsZUFBQXlDLEVBQUEsWUFBQSxDQUNBbkMsSUFBQSxXQUNBLE1BQUEsaUJBQUEvSCxRQUVBZ0ksWUFBQSxFQUNBQyxjQUFBLElBRUFULE9BQUFDLGVBQUF5QyxFQUFBLGNBQUEsQ0FDQW5DLElBQUEsV0FDQSxNQUFBLGlCQUFBa0ksTUFBQSxrQkFBQUEsTUFFQWpJLFlBQUEsRUFDQUMsY0FBQSxJQUVBVCxPQUFBQyxlQUFBeUMsRUFBQSxTQUFBLENBQ0FuQyxJQUFBLFdBQ0EsT0FBQS9ELEtBQUF5VCxZQUFBelQsS0FBQThmLGFBRUE5YixZQUFBLEVBQ0FDLGNBQUEsSUFFQWlDLEdBdkJBLFNBQUFBLEtBMkJBLFNBQUFtWixFQUFBM1MsRUFBQW1VLEdBQ0EsSUFBQUMsRUFBQSxHQWFBLE9BWkFuVSxFQUFBRCxJQUNBb1UsRUFBQSx5QkFBQXBVLEVBQUFjLFdBQ0FxVCxJQUNBQyxHQUFBLGVBQUFDLEVBQUFyVSxHQUFBLE1BR0EsaUJBQUFBLElBQ0FvVSxFQUFBLHlCQUFBcFUsRUFBQXRSLE9BQ0F5bEIsSUFDQUMsR0FBQSxlQUFBcFUsRUFBQSxNQUdBb1UsRUFJQSxTQUFBQyxFQUFBclUsR0FDQSxJQUFBc1UsRUFBQSxJQUFBbFUsV0FBQUosR0FFQXVVLEVBQUEsR0FNQSxPQUxBRCxFQUFBekcsUUFBQSxTQUFBMkcsR0FFQUQsR0FBQSxNQURBQyxFQUFBLEdBQUEsSUFBQSxJQUNBQSxFQUFBaEcsU0FBQSxJQUFBLE1BR0ErRixFQUFBeGYsT0FBQSxFQUFBd2YsRUFBQTdsQixPQUFBLEdBS0EsU0FBQXVSLEVBQUFnVSxHQUNBLE9BQUFBLEdBQUEsb0JBQUFRLGNBQ0FSLGFBQUFRLGFBRUFSLEVBQUFoYyxhQUFBLGdCQUFBZ2MsRUFBQWhjLFlBQUFvTSxNQXRDQTdWLEVBQUFnTCxTQUFBQSxFQWtCQWhMLEVBQUFta0IsY0FBQUEsRUFhQW5rQixFQUFBNmxCLGtCQUFBQSxFQVNBN2xCLEVBQUF5UixjQUFBQSxFQXNDQXpSLEVBQUFnRCxZQXBDQSxTQUFBNkgsRUFBQXFiLEVBQUF2YixFQUFBdkosRUFBQTBULEVBQUE1USxFQUFBcVQsRUFBQWpJLEVBQUE2VyxHQUNBLE9BQUE5WixFQUFBdkgsVUFBQSxPQUFBLEVBQUEsV0FDQSxJQUFBOEosRUFBQVcsRUFBQXFHLEVBQUFJLEVBQUFILEVBQUFqVCxFQUFBcU4sRUFBQXhCLEVBQ0EsT0FBQXZCLEVBQUFwSSxLQUFBLFNBQUE4ZSxHQUNBLE9BQUFBLEVBQUF0VyxPQUNBLEtBQUEsRUFFQSxPQURBaUMsRUFBQSxHQUNBdUYsRUFDQSxDQUFBLEVBQUFBLEtBREEsQ0FBQSxFQUFBLEdBRUEsS0FBQSxHQUNBYyxFQUFBZ08sRUFBQXJXLFdBRUFxQixFQUFBLElBQ0EsY0FBQSxVQUFBZ0gsRUFEQXJHLEVBRUFYLEdBRUFnVixFQUFBdFcsTUFBQSxFQUNBLEtBQUEsRUFLQSxPQUpBMEksRUFBQUMsSUFBQUosRUFBQUcsRUFBQSxHQUFBcFQsRUFBQW9ULEVBQUEsR0FDQXpHLEVBQUFzRyxHQUFBalQsRUFDQWlJLEVBQUFtRSxJQUFBWCxFQUFBWSxTQUFBcVMsTUFBQSxJQUFBNEUsRUFBQSw2QkFBQS9CLEVBQUFqZ0IsRUFBQXFULEdBQUEsS0FDQXRILEVBQUF3QixFQUFBdk4sR0FBQSxjQUFBLE9BQ0EsQ0FBQSxFQUFBeUcsRUFBQWlJLEtBQUF4UixFQUFBLENBQ0E4QyxRQUFBQSxFQUNBcUwsUUFBQXRELEVBQUEsR0FBQXNELEVBQUE0VyxHQUNBbFcsYUFBQUEsRUFDQVgsZ0JBQUFBLEtBRUEsS0FBQSxFQUdBLE9BRkFiLEVBQUFtVixFQUFBclcsT0FDQTFDLEVBQUFtRSxJQUFBWCxFQUFBWSxTQUFBcVMsTUFBQSxJQUFBNEUsRUFBQSxrREFBQXpYLEVBQUEzQyxXQUFBLEtBQ0EsQ0FBQSxTQW1CQTlMLEVBQUEyWSxhQVpBLFNBQUE5TixHQUNBLFlBQUFjLElBQUFkLEVBQ0EsSUFBQXdYLEVBQUFoVSxFQUFBWSxTQUFBa0osYUFFQSxPQUFBdE4sRUFDQXNXLEVBQUF3QixXQUFBQyxTQUVBL1gsRUFBQW1FLElBQ0FuRSxFQUVBLElBQUF3WCxFQUFBeFgsSUFJQSxJQUFBd2EsR0FLQUEsRUFBQTVjLFVBQUEyZCxRQUFBLFdBQ0EsSUFBQTNOLEVBQUEzVCxLQUFBd1gsUUFBQTZJLFVBQUFyVCxRQUFBaE4sS0FBQXNnQixXQUNBLEVBQUEzTSxHQUNBM1QsS0FBQXdYLFFBQUE2SSxVQUFBdkgsT0FBQW5GLEVBQUEsR0FFQSxJQUFBM1QsS0FBQXdYLFFBQUE2SSxVQUFBamxCLFFBQUE0RSxLQUFBd1gsUUFBQUUsZ0JBQ0ExWCxLQUFBd1gsUUFBQUUsaUJBQUFwRSxNQUFBLFNBQUEvSyxPQUdBZ1ksR0FiQSxTQUFBQSxFQUFBL0ksRUFBQThJLEdBQ0F0Z0IsS0FBQXdYLFFBQUFBLEVBQ0F4WCxLQUFBc2dCLFNBQUFBLEVBYUFwbEIsRUFBQXFsQixvQkFBQUEsRUFFQSxJQUFBaEQsR0FLQUEsRUFBQTVaLFVBQUF1RyxJQUFBLFNBQUFrVCxFQUFBL2UsR0FDQSxHQUFBK2UsR0FBQXBkLEtBQUF1aEIsZ0JBQ0EsT0FBQW5FLEdBQ0EsS0FBQTdULEVBQUFZLFNBQUE0UyxTQUNBLEtBQUF4VCxFQUFBWSxTQUFBcFAsTUFDQWlGLEtBQUF3aEIsY0FBQTVqQixNQUFBLEtBQUEsSUFBQWdELE1BQUE2Z0IsY0FBQSxLQUFBbFksRUFBQVksU0FBQWlULEdBQUEsS0FBQS9lLEdBQ0EsTUFDQSxLQUFBa0wsRUFBQVksU0FBQUMsUUFDQXBLLEtBQUF3aEIsY0FBQTVFLEtBQUEsS0FBQSxJQUFBaGMsTUFBQTZnQixjQUFBLEtBQUFsWSxFQUFBWSxTQUFBaVQsR0FBQSxLQUFBL2UsR0FDQSxNQUNBLEtBQUFrTCxFQUFBWSxTQUFBa0osWUFDQXJULEtBQUF3aEIsY0FBQTlFLEtBQUEsS0FBQSxJQUFBOWIsTUFBQTZnQixjQUFBLEtBQUFsWSxFQUFBWSxTQUFBaVQsR0FBQSxLQUFBL2UsR0FDQSxNQUNBLFFBRUEyQixLQUFBd2hCLGNBQUF0WCxJQUFBLEtBQUEsSUFBQXRKLE1BQUE2Z0IsY0FBQSxLQUFBbFksRUFBQVksU0FBQWlULEdBQUEsS0FBQS9lLEtBS0FrZixHQXhCQSxTQUFBQSxFQUFBZ0UsR0FDQXZoQixLQUFBdWhCLGdCQUFBQSxFQUNBdmhCLEtBQUF3aEIsY0FBQTdqQixRQTBCQSxTQUFBd1QsSUFDQSxJQUFBdVEsRUFBQSx1QkFJQSxPQUhBeGIsRUFBQUMsU0FDQXViLEVBQUEsY0FFQSxDQUFBQSxFQUFBQyxFQUFBem1CLEVBQUF3bEIsUUEyQkEsV0FDQSxDQUFBLElBQUF4YSxFQUFBQyxPQWFBLE1BQUEsR0FaQSxPQUFBeWIsRUFBQUMsVUFDQSxJQUFBLFFBQ0EsTUFBQSxhQUNBLElBQUEsU0FDQSxNQUFBLFFBQ0EsSUFBQSxRQUNBLE1BQUEsUUFDQSxRQUNBLE9BQUFELEVBQUFDLFdBckNBQyxHQW1EQTViLEVBQUFDLE9BQ0EsU0FHQSxVQVhBLFdBQ0EsR0FBQUQsRUFBQUMsT0FDQSxPQUFBeWIsRUFBQUcsU0FBQUMsS0FFQSxPQWhEQUMsS0FJQSxTQUFBTixFQUFBckwsRUFBQTRMLEVBQUFDLEVBQUFDLEdBRUEsSUFBQUMsRUFBQSxxQkFDQUMsRUFBQWhNLEVBQUFtSyxNQUFBLEtBaUJBLE9BaEJBNEIsR0FBQUMsRUFBQSxHQUFBLElBQUFBLEVBQUEsR0FDQUQsR0FBQSxLQUFBL0wsRUFBQSxLQUVBK0wsR0FEQUgsR0FBQSxLQUFBQSxFQUNBQSxFQUFBLEtBR0EsZUFFQUcsR0FBQSxHQUFBRixFQUVBRSxHQURBRCxFQUNBLEtBQUFBLEVBR0EsNEJBRUFDLEdBQUEsSUE5QkFubkIsRUFBQXFpQixjQUFBQSxFQVNBcmlCLEVBQUFpVyxtQkFBQUEsRUF3QkFqVyxFQUFBeW1CLG1CQUFBQSxJLHdHQzFRQSxJQUFBeGEsRUFBQW5ILE1BQUFBLEtBQUFtSCxVQUFBM0QsT0FBQTRELFFBQUEsU0FBQTdNLEdBQ0EsSUFBQSxJQUFBOE0sRUFBQTVNLEVBQUEsRUFBQUgsRUFBQWdOLFVBQUFsTSxPQUFBWCxFQUFBSCxFQUFBRyxJQUVBLElBQUEsSUFBQVEsS0FEQW9NLEVBQUFDLFVBQUE3TSxHQUNBK0ksT0FBQUcsVUFBQWMsZUFBQXRKLEtBQUFrTSxFQUFBcE0sS0FDQVYsRUFBQVUsR0FBQW9NLEVBQUFwTSxJQUVBLE9BQUFWLEdBRUFnTixFQUFBdkgsTUFBQUEsS0FBQXVILFdBQUEsU0FBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FDQSxPQUFBLElBQUFELEVBQUFBLEdBQUFqQyxTQUFBLFNBQUFtQyxFQUFBbEMsR0FDQSxTQUFBbUMsRUFBQS9KLEdBQUEsSUFBQWdLLEVBQUFILEVBQUFJLEtBQUFqSyxJQUFBLE1BQUF6RCxHQUFBcUwsRUFBQXJMLElBQ0EsU0FBQTJOLEVBQUFsSyxHQUFBLElBQUFnSyxFQUFBSCxFQUFBLE1BQUE3SixJQUFBLE1BQUF6RCxHQUFBcUwsRUFBQXJMLElBQ0EsU0FBQXlOLEVBQUFHLEdBQUFBLEVBQUFDLEtBQUFOLEVBQUFLLEVBQUFuSyxPQUFBLElBQUE0SixFQUFBLFNBQUFFLEdBQUFBLEVBQUFLLEVBQUFuSyxTQUFBTCxLQUFBb0ssRUFBQUcsR0FDQUYsR0FBQUgsRUFBQUEsRUFBQVEsTUFBQVgsRUFBQUMsR0FBQSxLQUFBTSxXQUdBSyxFQUFBcEksTUFBQUEsS0FBQW9JLGFBQUEsU0FBQVosRUFBQWEsR0FDQSxJQUFBM04sRUFBQTROLEVBQUEvTixFQUFBZ08sRUFBQSxDQUFBQyxNQUFBLEVBQUFDLEtBQUEsV0FBQSxHQUFBLEVBQUFsTyxFQUFBLEdBQUEsTUFBQUEsRUFBQSxHQUFBLE9BQUFBLEVBQUEsSUFBQW1PLEtBQUEsR0FBQUMsSUFBQSxJQUNBQyxFQUFBLENBQUFiLEtBQUFjLEVBQUEsR0FBQUMsTUFBQUQsRUFBQSxHQUFBRSxPQUFBRixFQUFBLElBQUEsTUFBQSxtQkFBQUcsU0FBQUosRUFBQUksT0FBQUMsVUFBQSxXQUFBLE9BQUFqSixPQUFBNEksRUFDQSxTQUFBQyxFQUFBdk8sR0FBQSxPQUFBLFNBQUE0TyxHQUFBLE9BQ0EsU0FBQUMsR0FDQSxHQUFBek8sRUFBQSxNQUFBLElBQUEwTyxVQUFBLG1DQUNBLEtBQUFiLEdBQUEsSUFDQSxHQUFBN04sRUFBQSxFQUFBNE4sSUFBQS9OLEVBQUEsRUFBQTRPLEVBQUEsR0FBQWIsRUFBQSxPQUFBYSxFQUFBLEdBQUFiLEVBQUEsU0FBQS9OLEVBQUErTixFQUFBLFNBQUEvTixFQUFBWSxLQUFBbU4sR0FBQSxHQUFBQSxFQUFBUCxTQUFBeE4sRUFBQUEsRUFBQVksS0FBQW1OLEVBQUFhLEVBQUEsS0FBQWpCLEtBQUEsT0FBQTNOLEVBRUEsT0FEQStOLEVBQUEsRUFBQS9OLElBQUE0TyxFQUFBLENBQUEsRUFBQUEsRUFBQSxHQUFBNU8sRUFBQXVELFFBQ0FxTCxFQUFBLElBQ0EsS0FBQSxFQUFBLEtBQUEsRUFBQTVPLEVBQUE0TyxFQUFBLE1BQ0EsS0FBQSxFQUFBLE9BQUFaLEVBQUFDLFFBQUEsQ0FBQTFLLE1BQUFxTCxFQUFBLEdBQUFqQixNQUFBLEdBQ0EsS0FBQSxFQUFBSyxFQUFBQyxRQUFBRixFQUFBYSxFQUFBLEdBQUFBLEVBQUEsQ0FBQSxHQUFBLFNBQ0EsS0FBQSxFQUFBQSxFQUFBWixFQUFBSSxJQUFBVSxNQUFBZCxFQUFBRyxLQUFBVyxNQUFBLFNBQ0EsUUFDQSxLQUFBOU8sRUFBQSxHQUFBQSxFQUFBZ08sRUFBQUcsTUFBQXROLFFBQUFiLEVBQUFBLEVBQUFhLE9BQUEsTUFBQSxJQUFBK04sRUFBQSxJQUFBLElBQUFBLEVBQUEsSUFBQSxDQUFBWixFQUFBLEVBQUEsU0FDQSxHQUFBLElBQUFZLEVBQUEsTUFBQTVPLEdBQUE0TyxFQUFBLEdBQUE1TyxFQUFBLElBQUE0TyxFQUFBLEdBQUE1TyxFQUFBLElBQUEsQ0FBQWdPLEVBQUFDLE1BQUFXLEVBQUEsR0FBQSxNQUNBLEdBQUEsSUFBQUEsRUFBQSxJQUFBWixFQUFBQyxNQUFBak8sRUFBQSxHQUFBLENBQUFnTyxFQUFBQyxNQUFBak8sRUFBQSxHQUFBQSxFQUFBNE8sRUFBQSxNQUNBLEdBQUE1TyxHQUFBZ08sRUFBQUMsTUFBQWpPLEVBQUEsR0FBQSxDQUFBZ08sRUFBQUMsTUFBQWpPLEVBQUEsR0FBQWdPLEVBQUFJLElBQUFXLEtBQUFILEdBQUEsTUFDQTVPLEVBQUEsSUFBQWdPLEVBQUFJLElBQUFVLE1BQ0FkLEVBQUFHLEtBQUFXLE1BQUEsU0FFQUYsRUFBQWQsRUFBQWxOLEtBQUFxTSxFQUFBZSxHQUNBLE1BQUFsTyxHQUFBOE8sRUFBQSxDQUFBLEVBQUE5TyxHQUFBaU8sRUFBQSxFQUFBLFFBQUE1TixFQUFBSCxFQUFBLEVBQ0EsR0FBQSxFQUFBNE8sRUFBQSxHQUFBLE1BQUFBLEVBQUEsR0FBQSxNQUFBLENBQUFyTCxNQUFBcUwsRUFBQSxHQUFBQSxFQUFBLFFBQUEsRUFBQWpCLE1BQUEsR0FyQkFKLENBQUEsQ0FBQXhOLEVBQUE0TyxPQXdCQTFGLE9BQUFDLGVBQUF2SSxFQUFBLGFBQUEsQ0FBQTRDLE9BQUEsSUFDQSxJQUFBeUwsRUFBQTNPLEVBQUEsYUFDQXFULEVBQUFyVCxFQUFBLGdCQUNBcUssRUFBQXJLLEVBQUEsV0FFQTRYLEdBV0FBLEVBQUE3TyxVQUFBcVAsUUFBQSxTQUFBMVcsRUFBQWdTLEdBQ0EsT0FBQS9HLEVBQUF2SCxVQUFBLE9BQUEsRUFBQSxXQUNBLElBQUE4USxFQUNBOUssRUFBQWhHLEtBQ0EsT0FBQW9JLEVBQUFwSSxLQUFBLFNBQUE4SixHQUNBLE9BQUFBLEVBQUF0QixPQUNBLEtBQUEsRUFLQSxPQUpBdkQsRUFBQXdKLElBQUFtRixXQUFBdFgsRUFBQSxPQUNBMkksRUFBQXdKLElBQUFtRixXQUFBdEYsRUFBQSxrQkFDQXJKLEVBQUF3SixJQUFBQyxLQUFBSixFQUFBTCxFQUFBTSxlQUFBLGtCQUNBdk8sS0FBQStGLE9BQUFtRSxJQUFBWCxFQUFBWSxTQUFBcVMsTUFBQSxzQ0FDQXhjLEtBQUFnUSxtQkFDQSxDQUFBLEVBQUFoUSxLQUFBZ1Esc0JBREEsQ0FBQSxFQUFBLEdBRUEsS0FBQSxHQUNBYyxFQUFBaEgsRUFBQXJCLFVBRUFuTSxJQUFBQSxFQUFBMFEsUUFBQSxLQUFBLEVBQUEsSUFBQSxLQUFBLGdCQUFBMlMsbUJBQUE3TyxJQUVBaEgsRUFBQXRCLE1BQUEsRUFDQSxLQUFBLEVBQUEsTUFBQSxDQUFBLEVBQUEsSUFBQS9DLFFBQUEsU0FBQW1DLEVBQUFsQyxHQUVBLElBQUE2YyxFQURBam1CLEVBQUFBLEVBQUErRixRQUFBLFFBQUEsTUFFQSxJQUdBb0ksRUFDQVgsRUFBQTBWLEVBQUExaEIsRUFKQTBOLEVBQUF4RixFQUFBSCxXQUFBQyxnQkFBQXhKLEdBQ0FzakIsR0FBQSxFQUNBM2EsRUFBQWlCLFNBQUFDLFNBQ0FzRSxFQUFBLEdBQ0ErVSxHQUFBMVYsRUFBQTdFLEVBQUFrTSxzQkFBQSxHQUFBclQsRUFBQWdNLEVBQUEsR0FDQVcsRUFBQStVLEdBQUExaEIsRUFDQTBOLElBQ0FmLEVBQUEsT0FBQSxHQUFBZSxHQUdBK1csRUFBQSxJQUFBdmMsRUFBQXdjLHFCQUFBbG1CLE9BQUF1SyxFQUFBLENBQ0E0RCxRQUFBdEQsRUFBQSxHQUFBc0QsRUFBQXpFLEVBQUF5RSxZQUtBOFgsRUFGQUEsR0FFQSxJQUFBdmMsRUFBQXdjLHFCQUFBbG1CLEdBRUFnUyxJQUFBTCxFQUFBTSxlQUFBQyxTQUNBK1QsRUFBQUUsV0FBQSxlQUdBRixFQUFBbkMsT0FBQSxTQUFBc0MsR0FDQTFjLEVBQUFELE9BQUFtRSxJQUFBWCxFQUFBWSxTQUFBa0osWUFBQSwwQkFBQS9XLEVBQUEsS0FDQTBKLEVBQUF1YyxVQUFBQSxFQUNBM0MsR0FBQSxFQUNBaFksS0FFQTJhLEVBQUFwQyxRQUFBLFNBQUFwaUIsR0FDQSxJQUFBSCxFQUFBLEtBR0FBLEVBREEsb0JBQUEra0IsWUFBQTVrQixhQUFBNGtCLFdBQ0E1a0IsRUFBQUgsTUFHQSxJQUFBN0MsTUFBQSwwQ0FFQTJLLEVBQUE5SCxJQUVBMmtCLEVBQUF0QyxVQUFBLFNBQUE1aEIsR0FFQSxHQURBMkgsRUFBQUQsT0FBQW1FLElBQUFYLEVBQUFZLFNBQUFxUyxNQUFBLHlDQUFBdlgsRUFBQW9hLGNBQUFoaEIsRUFBQXFPLEtBQUExRyxFQUFBeU0sbUJBQUEsS0FDQXpNLEVBQUE4TSxVQUNBLElBQ0E5TSxFQUFBOE0sVUFBQXpVLEVBQUFxTyxNQUVBLE1BQUE5TyxHQUVBLFlBREFvSSxFQUFBa2EsTUFBQXRpQixLQUtBMmtCLEVBQUF4UCxRQUFBLFNBQUFoVixHQUdBLElBT0FILEVBUEFnaUIsRUFDQTVaLEVBQUFrYSxNQUFBbmlCLElBR0FILEVBQUEsS0FHQUEsRUFEQSxvQkFBQStrQixZQUFBNWtCLGFBQUE0a0IsV0FDQTVrQixFQUFBSCxNQUdBLElBQUE3QyxNQUFBLDBDQUVBMkssRUFBQTlILGNBUUE0VSxFQUFBN08sVUFBQTBCLEtBQUEsU0FBQXFILEdBQ0EsT0FBQTFNLEtBQUF1aUIsV0FBQXZpQixLQUFBdWlCLFVBQUFLLGFBQUE1aUIsS0FBQXdpQixxQkFBQUssTUFDQTdpQixLQUFBK0YsT0FBQW1FLElBQUFYLEVBQUFZLFNBQUFxUyxNQUFBLHdDQUFBdlgsRUFBQW9hLGNBQUEzUyxFQUFBMU0sS0FBQXlTLG1CQUFBLEtBQ0F6UyxLQUFBdWlCLFVBQUFsZCxLQUFBcUgsR0FDQWpILFFBQUFtQyxXQUVBbkMsUUFBQUMsT0FBQSx1Q0FFQThNLEVBQUE3TyxVQUFBeUwsS0FBQSxXQU1BLE9BTEFwUCxLQUFBdWlCLFdBR0F2aUIsS0FBQWtnQixXQUFBclosR0FFQXBCLFFBQUFtQyxXQUVBNEssRUFBQTdPLFVBQUF1YyxNQUFBLFNBQUFuaUIsR0FFQWlDLEtBQUF1aUIsWUFFQXZpQixLQUFBdWlCLFVBQUF4UCxRQUFBLGFBQ0EvUyxLQUFBdWlCLFVBQUF0QyxVQUFBLGFBQ0FqZ0IsS0FBQXVpQixVQUFBcEMsUUFBQSxhQUNBbmdCLEtBQUF1aUIsVUFBQXJDLFFBQ0FsZ0IsS0FBQXVpQixlQUFBMWIsR0FFQTdHLEtBQUErRixPQUFBbUUsSUFBQVgsRUFBQVksU0FBQXFTLE1BQUEseUNBQ0F4YyxLQUFBK1MsV0FDQS9TLEtBQUE4aUIsYUFBQS9rQixLQUFBLElBQUFBLEVBQUFnbEIsVUFBQSxNQUFBaGxCLEVBQUEvQyxLQUdBK0MsYUFBQWhELE1BQ0FpRixLQUFBK1MsUUFBQWhWLEdBR0FpQyxLQUFBK1MsVUFOQS9TLEtBQUErUyxRQUFBLElBQUFoWSxNQUFBLHNDQUFBZ0QsRUFBQS9DLEtBQUEsS0FBQStDLEVBQUFtWCxPQUFBLFNBVUExQyxFQUFBN08sVUFBQW1mLGFBQUEsU0FBQS9rQixHQUNBLE9BQUFBLEdBQUEsa0JBQUFBLEVBQUFnbEIsVUFBQSxpQkFBQWhsQixFQUFBL0MsTUFFQXdYLEdBcEpBLFNBQUFBLEVBQUEzTSxFQUFBbUssRUFBQWpLLEVBQUEwTSxFQUFBK1AsRUFBQS9YLEdBQ0F6SyxLQUFBK0YsT0FBQUEsRUFDQS9GLEtBQUFnUSxtQkFBQUEsRUFDQWhRLEtBQUF5UyxrQkFBQUEsRUFDQXpTLEtBQUF3aUIscUJBQUFBLEVBQ0F4aUIsS0FBQTZGLFdBQUFBLEVBQ0E3RixLQUFBOFMsVUFBQSxLQUNBOVMsS0FBQStTLFFBQUEsS0FDQS9TLEtBQUF5SyxRQUFBQSxFQThJQXZQLEVBQUFzWCxtQkFBQUEsRyxrRkN2TUEsSUFDQXRPLEVBREFDLEVBQUFuRSxNQUFBQSxLQUFBbUUsWUFDQUQsRUFBQVYsT0FBQVksZ0JBQ0EsQ0FBQUMsVUFBQSxjQUFBQyxPQUFBLFNBQUFDLEVBQUFDLEdBQUFELEVBQUFGLFVBQUFHLElBQ0EsU0FBQUQsRUFBQUMsR0FBQSxJQUFBLElBQUF2SixLQUFBdUosRUFBQUEsRUFBQUMsZUFBQXhKLEtBQUFzSixFQUFBdEosR0FBQXVKLEVBQUF2SixLQUNBLFNBQUFzSixFQUFBQyxHQUVBLFNBQUFFLElBQUExRSxLQUFBMkUsWUFBQUosRUFEQUwsRUFBQUssRUFBQUMsR0FFQUQsRUFBQVosVUFBQSxPQUFBYSxFQUFBaEIsT0FBQW9CLE9BQUFKLElBQUFFLEVBQUFmLFVBQUFhLEVBQUFiLFVBQUEsSUFBQWUsS0FHQWxCLE9BQUFDLGVBQUF2SSxFQUFBLGFBQUEsQ0FBQTRDLE9BQUEsSUFDQSxJQUdBK0csRUFIQUMsRUFBQWxLLEVBQUEsWUFDQW9LLEVBQUFwSyxFQUFBLGdCQUNBMk8sRUFBQTNPLEVBQUEsYUFDQTBMLEdBQUF6QixFQXFFQUcsRUFBQUksV0FwRUFqQixFQUFBbUMsRUFBQXpCLEdBT0F5QixFQUFBM0MsVUFBQTBCLEtBQUEsU0FBQUMsR0FDQSxJQUFBVSxFQUFBaEcsS0FFQSxPQUFBc0YsRUFBQUMsYUFBQUQsRUFBQUMsWUFBQUMsUUFDQUMsUUFBQUMsT0FBQSxJQUFBWixFQUFBYSxZQUVBTCxFQUFBTSxPQUdBTixFQUFBaEosSUFHQSxJQUFBbUosUUFBQSxTQUFBbUMsRUFBQWxDLEdBQ0EsSUFBQXNkLEVBQUEsSUFBQTNjLGVBQ0EyYyxFQUFBQyxLQUFBM2QsRUFBQU0sT0FBQU4sRUFBQWhKLEtBQUEsR0FDQTBtQixFQUFBeFkscUJBQUEzRCxJQUFBdkIsRUFBQWtGLGlCQUFBbEYsRUFBQWtGLGdCQUNBd1ksRUFBQUUsaUJBQUEsbUJBQUEsa0JBRUFGLEVBQUFFLGlCQUFBLGVBQUEsNEJBQ0EsSUFBQXpZLEVBQUFuRixFQUFBbUYsUUFDQUEsR0FDQWpILE9BQUE2WCxLQUFBNVEsR0FDQThQLFFBQUEsU0FBQTRJLEdBQ0FILEVBQUFFLGlCQUFBQyxFQUFBMVksRUFBQTBZLE1BR0E3ZCxFQUFBNkYsZUFDQTZYLEVBQUE3WCxhQUFBN0YsRUFBQTZGLGNBRUE3RixFQUFBQyxjQUNBRCxFQUFBQyxZQUFBekIsUUFBQSxXQUNBa2YsRUFBQXBmLFFBQ0E4QixFQUFBLElBQUFaLEVBQUFhLGNBR0FMLEVBQUEwRSxVQUNBZ1osRUFBQWhaLFFBQUExRSxFQUFBMEUsU0FFQWdaLEVBQUFJLE9BQUEsV0FDQTlkLEVBQUFDLGNBQ0FELEVBQUFDLFlBQUF6QixRQUFBLE1BRUEsS0FBQWtmLEVBQUE5WCxRQUFBOFgsRUFBQTlYLE9BQUEsSUFDQXRELEVBQUEsSUFBQTVDLEVBQUF1RyxhQUFBeVgsRUFBQTlYLE9BQUE4WCxFQUFBL1gsV0FBQStYLEVBQUFyWixVQUFBcVosRUFBQUssZUFHQTNkLEVBQUEsSUFBQVosRUFBQWdDLFVBQUFrYyxFQUFBL1gsV0FBQStYLEVBQUE5WCxVQUdBOFgsRUFBQTdDLFFBQUEsV0FDQW5hLEVBQUFELE9BQUFtRSxJQUFBWCxFQUFBWSxTQUFBQyxRQUFBLDRCQUFBNFksRUFBQTlYLE9BQUEsS0FBQThYLEVBQUEvWCxXQUFBLEtBQ0F2RixFQUFBLElBQUFaLEVBQUFnQyxVQUFBa2MsRUFBQS9YLFdBQUErWCxFQUFBOVgsVUFFQThYLEVBQUFNLFVBQUEsV0FDQXRkLEVBQUFELE9BQUFtRSxJQUFBWCxFQUFBWSxTQUFBQyxRQUFBLDhCQUNBMUUsRUFBQSxJQUFBWixFQUFBb0MsZUFFQThiLEVBQUEzZCxLQUFBQyxFQUFBbEcsU0FBQSxNQS9DQXFHLFFBQUFDLE9BQUEsSUFBQTNLLE1BQUEsb0JBSEEwSyxRQUFBQyxPQUFBLElBQUEzSyxNQUFBLHdCQXFEQXVMLEdBbEVBLFNBQUFBLEVBQUFQLEdBQ0EsSUFBQUMsRUFBQW5CLEVBQUExSixLQUFBNkUsT0FBQUEsS0FFQSxPQURBZ0csRUFBQUQsT0FBQUEsRUFDQUMsRUFpRUE5SyxFQUFBb0wsY0FBQUEsRyxpRkNwRkE5QyxPQUFBQyxlQUFBdkksRUFBQSxhQUFBLENBQUE0QyxPQUFBLElBQ0EsSUFBQWdILEVBQUFsSyxFQUFBLFlBQ0FNLEVBQUF5SyxXQUFBYixFQUFBYSxXQUNBekssRUFBQTRMLFVBQUFoQyxFQUFBZ0MsVUFDQTVMLEVBQUFnTSxhQUFBcEMsRUFBQW9DLGFBQ0EsSUFBQWxDLEVBQUFwSyxFQUFBLGdCQUNBTSxFQUFBa0ssV0FBQUosRUFBQUksV0FDQWxLLEVBQUFxUSxhQUFBdkcsRUFBQXVHLGFBQ0EsSUFBQXlDLEVBQUFwVCxFQUFBLHVCQUNBTSxFQUFBaUssa0JBQUE2SSxFQUFBN0ksa0JBQ0EsSUFBQWdYLEVBQUF2aEIsRUFBQSxtQkFDQU0sRUFBQXNhLGNBQUEyRyxFQUFBM0csY0FDQXRhLEVBQUFrYSxtQkFBQStHLEVBQUEvRyxtQkFDQSxJQUFBbU8sRUFBQTNvQixFQUFBLDBCQUNBTSxFQUFBaUMscUJBQUFvbUIsRUFBQXBtQixxQkFDQSxJQUFBbVksRUFBQTFhLEVBQUEsa0JBQ0FNLEVBQUErYyxZQUFBM0MsRUFBQTJDLFlBQ0EsSUFBQTFPLEVBQUEzTyxFQUFBLGFBQ0FNLEVBQUFpUCxTQUFBWixFQUFBWSxTQUNBLElBQUE4RCxFQUFBclQsRUFBQSxnQkFDQU0sRUFBQWdWLGtCQUFBakMsRUFBQWlDLGtCQUNBaFYsRUFBQXFULGVBQUFOLEVBQUFNLGVBQ0EsSUFBQThOLEVBQUF6aEIsRUFBQSxhQUNBTSxFQUFBMmlCLFdBQUF4QixFQUFBd0IsV0FDQSxJQUFBekIsRUFBQXhoQixFQUFBLHFCQUNBTSxFQUFBNmlCLGdCQUFBM0IsRUFBQTJCLGdCQUNBLElBQUF4SSxFQUFBM2EsRUFBQSxhQUNBTSxFQUFBdWMsUUFBQWxDLEVBQUFrQyxRQUNBLElBQUF4UyxFQUFBckssRUFBQSxXQUNBTSxFQUFBd2xCLFFBQUF6YixFQUFBeWIsUywrUUN4QkEsU0FBQThDLEVBQUFDLEdBQ0EsSUFBQUMsRUFBQUQsRUFBQUQsd0JBQ0EsTUFBQSxDQUNBRyxNQUFBRCxFQUFBQyxNQUNBQyxPQUFBRixFQUFBRSxPQUNBQyxJQUFBSCxFQUFBRyxJQUNBQyxNQUFBSixFQUFBSSxNQUNBQyxPQUFBTCxFQUFBSyxPQUNBQyxLQUFBTixFQUFBTSxLQUNBQyxFQUFBUCxFQUFBTSxLQUNBMWIsRUFBQW9iLEVBQUFHLEtBT0EsU0FBQUssRUFBQWxDLEdBQ0EsR0FBQSxvQkFBQUEsRUFBQTlHLFdBS0EsT0FBQThHLEVBSkEsSUFBQW1DLEVBQUFuQyxFQUFBbUMsY0FDQSxPQUFBQSxFQUFBQSxFQUFBQyxZQUFBcG9CLE9BTUEsU0FBQXFvQixFQUFBckMsR0FDQSxJQUFBc0MsRUFBQUosRUFBQWxDLEdBR0EsTUFBQSxDQUNBdUMsV0FIQUQsRUFBQUUsWUFJQUMsVUFIQUgsRUFBQUksYUFVQSxTQUFBQyxFQUFBM0MsR0FFQSxPQUFBQSxhQURBa0MsRUFBQWxDLEdBQUE0QyxTQUNBNUMsYUFBQTRDLFFBTUEsU0FBQUMsRUFBQTdDLEdBRUEsT0FBQUEsYUFEQWtDLEVBQUFsQyxHQUFBOEMsYUFDQTlDLGFBQUE4QyxZQWtCQSxTQUFBQyxFQUFBdEIsR0FDQSxPQUFBQSxHQUFBQSxFQUFBdUIsVUFBQSxJQUFBdk0sY0FBQSxLQUdBLFNBQUF3TSxFQUFBeEIsR0FFQSxPQUFBa0IsRUFBQWxCLEdBQUFBLEVBQUFVLGNBQUFWLEVBQUE5bkIsVUFBQXVwQixnQkFHQSxTQUFBQyxFQUFBMUIsR0FRQSxPQUFBRCxFQUFBeUIsRUFBQXhCLElBQUFPLEtBQUFLLEVBQUFaLEdBQUFjLFdBR0EsU0FBQXhpQixFQUFBMGhCLEdBQ0EsT0FBQVMsRUFBQVQsR0FBQTFoQixpQkFBQTBoQixHQUdBLFNBQUEyQixFQUFBM0IsR0FFQSxJQUFBNEIsRUFBQXRqQixFQUFBMGhCLEdBQ0E2QixFQUFBRCxFQUFBQyxTQUNBQyxFQUFBRixFQUFBRSxVQUNBQyxFQUFBSCxFQUFBRyxVQUVBLE1BQUEsNkJBQUF6bEIsS0FBQXVsQixFQUFBRSxFQUFBRCxHQUtBLFNBQUFFLEVBQUFDLEVBQUFDLEVBQUFDLFFBQ0EsSUFBQUEsSUFDQUEsR0FBQSxHQUdBLElBakRBNUQsRUFQQXlCLEVBd0RBeUIsRUFBQUQsRUFBQVUsR0FDQWpDLEVBQUFGLEVBQUFrQyxHQUNBRyxFQUFBLENBQ0F0QixXQUFBLEVBQ0FFLFVBQUEsR0FFQXFCLEVBQUEsQ0FDQTdCLEVBQUEsRUFDQTNiLEVBQUEsR0FrQkEsT0FmQXNkLElBQ0EsU0FBQWIsRUFBQVksS0FDQVAsRUFBQUYsS0FDQVcsR0EvREE3RCxFQStEQTJELEtBOURBekIsRUFBQWxDLElBQUE2QyxFQUFBN0MsR0FQQSxDQUNBdUMsWUFGQWQsRUFXQXpCLEdBVEF1QyxXQUNBRSxVQUFBaEIsRUFBQWdCLFdBTUFKLEVBQUFyQyxJQWdFQTZDLEVBQUFjLEtBQ0FHLEVBQUF0QyxFQUFBbUMsSUFDQTFCLEdBQUEwQixFQUFBSSxXQUNBRCxFQUFBeGQsR0FBQXFkLEVBQUFLLFdBQ0FkLElBQ0FZLEVBQUE3QixFQUFBa0IsRUFBQUQsS0FJQSxDQUNBakIsRUFBQVAsRUFBQU0sS0FBQTZCLEVBQUF0QixXQUFBdUIsRUFBQTdCLEVBQ0EzYixFQUFBb2IsRUFBQUcsSUFBQWdDLEVBQUFwQixVQUFBcUIsRUFBQXhkLEVBQ0FxYixNQUFBRCxFQUFBQyxNQUNBQyxPQUFBRixFQUFBRSxRQU1BLFNBQUFxQyxHQUFBeEMsR0FDQSxNQUFBLENBQ0FRLEVBQUFSLEVBQUF5QyxXQUNBNWQsRUFBQW1iLEVBQUEwQyxVQUNBeEMsTUFBQUYsRUFBQTJDLFlBQ0F4QyxPQUFBSCxFQUFBNEMsY0FJQSxTQUFBQyxFQUFBN0MsR0FDQSxNQUFBLFNBQUFzQixFQUFBdEIsR0FDQUEsRUFJQUEsRUFBQThDLGNBQ0E5QyxFQUFBK0MsWUFFQS9DLEVBQUFnRCxNQUVBeEIsRUFBQXhCLEdBa0JBLFNBQUFpRCxFQUFBakQsRUFBQWxnQixRQUNBLElBQUFBLElBQ0FBLEVBQUEsSUFHQSxJQUFBb2pCLEVBbEJBLFNBQUFDLEVBQUE1RSxHQUNBLE9BQUEsR0FBQSxDQUFBLE9BQUEsT0FBQSxhQUFBaFYsUUFBQStYLEVBQUEvQyxJQUVBQSxFQUFBbUMsY0FBQTliLEtBR0F3YyxFQUFBN0MsSUFBQW9ELEVBQUFwRCxHQUNBQSxFQUdBNEUsRUFBQU4sRUFBQXRFLElBUUE0RSxDQUFBbkQsR0FDQW9ELEVBQUEsU0FBQTlCLEVBQUE0QixHQUNBckMsRUFBQUosRUFBQXlDLEdBQ0EzbEIsRUFBQTZsQixFQUFBLENBQUF2QyxHQUFBeG5CLE9BQUF3bkIsRUFBQXdDLGdCQUFBLEdBQUExQixFQUFBdUIsR0FBQUEsRUFBQSxJQUFBQSxFQUNBSSxFQUFBeGpCLEVBQUF6RyxPQUFBa0UsR0FDQSxPQUFBNmxCLEVBQUFFLEVBQ0FBLEVBQUFqcUIsT0FBQTRwQixFQUFBSixFQUFBdGxCLEtBT0EsU0FBQWdtQixFQUFBdkQsR0FDQSxPQUFBb0IsRUFBQXBCLElBQ0EsVUFBQTFoQixFQUFBMGhCLEdBQUF3RCxTQUlBeEQsRUFBQWtDLGFBSEEsS0FNQSxTQUFBdUIsR0FBQXpELEdBSUEsSUFIQSxJQUFBem5CLEVBQUFrb0IsRUFBQVQsR0FDQWtDLEVBQUFxQixFQUFBdkQsR0FFQWtDLEdBaEJBLEdBQUEsQ0FBQSxRQUFBLEtBQUEsTUFBQTNZLFFBQUErWCxFQWdCQVksS0FDQUEsRUFBQXFCLEVBQUFyQixHQUdBLFFBQUFBLEdBQUEsU0FBQVosRUFBQVksSUFBQSxXQUFBNWpCLEVBQUE0akIsR0FBQXNCLFdBSUF0QixHQUhBM3BCLEVBNU5Bd0gsT0FBQUMsZUFBQXZJLEVBQUEsYUFBQSxDQUFBNEMsT0FBQSxJQWtPQSxJQUFBK2xCLEdBQUEsTUFDQUUsR0FBQSxTQUNBRCxHQUFBLFFBQ0FFLEdBQUEsT0FDQW1ELEVBQUEsT0FDQUMsRUFBQSxDQUFBdkQsR0FBQUUsR0FBQUQsR0FBQUUsSUFDQXhtQixHQUFBLFFBQ0E2cEIsRUFBQSxNQUNBQyxFQUFBLGtCQUNBQyxFQUFBLFdBQ0FDLEVBQUEsU0FDQUMsRUFBQSxZQUNBQyxFQUFBTixFQUFBeFMsT0FBQSxTQUFBK1MsRUFBQTNrQixHQUNBLE9BQUEya0IsRUFBQTdxQixPQUFBLENBQUFrRyxFQUFBLElBQUF4RixHQUFBd0YsRUFBQSxJQUFBcWtCLEtBQ0EsSUFDQU8sRUFBQSxHQUFBOXFCLE9BQUFzcUIsRUFBQSxDQUFBRCxJQUFBdlMsT0FBQSxTQUFBK1MsRUFBQTNrQixHQUNBLE9BQUEya0IsRUFBQTdxQixPQUFBLENBQUFrRyxFQUFBQSxFQUFBLElBQUF4RixHQUFBd0YsRUFBQSxJQUFBcWtCLEtBQ0EsSUFhQVEsRUFBQSxDQVhBLGFBQ0EsT0FDQSxZQUVBLGFBQ0EsT0FDQSxZQUVBLGNBQ0EsUUFDQSxjQUdBLFNBQUFDLEVBQUFDLEdBQ0EsSUFBQTVVLEVBQUEsSUFBQTZVLElBQ0FDLEVBQUEsSUFBQUMsSUFDQWpnQixFQUFBLEdBMEJBLE9BekJBOGYsRUFBQXhOLFFBQUEsU0FBQTROLEdBQ0FoVixFQUFBNkIsSUFBQW1ULEVBQUFwWCxLQUFBb1gsS0FrQkFKLEVBQUF4TixRQUFBLFNBQUE0TixHQUNBRixFQUFBRyxJQUFBRCxFQUFBcFgsUUFoQkEsU0FBQXNYLEVBQUFGLEdBQ0FGLEVBQUEvcUIsSUFBQWlyQixFQUFBcFgsTUFDQSxHQUFBalUsT0FBQXFyQixFQUFBRyxVQUFBLEdBQUFILEVBQUFJLGtCQUFBLElBQ0FoTyxRQUFBLFNBQUFpTyxHQUNBLElBQ0FDLEVBREFSLEVBQUFHLElBQUFJLEtBQ0FDLEVBQUF0VixFQUFBcFAsSUFBQXlrQixLQUdBSCxFQUFBSSxLQUlBeGdCLEVBQUFxQixLQUFBNmUsR0FNQUUsQ0FBQUYsS0FHQWxnQixFQThCQSxTQUFBeWdCLEVBQUF6SCxHQUNBLElBQUEsSUFBQTBILEVBQUFyaEIsVUFBQWxNLE9BQUE2YixFQUFBLElBQUEzUyxNQUFBLEVBQUFxa0IsRUFBQUEsRUFBQSxFQUFBLEdBQUFDLEVBQUEsRUFBQUEsRUFBQUQsRUFBQUMsSUFDQTNSLEVBQUEyUixFQUFBLEdBQUF0aEIsVUFBQXNoQixHQUdBLE1BQUEsR0FBQTlyQixPQUFBbWEsR0FBQXJDLE9BQUEsU0FBQTNaLEVBQUFOLEdBQ0EsT0FBQU0sRUFBQW9ILFFBQUEsS0FBQTFILElBQ0FzbUIsR0FHQSxJQUFBNEgsRUFBQSxnRkFDQUMsRUFBQSwwRUFDQUMsRUFBQSxDQUFBLE9BQUEsVUFBQSxRQUFBLEtBQUEsU0FBQSxXQUFBLFdBcUZBLFNBQUFDLEdBQUFobUIsR0FDQSxPQUFBQSxFQUFBeWQsTUFBQSxLQUFBLEdBa0JBLElBQUF3SSxFQUFBLCtHQUVBQyxFQUFBLENBQ0FsbUIsVUFBQSxTQUNBK2tCLFVBQUEsR0FDQW9CLFNBQUEsWUFHQSxTQUFBQyxJQUNBLElBQUEsSUFBQVQsRUFBQXJoQixVQUFBbE0sT0FBQTZiLEVBQUEsSUFBQTNTLE1BQUFxa0IsR0FBQUMsRUFBQSxFQUFBQSxFQUFBRCxFQUFBQyxJQUNBM1IsRUFBQTJSLEdBQUF0aEIsVUFBQXNoQixHQUdBLE9BQUEzUixFQUFBb1MsS0FBQSxTQUFBNUYsR0FDQSxRQUFBQSxHQUFBLG1CQUFBQSxFQUFBRCx5QkFJQSxTQUFBOEYsRUFBQUMsUUFDQSxJQUFBQSxJQUNBQSxFQUFBLElBR0EsSUFDQUMsRUFEQUQsRUFDQUUsaUJBQ0FBLE9BQUEsSUFBQUQsRUFBQSxHQUFBQSxFQUNBRSxFQUhBSCxFQUdBSSxlQUNBQSxPQUFBLElBQUFELEVBQUFSLEVBQUFRLEVBQ0EsT0FBQSxTQUFBakMsRUFBQUQsRUFBQTNaLFFBQ0EsSUFBQUEsSUFDQUEsRUFBQThiLEdBR0EsSUFyS0FDLEVBQ0FDLEVBb0tBQyxFQUFBLENBQ0E5bUIsVUFBQSxTQUNBK21CLGlCQUFBLEdBQ0FsYyxRQUFBckssT0FBQTRELE9BQUEsR0FBQThoQixFQUFBLEdBQUFTLEdBQ0FLLGNBQUEsR0FDQUMsU0FBQSxDQUNBeEMsVUFBQUEsRUFDQUQsT0FBQUEsR0FFQTBDLFdBQUEsR0FDQUMsT0FBQSxJQUVBQyxFQUFBLEdBQ0FDLEdBQUEsRUFDQXZNLEVBQUEsQ0FDQWdNLE1BQUFBLEVBQ0FRLFdBQUEsU0FBQXpjLEdBQ0EwYyxJQUNBVCxFQUFBamMsUUFBQXJLLE9BQUE0RCxPQUFBLEdBQUF1aUIsRUFBQSxHQUFBRyxFQUFBamMsUUFBQSxHQUFBQSxHQUNBaWMsRUFBQVUsY0FBQSxDQUNBL0MsVUFBQTlDLEVBQUE4QyxHQUFBZixFQUFBZSxHQUFBQSxFQUFBZ0QsZUFBQS9ELEVBQUFlLEVBQUFnRCxnQkFBQSxHQUNBakQsT0FBQWQsRUFBQWMsSUFJQSxJQXpNQU8sRUFFQWdDLEVBOEhBaEMsRUFDQTJDLEVBZ0ZBM0MsRUFpQkExQyxFQTFMQTBDLEVBd0VBNEMsRUFBQWYsRUFDQWdCLEVBd0ZBYixHQXpFQWhDLEVBeUVBLEdBQUFqckIsT0FBQTJzQixFQUFBSyxFQUFBamMsUUFBQWthLFdBeEVBMkMsRUFBQTNDLEVBQUFuVCxPQUFBLFNBQUE4VixFQUFBRyxHQUNBLElBQUFDLEVBQUFKLEVBQUFHLEVBQUE5WixNQUtBLE9BSkEyWixFQUFBRyxFQUFBOVosTUFBQStaLEVBQUF0bkIsT0FBQTRELE9BQUEsR0FBQTBqQixFQUFBLEdBQUFELEVBQUEsQ0FDQWhkLFFBQUFySyxPQUFBNEQsT0FBQSxHQUFBMGpCLEVBQUFqZCxRQUFBLEdBQUFnZCxFQUFBaGQsU0FDQW5CLEtBQUFsSixPQUFBNEQsT0FBQSxHQUFBMGpCLEVBQUFwZSxLQUFBLEdBQUFtZSxFQUFBbmUsUUFDQW1lLEVBQ0FILEdBQ0EsSUF4SUEzQyxFQTBJQXZrQixPQUFBNlgsS0FBQXFQLEdBQUF2WCxJQUFBLFNBQUFtSSxHQUNBLE9BQUFvUCxFQUFBcFAsS0F6SUF5TyxFQUFBakMsRUFBQUMsR0FFQUYsRUFBQWpULE9BQUEsU0FBQStTLEVBQUFvRCxHQUNBLE9BQUFwRCxFQUFBN3FCLE9BQUFpdEIsRUFBQWlCLE9BQUEsU0FBQTdDLEdBQ0EsT0FBQUEsRUFBQTRDLFFBQUFBLE1BRUEsS0EwT0EsT0F2Q0FqQixFQUFBQyxpQkFBQUEsRUFBQWlCLE9BQUEsU0FBQXhRLEdBQ0EsT0FBQUEsRUFBQXlRLFVBSUEsZUFBQXJKLEVBQUFzSixJQUFBQyxXQWhHQVIsRUFpR0EsR0FBQTd0QixPQUFBaXRCLEVBQUFELEVBQUFqYyxRQUFBa2EsV0FqR0E2QixFQWlHQSxTQUFBd0IsR0FFQSxPQURBQSxFQUFBcmEsTUFqR0E2WixFQUFBLElBQUExQyxJQWdHQUgsRUEvRkE0QyxFQUFBSyxPQUFBLFNBQUFqVyxHQUNBLElBQUFzVyxFQUFBekIsRUFBQTdVLEdBRUEsSUFBQTZWLEVBQUF4QyxJQUFBaUQsR0FFQSxPQURBVCxFQUFBMXRCLElBQUFtdUIsSUFDQSxLQS9FQXRELEVBNktBQSxHQTVLQXhOLFFBQUEsU0FBQTROLEdBQ0Eza0IsT0FBQTZYLEtBQUE4TSxHQUFBNU4sUUFBQSxTQUFBZSxHQUNBLE9BQUFBLEdBQ0EsSUFBQSxPQUNBLGlCQUFBNk0sRUFBQXBYLE1BQ0FwVCxRQUFBQyxNQUFBOHFCLEVBQUFHLEVBQUF6YixPQUFBK2EsRUFBQXBYLE1BQUEsU0FBQSxXQUFBLElBQUEzRCxPQUFBK2EsRUFBQXBYLE1BQUEsTUFHQSxNQUVBLElBQUEsVUFDQSxrQkFBQW9YLEVBQUE4QyxTQUNBdHRCLFFBQUFDLE1BQUE4cUIsRUFBQUcsRUFBQVYsRUFBQXBYLEtBQUEsWUFBQSxZQUFBLElBQUEzRCxPQUFBK2EsRUFBQThDLFNBQUEsTUFHQSxJQUFBLFFBQ0FwRCxFQUFBN2EsUUFBQW1iLEVBQUE0QyxPQUFBLEdBQ0FwdEIsUUFBQUMsTUFBQThxQixFQUFBRyxFQUFBVixFQUFBcFgsS0FBQSxVQUFBLFVBQUE4VyxFQUFBbGMsS0FBQSxNQUFBLElBQUF5QixPQUFBK2EsRUFBQTRDLE9BQUEsTUFHQSxNQUVBLElBQUEsS0FDQSxtQkFBQTVDLEVBQUF5QixJQUNBanNCLFFBQUFDLE1BQUE4cUIsRUFBQUcsRUFBQVYsRUFBQXBYLEtBQUEsT0FBQSxhQUFBLElBQUEzRCxPQUFBK2EsRUFBQXlCLElBQUEsTUFHQSxNQUVBLElBQUEsU0FDQSxtQkFBQXpCLEVBQUFtRCxRQUNBM3RCLFFBQUFDLE1BQUE4cUIsRUFBQUcsRUFBQVYsRUFBQXBYLEtBQUEsV0FBQSxhQUFBLElBQUEzRCxPQUFBK2EsRUFBQXlCLElBQUEsTUFHQSxNQUVBLElBQUEsV0FDQXRsQixNQUFBc1osUUFBQXVLLEVBQUFHLFdBQ0EzcUIsUUFBQUMsTUFBQThxQixFQUFBRyxFQUFBVixFQUFBcFgsS0FBQSxhQUFBLFVBQUEsSUFBQTNELE9BQUErYSxFQUFBRyxVQUFBLE1BR0EsTUFFQSxJQUFBLG1CQUNBaGtCLE1BQUFzWixRQUFBdUssRUFBQUksbUJBQ0E1cUIsUUFBQUMsTUFBQThxQixFQUFBRyxFQUFBVixFQUFBcFgsS0FBQSxxQkFBQSxVQUFBLElBQUEzRCxPQUFBK2EsRUFBQUksa0JBQUEsTUFHQSxNQUVBLElBQUEsVUFDQSxJQUFBLE9BQ0EsTUFFQSxRQUNBNXFCLFFBQUFDLE1BQUEsMkRBQUF1cUIsRUFBQXBYLEtBQUEsb0NBQUFnWSxFQUFBNVYsSUFBQSxTQUFBOUwsR0FDQSxNQUFBLElBQUFBLEVBQUEsTUFDQXNFLEtBQUEsTUFBQSxVQUFBMlAsRUFBQSxtQkFHQTZNLEVBQUFHLFVBQUFILEVBQUFHLFNBQUEvTixRQUFBLFNBQUFnUixHQUdBLE1BRkF4RCxFQUFBeUQsS0FBQSxTQUFBQyxHQUNBLE9BQUFBLEVBQUExYSxPQUFBd2EsS0FFQTV0QixRQUFBQyxNQUFBOHFCLEVBQUFJLEVBQUExYixPQUFBK2EsRUFBQXBYLE1BQUF3YSxFQUFBQSxVQThHQXZDLEdBQUFjLEVBQUFqYyxRQUFBN0ssYUFBQW1rQixJQUNBMkMsRUFBQUMsaUJBQUF5QixLQUFBLFNBQUFFLEdBRUEsTUFBQSxTQURBQSxFQUFBM2EsUUFLQXBULFFBQUFDLE1BQUEsQ0FBQSwyREFBQSxnQ0FBQStOLEtBQUEsT0FZQSxFQVJBMFosRUFBQXRqQixFQUFBeWxCLElBQ0FtRSxVQUNBdEcsRUFBQXVHLFlBQ0F2RyxFQUFBd0csYUFDQXhHLEVBQUF5RyxZQUlBekMsS0FBQSxTQUFBMEMsR0FDQSxPQUFBQyxXQUFBRCxNQUVBcHVCLFFBQUFpZixLQUFBLENBQUEsOERBQUEsNERBQUEsNkRBQUEsMkRBQUEsY0FBQWpSLEtBQUEsT0FvSEFtZSxFQUFBQyxpQkFBQXhQLFFBQUEsU0FBQTBSLEdBQ0EsSUFNQUMsRUFOQW5iLEVBQUFrYixFQUFBbGIsS0FDQW9iLEVBQUFGLEVBQUFwZSxRQUNBQSxPQUFBLElBQUFzZSxFQUFBLEdBQUFBLEVBQ0FiLEVBQUFXLEVBQUFYLE9BRUEsbUJBQUFBLElBQ0FZLEVBQUFaLEVBQUEsQ0FDQXhCLE1BQUFBLEVBQ0EvWSxLQUFBQSxFQUNBK00sU0FBQUEsRUFDQWpRLFFBQUFBLElBS0F1YyxFQUFBOWdCLEtBQUE0aUIsR0FGQSxpQkE3SEFwTyxFQUFBc08sVUFPQUMsWUFBQSxXQUNBLElBQUFoQyxFQUFBLENBSUEsSUFBQWlDLEVBQUF4QyxFQUFBRyxTQUNBeEMsRUFBQTZFLEVBQUE3RSxVQUNBRCxFQUFBOEUsRUFBQTlFLE9BR0EsR0FBQTRCLEVBQUEzQixFQUFBRCxHQUFBLENBU0FzQyxFQUFBeUMsTUFBQSxDQUNBOUUsVUFBQWhDLEVBQUFnQyxFQUFBUCxHQUFBTSxHQUFBLFVBQUFzQyxFQUFBamMsUUFBQXNiLFVBQ0EzQixPQUFBdkIsR0FBQXVCLElBT0FzQyxFQUFBMEMsT0FBQSxFQUNBMUMsRUFBQTltQixVQUFBOG1CLEVBQUFqYyxRQUFBN0ssVUFLQThtQixFQUFBQyxpQkFBQXhQLFFBQUEsU0FBQTROLEdBQ0EsT0FBQTJCLEVBQUFFLGNBQUE3QixFQUFBcFgsTUFBQXZOLE9BQUE0RCxPQUFBLEdBQUErZ0IsRUFBQXpiLFFBSUEsSUFGQSxJQWtCQStmLEVBQ0E3QyxFQUNBOEMsRUFDQUMsRUFDQTViLEVBdEJBNmIsRUFBQSxFQUVBalosRUFBQSxFQUFBQSxFQUFBbVcsRUFBQUMsaUJBQUEzdUIsT0FBQXVZLElBQUEsQ0FDQSxHQUFBLGVBQUFpTyxFQUFBc0osSUFBQUMsVUFHQSxLQUZBeUIsR0FBQSxHQUVBLENBQ0FqdkIsUUFBQUMsTUFySkEsaUlBc0pBLE9BSUEsSUFBQWtzQixFQUFBMEMsT0FPQTVDLEdBREE2QyxFQUFBM0MsRUFBQUMsaUJBQUFwVyxJQUNBaVcsR0FFQStDLE9BQUEsS0FEQUQsRUFBQUQsRUFBQTVlLFNBQ0EsR0FBQTZlLEVBQ0EzYixFQUFBMGIsRUFBQTFiLEtBRUEsbUJBQUE2WSxJQUNBRSxFQUFBRixFQUFBLENBQ0FFLE1BQUFBLEVBQ0FqYyxRQUFBOGUsRUFDQTViLEtBQUFBLEVBQ0ErTSxTQUFBQSxLQUNBZ00sS0FqQkFBLEVBQUEwQyxPQUFBLEVBQ0E3WSxHQUFBLFFBeENBLGVBQUFpTyxFQUFBc0osSUFBQUMsVUFDQXh0QixRQUFBQyxNQUFBcXJCLEtBNkRBbUQsUUF2VEF4QyxFQXVUQSxXQUNBLE9BQUEsSUFBQW5rQixRQUFBLFNBQUFtQyxHQUNBa1csRUFBQXVPLGNBQ0F6a0IsRUFBQWtpQixNQXhUQSxXQVVBLE9BUkFELEVBREFBLEdBQ0EsSUFBQXBrQixRQUFBLFNBQUFtQyxHQUNBbkMsUUFBQW1DLFVBQUFuSyxLQUFBLFdBQ0Fvc0IsT0FBQWhqQixFQUNBZSxFQUFBZ2lCLFdBc1RBaUQsUUFBQSxXQUNBdEMsSUFDQUYsR0FBQSxJQUlBLElBQUFqQixFQUFBM0IsRUFBQUQsR0FLQSxNQUpBLGVBQUE1RixFQUFBc0osSUFBQUMsVUFDQXh0QixRQUFBQyxNQUFBcXJCLEdBR0FuTCxFQW1DQSxTQUFBeU0sSUFDQUgsRUFBQTdQLFFBQUEsU0FBQXFQLEdBQ0EsT0FBQUEsTUFFQVEsRUFBQSxHQUdBLE9BdkNBdE0sRUFBQXdNLFdBQUF6YyxHQUFBcFEsS0FBQSxTQUFBcXNCLElBQ0FPLEdBQUF4YyxFQUFBaWYsZUFDQWpmLEVBQUFpZixjQUFBaEQsS0FxQ0FoTSxHQUlBLElBQUFpUCxFQUFBLENBQ0FBLFNBQUEsR0ErQ0EsU0FBQUMsR0FBQWhxQixHQUNBLE9BQUFBLEVBQUF5ZCxNQUFBLEtBQUEsR0FHQSxTQUFBd00sR0FBQWpxQixHQUNBLE9BQUEsR0FBQSxDQUFBLE1BQUEsVUFBQWdLLFFBQUFoSyxHQUFBLElBQUEsSUFHQSxTQUFBa3FCLEVBQUE5QixHQUNBLElBT0F0RixFQVBBMkIsRUFBQTJELEVBQUEzRCxVQUNBaEUsRUFBQTJILEVBQUEzSCxRQUNBemdCLEVBQUFvb0IsRUFBQXBvQixVQUNBbXFCLEVBQUFucUIsRUFBQWdtQixHQUFBaG1CLEdBQUEsS0FDQW9xQixFQUFBcHFCLEVBQUFncUIsR0FBQWhxQixHQUFBLEtBQ0FxcUIsRUFBQTVGLEVBQUF4RCxFQUFBd0QsRUFBQTlELE1BQUEsRUFBQUYsRUFBQUUsTUFBQSxFQUNBMkosRUFBQTdGLEVBQUFuZixFQUFBbWYsRUFBQTdELE9BQUEsRUFBQUgsRUFBQUcsT0FBQSxFQUdBLE9BQUF1SixHQUNBLEtBQUF0SixHQUNBaUMsRUFBQSxDQUNBN0IsRUFBQW9KLEVBQ0Eva0IsRUFBQW1mLEVBQUFuZixFQUFBbWIsRUFBQUcsUUFFQSxNQUVBLEtBQUFHLEdBQ0ErQixFQUFBLENBQ0E3QixFQUFBb0osRUFDQS9rQixFQUFBbWYsRUFBQW5mLEVBQUFtZixFQUFBN0QsUUFFQSxNQUVBLEtBQUFFLEdBQ0FnQyxFQUFBLENBQ0E3QixFQUFBd0QsRUFBQXhELEVBQUF3RCxFQUFBOUQsTUFDQXJiLEVBQUFnbEIsR0FFQSxNQUVBLEtBQUF0SixHQUNBOEIsRUFBQSxDQUNBN0IsRUFBQXdELEVBQUF4RCxFQUFBUixFQUFBRSxNQUNBcmIsRUFBQWdsQixHQUVBLE1BRUEsUUFDQXhILEVBQUEsQ0FDQTdCLEVBQUF3RCxFQUFBeEQsRUFDQTNiLEVBQUFtZixFQUFBbmYsR0FJQSxJQUFBaWxCLEVBQUFKLEVBQUFGLEdBQUFFLEdBQUEsS0FFQSxHQUFBLE1BQUFJLEVBQUEsQ0FDQSxJQUFBQyxFQUFBLE1BQUFELEVBQUEsU0FBQSxRQUVBLE9BQUFILEdBQ0EsS0FBQTV2QixHQUNBc29CLEVBQUF5SCxHQUFBRSxLQUFBQyxNQUFBNUgsRUFBQXlILElBQUFFLEtBQUFDLE1BQUFqRyxFQUFBK0YsR0FBQSxFQUFBL0osRUFBQStKLEdBQUEsR0FDQSxNQUVBLEtBQUFuRyxFQUNBdkIsRUFBQXlILEdBQUFFLEtBQUFDLE1BQUE1SCxFQUFBeUgsSUFBQUUsS0FBQUUsS0FBQWxHLEVBQUErRixHQUFBLEVBQUEvSixFQUFBK0osR0FBQSxJQUtBLE9BQUExSCxFQW1CQSxJQVFBOEgsRUFBQSxDQUNBL0osSUFBQSxPQUNBQyxNQUFBLE9BQ0FDLE9BQUEsT0FDQUMsS0FBQSxRQWdCQSxTQUFBNkosRUFBQW5DLEdBQ0EsSUFBQW9DLEVBWkExQyxFQUNBbkgsRUFDQTNiLEVBRUF5bEIsRUE2QkFwSSxFQW5CQTZCLEVBQUFrRSxFQUFBbEUsT0FDQXdHLEVBQUF0QyxFQUFBc0MsV0FDQWhyQixFQUFBMG9CLEVBQUExb0IsVUFDQThpQixFQUFBNEYsRUFBQTVGLFFBQ0FtQixFQUFBeUUsRUFBQXpFLFNBQ0FnSCxFQUFBdkMsRUFBQXVDLGdCQUNBQyxFQUFBeEMsRUFBQXdDLFNBRUFDLEdBckJBbEssR0FEQW1ILEVBc0JBdEYsR0FyQkE3QixFQUNBM2IsRUFBQThpQixFQUFBOWlCLEVBRUF5bEIsRUFEQS94QixPQUNBb3lCLGtCQUFBLEVBQ0EsQ0FDQW5LLEVBQUF3SixLQUFBWSxNQUFBcEssRUFBQThKLEdBQUFBLEdBQUEsRUFDQXpsQixFQUFBbWxCLEtBQUFZLE1BQUEvbEIsRUFBQXlsQixHQUFBQSxHQUFBLElBZ0JBOUosRUFBQWtLLEVBQUFsSyxFQUNBM2IsRUFBQTZsQixFQUFBN2xCLEVBRUFnbUIsRUFBQXhJLEVBQUFyaEIsZUFBQSxLQUNBOHBCLEVBQUF6SSxFQUFBcmhCLGVBQUEsS0FDQStwQixFQUFBeEssR0FDQXlLLEVBQUE1SyxHQUNBUyxFQUFBdG9CLE9BRUFreUIsS0FDQXZJLEVBQUF1QixHQUFBTSxNQUVBdEQsRUFBQXNELEtBQ0E3QixFQUFBVixFQUFBdUMsSUFNQXhrQixJQUFBNmdCLEtBQ0E0SyxFQUFBMUssR0FDQXpiLEdBQUFxZCxFQUFBK0ksYUFBQVYsRUFBQXBLLE9BQ0F0YixHQUFBMmxCLEVBQUEsR0FBQSxHQUdBanJCLElBQUFnaEIsS0FDQXdLLEVBQUExSyxHQUNBRyxHQUFBMEIsRUFBQWdKLFlBQUFYLEVBQUFySyxNQUNBTSxHQUFBZ0ssRUFBQSxHQUFBLElBSUEsSUFLQVcsRUFMQUMsRUFBQXJyQixPQUFBNEQsT0FBQSxDQUNBNmYsU0FBQUEsR0FDQWlILEdBQUFOLEdBRUEsT0FBQUssRUFHQXpxQixPQUFBNEQsT0FBQSxHQUFBeW5CLElBQUFELEVBQUEsSUFBQUgsR0FBQUYsRUFBQSxJQUFBLEdBQUFLLEVBQUFKLEdBQUFGLEVBQUEsSUFBQSxHQUFBTSxFQUFBRSxXQUFBeEssRUFBQThKLGtCQUFBLEdBQUEsRUFBQSxhQUFBbkssRUFBQSxPQUFBM2IsRUFBQSxNQUFBLGVBQUEyYixFQUFBLE9BQUEzYixFQUFBLFNBQUFzbUIsSUFHQXByQixPQUFBNEQsT0FBQSxHQUFBeW5CLElBQUFmLEVBQUEsSUFBQVcsR0FBQUYsRUFBQWptQixFQUFBLEtBQUEsR0FBQXdsQixFQUFBVSxHQUFBRixFQUFBckssRUFBQSxLQUFBLEdBQUE2SixFQUFBZ0IsVUFBQSxHQUFBaEIsSUEyTEEsSUFRQWlCLEVBQUEsQ0FDQS9LLEtBQUEsUUFDQUYsTUFBQSxPQUNBQyxPQUFBLE1BQ0FGLElBQUEsVUFFQSxTQUFBbUwsRUFBQWhzQixHQUNBLE9BQUFBLEVBQUFYLFFBQUEseUJBQUEsU0FBQTRzQixHQUNBLE9BQUFGLEVBQUFFLEtBSUEsSUFBQUMsRUFBQSxDQUNBMXhCLE1BQUEsTUFDQTZwQixJQUFBLFNBRUEsU0FBQThILEVBQUFuc0IsR0FDQSxPQUFBQSxFQUFBWCxRQUFBLGFBQUEsU0FBQTRzQixHQUNBLE9BQUFDLEVBQUFELEtBb0NBLFNBQUFHLEVBQUFDLEdBQ0EsT0FBQXJELFdBQUFxRCxJQUFBLEVBYUEsU0FBQUMsRUFBQTdMLEdBQ0EsSUFYQUEsRUFDQThMLEVBVUFqTCxFQUFBSixFQUFBVCxHQUNBK0wsRUFWQSxDQUNBM0wsSUFBQXVMLEdBRkFHLEVBQUExSyxFQURBcEIsRUFZQUEsR0FYQTFoQixFQUFBMGhCLEdBQUEsSUFFQWdNLGdCQUNBM0wsTUFBQXNMLEVBQUFHLEVBQUFHLGtCQUNBM0wsT0FBQXFMLEVBQUFHLEVBQUFJLG1CQUNBM0wsS0FBQW9MLEVBQUFHLEVBQUFLLGtCQU9BQyxFQUFBLFNBQUE5SyxFQUFBdEIsR0FDQXFNLEVBQUEzSyxFQUFBMUIsR0FDQVEsRUFBQVIsRUFBQWtMLFlBQUFhLEVBQUExTCxNQUNBeGIsRUFBQW1iLEVBQUFpTCxhQUFBYyxFQUFBekwsT0FhQSxPQUpBOEwsR0FBQSxHQUFBdkwsRUFBQXlMLFlBQUF0TSxFQUFBaUwsZUFDQXBtQixFQUFBZ2MsRUFBQXlMLFlBQUFQLEVBQUF6TCxRQUdBLENBQ0FGLElBQUFnTSxFQUFBLEVBQUFwTSxFQUFBdUMsVUFDQWxDLE1BQ0FMLEVBQUFzQyxXQUFBeUosRUFBQXhMLEtBQUF3TCxFQUFBMUwsTUFDQStMLEVBQUF2TCxFQUFBMEwsV0FBQS9MLEVBQUE2TCxFQUFBck0sRUFBQTJDLFlBQUFuQyxFQUNBRixPQUFBOEwsRUFBQXZMLEVBQUF5TCxZQUFBem5CLEVBQUFtYixFQUFBNEMsYUFBQS9kLEVBQ0EwYixLQUFBNkwsRUFBQUMsRUFBQXJNLEVBQUFzQyxZQUlBLFNBQUE5b0IsRUFBQXNDLEVBQUEwd0IsR0FFQSxJQUFBQyxFQUFBQyxRQUFBRixFQUFBRyxhQUFBSCxFQUFBRyxjQUFBM0osTUFFQSxHQUFBbG5CLEVBQUF0QyxTQUFBZ3pCLEdBQ0EsT0FBQSxFQUVBLEdBQUFDLEVBQUEsQ0FDQSxJQUFBbm9CLEVBQUFrb0IsRUFFQSxFQUFBLENBQ0EsR0FBQWxvQixHQUFBeEksRUFBQTh3QixXQUFBdG9CLEdBQ0EsT0FBQSxFQUlBQSxFQUFBQSxFQUFBeWUsWUFBQXplLEVBQUEwZSxXQUNBMWUsR0FJQSxPQUFBLEVBR0EsU0FBQXVvQixFQUFBNU0sR0FDQSxPQUFBbGdCLE9BQUE0RCxPQUFBLEdBQUFzYyxFQUFBLENBQ0FNLEtBQUFOLEVBQUFPLEVBQ0FKLElBQUFILEVBQUFwYixFQUNBd2IsTUFBQUosRUFBQU8sRUFBQVAsRUFBQUMsTUFDQUksT0FBQUwsRUFBQXBiLEVBQUFvYixFQUFBRSxTQUlBLFNBQUEyTSxFQUFBOU0sRUFBQStNLEdBQ0EsT0FBQUEsSUFBQWpKLEVBQUErSSxHQTVHQWhNLEVBQUFKLEVBNEdBVCxHQTNHQXFELEVBQUF4QyxFQUFBd0MsZUFDQW5ELEVBQUFXLEVBQUEwTCxXQUNBcE0sRUFBQVUsRUFBQXlMLFlBSUFqSixHQUFBLG1CQUFBL21CLEtBQUEwd0IsVUFBQTVPLFlBQ0E4QixFQUFBbUQsRUFBQW5ELE1BQ0FDLEVBQUFrRCxFQUFBbEQsUUFHQSxDQUNBRCxNQUFBQSxFQUNBQyxPQUFBQSxFQUNBSyxFQUFBLEVBQ0EzYixFQUFBLEtBNEZBdWMsRUFBQTJMLEdBQUFoTixFQUFBZ04sR0FBQUYsR0F4RkE3TSxFQXdGQXdCLEVBQUF4QixHQXZGQWEsRUFBQUosRUFBQVQsR0FDQWlOLEVBQUFyTSxFQUFBWixJQUNBa04sRUFBQWxMLEVBQUFSLEVBQUF4QixHQUFBYSxJQUNBVixPQUFBNkosS0FBQW1ELElBQUFELEVBQUEvTSxPQUFBVSxFQUFBeUwsYUFDQVksRUFBQWhOLE1BQUE4SixLQUFBbUQsSUFBQUQsRUFBQWhOLE1BQUFXLEVBQUEwTCxZQUNBVyxFQUFBMU0sR0FBQXlNLEVBQUFuTSxXQUNBb00sRUFBQXJvQixHQUFBb29CLEVBQUFqTSxVQUNBa00sSUFSQSxJQUFBbE4sRUFDQWEsRUFDQW9NLEVBQ0FDLEVBdkJBck0sRUFDQXdDLEVBQ0FuRCxFQUNBQyxFQWdJQSxTQUFBaU4sRUFBQXBOLEVBQUFxTixFQUFBQyxHQUNBLElBbEJBdE4sRUFDQTZELEVBRUEwSixFQWVBQyxFQUFBLG9CQUFBSCxHQWpCQXhKLEVBQUFaLEVBREFqRCxFQWtCQUEsR0FiQWtCLEVBRkFxTSxFQURBLEdBQUEsQ0FBQSxXQUFBLFNBQUFoa0IsUUFBQWpMLEVBQUEwaEIsR0FBQXdELFdBQ0FwQyxFQUFBcEIsR0FBQXlELEdBQUF6RCxHQUFBQSxHQU9BNkQsRUFBQTBELE9BQUEsU0FBQXdGLEdBQ0EsT0FBQTdMLEVBQUE2TCxJQUFBdnpCLEVBQUF1ekIsRUFBQVEsS0FMQSxJQVlBLEdBQUFsMEIsT0FBQWcwQixHQUNBeEosRUFBQSxHQUFBeHFCLE9BQUFtMEIsRUFBQSxDQUFBRixJQUNBRyxFQUFBNUosRUFBQSxHQUNBNkosRUFBQTdKLEVBQUExUyxPQUFBLFNBQUF3YyxFQUFBWixHQUNBLElBQUE5TSxFQUFBNk0sRUFBQTlNLEVBQUErTSxHQUNBYSxFQUFBL0IsRUFBQXpLLEVBQUEyTCxHQUFBQSxFQUFBdkwsRUFBQXhCLElBS0EsT0FKQTJOLEVBQUF2TixJQUFBNEosS0FBQW1ELElBQUFsTixFQUFBRyxJQUFBd04sRUFBQXhOLElBQUF1TixFQUFBdk4sS0FDQXVOLEVBQUF0TixNQUFBMkosS0FBQTZELElBQUE1TixFQUFBSSxNQUFBdU4sRUFBQXZOLE1BQUFzTixFQUFBdE4sT0FDQXNOLEVBQUFyTixPQUFBMEosS0FBQTZELElBQUE1TixFQUFBSyxPQUFBc04sRUFBQXROLE9BQUFxTixFQUFBck4sUUFDQXFOLEVBQUFwTixLQUFBeUosS0FBQW1ELElBQUFsTixFQUFBTSxLQUFBcU4sRUFBQXJOLEtBQUFvTixFQUFBcE4sTUFDQW9OLEdBQ0FiLEVBQUE5TSxFQUFBeU4sSUFLQSxPQUpBQyxFQUFBeE4sTUFBQXdOLEVBQUFyTixNQUFBcU4sRUFBQW5OLEtBQ0FtTixFQUFBdk4sT0FBQXVOLEVBQUFwTixPQUFBb04sRUFBQXROLElBQ0FzTixFQUFBbE4sRUFBQWtOLEVBQUFuTixLQUNBbU4sRUFBQTdvQixFQUFBNm9CLEVBQUF0TixJQUNBc04sRUFHQSxTQUFBSSxLQUNBLE1BQUEsQ0FDQTFOLElBQUEsRUFDQUMsTUFBQSxFQUNBQyxPQUFBLEVBQ0FDLEtBQUEsR0FJQSxTQUFBd04sRUFBQUMsR0FDQSxPQUFBanVCLE9BQUE0RCxPQUFBLEdBQUFtcUIsS0FBQSxHQUFBRSxHQUdBLFNBQUFDLEVBQUE1ekIsRUFBQXVkLEdBQ0EsT0FBQUEsRUFBQXpHLE9BQUEsU0FBQStjLEVBQUFyVyxHQUVBLE9BREFxVyxFQUFBclcsR0FBQXhkLEVBQ0E2ekIsR0FDQSxJQUdBLFNBQUFDLEdBQUE5SCxFQUFBamMsUUFDQSxJQUFBQSxJQUNBQSxFQUFBLElBR0EsSUF1Q0FnSCxFQXRDQWdkLEVBREFoa0IsRUFDQTdLLFVBQ0FBLE9BQUEsSUFBQTZ1QixFQUFBL0gsRUFBQTltQixVQUFBNnVCLEVBQ0FDLEVBSEFqa0IsRUFHQWlqQixTQUNBQSxPQUFBLElBQUFnQixFQUFBeEssRUFBQXdLLEVBQ0FDLEVBTEFsa0IsRUFLQWtqQixhQUNBQSxPQUFBLElBQUFnQixFQUFBeEssRUFBQXdLLEVBQ0FDLEVBUEFua0IsRUFPQW9rQixlQUNBQSxPQUFBLElBQUFELEVBQUF4SyxFQUFBd0ssRUFDQUUsRUFUQXJrQixFQVNBc2tCLFlBQ0FBLE9BQUEsSUFBQUQsR0FBQUEsRUFDQUUsRUFYQXZrQixFQVdBd2tCLFFBQ0FBLE9BQUEsSUFBQUQsRUFBQSxFQUFBQSxFQUNBWCxFQUFBRCxFQUFBLGlCQUFBYSxFQUFBQSxFQUFBWCxFQUFBVyxFQUFBakwsSUFDQWtMLEVBQUFMLElBQUF6SyxFQUFBQyxFQUFBRCxFQUNBK0ssRUFBQXpJLEVBQUFHLFNBQUF4QyxVQUNBdUcsRUFBQWxFLEVBQUF5QyxNQUFBL0UsT0FDQS9ELEVBQUFxRyxFQUFBRyxTQUFBa0ksRUFBQUcsRUFBQUwsR0FDQU8sRUFBQTNCLEVBQUFsTSxFQUFBbEIsR0FBQUEsRUFBQUEsRUFBQWdILGdCQUFBeEYsRUFBQTZFLEVBQUFHLFNBQUF6QyxRQUFBc0osRUFBQUMsR0FDQTBCLEVBQUFqUCxFQUFBK08sR0FDQUcsRUFBQXhGLEVBQUEsQ0FDQXpGLFVBQUFnTCxFQUNBaFAsUUFBQXVLLEVBQ0E3RSxTQUFBLFdBQ0FubUIsVUFBQUEsSUFFQTJ2QixFQUFBckMsRUFBQTlzQixPQUFBNEQsT0FBQSxHQUFBNG1CLEVBQUEsR0FBQTBFLElBQ0FFLEVBQUFYLElBQUF6SyxFQUFBbUwsRUFBQUYsRUFHQUksRUFBQSxDQUNBaFAsSUFBQTJPLEVBQUEzTyxJQUFBK08sRUFBQS9PLElBQUE0TixFQUFBNU4sSUFDQUUsT0FBQTZPLEVBQUE3TyxPQUFBeU8sRUFBQXpPLE9BQUEwTixFQUFBMU4sT0FDQUMsS0FBQXdPLEVBQUF4TyxLQUFBNE8sRUFBQTVPLEtBQUF5TixFQUFBek4sS0FDQUYsTUFBQThPLEVBQUE5TyxNQUFBME8sRUFBQTFPLE1BQUEyTixFQUFBM04sT0FFQWdQLEVBQUFoSixFQUFBRSxjQUFBblYsT0FXQSxPQVRBb2QsSUFBQXpLLEdBQUFzTCxJQUNBamUsRUFBQWllLEVBQUE5dkIsR0FDQVEsT0FBQTZYLEtBQUF3WCxHQUFBdFksUUFBQSxTQUFBZSxHQUNBLElBQUF5WCxFQUFBLEdBQUEsQ0FBQWpQLEdBQUFDLElBQUEvVyxRQUFBc08sR0FBQSxHQUFBLEVBQ0EwWCxFQUFBLEdBQUEsQ0FBQW5QLEdBQUFFLElBQUEvVyxRQUFBc08sR0FBQSxJQUFBLElBQ0F1WCxFQUFBdlgsSUFBQXpHLEVBQUFtZSxHQUFBRCxLQUlBRixFQXdMQSxTQUFBSSxHQUFBM0IsRUFBQXh6QixFQUFBOHlCLEdBQ0EsT0FBQW5ELEtBQUFtRCxJQUFBVSxFQUFBN0QsS0FBQTZELElBQUF4ekIsRUFBQTh5QixJQXlNQSxTQUFBc0MsRUFBQTVOLEVBQUE1QixFQUFBeVAsR0FRQSxZQVBBLElBQUFBLElBQ0FBLEVBQUEsQ0FDQWxQLEVBQUEsRUFDQTNiLEVBQUEsSUFJQSxDQUNBdWIsSUFBQXlCLEVBQUF6QixJQUFBSCxFQUFBRSxPQUFBdVAsRUFBQTdxQixFQUNBd2IsTUFBQXdCLEVBQUF4QixNQUFBSixFQUFBQyxNQUFBd1AsRUFBQWxQLEVBQ0FGLE9BQUF1QixFQUFBdkIsT0FBQUwsRUFBQUUsT0FBQXVQLEVBQUE3cUIsRUFDQTBiLEtBQUFzQixFQUFBdEIsS0FBQU4sRUFBQUMsTUFBQXdQLEVBQUFsUCxHQUlBLFNBQUFtUCxHQUFBOU4sR0FDQSxNQUFBLENBQUF6QixHQUFBQyxHQUFBQyxHQUFBQyxJQUFBcUYsS0FBQSxTQUFBZ0ssR0FDQSxPQUFBLEdBQUEvTixFQUFBK04sS0FpQ0EsSUFRQTVKLEVBQUEsQ0ExaUNBLENBQ0ExWSxLQUFBLGlCQUNBa2EsU0FBQSxFQUNBRixNQUFBLFFBQ0FuQixHQUFBLGFBQ0EwQixPQXhDQSxTQUFBRixHQUNBLElBQUF0QixFQUFBc0IsRUFBQXRCLE1BQ0FoTSxFQUFBc04sRUFBQXROLFNBQ0FqUSxFQUFBdWQsRUFBQXZkLFFBQ0F5bEIsRUFBQXpsQixFQUFBZ1ksT0FDQUEsT0FBQSxJQUFBeU4sR0FBQUEsRUFDQUMsRUFBQTFsQixFQUFBMmxCLE9BQ0FBLE9BQUEsSUFBQUQsR0FBQUEsRUFDQXYzQixFQUFBa29CLEVBQUE0RixFQUFBRyxTQUFBekMsUUFDQWdELEVBQUEsR0FBQTF0QixPQUFBZ3RCLEVBQUFVLGNBQUEvQyxVQUFBcUMsRUFBQVUsY0FBQWhELFFBWUEsT0FWQTNCLEdBQ0EyRSxFQUFBalEsUUFBQSxTQUFBb00sR0FDQUEsRUFBQTlvQixpQkFBQSxTQUFBaWdCLEVBQUFzTyxPQUFBVyxLQUlBeUcsR0FDQXgzQixFQUFBNkIsaUJBQUEsU0FBQWlnQixFQUFBc08sT0FBQVcsR0FHQSxXQUNBbEgsR0FDQTJFLEVBQUFqUSxRQUFBLFNBQUFvTSxHQUNBQSxFQUFBOE0sb0JBQUEsU0FBQTNWLEVBQUFzTyxPQUFBVyxLQUlBeUcsR0FDQXgzQixFQUFBeTNCLG9CQUFBLFNBQUEzVixFQUFBc08sT0FBQVcsS0FZQXJnQixLQUFBLElBNEZBLENBQ0FxRSxLQUFBLGdCQUNBa2EsU0FBQSxFQUNBRixNQUFBLE9BQ0FuQixHQXBCQSxTQUFBd0IsR0FDQSxJQUFBdEIsRUFBQXNCLEVBQUF0QixNQUNBL1ksRUFBQXFhLEVBQUFyYSxLQUtBK1ksRUFBQUUsY0FBQWpaLEdBQUFtYyxFQUFBLENBQ0F6RixVQUFBcUMsRUFBQXlDLE1BQUE5RSxVQUNBaEUsUUFBQXFHLEVBQUF5QyxNQUFBL0UsT0FDQTJCLFNBQUEsV0FDQW5tQixVQUFBOG1CLEVBQUE5bUIsYUFVQTBKLEtBQUEsSUErSEEsQ0FDQXFFLEtBQUEsZ0JBQ0FrYSxTQUFBLEVBQ0FGLE1BQUEsY0FDQW5CLEdBbkRBLFNBQUFxQyxHQUNBLElBUUF5SCxFQVJBNUosRUFBQW1DLEVBQUFuQyxNQUNBamMsRUFBQW9lLEVBQUFwZSxRQUNBOGxCLEVBQUE5bEIsRUFBQW9nQixnQkFDQUEsT0FBQSxJQUFBMEYsR0FBQUEsRUFDQUMsRUFBQS9sQixFQUFBcWdCLFNBQ0FBLE9BQUEsSUFBQTBGLEdBQUFBLEVBRUEsZUFBQWhTLEVBQUFzSixJQUFBQyxXQUNBdUksRUFBQTN4QixFQUFBK25CLEVBQUFHLFNBQUF6QyxRQUFBa00sb0JBQUEsR0FFQXhGLEdBQUEsQ0FBQSxZQUFBLE1BQUEsUUFBQSxTQUFBLFFBQUE3RSxLQUFBLFNBQUF3SyxHQUNBLE9BQUEsR0FBQUgsRUFBQTFtQixRQUFBNm1CLE1BRUFsMkIsUUFBQWlmLEtBQUEsQ0FBQSxvRUFBQSxpRUFBQSxPQUFBLHFFQUFBLGtFQUFBLHFFQUFBLDJDQUFBLE9BQUEscUVBQUEsdUVBQUFqUixLQUFBLE9BSUEsSUFBQWtqQixFQUFBLENBQ0E3ckIsVUFBQWdtQixHQUFBYyxFQUFBOW1CLFdBQ0F3a0IsT0FBQXNDLEVBQUFHLFNBQUF6QyxPQUNBd0csV0FBQWxFLEVBQUF5QyxNQUFBL0UsT0FDQXlHLGdCQUFBQSxHQUdBLE1BQUFuRSxFQUFBRSxjQUFBMEksZ0JBQ0E1SSxFQUFBSyxPQUFBM0MsT0FBQWhrQixPQUFBNEQsT0FBQSxHQUFBMGlCLEVBQUFLLE9BQUEzQyxPQUFBLEdBQUFxRyxFQUFBcnFCLE9BQUE0RCxPQUFBLEdBQUF5bkIsRUFBQSxDQUNBL0ksUUFBQWdFLEVBQUFFLGNBQUEwSSxjQUNBekwsU0FBQTZDLEVBQUFqYyxRQUFBc2IsU0FDQStFLFNBQUFBLE9BSUEsTUFBQXBFLEVBQUFFLGNBQUE4SixRQUNBaEssRUFBQUssT0FBQTJKLE1BQUF0d0IsT0FBQTRELE9BQUEsR0FBQTBpQixFQUFBSyxPQUFBMkosTUFBQSxHQUFBakcsRUFBQXJxQixPQUFBNEQsT0FBQSxHQUFBeW5CLEVBQUEsQ0FDQS9JLFFBQUFnRSxFQUFBRSxjQUFBOEosTUFDQTdNLFNBQUEsV0FDQWlILFVBQUEsT0FJQXBFLEVBQUFJLFdBQUExQyxPQUFBaGtCLE9BQUE0RCxPQUFBLEdBQUEwaUIsRUFBQUksV0FBQTFDLE9BQUEsQ0FDQXVNLHdCQUFBakssRUFBQTltQixhQVVBMEosS0FBQSxJQStFQSxDQUNBcUUsS0FBQSxjQUNBa2EsU0FBQSxFQUNBRixNQUFBLFFBQ0FuQixHQTlFQSxTQUFBd0IsR0FDQSxJQUFBdEIsRUFBQXNCLEVBQUF0QixNQUNBdG1CLE9BQUE2WCxLQUFBeU8sRUFBQUcsVUFBQTFQLFFBQUEsU0FBQXhKLEdBQ0EsSUFBQWpPLEVBQUFnbkIsRUFBQUssT0FBQXBaLElBQUEsR0FDQW1aLEVBQUFKLEVBQUFJLFdBQUFuWixJQUFBLEdBQ0EwUyxFQUFBcUcsRUFBQUcsU0FBQWxaLEdBRUE4VCxFQUFBcEIsSUFBQXNCLEVBQUF0QixLQU9BamdCLE9BQUE0RCxPQUFBcWMsRUFBQTNnQixNQUFBQSxHQUNBVSxPQUFBNlgsS0FBQTZPLEdBQUEzUCxRQUFBLFNBQUF4SixHQUNBLElBQUFqVCxFQUFBb3NCLEVBQUFuWixJQUVBLElBQUFqVCxFQUNBMmxCLEVBQUF1USxnQkFBQWpqQixHQUVBMFMsRUFBQXdRLGFBQUFsakIsR0FBQSxJQUFBalQsRUFBQSxHQUFBQSxTQTBEQXd0QixPQXBEQSxTQUFBSSxHQUNBLElBQUE1QixFQUFBNEIsRUFBQTVCLE1BQ0FvSyxFQUFBLENBQ0ExTSxPQUFBLENBQ0FQLFNBQUE2QyxFQUFBamMsUUFBQXNiLFNBQ0FuRixLQUFBLElBQ0FILElBQUEsSUFDQWtJLE9BQUEsS0FFQStILE1BQUEsQ0FDQTdNLFNBQUEsWUFFQVEsVUFBQSxJQVFBLE9BTkFqa0IsT0FBQTRELE9BQUEwaUIsRUFBQUcsU0FBQXpDLE9BQUExa0IsTUFBQW94QixFQUFBMU0sUUFFQXNDLEVBQUFHLFNBQUE2SixPQUNBdHdCLE9BQUE0RCxPQUFBMGlCLEVBQUFHLFNBQUE2SixNQUFBaHhCLE1BQUFveEIsRUFBQUosT0FHQSxXQUNBdHdCLE9BQUE2WCxLQUFBeU8sRUFBQUcsVUFBQTFQLFFBQUEsU0FBQXhKLEdBQ0EsSUFBQTBTLEVBQUFxRyxFQUFBRyxTQUFBbFosR0FDQW1aLEVBQUFKLEVBQUFJLFdBQUFuWixJQUFBLEdBR0FqTyxFQUZBVSxPQUFBNlgsS0FBQXlPLEVBQUFLLE9BQUExbEIsZUFBQXNNLEdBQUErWSxFQUFBSyxPQUFBcFosR0FBQW1qQixFQUFBbmpCLElBRUE2RCxPQUFBLFNBQUE5UixFQUFBK3dCLEdBRUEsT0FEQS93QixFQUFBK3dCLEdBQUEsR0FDQS93QixHQUNBLElBRUEraEIsRUFBQXBCLElBQUFzQixFQUFBdEIsS0FPQWpnQixPQUFBNEQsT0FBQXFjLEVBQUEzZ0IsTUFBQUEsR0FDQVUsT0FBQTZYLEtBQUE2TyxHQUFBM1AsUUFBQSxTQUFBNFosR0FDQTFRLEVBQUF1USxnQkFBQUcsVUFhQTdMLFNBQUEsQ0FBQSxrQkErQ0EsQ0FDQXZYLEtBQUEsU0FDQWthLFNBQUEsRUFDQUYsTUFBQSxPQUNBekMsU0FBQSxDQUFBLGlCQUNBc0IsR0E1QkEsU0FBQThCLEdBQ0EsSUFBQTVCLEVBQUE0QixFQUFBNUIsTUFDQWpjLEVBQUE2ZCxFQUFBN2QsUUFDQWtELEVBQUEyYSxFQUFBM2EsS0FDQXFqQixFQUFBdm1CLEVBQUFnSCxPQUNBQSxPQUFBLElBQUF1ZixFQUFBLENBQUEsRUFBQSxHQUFBQSxFQUNBMW5CLEVBQUFrYixFQUFBaFQsT0FBQSxTQUFBK1MsRUFBQTNrQixHQTNCQSxJQUFBQSxFQUFBdXBCLEVBQUExWCxFQUNBc1ksRUFDQWtILEVBRUFqSixFQU1Ba0osRUFDQUMsRUFrQkEsT0FEQTVNLEVBQUEza0IsSUE1QkFBLEVBNEJBQSxFQTVCQXVwQixFQTRCQXpDLEVBQUF5QyxNQTVCQTFYLEVBNEJBQSxFQTNCQXNZLEVBQUFuRSxHQUFBaG1CLEdBQ0FxeEIsRUFBQSxHQUFBLENBQUFyUSxHQUFBSCxJQUFBN1csUUFBQW1nQixJQUFBLEVBQUEsRUFFQS9CLEVBQUEsbUJBQUF2VyxFQUFBQSxFQUFBclIsT0FBQTRELE9BQUEsR0FBQW1sQixFQUFBLENBQ0F2cEIsVUFBQUEsS0FDQTZSLEVBSUF5ZixHQUhBQSxFQUFBbEosRUFBQSxLQUdBLEVBQ0FtSixJQUhBQSxFQUFBbkosRUFBQSxLQUdBLEdBQUFpSixFQUNBLEdBQUEsQ0FBQXJRLEdBQUFGLElBQUE5VyxRQUFBbWdCLEdBQUEsQ0FDQWxKLEVBQUFzUSxFQUNBanNCLEVBQUFnc0IsR0FDQSxDQUNBclEsRUFBQXFRLEVBQ0Foc0IsRUFBQWlzQixJQVlBNU0sR0FDQSxJQUNBNk0sRUFBQTluQixFQUFBb2QsRUFBQTltQixXQUNBaWhCLEVBQUF1USxFQUFBdlEsRUFDQTNiLEVBQUFrc0IsRUFBQWxzQixFQUVBLE1BQUF3aEIsRUFBQUUsY0FBQTBJLGdCQUNBNUksRUFBQUUsY0FBQTBJLGNBQUF6TyxHQUFBQSxFQUNBNkYsRUFBQUUsY0FBQTBJLGNBQUFwcUIsR0FBQUEsR0FHQXdoQixFQUFBRSxjQUFBalosR0FBQXJFLElBMmFBLENBQ0FxRSxLQUFBLE9BQ0FrYSxTQUFBLEVBQ0FGLE1BQUEsT0FDQW5CLEdBNUhBLFNBQUF3QixHQUNBLElBQUF0QixFQUFBc0IsRUFBQXRCLE1BQ0FqYyxFQUFBdWQsRUFBQXZkLFFBQ0FrRCxFQUFBcWEsRUFBQXJhLEtBRUEsSUFBQStZLEVBQUFFLGNBQUFqWixHQUFBMGpCLE1BQUEsQ0FvQ0EsSUFoQ0EsSUFBQUMsRUFBQTdtQixFQUFBMGYsU0FDQW9ILE9BQUEsSUFBQUQsR0FBQUEsRUFDQUUsRUFBQS9tQixFQUFBZ25CLFFBQ0FDLE9BQUEsSUFBQUYsR0FBQUEsRUFDQUcsRUFBQWxuQixFQUFBbW5CLG1CQUNBM0MsRUFBQXhrQixFQUFBd2tCLFFBQ0F2QixFQUFBampCLEVBQUFpakIsU0FDQUMsRUFBQWxqQixFQUFBa2pCLGFBQ0FvQixFQUFBdGtCLEVBQUFza0IsWUFDQThDLEVBQUFwbkIsRUFBQXFuQixlQUNBQSxPQUFBLElBQUFELEdBQUFBLEVBQ0FFLEVBQUF0bkIsRUFBQXNuQixzQkFDQUMsRUFBQXRMLEVBQUFqYyxRQUFBN0ssVUFDQW1xQixFQUFBbkUsR0FBQW9NLEdBRUFKLEVBQUFELElBREE1SCxJQUFBaUksSUFDQUYsRUFBQSxDQUFBbEcsRUFBQW9HLElBakNBLFNBQUFweUIsR0FDQSxHQUFBZ21CLEdBQUFobUIsS0FBQW1rQixFQUNBLE1BQUEsR0FHQSxJQUFBa08sRUFBQXJHLEVBQUFoc0IsR0FDQSxNQUFBLENBQUFtc0IsRUFBQW5zQixHQUFBcXlCLEVBQUFsRyxFQUFBa0csSUEyQkFDLENBQUFGLElBQ0F4TixFQUFBLENBQUF3TixHQUFBdDRCLE9BQUFrNEIsR0FBQXBnQixPQUFBLFNBQUErUyxFQUFBM2tCLEdBQ0EsT0FBQTJrQixFQUFBN3FCLE9BQUFrc0IsR0FBQWhtQixLQUFBbWtCLEVBckVBLFNBQUEyQyxFQUFBamMsUUFDQSxJQUFBQSxJQUNBQSxFQUFBLElBR0EsSUFDQTdLLEVBREE2SyxFQUNBN0ssVUFDQTh0QixFQUZBampCLEVBRUFpakIsU0FDQUMsRUFIQWxqQixFQUdBa2pCLGFBQ0FzQixFQUpBeGtCLEVBSUF3a0IsUUFDQTZDLEVBTEFybkIsRUFLQXFuQixlQUNBSyxFQU5BMW5CLEVBTUFzbkIsc0JBQ0FBLE9BQUEsSUFBQUksRUFBQTNOLEVBQUEyTixFQUNBbkksRUFBQUosR0FBQWhxQixHQU9Bd3lCLEdBTkFwSSxFQUFBOEgsRUFBQXhOLEVBQUFBLEVBQUFzRCxPQUFBLFNBQUFob0IsR0FDQSxPQUFBZ3FCLEdBQUFocUIsS0FBQW9xQixJQUNBaEcsR0FBQTRELE9BQUEsU0FBQWhvQixHQUNBLE9BQUEsR0FBQW15QixFQUFBbm9CLFFBQUFoSyxLQUdBNFIsT0FBQSxTQUFBK1MsRUFBQTNrQixHQU9BLE9BTkEya0IsRUFBQTNrQixHQUFBNHVCLEdBQUE5SCxFQUFBLENBQ0E5bUIsVUFBQUEsRUFDQTh0QixTQUFBQSxFQUNBQyxhQUFBQSxFQUNBc0IsUUFBQUEsSUFDQXJKLEdBQUFobUIsSUFDQTJrQixHQUNBLElBQ0EsT0FBQW5rQixPQUFBNlgsS0FBQW1hLEdBQUFuTixLQUFBLFNBQUF2dEIsRUFBQTBKLEdBQ0EsT0FBQWd4QixFQUFBMTZCLEdBQUEwNkIsRUFBQWh4QixLQXVDQWl4QixDQUFBM0wsRUFBQSxDQUNBOW1CLFVBQUFBLEVBQ0E4dEIsU0FBQUEsRUFDQUMsYUFBQUEsRUFDQXNCLFFBQUFBLEVBQ0E2QyxlQUFBQSxFQUNBQyxzQkFBQUEsSUFDQW55QixJQUNBLElBQ0EweUIsRUFBQTVMLEVBQUF5QyxNQUFBOUUsVUFDQXVHLEVBQUFsRSxFQUFBeUMsTUFBQS9FLE9BQ0FtTyxFQUFBLElBQUEzTixJQUNBNE4sR0FBQSxFQUNBQyxFQUFBak8sRUFBQSxHQUVBbnRCLEVBQUEsRUFBQUEsRUFBQW10QixFQUFBeHNCLE9BQUFYLElBQUEsQ0FDQSxJQUFBdUksRUFBQTRrQixFQUFBbnRCLEdBRUFxN0IsRUFBQTlNLEdBQUFobUIsR0FFQSt5QixFQUFBL0ksR0FBQWhxQixLQUFBeEYsR0FDQXc0QixFQUFBLEdBQUEsQ0FBQW5TLEdBQUFFLElBQUEvVyxRQUFBOG9CLEdBQ0F0SSxFQUFBd0ksRUFBQSxRQUFBLFNBQ0ExUSxFQUFBc00sR0FBQTlILEVBQUEsQ0FDQTltQixVQUFBQSxFQUNBOHRCLFNBQUFBLEVBQ0FDLGFBQUFBLEVBQ0FvQixZQUFBQSxFQUNBRSxRQUFBQSxJQUVBNEQsRUFBQUQsRUFBQUQsRUFBQWpTLEdBQUFFLEdBQUErUixFQUFBaFMsR0FBQUYsR0FFQTZSLEVBQUFsSSxHQUFBUSxFQUFBUixLQUNBeUksRUFBQWpILEVBQUFpSCxJQUdBLElBQUFDLEVBQUFsSCxFQUFBaUgsR0FDQUUsRUFBQSxHQVVBLEdBUkF4QixHQUNBd0IsRUFBQTdzQixLQUFBZ2MsRUFBQXdRLElBQUEsR0FHQWhCLEdBQ0FxQixFQUFBN3NCLEtBQUFnYyxFQUFBMlEsSUFBQSxFQUFBM1EsRUFBQTRRLElBQUEsR0FHQUMsRUFBQUMsTUFBQSxTQUFBQyxHQUNBLE9BQUFBLElBQ0EsQ0FDQVIsRUFBQTd5QixFQUNBNHlCLEdBQUEsRUFDQSxNQUdBRCxFQUFBM2dCLElBQUFoUyxFQUFBbXpCLEdBR0EsR0FBQVAsRUFxQkEsSUFuQkEsSUFFQVUsRUFBQSxTQUFBMTVCLEdBQ0EsSUFBQTI1QixFQUFBM08sRUFBQTRELEtBQUEsU0FBQXhvQixHQUNBLElBQUFtekIsRUFBQVIsRUFBQTV4QixJQUFBZixHQUVBLEdBQUFtekIsRUFDQSxPQUFBQSxFQUFBN29CLE1BQUEsRUFBQTFRLEdBQUF3NUIsTUFBQSxTQUFBQyxHQUNBLE9BQUFBLE1BS0EsR0FBQUUsRUFFQSxPQURBVixFQUFBVSxFQUNBLFNBSUEzNUIsRUFuQkFzNEIsRUFBQSxFQUFBLEVBbUJBLEVBQUF0NEIsRUFBQUEsSUFBQSxDQUdBLEdBQUEsVUFGQTA1QixFQUFBMTVCLEdBRUEsTUFJQWt0QixFQUFBOW1CLFlBQUE2eUIsSUFDQS9MLEVBQUFFLGNBQUFqWixHQUFBMGpCLE9BQUEsRUFDQTNLLEVBQUE5bUIsVUFBQTZ5QixFQUNBL0wsRUFBQTBDLE9BQUEsS0FVQWpFLGlCQUFBLENBQUEsVUFDQTdiLEtBQUEsQ0FDQStuQixPQUFBLElBaUhBLENBQ0ExakIsS0FBQSxrQkFDQWthLFNBQUEsRUFDQUYsTUFBQSxPQUNBbkIsR0F6R0EsU0FBQXdCLEdBQ0EsSUEwQ0FvTCxFQUNBQyxFQUNBakosRUFDQTNZLEVBQ0F5YyxFQUNBVixFQUNBOEYsRUFDQUMsRUFDQUMsRUFHQUMsRUFDQUMsRUFJQUMsRUFDQUMsRUFDQUMsRUFNQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFNQUMsRUFFQUMsRUFFQUMsRUFNQUMsRUExRkFoTyxFQUFBc0IsRUFBQXRCLE1BQ0FqYyxFQUFBdWQsRUFBQXZkLFFBQ0FrRCxFQUFBcWEsRUFBQXJhLEtBQ0EyakIsRUFBQTdtQixFQUFBMGYsU0FDQW9ILE9BQUEsSUFBQUQsR0FBQUEsRUFDQUUsRUFBQS9tQixFQUFBZ25CLFFBQ0FDLE9BQUEsSUFBQUYsR0FBQUEsRUFDQTlELEVBQUFqakIsRUFBQWlqQixTQUNBQyxFQUFBbGpCLEVBQUFrakIsYUFDQW9CLEVBQUF0a0IsRUFBQXNrQixZQUNBRSxFQUFBeGtCLEVBQUF3a0IsUUFDQTBGLEVBQUFscUIsRUFBQW1xQixPQUNBQSxPQUFBLElBQUFELEdBQUFBLEVBQ0FFLEVBQUFwcUIsRUFBQXFxQixhQUNBQSxPQUFBLElBQUFELEVBQUEsRUFBQUEsRUFDQTNTLEVBQUFzTSxHQUFBOUgsRUFBQSxDQUNBZ0gsU0FBQUEsRUFDQUMsYUFBQUEsRUFDQXNCLFFBQUFBLEVBQ0FGLFlBQUFBLElBRUFoRixFQUFBbkUsR0FBQWMsRUFBQTltQixXQUNBb3FCLEVBQUFKLEdBQUFsRCxFQUFBOW1CLFdBQ0FtMUIsR0FBQS9LLEVBQ0FHLEVBQUFOLEdBQUFFLEdBQ0EwSCxFQWpDQSxNQWlDQXRILEVBakNBLElBQUEsSUFrQ0FtRixFQUFBNUksRUFBQUUsY0FBQTBJLGNBQ0FnRCxFQUFBNUwsRUFBQXlDLE1BQUE5RSxVQUNBdUcsRUFBQWxFLEVBQUF5QyxNQUFBL0UsT0FDQTRRLEVBQUEsbUJBQUFGLEVBQUFBLEVBQUExMEIsT0FBQTRELE9BQUEsR0FBQTBpQixFQUFBeUMsTUFBQSxDQUNBdnBCLFVBQUE4bUIsRUFBQTltQixhQUNBazFCLEVBQ0F4ckIsRUFBQSxDQUNBdVgsRUFBQSxFQUNBM2IsRUFBQSxHQUdBb3FCLElBSUFpQyxJQUNBNkIsRUFBQSxNQUFBakosRUFBQTFKLEdBQUFHLEdBQ0F5UyxFQUFBLE1BQUFsSixFQUFBeEosR0FBQUQsR0FDQTBKLEVBQUEsTUFBQUQsRUFBQSxTQUFBLFFBQ0ExWSxFQUFBNmQsRUFBQW5GLEdBQ0ErRCxFQUFBb0IsRUFBQW5GLEdBQUFqSSxFQUFBa1IsR0FDQTVGLEVBQUE4QixFQUFBbkYsR0FBQWpJLEVBQUFtUixHQUNBQyxFQUFBc0IsR0FBQWhLLEVBQUFSLEdBQUEsRUFBQSxFQUNBbUosRUFBQXZKLElBQUE1dkIsR0FBQWs0QixFQUFBbEksR0FBQVEsRUFBQVIsR0FDQW9KLEVBQUF4SixJQUFBNXZCLElBQUF3d0IsRUFBQVIsSUFBQWtJLEVBQUFsSSxHQUdBcUosRUFBQS9NLEVBQUFHLFNBQUE2SixNQUNBZ0QsRUFBQWtCLEdBQUFuQixFQUFBNVEsR0FBQTRRLEdBQUEsQ0FDQWxULE1BQUEsRUFDQUMsT0FBQSxHQUdBb1QsR0FEQUQsRUFBQWpOLEVBQUFFLGNBQUEsb0JBQUFGLEVBQUFFLGNBQUEsb0JBQUFxSSxRQUFBZCxNQUNBaUYsR0FDQVMsRUFBQUYsRUFBQU4sR0FNQVMsRUFBQWpFLEdBQUEsRUFBQXlDLEVBQUFsSSxHQUFBc0osRUFBQXRKLElBQ0EySixFQUFBZ0IsRUFBQXpDLEVBQUFsSSxHQUFBLEVBQUFrSixFQUFBUSxFQUFBRixFQUFBb0IsRUFBQXpCLEVBQUFPLEVBQUFGLEVBQUFvQixFQUNBaEIsRUFBQWUsR0FBQXpDLEVBQUFsSSxHQUFBLEVBQUFrSixFQUFBUSxFQUFBRCxFQUFBbUIsRUFBQXhCLEVBQUFNLEVBQUFELEVBQUFtQixFQUVBZCxHQURBRCxFQUFBdk4sRUFBQUcsU0FBQTZKLE9BQUE1TSxHQUFBNEMsRUFBQUcsU0FBQTZKLFFBQ0EsTUFBQXZHLEVBQUE4SixFQUFBclIsV0FBQSxFQUFBcVIsRUFBQXRSLFlBQUEsRUFBQSxFQUNBd1IsRUFBQXpOLEVBQUFFLGNBQUFuVixPQUFBaVYsRUFBQUUsY0FBQW5WLE9BQUFpVixFQUFBOW1CLFdBQUF1cUIsR0FBQSxFQUNBaUssRUFBQTlFLEVBQUFuRixHQUFBNEosRUFBQUksRUFBQUQsRUFDQUcsRUFBQS9FLEVBQUFuRixHQUFBNkosRUFBQUcsRUFDQUcsRUFBQXpFLEdBQUErRSxFQUFBdkssS0FBQTZELElBQUFBLEVBQUFrRyxHQUFBbEcsRUFBQXpjLEVBQUFtakIsRUFBQXZLLEtBQUFtRCxJQUFBQSxFQUFBNkcsR0FBQTdHLEdBQ0E4QixFQUFBbkYsR0FBQW1LLEVBQ0FockIsRUFBQTZnQixHQUFBbUssRUFBQTdpQixHQUdBaWdCLElBQ0E2QyxFQUFBLE1BQUFwSyxFQUFBMUosR0FBQUcsR0FFQTRULEVBQUEsTUFBQXJLLEVBQUF4SixHQUFBRCxHQVFBZ1UsRUFBQTdFLElBTkE0RSxFQUFBbkYsRUFBQW1DLElBRUF2UCxFQUFBcVMsR0FJQUUsRUFGQUEsRUFBQXZTLEVBQUFzUyxJQUlBbEYsRUFBQW1DLEdBQUFpRCxFQUNBcHJCLEVBQUFtb0IsR0FBQWlELEVBQUFELEdBR0EvTixFQUFBRSxjQUFBalosR0FBQXJFLElBU0E2YixpQkFBQSxDQUFBLFdBa0ZBLENBQ0F4WCxLQUFBLFFBQ0FrYSxTQUFBLEVBQ0FGLE1BQUEsT0FDQW5CLEdBbkZBLFNBQUF3QixHQUNBLElBQUFpTixFQWVBNUcsRUFDQXFGLEVBQ0F3QixFQUNBQyxFQUNBQyxFQUNBQyxFQUNBcEIsRUFDQXFCLEVBQ0FDLEVBR0FySCxFQUNBVixFQUNBZ0ksRUFDQS9qQixFQTNCQWlWLEVBQUFzQixFQUFBdEIsTUFDQS9ZLEVBQUFxYSxFQUFBcmEsS0FDQThsQixFQUFBL00sRUFBQUcsU0FBQTZKLE1BQ0FwQixFQUFBNUksRUFBQUUsY0FBQTBJLGNBQ0F2RixFQUFBbkUsR0FBQWMsRUFBQTltQixXQUNBZ3dCLEVBQUEvRixHQUFBRSxHQUVBSyxFQURBLEdBQUEsQ0FBQXhKLEdBQUFGLElBQUE5VyxRQUFBbWdCLEdBQ0EsU0FBQSxRQUVBMEosR0FBQW5FLElBSUFqQixFQUFBM0gsRUFBQUUsY0FBQWpaLEVBQUEsZUFBQXNoQixRQUNBeUUsRUFBQTdRLEdBQUE0USxHQUNBeUIsRUFBQSxNQUFBdEYsRUFBQW5QLEdBQUFHLEdBQ0F1VSxFQUFBLE1BQUF2RixFQUFBalAsR0FBQUQsR0FDQTBVLEVBQUExTyxFQUFBeUMsTUFBQTlFLFVBQUErRixHQUFBMUQsRUFBQXlDLE1BQUE5RSxVQUFBdUwsR0FBQU4sRUFBQU0sR0FBQWxKLEVBQUF5QyxNQUFBL0UsT0FBQWdHLEdBQ0FpTCxFQUFBL0YsRUFBQU0sR0FBQWxKLEVBQUF5QyxNQUFBOUUsVUFBQXVMLEdBRUEwRixHQURBckIsRUFBQW5RLEdBQUEyUCxJQUNBLE1BQUE3RCxFQUFBcUUsRUFBQTNJLGNBQUEsRUFBQTJJLEVBQUExSSxhQUFBLEVBQUEsRUFDQWdLLEVBQUFILEVBQUEsRUFBQUMsRUFBQSxFQUdBbkgsRUFBQUcsRUFBQTZHLEdBQ0ExSCxFQUFBOEgsRUFBQTVCLEVBQUF0SixHQUFBaUUsRUFBQThHLEdBRUExakIsRUFBQW9lLEdBQUEzQixFQURBc0gsRUFBQUYsRUFBQSxFQUFBNUIsRUFBQXRKLEdBQUEsRUFBQW1MLEVBQ0EvSCxHQUdBOUcsRUFBQUUsY0FBQWpaLEtBQUFzbkIsRUFBQSxJQURBckYsR0FDQW5lLEVBQUF3akIsRUFBQVEsYUFBQWhrQixFQUFBK2pCLEVBQUFQLEtBbURBL00sT0FoREEsU0FBQUksR0FDQSxJQUFBNUIsRUFBQTRCLEVBQUE1QixNQUNBamMsRUFBQTZkLEVBQUE3ZCxRQUNBa0QsRUFBQTJhLEVBQUEzYSxLQUNBK25CLEVBQUFqckIsRUFBQTRWLFFBQ0FvVCxPQUFBLElBQUFpQyxFQUFBLHNCQUFBQSxFQUNBMUcsRUFBQXZrQixFQUFBd2tCLFFBQ0FBLE9BQUEsSUFBQUQsRUFBQSxFQUFBQSxFQUVBLE1BQUF5RSxJQUtBLGlCQUFBQSxLQUNBQSxFQUFBL00sRUFBQUcsU0FBQXpDLE9BQUF1UixjQUFBbEMsTUFPQSxlQUFBalYsRUFBQXNKLElBQUFDLFdBQ0F0RyxFQUFBZ1MsSUFDQWw1QixRQUFBQyxNQUFBLENBQUEsc0VBQUEsc0VBQUEsY0FBQStOLEtBQUEsT0FJQTFPLEVBQUE2c0IsRUFBQUcsU0FBQXpDLE9BQUFxUCxJQVFBL00sRUFBQUcsU0FBQTZKLE1BQUErQyxFQUNBL00sRUFBQUUsY0FBQWpaLEVBQUEsZUFBQSxDQUNBc2hCLFFBQUFiLEVBQUEsaUJBQUFhLEVBQUFBLEVBQUFYLEVBQUFXLEVBQUFqTCxNQVRBLGVBQUF4RixFQUFBc0osSUFBQUMsVUFDQXh0QixRQUFBQyxNQUFBLENBQUEsc0VBQUEsWUFBQStOLEtBQUEsU0FtQkEyYyxTQUFBLENBQUEsaUJBQ0FDLGlCQUFBLENBQUEsb0JBc0RBLENBQ0F4WCxLQUFBLE9BQ0FrYSxTQUFBLEVBQ0FGLE1BQUEsT0FDQXhDLGlCQUFBLENBQUEsbUJBQ0FxQixHQWxDQSxTQUFBd0IsR0FDQSxJQUFBdEIsRUFBQXNCLEVBQUF0QixNQUNBL1ksRUFBQXFhLEVBQUFyYSxLQUNBMmtCLEVBQUE1TCxFQUFBeUMsTUFBQTlFLFVBQ0F1RyxFQUFBbEUsRUFBQXlDLE1BQUEvRSxPQUNBMkwsRUFBQXJKLEVBQUFFLGNBQUFnUCxnQkFDQUMsRUFBQXJILEdBQUE5SCxFQUFBLENBQ0FtSSxlQUFBLGNBRUFpSCxFQUFBdEgsR0FBQTlILEVBQUEsQ0FDQXFJLGFBQUEsSUFFQWdILEVBQUFqRyxFQUFBK0YsRUFBQXZELEdBQ0EwRCxFQUFBbEcsRUFBQWdHLEVBQUFsTCxFQUFBbUYsR0FDQWtHLEVBQUFqRyxHQUFBK0YsR0FDQUcsRUFBQWxHLEdBQUFnRyxHQUNBdFAsRUFBQUUsY0FBQWpaLEdBQUEsQ0FDQW9vQix5QkFBQUEsRUFDQUMsb0JBQUFBLEVBQ0FDLGtCQUFBQSxFQUNBQyxpQkFBQUEsR0FFQXhQLEVBQUFJLFdBQUExQyxPQUFBaGtCLE9BQUE0RCxPQUFBLEdBQUEwaUIsRUFBQUksV0FBQTFDLE9BQUEsQ0FDQStSLCtCQUFBRixFQUNBRyxzQkFBQUYsT0FjQUcsRUFBQW5RLEVBQUEsQ0FDQUcsaUJBQUFBLElBR0F2dUIsRUFBQXUrQixhQUFBQSxFQUNBditCLEVBQUF1dUIsaUJBQUFBLEVBQ0F2dUIsRUFBQTAyQixlQUFBQSxHQUNBMTJCLEVBQUFvdUIsZ0JBQUFBLEksMEVDaHdEQXB1QixFQUFBc1MsV0F1Q0EsU0FBQWtzQixHQUNBLElBQUFDLEVBQUFDLEVBQUFGLEdBQ0FHLEVBQUFGLEVBQUEsR0FDQUcsRUFBQUgsRUFBQSxHQUNBLE9BQUEsR0FBQUUsRUFBQUMsR0FBQSxFQUFBQSxHQTFDQTUrQixFQUFBNitCLFlBaURBLFNBQUFMLEdBQ0EsSUFBQU0sRUFjQXYvQixFQWJBay9CLEVBQUFDLEVBQUFGLEdBQ0FHLEVBQUFGLEVBQUEsR0FDQUcsRUFBQUgsRUFBQSxHQUVBaFAsRUFBQSxJQUFBc1AsRUFWQSxTQUFBSixFQUFBQyxHQUNBLE9BQUEsR0FBQUQsRUFBQUMsR0FBQSxFQUFBQSxFQVNBSSxDQUFBTCxFQUFBQyxJQUVBSyxFQUFBLEVBR0EzTSxFQUFBLEVBQUFzTSxFQUNBRCxFQUFBLEVBQ0FBLEVBR0EsSUFBQXAvQixFQUFBLEVBQUFBLEVBQUEreUIsRUFBQS95QixHQUFBLEVBQ0F1L0IsRUFDQUksRUFBQVYsRUFBQVcsV0FBQTUvQixLQUFBLEdBQ0EyL0IsRUFBQVYsRUFBQVcsV0FBQTUvQixFQUFBLEtBQUEsR0FDQTIvQixFQUFBVixFQUFBVyxXQUFBNS9CLEVBQUEsS0FBQSxFQUNBMi9CLEVBQUFWLEVBQUFXLFdBQUE1L0IsRUFBQSxJQUNBa3dCLEVBQUF3UCxLQUFBSCxHQUFBLEdBQUEsSUFDQXJQLEVBQUF3UCxLQUFBSCxHQUFBLEVBQUEsSUFDQXJQLEVBQUF3UCxLQUFBLElBQUFILEVBR0EsSUFBQUYsSUFDQUUsRUFDQUksRUFBQVYsRUFBQVcsV0FBQTUvQixLQUFBLEVBQ0EyL0IsRUFBQVYsRUFBQVcsV0FBQTUvQixFQUFBLEtBQUEsRUFDQWt3QixFQUFBd1AsS0FBQSxJQUFBSCxHQUdBLElBQUFGLElBQ0FFLEVBQ0FJLEVBQUFWLEVBQUFXLFdBQUE1L0IsS0FBQSxHQUNBMi9CLEVBQUFWLEVBQUFXLFdBQUE1L0IsRUFBQSxLQUFBLEVBQ0EyL0IsRUFBQVYsRUFBQVcsV0FBQTUvQixFQUFBLEtBQUEsRUFDQWt3QixFQUFBd1AsS0FBQUgsR0FBQSxFQUFBLElBQ0FyUCxFQUFBd1AsS0FBQSxJQUFBSCxHQUdBLE9BQUFyUCxHQTNGQXp2QixFQUFBby9CLGNBa0hBLFNBQUFDLEdBUUEsSUFQQSxJQUFBUCxFQUNBeE0sRUFBQStNLEVBQUFuL0IsT0FDQW8vQixFQUFBaE4sRUFBQSxFQUNBaU4sRUFBQSxHQUlBaGdDLEVBQUEsRUFBQWlnQyxFQUFBbE4sRUFBQWdOLEVBQUEvL0IsRUFBQWlnQyxFQUFBamdDLEdBSEEsTUFJQWdnQyxFQUFBbnhCLEtBQUFxeEIsRUFDQUosRUFBQTkvQixFQUFBaWdDLEVBQUFqZ0MsRUFMQSxNQUtBaWdDLEVBQUFqZ0MsRUFMQSxRQVVBLEdBQUErL0IsR0FDQVIsRUFBQU8sRUFBQS9NLEVBQUEsR0FDQWlOLEVBQUFueEIsS0FDQXN4QixFQUFBWixHQUFBLEdBQ0FZLEVBQUFaLEdBQUEsRUFBQSxJQUNBLE9BRUEsR0FBQVEsSUFDQVIsR0FBQU8sRUFBQS9NLEVBQUEsSUFBQSxHQUFBK00sRUFBQS9NLEVBQUEsR0FDQWlOLEVBQUFueEIsS0FDQXN4QixFQUFBWixHQUFBLElBQ0FZLEVBQUFaLEdBQUEsRUFBQSxJQUNBWSxFQUFBWixHQUFBLEVBQUEsSUFDQSxNQUlBLE9BQUFTLEVBQUE5dUIsS0FBQSxLQTNJQSxJQUxBLElBQUFpdkIsRUFBQSxHQUNBUixFQUFBLEdBQ0FILEVBQUEsb0JBQUFudEIsV0FBQUEsV0FBQXhJLE1BRUF0SixFQUFBLG1FQUNBUCxFQUFBLEVBQUEreUIsRUFBQXh5QixFQUFBSSxPQUFBWCxFQUFBK3lCLElBQUEveUIsRUFDQW1nQyxFQUFBbmdDLEdBQUFPLEVBQUFQLEdBQ0EyL0IsRUFBQXAvQixFQUFBcS9CLFdBQUE1L0IsSUFBQUEsRUFRQSxTQUFBbS9CLEVBQUFGLEdBQ0EsSUFBQWxNLEVBQUFrTSxFQUFBdCtCLE9BRUEsR0FBQSxFQUFBb3lCLEVBQUEsRUFDQSxNQUFBLElBQUF6eUIsTUFBQSxrREFLQSxJQUFBOCtCLEVBQUFILEVBQUExc0IsUUFBQSxLQU9BLE9BTkEsSUFBQTZzQixJQUFBQSxFQUFBck0sR0FNQSxDQUFBcU0sRUFKQUEsSUFBQXJNLEVBQ0EsRUFDQSxFQUFBcU0sRUFBQSxHQXNFQSxTQUFBYyxFQUFBSixFQUFBLzhCLEVBQUE2cEIsR0FHQSxJQUZBLElBQUEyUyxFQVJBOVksRUFTQVYsRUFBQSxHQUNBL2xCLEVBQUErQyxFQUFBL0MsRUFBQTRzQixFQUFBNXNCLEdBQUEsRUFDQXUvQixHQUNBTyxFQUFBOS9CLElBQUEsR0FBQSxXQUNBOC9CLEVBQUE5L0IsRUFBQSxJQUFBLEVBQUEsUUFDQSxJQUFBOC9CLEVBQUE5L0IsRUFBQSxJQUNBK2xCLEVBQUFsWCxLQWRBc3hCLEdBREExWixFQWVBOFksSUFkQSxHQUFBLElBQ0FZLEVBQUExWixHQUFBLEdBQUEsSUFDQTBaLEVBQUExWixHQUFBLEVBQUEsSUFDQTBaLEVBQUEsR0FBQTFaLElBYUEsT0FBQVYsRUFBQTdVLEtBQUEsSUFqR0F5dUIsRUFBQSxJQUFBQyxXQUFBLElBQUEsR0FDQUQsRUFBQSxJQUFBQyxXQUFBLElBQUEsSSxrRENUQSxJQUFBUSxFQUFBamdDLEVBQUEsYUFDQWtnQyxFQUFBbGdDLEVBQUEsV0FDQW1nQyxFQUNBLG1CQUFBL3hCLFFBQUEsbUJBQUFBLE9BQUFneUIsSUFDQWh5QixPQUFBZ3lCLElBQUEsOEJBQ0EsS0FFQTkvQixFQUFBMFIsT0FBQUEsRUFDQTFSLEVBQUErL0IsV0FtVEEsU0FBQTcvQixJQUNBQSxHQUFBQSxJQUNBQSxFQUFBLEdBRUEsT0FBQXdSLEVBQUFzdUIsT0FBQTkvQixJQXRUQUYsRUFBQWlnQyxrQkFBQSxHQUVBLElBQUFDLEVBQUEsV0F3REEsU0FBQUMsRUFBQWpnQyxHQUNBLEdBQUFnZ0MsRUFBQWhnQyxFQUNBLE1BQUEsSUFBQWtnQyxXQUFBLGNBQUFsZ0MsRUFBQSxrQ0FHQSxJQUFBbWdDLEVBQUEsSUFBQXp1QixXQUFBMVIsR0FFQSxPQURBb0ksT0FBQVksZUFBQW0zQixFQUFBM3VCLEVBQUFqSixXQUNBNDNCLEVBYUEsU0FBQTN1QixFQUFBa1AsRUFBQTBmLEVBQUFwZ0MsR0FFQSxHQUFBLGlCQUFBMGdCLEVBUUEsT0FBQTJmLEVBQUEzZixFQUFBMGYsRUFBQXBnQyxHQVBBLEdBQUEsaUJBQUFvZ0MsRUFDQSxNQUFBLElBQUFweUIsVUFDQSxzRUFHQSxPQUFBc3lCLEVBQUE1ZixHQU9BLFNBQUEyZixFQUFBMzlCLEVBQUEwOUIsRUFBQXBnQyxHQUNBLEdBQUEsaUJBQUEwQyxFQUNBLE9BdUhBLFNBQUE2OUIsRUFBQUMsR0FDQSxpQkFBQUEsR0FBQSxLQUFBQSxJQUNBQSxFQUFBLFFBR0EsSUFBQWh2QixFQUFBaXZCLFdBQUFELEdBQ0EsTUFBQSxJQUFBeHlCLFVBQUEscUJBQUF3eUIsR0FHQSxJQUFBeGdDLEVBQUEsRUFBQW9TLEVBQUFtdUIsRUFBQUMsR0FDQUwsRUFBQUYsRUFBQWpnQyxHQUVBMGdDLEVBQUFQLEVBQUFodkIsTUFBQW92QixFQUFBQyxHQUVBRSxJQUFBMWdDLElBSUFtZ0MsRUFBQUEsRUFBQWp1QixNQUFBLEVBQUF3dUIsSUFHQSxPQUFBUCxFQTVJQVEsQ0FBQWorQixFQUFBMDlCLEdBR0EsR0FBQXJhLFlBQUE2YSxPQUFBbCtCLEdBQ0EsT0FBQW0rQixFQUFBbitCLEdBR0EsR0FBQSxNQUFBQSxFQUNBLE1BQUEsSUFBQXNMLFVBQ0EseUhBQ0F0TCxHQUlBLEdBQUFvK0IsRUFBQXArQixFQUFBcWpCLGNBQ0FyakIsR0FBQW8rQixFQUFBcCtCLEVBQUEyUCxPQUFBMFQsYUFDQSxPQUFBZ2IsRUFBQXIrQixFQUFBMDlCLEVBQUFwZ0MsR0FHQSxHQUFBLG9CQUFBZ2hDLG9CQUNBRixFQUFBcCtCLEVBQUFzK0Isb0JBQ0F0K0IsR0FBQW8rQixFQUFBcCtCLEVBQUEyUCxPQUFBMnVCLG9CQUNBLE9BQUFELEVBQUFyK0IsRUFBQTA5QixFQUFBcGdDLEdBR0EsR0FBQSxpQkFBQTBDLEVBQ0EsTUFBQSxJQUFBc0wsVUFDQSx5RUFJQSxJQUFBaXpCLEVBQUF2K0IsRUFBQXUrQixTQUFBditCLEVBQUF1K0IsVUFDQSxHQUFBLE1BQUFBLEdBQUFBLElBQUF2K0IsRUFDQSxPQUFBOE8sRUFBQTZ1QixLQUFBWSxFQUFBYixFQUFBcGdDLEdBR0EsSUFBQW9KLEVBNElBLFNBQUE4M0IsR0FDQSxHQUFBMXZCLEVBQUEydkIsU0FBQUQsR0FBQSxDQUNBLElBQUE5TyxFQUFBLEVBQUFnUCxFQUFBRixFQUFBbGhDLFFBQ0FtZ0MsRUFBQUYsRUFBQTdOLEdBRUEsT0FBQSxJQUFBK04sRUFBQW5nQyxPQUNBbWdDLEdBR0FlLEVBQUFHLEtBQUFsQixFQUFBLEVBQUEsRUFBQS9OLEdBQ0ErTixHQUdBLFFBQUExMEIsSUFBQXkxQixFQUFBbGhDLE9BQ0EsTUFBQSxpQkFBQWtoQyxFQUFBbGhDLFFBQUFzaEMsRUFBQUosRUFBQWxoQyxRQUNBaWdDLEVBQUEsR0FFQVksRUFBQUssR0FHQSxHQUFBLFdBQUFBLEVBQUFoN0IsTUFBQWdELE1BQUFzWixRQUFBMGUsRUFBQTV2QixNQUNBLE9BQUF1dkIsRUFBQUssRUFBQTV2QixNQWpLQWl3QixDQUFBNytCLEdBQ0EsR0FBQTBHLEVBQUEsT0FBQUEsRUFFQSxHQUFBLG9CQUFBd0UsUUFBQSxNQUFBQSxPQUFBNHpCLGFBQ0EsbUJBQUE5K0IsRUFBQWtMLE9BQUE0ekIsYUFDQSxPQUFBaHdCLEVBQUE2dUIsS0FDQTM5QixFQUFBa0wsT0FBQTR6QixhQUFBLFVBQUFwQixFQUFBcGdDLEdBSUEsTUFBQSxJQUFBZ08sVUFDQSx5SEFDQXRMLEdBcUJBLFNBQUErK0IsRUFBQUMsR0FDQSxHQUFBLGlCQUFBQSxFQUNBLE1BQUEsSUFBQTF6QixVQUFBLDBDQUNBLEdBQUEwekIsRUFBQSxFQUNBLE1BQUEsSUFBQXhCLFdBQUEsY0FBQXdCLEVBQUEsa0NBNEJBLFNBQUFwQixFQUFBb0IsR0FFQSxPQURBRCxFQUFBQyxHQUNBekIsRUFBQXlCLEVBQUEsRUFBQSxFQUFBLEVBQUFOLEVBQUFNLElBd0NBLFNBQUFiLEVBQUFjLEdBR0EsSUFGQSxJQUFBM2hDLEVBQUEyaEMsRUFBQTNoQyxPQUFBLEVBQUEsRUFBQSxFQUFBb2hDLEVBQUFPLEVBQUEzaEMsUUFDQW1nQyxFQUFBRixFQUFBamdDLEdBQ0FYLEVBQUEsRUFBQUEsRUFBQVcsRUFBQVgsR0FBQSxFQUNBOGdDLEVBQUE5Z0MsR0FBQSxJQUFBc2lDLEVBQUF0aUMsR0FFQSxPQUFBOGdDLEVBR0EsU0FBQVksRUFBQVksRUFBQUMsRUFBQTVoQyxHQUNBLEdBQUE0aEMsRUFBQSxHQUFBRCxFQUFBdnZCLFdBQUF3dkIsRUFDQSxNQUFBLElBQUExQixXQUFBLHdDQUdBLEdBQUF5QixFQUFBdnZCLFdBQUF3dkIsR0FBQTVoQyxHQUFBLEdBQ0EsTUFBQSxJQUFBa2dDLFdBQUEsd0NBR0EsSUFFQUMsT0FEQTEwQixJQUFBbTJCLFFBQUFuMkIsSUFBQXpMLEVBQ0EsSUFBQTBSLFdBQUFpd0IsUUFDQWwyQixJQUFBekwsRUFDQSxJQUFBMFIsV0FBQWl3QixFQUFBQyxHQUVBLElBQUFsd0IsV0FBQWl3QixFQUFBQyxFQUFBNWhDLEdBTUEsT0FGQW9JLE9BQUFZLGVBQUFtM0IsRUFBQTN1QixFQUFBakosV0FFQTQzQixFQTRCQSxTQUFBaUIsRUFBQXBoQyxHQUdBLEdBQUFnZ0MsR0FBQWhnQyxFQUNBLE1BQUEsSUFBQWtnQyxXQUFBLDBEQUNBRixFQUFBbGdCLFNBQUEsSUFBQSxVQUVBLE9BQUEsRUFBQTlmLEVBOEZBLFNBQUFvUyxFQUFBbXVCLEVBQUFDLEdBQ0EsR0FBQWh2QixFQUFBMnZCLFNBQUFaLEdBQ0EsT0FBQUEsRUFBQXZnQyxPQUVBLEdBQUErbEIsWUFBQTZhLE9BQUFMLElBQUFPLEVBQUFQLEVBQUF4YSxhQUNBLE9BQUF3YSxFQUFBbnVCLFdBRUEsR0FBQSxpQkFBQW11QixFQUNBLE1BQUEsSUFBQXZ5QixVQUNBLGtHQUNBdXlCLEdBSUEsSUFBQW5PLEVBQUFtTyxFQUFBdmdDLE9BQ0E2aEMsRUFBQSxFQUFBMzFCLFVBQUFsTSxTQUFBLElBQUFrTSxVQUFBLEdBQ0EsSUFBQTIxQixHQUFBLElBQUF6UCxFQUFBLE9BQUEsRUFJQSxJQURBLElBQUEwUCxHQUFBLElBRUEsT0FBQXRCLEdBQ0EsSUFBQSxRQUNBLElBQUEsU0FDQSxJQUFBLFNBQ0EsT0FBQXBPLEVBQ0EsSUFBQSxPQUNBLElBQUEsUUFDQSxPQUFBMlAsRUFBQXhCLEdBQUF2Z0MsT0FDQSxJQUFBLE9BQ0EsSUFBQSxRQUNBLElBQUEsVUFDQSxJQUFBLFdBQ0EsT0FBQSxFQUFBb3lCLEVBQ0EsSUFBQSxNQUNBLE9BQUFBLElBQUEsRUFDQSxJQUFBLFNBQ0EsT0FBQTRQLEVBQUF6QixHQUFBdmdDLE9BQ0EsUUFDQSxHQUFBOGhDLEVBQ0EsT0FBQUQsR0FBQSxFQUFBRSxFQUFBeEIsR0FBQXZnQyxPQUVBd2dDLEdBQUEsR0FBQUEsR0FBQW5qQixjQUNBeWtCLEdBQUEsR0FvRkEsU0FBQUcsRUFBQTc0QixFQUFBbEssRUFBQWtnQixHQUNBLElBQUEvZixFQUFBK0osRUFBQWxLLEdBQ0FrSyxFQUFBbEssR0FBQWtLLEVBQUFnVyxHQUNBaFcsRUFBQWdXLEdBQUEvZixFQTRJQSxTQUFBNmlDLEVBQUE3dkIsRUFBQWtULEVBQUFxYyxFQUFBcEIsRUFBQTJCLEdBRUEsR0FBQSxJQUFBOXZCLEVBQUFyUyxPQUFBLE9BQUEsRUFtQkEsR0FoQkEsaUJBQUE0aEMsR0FDQXBCLEVBQUFvQixFQUNBQSxFQUFBLEdBQ0EsV0FBQUEsRUFDQUEsRUFBQSxXQUNBQSxHQUFBLGFBQ0FBLEdBQUEsWUFHQU4sRUFEQU0sR0FBQUEsS0FHQUEsRUFBQU8sRUFBQSxFQUFBOXZCLEVBQUFyUyxPQUFBLEdBSUE0aEMsRUFBQSxJQUFBQSxFQUFBdnZCLEVBQUFyUyxPQUFBNGhDLEdBQ0FBLEdBQUF2dkIsRUFBQXJTLE9BQUEsQ0FDQSxHQUFBbWlDLEVBQUEsT0FBQSxFQUNBUCxFQUFBdnZCLEVBQUFyUyxPQUFBLE9BQ0EsR0FBQTRoQyxFQUFBLEVBQUEsQ0FDQSxJQUFBTyxFQUNBLE9BQUEsRUFEQVAsRUFBQSxFQVVBLEdBTEEsaUJBQUFyYyxJQUNBQSxFQUFBL1QsRUFBQTZ1QixLQUFBOWEsRUFBQWliLElBSUFodkIsRUFBQTJ2QixTQUFBNWIsR0FFQSxPQUFBLElBQUFBLEVBQUF2bEIsUUFDQSxFQUVBb2lDLEVBQUEvdkIsRUFBQWtULEVBQUFxYyxFQUFBcEIsRUFBQTJCLEdBQ0EsR0FBQSxpQkFBQTVjLEVBRUEsT0FEQUEsR0FBQSxJQUNBLG1CQUFBN1QsV0FBQW5KLFVBQUFxSixRQUNBdXdCLEVBQ0F6d0IsV0FBQW5KLFVBQUFxSixRQUFBN1IsS0FBQXNTLEVBQUFrVCxFQUFBcWMsR0FFQWx3QixXQUFBbkosVUFBQTZQLFlBQUFyWSxLQUFBc1MsRUFBQWtULEVBQUFxYyxHQUdBUSxFQUFBL3ZCLEVBQUEsQ0FBQWtULEdBQUFxYyxFQUFBcEIsRUFBQTJCLEdBR0EsTUFBQSxJQUFBbjBCLFVBQUEsd0NBR0EsU0FBQW8wQixFQUFBN1MsRUFBQWhLLEVBQUFxYyxFQUFBcEIsRUFBQTJCLEdBQ0EsSUFBQUUsRUFBQSxFQUNBQyxFQUFBL1MsRUFBQXZ2QixPQUNBdWlDLEVBQUFoZCxFQUFBdmxCLE9BRUEsUUFBQXlMLElBQUErMEIsSUFFQSxVQURBQSxFQUFBeHVCLE9BQUF3dUIsR0FBQW5qQixnQkFDQSxVQUFBbWpCLEdBQ0EsWUFBQUEsR0FBQSxhQUFBQSxHQUFBLENBQ0EsR0FBQWpSLEVBQUF2dkIsT0FBQSxHQUFBdWxCLEVBQUF2bEIsT0FBQSxFQUNBLE9BQUEsRUFHQXNpQyxHQURBRCxFQUFBLEVBRUFFLEdBQUEsRUFDQVgsR0FBQSxFQUlBLFNBQUFZLEVBQUFyQyxFQUFBOWdDLEdBQ0EsT0FBQSxJQUFBZ2pDLEVBQ0FsQyxFQUFBOWdDLEdBRUE4Z0MsRUFBQXNDLGFBQUFwakMsRUFBQWdqQyxHQUtBLEdBQUFGLEVBRUEsSUFEQSxJQUFBTyxHQUFBLEVBQ0FyakMsRUFBQXVpQyxFQUFBdmlDLEVBQUFpakMsRUFBQWpqQyxJQUNBLEdBQUFtakMsRUFBQWpULEVBQUFsd0IsS0FBQW1qQyxFQUFBamQsR0FBQSxJQUFBbWQsRUFBQSxFQUFBcmpDLEVBQUFxakMsSUFFQSxJQURBLElBQUFBLElBQUFBLEVBQUFyakMsR0FDQUEsRUFBQXFqQyxFQUFBLElBQUFILEVBQUEsT0FBQUcsRUFBQUwsT0FFQSxJQUFBSyxJQUFBcmpDLEdBQUFBLEVBQUFxakMsR0FDQUEsR0FBQSxPQUtBLElBREFKLEVBQUFWLEVBQUFXLElBQUFYLEVBQUFVLEVBQUFDLEdBQ0FsakMsRUFBQXVpQyxFQUFBLEdBQUF2aUMsRUFBQUEsSUFBQSxDQUVBLElBREEsSUFBQXNqQyxHQUFBLEVBQ0FDLEVBQUEsRUFBQUEsRUFBQUwsRUFBQUssSUFDQSxHQUFBSixFQUFBalQsRUFBQWx3QixFQUFBdWpDLEtBQUFKLEVBQUFqZCxFQUFBcWQsR0FBQSxDQUNBRCxHQUFBLEVBQ0EsTUFHQSxHQUFBQSxFQUFBLE9BQUF0akMsRUFJQSxPQUFBLEVBZUEsU0FBQXdqQyxFQUFBMUMsRUFBQUksRUFBQTltQixFQUFBelosR0FDQXlaLEVBQUFxcEIsT0FBQXJwQixJQUFBLEVBQ0EsSUFBQXNwQixFQUFBNUMsRUFBQW5nQyxPQUFBeVosSUFDQXpaLEdBSUEraUMsR0FEQS9pQyxFQUFBOGlDLE9BQUE5aUMsT0FGQUEsRUFBQStpQyxHQVFBLElBQUFDLEVBQUF6QyxFQUFBdmdDLE9BRUFnakMsRUFBQSxFQUFBaGpDLElBQ0FBLEVBQUFnakMsRUFBQSxHQUVBLElBQUEsSUFBQTNqQyxFQUFBLEVBQUFBLEVBQUFXLElBQUFYLEVBQUEsQ0FDQSxJQUFBNGpDLEVBQUF2OEIsU0FBQTY1QixFQUFBbDZCLE9BQUEsRUFBQWhILEVBQUEsR0FBQSxJQUNBLEdBQUFpaUMsRUFBQTJCLEdBQUEsT0FBQTVqQyxFQUNBOGdDLEVBQUExbUIsRUFBQXBhLEdBQUE0akMsRUFFQSxPQUFBNWpDLEVBT0EsU0FBQTZqQyxFQUFBL0MsRUFBQUksRUFBQTltQixFQUFBelosR0FDQSxPQUFBbWpDLEVBMjNCQSxTQUFBdGQsR0FFQSxJQURBLElBQUF1ZCxFQUFBLEdBQ0EvakMsRUFBQSxFQUFBQSxFQUFBd21CLEVBQUE3bEIsU0FBQVgsRUFFQStqQyxFQUFBbDFCLEtBQUEsSUFBQTJYLEVBQUFvWixXQUFBNS9CLElBRUEsT0FBQStqQyxFQWo0QkFDLENBQUE5QyxHQUFBSixFQUFBMW1CLEVBQUF6WixHQVdBLFNBQUFzakMsRUFBQW5ELEVBQUFJLEVBQUE5bUIsRUFBQXpaLEdBQ0EsT0FBQW1qQyxFQXczQkEsU0FBQXRkLEVBQUEwZCxHQUdBLElBRkEsSUFBQWhrQyxFQUFBaWtDLEVBQUFDLEVBQ0FMLEVBQUEsR0FDQS9qQyxFQUFBLEVBQUFBLEVBQUF3bUIsRUFBQTdsQixXQUNBdWpDLEdBQUEsR0FBQSxLQURBbGtDLEVBR0FFLEVBQUFzbUIsRUFBQW9aLFdBQUE1L0IsR0FDQW1rQyxFQUFBamtDLEdBQUEsRUFDQWtrQyxFQUFBbGtDLEVBQUEsSUFDQTZqQyxFQUFBbDFCLEtBQUF1MUIsR0FDQUwsRUFBQWwxQixLQUFBczFCLEdBR0EsT0FBQUosRUFyNEJBTSxDQUFBbkQsRUFBQUosRUFBQW5nQyxPQUFBeVosR0FBQTBtQixFQUFBMW1CLEVBQUF6WixHQWlGQSxTQUFBMmpDLEVBQUF4RCxFQUFBLzlCLEVBQUE2cEIsR0FDQSxPQUFBLElBQUE3cEIsR0FBQTZwQixJQUFBa1UsRUFBQW5nQyxPQUNBeS9CLEVBQUFQLGNBQUFpQixHQUVBVixFQUFBUCxjQUFBaUIsRUFBQWp1QixNQUFBOVAsRUFBQTZwQixJQUlBLFNBQUEyWCxFQUFBekQsRUFBQS85QixFQUFBNnBCLEdBQ0FBLEVBQUFvRyxLQUFBNkQsSUFBQWlLLEVBQUFuZ0MsT0FBQWlzQixHQUlBLElBSEEsSUFBQTRYLEVBQUEsR0FFQXhrQyxFQUFBK0MsRUFDQS9DLEVBQUE0c0IsR0FBQSxDQUNBLElBUUE2WCxFQUFBQyxFQUFBQyxFQUFBQyxFQVJBQyxFQUFBL0QsRUFBQTlnQyxHQUNBOGtDLEVBQUEsS0FDQUMsRUFBQSxJQUFBRixFQUFBLEVBQ0EsSUFBQUEsRUFBQSxFQUNBLElBQUFBLEVBQUEsRUFDQSxFQUVBLEdBQUE3a0MsRUFBQStrQyxHQUFBblksRUFHQSxPQUFBbVksR0FDQSxLQUFBLEVBQ0FGLEVBQUEsTUFDQUMsRUFBQUQsR0FFQSxNQUNBLEtBQUEsRUFFQSxNQUFBLEtBREFKLEVBQUEzRCxFQUFBOWdDLEVBQUEsTUFHQSxLQURBNGtDLEdBQUEsR0FBQUMsSUFBQSxFQUFBLEdBQUFKLEtBRUFLLEVBQUFGLEdBR0EsTUFDQSxLQUFBLEVBQ0FILEVBQUEzRCxFQUFBOWdDLEVBQUEsR0FDQTBrQyxFQUFBNUQsRUFBQTlnQyxFQUFBLEdBQ0EsTUFBQSxJQUFBeWtDLElBQUEsTUFBQSxJQUFBQyxJQUVBLE1BREFFLEdBQUEsR0FBQUMsSUFBQSxJQUFBLEdBQUFKLElBQUEsRUFBQSxHQUFBQyxLQUNBRSxFQUFBLE9BQUEsTUFBQUEsS0FDQUUsRUFBQUYsR0FHQSxNQUNBLEtBQUEsRUFDQUgsRUFBQTNELEVBQUE5Z0MsRUFBQSxHQUNBMGtDLEVBQUE1RCxFQUFBOWdDLEVBQUEsR0FDQTJrQyxFQUFBN0QsRUFBQTlnQyxFQUFBLEdBQ0EsTUFBQSxJQUFBeWtDLElBQUEsTUFBQSxJQUFBQyxJQUFBLE1BQUEsSUFBQUMsSUFFQSxPQURBQyxHQUFBLEdBQUFDLElBQUEsSUFBQSxHQUFBSixJQUFBLElBQUEsR0FBQUMsSUFBQSxFQUFBLEdBQUFDLElBQ0FDLEVBQUEsVUFDQUUsRUFBQUYsR0FNQSxPQUFBRSxHQUdBQSxFQUFBLE1BQ0FDLEVBQUEsR0FDQSxNQUFBRCxJQUVBQSxHQUFBLE1BQ0FOLEVBQUEzMUIsS0FBQWkyQixJQUFBLEdBQUEsS0FBQSxPQUNBQSxFQUFBLE1BQUEsS0FBQUEsR0FHQU4sRUFBQTMxQixLQUFBaTJCLEdBQ0E5a0MsR0FBQStrQyxFQUdBLE9BUUEsU0FBQUMsR0FDQSxJQUFBalMsRUFBQWlTLEVBQUFya0MsT0FDQSxHQUFBb3lCLEdBQUFrUyxFQUNBLE9BQUF0eUIsT0FBQUMsYUFBQWxGLE1BQUFpRixPQUFBcXlCLEdBSUEsSUFBQVIsRUFBQSxHQUNBeGtDLEVBQUEsRUFDQSxLQUFBQSxFQUFBK3lCLEdBQ0F5UixHQUFBN3hCLE9BQUFDLGFBQUFsRixNQUNBaUYsT0FDQXF5QixFQUFBbnlCLE1BQUE3UyxFQUFBQSxHQUFBaWxDLElBR0EsT0FBQVQsRUF2QkFVLENBQUFWLEdBNzlCQS9qQyxFQUFBMGtDLFdBQUF4RSxHQWdCQXh1QixFQUFBaXpCLG9CQVVBLFdBRUEsSUFDQSxJQUFBbFYsRUFBQSxJQUFBN2QsV0FBQSxHQUNBZ3pCLEVBQUEsQ0FBQUMsSUFBQSxXQUFBLE9BQUEsS0FHQSxPQUZBdjhCLE9BQUFZLGVBQUEwN0IsRUFBQWh6QixXQUFBbkosV0FDQUgsT0FBQVksZUFBQXVtQixFQUFBbVYsR0FDQSxLQUFBblYsRUFBQW9WLE1BQ0EsTUFBQTFsQyxHQUNBLE9BQUEsR0FuQkEybEMsS0FFQSxvQkFBQXJpQyxTQUNBLG1CQUFBQSxRQUFBQyxPQUNBRCxRQUFBQyxNQUNBLGlKQWtCQTRGLE9BQUFDLGVBQUFtSixFQUFBakosVUFBQSxTQUFBLENBQ0FLLFlBQUEsRUFDQUQsSUFBQSxXQUNBLEdBQUE2SSxFQUFBMnZCLFNBQUF2OEIsTUFDQSxPQUFBQSxLQUFBeU4sVUFJQWpLLE9BQUFDLGVBQUFtSixFQUFBakosVUFBQSxTQUFBLENBQ0FLLFlBQUEsRUFDQUQsSUFBQSxXQUNBLEdBQUE2SSxFQUFBMnZCLFNBQUF2OEIsTUFDQSxPQUFBQSxLQUFBZzlCLGNBcUNBcHdCLEVBQUFxekIsU0FBQSxLQWdFQXJ6QixFQUFBNnVCLEtBQ0FBLEVBS0FqNEIsT0FBQVksZUFBQXdJLEVBQUFqSixVQUFBbUosV0FBQW5KLFdBQ0FILE9BQUFZLGVBQUF3SSxFQUFBRSxZQThCQUYsRUFBQXN1QixNQUFBLFNBQUE0QixFQUFBb0QsRUFBQXRFLEdBQ0EsT0FyQkFzRSxFQXFCQUEsRUFyQkF0RSxFQXFCQUEsRUFwQkFpQixFQURBQyxFQXFCQUEsR0FuQkFBLEdBQUEsUUFHQWoyQixJQUFBcTVCLEVBRkE3RSxFQUFBeUIsR0FNQSxpQkFBQWxCLEVBQ0FQLEVBQUF5QixHQUFBb0QsS0FBQUEsRUFBQXRFLEdBQ0FQLEVBQUF5QixHQUFBb0QsS0FBQUEsR0FYQSxJQUFBcEQsRUFBQW9ELEVBQUF0RSxHQWdDQWh2QixFQUFBOHVCLFlBQ0FBLEVBS0E5dUIsRUFBQXV6QixnQkFDQXpFLEVBc0dBOXVCLEVBQUEydkIsU0FBQSxTQUFBLzNCLEdBQ0EsT0FBQSxNQUFBQSxJQUFBLElBQUFBLEVBQUE0N0IsV0FDQTU3QixJQUFBb0ksRUFBQWpKLFdBR0FpSixFQUFBeXpCLFFBQUEsU0FBQXZsQyxFQUFBMEosR0FHQSxHQUZBMDNCLEVBQUFwaEMsRUFBQWdTLGNBQUFoUyxFQUFBOFIsRUFBQTZ1QixLQUFBM2dDLEVBQUFBLEVBQUErWixPQUFBL1osRUFBQTBTLGFBQ0EwdUIsRUFBQTEzQixFQUFBc0ksY0FBQXRJLEVBQUFvSSxFQUFBNnVCLEtBQUFqM0IsRUFBQUEsRUFBQXFRLE9BQUFyUSxFQUFBZ0osY0FDQVosRUFBQTJ2QixTQUFBemhDLEtBQUE4UixFQUFBMnZCLFNBQUEvM0IsR0FDQSxNQUFBLElBQUE0RSxVQUNBLHlFQUlBLEdBQUF0TyxJQUFBMEosRUFBQSxPQUFBLEVBS0EsSUFIQSxJQUFBeWYsRUFBQW5wQixFQUFBTSxPQUNBa04sRUFBQTlELEVBQUFwSixPQUVBWCxFQUFBLEVBQUEreUIsRUFBQUMsS0FBQTZELElBQUFyTixFQUFBM2IsR0FBQTdOLEVBQUEreUIsSUFBQS95QixFQUNBLEdBQUFLLEVBQUFMLEtBQUErSixFQUFBL0osR0FBQSxDQUNBd3BCLEVBQUFucEIsRUFBQUwsR0FDQTZOLEVBQUE5RCxFQUFBL0osR0FDQSxNQUlBLE9BQUF3cEIsRUFBQTNiLEdBQUEsRUFDQUEsRUFBQTJiLEVBQUEsRUFDQSxHQUdBclgsRUFBQWl2QixXQUFBLFNBQUFELEdBQ0EsT0FBQXh1QixPQUFBd3VCLEdBQUFuakIsZUFDQSxJQUFBLE1BQ0EsSUFBQSxPQUNBLElBQUEsUUFDQSxJQUFBLFFBQ0EsSUFBQSxTQUNBLElBQUEsU0FDQSxJQUFBLFNBQ0EsSUFBQSxPQUNBLElBQUEsUUFDQSxJQUFBLFVBQ0EsSUFBQSxXQUNBLE9BQUEsRUFDQSxRQUNBLE9BQUEsSUFJQTdMLEVBQUE5UCxPQUFBLFNBQUF5RyxFQUFBbkksR0FDQSxJQUFBa0osTUFBQXNaLFFBQUFyYSxHQUNBLE1BQUEsSUFBQTZGLFVBQUEsK0NBR0EsR0FBQSxJQUFBN0YsRUFBQW5JLE9BQ0EsT0FBQXdSLEVBQUFzdUIsTUFBQSxHQUlBLFFBQUFyMEIsSUFBQXpMLEVBRUEsSUFBQVgsRUFEQVcsRUFBQSxFQUNBWCxFQUFBOEksRUFBQW5JLFNBQUFYLEVBQ0FXLEdBQUFtSSxFQUFBOUksR0FBQVcsT0FNQSxJQUZBLElBQUFxUyxFQUFBYixFQUFBOHVCLFlBQUF0Z0MsR0FDQWtsQyxFQUFBLEVBQ0E3bEMsRUFBQSxFQUFBQSxFQUFBOEksRUFBQW5JLFNBQUFYLEVBQUEsQ0FDQSxJQUFBOGdDLEVBQUFoNEIsRUFBQTlJLEdBSUEsR0FIQXloQyxFQUFBWCxFQUFBenVCLGNBQ0F5dUIsRUFBQTN1QixFQUFBNnVCLEtBQUFGLEtBRUEzdUIsRUFBQTJ2QixTQUFBaEIsR0FDQSxNQUFBLElBQUFueUIsVUFBQSwrQ0FFQW15QixFQUFBa0IsS0FBQWh2QixFQUFBNnlCLEdBQ0FBLEdBQUEvRSxFQUFBbmdDLE9BRUEsT0FBQXFTLEdBa0RBYixFQUFBWSxXQUFBQSxFQThFQVosRUFBQWpKLFVBQUF5OEIsV0FBQSxFQVFBeHpCLEVBQUFqSixVQUFBNDhCLE9BQUEsV0FDQSxJQUFBL1MsRUFBQXh0QixLQUFBNUUsT0FDQSxHQUFBb3lCLEVBQUEsR0FBQSxFQUNBLE1BQUEsSUFBQThOLFdBQUEsNkNBRUEsSUFBQSxJQUFBN2dDLEVBQUEsRUFBQUEsRUFBQSt5QixFQUFBL3lCLEdBQUEsRUFDQTRpQyxFQUFBcjlCLEtBQUF2RixFQUFBQSxFQUFBLEdBRUEsT0FBQXVGLE1BR0E0TSxFQUFBakosVUFBQTY4QixPQUFBLFdBQ0EsSUFBQWhULEVBQUF4dEIsS0FBQTVFLE9BQ0EsR0FBQW95QixFQUFBLEdBQUEsRUFDQSxNQUFBLElBQUE4TixXQUFBLDZDQUVBLElBQUEsSUFBQTdnQyxFQUFBLEVBQUFBLEVBQUEreUIsRUFBQS95QixHQUFBLEVBQ0E0aUMsRUFBQXI5QixLQUFBdkYsRUFBQUEsRUFBQSxHQUNBNGlDLEVBQUFyOUIsS0FBQXZGLEVBQUEsRUFBQUEsRUFBQSxHQUVBLE9BQUF1RixNQUdBNE0sRUFBQWpKLFVBQUE4OEIsT0FBQSxXQUNBLElBQUFqVCxFQUFBeHRCLEtBQUE1RSxPQUNBLEdBQUFveUIsRUFBQSxHQUFBLEVBQ0EsTUFBQSxJQUFBOE4sV0FBQSw2Q0FFQSxJQUFBLElBQUE3Z0MsRUFBQSxFQUFBQSxFQUFBK3lCLEVBQUEveUIsR0FBQSxFQUNBNGlDLEVBQUFyOUIsS0FBQXZGLEVBQUFBLEVBQUEsR0FDQTRpQyxFQUFBcjlCLEtBQUF2RixFQUFBLEVBQUFBLEVBQUEsR0FDQTRpQyxFQUFBcjlCLEtBQUF2RixFQUFBLEVBQUFBLEVBQUEsR0FDQTRpQyxFQUFBcjlCLEtBQUF2RixFQUFBLEVBQUFBLEVBQUEsR0FFQSxPQUFBdUYsTUFVQTRNLEVBQUFqSixVQUFBOUMsZUFQQStMLEVBQUFqSixVQUFBdVgsU0FBQSxXQUNBLElBQUE5ZixFQUFBNEUsS0FBQTVFLE9BQ0EsT0FBQSxJQUFBQSxFQUFBLEdBQ0EsSUFBQWtNLFVBQUFsTSxPQUFBNGpDLEVBQUFoL0IsS0FBQSxFQUFBNUUsR0E1SEEsU0FBQXdnQyxFQUFBcCtCLEVBQUE2cEIsR0FDQSxJQUFBNlYsR0FBQSxFQWNBLFNBTEFyMkIsSUFBQXJKLEdBQUFBLEVBQUEsS0FDQUEsRUFBQSxHQUlBQSxFQUFBd0MsS0FBQTVFLE9BQ0EsTUFBQSxHQU9BLFNBSkF5TCxJQUFBd2dCLEdBQUFBLEVBQUFybkIsS0FBQTVFLFVBQ0Fpc0IsRUFBQXJuQixLQUFBNUUsUUFHQWlzQixHQUFBLEVBQ0EsTUFBQSxHQU9BLElBSEFBLEtBQUEsS0FDQTdwQixLQUFBLEdBR0EsTUFBQSxHQUtBLElBRkFvK0IsRUFBQUEsR0FBQSxTQUdBLE9BQUFBLEdBQ0EsSUFBQSxNQUNBLE9BQUE4RSxFQUFBMWdDLEtBQUF4QyxFQUFBNnBCLEdBRUEsSUFBQSxPQUNBLElBQUEsUUFDQSxPQUFBMlgsRUFBQWgvQixLQUFBeEMsRUFBQTZwQixHQUVBLElBQUEsUUFDQSxPQUFBc1osRUFBQTNnQyxLQUFBeEMsRUFBQTZwQixHQUVBLElBQUEsU0FDQSxJQUFBLFNBQ0EsT0FBQXVaLEVBQUE1Z0MsS0FBQXhDLEVBQUE2cEIsR0FFQSxJQUFBLFNBQ0EsT0FBQTBYLEVBQUEvK0IsS0FBQXhDLEVBQUE2cEIsR0FFQSxJQUFBLE9BQ0EsSUFBQSxRQUNBLElBQUEsVUFDQSxJQUFBLFdBQ0EsT0FBQXdaLEVBQUE3Z0MsS0FBQXhDLEVBQUE2cEIsR0FFQSxRQUNBLEdBQUE2VixFQUFBLE1BQUEsSUFBQTl6QixVQUFBLHFCQUFBd3lCLEdBQ0FBLEdBQUFBLEVBQUEsSUFBQW5qQixjQUNBeWtCLEdBQUEsSUE0REEvMEIsTUFBQW5JLEtBQUFzSCxZQUtBc0YsRUFBQWpKLFVBQUFtOUIsT0FBQSxTQUFBdDhCLEdBQ0EsSUFBQW9JLEVBQUEydkIsU0FBQS8zQixHQUFBLE1BQUEsSUFBQTRFLFVBQUEsNkJBQ0EsT0FBQXBKLE9BQUF3RSxHQUNBLElBQUFvSSxFQUFBeXpCLFFBQUFyZ0MsS0FBQXdFLElBR0FvSSxFQUFBakosVUFBQW85QixRQUFBLFdBQ0EsSUFBQTlmLEVBQUEsR0FDQTJQLEVBQUExMUIsRUFBQWlnQyxrQkFDQWxhLEVBQUFqaEIsS0FBQWtiLFNBQUEsTUFBQSxFQUFBMFYsR0FBQXZ1QixRQUFBLFVBQUEsT0FBQTIrQixPQUVBLE9BREFoaEMsS0FBQTVFLE9BQUF3MUIsSUFBQTNQLEdBQUEsU0FDQSxXQUFBQSxFQUFBLEtBRUE4WixJQUNBbnVCLEVBQUFqSixVQUFBbzNCLEdBQUFudUIsRUFBQWpKLFVBQUFvOUIsU0FHQW4wQixFQUFBakosVUFBQTA4QixRQUFBLFNBQUFyL0IsRUFBQXhELEVBQUE2cEIsRUFBQTRaLEVBQUFDLEdBSUEsR0FIQWhGLEVBQUFsN0IsRUFBQThMLGNBQ0E5TCxFQUFBNEwsRUFBQTZ1QixLQUFBejZCLEVBQUFBLEVBQUE2VCxPQUFBN1QsRUFBQXdNLGNBRUFaLEVBQUEydkIsU0FBQXY3QixHQUNBLE1BQUEsSUFBQW9JLFVBQ0Esd0ZBQ0FwSSxHQWlCQSxRQWJBNkYsSUFBQXJKLElBQ0FBLEVBQUEsUUFFQXFKLElBQUF3Z0IsSUFDQUEsRUFBQXJtQixFQUFBQSxFQUFBNUYsT0FBQSxRQUVBeUwsSUFBQW82QixJQUNBQSxFQUFBLFFBRUFwNkIsSUFBQXE2QixJQUNBQSxFQUFBbGhDLEtBQUE1RSxRQUdBb0MsRUFBQSxHQUFBNnBCLEVBQUFybUIsRUFBQTVGLFFBQUE2bEMsRUFBQSxHQUFBQyxFQUFBbGhDLEtBQUE1RSxPQUNBLE1BQUEsSUFBQWtnQyxXQUFBLHNCQUdBLEdBQUE0RixHQUFBRCxHQUFBNVosR0FBQTdwQixFQUNBLE9BQUEsRUFFQSxHQUFBMGpDLEdBQUFELEVBQ0EsT0FBQSxFQUVBLEdBQUE1WixHQUFBN3BCLEVBQ0EsT0FBQSxFQVFBLEdBQUF3QyxPQUFBZ0IsRUFBQSxPQUFBLEVBU0EsSUFQQSxJQUFBaWpCLEdBSkFpZCxLQUFBLElBREFELEtBQUEsR0FNQTM0QixHQVBBK2UsS0FBQSxJQURBN3BCLEtBQUEsR0FTQWd3QixFQUFBQyxLQUFBNkQsSUFBQXJOLEVBQUEzYixHQUVBNjRCLEVBQUFuaEMsS0FBQXNOLE1BQUEyekIsRUFBQUMsR0FDQUUsRUFBQXBnQyxFQUFBc00sTUFBQTlQLEVBQUE2cEIsR0FFQTVzQixFQUFBLEVBQUFBLEVBQUEreUIsSUFBQS95QixFQUNBLEdBQUEwbUMsRUFBQTFtQyxLQUFBMm1DLEVBQUEzbUMsR0FBQSxDQUNBd3BCLEVBQUFrZCxFQUFBMW1DLEdBQ0E2TixFQUFBODRCLEVBQUEzbUMsR0FDQSxNQUlBLE9BQUF3cEIsRUFBQTNiLEdBQUEsRUFDQUEsRUFBQTJiLEVBQUEsRUFDQSxHQTRIQXJYLEVBQUFqSixVQUFBMDlCLFNBQUEsU0FBQTFnQixFQUFBcWMsRUFBQXBCLEdBQ0EsT0FBQSxJQUFBNTdCLEtBQUFnTixRQUFBMlQsRUFBQXFjLEVBQUFwQixJQUdBaHZCLEVBQUFqSixVQUFBcUosUUFBQSxTQUFBMlQsRUFBQXFjLEVBQUFwQixHQUNBLE9BQUEwQixFQUFBdDlCLEtBQUEyZ0IsRUFBQXFjLEVBQUFwQixHQUFBLElBR0FodkIsRUFBQWpKLFVBQUE2UCxZQUFBLFNBQUFtTixFQUFBcWMsRUFBQXBCLEdBQ0EsT0FBQTBCLEVBQUF0OUIsS0FBQTJnQixFQUFBcWMsRUFBQXBCLEdBQUEsSUFnREFodkIsRUFBQWpKLFVBQUE0SSxNQUFBLFNBQUFvdkIsRUFBQTltQixFQUFBelosRUFBQXdnQyxHQUVBLFFBQUEvMEIsSUFBQWdPLEVBQ0ErbUIsRUFBQSxPQUNBeGdDLEVBQUE0RSxLQUFBNUUsT0FDQXlaLEVBQUEsT0FFQSxRQUFBaE8sSUFBQXpMLEdBQUEsaUJBQUF5WixFQUNBK21CLEVBQUEvbUIsRUFDQXpaLEVBQUE0RSxLQUFBNUUsT0FDQXlaLEVBQUEsTUFFQSxDQUFBLElBQUF5c0IsU0FBQXpzQixHQVVBLE1BQUEsSUFBQTlaLE1BQ0EsMkVBVkE4WixLQUFBLEVBQ0F5c0IsU0FBQWxtQyxJQUNBQSxLQUFBLE9BQ0F5TCxJQUFBKzBCLElBQUFBLEVBQUEsVUFFQUEsRUFBQXhnQyxFQUNBQSxPQUFBeUwsR0FRQSxJQUFBczNCLEVBQUFuK0IsS0FBQTVFLE9BQUF5WixFQUdBLFNBRkFoTyxJQUFBekwsR0FBQStpQyxFQUFBL2lDLEtBQUFBLEVBQUEraUMsR0FFQSxFQUFBeEMsRUFBQXZnQyxTQUFBQSxFQUFBLEdBQUF5WixFQUFBLElBQUFBLEVBQUE3VSxLQUFBNUUsT0FDQSxNQUFBLElBQUFrZ0MsV0FBQSwwQ0FHQU0sRUFBQUEsR0FBQSxPQUdBLElBREEsSUE1Q0FMLEVBQUExbUIsRUFBQXpaLEVBWkFtZ0MsRUFBQTFtQixFQUFBelosRUF3REE4aEMsR0FBQSxJQUVBLE9BQUF0QixHQUNBLElBQUEsTUFDQSxPQUFBcUMsRUFBQWorQixLQUFBMjdCLEVBQUE5bUIsRUFBQXpaLEdBRUEsSUFBQSxPQUNBLElBQUEsUUFDQSxPQWhFQXlaLEVBZ0VBQSxFQWhFQXpaLEVBZ0VBQSxFQS9EQW1qQyxFQUFBcEIsRUErREF4QixHQWhFQUosRUFnRUF2N0IsTUEvREE1RSxPQUFBeVosR0FBQTBtQixFQUFBMW1CLEVBQUF6WixHQWlFQSxJQUFBLFFBQ0EsT0FBQWtqQyxFQUFBdCtCLEtBQUEyN0IsRUFBQTltQixFQUFBelosR0FFQSxJQUFBLFNBQ0EsSUFBQSxTQUNBLE9BOURBa2pDLEVBOERBdCtCLEtBQUEyN0IsRUFBQTltQixFQUFBelosR0FFQSxJQUFBLFNBRUEsT0EvREFtZ0MsRUErREF2N0IsS0EvREE2VSxFQStEQUEsRUEvREF6WixFQStEQUEsRUE5REFtakMsRUFBQW5CLEVBOERBekIsR0E5REFKLEVBQUExbUIsRUFBQXpaLEdBZ0VBLElBQUEsT0FDQSxJQUFBLFFBQ0EsSUFBQSxVQUNBLElBQUEsV0FDQSxPQUFBc2pDLEVBQUExK0IsS0FBQTI3QixFQUFBOW1CLEVBQUF6WixHQUVBLFFBQ0EsR0FBQThoQyxFQUFBLE1BQUEsSUFBQTl6QixVQUFBLHFCQUFBd3lCLEdBQ0FBLEdBQUEsR0FBQUEsR0FBQW5qQixjQUNBeWtCLEdBQUEsSUFLQXR3QixFQUFBakosVUFBQTQ5QixPQUFBLFdBQ0EsTUFBQSxDQUNBamdDLEtBQUEsU0FDQW9MLEtBQUFwSSxNQUFBWCxVQUFBMkosTUFBQW5TLEtBQUE2RSxLQUFBd2hDLE1BQUF4aEMsS0FBQSxLQXdGQSxJQUFBMC9CLEVBQUEsS0FvQkEsU0FBQWlCLEVBQUFwRixFQUFBLzlCLEVBQUE2cEIsR0FDQSxJQUFBb2EsRUFBQSxHQUNBcGEsRUFBQW9HLEtBQUE2RCxJQUFBaUssRUFBQW5nQyxPQUFBaXNCLEdBRUEsSUFBQSxJQUFBNXNCLEVBQUErQyxFQUFBL0MsRUFBQTRzQixJQUFBNXNCLEVBQ0FnbkMsR0FBQXIwQixPQUFBQyxhQUFBLElBQUFrdUIsRUFBQTlnQyxJQUVBLE9BQUFnbkMsRUFHQSxTQUFBYixFQUFBckYsRUFBQS85QixFQUFBNnBCLEdBQ0EsSUFBQW9hLEVBQUEsR0FDQXBhLEVBQUFvRyxLQUFBNkQsSUFBQWlLLEVBQUFuZ0MsT0FBQWlzQixHQUVBLElBQUEsSUFBQTVzQixFQUFBK0MsRUFBQS9DLEVBQUE0c0IsSUFBQTVzQixFQUNBZ25DLEdBQUFyMEIsT0FBQUMsYUFBQWt1QixFQUFBOWdDLElBRUEsT0FBQWduQyxFQUdBLFNBQUFmLEVBQUFuRixFQUFBLzlCLEVBQUE2cEIsR0FDQSxJQUFBbUcsRUFBQStOLEVBQUFuZ0MsU0FFQW9DLEdBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUNBNnBCLEdBQUFBLEVBQUEsR0FBQW1HLEVBQUFuRyxLQUFBQSxFQUFBbUcsR0FHQSxJQURBLElBQUFrVSxFQUFBLEdBQ0FqbkMsRUFBQStDLEVBQUEvQyxFQUFBNHNCLElBQUE1c0IsRUFDQWluQyxHQUFBQyxFQUFBcEcsRUFBQTlnQyxJQUVBLE9BQUFpbkMsRUFHQSxTQUFBYixFQUFBdEYsRUFBQS85QixFQUFBNnBCLEdBR0EsSUFGQSxJQUFBdWEsRUFBQXJHLEVBQUFqdUIsTUFBQTlQLEVBQUE2cEIsR0FDQTRYLEVBQUEsR0FDQXhrQyxFQUFBLEVBQUFBLEVBQUFtbkMsRUFBQXhtQyxPQUFBWCxHQUFBLEVBQ0F3a0MsR0FBQTd4QixPQUFBQyxhQUFBdTBCLEVBQUFubkMsR0FBQSxJQUFBbW5DLEVBQUFubkMsRUFBQSxJQUVBLE9BQUF3a0MsRUFrQ0EsU0FBQTRDLEVBQUFodEIsRUFBQWl0QixFQUFBMW1DLEdBQ0EsR0FBQXlaLEVBQUEsR0FBQSxHQUFBQSxFQUFBLEVBQUEsTUFBQSxJQUFBeW1CLFdBQUEsc0JBQ0EsR0FBQWxnQyxFQUFBeVosRUFBQWl0QixFQUFBLE1BQUEsSUFBQXhHLFdBQUEseUNBNktBLFNBQUF5RyxFQUFBeEcsRUFBQXo5QixFQUFBK1csRUFBQWl0QixFQUFBbFIsRUFBQVUsR0FDQSxJQUFBMWtCLEVBQUEydkIsU0FBQWhCLEdBQUEsTUFBQSxJQUFBbnlCLFVBQUEsK0NBQ0EsR0FBQXduQixFQUFBOXlCLEdBQUFBLEVBQUF3ekIsRUFBQSxNQUFBLElBQUFnSyxXQUFBLHFDQUNBLEdBQUF6bUIsRUFBQWl0QixFQUFBdkcsRUFBQW5nQyxPQUFBLE1BQUEsSUFBQWtnQyxXQUFBLHNCQXlMQSxTQUFBMEcsRUFBQXpHLEVBQUF6OUIsRUFBQStXLEVBQUFpdEIsR0FDQSxHQUFBanRCLEVBQUFpdEIsRUFBQXZHLEVBQUFuZ0MsT0FBQSxNQUFBLElBQUFrZ0MsV0FBQSxzQkFDQSxHQUFBem1CLEVBQUEsRUFBQSxNQUFBLElBQUF5bUIsV0FBQSxzQkFHQSxTQUFBMkcsRUFBQTFHLEVBQUF6OUIsRUFBQStXLEVBQUFxdEIsRUFBQUMsR0FPQSxPQU5BcmtDLEdBQUFBLEVBQ0ErVyxLQUFBLEVBQ0FzdEIsR0FDQUgsRUFBQXpHLEVBQUF6OUIsRUFBQStXLEVBQUEsR0FFQWltQixFQUFBdnVCLE1BQUFndkIsRUFBQXo5QixFQUFBK1csRUFBQXF0QixFQUFBLEdBQUEsR0FDQXJ0QixFQUFBLEVBV0EsU0FBQXV0QixFQUFBN0csRUFBQXo5QixFQUFBK1csRUFBQXF0QixFQUFBQyxHQU9BLE9BTkFya0MsR0FBQUEsRUFDQStXLEtBQUEsRUFDQXN0QixHQUNBSCxFQUFBekcsRUFBQXo5QixFQUFBK1csRUFBQSxHQUVBaW1CLEVBQUF2dUIsTUFBQWd2QixFQUFBejlCLEVBQUErVyxFQUFBcXRCLEVBQUEsR0FBQSxHQUNBcnRCLEVBQUEsRUF4YUFqSSxFQUFBakosVUFBQTJKLE1BQUEsU0FBQTlQLEVBQUE2cEIsR0FDQSxJQUFBbUcsRUFBQXh0QixLQUFBNUUsUUFDQW9DLElBQUFBLEdBR0EsR0FDQUEsR0FBQWd3QixHQUNBLElBQUFod0IsRUFBQSxHQUNBZ3dCLEVBQUFod0IsSUFDQUEsRUFBQWd3QixJQU5BbkcsT0FBQXhnQixJQUFBd2dCLEVBQUFtRyxJQUFBbkcsR0FTQSxHQUNBQSxHQUFBbUcsR0FDQSxJQUFBbkcsRUFBQSxHQUNBbUcsRUFBQW5HLElBQ0FBLEVBQUFtRyxHQUdBbkcsRUFBQTdwQixJQUFBNnBCLEVBQUE3cEIsR0FFQSxJQUFBNmtDLEVBQUFyaUMsS0FBQXNpQyxTQUFBOWtDLEVBQUE2cEIsR0FJQSxPQUZBN2pCLE9BQUFZLGVBQUFpK0IsRUFBQXoxQixFQUFBakosV0FFQTArQixHQVdBejFCLEVBQUFqSixVQUFBNCtCLFdBQUEsU0FBQTF0QixFQUFBckgsRUFBQTIwQixHQUNBdHRCLEtBQUEsRUFDQXJILEtBQUEsRUFDQTIwQixHQUFBTixFQUFBaHRCLEVBQUFySCxFQUFBeE4sS0FBQTVFLFFBS0EsSUFIQSxJQUFBdWxCLEVBQUEzZ0IsS0FBQTZVLEdBQ0EydEIsRUFBQSxFQUNBL25DLEVBQUEsSUFDQUEsRUFBQStTLElBQUFnMUIsR0FBQSxNQUNBN2hCLEdBQUEzZ0IsS0FBQTZVLEVBQUFwYSxHQUFBK25DLEVBR0EsT0FBQTdoQixHQUdBL1QsRUFBQWpKLFVBQUE4K0IsV0FBQSxTQUFBNXRCLEVBQUFySCxFQUFBMjBCLEdBQ0F0dEIsS0FBQSxFQUNBckgsS0FBQSxFQUNBMjBCLEdBQ0FOLEVBQUFodEIsRUFBQXJILEVBQUF4TixLQUFBNUUsUUFLQSxJQUZBLElBQUF1bEIsRUFBQTNnQixLQUFBNlUsSUFBQXJILEdBQ0FnMUIsRUFBQSxFQUNBLEVBQUFoMUIsSUFBQWcxQixHQUFBLE1BQ0E3aEIsR0FBQTNnQixLQUFBNlUsSUFBQXJILEdBQUFnMUIsRUFHQSxPQUFBN2hCLEdBR0EvVCxFQUFBakosVUFBQSsrQixVQUFBLFNBQUE3dEIsRUFBQXN0QixHQUdBLE9BRkF0dEIsS0FBQSxFQUNBc3RCLEdBQUFOLEVBQUFodEIsRUFBQSxFQUFBN1UsS0FBQTVFLFFBQ0E0RSxLQUFBNlUsSUFHQWpJLEVBQUFqSixVQUFBZy9CLGFBQUEsU0FBQTl0QixFQUFBc3RCLEdBR0EsT0FGQXR0QixLQUFBLEVBQ0FzdEIsR0FBQU4sRUFBQWh0QixFQUFBLEVBQUE3VSxLQUFBNUUsUUFDQTRFLEtBQUE2VSxHQUFBN1UsS0FBQTZVLEVBQUEsSUFBQSxHQUdBakksRUFBQWpKLFVBQUFrNkIsYUFBQSxTQUFBaHBCLEVBQUFzdEIsR0FHQSxPQUZBdHRCLEtBQUEsRUFDQXN0QixHQUFBTixFQUFBaHRCLEVBQUEsRUFBQTdVLEtBQUE1RSxRQUNBNEUsS0FBQTZVLElBQUEsRUFBQTdVLEtBQUE2VSxFQUFBLElBR0FqSSxFQUFBakosVUFBQWkvQixhQUFBLFNBQUEvdEIsRUFBQXN0QixHQUlBLE9BSEF0dEIsS0FBQSxFQUNBc3RCLEdBQUFOLEVBQUFodEIsRUFBQSxFQUFBN1UsS0FBQTVFLFNBRUE0RSxLQUFBNlUsR0FDQTdVLEtBQUE2VSxFQUFBLElBQUEsRUFDQTdVLEtBQUE2VSxFQUFBLElBQUEsSUFDQSxTQUFBN1UsS0FBQTZVLEVBQUEsSUFHQWpJLEVBQUFqSixVQUFBay9CLGFBQUEsU0FBQWh1QixFQUFBc3RCLEdBSUEsT0FIQXR0QixLQUFBLEVBQ0FzdEIsR0FBQU4sRUFBQWh0QixFQUFBLEVBQUE3VSxLQUFBNUUsUUFFQSxTQUFBNEUsS0FBQTZVLElBQ0E3VSxLQUFBNlUsRUFBQSxJQUFBLEdBQ0E3VSxLQUFBNlUsRUFBQSxJQUFBLEVBQ0E3VSxLQUFBNlUsRUFBQSxLQUdBakksRUFBQWpKLFVBQUFtL0IsVUFBQSxTQUFBanVCLEVBQUFySCxFQUFBMjBCLEdBQ0F0dEIsS0FBQSxFQUNBckgsS0FBQSxFQUNBMjBCLEdBQUFOLEVBQUFodEIsRUFBQXJILEVBQUF4TixLQUFBNUUsUUFLQSxJQUhBLElBQUF1bEIsRUFBQTNnQixLQUFBNlUsR0FDQTJ0QixFQUFBLEVBQ0EvbkMsRUFBQSxJQUNBQSxFQUFBK1MsSUFBQWcxQixHQUFBLE1BQ0E3aEIsR0FBQTNnQixLQUFBNlUsRUFBQXBhLEdBQUErbkMsRUFNQSxPQUpBQSxHQUFBLE1BRUE3aEIsSUFBQUEsR0FBQThNLEtBQUFzVixJQUFBLEVBQUEsRUFBQXYxQixJQUVBbVQsR0FHQS9ULEVBQUFqSixVQUFBcS9CLFVBQUEsU0FBQW51QixFQUFBckgsRUFBQTIwQixHQUNBdHRCLEtBQUEsRUFDQXJILEtBQUEsRUFDQTIwQixHQUFBTixFQUFBaHRCLEVBQUFySCxFQUFBeE4sS0FBQTVFLFFBS0EsSUFIQSxJQUFBWCxFQUFBK1MsRUFDQWcxQixFQUFBLEVBQ0E3aEIsRUFBQTNnQixLQUFBNlUsSUFBQXBhLEdBQ0EsRUFBQUEsSUFBQStuQyxHQUFBLE1BQ0E3aEIsR0FBQTNnQixLQUFBNlUsSUFBQXBhLEdBQUErbkMsRUFNQSxPQUpBQSxHQUFBLE1BRUE3aEIsSUFBQUEsR0FBQThNLEtBQUFzVixJQUFBLEVBQUEsRUFBQXYxQixJQUVBbVQsR0FHQS9ULEVBQUFqSixVQUFBcy9CLFNBQUEsU0FBQXB1QixFQUFBc3RCLEdBR0EsT0FGQXR0QixLQUFBLEVBQ0FzdEIsR0FBQU4sRUFBQWh0QixFQUFBLEVBQUE3VSxLQUFBNUUsUUFDQSxJQUFBNEUsS0FBQTZVLElBQ0EsR0FBQSxJQUFBN1UsS0FBQTZVLEdBQUEsR0FEQTdVLEtBQUE2VSxJQUlBakksRUFBQWpKLFVBQUF1L0IsWUFBQSxTQUFBcnVCLEVBQUFzdEIsR0FDQXR0QixLQUFBLEVBQ0FzdEIsR0FBQU4sRUFBQWh0QixFQUFBLEVBQUE3VSxLQUFBNUUsUUFDQSxJQUFBdWxCLEVBQUEzZ0IsS0FBQTZVLEdBQUE3VSxLQUFBNlUsRUFBQSxJQUFBLEVBQ0EsT0FBQSxNQUFBOEwsRUFBQSxXQUFBQSxFQUFBQSxHQUdBL1QsRUFBQWpKLFVBQUF3L0IsWUFBQSxTQUFBdHVCLEVBQUFzdEIsR0FDQXR0QixLQUFBLEVBQ0FzdEIsR0FBQU4sRUFBQWh0QixFQUFBLEVBQUE3VSxLQUFBNUUsUUFDQSxJQUFBdWxCLEVBQUEzZ0IsS0FBQTZVLEVBQUEsR0FBQTdVLEtBQUE2VSxJQUFBLEVBQ0EsT0FBQSxNQUFBOEwsRUFBQSxXQUFBQSxFQUFBQSxHQUdBL1QsRUFBQWpKLFVBQUF5L0IsWUFBQSxTQUFBdnVCLEVBQUFzdEIsR0FJQSxPQUhBdHRCLEtBQUEsRUFDQXN0QixHQUFBTixFQUFBaHRCLEVBQUEsRUFBQTdVLEtBQUE1RSxRQUVBNEUsS0FBQTZVLEdBQ0E3VSxLQUFBNlUsRUFBQSxJQUFBLEVBQ0E3VSxLQUFBNlUsRUFBQSxJQUFBLEdBQ0E3VSxLQUFBNlUsRUFBQSxJQUFBLElBR0FqSSxFQUFBakosVUFBQTAvQixZQUFBLFNBQUF4dUIsRUFBQXN0QixHQUlBLE9BSEF0dEIsS0FBQSxFQUNBc3RCLEdBQUFOLEVBQUFodEIsRUFBQSxFQUFBN1UsS0FBQTVFLFFBRUE0RSxLQUFBNlUsSUFBQSxHQUNBN1UsS0FBQTZVLEVBQUEsSUFBQSxHQUNBN1UsS0FBQTZVLEVBQUEsSUFBQSxFQUNBN1UsS0FBQTZVLEVBQUEsSUFHQWpJLEVBQUFqSixVQUFBMi9CLFlBQUEsU0FBQXp1QixFQUFBc3RCLEdBR0EsT0FGQXR0QixLQUFBLEVBQ0FzdEIsR0FBQU4sRUFBQWh0QixFQUFBLEVBQUE3VSxLQUFBNUUsUUFDQTAvQixFQUFBOEMsS0FBQTU5QixLQUFBNlUsR0FBQSxFQUFBLEdBQUEsSUFHQWpJLEVBQUFqSixVQUFBNC9CLFlBQUEsU0FBQTF1QixFQUFBc3RCLEdBR0EsT0FGQXR0QixLQUFBLEVBQ0FzdEIsR0FBQU4sRUFBQWh0QixFQUFBLEVBQUE3VSxLQUFBNUUsUUFDQTAvQixFQUFBOEMsS0FBQTU5QixLQUFBNlUsR0FBQSxFQUFBLEdBQUEsSUFHQWpJLEVBQUFqSixVQUFBNi9CLGFBQUEsU0FBQTN1QixFQUFBc3RCLEdBR0EsT0FGQXR0QixLQUFBLEVBQ0FzdEIsR0FBQU4sRUFBQWh0QixFQUFBLEVBQUE3VSxLQUFBNUUsUUFDQTAvQixFQUFBOEMsS0FBQTU5QixLQUFBNlUsR0FBQSxFQUFBLEdBQUEsSUFHQWpJLEVBQUFqSixVQUFBOC9CLGFBQUEsU0FBQTV1QixFQUFBc3RCLEdBR0EsT0FGQXR0QixLQUFBLEVBQ0FzdEIsR0FBQU4sRUFBQWh0QixFQUFBLEVBQUE3VSxLQUFBNUUsUUFDQTAvQixFQUFBOEMsS0FBQTU5QixLQUFBNlUsR0FBQSxFQUFBLEdBQUEsSUFTQWpJLEVBQUFqSixVQUFBKy9CLFlBQUEsU0FBQTVsQyxFQUFBK1csRUFBQXJILEVBQUEyMEIsR0FDQXJrQyxHQUFBQSxFQUNBK1csS0FBQSxFQUNBckgsS0FBQSxFQUNBMjBCLEdBRUFKLEVBQUEvaEMsS0FBQWxDLEVBQUErVyxFQUFBckgsRUFEQWlnQixLQUFBc1YsSUFBQSxFQUFBLEVBQUF2MUIsR0FBQSxFQUNBLEdBR0EsSUFBQWcxQixFQUFBLEVBQ0EvbkMsRUFBQSxFQUVBLElBREF1RixLQUFBNlUsR0FBQSxJQUFBL1csSUFDQXJELEVBQUErUyxJQUFBZzFCLEdBQUEsTUFDQXhpQyxLQUFBNlUsRUFBQXBhLEdBQUFxRCxFQUFBMGtDLEVBQUEsSUFHQSxPQUFBM3RCLEVBQUFySCxHQUdBWixFQUFBakosVUFBQWdnQyxZQUFBLFNBQUE3bEMsRUFBQStXLEVBQUFySCxFQUFBMjBCLEdBQ0Fya0MsR0FBQUEsRUFDQStXLEtBQUEsRUFDQXJILEtBQUEsRUFDQTIwQixHQUVBSixFQUFBL2hDLEtBQUFsQyxFQUFBK1csRUFBQXJILEVBREFpZ0IsS0FBQXNWLElBQUEsRUFBQSxFQUFBdjFCLEdBQUEsRUFDQSxHQUdBLElBQUEvUyxFQUFBK1MsRUFBQSxFQUNBZzFCLEVBQUEsRUFFQSxJQURBeGlDLEtBQUE2VSxFQUFBcGEsR0FBQSxJQUFBcUQsRUFDQSxLQUFBckQsSUFBQStuQyxHQUFBLE1BQ0F4aUMsS0FBQTZVLEVBQUFwYSxHQUFBcUQsRUFBQTBrQyxFQUFBLElBR0EsT0FBQTN0QixFQUFBckgsR0FHQVosRUFBQWpKLFVBQUFpZ0MsV0FBQSxTQUFBOWxDLEVBQUErVyxFQUFBc3RCLEdBS0EsT0FKQXJrQyxHQUFBQSxFQUNBK1csS0FBQSxFQUNBc3RCLEdBQUFKLEVBQUEvaEMsS0FBQWxDLEVBQUErVyxFQUFBLEVBQUEsSUFBQSxHQUNBN1UsS0FBQTZVLEdBQUEsSUFBQS9XLEVBQ0ErVyxFQUFBLEdBR0FqSSxFQUFBakosVUFBQWtnQyxjQUFBLFNBQUEvbEMsRUFBQStXLEVBQUFzdEIsR0FNQSxPQUxBcmtDLEdBQUFBLEVBQ0ErVyxLQUFBLEVBQ0FzdEIsR0FBQUosRUFBQS9oQyxLQUFBbEMsRUFBQStXLEVBQUEsRUFBQSxNQUFBLEdBQ0E3VSxLQUFBNlUsR0FBQSxJQUFBL1csRUFDQWtDLEtBQUE2VSxFQUFBLEdBQUEvVyxJQUFBLEVBQ0ErVyxFQUFBLEdBR0FqSSxFQUFBakosVUFBQW1nQyxjQUFBLFNBQUFobUMsRUFBQStXLEVBQUFzdEIsR0FNQSxPQUxBcmtDLEdBQUFBLEVBQ0ErVyxLQUFBLEVBQ0FzdEIsR0FBQUosRUFBQS9oQyxLQUFBbEMsRUFBQStXLEVBQUEsRUFBQSxNQUFBLEdBQ0E3VSxLQUFBNlUsR0FBQS9XLElBQUEsRUFDQWtDLEtBQUE2VSxFQUFBLEdBQUEsSUFBQS9XLEVBQ0ErVyxFQUFBLEdBR0FqSSxFQUFBakosVUFBQW9nQyxjQUFBLFNBQUFqbUMsRUFBQStXLEVBQUFzdEIsR0FRQSxPQVBBcmtDLEdBQUFBLEVBQ0ErVyxLQUFBLEVBQ0FzdEIsR0FBQUosRUFBQS9oQyxLQUFBbEMsRUFBQStXLEVBQUEsRUFBQSxXQUFBLEdBQ0E3VSxLQUFBNlUsRUFBQSxHQUFBL1csSUFBQSxHQUNBa0MsS0FBQTZVLEVBQUEsR0FBQS9XLElBQUEsR0FDQWtDLEtBQUE2VSxFQUFBLEdBQUEvVyxJQUFBLEVBQ0FrQyxLQUFBNlUsR0FBQSxJQUFBL1csRUFDQStXLEVBQUEsR0FHQWpJLEVBQUFqSixVQUFBcWdDLGNBQUEsU0FBQWxtQyxFQUFBK1csRUFBQXN0QixHQVFBLE9BUEFya0MsR0FBQUEsRUFDQStXLEtBQUEsRUFDQXN0QixHQUFBSixFQUFBL2hDLEtBQUFsQyxFQUFBK1csRUFBQSxFQUFBLFdBQUEsR0FDQTdVLEtBQUE2VSxHQUFBL1csSUFBQSxHQUNBa0MsS0FBQTZVLEVBQUEsR0FBQS9XLElBQUEsR0FDQWtDLEtBQUE2VSxFQUFBLEdBQUEvVyxJQUFBLEVBQ0FrQyxLQUFBNlUsRUFBQSxHQUFBLElBQUEvVyxFQUNBK1csRUFBQSxHQUdBakksRUFBQWpKLFVBQUFzZ0MsV0FBQSxTQUFBbm1DLEVBQUErVyxFQUFBckgsRUFBQTIwQixHQUdBLElBQ0ErQixFQUhBcG1DLEdBQUFBLEVBQ0ErVyxLQUFBLEVBQ0FzdEIsR0FHQUosRUFBQS9oQyxLQUFBbEMsRUFBQStXLEVBQUFySCxHQUZBMDJCLEVBQUF6VyxLQUFBc1YsSUFBQSxFQUFBLEVBQUF2MUIsRUFBQSxJQUVBLEdBQUEwMkIsR0FHQSxJQUFBenBDLEVBQUEsRUFDQStuQyxFQUFBLEVBQ0EyQixFQUFBLEVBRUEsSUFEQW5rQyxLQUFBNlUsR0FBQSxJQUFBL1csSUFDQXJELEVBQUErUyxJQUFBZzFCLEdBQUEsTUFDQTFrQyxFQUFBLEdBQUEsSUFBQXFtQyxHQUFBLElBQUFua0MsS0FBQTZVLEVBQUFwYSxFQUFBLEtBQ0EwcEMsRUFBQSxHQUVBbmtDLEtBQUE2VSxFQUFBcGEsSUFBQXFELEVBQUEwa0MsR0FBQSxHQUFBMkIsRUFBQSxJQUdBLE9BQUF0dkIsRUFBQXJILEdBR0FaLEVBQUFqSixVQUFBeWdDLFdBQUEsU0FBQXRtQyxFQUFBK1csRUFBQXJILEVBQUEyMEIsR0FHQSxJQUNBK0IsRUFIQXBtQyxHQUFBQSxFQUNBK1csS0FBQSxFQUNBc3RCLEdBR0FKLEVBQUEvaEMsS0FBQWxDLEVBQUErVyxFQUFBckgsR0FGQTAyQixFQUFBelcsS0FBQXNWLElBQUEsRUFBQSxFQUFBdjFCLEVBQUEsSUFFQSxHQUFBMDJCLEdBR0EsSUFBQXpwQyxFQUFBK1MsRUFBQSxFQUNBZzFCLEVBQUEsRUFDQTJCLEVBQUEsRUFFQSxJQURBbmtDLEtBQUE2VSxFQUFBcGEsR0FBQSxJQUFBcUQsRUFDQSxLQUFBckQsSUFBQStuQyxHQUFBLE1BQ0Exa0MsRUFBQSxHQUFBLElBQUFxbUMsR0FBQSxJQUFBbmtDLEtBQUE2VSxFQUFBcGEsRUFBQSxLQUNBMHBDLEVBQUEsR0FFQW5rQyxLQUFBNlUsRUFBQXBhLElBQUFxRCxFQUFBMGtDLEdBQUEsR0FBQTJCLEVBQUEsSUFHQSxPQUFBdHZCLEVBQUFySCxHQUdBWixFQUFBakosVUFBQTBnQyxVQUFBLFNBQUF2bUMsRUFBQStXLEVBQUFzdEIsR0FNQSxPQUxBcmtDLEdBQUFBLEVBQ0ErVyxLQUFBLEVBQ0FzdEIsR0FBQUosRUFBQS9oQyxLQUFBbEMsRUFBQStXLEVBQUEsRUFBQSxLQUFBLEtBQ0EvVyxFQUFBLElBQUFBLEVBQUEsSUFBQUEsRUFBQSxHQUNBa0MsS0FBQTZVLEdBQUEsSUFBQS9XLEVBQ0ErVyxFQUFBLEdBR0FqSSxFQUFBakosVUFBQTJnQyxhQUFBLFNBQUF4bUMsRUFBQStXLEVBQUFzdEIsR0FNQSxPQUxBcmtDLEdBQUFBLEVBQ0ErVyxLQUFBLEVBQ0FzdEIsR0FBQUosRUFBQS9oQyxLQUFBbEMsRUFBQStXLEVBQUEsRUFBQSxPQUFBLE9BQ0E3VSxLQUFBNlUsR0FBQSxJQUFBL1csRUFDQWtDLEtBQUE2VSxFQUFBLEdBQUEvVyxJQUFBLEVBQ0ErVyxFQUFBLEdBR0FqSSxFQUFBakosVUFBQTRnQyxhQUFBLFNBQUF6bUMsRUFBQStXLEVBQUFzdEIsR0FNQSxPQUxBcmtDLEdBQUFBLEVBQ0ErVyxLQUFBLEVBQ0FzdEIsR0FBQUosRUFBQS9oQyxLQUFBbEMsRUFBQStXLEVBQUEsRUFBQSxPQUFBLE9BQ0E3VSxLQUFBNlUsR0FBQS9XLElBQUEsRUFDQWtDLEtBQUE2VSxFQUFBLEdBQUEsSUFBQS9XLEVBQ0ErVyxFQUFBLEdBR0FqSSxFQUFBakosVUFBQTZnQyxhQUFBLFNBQUExbUMsRUFBQStXLEVBQUFzdEIsR0FRQSxPQVBBcmtDLEdBQUFBLEVBQ0ErVyxLQUFBLEVBQ0FzdEIsR0FBQUosRUFBQS9oQyxLQUFBbEMsRUFBQStXLEVBQUEsRUFBQSxZQUFBLFlBQ0E3VSxLQUFBNlUsR0FBQSxJQUFBL1csRUFDQWtDLEtBQUE2VSxFQUFBLEdBQUEvVyxJQUFBLEVBQ0FrQyxLQUFBNlUsRUFBQSxHQUFBL1csSUFBQSxHQUNBa0MsS0FBQTZVLEVBQUEsR0FBQS9XLElBQUEsR0FDQStXLEVBQUEsR0FHQWpJLEVBQUFqSixVQUFBOGdDLGFBQUEsU0FBQTNtQyxFQUFBK1csRUFBQXN0QixHQVNBLE9BUkFya0MsR0FBQUEsRUFDQStXLEtBQUEsRUFDQXN0QixHQUFBSixFQUFBL2hDLEtBQUFsQyxFQUFBK1csRUFBQSxFQUFBLFlBQUEsWUFDQS9XLEVBQUEsSUFBQUEsRUFBQSxXQUFBQSxFQUFBLEdBQ0FrQyxLQUFBNlUsR0FBQS9XLElBQUEsR0FDQWtDLEtBQUE2VSxFQUFBLEdBQUEvVyxJQUFBLEdBQ0FrQyxLQUFBNlUsRUFBQSxHQUFBL1csSUFBQSxFQUNBa0MsS0FBQTZVLEVBQUEsR0FBQSxJQUFBL1csRUFDQStXLEVBQUEsR0FrQkFqSSxFQUFBakosVUFBQStnQyxhQUFBLFNBQUE1bUMsRUFBQStXLEVBQUFzdEIsR0FDQSxPQUFBRixFQUFBamlDLEtBQUFsQyxFQUFBK1csR0FBQSxFQUFBc3RCLElBR0F2MUIsRUFBQWpKLFVBQUFnaEMsYUFBQSxTQUFBN21DLEVBQUErVyxFQUFBc3RCLEdBQ0EsT0FBQUYsRUFBQWppQyxLQUFBbEMsRUFBQStXLEdBQUEsRUFBQXN0QixJQWFBdjFCLEVBQUFqSixVQUFBaWhDLGNBQUEsU0FBQTltQyxFQUFBK1csRUFBQXN0QixHQUNBLE9BQUFDLEVBQUFwaUMsS0FBQWxDLEVBQUErVyxHQUFBLEVBQUFzdEIsSUFHQXYxQixFQUFBakosVUFBQWtoQyxjQUFBLFNBQUEvbUMsRUFBQStXLEVBQUFzdEIsR0FDQSxPQUFBQyxFQUFBcGlDLEtBQUFsQyxFQUFBK1csR0FBQSxFQUFBc3RCLElBSUF2MUIsRUFBQWpKLFVBQUE4NEIsS0FBQSxTQUFBejdCLEVBQUE4akMsRUFBQXRuQyxFQUFBNnBCLEdBQ0EsSUFBQXphLEVBQUEydkIsU0FBQXY3QixHQUFBLE1BQUEsSUFBQW9JLFVBQUEsK0JBUUEsR0FQQTVMLEVBQUFBLEdBQUEsRUFDQTZwQixHQUFBLElBQUFBLElBQUFBLEVBQUFybkIsS0FBQTVFLFFBQ0EwcEMsR0FBQTlqQyxFQUFBNUYsU0FBQTBwQyxFQUFBOWpDLEVBQUE1RixRQUNBMHBDLEVBQUFBLEdBQUEsRUFDQSxFQUFBemQsR0FBQUEsRUFBQTdwQixJQUFBNnBCLEVBQUE3cEIsR0FHQTZwQixJQUFBN3BCLEVBQUEsT0FBQSxFQUNBLEdBQUEsSUFBQXdELEVBQUE1RixRQUFBLElBQUE0RSxLQUFBNUUsT0FBQSxPQUFBLEVBR0EsR0FBQTBwQyxFQUFBLEVBQ0EsTUFBQSxJQUFBeEosV0FBQSw2QkFFQSxHQUFBOTlCLEVBQUEsR0FBQUEsR0FBQXdDLEtBQUE1RSxPQUFBLE1BQUEsSUFBQWtnQyxXQUFBLHNCQUNBLEdBQUFqVSxFQUFBLEVBQUEsTUFBQSxJQUFBaVUsV0FBQSwyQkFHQWpVLEVBQUFybkIsS0FBQTVFLFNBQUFpc0IsRUFBQXJuQixLQUFBNUUsUUFDQTRGLEVBQUE1RixPQUFBMHBDLEVBQUF6ZCxFQUFBN3BCLElBQ0E2cEIsRUFBQXJtQixFQUFBNUYsT0FBQTBwQyxFQUFBdG5DLEdBR0EsSUFBQWd3QixFQUFBbkcsRUFBQTdwQixFQUVBLEdBQUF3QyxPQUFBZ0IsR0FBQSxtQkFBQThMLFdBQUFuSixVQUFBb2hDLFdBRUEva0MsS0FBQStrQyxXQUFBRCxFQUFBdG5DLEVBQUE2cEIsUUFDQSxHQUFBcm5CLE9BQUFnQixHQUFBeEQsRUFBQXNuQyxHQUFBQSxFQUFBemQsRUFFQSxJQUFBLElBQUE1c0IsRUFBQSt5QixFQUFBLEVBQUEsR0FBQS95QixJQUFBQSxFQUNBdUcsRUFBQXZHLEVBQUFxcUMsR0FBQTlrQyxLQUFBdkYsRUFBQStDLFFBR0FzUCxXQUFBbkosVUFBQXFSLElBQUE3WixLQUNBNkYsRUFDQWhCLEtBQUFzaUMsU0FBQTlrQyxFQUFBNnBCLEdBQ0F5ZCxHQUlBLE9BQUF0WCxHQU9BNWdCLEVBQUFqSixVQUFBdThCLEtBQUEsU0FBQXZmLEVBQUFuakIsRUFBQTZwQixFQUFBdVUsR0FFQSxHQUFBLGlCQUFBamIsRUFBQSxDQVNBLEdBUkEsaUJBQUFuakIsR0FDQW8rQixFQUFBcCtCLEVBQ0FBLEVBQUEsRUFDQTZwQixFQUFBcm5CLEtBQUE1RSxRQUNBLGlCQUFBaXNCLElBQ0F1VSxFQUFBdlUsRUFDQUEsRUFBQXJuQixLQUFBNUUsYUFFQXlMLElBQUErMEIsR0FBQSxpQkFBQUEsRUFDQSxNQUFBLElBQUF4eUIsVUFBQSw2QkFFQSxHQUFBLGlCQUFBd3lCLElBQUFodkIsRUFBQWl2QixXQUFBRCxHQUNBLE1BQUEsSUFBQXh5QixVQUFBLHFCQUFBd3lCLEdBRUEsSUFDQTVnQyxFQURBLElBQUEybEIsRUFBQXZsQixTQUNBSixFQUFBMmxCLEVBQUEwWixXQUFBLElBQ0EsU0FBQXVCLEdBQUE1Z0MsRUFBQSxLQUNBLFdBQUE0Z0MsS0FFQWpiLEVBQUEzbEIsUUFHQSxpQkFBQTJsQixFQUNBQSxHQUFBLElBQ0Esa0JBQUFBLElBQ0FBLEVBQUF1ZCxPQUFBdmQsSUFJQSxHQUFBbmpCLEVBQUEsR0FBQXdDLEtBQUE1RSxPQUFBb0MsR0FBQXdDLEtBQUE1RSxPQUFBaXNCLEVBQ0EsTUFBQSxJQUFBaVUsV0FBQSxzQkFHQSxHQUFBalUsR0FBQTdwQixFQUNBLE9BQUF3QyxLQVFBLElBQUF2RixFQUNBLEdBTkErQyxLQUFBLEVBQ0E2cEIsT0FBQXhnQixJQUFBd2dCLEVBQUFybkIsS0FBQTVFLE9BQUFpc0IsSUFBQSxFQUtBLGlCQUhBMUcsRUFBQUEsR0FBQSxHQUlBLElBQUFsbUIsRUFBQStDLEVBQUEvQyxFQUFBNHNCLElBQUE1c0IsRUFDQXVGLEtBQUF2RixHQUFBa21CLE1BRUEsQ0FDQSxJQUFBaWhCLEVBQUFoMUIsRUFBQTJ2QixTQUFBNWIsR0FDQUEsRUFDQS9ULEVBQUE2dUIsS0FBQTlhLEVBQUFpYixHQUNBcE8sRUFBQW9VLEVBQUF4bUMsT0FDQSxHQUFBLElBQUFveUIsRUFDQSxNQUFBLElBQUFwa0IsVUFBQSxjQUFBdVgsRUFDQSxxQ0FFQSxJQUFBbG1CLEVBQUEsRUFBQUEsRUFBQTRzQixFQUFBN3BCLElBQUEvQyxFQUNBdUYsS0FBQXZGLEVBQUErQyxHQUFBb2tDLEVBQUFubkMsRUFBQSt5QixHQUlBLE9BQUF4dEIsTUFNQSxJQUFBZ2xDLEVBQUEsb0JBZ0JBLFNBQUE3SCxFQUFBeEIsRUFBQWdELEdBRUEsSUFBQVksRUFEQVosRUFBQUEsR0FBQXNHLEVBQUFBLEVBTUEsSUFKQSxJQUFBN3BDLEVBQUF1Z0MsRUFBQXZnQyxPQUNBOHBDLEVBQUEsS0FDQXRELEVBQUEsR0FFQW5uQyxFQUFBLEVBQUFBLEVBQUFXLElBQUFYLEVBQUEsQ0FJQSxHQUFBLE9BSEE4a0MsRUFBQTVELEVBQUF0QixXQUFBNS9CLEtBR0E4a0MsRUFBQSxNQUFBLENBRUEsSUFBQTJGLEVBQUEsQ0FFQSxHQUFBLE1BQUEzRixFQUFBLEVBRUEsR0FBQVosR0FBQSxJQUFBaUQsRUFBQXQ0QixLQUFBLElBQUEsSUFBQSxLQUNBLFNBQ0EsR0FBQTdPLEVBQUEsSUFBQVcsRUFBQSxFQUVBLEdBQUF1akMsR0FBQSxJQUFBaUQsRUFBQXQ0QixLQUFBLElBQUEsSUFBQSxLQUNBLFNBSUE0N0IsRUFBQTNGLEVBRUEsU0FJQSxHQUFBQSxFQUFBLE1BQUEsRUFDQSxHQUFBWixHQUFBLElBQUFpRCxFQUFBdDRCLEtBQUEsSUFBQSxJQUFBLEtBQ0E0N0IsRUFBQTNGLEVBQ0EsU0FJQUEsRUFBQSxPQUFBMkYsRUFBQSxPQUFBLEdBQUEzRixFQUFBLFlBQ0EyRixJQUVBLEdBQUF2RyxHQUFBLElBQUFpRCxFQUFBdDRCLEtBQUEsSUFBQSxJQUFBLEtBTUEsR0FIQTQ3QixFQUFBLEtBR0EzRixFQUFBLElBQUEsQ0FDQSxLQUFBWixFQUFBLEVBQUEsTUFDQWlELEVBQUF0NEIsS0FBQWkyQixRQUNBLEdBQUFBLEVBQUEsS0FBQSxDQUNBLElBQUFaLEdBQUEsR0FBQSxFQUFBLE1BQ0FpRCxFQUFBdDRCLEtBQ0FpMkIsR0FBQSxFQUFBLElBQ0EsR0FBQUEsRUFBQSxVQUVBLEdBQUFBLEVBQUEsTUFBQSxDQUNBLElBQUFaLEdBQUEsR0FBQSxFQUFBLE1BQ0FpRCxFQUFBdDRCLEtBQ0FpMkIsR0FBQSxHQUFBLElBQ0FBLEdBQUEsRUFBQSxHQUFBLElBQ0EsR0FBQUEsRUFBQSxTQUVBLENBQUEsS0FBQUEsRUFBQSxTQVNBLE1BQUEsSUFBQXhrQyxNQUFBLHNCQVJBLElBQUE0akMsR0FBQSxHQUFBLEVBQUEsTUFDQWlELEVBQUF0NEIsS0FDQWkyQixHQUFBLEdBQUEsSUFDQUEsR0FBQSxHQUFBLEdBQUEsSUFDQUEsR0FBQSxFQUFBLEdBQUEsSUFDQSxHQUFBQSxFQUFBLE1BT0EsT0FBQXFDLEVBNEJBLFNBQUF4RSxFQUFBbmMsR0FDQSxPQUFBNFosRUFBQWQsWUF4SEEsU0FBQTlZLEdBTUEsSUFGQUEsR0FGQUEsRUFBQUEsRUFBQVIsTUFBQSxLQUFBLElBRUF1Z0IsT0FBQTMrQixRQUFBMmlDLEVBQUEsS0FFQTVwQyxPQUFBLEVBQUEsTUFBQSxHQUVBLEtBQUE2bEIsRUFBQTdsQixPQUFBLEdBQUEsR0FDQTZsQixHQUFBLElBRUEsT0FBQUEsRUE2R0Fra0IsQ0FBQWxrQixJQUdBLFNBQUFzZCxFQUFBNkcsRUFBQUMsRUFBQXh3QixFQUFBelosR0FDQSxJQUFBLElBQUFYLEVBQUEsRUFBQUEsRUFBQVcsS0FDQVgsRUFBQW9hLEdBQUF3d0IsRUFBQWpxQyxRQUFBWCxHQUFBMnFDLEVBQUFocUMsVUFEQVgsRUFFQTRxQyxFQUFBNXFDLEVBQUFvYSxHQUFBdXdCLEVBQUEzcUMsR0FFQSxPQUFBQSxFQU1BLFNBQUF5aEMsRUFBQUksRUFBQWg3QixHQUNBLE9BQUFnN0IsYUFBQWg3QixHQUNBLE1BQUFnN0IsR0FBQSxNQUFBQSxFQUFBMzNCLGFBQUEsTUFBQTIzQixFQUFBMzNCLFlBQUFvTSxNQUNBdXJCLEVBQUEzM0IsWUFBQW9NLE9BQUF6UCxFQUFBeVAsS0FFQSxTQUFBMnJCLEVBQUFKLEdBRUEsT0FBQUEsR0FBQUEsRUFLQSxJQUFBcUYsRUFBQSxXQUdBLElBRkEsSUFBQTJELEVBQUEsbUJBQ0FDLEVBQUEsSUFBQWpoQyxNQUFBLEtBQ0E3SixFQUFBLEVBQUFBLEVBQUEsS0FBQUEsRUFFQSxJQURBLElBQUErcUMsRUFBQSxHQUFBL3FDLEVBQ0F1akMsRUFBQSxFQUFBQSxFQUFBLEtBQUFBLEVBQ0F1SCxFQUFBQyxFQUFBeEgsR0FBQXNILEVBQUE3cUMsR0FBQTZxQyxFQUFBdEgsR0FHQSxPQUFBdUgsRUFUQSxLLDBGQ3Z2REFycUMsRUFBQTBpQyxLQUFBLFNBQUFud0IsRUFBQW9ILEVBQUE0d0IsRUFBQUMsRUFBQUMsR0FDQSxJQUFBdHJDLEVBQUFtZ0IsRUFDQW9yQixFQUFBLEVBQUFELEVBQUFELEVBQUEsRUFDQUcsR0FBQSxHQUFBRCxHQUFBLEVBQ0FFLEVBQUFELEdBQUEsRUFDQUUsR0FBQSxFQUNBdHJDLEVBQUFnckMsRUFBQUUsRUFBQSxFQUFBLEVBQ0FwaEMsRUFBQWtoQyxHQUFBLEVBQUEsRUFDQXArQixFQUFBb0csRUFBQW9ILEVBQUFwYSxHQU9BLElBTEFBLEdBQUE4SixFQUVBbEssRUFBQWdOLEdBQUEsSUFBQTArQixHQUFBLEVBQ0ExK0IsS0FBQTArQixFQUNBQSxHQUFBSCxFQUNBLEVBQUFHLEVBQUExckMsRUFBQSxJQUFBQSxFQUFBb1QsRUFBQW9ILEVBQUFwYSxHQUFBQSxHQUFBOEosRUFBQXdoQyxHQUFBLEdBS0EsSUFIQXZyQixFQUFBbmdCLEdBQUEsSUFBQTByQyxHQUFBLEVBQ0ExckMsS0FBQTByQyxFQUNBQSxHQUFBTCxFQUNBLEVBQUFLLEVBQUF2ckIsRUFBQSxJQUFBQSxFQUFBL00sRUFBQW9ILEVBQUFwYSxHQUFBQSxHQUFBOEosRUFBQXdoQyxHQUFBLEdBRUEsR0FBQSxJQUFBMXJDLEVBQ0FBLEVBQUEsRUFBQXlyQyxNQUNBLENBQUEsR0FBQXpyQyxJQUFBd3JDLEVBQ0EsT0FBQXJyQixFQUFBd3JCLElBQUFmLEVBQUFBLEdBQUE1OUIsR0FBQSxFQUFBLEdBRUFtVCxHQUFBaVQsS0FBQXNWLElBQUEsRUFBQTJDLEdBQ0FyckMsR0FBQXlyQyxFQUVBLE9BQUF6K0IsR0FBQSxFQUFBLEdBQUFtVCxFQUFBaVQsS0FBQXNWLElBQUEsRUFBQTFvQyxFQUFBcXJDLElBR0F4cUMsRUFBQXFSLE1BQUEsU0FBQWtCLEVBQUEzUCxFQUFBK1csRUFBQTR3QixFQUFBQyxFQUFBQyxHQUNBLElBQUF0ckMsRUFBQW1nQixFQUFBN2YsRUFDQWlyQyxFQUFBLEVBQUFELEVBQUFELEVBQUEsRUFDQUcsR0FBQSxHQUFBRCxHQUFBLEVBQ0FFLEVBQUFELEdBQUEsRUFDQUksRUFBQSxLQUFBUCxFQUFBalksS0FBQXNWLElBQUEsR0FBQSxJQUFBdFYsS0FBQXNWLElBQUEsR0FBQSxJQUFBLEVBQ0F0b0MsRUFBQWdyQyxFQUFBLEVBQUFFLEVBQUEsRUFDQXBoQyxFQUFBa2hDLEVBQUEsR0FBQSxFQUNBcCtCLEVBQUF2SixFQUFBLEdBQUEsSUFBQUEsR0FBQSxFQUFBQSxFQUFBLEVBQUEsRUFBQSxFQW1DQSxJQWpDQUEsRUFBQTJ2QixLQUFBeVksSUFBQXBvQyxHQUVBcW9DLE1BQUFyb0MsSUFBQUEsSUFBQW1uQyxFQUFBQSxHQUNBenFCLEVBQUEyckIsTUFBQXJvQyxHQUFBLEVBQUEsRUFDQXpELEVBQUF3ckMsSUFFQXhyQyxFQUFBb3pCLEtBQUFDLE1BQUFELEtBQUF2akIsSUFBQXBNLEdBQUEydkIsS0FBQTJZLEtBQ0F0b0MsR0FBQW5ELEVBQUE4eUIsS0FBQXNWLElBQUEsR0FBQTFvQyxJQUFBLElBQ0FBLElBQ0FNLEdBQUEsR0FPQSxJQUpBbUQsR0FEQSxHQUFBekQsRUFBQXlyQyxFQUNBRyxFQUFBdHJDLEVBRUFzckMsRUFBQXhZLEtBQUFzVixJQUFBLEVBQUEsRUFBQStDLElBRUFuckMsSUFDQU4sSUFDQU0sR0FBQSxHQUdBa3JDLEdBQUF4ckMsRUFBQXlyQyxHQUNBdHJCLEVBQUEsRUFDQW5nQixFQUFBd3JDLEdBQ0EsR0FBQXhyQyxFQUFBeXJDLEdBQ0F0ckIsR0FBQTFjLEVBQUFuRCxFQUFBLEdBQUE4eUIsS0FBQXNWLElBQUEsRUFBQTJDLEdBQ0FyckMsR0FBQXlyQyxJQUVBdHJCLEVBQUExYyxFQUFBMnZCLEtBQUFzVixJQUFBLEVBQUErQyxFQUFBLEdBQUFyWSxLQUFBc1YsSUFBQSxFQUFBMkMsR0FDQXJyQyxFQUFBLElBSUEsR0FBQXFyQyxFQUFBajRCLEVBQUFvSCxFQUFBcGEsR0FBQSxJQUFBK2YsRUFBQS9mLEdBQUE4SixFQUFBaVcsR0FBQSxJQUFBa3JCLEdBQUEsR0FJQSxJQUZBcnJDLEVBQUFBLEdBQUFxckMsRUFBQWxyQixFQUNBb3JCLEdBQUFGLEVBQ0EsRUFBQUUsRUFBQW40QixFQUFBb0gsRUFBQXBhLEdBQUEsSUFBQUosRUFBQUksR0FBQThKLEVBQUFsSyxHQUFBLElBQUF1ckMsR0FBQSxHQUVBbjRCLEVBQUFvSCxFQUFBcGEsRUFBQThKLElBQUEsSUFBQThDLEksd0JDakZBLElBT0FnL0IsRUFDQUMsRUFSQTFrQixFQUFBdG1CLEVBQUFKLFFBQUEsR0FVQSxTQUFBcXJDLElBQ0EsTUFBQSxJQUFBeHJDLE1BQUEsbUNBRUEsU0FBQXlyQyxJQUNBLE1BQUEsSUFBQXpyQyxNQUFBLHFDQXNCQSxTQUFBMHJDLEVBQUFDLEdBQ0EsR0FBQUwsSUFBQXA4QixXQUVBLE9BQUFBLFdBQUF5OEIsRUFBQSxHQUdBLElBQUFMLElBQUFFLElBQUFGLElBQUFwOEIsV0FFQSxPQURBbzhCLEVBQUFwOEIsV0FDQUEsV0FBQXk4QixFQUFBLEdBRUEsSUFFQSxPQUFBTCxFQUFBSyxFQUFBLEdBQ0EsTUFBQXJzQyxHQUNBLElBRUEsT0FBQWdzQyxFQUFBbHJDLEtBQUEsS0FBQXVyQyxFQUFBLEdBQ0EsTUFBQXJzQyxHQUVBLE9BQUFnc0MsRUFBQWxyQyxLQUFBNkUsS0FBQTBtQyxFQUFBLE1BdkNBLFdBQ0EsSUFFQUwsRUFEQSxtQkFBQXA4QixXQUNBQSxXQUVBczhCLEVBRUEsTUFBQWxzQyxHQUNBZ3NDLEVBQUFFLEVBRUEsSUFFQUQsRUFEQSxtQkFBQXY3QixhQUNBQSxhQUVBeTdCLEVBRUEsTUFBQW5zQyxHQUNBaXNDLEVBQUFFLEdBakJBLEdBd0VBLElBRUFHLEVBRkFDLEVBQUEsR0FDQUMsR0FBQSxFQUVBQyxHQUFBLEVBRUEsU0FBQUMsSUFDQUYsR0FBQUYsSUFHQUUsR0FBQSxFQUNBRixFQUFBdnJDLE9BQ0F3ckMsRUFBQUQsRUFBQTdwQyxPQUFBOHBDLEdBRUFFLEdBQUEsRUFFQUYsRUFBQXhyQyxRQUNBNHJDLEtBSUEsU0FBQUEsSUFDQSxJQUFBSCxFQUFBLENBR0EsSUFBQTc4QixFQUFBeThCLEVBQUFNLEdBQ0FGLEdBQUEsRUFHQSxJQURBLElBQUFyWixFQUFBb1osRUFBQXhyQyxPQUNBb3lCLEdBQUEsQ0FHQSxJQUZBbVosRUFBQUMsRUFDQUEsRUFBQSxLQUNBRSxFQUFBdFosR0FDQW1aLEdBQ0FBLEVBQUFHLEdBQUFHLE1BR0FILEdBQUEsRUFDQXRaLEVBQUFvWixFQUFBeHJDLE9BRUF1ckMsRUFBQSxLQUNBRSxHQUFBLEVBbkVBLFNBQUFLLEdBQ0EsR0FBQVosSUFBQXY3QixhQUVBLE9BQUFBLGFBQUFtOEIsR0FHQSxJQUFBWixJQUFBRSxJQUFBRixJQUFBdjdCLGFBRUEsT0FEQXU3QixFQUFBdjdCLGFBQ0FBLGFBQUFtOEIsR0FFQSxJQUVBWixFQUFBWSxHQUNBLE1BQUE3c0MsR0FDQSxJQUVBLE9BQUFpc0MsRUFBQW5yQyxLQUFBLEtBQUErckMsR0FDQSxNQUFBN3NDLEdBR0EsT0FBQWlzQyxFQUFBbnJDLEtBQUE2RSxLQUFBa25DLEtBZ0RBQyxDQUFBbjlCLElBaUJBLFNBQUFvOUIsRUFBQVYsRUFBQTNKLEdBQ0EvOEIsS0FBQTBtQyxJQUFBQSxFQUNBMW1DLEtBQUErOEIsTUFBQUEsRUFZQSxTQUFBc0ssS0E1QkF6bEIsRUFBQTBsQixTQUFBLFNBQUFaLEdBQ0EsSUFBQXp2QixFQUFBLElBQUEzUyxNQUFBZ0QsVUFBQWxNLE9BQUEsR0FDQSxHQUFBLEVBQUFrTSxVQUFBbE0sT0FDQSxJQUFBLElBQUFYLEVBQUEsRUFBQUEsRUFBQTZNLFVBQUFsTSxPQUFBWCxJQUNBd2MsRUFBQXhjLEVBQUEsR0FBQTZNLFVBQUE3TSxHQUdBbXNDLEVBQUF0OUIsS0FBQSxJQUFBODlCLEVBQUFWLEVBQUF6dkIsSUFDQSxJQUFBMnZCLEVBQUF4ckMsUUFBQXlyQyxHQUNBSixFQUFBTyxJQVNBSSxFQUFBempDLFVBQUFzakMsSUFBQSxXQUNBam5DLEtBQUEwbUMsSUFBQXYrQixNQUFBLEtBQUFuSSxLQUFBKzhCLFFBRUFuYixFQUFBbGhCLE1BQUEsVUFDQWtoQixFQUFBMmxCLFNBQUEsRUFDQTNsQixFQUFBc0osSUFBQSxHQUNBdEosRUFBQTRsQixLQUFBLEdBQ0E1bEIsRUFBQXRMLFFBQUEsR0FDQXNMLEVBQUFHLFNBQUEsR0FJQUgsRUFBQXJrQixHQUFBOHBDLEVBQ0F6bEIsRUFBQTZsQixZQUFBSixFQUNBemxCLEVBQUE4bEIsS0FBQUwsRUFDQXpsQixFQUFBakosSUFBQTB1QixFQUNBemxCLEVBQUErbEIsZUFBQU4sRUFDQXpsQixFQUFBZ21CLG1CQUFBUCxFQUNBemxCLEVBQUFpbUIsS0FBQVIsRUFDQXpsQixFQUFBa21CLGdCQUFBVCxFQUNBemxCLEVBQUFtbUIsb0JBQUFWLEVBRUF6bEIsRUFBQW9tQixVQUFBLFNBQUFqM0IsR0FBQSxNQUFBLElBRUE2USxFQUFBcW1CLFFBQUEsU0FBQWwzQixHQUNBLE1BQUEsSUFBQWhXLE1BQUEscUNBR0E2bUIsRUFBQXNtQixJQUFBLFdBQUEsTUFBQSxLQUNBdG1CLEVBQUF1bUIsTUFBQSxTQUFBNUssR0FDQSxNQUFBLElBQUF4aUMsTUFBQSxtQ0FFQTZtQixFQUFBd21CLE1BQUEsV0FBQSxPQUFBLEksbURDaExBNWtDLE9BQUFDLGVBQUF2SSxFQUFBLGFBQUEsQ0FBQTRDLE9BQUEsSUFFQSxJQUFBdXFDLEdBQUF6dEMsRUFBQSxrQkFFQTB0QyxHQUFBLENBQ0F2YixTQUFBLEdBR0F3YixHQUFBLFlBRUFDLEVBQUEsZ0JBQ0FDLEVBQUEsaUJBQ0FDLEVBQUEsY0FDQUMsRUFBQSxrQkFLQSxTQUFBQyxHQUFBOXFDLEVBQUE2VixFQUFBazFCLEdBQ0EsR0FBQXZrQyxNQUFBc1osUUFBQTlmLEdBQUEsQ0FDQSxJQUFBb0wsRUFBQXBMLEVBQUE2VixHQUNBLE9BQUEsTUFBQXpLLEVBQUE1RSxNQUFBc1osUUFBQWlyQixHQUFBQSxFQUFBbDFCLEdBQUFrMUIsRUFBQTMvQixFQUdBLE9BQUFwTCxFQUVBLFNBQUFnckMsRUFBQWhyQyxFQUFBd0QsR0FDQSxJQUFBMmYsRUFBQSxHQUFBL0YsU0FBQS9mLEtBQUEyQyxHQUNBLE9BQUEsSUFBQW1qQixFQUFBalUsUUFBQSxhQUFBLEVBQUFpVSxFQUFBalUsUUFBQTFMLEVBQUEsS0FFQSxTQUFBeW5DLEdBQUFqckMsRUFBQW1aLEdBQ0EsTUFBQSxtQkFBQW5aLEVBQUFBLEVBQUFxSyxXQUFBLEVBQUE4TyxHQUFBblosRUFFQSxTQUFBa3JDLEdBQUFwZixFQUFBcWYsR0FFQSxPQUFBLElBQUFBLEVBQ0FyZixFQUlBLFNBQUE5TixHQUNBL1EsYUFBQWYsR0FDQUEsRUFBQUMsV0FBQSxXQUNBMmYsRUFBQTlOLElBQ0FtdEIsSUFMQSxJQUFBai9CLEVBUUEsU0FBQWsvQixFQUFBNU0sRUFBQWpoQixHQUNBLElBQUE4dEIsRUFBQTNsQyxPQUFBNEQsT0FBQSxHQUFBazFCLEdBSUEsT0FIQWpoQixFQUFBZCxRQUFBLFNBQUFlLFVBQ0E2dEIsRUFBQTd0QixLQUVBNnRCLEVBS0EsU0FBQUMsR0FBQXRyQyxHQUNBLE1BQUEsR0FBQWhCLE9BQUFnQixHQUVBLFNBQUF1ckMsR0FBQTFlLEVBQUE3c0IsSUFDQSxJQUFBNnNCLEVBQUEzZCxRQUFBbFAsSUFDQTZzQixFQUFBcmhCLEtBQUF4TCxHQVFBLFNBQUFrckIsR0FBQWhtQixHQUNBLE9BQUFBLEVBQUF5ZCxNQUFBLEtBQUEsR0FFQSxTQUFBNm9CLEdBQUF4ckMsR0FDQSxNQUFBLEdBQUF3UCxNQUFBblMsS0FBQTJDLEdBR0EsU0FBQXlyQyxLQUNBLE9BQUE1dEMsU0FBQXdFLGNBQUEsT0FFQSxTQUFBd2tCLEVBQUE3bUIsR0FDQSxPQUFBZ3JDLEVBQUFockMsRUFBQSxXQUtBLFNBQUEwckMsR0FBQTFyQyxHQUNBLE9BQUFnckMsRUFBQWhyQyxFQUFBLGNBRUEsU0FBQTJyQyxFQUFBM3JDLEdBQ0EsT0FBQUEsR0FBQUEsRUFBQXJDLFFBQUFxQyxFQUFBckMsT0FBQWdzQixZQUFBM3BCLEVBRUEsU0FBQTRyQyxFQUFBNXJDLEdBQ0EsT0FBQTZtQixFQUFBN21CLEdBQ0EsQ0FBQUEsR0FWQWdyQyxFQWFBaHJDLEVBYkEsWUFjQXdyQyxHQUFBeHJDLEdBR0F3RyxNQUFBc1osUUFBQTlmLEdBQ0FBLEVBR0F3ckMsR0FBQTN0QyxTQUFBZ3VDLGlCQUFBN3JDLElBRUEsU0FBQThyQyxHQUFBQyxFQUFBL3JDLEdBQ0ErckMsRUFBQXR2QixRQUFBLFNBQUF1dkIsR0FDQUEsSUFDQUEsRUFBQWhuQyxNQUFBaW5DLG1CQUFBanNDLEVBQUEsUUFJQSxTQUFBa3NDLEdBQUFILEVBQUEvZixHQUNBK2YsRUFBQXR2QixRQUFBLFNBQUF1dkIsR0FDQUEsR0FDQUEsRUFBQTdWLGFBQUEsYUFBQW5LLEtBSUEsU0FBQW1nQixHQUFBQyxHQUNBLElBQ0F6bUIsRUFEQTJsQixHQUFBYyxHQUNBLEdBRUEsT0FBQXptQixHQUFBQSxFQUFBVSxlQUFBeG9CLFNBNEJBLFNBQUF3dUMsR0FBQUMsRUFBQUMsRUFBQUMsR0FDQSxJQUFBMWtDLEVBQUF5a0MsRUFBQSxnQkFHQSxDQUFBLGdCQUFBLHVCQUFBOXZCLFFBQUEsU0FBQXhjLEdBQ0Fxc0MsRUFBQXhrQyxHQUFBN0gsRUFBQXVzQyxLQUlBLElBQUFDLEdBQUEsQ0FDQUMsU0FBQSxHQUVBQyxFQUFBLEVBUUEsU0FBQUMsSUFDQUgsR0FBQUMsVUFJQUQsR0FBQUMsU0FBQSxFQUVBeHVDLE9BQUEydUMsYUFDQWh2QyxTQUFBa0MsaUJBQUEsWUFBQStzQyxJQVNBLFNBQUFBLElBQ0EsSUFBQTV2QixFQUFBMnZCLFlBQUEzdkIsTUFFQUEsRUFBQXl2QixFQUFBLEtBQ0FGLEdBQUFDLFNBQUEsRUFDQTd1QyxTQUFBODNCLG9CQUFBLFlBQUFtWCxJQUdBSCxFQUFBenZCLEVBU0EsU0FBQTZ2QixJQUNBLElBR0Evc0IsRUFIQWd0QixFQUFBbnZDLFNBQUFtdkMsY0FFQXJCLEVBQUFxQixLQUNBaHRCLEVBQUFndEIsRUFBQXJ2QyxPQUVBcXZDLEVBQUFDLE9BQUFqdEIsRUFBQWdNLE1BQUFraEIsV0FDQUYsRUFBQUMsUUFXQSxJQUFBdDNCLEVBQUEsb0JBQUF6WCxRQUFBLG9CQUFBTCxTQUNBc3ZDLEVBQUF4M0IsRUFBQWdkLFVBQUFwTyxVQUFBLEdBQ0E2b0IsR0FBQSxrQkFBQW5yQyxLQUFBa3JDLEdBQ0FFLEdBQUExM0IsR0FBQSxtQkFBQTFULEtBQUEwd0IsVUFBQTVPLFVBRUEsU0FBQXVwQixHQUFBeGxDLEdBRUEsTUFBQSxDQUFBQSxFQUFBLHNCQURBLFlBQUFBLEVBQUEsYUFBQSxLQUNBLDBDQUFBLHNDQUFBK0YsS0FBQSxLQUVBLFNBQUEwL0IsRUFBQXZ0QyxHQUdBLE9BQUFBLEVBQUF1RSxRQUZBLGFBRUEsS0FBQUEsUUFEQSxZQUNBLElBQUEyK0IsT0FPQSxTQUFBc0ssRUFBQWp0QyxHQUNBLE1BQUEsQ0FKQWd0QyxFQUFBLHlCQUFBQSxFQUlBaHRDLEdBSkEseUZBS0EsdURBQ0EsbUJBQ0EsbUJBU0EsU0FBQWt0QyxHQUFBQyxFQUFBbnRDLEdBQ0EsSUFDQW90QyxFQURBRCxJQUdBQyxFQUFBOXRDLFNBQUFpZixLQUFBelUsTUFBQXNqQyxFQUFBSCxFQUFBanRDLElBT0EsU0FBQXF0QyxHQUFBRixFQUFBbnRDLEdBQ0EsSUFDQXN0QyxFQURBSCxJQUdBRyxFQUFBaHVDLFNBQUFDLE1BQUF1SyxNQUFBd2pDLEVBQUFMLEVBQUFqdEMsSUFjQSxJQUFBdXRDLEVBQUEsQ0FDQUMsYUFBQSxFQUNBQyxjQUFBLEVBQ0FDLG1CQUFBLEVBQ0FDLFFBQUEsR0FhQUMsR0FBQXpvQyxPQUFBNEQsT0FBQSxDQUNBOGtDLFNBQUEsV0FDQSxPQUFBdndDLFNBQUEwTSxNQUVBOGpDLEtBQUEsQ0FDQS9zQyxRQUFBLE9BQ0FndEMsU0FBQSxRQUVBaHRDLFFBQUEsR0FDQWl0QyxNQUFBLEVBQ0FDLFNBQUEsQ0FBQSxJQUFBLEtBQ0FDLHVCQUFBLEtBQ0FDLGFBQUEsRUFDQUMsa0JBQUEsRUFDQUMsYUFBQSxFQUNBQyxrQkFBQSxFQUNBQyxvQkFBQSxFQUNBQyxlQUFBLEdBQ0FoNEIsT0FBQSxDQUFBLEVBQUEsSUFDQWk0QixjQUFBLGFBQ0FDLGVBQUEsYUFDQUMsU0FBQSxhQUNBQyxVQUFBLGFBQ0FDLFNBQUEsYUFDQUMsT0FBQSxhQUNBQyxRQUFBLGFBQ0FDLE9BQUEsYUFDQUMsUUFBQSxhQUNBQyxVQUFBLGFBQ0FDLFlBQUEsYUFDQUMsZUFBQSxhQUNBenFDLFVBQUEsTUFDQTBxQyxRQUFBLEdBQ0FDLGNBQUEsR0FDQUMsT0FBQSxLQUNBQyxjQUFBLEVBQ0FDLE9BQUEsRUFDQUMsUUFBQSxtQkFDQUMsY0FBQSxNQUNBcEMsRUFBQSxHQWxEQSxDQUNBM29DLFdBQUEsRUFDQWdyQyxVQUFBLE9BQ0FuYSxPQUFBLEVBQ0ExMEIsUUFBQSxHQUNBOHVDLFNBQUEsRUFDQUMsU0FBQSxJQUNBQyxLQUFBLFVBQ0FDLE1BQUEsR0FDQUMsT0FBQSxPQTBDQUMsRUFBQS9xQyxPQUFBNlgsS0FBQTR3QixJQVlBLFNBQUF1QyxHQUFBQyxHQUNBLElBQ0E3QyxHQURBNkMsRUFBQWYsU0FBQSxJQUNBOTRCLE9BQUEsU0FBQStTLEVBQUErbUIsR0FDQSxJQUFBMzlCLEVBQUEyOUIsRUFBQTM5QixLQUNBODNCLEVBQUE2RixFQUFBN0YsYUFNQSxPQUpBOTNCLElBQ0E0VyxFQUFBNVcsUUFBQWxLLElBQUE0bkMsRUFBQTE5QixHQUFBMDlCLEVBQUExOUIsR0FBQTgzQixHQUdBbGhCLEdBQ0EsSUFDQSxPQUFBbmtCLE9BQUE0RCxPQUFBLEdBQUFxbkMsRUFBQSxHQUFBN0MsR0EyQkEsU0FBQStDLEdBQUFsbkIsRUFBQW1uQixHQUNBLElBMUJBbm5CLEVBQUFpbUIsRUEwQkFoTSxFQUFBbCtCLE9BQUE0RCxPQUFBLEdBQUF3bkMsRUFBQSxDQUNBeHZDLFFBQUEycEMsR0FBQTZGLEVBQUF4dkMsUUFBQSxDQUFBcW9CLEtBQ0FtbkIsRUFBQW5DLGlCQUFBLElBNUJBaGxCLEVBNEJBQSxJQTVCQWltQixFQTRCQWtCLEVBQUFsQixTQTNCQWxxQyxPQUFBNlgsS0FBQW16QixHQUFBaHJDLE9BQUE0RCxPQUFBLEdBQUE2a0MsR0FBQSxDQUNBeUIsUUFBQUEsTUFDQWEsR0FDQTM1QixPQUFBLFNBQUErUyxFQUFBck0sR0FDQSxJQUFBdXpCLEdBQUFwbkIsRUFBQXFuQixhQUFBLGNBQUF4ekIsSUFBQSxJQUFBMGxCLE9BRUEsSUFBQTZOLEVBQ0EsT0FBQWxuQixFQUdBLEdBQUEsWUFBQXJNLEVBQ0FxTSxFQUFBck0sR0FBQXV6QixPQUVBLElBQ0FsbkIsRUFBQXJNLEdBQUE3ZSxLQUFBQyxNQUFBbXlDLEdBQ0EsTUFBQXgwQyxHQUNBc3RCLEVBQUFyTSxHQUFBdXpCLEVBSUEsT0FBQWxuQixHQUNBLE1BWUEsT0FMQStaLEVBQUF5SyxLQUFBM29DLE9BQUE0RCxPQUFBLEdBQUE2a0MsR0FBQUUsS0FBQSxHQUFBekssRUFBQXlLLE1BQ0F6SyxFQUFBeUssS0FBQSxDQUNBQyxTQUFBLFNBQUExSyxFQUFBeUssS0FBQUMsU0FBQXdDLEVBQUFsQyxZQUFBaEwsRUFBQXlLLEtBQUFDLFNBQ0FodEMsUUFBQSxTQUFBc2lDLEVBQUF5SyxLQUFBL3NDLFFBQUF3dkMsRUFBQWxDLFlBQUEsS0FBQSxjQUFBaEwsRUFBQXlLLEtBQUEvc0MsU0FFQXNpQyxFQUVBLFNBQUFxTixFQUFBQyxFQUFBdEIsUUFDQSxJQUFBc0IsSUFDQUEsRUFBQSxTQUdBLElBQUF0QixJQUNBQSxFQUFBLElBR0FscUMsT0FBQTZYLEtBQUEyekIsR0FDQXowQixRQUFBLFNBQUEwMEIsR0FDQSxJQWpaQTNTLEVBQUFoaEIsRUFpWkE0ekIsRUFBQWhHLEVBQUErQyxHQUFBem9DLE9BQUE2WCxLQUFBdXdCLElBU0FMLElBMVpBalAsRUFrWkE0UyxFQWxaQTV6QixFQWtaQTJ6QixHQWpaQSxHQUFBeHFDLGVBQUF0SixLQUFBbWhDLEVBQUFoaEIsS0FzWkEsSUFGQW95QixFQUFBMWlCLE9BQUEsU0FBQTBqQixHQUNBLE9BQUFBLEVBQUEzOUIsT0FBQWsrQixJQUNBN3pDLE9BR0EsQ0FBQSxJQUFBNnpDLEVBQUEsSUFBQSx1RUFBQSw0REFBQSxPQUFBLCtEQUFBLDBEQUFBdGpDLEtBQUEsUUFJQSxJQUFBN0ssRUFBQSxXQUNBLE1BQUEsYUFHQSxTQUFBcXVDLEVBQUExckIsRUFBQTJyQixHQUNBM3JCLEVBQUEzaUIsS0FBQXN1QyxFQUdBLFNBQUFDLEVBQUF2eEMsR0FDQSxJQUFBZzJCLEVBQUF5VixLQWNBLE9BWkEsSUFBQXpyQyxFQUNBZzJCLEVBQUF3YixVQUFBNUcsR0FFQTVVLEVBQUF3YixVQUFBM0csRUFFQWhrQixFQUFBN21CLEdBQ0FnMkIsRUFBQTF6QixZQUFBdEMsR0FFQXF4QyxFQUFBcmIsRUFBQWgyQixJQUlBZzJCLEVBR0EsU0FBQXliLEVBQUFud0MsRUFBQXd2QyxHQUNBanFCLEVBQUFpcUIsRUFBQXh2QyxVQUNBK3ZDLEVBQUEvdkMsRUFBQSxJQUNBQSxFQUFBZ0IsWUFBQXd1QyxFQUFBeHZDLFVBQ0EsbUJBQUF3dkMsRUFBQXh2QyxVQUNBd3ZDLEVBQUEzckMsVUFDQWtzQyxFQUFBL3ZDLEVBQUF3dkMsRUFBQXh2QyxTQUVBQSxFQUFBaUMsWUFBQXV0QyxFQUFBeHZDLFNBSUEsU0FBQW93QyxHQUFBaG9CLEdBQ0EsSUFBQTRpQixFQUFBNWlCLEVBQUFpb0Isa0JBQ0FDLEVBQUFwRyxHQUFBYyxFQUFBdUYsVUFDQSxNQUFBLENBQ0F2RixJQUFBQSxFQUNBaHJDLFFBQUFzd0MsRUFBQWxrQixLQUFBLFNBQUF4SixHQUNBLE9BQUFBLEVBQUFobEIsVUFBQUMsU0FBQXVyQyxLQUVBMVUsTUFBQTRiLEVBQUFsa0IsS0FBQSxTQUFBeEosR0FDQSxPQUFBQSxFQUFBaGxCLFVBQUFDLFNBQUF5ckMsSUFBQTFtQixFQUFBaGxCLFVBQUFDLFNBQUEwckMsS0FFQWlILFNBQUFGLEVBQUFsa0IsS0FBQSxTQUFBeEosR0FDQSxPQUFBQSxFQUFBaGxCLFVBQUFDLFNBQUF3ckMsTUFJQSxTQUFBbUYsRUFBQTl2QixHQUNBLElBQUEwSixFQUFBK2hCLEtBQ0FhLEVBQUFiLEtBQ0FhLEVBQUFrRixVQTdkQSxZQThkQWxGLEVBQUFuVyxhQUFBLGFBQUEsVUFDQW1XLEVBQUFuVyxhQUFBLFdBQUEsTUFDQSxJQUFBNzBCLEVBQUFtcUMsS0FRQSxTQUFBc0csRUFBQUMsRUFBQUMsR0FDQSxJQUFBQyxFQUFBUixHQUFBaG9CLEdBQ0E0aUIsRUFBQTRGLEVBQUE1RixJQUNBaHJDLEVBQUE0d0MsRUFBQTV3QyxRQUNBMDBCLEVBQUFrYyxFQUFBbGMsTUFFQWljLEVBQUExQixNQUNBakUsRUFBQW5XLGFBQUEsYUFBQThiLEVBQUExQixPQUVBakUsRUFBQXBXLGdCQUFBLGNBR0EsaUJBQUErYixFQUFBOUIsVUFDQTdELEVBQUFuVyxhQUFBLGlCQUFBOGIsRUFBQTlCLFdBRUE3RCxFQUFBcFcsZ0JBQUEsa0JBR0ErYixFQUFBN0IsUUFDQTlELEVBQUFuVyxhQUFBLGVBQUEsSUFFQW1XLEVBQUFwVyxnQkFBQSxnQkFHQW9XLEVBQUF0bkMsTUFBQXFyQyxTQUFBLGlCQUFBNEIsRUFBQTVCLFNBQUE0QixFQUFBNUIsU0FBQSxLQUFBNEIsRUFBQTVCLFNBRUE0QixFQUFBM0IsS0FDQWhFLEVBQUFuVyxhQUFBLE9BQUE4YixFQUFBM0IsTUFFQWhFLEVBQUFwVyxnQkFBQSxRQUdBOGIsRUFBQTF3QyxVQUFBMndDLEVBQUEzd0MsU0FDQW13QyxFQUFBbndDLEVBQUEwZSxFQUFBOHdCLE9BR0FtQixFQUFBamMsTUFDQUEsRUFFQWdjLEVBQUFoYyxRQUFBaWMsRUFBQWpjLFFBQ0FzVyxFQUFBNkYsWUFBQW5jLEdBQ0FzVyxFQUFBaHFDLFlBQUFpdkMsRUFBQVUsRUFBQWpjLFNBSEFzVyxFQUFBaHFDLFlBQUFpdkMsRUFBQVUsRUFBQWpjLFFBS0FBLEdBQ0FzVyxFQUFBNkYsWUFBQW5jLEdBSUEsT0F2REExMEIsRUFBQWt3QyxVQUFBOUcsRUFDQXBwQyxFQUFBNjBCLGFBQUEsYUFBQSxVQUNBc2IsRUFBQW53QyxFQUFBMGUsRUFBQTh3QixPQUNBcG5CLEVBQUFwbkIsWUFBQWdxQyxHQUNBQSxFQUFBaHFDLFlBQUFoQixHQUNBeXdDLEVBQUEveEIsRUFBQTh3QixNQUFBOXdCLEVBQUE4d0IsT0FrREEsQ0FDQXBuQixPQUFBQSxFQUNBcW9CLFNBQUFBLEdBS0FqQyxFQUFBc0MsU0FBQSxFQUVBLElBQUFDLEdBQUEsRUFDQUMsR0FBQSxHQUVBQyxHQUFBLEdBQ0EsU0FBQUMsRUFBQTdvQixFQUFBZ25CLEdBQ0EsSUFJQThCLEVBQ0FDLEVBQ0FDLEVBSUFDLEVBQ0FDLEVBQ0E3akIsRUFHQThqQixFQTdmQWptQixFQThlQWlrQixFQUFBRCxHQUFBbG5CLEVBQUFqa0IsT0FBQTRELE9BQUEsR0FBQTZrQyxHQUFBLEdBQUF1QyxHQUFBQyxLQU9Bb0MsR0FBQSxFQUNBQyxHQUFBLEVBQ0FDLEdBQUEsRUFJQS9JLEVBQUEsR0FDQWdKLEVBQUFoSSxHQUFBaUksRUFBQXJDLEVBQUFoQyxxQkFFQXNFLEVBQUFqSCxHQUFBMkUsRUFBQVosZUFBQXZtQixHQUlBMXFCLEVBQUFvekMsS0FFQXpDLEdBcGdCQS9pQixFQW9nQkFpa0IsRUFBQWxCLFNBbmdCQTFpQixPQUFBLFNBQUFqVyxFQUFBcEIsR0FDQSxPQUFBZ1gsRUFBQTNkLFFBQUErSCxLQUFBcEIsSUErZ0JBbUssRUFBQSxDQUVBL2dCLEdBQUFBLEVBQ0EwcUIsVUFBQUEsRUFDQUQsT0FBQStoQixLQUNBNEgsZUFuQkEsS0FvQkF2QyxNQUFBQSxFQUNBOWtCLE1BbkJBLENBRUFzbkIsV0FBQSxFQUVBcEcsV0FBQSxFQUVBM2dCLGFBQUEsRUFFQWduQixXQUFBLEVBRUFDLFNBQUEsR0FVQTVELFFBQUFBLEVBRUE2RCxtQkEwbUJBLFdBQ0F4bUMsYUFBQXdsQyxHQUNBeGxDLGFBQUF5bEMsR0FDQWdCLHFCQUFBZixJQTVtQkFnQixTQSttQkEsU0FBQXpDLEdBRUEsZUFBQXB0QixHQUFBc0osSUFBQUMsVUFDQW9nQixHQUFBenRCLEVBQUFnTSxNQUFBTyxZQUFBK2dCLEdBQUEsYUFHQSxHQUFBdHRCLEVBQUFnTSxNQUFBTyxZQUNBLE9BR0FxbkIsRUFBQSxpQkFBQSxDQUFBNXpCLEVBQUFreEIsSUFDQTJDLElBQ0EsSUFBQTdCLEVBQUFoeUIsRUFBQTh3QixNQUNBbUIsRUFBQXBCLEdBQUFsbkIsRUFBQWprQixPQUFBNEQsT0FBQSxHQUFBMFcsRUFBQTh3QixNQUFBLEdBQUFJLEVBQUEsQ0FDQXZDLGtCQUFBLEtBRUEzdUIsRUFBQTh3QixNQUFBbUIsRUFDQTZCLElBRUE5QixFQUFBbEQsc0JBQUFtRCxFQUFBbkQsc0JBQ0FpRixJQUNBYixFQUFBaEksR0FBQWlJLEVBQUFsQixFQUFBbkQsc0JBSUFrRCxFQUFBOUIsZ0JBQUErQixFQUFBL0IsY0FDQTVFLEdBQUEwRyxFQUFBOUIsZUFBQXp6QixRQUFBLFNBQUF5SCxHQUNBQSxFQUFBZ1MsZ0JBQUEsbUJBRUErYixFQUFBL0IsZUFDQXZtQixFQUFBdU0sZ0JBQUEsaUJBR0E4ZCxJQUNBQyxJQUVBbEMsR0FDQUEsRUFBQUMsRUFBQUMsR0FHQWp5QixFQUFBcXpCLGlCQUNBYSxJQUtBQyxJQUFBMTNCLFFBQUEsU0FBQTIzQixHQUdBQyxzQkFBQUQsRUFBQXoyQyxPQUFBMDFDLGVBQUE5a0IsZ0JBSUFxbEIsRUFBQSxnQkFBQSxDQUFBNXpCLEVBQUFreEIsS0FucUJBTyxXQXNxQkEsU0FBQW53QyxHQUNBMGUsRUFBQTJ6QixTQUFBLENBQ0FyeUMsUUFBQUEsS0F2cUJBZ3pDLEtBMnFCQSxXQUVBLGVBQUF4d0IsR0FBQXNKLElBQUFDLFVBQ0FvZ0IsR0FBQXp0QixFQUFBZ00sTUFBQU8sWUFBQStnQixHQUFBLFNBSUEsSUFBQWlILEVBQUF2MEIsRUFBQWdNLE1BQUFraEIsVUFDQTNnQixFQUFBdk0sRUFBQWdNLE1BQUFPLFlBQ0Fpb0IsR0FBQXgwQixFQUFBZ00sTUFBQXNuQixVQUNBbUIsRUFBQWhJLEdBQUFDLFVBQUExc0IsRUFBQTh3QixNQUFBZCxNQUNBeEIsRUFBQTFELEdBQUE5cUIsRUFBQTh3QixNQUFBdEMsU0FBQSxFQUFBTCxHQUFBSyxVQUVBLEdBQUErRixHQUFBaG9CLEdBQUFpb0IsR0FBQUMsRUFDQSxPQU1BLEdBQUFDLElBQUFDLGFBQUEsWUFDQSxPQUtBLEdBRkFmLEVBQUEsU0FBQSxDQUFBNXpCLElBQUEsSUFFQSxJQUFBQSxFQUFBOHdCLE1BQUF2QixPQUFBdnZCLEdBQ0EsT0FHQUEsRUFBQWdNLE1BQUFraEIsV0FBQSxFQUVBMEgsTUFDQWxyQixFQUFBMWtCLE1BQUE2dkMsV0FBQSxXQUdBWixJQUNBYSxJQUVBOTBCLEVBQUFnTSxNQUFBdW5CLFlBQ0E3cEIsRUFBQTFrQixNQUFBK3ZDLFdBQUEsUUFLQSxDQUFBLElBQ0FDLEVBQ0ExSSxFQUNBaHJDLEVBSEFzekMsTUFDQUksRUFBQUMsSUFDQTNJLEVBQUEwSSxFQUFBMUksSUFDQWhyQyxFQUFBMHpDLEVBQUExekMsUUFFQXdxQyxHQUFBLENBQUFRLEVBQUFockMsR0FBQSxJQUdBMHRCLEVBQUEsV0FDQSxJQVVBa21CLEVBQ0FDLEVBQ0FDLEVBWkFwMUIsRUFBQWdNLE1BQUFraEIsWUFBQStGLElBSUFBLEdBQUEsRUFFQXZwQixFQUFBbkIsYUFDQW1CLEVBQUExa0IsTUFBQSt2QyxXQUFBLzBCLEVBQUE4d0IsTUFBQS9CLGVBRUE2RixLQUFBNTBCLEVBQUE4d0IsTUFBQVgsWUFLQXJFLEdBQUEsQ0FIQXFKLEdBREFELEVBQUFELEtBQ0EzSSxJQUNBOEksRUFBQUYsRUFBQTV6QyxTQUVBa3RDLEdBQ0F0QyxHQUFBLENBQUFpSixFQUFBQyxHQUFBLFlBR0FDLElBQ0FyQixJQUNBekksR0FBQWdILEdBQUF2eUIsR0FDQXMxQixHQUFBLEdBQ0F0MUIsRUFBQWdNLE1BQUF1bkIsV0FBQSxFQUNBSyxFQUFBLFVBQUEsQ0FBQTV6QixJQUVBQSxFQUFBOHdCLE1BQUFYLFdBQUF5RSxLQXBoQkFXLEVBcWhCQS9HLEVBQUEsV0FDQXh1QixFQUFBZ00sTUFBQXduQixTQUFBLEVBQ0FJLEVBQUEsVUFBQSxDQUFBNXpCLFFBNVBBLFdBQ0EsSUFDQTBJLEVBREEwbEIsRUFBQXB1QixFQUFBOHdCLE1BQUExQyxTQU9BbHFCLEVBQUF3d0IsSUFHQWhzQixFQURBMUksRUFBQTh3QixNQUFBbEMsYUFBQVIsSUFBQUQsR0FBQUMsVUFBQSxXQUFBQSxFQUNBbHFCLEVBQUF3RSxXQUVBdWlCLEdBQUFtRCxFQUFBLENBQUFscUIsSUFLQXdFLEVBQUF2cEIsU0FBQXVxQixJQUNBaEIsRUFBQXBtQixZQUFBb25CLEdBR0F3cUIsSUFHQSxlQUFBcHdCLEdBQUFzSixJQUFBQyxVQUVBb2dCLEdBQUF6dEIsRUFBQTh3QixNQUFBbEMsYUFBQVIsSUFBQUQsR0FBQUMsVUFBQWxxQixFQUFBc3hCLHFCQUFBOXJCLEVBQUEsQ0FBQSwrREFBQSxvRUFBQSwyQkFBQSxPQUFBLG1FQUFBLG9EQUFBLE9BQUEscUVBQUEsOERBQUEsdUJBQUEsT0FBQSwwRUFBQTdiLEtBQUEsTUFzT0E0bkMsSUFqd0JBQyxLQW93QkEsV0FFQSxlQUFBNXhCLEdBQUFzSixJQUFBQyxVQUNBb2dCLEdBQUF6dEIsRUFBQWdNLE1BQUFPLFlBQUErZ0IsR0FBQSxTQUlBLElBQUFxSSxHQUFBMzFCLEVBQUFnTSxNQUFBa2hCLFVBQ0EzZ0IsRUFBQXZNLEVBQUFnTSxNQUFBTyxZQUNBaW9CLEdBQUF4MEIsRUFBQWdNLE1BQUFzbkIsVUFDQTlFLEVBQUExRCxHQUFBOXFCLEVBQUE4d0IsTUFBQXRDLFNBQUEsRUFBQUwsR0FBQUssVUFFQSxHQUFBbUgsR0FBQXBwQixHQUFBaW9CLEVBQ0EsT0FLQSxHQUZBWixFQUFBLFNBQUEsQ0FBQTV6QixJQUFBLElBRUEsSUFBQUEsRUFBQTh3QixNQUFBekIsT0FBQXJ2QixHQUNBLE9BR0FBLEVBQUFnTSxNQUFBa2hCLFdBQUEsRUFDQWx0QixFQUFBZ00sTUFBQXduQixTQUFBLEVBQ0FQLEdBQUEsRUFFQTJCLE1BQ0FsckIsRUFBQTFrQixNQUFBNnZDLFdBQUEsVUFPQSxDQUFBLElBQ0FlLEVBQ0F0SixFQUNBaHJDLEVBUEF5eUMsSUFDQThCLElBQ0E1QixJQUVBVyxNQUNBZ0IsRUFBQVgsSUFDQTNJLEVBQUFzSixFQUFBdEosSUFDQWhyQyxFQUFBczBDLEVBQUF0MEMsUUFFQTBlLEVBQUE4d0IsTUFBQVgsWUFDQXJFLEdBQUEsQ0FBQVEsRUFBQWhyQyxHQUFBa3RDLEdBQ0F0QyxHQUFBLENBQUFJLEVBQUFockMsR0FBQSxZQUlBK3pDLElBQ0FyQixJQUVBaDBCLEVBQUE4d0IsTUFBQVgsVUFDQXlFLEtBemxCQSxTQUFBcEcsRUFBQXZ6QixHQUNBczZCLEVBQUEvRyxFQUFBLFlBQ0F4dUIsRUFBQWdNLE1BQUFraEIsV0FBQXhqQixFQUFBaEIsWUFBQWdCLEVBQUFoQixXQUFBdnBCLFNBQUF1cUIsSUFDQXpPLE1BdWxCQTY2QixDQUFBdEgsRUFBQXh1QixFQUFBKzFCLFNBR0EvMUIsRUFBQSsxQixXQXh6QkFDLE9BMGxCQSxXQUNBaDJCLEVBQUFnTSxNQUFBc25CLFdBQUEsR0ExbEJBMkMsUUE2bEJBLFdBR0FqMkIsRUFBQTAxQixPQUNBMTFCLEVBQUFnTSxNQUFBc25CLFdBQUEsR0FobUJBeUMsUUEwekJBLFdBQ0EvMUIsRUFBQWdNLE1BQUFraEIsV0FDQWx0QixFQUFBMDFCLE9BR0EsSUFBQTExQixFQUFBZ00sTUFBQXVuQixVQUNBLE9BR0EyQyxJQUlBL0IsSUFBQTEzQixRQUFBLFNBQUEyM0IsR0FDQUEsRUFBQXoyQyxPQUFBbzRDLFlBR0Fyc0IsRUFBQWhCLFlBQ0FnQixFQUFBaEIsV0FBQXlwQixZQUFBem9CLEdBT0EsS0FKQTZvQixHQUFBQSxHQUFBcmxCLE9BQUEsU0FBQXZ3QixHQUNBLE9BQUFBLElBQUFxakIsS0FHQTFpQixRQUNBZzRDLEdBQUEsR0FHQXQxQixFQUFBZ00sTUFBQXVuQixXQUFBLEVBQ0FLLEVBQUEsV0FBQSxDQUFBNXpCLEtBdjFCQStPLFFBMDFCQSxXQUVBLGVBQUFqTCxHQUFBc0osSUFBQUMsVUFDQW9nQixHQUFBenRCLEVBQUFnTSxNQUFBTyxZQUFBK2dCLEdBQUEsWUFHQSxHQUFBdHRCLEVBQUFnTSxNQUFBTyxZQUNBLE9BR0F2TSxFQUFBeXpCLHFCQUNBenpCLEVBQUErMUIsVUFDQWxDLFdBQ0FscUIsRUFBQWhzQixPQUNBcWlCLEVBQUFnTSxNQUFBTyxhQUFBLEVBQ0FxbkIsRUFBQSxZQUFBLENBQUE1ekIsTUFuMkJBLElBQUE4d0IsRUFBQWhCLE9BS0EsTUFKQSxlQUFBaHNCLEdBQUFzSixJQUFBQyxVQUNBdWdCLElBQUEsRUFBQSw0Q0FHQTV0QixFQU1BLElBQUFtMkIsRUFBQXJGLEVBQUFoQixPQUFBOXZCLEdBQ0EwSixFQUFBeXNCLEVBQUF6c0IsT0FDQXFvQixFQUFBb0UsRUFBQXBFLFNBRUFyb0IsRUFBQXlNLGFBQUEsa0JBQUEsSUFDQXpNLEVBQUF6cUIsR0FBQSxTQUFBK2dCLEVBQUEvZ0IsR0FDQStnQixFQUFBMEosT0FBQUEsRUFDQUMsRUFBQWhzQixPQUFBcWlCLEVBQ0EwSixFQUFBL3JCLE9BQUFxaUIsRUFDQSxJQUFBbzJCLEVBQUF4RyxFQUFBdjZCLElBQUEsU0FBQXU3QixHQUNBLE9BQUFBLEVBQUE5a0IsR0FBQTlMLEtBRUFxMkIsRUFBQTFzQixFQUFBZ3JCLGFBQUEsaUJBdUJBLE9BdEJBYixJQUNBRSxJQUNBQyxJQUNBTCxFQUFBLFdBQUEsQ0FBQTV6QixJQUVBOHdCLEVBQUFmLGNBQ0F1RyxJQUtBNXNCLEVBQUEzcEIsaUJBQUEsYUFBQSxXQUNBaWdCLEVBQUE4d0IsTUFBQWxDLGFBQUE1dUIsRUFBQWdNLE1BQUFraEIsV0FDQWx0QixFQUFBeXpCLHVCQUdBL3BCLEVBQUEzcEIsaUJBQUEsYUFBQSxTQUFBRSxHQUNBK2YsRUFBQTh3QixNQUFBbEMsYUFBQSxHQUFBNXVCLEVBQUE4d0IsTUFBQWIsUUFBQS9nQyxRQUFBLGdCQUNBa2tDLEVBQUFyekMsaUJBQUEsWUFBQW16QyxHQUNBQSxFQUFBanpDLE1BR0ErZixFQUlBLFNBQUF1MkIsSUFDQSxJQUFBdkcsRUFBQWh3QixFQUFBOHdCLE1BQUFkLE1BQ0EsT0FBQXhwQyxNQUFBc1osUUFBQWt3QixHQUFBQSxFQUFBLENBQUFBLEVBQUEsR0FHQSxTQUFBd0csSUFDQSxNQUFBLFNBQUFELElBQUEsR0FHQSxTQUFBM0IsSUFDQSxJQUFBNkIsRUFHQSxPQUFBLE9BQUFBLEVBQUF6MkIsRUFBQTh3QixNQUFBaEIsU0FBQTJHLEVBQUFyRSxRQUdBLFNBQUFzQyxJQUNBLE9BQUE1QixHQUFBbnBCLEVBR0EsU0FBQXNyQixJQUNBLE9BQUF2RCxHQUFBaG9CLEdBR0EsU0FBQWd0QixFQUFBQyxHQUlBLE9BQUEzMkIsRUFBQWdNLE1BQUF1bkIsWUFBQXZ6QixFQUFBZ00sTUFBQWtoQixXQUFBVCxHQUFBQyxTQUFBa0csR0FBQSxVQUFBQSxFQUFBcHZDLEtBQ0EsRUFHQXNuQyxHQUFBOXFCLEVBQUE4d0IsTUFBQXZDLE1BQUFvSSxFQUFBLEVBQUEsRUFBQXhJLEdBQUFJLE9BR0EsU0FBQTBGLElBQ0F2cUIsRUFBQTFrQixNQUFBNHhDLGNBQUE1MkIsRUFBQTh3QixNQUFBbEMsYUFBQTV1QixFQUFBZ00sTUFBQWtoQixVQUFBLEdBQUEsT0FDQXhqQixFQUFBMWtCLE1BQUF3ckMsT0FBQSxHQUFBeHdCLEVBQUE4d0IsTUFBQU4sT0FHQSxTQUFBOEUsRUFBQXVCLEdBQ0EsSUFBQUMsRUFBQUQsR0FBQXhKLElBQUFaLEdBQUFDLFFBQ0EwRyxFQUFBN29DLEtBQUFyTCxVQUFBNDNDLEVBQUEsTUFBQSxVQUFBck0sSUFHQSxTQUFBbUosRUFBQW1ELEVBQUE1OUIsRUFBQTY5QixHQVdBLElBQ0FDLE9BWEEsSUFBQUQsSUFDQUEsR0FBQSxHQUdBWixFQUFBMzVCLFFBQUEsU0FBQXk2QixHQUNBQSxFQUFBSCxJQUNBRyxFQUFBSCxHQUFBMXNDLFdBQUEsRUFBQThPLEtBSUE2OUIsSUFHQUMsRUFBQWozQixFQUFBOHdCLE9BQUFpRyxHQUFBMXNDLE1BQUE0c0MsRUFBQTk5QixHQUlBLFNBQUFrOEIsSUFDQSxJQU1BOEIsRUFDQWw0QyxFQVBBb3ZDLEVBQUFydUIsRUFBQTh3QixNQUFBekMsS0FFQUEsRUFBQS9zQyxVQUlBNjFDLEVBQUEsUUFBQTlJLEVBQUEvc0MsUUFDQXJDLEVBQUF5cUIsRUFBQXpxQixHQUNBcXNDLEdBQUF0ckIsRUFBQTh3QixNQUFBWixlQUFBdm1CLEdBQ0FsTixRQUFBLFNBQUF5SCxHQUNBLElBS0FrekIsRUFMQUMsRUFBQW56QixFQUFBOHNCLGFBQUFtRyxHQUVBbjNCLEVBQUFnTSxNQUFBa2hCLFVBQ0FocEIsRUFBQWlTLGFBQUFnaEIsRUFBQUUsRUFBQUEsRUFBQSxJQUFBcDRDLEVBQUFBLElBRUFtNEMsRUFBQUMsR0FBQUEsRUFBQTl5QyxRQUFBdEYsRUFBQSxJQUFBaWtDLFFBR0FoZixFQUFBaVMsYUFBQWdoQixFQUFBQyxHQUVBbHpCLEVBQUFnUyxnQkFBQWloQixNQU1BLFNBQUFuRCxLQUNBcUMsR0FBQXIyQixFQUFBOHdCLE1BQUF6QyxLQUFBQyxVQUlBaEQsR0FBQXRyQixFQUFBOHdCLE1BQUFaLGVBQUF2bUIsR0FDQWxOLFFBQUEsU0FBQXlILEdBQ0FsRSxFQUFBOHdCLE1BQUFsQyxZQUNBMXFCLEVBQUFpUyxhQUFBLGdCQUFBblcsRUFBQWdNLE1BQUFraEIsV0FBQWhwQixJQUFBd3dCLElBQUEsT0FBQSxTQUVBeHdCLEVBQUFnUyxnQkFBQSxtQkFLQSxTQUFBNmQsSUFDQVgsRUFBQTdvQyxLQUFBb3JCLG9CQUFBLGFBQUEyaEIsR0FDQWxFLEVBQUF6ZCxvQkFBQSxZQUFBdWQsR0FDQVosR0FBQUEsR0FBQXBsQixPQUFBLFNBQUFzZixHQUNBLE9BQUFBLElBQUEwRyxJQUlBLFNBQUFxRSxFQUFBdDNDLEdBRUEsSUFBQStmLEVBQUE4d0IsTUFBQWxDLGNBQUFsbEIsRUFBQXZxQixTQUFBYyxFQUFBaUQsUUFBQSxDQUtBLEdBQUF3eEMsSUFBQXYxQyxTQUFBYyxFQUFBaUQsUUFBQSxDQUNBLEdBQUF1cEMsR0FBQUMsUUFDQSxPQUdBLEdBQUExc0IsRUFBQWdNLE1BQUFraEIsV0FBQSxHQUFBbHRCLEVBQUE4d0IsTUFBQWIsUUFBQS9nQyxRQUFBLFNBQ0EsWUFHQThRLEVBQUE4d0IsTUFBQW5CLGVBQUEzdkIsRUFBQS9mLElBR0EsSUFBQStmLEVBQUE4d0IsTUFBQXBDLGNBQ0FxRSxHQUFBLEVBQ0EveUIsRUFBQXl6QixxQkFDQXp6QixFQUFBMDFCLE9BSUExQyxHQUFBLEVBQ0E3bUMsV0FBQSxXQUNBNm1DLEdBQUEsSUFLQWh6QixFQUFBZ00sTUFBQXVuQixXQUNBc0MsTUFLQSxTQUFBZixJQUNBMUIsRUFBQXJ6QyxpQkFBQSxZQUFBdzNDLEdBQUEsR0FHQSxTQUFBMUIsSUFDQXpDLEVBQUF6ZCxvQkFBQSxZQUFBNGhCLEdBQUEsR0FlQSxTQUFBaEMsRUFBQS9HLEVBQUF2ekIsR0FDQSxJQUFBcXhCLEVBQUEySSxJQUFBM0ksSUFFQSxTQUFBRSxFQUFBdnNDLEdBQ0FBLEVBQUFpRCxTQUFBb3BDLElBQ0FELEdBQUFDLEVBQUEsU0FBQUUsR0FDQXZ4QixLQU1BLEdBQUEsSUFBQXV6QixFQUNBLE9BQUF2ekIsSUFHQW94QixHQUFBQyxFQUFBLFNBQUF1RyxHQUNBeEcsR0FBQUMsRUFBQSxNQUFBRSxHQUNBcUcsRUFBQXJHLEVBR0EsU0FBQS9zQyxFQUFBKzNDLEVBQUFDLEVBQUExbkMsUUFDQSxJQUFBQSxJQUNBQSxHQUFBLEdBR0F1N0IsR0FBQXRyQixFQUFBOHdCLE1BQUFaLGVBQUF2bUIsR0FDQWxOLFFBQUEsU0FBQXlILEdBQ0FBLEVBQUFua0IsaUJBQUF5M0MsRUFBQUMsRUFBQTFuQyxHQUNBbTZCLEVBQUExK0IsS0FBQSxDQUNBMFksS0FBQUEsRUFDQXN6QixVQUFBQSxFQUNBQyxRQUFBQSxFQUNBMW5DLFFBQUFBLE1BS0EsU0FBQStqQyxJQUNBMEMsTUFDQS8yQyxFQUFBLGFBQUFnd0MsRUFBQWpGLElBQ0EvcUMsRUFBQSxXQUFBaTRDLEVBQUFsTixLQUdBeHFCLEVBQUE4d0IsTUFBQWIsUUE3ekJBdHRCLE1BQUEsT0FBQXVLLE9BQUFtRixTQTZ6QkE1VixRQUFBLFNBQUErNkIsR0FDQSxHQUFBLFdBQUFBLEVBTUEsT0FGQS8zQyxFQUFBKzNDLEVBQUEvSCxHQUVBK0gsR0FDQSxJQUFBLGFBQ0EvM0MsRUFBQSxhQUFBaTRDLEdBQ0EsTUFFQSxJQUFBLFFBQ0FqNEMsRUFBQTJ0QyxHQUFBLFdBQUEsT0FBQXVLLEdBQ0EsTUFFQSxJQUFBLFVBQ0FsNEMsRUFBQSxXQUFBazRDLE1BTUEsU0FBQTlELElBQ0EzSixFQUFBenRCLFFBQUEsU0FBQTZRLEdBQ0EsSUFBQXBKLEVBQUFvSixFQUFBcEosS0FDQXN6QixFQUFBbHFCLEVBQUFrcUIsVUFDQUMsRUFBQW5xQixFQUFBbXFCLFFBQ0ExbkMsRUFBQXVkLEVBQUF2ZCxRQUNBbVUsRUFBQXlSLG9CQUFBNmhCLEVBQUFDLEVBQUExbkMsS0FFQW02QixFQUFBLEdBR0EsU0FBQXVGLEVBQUF4dkMsR0FDQSxJQXdCQTIzQyxFQUNBNTNDLEVBQ0F3dUMsRUExQkFxSixHQUFBLEdBRUE3M0IsRUFBQWdNLE1BQUFzbkIsV0FBQXdFLEVBQUE3M0MsSUFBQSt5QyxJQUtBRixHQURBRixFQUFBM3lDLEdBQ0E2eUMsY0FDQWtCLEtBRUFoMEIsRUFBQWdNLE1BQUFraEIsV0FBQXhCLEdBQUF6ckMsSUFLQXF5QyxHQUFBNzFCLFFBQUEsU0FBQSt2QixHQUNBLE9BQUFBLEVBQUF2c0MsS0FLQSxVQUFBQSxFQUFBdUQsT0FBQXdjLEVBQUE4d0IsTUFBQWIsUUFBQS9nQyxRQUFBLGNBQUEsR0FBQTZqQyxLQUFBLElBQUEveUIsRUFBQTh3QixNQUFBcEMsYUFBQTF1QixFQUFBZ00sTUFBQWtoQixVQUNBMkssR0FBQSxHQUdBNzNDLEdBREE0M0MsRUFBQXJCLEtBQ0EsR0FDQS9ILEVBQUFvSixFQUFBLEdBRUFuTCxHQUFBQyxTQUFBLFNBQUExc0MsR0FBQXd1QyxFQUdBaUUsRUFBQXRtQyxXQUFBLFdBQ0FtcUMsRUFBQXIyQyxJQUNBdXVDLEdBRUE4SCxFQUFBcjJDLElBSUEsVUFBQUEsRUFBQXVELE9BQ0F1dkMsR0FBQThFLEdBR0FBLEdBQ0FQLEVBQUFyM0MsSUFJQSxTQUFBa3pDLEVBQUFsekMsR0FDQSxJQU9BODNDLEVBaDFCQUEsRUFBQTkzQyxFQUNBKzNDLEVBQ0FDLEVBdTBCQS8wQyxFQUFBakQsRUFBQWlELE9BQ0FnMUMsRUFBQXZ1QixFQUFBeHFCLFNBQUErRCxJQUFBd21CLEVBQUF2cUIsU0FBQStELEdBRUEsY0FBQWpELEVBQUF1RCxNQUFBMDBDLElBSUFILEVBQUE1RCxJQUFBbjFDLE9BQUEwcUIsR0FBQXJVLElBQUEsU0FBQXFVLEdBQ0EsSUFBQXl1QixFQUdBbnNCLEVBQUEsT0FBQW1zQixFQURBenVCLEVBQUEvckIsT0FDQTAxQyxxQkFBQSxFQUFBOEUsRUFBQW5zQixNQUVBLE9BQUFBLEVBQ0EsQ0FDQWtFLFdBQUF4RyxFQUFBaEUsd0JBQ0EweUIsWUFBQXBzQixFQUNBOGtCLE1BQUFBLEdBSUEsT0FDQTVqQixPQUFBbUYsU0EvMUJBMGxCLEVBaTJCQUEsRUFoMkJBQyxHQURBLzNDLEVBaTJCQUEsR0FoMkJBKzNDLFFBQ0FDLEVBQUFoNEMsRUFBQWc0QyxRQUNBRixFQUFBemYsTUFBQSxTQUFBaEwsR0FDQSxJQUFBNEMsRUFBQTVDLEVBQUE0QyxXQUNBa29CLEVBQUE5cUIsRUFBQThxQixZQUVBdkosRUFEQXZoQixFQUFBd2pCLE1BQ0FqQyxrQkFDQXhmLEVBQUFuRSxHQUFBa3RCLEVBQUFsekMsV0FDQTh2QixFQUFBb2pCLEVBQUFsc0IsY0FBQW5WLE9BRUEsSUFBQWllLEVBQ0EsT0FBQSxFQUdBLElBQUFxakIsRUFBQSxXQUFBaHBCLEVBQUEyRixFQUFBalAsSUFBQXZiLEVBQUEsRUFDQTh0QyxFQUFBLFFBQUFqcEIsRUFBQTJGLEVBQUEvTyxPQUFBemIsRUFBQSxFQUNBK3RDLEVBQUEsVUFBQWxwQixFQUFBMkYsRUFBQTlPLEtBQUFDLEVBQUEsRUFDQXF5QixFQUFBLFNBQUFucEIsRUFBQTJGLEVBQUFoUCxNQUFBRyxFQUFBLEVBQ0FzeUIsRUFBQXZvQixFQUFBbkssSUFBQWt5QixFQUFBSSxFQUFBeEosRUFDQTZKLEVBQUFULEVBQUEvbkIsRUFBQWpLLE9BQUFxeUIsRUFBQXpKLEVBQ0E4SixFQUFBem9CLEVBQUFoSyxLQUFBOHhCLEVBQUFPLEVBQUExSixFQUNBK0osRUFBQVosRUFBQTluQixFQUFBbEssTUFBQXd5QixFQUFBM0osRUFDQSxPQUFBNEosR0FBQUMsR0FBQUMsR0FBQUMsTUEyMEJBN0UsSUFDQXVELEVBQUFyM0MsS0FJQSxTQUFBeTNDLEVBQUF6M0MsR0FHQSxLQUZBNjNDLEVBQUE3M0MsSUFBQSxHQUFBK2YsRUFBQTh3QixNQUFBYixRQUFBL2dDLFFBQUEsVUFBQTZqQyxHQU1BLE9BQUEveUIsRUFBQTh3QixNQUFBbEMsYUFDQXdFLEVBQUE3b0MsS0FBQXhLLGlCQUFBLGFBQUF1M0MsR0FDQWxFLEVBQUFyekMsaUJBQUEsWUFBQW16QyxHQUNBM0gsR0FBQStHLEdBQUFZLFFBQ0FBLEVBQUFqekMsU0FJQXEzQyxFQUFBcjNDLEdBR0EsU0FBQTAzQyxFQUFBMTNDLEdBQ0ErZixFQUFBOHdCLE1BQUFiLFFBQUEvZ0MsUUFBQSxXQUFBLEdBQUFqUCxFQUFBaUQsU0FBQXd4QyxLQUtBMTBCLEVBQUE4d0IsTUFBQWxDLGFBQUEzdUMsRUFBQTQ0QyxlQUFBbnZCLEVBQUF2cUIsU0FBQWMsRUFBQTQ0QyxnQkFJQXZCLEVBQUFyM0MsR0FHQSxTQUFBNjNDLEVBQUE3M0MsR0FDQSxRQUFBd3NDLEdBQUFDLFNBQUE4SixNQUFBLEdBQUF2MkMsRUFBQXVELEtBQUEwTCxRQUFBLFNBR0EsU0FBQWdsQyxJQUNBZ0MsSUFDQSxJQUFBNEMsRUFBQTk0QixFQUFBOHdCLE1BQ0FqQixFQUFBaUosRUFBQWpKLGNBQ0EzcUMsRUFBQTR6QyxFQUFBNXpDLFVBQ0E2UixFQUFBK2hDLEVBQUEvaEMsT0FDQTAzQixFQUFBcUssRUFBQXJLLHVCQUNBTSxFQUFBK0osRUFBQS9KLGVBQ0EvWSxFQUFBNGUsSUFBQWxELEdBQUFob0IsR0FBQXNNLE1BQUEsS0FDQStpQixFQUFBdEssRUFBQSxDQUNBL29CLHNCQUFBK29CLEdBQ0E5a0IsRUFDQXF2QixFQUFBLENBQ0EvbEMsS0FBQSxVQUNBa2EsU0FBQSxFQUNBRixNQUFBLGNBQ0F6QyxTQUFBLENBQUEsaUJBQ0FzQixHQUFBLFNBQUE4QixHQUNBLElBSUEwZSxFQUpBdGdCLEVBQUE0QixFQUFBNUIsTUFFQTRvQixNQUVBdEksRUFEQTJJLElBQ0EzSSxJQUVBLENBQUEsWUFBQSxtQkFBQSxXQUFBN3ZCLFFBQUEsU0FBQTA2QixHQUNBLGNBQUFBLEVBQ0E3SyxFQUFBblcsYUFBQSxpQkFBQW5LLEVBQUE5bUIsV0FFQThtQixFQUFBSSxXQUFBMUMsT0FBQSxlQUFBeXRCLEdBQ0E3SyxFQUFBblcsYUFBQSxRQUFBZ2hCLEVBQUEsSUFFQTdLLEVBQUFwVyxnQkFBQSxRQUFBaWhCLEtBSUFuckIsRUFBQUksV0FBQTFDLE9BQUEsTUFJQXV2QixFQUFBLENBQ0FobUMsS0FBQSxRQUNBa2EsVUFBQTZJLEVBQ0FqbUIsUUFBQSxDQUNBNFYsUUFBQXFRLEVBQ0F6QixRQUFBLElBR0F0SyxFQUFBLENBQUEsQ0FDQWhYLEtBQUEsU0FDQWxELFFBQUEsQ0FDQWdILE9BQUFBLElBRUEsQ0FDQTlELEtBQUEsa0JBQ0FsRCxRQUFBLENBQ0F3a0IsUUFBQSxDQUNBeE8sSUFBQSxFQUNBRSxPQUFBLEVBQ0FDLEtBQUEsRUFDQUYsTUFBQSxLQUdBLENBQ0EvUyxLQUFBLE9BQ0FsRCxRQUFBLENBQ0F3a0IsUUFBQSxJQUVBLENBQ0F0aEIsS0FBQSxnQkFDQWxELFFBQUEsQ0FDQXFnQixVQUFBMmUsS0FFQS92QyxPQUFBNDFDLElBQUEsQ0FBQXFFLEdBQUEsSUFBQSxNQUFBcEosT0FBQSxFQUFBQSxFQUFBNWxCLFlBQUEsR0FBQSxDQUFBK3VCLElBQ0FoNUIsRUFBQXF6QixlQUFBOUksR0FBQTVPLGFBQUFvZCxFQUFBcnZCLEVBQUFoa0IsT0FBQTRELE9BQUEsR0FBQXVtQyxFQUFBLENBQ0EzcUMsVUFBQUEsRUFDQThwQixjQUFBQSxFQUNBL0UsVUFBQUEsS0FJQSxTQUFBaXNCLElBQ0FsMkIsRUFBQXF6QixpQkFDQXJ6QixFQUFBcXpCLGVBQUF0a0IsVUFDQS9PLEVBQUFxekIsZUFBQSxNQW1DQSxTQUFBYyxJQUNBLE9BQUEzSSxHQUFBOWhCLEVBQUFtaUIsaUJBQUEsc0JBR0EsU0FBQXlLLEVBQUFyMkMsR0FDQStmLEVBQUF5ekIscUJBRUF4ekMsR0FDQTJ6QyxFQUFBLFlBQUEsQ0FBQTV6QixFQUFBL2YsSUFHQTYwQyxJQUNBLElBQUF2RyxFQUFBbUksR0FBQSxHQUVBbkksRUFDQWtFLEVBQUF0bUMsV0FBQSxXQUNBNlQsRUFBQXMwQixRQUNBL0YsR0FFQXZ1QixFQUFBczBCLE9BSUEsU0FBQWdELEVBQUFyM0MsR0FJQSxJQWFBc3VDLEVBaEJBdnVCLEVBQUF5ekIscUJBQ0FHLEVBQUEsY0FBQSxDQUFBNXpCLEVBQUEvZixJQUVBK2YsRUFBQWdNLE1BQUFraEIsVUFTQSxHQUFBbHRCLEVBQUE4d0IsTUFBQWIsUUFBQS9nQyxRQUFBLGVBQUEsR0FBQThRLEVBQUE4d0IsTUFBQWIsUUFBQS9nQyxRQUFBLFVBQUEsR0FBQSxDQUFBLGFBQUEsYUFBQUEsUUFBQWpQLEVBQUF1RCxPQUFBdXZDLEtBSUF4RSxFQUFBbUksR0FBQSxJQUdBaEUsRUFBQXZtQyxXQUFBLFdBQ0E2VCxFQUFBZ00sTUFBQWtoQixXQUNBbHRCLEVBQUEwMUIsUUFFQW5ILEdBSUFvRSxFQUFBMEIsc0JBQUEsV0FDQXIwQixFQUFBMDFCLFVBeEJBRyxLQXNUQSxTQUFBcUQsRUFBQUMsRUFBQUMsUUFDQSxJQUFBQSxJQUNBQSxFQUFBLElBR0EsSUEvckNBRCxFQUNBRSxFQUNBQyxFQTZyQ0ExSixFQUFBekIsR0FBQXlCLFFBQUE1d0MsT0FBQW82QyxFQUFBeEosU0FBQSxJQUdBLGVBQUE5ckIsR0FBQXNKLElBQUFDLFdBanNDQWdzQixJQURBRixFQW1zQ0FBLEdBanNDQUcsRUFBQSxvQkFBQTV6QyxPQUFBRyxVQUFBdVgsU0FBQS9mLEtBQUE4N0MsS0FBQUEsRUFBQXA1QyxpQkFDQTZ0QyxHQUFBeUwsRUFBQSxDQUFBLHFCQUFBLElBQUEvcEMsT0FBQTZwQyxHQUFBLElBQUEscUVBQUEsMkJBQUF0ckMsS0FBQSxNQUNBKy9CLEdBQUEwTCxFQUFBLENBQUEsMEVBQUEsc0VBQUF6ckMsS0FBQSxNQWdzQ0FvakMsRUFBQW1JLEVBQUF4SixJQWh3Q0EveEMsU0FBQWtDLGlCQUFBLGFBQUE2c0MsRUFBQWxuQyxPQUFBNEQsT0FBQSxHQUFBa2hDLEdBQUEsQ0FDQStPLFNBQUEsS0FFQXI3QyxPQUFBNkIsaUJBQUEsT0FBQWd0QyxHQWl3Q0EsSUFPQXlNLEVBQ0FDLEVBUkE5SSxFQUFBanJDLE9BQUE0RCxPQUFBLEdBQUE4dkMsRUFBQSxDQUNBeEosUUFBQUEsSUFFQXpqQixFQUFBeWYsRUFBQXVOLEdBR0EsZUFBQXIxQixHQUFBc0osSUFBQUMsV0FDQW1zQixFQUFBM3lCLEVBQUE4cEIsRUFBQXJ2QyxTQUNBbTRDLEVBQUEsRUFBQXR0QixFQUFBN3VCLE9BQ0Ftd0MsR0FBQStMLEdBQUFDLEVBQUEsQ0FBQSxxRUFBQSxvRUFBQSxvRUFBQSxPQUFBLHNFQUFBLG1EQUFBLE9BQUEsa0NBQUEsNkNBQUE1ckMsS0FBQSxPQUdBLElBQUE2ckMsRUFBQXZ0QixFQUFBclYsT0FBQSxTQUFBK1MsRUFBQUYsR0FDQSxJQUFBM0osRUFBQTJKLEdBQUE2b0IsRUFBQTdvQixFQUFBZ25CLEdBTUEsT0FKQTN3QixHQUNBNkosRUFBQXJlLEtBQUF3VSxHQUdBNkosR0FDQSxJQUNBLE9BQUFoRCxFQUFBc3lCLEdBQUFPLEVBQUEsR0FBQUEsRUFHQVIsRUFBQS9LLGFBQUFBLEdBQ0ErSyxFQUFBUyxnQkFocUNBLFNBQUF6SSxHQUVBLGVBQUFwdEIsR0FBQXNKLElBQUFDLFVBQ0E0akIsRUFBQUMsRUFBQSxJQUdBeHJDLE9BQUE2WCxLQUFBMnpCLEdBQ0F6MEIsUUFBQSxTQUFBZSxHQUNBMndCLEdBQUEzd0IsR0FBQTB6QixFQUFBMXpCLE1BeXBDQTA3QixFQUFBek0sYUFBQUEsR0FDQSxJQWlGQW1OLEVBQUEsQ0FDQUMsVUFBQSxhQUNBQyxRQUFBLFFBQ0FDLE1BQUEsU0FrSEEsSUFBQWhNLEVBQUEsQ0FDQTk2QixLQUFBLGNBQ0E4M0IsY0FBQSxFQUNBamYsR0FBQSxTQUFBOUwsR0FDQSxJQUFBeTJCLEVBR0EsR0FBQSxPQUFBQSxFQUFBejJCLEVBQUE4d0IsTUFBQWhCLFVBQUEyRyxFQUFBckUsUUFLQSxNQUpBLGVBQUF0dUIsR0FBQXNKLElBQUFDLFVBQ0F1Z0IsR0FBQTV0QixFQUFBOHdCLE1BQUEvQyxZQUFBLGtFQUdBLEdBR0EsSUE0Q0ErRCxFQTVDQUksRUFBQVIsR0FBQTF4QixFQUFBMEosUUFDQTRpQixFQUFBNEYsRUFBQTVGLElBQ0FockMsRUFBQTR3QyxFQUFBNXdDLFFBRUF3d0MsRUFBQTl4QixFQUFBOHdCLE1BQUEvQyxjQXdDQStELEVBQUFyRyxNQUNBK0YsVUFBQTdHLEVBQ0F1QixHQUFBLENBQUE0RixHQUFBLFVBQ0FBLEdBM0NBLEtBQ0EsTUFBQSxDQUNBNUMsU0FBQSxXQUNBNEMsSUFDQXhGLEVBQUEwTixhQUFBbEksRUFBQXhGLEVBQUFxRixtQkFDQXJGLEVBQUFuVyxhQUFBLG1CQUFBLElBQ0FtVyxFQUFBdG5DLE1BQUF3aUIsU0FBQSxTQUNBeEgsRUFBQTJ6QixTQUFBLENBQ0EzZCxPQUFBLEVBQ0FtYSxVQUFBLGlCQUlBYixRQUFBLFdBQ0EsSUFDQXJELEVBQ0F1QyxFQUZBc0QsSUFDQTdGLEVBQUFLLEVBQUF0bkMsTUFBQWluQyxtQkFDQXVDLEVBQUFwTyxPQUFBNkwsRUFBQTFuQyxRQUFBLEtBQUEsS0FJQWpELEVBQUEwRCxNQUFBaTFDLGdCQUFBdHFCLEtBQUFZLE1BQUFpZSxFQUFBLElBQUEsS0FDQXNELEVBQUE5c0MsTUFBQWluQyxtQkFBQUEsRUFDQUMsR0FBQSxDQUFBNEYsR0FBQSxhQUdBdkMsT0FBQSxXQUNBdUMsSUFDQUEsRUFBQTlzQyxNQUFBaW5DLG1CQUFBLFFBR0FvRCxPQUFBLFdBQ0F5QyxHQUNBNUYsR0FBQSxDQUFBNEYsR0FBQSxjQWNBLElBQUE5RCxFQUFBLENBQ0EvNkIsS0FBQSxlQUNBODNCLGNBQUEsRUFDQWpmLEdBQUEsU0FBQTlMLEdBQ0EsSUFBQTJKLEVBQUEzSixFQUFBMkosVUFDQXlwQixFQUFBakgsR0FBQW5zQixFQUFBOHdCLE1BQUFaLGVBQUF2bUIsR0FDQXV3QixFQUFBLEtBRUEsU0FBQUMsSUFDQSxNQUFBLFdBQUFuNkIsRUFBQTh3QixNQUFBYixRQUFBL00sT0FHQSxTQUFBa1gsSUFFQSxJQUFBQyxJQUFBRixLQUNBLE9BQUFELEtBQUEsSUFBQUEsRUFBQWxDLFNBQUEsSUFBQWtDLEVBQUFqQyxTQUNBLE9BQUFqNEIsRUFBQTh3QixNQUFBOUMsY0FBQXFNLEVBT0EsU0FBQUMsRUFBQUMsR0FDQUEsR0FDQXY2QixFQUFBMnpCLFNBQUEsQ0FDQWxGLHVCQUFBLE9BS0EsU0FBQStMLElBQ0FKLElBY0FoSCxFQUFBcnpDLGlCQUFBLFlBQUFvekMsR0FYQW1ILEVBQUF0NkIsRUFBQTh3QixNQUFBOUMsY0FjQSxTQUFBbkUsSUFDQXVKLEVBQUF6ZCxvQkFBQSxZQUFBd2QsR0FHQSxTQUFBQSxFQUFBbHpDLEdBQ0FpNkMsRUFBQSxDQUNBbEMsUUFBQS8zQyxFQUFBKzNDLFFBQ0FDLFFBQUFoNEMsRUFBQWc0QyxTQUlBLElBQUF3QyxHQUFBeDZDLEVBQUFpRCxRQUFBeW1CLEVBQUF4cUIsU0FBQWMsRUFBQWlELFFBQ0E4cUMsRUFBQWh1QixFQUFBOHdCLE1BQUE5QyxhQUNBZ0ssRUFBQS8zQyxFQUFBKzNDLFFBQ0FDLEVBQUFoNEMsRUFBQWc0QyxRQUNBcnlCLEVBQUErRCxFQUFBakUsd0JBQ0FnMUIsRUFBQTFDLEVBQUFweUIsRUFBQU0sS0FDQXkwQixFQUFBMUMsRUFBQXJ5QixFQUFBRyxLQUVBMDBCLEdBQUF6NkIsRUFBQTh3QixNQUFBbEMsYUFDQTV1QixFQUFBMnpCLFNBQUEsQ0FDQWxGLHVCQUFBLFdBQ0EsSUFBQTdvQixFQUFBK0QsRUFBQWpFLHdCQUNBUyxFQUFBNnhCLEVBQ0F4dEMsRUFBQXl0QyxFQUVBLFlBQUFqSyxJQUNBN25CLEVBQUFQLEVBQUFNLEtBQUF3MEIsRUFDQWx3QyxFQUFBb2IsRUFBQUcsSUFBQTQwQixHQUdBLElBQUE1MEIsRUFBQSxlQUFBaW9CLEVBQUFwb0IsRUFBQUcsSUFBQXZiLEVBQ0F3YixFQUFBLGFBQUFnb0IsRUFBQXBvQixFQUFBSSxNQUFBRyxFQUNBRixFQUFBLGVBQUErbkIsRUFBQXBvQixFQUFBSyxPQUFBemIsRUFDQTBiLEVBQUEsYUFBQThuQixFQUFBcG9CLEVBQUFNLEtBQUFDLEVBQ0EsTUFBQSxDQUNBTixNQUFBRyxFQUFBRSxFQUNBSixPQUFBRyxFQUFBRixFQUNBQSxJQUFBQSxFQUNBQyxNQUFBQSxFQUNBQyxPQUFBQSxFQUNBQyxLQUFBQSxPQXRFQXVtQixHQUFBQyxTQUFBLFlBQUExc0IsRUFBQTh3QixNQUFBOUMsY0FBQWh1QixFQUFBZ00sTUFBQWtoQixZQTZFQXJELElBSUEsTUFBQSxDQUNBbUYsY0FBQSxTQUFBdmtDLEVBQUE2aUIsR0FDQSxJQUFBMGdCLEVBQUExZ0IsRUFBQTBnQixrQkFFQWpsQyxJQUFBaWxDLEdBQUFBLEdBQ0FzTSxHQUFBLElBR0FoTCxRQUFBLFdBckVBOEssS0FDQWpILEVBQUErRyxJQXVFQTNLLE9BQUEsV0FDQTRLLE1BR0FELEVBQUEsQ0FDQWxDLFFBQUEsRUFDQUMsUUFBQSxHQUVBdUMsTUFHQS9LLFVBQUEsU0FBQWhsQyxFQUFBeEssR0FFQWk2QyxJQUlBeE8sR0FBQXpyQyxLQUNBaTZDLEVBQUEsQ0FDQWxDLFFBQUEvM0MsRUFBQSszQyxRQUNBQyxRQUFBaDRDLEVBQUFnNEMsVUFJQXVDLE1BRUE5SyxZQUFBLFdBRUExdkIsRUFBQWdNLE1BQUFraEIsWUFDQXJELElBQ0FxUSxFQUFBLE9BR0E5SyxTQUFBLFdBQ0F2RixJQUNBcVEsRUFBQSxTQVFBak0sRUFBQSxDQUNBaDdCLEtBQUEsb0JBQ0E4M0IsY0FBQSxFQUNBamYsR0FBQSxTQUFBOUwsR0FDQSxJQU1BOWEsRUFOQXlrQixFQUFBM0osRUFBQTJKLFVBT0EsSUFBQVUsRUFBQSxDQUNBcFgsS0FBQSx5QkFDQWthLFNBQUEsRUFDQUYsTUFBQSxhQUNBbkIsR0FBQSxTQUFBd0IsR0FDQSxJQUFBdEIsRUFBQXNCLEVBQUF0QixNQVRBaE0sRUFBQTh3QixNQUFBN0Msb0JBWUEvb0MsSUFBQThtQixFQUFBOW1CLFdBQ0E4YSxFQUFBMnpCLFNBQUEsQ0FDQWxGLHVCQUFBLFdBQ0EsT0EyQkEsU0FBQW1NLEVBQUFDLEVBQUFDLEdBRUEsR0FBQUEsRUFBQXg5QyxPQUFBLEdBQUEsT0FBQXM5QyxFQUNBLE9BQUFDLEVBR0EsT0FBQUQsR0FDQSxJQUFBLE1BQ0EsSUFBQSxTQUVBLElBQUFHLEVBQUFELEVBQUEsR0FDQUUsRUFBQUYsRUFBQUEsRUFBQXg5QyxPQUFBLEdBQ0EyOUMsRUFBQSxRQUFBTCxFQUNBNzBCLEVBQUFnMUIsRUFBQWgxQixJQUNBRSxFQUFBKzBCLEVBQUEvMEIsT0FDQUMsRUFBQSswQixFQUFBRixFQUFBNzBCLEtBQUE4MEIsRUFBQTkwQixLQUNBRixFQUFBaTFCLEVBQUFGLEVBQUEvMEIsTUFBQWcxQixFQUFBaDFCLE1BR0EsTUFBQSxDQUNBRCxJQUFBQSxFQUNBRSxPQUFBQSxFQUNBQyxLQUFBQSxFQUNBRixNQUFBQSxFQUNBSCxNQVBBRyxFQUFBRSxFQVFBSixPQVBBRyxFQUFBRixHQVdBLElBQUEsT0FDQSxJQUFBLFFBRUEsSUFBQW0xQixFQUFBdnJCLEtBQUE2RCxJQUFBbnBCLE1BQUFzbEIsS0FBQW1yQixFQUFBemxDLElBQUEsU0FBQW9aLEdBQ0EsT0FBQUEsRUFBQXZJLFFBRUFpMUIsRUFBQXhyQixLQUFBbUQsSUFBQXpvQixNQUFBc2xCLEtBQUFtckIsRUFBQXpsQyxJQUFBLFNBQUFvWixHQUNBLE9BQUFBLEVBQUF6SSxTQUVBbzFCLEVBQUFOLEVBQUE1dEIsT0FBQSxTQUFBdEgsR0FDQSxNQUFBLFNBQUFnMUIsRUFBQWgxQixFQUFBTSxPQUFBZzFCLEVBQUF0MUIsRUFBQUksUUFBQW0xQixJQUVBRSxFQUFBRCxFQUFBLEdBQUFyMUIsSUFDQXUxQixFQUFBRixFQUFBQSxFQUFBOTlDLE9BQUEsR0FBQTJvQixPQVFBLE1BQUEsQ0FDQUYsSUFBQXMxQixFQUNBcDFCLE9BQUFxMUIsRUFDQXAxQixLQVZBZzFCLEVBV0FsMUIsTUFWQW0xQixFQVdBdDFCLE1BWEFzMUIsRUFEQUQsRUFhQXAxQixPQVJBdzFCLEVBQUFELEdBWUEsUUFFQSxPQUFBUixHQTlFQVUsQ0FBQXJ3QixHQVhBYyxFQUFBOW1CLFdBV0F5a0IsRUFBQWpFLHdCQUFBOGxCLEdBQUE3aEIsRUFBQTZ4QixzQkFOQXQyQyxFQUFBOG1CLEVBQUE5bUIsYUFTQSxNQUFBLENBQ0FncUMsU0FBQSxXQUNBLElBQUF1TSxFQUVBejdCLEVBQUEyekIsU0FBQSxDQUNBOUQsY0FBQW5xQyxPQUFBNEQsT0FBQSxHQUFBMFcsRUFBQTh3QixNQUFBakIsY0FBQSxDQUNBNWxCLFVBQUEsR0FBQWpyQixRQUFBLE9BQUF5OEMsRUFBQXo3QixFQUFBOHdCLE1BQUFqQixvQkFBQSxFQUFBNEwsRUFBQXh4QixZQUFBLEdBQUEsQ0FBQUksWUEwRUEsSUFBQTZqQixFQUFBLENBQ0FqN0IsS0FBQSxTQUNBODNCLGNBQUEsRUFDQWpmLEdBQUEsU0FBQTlMLEdBQ0EsSUFBQTJKLEVBQUEzSixFQUFBMkosVUFDQUQsRUFBQTFKLEVBQUEwSixPQU1BLFNBQUFneUIsRUFBQTE3QyxHQUNBLE9BQUEsSUFBQWdnQixFQUFBOHdCLE1BQUE1QyxRQUFBbHVCLEVBQUE4d0IsTUFBQTVDLFNBQUFsdUMsRUFHQSxJQUFBMjdDLEVBQUEsS0FDQUMsRUFBQSxLQUVBLFNBQUFDLElBQ0EsSUFBQUMsRUFBQUosRUFBQSxjQVhBMTdCLEVBQUFxekIsZUFBQXJ6QixFQUFBcXpCLGVBQUFybkIsTUFBQUcsU0FBQXhDLFVBQUFBLEdBV0FqRSx3QkFBQSxLQUNBcTJCLEVBQUFMLEVBQUEsVUFBQWh5QixFQUFBaEUsd0JBQUEsTUFFQW8yQixHQUFBRSxFQUFBTCxFQUFBRyxJQUFBQyxHQUFBQyxFQUFBSixFQUFBRyxLQUNBLzdCLEVBQUFxekIsZ0JBQ0FyekIsRUFBQXF6QixlQUFBL2tCLFNBSUFxdEIsRUFBQUcsRUFDQUYsRUFBQUcsRUFFQS83QixFQUFBZ00sTUFBQXVuQixXQUNBYyxzQkFBQXdILEdBSUEsTUFBQSxDQUNBdk0sUUFBQSxXQUNBdHZCLEVBQUE4d0IsTUFBQTVDLFFBQ0EyTixRQU9BLFNBQUFHLEVBQUFDLEVBQUFDLEdBQ0EsT0FBQUQsSUFBQUMsSUFDQUQsRUFBQWwyQixNQUFBbTJCLEVBQUFuMkIsS0FBQWsyQixFQUFBajJCLFFBQUFrMkIsRUFBQWwyQixPQUFBaTJCLEVBQUFoMkIsU0FBQWkyQixFQUFBajJCLFFBQUFnMkIsRUFBQS8xQixPQUFBZzJCLEVBQUFoMkIsTUFNQWd6QixFQUFBUyxnQkFBQSxDQUNBN0osT0FBQUEsSUFHQTF5QyxFQUFBMndDLFlBQUFBLEVBQ0Ezd0MsRUFBQSsrQyxnQkFyakJBLFNBQUFDLEVBQUFoRCxHQWFBLElBQUF0RyxPQVpBLElBQUFzRyxJQUNBQSxFQUFBLElBSUEsZUFBQXQxQixHQUFBc0osSUFBQUMsVUFDQXVnQixJQUFBcG5DLE1BQUFzWixRQUFBczhCLEdBQUEsQ0FBQSxxRUFBQSx3Q0FBQTlzQyxPQUFBOHNDLElBQUF2dUMsS0FBQSxNQUdBdXVDLEVBQUEzL0IsUUFBQSxTQUFBdUQsR0FDQUEsRUFBQWkyQixZQUdBLElBQUFvRyxFQUFBRCxFQUFBL21DLElBQUEsU0FBQTJLLEdBQ0EsT0FBQUEsRUFBQTJKLFlBRUEyeUIsRUFBQSxDQUNBeHdCLEdBQUEsV0FDQSxNQUFBLENBQ0FxakIsVUFBQSxXQUNBaU4sRUFBQTMvQixRQUFBLFNBQUF1RCxHQUNBQSxFQUFBZzJCLFlBR0F2RyxVQUFBLFNBQUF6dkIsRUFBQS9mLEdBQ0EsSUFRQXM4QyxFQVJBcjVDLEVBQUFqRCxFQUFBNnlDLGNBQ0FqOUIsRUFBQXdtQyxFQUFBbnRDLFFBQUFoTSxHQUVBQSxJQUFBNHZDLElBSUFBLEVBQUE1dkMsRUFDQXE1QyxHQUFBbkQsRUFBQW9ELFdBQUEsSUFBQXg5QyxPQUFBLFdBQUE4WCxPQUFBLFNBQUErUyxFQUFBc25CLEdBRUEsT0FEQXRuQixFQUFBc25CLEdBQUFpTCxFQUFBdm1DLEdBQUFpN0IsTUFBQUssR0FDQXRuQixHQUNBLElBQ0E3SixFQUFBMnpCLFNBQUFqdUMsT0FBQTRELE9BQUEsR0FBQWl6QyxFQUFBLENBQ0E5Tix1QkFBQSxXQUNBLE9BQUF2ckMsRUFBQXdpQixpQ0FPQSxPQUFBd3pCLEVBQUF6TixLQUFBL2xDLE9BQUE0RCxPQUFBLEdBQUE4aEMsRUFBQWdPLEVBQUEsQ0FBQSxjQUFBLENBQ0F4SixRQUFBLENBQUEwTSxHQUFBdDlDLE9BQUFvNkMsRUFBQXhKLFNBQUEsSUFDQU0sY0FBQW1NLE1BcWdCQWovQyxFQUFBcS9DLFFBQUF2RCxFQUNBOTdDLEVBQUFzL0MsU0F4ZkEsU0FBQXZELEVBQUFySSxHQUVBLGVBQUFodEIsR0FBQXNKLElBQUFDLFVBQ0F1Z0IsS0FBQWtELEdBQUFBLEVBQUE1dEMsUUFBQSxDQUFBLDZFQUFBLG9EQUFBMkssS0FBQSxNQUdBLElBQUFxOEIsRUFBQSxHQUNBeVMsRUFBQSxHQUNBejVDLEVBQUE0dEMsRUFBQTV0QyxPQUNBMDVDLEVBQUF4UixFQUFBMEYsRUFBQSxDQUFBLFdBQ0ErTCxFQUFBbjNDLE9BQUE0RCxPQUFBLEdBQUFzekMsRUFBQSxDQUNBM00sUUFBQSxXQUVBNk0sRUFBQXAzQyxPQUFBNEQsT0FBQSxHQUFBc3pDLEVBQUEsQ0FDQTdNLGNBQUEsSUFFQWdOLEVBQUE3RCxFQUFBQyxFQUFBMEQsR0FHQSxTQUFBcE4sRUFBQXh2QyxHQUNBLElBSUErOEMsRUFrQkFoOUIsR0F0QkEvZixFQUFBaUQsU0FJQTg1QyxFQUFBLzhDLEVBQUFpRCxPQUFBKzVDLFFBQUEvNUMsT0FVQTg1QyxFQUFBaE0sYUFBQSx1QkFBQUYsRUFBQWIsU0FBQTlCLEdBQUE4QixTQUdBL2dDLFFBQUEwcUMsRUFBQTM1QyxFQUFBdUQsT0FBQSxHQUNBdzVDLEVBQUFyL0MsU0FJQXFpQixFQUFBazVCLEVBQUE4RCxFQUFBRixNQUdBSCxFQUFBQSxFQUFBMzlDLE9BQUFnaEIsS0FJQSxTQUFBdmdCLEVBQUF5a0IsRUFBQXN6QixFQUFBQyxFQUFBMW5DLFFBQ0EsSUFBQUEsSUFDQUEsR0FBQSxHQUdBbVUsRUFBQW5rQixpQkFBQXkzQyxFQUFBQyxFQUFBMW5DLEdBQ0FtNkIsRUFBQTErQixLQUFBLENBQ0EwWSxLQUFBQSxFQUNBc3pCLFVBQUFBLEVBQ0FDLFFBQUFBLEVBQ0ExbkMsUUFBQUEsSUE2Q0EsT0F2RkF1N0IsR0FBQXlSLEdBc0ZBdGdDLFFBdEJBLFNBQUF1RCxHQUNBLElBbEJBMkosRUFrQkF1ekIsRUFBQWw5QixFQUFBK08sUUFFQS9PLEVBQUErTyxRQUFBLFNBQUFvdUIsUUFDQSxJQUFBQSxJQUNBQSxHQUFBLEdBR0FBLEdBQ0FSLEVBQUFsZ0MsUUFBQSxTQUFBdUQsR0FDQUEsRUFBQStPLFlBSUE0dEIsRUFBQSxHQXhCQXpTLEVBQUF6dEIsUUFBQSxTQUFBNlEsR0FDQSxJQUFBcEosRUFBQW9KLEVBQUFwSixLQUNBc3pCLEVBQUFscUIsRUFBQWtxQixVQUNBQyxFQUFBbnFCLEVBQUFtcUIsUUFDQTFuQyxFQUFBdWQsRUFBQXZkLFFBQ0FtVSxFQUFBeVIsb0JBQUE2aEIsRUFBQUMsRUFBQTFuQyxLQUVBbTZCLEVBQUEsR0FtQkFnVCxLQWhDQXo5QyxFQURBa3FCLEVBb0NBM0osRUFwQ0EySixVQUNBLFlBQUE4bEIsR0FDQWh3QyxFQUFBa3FCLEVBQUEsVUFBQThsQixHQUNBaHdDLEVBQUFrcUIsRUFBQSxRQUFBOGxCLEtBcUNBc04sR0FpWkEzL0MsRUFBQTR3QyxhQUFBQSxFQUNBNXdDLEVBQUFnZ0QsUUFybEJBLFNBQUFDLEdBQ0EsSUFBQS92QixPQUFBLElBQUErdkIsRUFBQSxHQUFBQSxFQUNBQyxFQUFBaHdCLEVBQUFpd0IsUUFDQS9PLEVBQUFsaEIsRUFBQWtoQixTQUVBK0QsR0FBQTkxQixRQUFBLFNBQUF1RCxHQUNBLElBT0F3OUIsRUFQQUMsR0FBQSxFQUVBSCxJQUNBRyxFQUFBOVIsRUFBQTJSLEdBQUF0OUIsRUFBQTJKLFlBQUEyekIsRUFBQXQ5QixFQUFBMEosU0FBQTR6QixFQUFBNXpCLFFBR0ErekIsSUFDQUQsRUFBQXg5QixFQUFBOHdCLE1BQUF0QyxTQUNBeHVCLEVBQUEyekIsU0FBQSxDQUNBbkYsU0FBQUEsSUFFQXh1QixFQUFBMDFCLE9BRUExMUIsRUFBQWdNLE1BQUFPLGFBQ0F2TSxFQUFBMnpCLFNBQUEsQ0FDQW5GLFNBQUFnUCxRQWlrQkFwZ0QsRUFBQTZ3QyxrQkFBQUEsRUFDQTd3QyxFQUFBc2dELFdBMWtFQSwyTEEya0VBdGdELEVBQUE4d0MsT0FBQUEiLCJmaWxlIjoiY2hhdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCLvu79pbXBvcnQgKiBhcyBzaWduYWxSIGZyb20gXCJAbWljcm9zb2Z0L3NpZ25hbHJcIjtcclxuaW1wb3J0IHRpcHB5IGZyb20gJ3RpcHB5LmpzJztcclxuXHJcbmNvbnN0IHNlbmRCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnd2lraS10YWxrLXNlbmQnKTtcclxuaWYgKHNlbmRCdXR0b24pIHtcclxuICAgIHNlbmRCdXR0b24uY29tcGxldGVseURpc2FibGVkID0gdHJ1ZTtcclxuICAgIHNlbmRCdXR0b24uZGlzYWJsZWQgPSB0cnVlO1xyXG59XHJcbmNvbnN0IGNoYXRJbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwid2lraS10YWxrLW5ld21lc3NhZ2UtaW5wdXRcIik7XHJcblxyXG53aW5kb3cud2lraW12Y2NoYXQgPSB7XHJcbiAgICBjb25uZWN0aW9uOiBudWxsLFxyXG4gICAgbWVzc2FnZUxpc3RVbDogbnVsbCxcclxuICAgIHVzZXJOYW1lc3BhY2U6IFwiVXNlcnNcIixcclxuXHJcbiAgICBpbml0OiBmdW5jdGlvbiAodXJsLCB1c2VyTmFtZXNwYWNlLCB0b3BpY0lkLCBtZXNzYWdlcykge1xyXG4gICAgICAgIHdpbmRvdy53aWtpbXZjY2hhdC51c2VyTmFtZXNwYWNlID0gdXNlck5hbWVzcGFjZTtcclxuXHJcbiAgICAgICAgd2luZG93Lndpa2ltdmNjaGF0Lm1lc3NhZ2VMaXN0VWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIndpa2ktdGFsay1tZXNzYWdlLWxpc3RcIik7XHJcbiAgICAgICAgaWYgKHdpbmRvdy53aWtpbXZjY2hhdC5tZXNzYWdlTGlzdFVsID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbWVzc2FnZXMgPSBKU09OLnBhcnNlKG1lc3NhZ2VzKSB8fCBbXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1lc3NhZ2VzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHdpbmRvdy53aWtpbXZjY2hhdC5hZGRNZXNzYWdlKG1lc3NhZ2VzW2ldKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG1lc3NhZ2VzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgbGV0IGxhc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgd2lraS1tZXNzYWdlLWRpdi0ke21lc3NhZ2VzW21lc3NhZ2VzLmxlbmd0aCAtIDFdLmlkfWApO1xyXG4gICAgICAgICAgICBpZiAobGFzdCAhPSBudWxsICYmIGxhc3QuY2xhc3NMaXN0LmNvbnRhaW5zKFwid2lraS1tZXNzYWdlLXRocmVhZFwiKSkge1xyXG4gICAgICAgICAgICAgICAgbGFzdC5jbGFzc0xpc3QuYWRkKFwiZXhwYW5kZWRcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh1cmwgJiYgdXJsLmxlbmd0aCAmJiB0b3BpY0lkICYmIHRvcGljSWQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHdpbmRvdy53aWtpbXZjY2hhdC5jb25uZWN0aW9uID0gbmV3IHNpZ25hbFJcclxuICAgICAgICAgICAgICAgIC5IdWJDb25uZWN0aW9uQnVpbGRlcigpXHJcbiAgICAgICAgICAgICAgICAud2l0aFVybCh1cmwpXHJcbiAgICAgICAgICAgICAgICAud2l0aEF1dG9tYXRpY1JlY29ubmVjdCgpXHJcbiAgICAgICAgICAgICAgICAuYnVpbGQoKTtcclxuXHJcbiAgICAgICAgICAgIHdpbmRvdy53aWtpbXZjY2hhdC5jb25uZWN0aW9uLm9uKFwiUmVjZWl2ZVwiLCB3aW5kb3cud2lraW12Y2NoYXQuYWRkTWVzc2FnZSk7XHJcblxyXG4gICAgICAgICAgICB3aW5kb3cud2lraW12Y2NoYXQuY29ubmVjdGlvbi5zdGFydCgpLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgc2VuZEJ1dHRvbi5jb21wbGV0ZWx5RGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICAgICAgLy9yZXR1cm4gY29uc29sZS5lcnJvcihlcnIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnNvbGUuZXJyb3IoXCJBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSBjb25uZWN0aW5nIHRvIGNoYXRcIik7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNoYXRJbnB1dCkge1xyXG4gICAgICAgICAgICAgICAgY2hhdElucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzZW5kQnV0dG9uLmNvbXBsZXRlbHlEaXNhYmxlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZW5kQnV0dG9uLmRpc2FibGVkID0gIWNoYXRJbnB1dC52YWx1ZSB8fCAhKGNoYXRJbnB1dC52YWx1ZS5sZW5ndGggPiAwKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBjaGF0SW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImtleXByZXNzXCIsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5rZXlDb2RlID09PSAxMyAmJiAhZXZlbnQuc2hpZnRLZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93Lndpa2ltdmNjaGF0LnNlbmRNZXNzYWdlKHRvcGljSWQsIGNoYXRJbnB1dC52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoc2VuZEJ1dHRvbikge1xyXG4gICAgICAgICAgICAgICAgc2VuZEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2luZG93Lndpa2ltdmNjaGF0LnNlbmRNZXNzYWdlKHRvcGljSWQsIGNoYXRJbnB1dC52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBhZGRNZXNzYWdlOiBmdW5jdGlvbiAobWVzc2FnZSkge1xyXG4gICAgICAgIGlmIChtZXNzYWdlID09IG51bGwgfHwgbWVzc2FnZS5jb250ZW50ID09IG51bGwgfHwgbWVzc2FnZS5jb250ZW50Lmxlbmd0aCA9PSBudWxsIHx8ICEobWVzc2FnZS5jb250ZW50Lmxlbmd0aCA+IDApKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBpc1JlcGx5ID0gbWVzc2FnZS5yZXBseU1lc3NhZ2VJZCAhPSBudWxsICYmIG1lc3NhZ2UucmVwbHlNZXNzYWdlSWQubGVuZ3RoICE9IG51bGwgJiYgbWVzc2FnZS5yZXBseU1lc3NhZ2VJZC5sZW5ndGggPiAwO1xyXG4gICAgICAgIGxldCBlbW9qaVJlZ0V4cCA9IC8oPzpcXHVEODNEKD86XFx1REQ3M1xcdUZFMEY/fFxcdURDNDEoPzooPzpcXHVGRTBGKD86XFx1MjAwRFxcdUQ4M0RcXHVEREU4XFx1RkUwRj8pP3xcXHUyMDBEXFx1RDgzRFxcdURERThcXHVGRTBGPykpP3xbXFx1RERFOFxcdURERUZdXFx1RkUwRj98XFx1REM0Qig/OlxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXSk/fFxcdUREOTAoPzooPzpcXHVEODNDW1xcdURGRkItXFx1REZGRl18XFx1RkUwRikpP3xbXFx1REQ5NlxcdURDNENcXHVEQzQ4XFx1REM0OVxcdURDNDZcXHVERDk1XFx1REM0N1xcdURDNERcXHVEQzRFXFx1REM0QVxcdURDNEZcXHVERTRDXFx1REM1MFxcdURFNEZcXHVEQzg1XFx1RENBQVxcdURDNDJcXHVEQzQzXFx1REM3NlxcdURDNjZcXHVEQzY3XSg/OlxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXSk/fFxcdURDNzEoPzooPzpcXHVEODNDKD86W1xcdURGRkItXFx1REZGRl0oPzpcXHUyMDBEKD86W1xcdTI2NDBcXHUyNjQyXVxcdUZFMEY/KSk/KXxcXHUyMDBEKD86W1xcdTI2NDBcXHUyNjQyXVxcdUZFMEY/KSkpP3xcXHVEQzY4KD86KD86XFx1RDgzQyg/OlxcdURGRkIoPzpcXHUyMDBEKD86XFx1RDgzRSg/OlxcdUREMURcXHUyMDBEXFx1RDgzRFxcdURDNjhcXHVEODNDW1xcdURGRkMtXFx1REZGRl18W1xcdUREQjBcXHVEREIxXFx1RERCM1xcdUREQjJcXHVEREFGXFx1RERCQ1xcdUREQkRdKXxcXHUyNjk1XFx1RkUwRj98XFx1RDgzQ1tcXHVERjkzXFx1REZFQlxcdURGM0VcXHVERjczXFx1REZFRFxcdURGQTRcXHVERkE4XXxcXHUyNjk2XFx1RkUwRj98XFx1RDgzRFtcXHVERDI3XFx1RENCQ1xcdUREMkNcXHVEQ0JCXFx1REU4MFxcdURFOTJdfFxcdTI3MDhcXHVGRTBGPykpP3xcXHVERkZDKD86XFx1MjAwRCg/OlxcdUQ4M0UoPzpcXHVERDFEXFx1MjAwRFxcdUQ4M0RcXHVEQzY4XFx1RDgzQ1tcXHVERkZCXFx1REZGRC1cXHVERkZGXXxbXFx1RERCMFxcdUREQjFcXHVEREIzXFx1RERCMlxcdUREQUZcXHVEREJDXFx1RERCRF0pfFxcdTI2OTVcXHVGRTBGP3xcXHVEODNDW1xcdURGOTNcXHVERkVCXFx1REYzRVxcdURGNzNcXHVERkVEXFx1REZBNFxcdURGQThdfFxcdTI2OTZcXHVGRTBGP3xcXHVEODNEW1xcdUREMjdcXHVEQ0JDXFx1REQyQ1xcdURDQkJcXHVERTgwXFx1REU5Ml18XFx1MjcwOFxcdUZFMEY/KSk/fFxcdURGRkQoPzpcXHUyMDBEKD86XFx1RDgzRSg/OlxcdUREMURcXHUyMDBEXFx1RDgzRFxcdURDNjhcXHVEODNDW1xcdURGRkJcXHVERkZDXFx1REZGRVxcdURGRkZdfFtcXHVEREIwXFx1RERCMVxcdUREQjNcXHVEREIyXFx1RERBRlxcdUREQkNcXHVEREJEXSl8XFx1MjY5NVxcdUZFMEY/fFxcdUQ4M0NbXFx1REY5M1xcdURGRUJcXHVERjNFXFx1REY3M1xcdURGRURcXHVERkE0XFx1REZBOF18XFx1MjY5NlxcdUZFMEY/fFxcdUQ4M0RbXFx1REQyN1xcdURDQkNcXHVERDJDXFx1RENCQlxcdURFODBcXHVERTkyXXxcXHUyNzA4XFx1RkUwRj8pKT98XFx1REZGRSg/OlxcdTIwMEQoPzpcXHVEODNFKD86XFx1REQxRFxcdTIwMERcXHVEODNEXFx1REM2OFxcdUQ4M0NbXFx1REZGQi1cXHVERkZEXFx1REZGRl18W1xcdUREQjBcXHVEREIxXFx1RERCM1xcdUREQjJcXHVEREFGXFx1RERCQ1xcdUREQkRdKXxcXHUyNjk1XFx1RkUwRj98XFx1RDgzQ1tcXHVERjkzXFx1REZFQlxcdURGM0VcXHVERjczXFx1REZFRFxcdURGQTRcXHVERkE4XXxcXHUyNjk2XFx1RkUwRj98XFx1RDgzRFtcXHVERDI3XFx1RENCQ1xcdUREMkNcXHVEQ0JCXFx1REU4MFxcdURFOTJdfFxcdTI3MDhcXHVGRTBGPykpP3xcXHVERkZGKD86XFx1MjAwRCg/OlxcdUQ4M0UoPzpcXHVERDFEXFx1MjAwRFxcdUQ4M0RcXHVEQzY4XFx1RDgzQ1tcXHVERkZCLVxcdURGRkVdfFtcXHVEREIwXFx1RERCMVxcdUREQjNcXHVEREIyXFx1RERBRlxcdUREQkNcXHVEREJEXSl8XFx1MjY5NVxcdUZFMEY/fFxcdUQ4M0NbXFx1REY5M1xcdURGRUJcXHVERjNFXFx1REY3M1xcdURGRURcXHVERkE0XFx1REZBOF18XFx1MjY5NlxcdUZFMEY/fFxcdUQ4M0RbXFx1REQyN1xcdURDQkNcXHVERDJDXFx1RENCQlxcdURFODBcXHVERTkyXXxcXHUyNzA4XFx1RkUwRj8pKT8pfFxcdTIwMEQoPzpcXHVEODNFW1xcdUREQjBcXHVEREIxXFx1RERCM1xcdUREQjJcXHVEREFGXFx1RERCQ1xcdUREQkRdfFxcdTI2OTVcXHVGRTBGP3xcXHVEODNDW1xcdURGOTNcXHVERkVCXFx1REYzRVxcdURGNzNcXHVERkVEXFx1REZBNFxcdURGQThdfFxcdTI2OTZcXHVGRTBGP3xcXHVEODNEKD86XFx1REM2OVxcdTIwMERcXHVEODNEKD86XFx1REM2Nig/OlxcdTIwMERcXHVEODNEXFx1REM2Nik/fFxcdURDNjcoPzpcXHUyMDBEXFx1RDgzRFtcXHVEQzY2XFx1REM2N10pPyl8XFx1REM2OFxcdTIwMERcXHVEODNEKD86XFx1REM2Nig/OlxcdTIwMERcXHVEODNEXFx1REM2Nik/fFxcdURDNjcoPzpcXHUyMDBEXFx1RDgzRFtcXHVEQzY2XFx1REM2N10pPyl8XFx1REM2Nig/OlxcdTIwMERcXHVEODNEXFx1REM2Nik/fFxcdURDNjcoPzpcXHUyMDBEXFx1RDgzRFtcXHVEQzY2XFx1REM2N10pP3xbXFx1REQyN1xcdURDQkNcXHVERDJDXFx1RENCQlxcdURFODBcXHVERTkyXSl8XFx1MjcwOFxcdUZFMEY/fFxcdTI3NjQoPzpcXHVGRTBGXFx1MjAwRFxcdUQ4M0QoPzpcXHVEQzhCXFx1MjAwRFxcdUQ4M0RcXHVEQzY4fFxcdURDNjgpfFxcdTIwMERcXHVEODNEKD86XFx1REM4QlxcdTIwMERcXHVEODNEXFx1REM2OHxcXHVEQzY4KSkpKSk/fFxcdURDNjkoPzooPzpcXHVEODNDKD86XFx1REZGQig/OlxcdTIwMEQoPzpcXHVEODNFKD86XFx1REQxRFxcdTIwMERcXHVEODNEKD86XFx1REM2OVxcdUQ4M0NbXFx1REZGQy1cXHVERkZGXXxcXHVEQzY4XFx1RDgzQ1tcXHVERkZDLVxcdURGRkZdKXxbXFx1RERCMFxcdUREQjFcXHVEREIzXFx1RERCMlxcdUREQUZcXHVEREJDXFx1RERCRF0pfFxcdTI2OTVcXHVGRTBGP3xcXHVEODNDW1xcdURGOTNcXHVERkVCXFx1REYzRVxcdURGNzNcXHVERkVEXFx1REZBNFxcdURGQThdfFxcdTI2OTZcXHVGRTBGP3xcXHVEODNEW1xcdUREMjdcXHVEQ0JDXFx1REQyQ1xcdURDQkJcXHVERTgwXFx1REU5Ml18XFx1MjcwOFxcdUZFMEY/KSk/fFxcdURGRkMoPzpcXHUyMDBEKD86XFx1RDgzRSg/OlxcdUREMURcXHUyMDBEXFx1RDgzRCg/OlxcdURDNjlcXHVEODNDW1xcdURGRkJcXHVERkZELVxcdURGRkZdfFxcdURDNjhcXHVEODNDW1xcdURGRkJcXHVERkZELVxcdURGRkZdKXxbXFx1RERCMFxcdUREQjFcXHVEREIzXFx1RERCMlxcdUREQUZcXHVEREJDXFx1RERCRF0pfFxcdTI2OTVcXHVGRTBGP3xcXHVEODNDW1xcdURGOTNcXHVERkVCXFx1REYzRVxcdURGNzNcXHVERkVEXFx1REZBNFxcdURGQThdfFxcdTI2OTZcXHVGRTBGP3xcXHVEODNEW1xcdUREMjdcXHVEQ0JDXFx1REQyQ1xcdURDQkJcXHVERTgwXFx1REU5Ml18XFx1MjcwOFxcdUZFMEY/KSk/fFxcdURGRkQoPzpcXHUyMDBEKD86XFx1RDgzRSg/OlxcdUREMURcXHUyMDBEXFx1RDgzRCg/OlxcdURDNjlcXHVEODNDW1xcdURGRkJcXHVERkZDXFx1REZGRVxcdURGRkZdfFxcdURDNjhcXHVEODNDW1xcdURGRkJcXHVERkZDXFx1REZGRVxcdURGRkZdKXxbXFx1RERCMFxcdUREQjFcXHVEREIzXFx1RERCMlxcdUREQUZcXHVEREJDXFx1RERCRF0pfFxcdTI2OTVcXHVGRTBGP3xcXHVEODNDW1xcdURGOTNcXHVERkVCXFx1REYzRVxcdURGNzNcXHVERkVEXFx1REZBNFxcdURGQThdfFxcdTI2OTZcXHVGRTBGP3xcXHVEODNEW1xcdUREMjdcXHVEQ0JDXFx1REQyQ1xcdURDQkJcXHVERTgwXFx1REU5Ml18XFx1MjcwOFxcdUZFMEY/KSk/fFxcdURGRkUoPzpcXHUyMDBEKD86XFx1RDgzRSg/OlxcdUREMURcXHUyMDBEXFx1RDgzRCg/OlxcdURDNjlcXHVEODNDW1xcdURGRkItXFx1REZGRFxcdURGRkZdfFxcdURDNjhcXHVEODNDW1xcdURGRkItXFx1REZGRFxcdURGRkZdKXxbXFx1RERCMFxcdUREQjFcXHVEREIzXFx1RERCMlxcdUREQUZcXHVEREJDXFx1RERCRF0pfFxcdTI2OTVcXHVGRTBGP3xcXHVEODNDW1xcdURGOTNcXHVERkVCXFx1REYzRVxcdURGNzNcXHVERkVEXFx1REZBNFxcdURGQThdfFxcdTI2OTZcXHVGRTBGP3xcXHVEODNEW1xcdUREMjdcXHVEQ0JDXFx1REQyQ1xcdURDQkJcXHVERTgwXFx1REU5Ml18XFx1MjcwOFxcdUZFMEY/KSk/fFxcdURGRkYoPzpcXHUyMDBEKD86XFx1RDgzRSg/OlxcdUREMURcXHUyMDBEXFx1RDgzRCg/OlxcdURDNjlcXHVEODNDW1xcdURGRkItXFx1REZGRV18XFx1REM2OFxcdUQ4M0NbXFx1REZGQi1cXHVERkZFXSl8W1xcdUREQjBcXHVEREIxXFx1RERCM1xcdUREQjJcXHVEREFGXFx1RERCQ1xcdUREQkRdKXxcXHUyNjk1XFx1RkUwRj98XFx1RDgzQ1tcXHVERjkzXFx1REZFQlxcdURGM0VcXHVERjczXFx1REZFRFxcdURGQTRcXHVERkE4XXxcXHUyNjk2XFx1RkUwRj98XFx1RDgzRFtcXHVERDI3XFx1RENCQ1xcdUREMkNcXHVEQ0JCXFx1REU4MFxcdURFOTJdfFxcdTI3MDhcXHVGRTBGPykpPyl8XFx1MjAwRCg/OlxcdUQ4M0VbXFx1RERCMFxcdUREQjFcXHVEREIzXFx1RERCMlxcdUREQUZcXHVEREJDXFx1RERCRF18XFx1MjY5NVxcdUZFMEY/fFxcdUQ4M0NbXFx1REY5M1xcdURGRUJcXHVERjNFXFx1REY3M1xcdURGRURcXHVERkE0XFx1REZBOF18XFx1MjY5NlxcdUZFMEY/fFxcdUQ4M0QoPzpcXHVEQzY5XFx1MjAwRFxcdUQ4M0QoPzpcXHVEQzY2KD86XFx1MjAwRFxcdUQ4M0RcXHVEQzY2KT98XFx1REM2Nyg/OlxcdTIwMERcXHVEODNEW1xcdURDNjZcXHVEQzY3XSk/KXxcXHVEQzY2KD86XFx1MjAwRFxcdUQ4M0RcXHVEQzY2KT98XFx1REM2Nyg/OlxcdTIwMERcXHVEODNEW1xcdURDNjZcXHVEQzY3XSk/fFtcXHVERDI3XFx1RENCQ1xcdUREMkNcXHVEQ0JCXFx1REU4MFxcdURFOTJdKXxcXHUyNzA4XFx1RkUwRj98XFx1Mjc2NCg/OlxcdUZFMEZcXHUyMDBEXFx1RDgzRCg/OlxcdURDOEJcXHUyMDBEXFx1RDgzRFtcXHVEQzY4XFx1REM2OV18W1xcdURDNjhcXHVEQzY5XSl8XFx1MjAwRFxcdUQ4M0QoPzpcXHVEQzhCXFx1MjAwRFxcdUQ4M0RbXFx1REM2OFxcdURDNjldfFtcXHVEQzY4XFx1REM2OV0pKSkpKT98W1xcdURDNzRcXHVEQzc1XSg/OlxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXSk/fFtcXHVERTREXFx1REU0RVxcdURFNDVcXHVERTQ2XFx1REM4MVxcdURFNEJcXHVERTQ3XFx1REM2RV0oPzooPzpcXHVEODNDKD86W1xcdURGRkItXFx1REZGRl0oPzpcXHUyMDBEKD86W1xcdTI2NDJcXHUyNjQwXVxcdUZFMEY/KSk/KXxcXHUyMDBEKD86W1xcdTI2NDJcXHUyNjQwXVxcdUZFMEY/KSkpP3xcXHVERDc1KD86KD86XFx1RkUwRig/OlxcdTIwMEQoPzpbXFx1MjY0MlxcdTI2NDBdXFx1RkUwRj8pKT98XFx1RDgzQyg/OltcXHVERkZCLVxcdURGRkZdKD86XFx1MjAwRCg/OltcXHUyNjQyXFx1MjY0MF1cXHVGRTBGPykpPyl8XFx1MjAwRCg/OltcXHUyNjQyXFx1MjY0MF1cXHVGRTBGPykpKT98W1xcdURDODJcXHVEQzc3XSg/Oig/OlxcdUQ4M0MoPzpbXFx1REZGQi1cXHVERkZGXSg/OlxcdTIwMEQoPzpbXFx1MjY0MlxcdTI2NDBdXFx1RkUwRj8pKT8pfFxcdTIwMEQoPzpbXFx1MjY0MlxcdTI2NDBdXFx1RkUwRj8pKSk/fFxcdURDNzgoPzpcXHVEODNDW1xcdURGRkItXFx1REZGRl0pP3xcXHVEQzczKD86KD86XFx1RDgzQyg/OltcXHVERkZCLVxcdURGRkZdKD86XFx1MjAwRCg/OltcXHUyNjQyXFx1MjY0MF1cXHVGRTBGPykpPyl8XFx1MjAwRCg/OltcXHUyNjQyXFx1MjY0MF1cXHVGRTBGPykpKT98W1xcdURDNzJcXHVEQzcwXFx1REM3Q10oPzpcXHVEODNDW1xcdURGRkItXFx1REZGRl0pP3xbXFx1REM4NlxcdURDODdcXHVERUI2XSg/Oig/OlxcdUQ4M0MoPzpbXFx1REZGQi1cXHVERkZGXSg/OlxcdTIwMEQoPzpbXFx1MjY0MlxcdTI2NDBdXFx1RkUwRj8pKT8pfFxcdTIwMEQoPzpbXFx1MjY0MlxcdTI2NDBdXFx1RkUwRj8pKSk/fFtcXHVEQzgzXFx1REQ3QV0oPzpcXHVEODNDW1xcdURGRkItXFx1REZGRl0pP3xcXHVERDc0KD86KD86XFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdfFxcdUZFMEYpKT98XFx1REM2Rig/OlxcdTIwMEQoPzpbXFx1MjY0MlxcdTI2NDBdXFx1RkUwRj8pKT98W1xcdURFQTNcXHVERUI0XFx1REVCNV0oPzooPzpcXHVEODNDKD86W1xcdURGRkItXFx1REZGRl0oPzpcXHUyMDBEKD86W1xcdTI2NDJcXHUyNjQwXVxcdUZFMEY/KSk/KXxcXHUyMDBEKD86W1xcdTI2NDJcXHUyNjQwXVxcdUZFMEY/KSkpP3xbXFx1REVDMFxcdURFQ0NcXHVEQzZEXFx1REM2QlxcdURDNkNdKD86XFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdKT98XFx1RERFM1xcdUZFMEY/fFxcdURDMTUoPzpcXHUyMDBEXFx1RDgzRVxcdUREQkEpP3xbXFx1REMzRlxcdURENEFcXHVERDc3XFx1REQ3OFxcdURERkFcXHVERUUzXFx1REVFNFxcdURFRTJcXHVERUYzXFx1REVFNVxcdURFRTlcXHVERUYwXFx1REVDRVxcdURENzBcXHVERDc5XFx1RERCQ1xcdURENzZcXHVERUNEXFx1RERBNVxcdUREQThcXHVEREIxXFx1RERCMlxcdURDRkRcXHVERDZGXFx1RERERVxcdURERjNcXHVERDhCXFx1REQ4QVxcdUREOENcXHVERDhEXFx1RERDMlxcdURERDJcXHVEREQzXFx1REQ4N1xcdUREQzNcXHVEREM0XFx1REREMVxcdURERERcXHVERUUwXFx1RERFMVxcdURFRTFcXHVERERDXFx1REVDRlxcdURFQ0JcXHVERDQ5XVxcdUZFMEY/fFtcXHVERTAwXFx1REUwM1xcdURFMDRcXHVERTAxXFx1REUwNlxcdURFMDVcXHVERTAyXFx1REU0MlxcdURFNDNcXHVERTA5XFx1REUwQVxcdURFMDdcXHVERTBEXFx1REUxOFxcdURFMTdcXHVERTFBXFx1REUxOVxcdURFMEJcXHVERTFCLVxcdURFMURcXHVERTEwXFx1REUxMVxcdURFMzZcXHVERTBGXFx1REUxMlxcdURFNDRcXHVERTJDXFx1REUwQ1xcdURFMTRcXHVERTJBXFx1REUzNFxcdURFMzdcXHVERTM1XFx1REUwRVxcdURFMTVcXHVERTFGXFx1REU0MVxcdURFMkVcXHVERTJGXFx1REUzMlxcdURFMzNcXHVERTI2LVxcdURFMjhcXHVERTMwXFx1REUyNVxcdURFMjJcXHVERTJEXFx1REUzMVxcdURFMTZcXHVERTIzXFx1REUxRVxcdURFMTNcXHVERTI5XFx1REUyQlxcdURFMjRcXHVERTIxXFx1REUyMFxcdURFMDhcXHVEQzdGXFx1REM4MFxcdURDQTlcXHVEQzc5LVxcdURDN0JcXHVEQzdEXFx1REM3RVxcdURFM0FcXHVERTM4XFx1REUzOVxcdURFM0ItXFx1REUzRFxcdURFNDBcXHVERTNGXFx1REUzRVxcdURFNDgtXFx1REU0QVxcdURDOEJcXHVEQzhDXFx1REM5OFxcdURDOURcXHVEQzk2XFx1REM5N1xcdURDOTNcXHVEQzlFXFx1REM5NVxcdURDOUZcXHVEQzk0XFx1REM5QlxcdURDOUFcXHVEQzk5XFx1REM5Q1xcdUREQTRcXHVEQ0FGXFx1RENBMlxcdURDQTVcXHVEQ0FCXFx1RENBNlxcdURDQThcXHVEQ0EzXFx1RENBQ1xcdURDQURcXHVEQ0E0XFx1REM0MFxcdURDNDVcXHVEQzQ0XFx1REM4RlxcdURDOTFcXHVEQzZBXFx1REM2NFxcdURDNjVcXHVEQzYzXFx1REMzNVxcdURDMTJcXHVEQzM2XFx1REMyOVxcdURDM0FcXHVEQzMxXFx1REMwOFxcdURDMkZcXHVEQzA1XFx1REMwNlxcdURDMzRcXHVEQzBFXFx1REMyRVxcdURDMDItXFx1REMwNFxcdURDMzdcXHVEQzE2XFx1REMxN1xcdURDM0RcXHVEQzBGXFx1REMxMVxcdURDMTBcXHVEQzJBXFx1REMyQlxcdURDMThcXHVEQzJEXFx1REMwMVxcdURDMDBcXHVEQzM5XFx1REMzMFxcdURDMDdcXHVEQzNCXFx1REMyOFxcdURDM0NcXHVEQzNFXFx1REMxNFxcdURDMTNcXHVEQzIzLVxcdURDMjdcXHVEQzM4XFx1REMwQVxcdURDMjJcXHVEQzBEXFx1REMzMlxcdURDMDlcXHVEQzMzXFx1REMwQlxcdURDMkNcXHVEQzFGLVxcdURDMjFcXHVEQzE5XFx1REMxQVxcdURDMENcXHVEQzFCLVxcdURDMUVcXHVEQzkwXFx1RENBRVxcdUREMkFcXHVEREZFXFx1RERGQlxcdURDOTJcXHVEREZDXFx1RERGRFxcdURENENcXHVERUQ1XFx1REQ0RFxcdURENEJcXHVEQzg4XFx1REU4Mi1cXHVERThBXFx1REU5RFxcdURFOUVcXHVERThCLVxcdURFOEVcXHVERTkwLVxcdURFOUNcXHVERUY1XFx1REVGQVxcdURFQjJcXHVERUY0XFx1REVGOVxcdURFOEZcXHVERUE4XFx1REVBNVxcdURFQTZcXHVERUQxXFx1REVBN1xcdURFRjZcXHVERUE0XFx1REVBMlxcdURFRUJcXHVERUVDXFx1RENCQVxcdURFODFcXHVERTlGLVxcdURFQTFcXHVERTgwXFx1REVGOFxcdURENUJcXHVERDY3XFx1REQ1MFxcdURENUNcXHVERDUxXFx1REQ1RFxcdURENTJcXHVERDVFXFx1REQ1M1xcdURENUZcXHVERDU0XFx1REQ2MFxcdURENTVcXHVERDYxXFx1REQ1NlxcdURENjJcXHVERDU3XFx1REQ2M1xcdURENThcXHVERDY0XFx1REQ1OVxcdURENjVcXHVERDVBXFx1REQ2NlxcdUREMjVcXHVEQ0E3XFx1REVGN1xcdUREMkVcXHVEQzUzLVxcdURDNjJcXHVEQzUxXFx1REM1MlxcdURDRkZcXHVEQzg0XFx1REM4RFxcdURDOEVcXHVERDA3LVxcdUREMEFcXHVEQ0UyXFx1RENFM1xcdURDRUZcXHVERDE0XFx1REQxNVxcdURDRkJcXHVEQ0YxXFx1RENGMlxcdURDREUtXFx1RENFMFxcdUREMEJcXHVERDBDXFx1RENCQlxcdURDQkQtXFx1RENDMFxcdURDRkFcXHVEQ0Y3LVxcdURDRjlcXHVEQ0ZDXFx1REQwRFxcdUREMEVcXHVEQ0ExXFx1REQyNlxcdURDRDQtXFx1RENEQVxcdURDRDNcXHVEQ0QyXFx1RENDM1xcdURDRENcXHVEQ0M0XFx1RENGMFxcdURDRDFcXHVERDE2XFx1RENCMFxcdURDQjQtXFx1RENCOFxcdURDQjNcXHVEQ0I5XFx1RENCMVxcdURDQjJcXHVEQ0U3LVxcdURDRTlcXHVEQ0U0LVxcdURDRTZcXHVEQ0VCXFx1RENFQVxcdURDRUMtXFx1RENFRVxcdURDRERcXHVEQ0JDXFx1RENDMVxcdURDQzJcXHVEQ0M1LVxcdURDRDBcXHVERDEyXFx1REQxM1xcdUREMEYtXFx1REQxMVxcdUREMjhcXHVERDJCXFx1REQyN1xcdUREMjlcXHVERDE3XFx1REQyQ1xcdUREMkRcXHVEQ0UxXFx1REM4OVxcdURDOEFcXHVERUFBXFx1REVCRFxcdURFQkZcXHVERUMxXFx1REVEMlxcdURFQUNcXHVEREZGXFx1REVBRVxcdURFQjBcXHVERUI5LVxcdURFQkNcXHVERUJFXFx1REVDMi1cXHVERUM1XFx1REVCOFxcdURFQUJcXHVERUIzXFx1REVBRFxcdURFQUZcXHVERUIxXFx1REVCN1xcdURDRjVcXHVERDFFXFx1REQwM1xcdUREMDRcXHVERDE5LVxcdUREMURcXHVERUQwXFx1REQ0RVxcdUREMkZcXHVERDAwLVxcdUREMDJcXHVERDNDXFx1REQzRFxcdUREMDVcXHVERDA2XFx1RENGNlxcdURDRjNcXHVEQ0Y0XFx1REQzMVxcdURDREJcXHVERDMwXFx1REQxRi1cXHVERDI0XFx1REQzNFxcdURGRTAtXFx1REZFMlxcdUREMzVcXHVERkUzLVxcdURGRTVcXHVERkU3LVxcdURGRTlcXHVERkU2XFx1REZFQVxcdURGRUJcXHVERDM2LVxcdUREM0JcXHVEQ0EwXFx1REQxOFxcdUREMzNcXHVERDMyXFx1REVBOV0pfFxcdUQ4M0UoPzpbXFx1REQxQVxcdUREMEZcXHVERDFFXFx1REQxRlxcdUREMThcXHVERDE5XFx1REQxQlxcdUREMUNcXHVERDMyXFx1REQzM1xcdUREQjVcXHVEREI2XFx1RERCQlxcdURERDJdKD86XFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdKT98XFx1REREMSg/Oig/OlxcdUQ4M0MoPzpbXFx1REZGQi1cXHVERkZGXSg/OlxcdTIwMEQoPzpcXHVEODNFKD86XFx1REQxRFxcdTIwMERcXHVEODNFXFx1REREMVxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXXxbXFx1RERCMFxcdUREQjFcXHVEREIzXFx1RERCMlxcdUREQUZcXHVEREJDXFx1RERCRF0pfFxcdTI2OTVcXHVGRTBGP3xcXHVEODNDW1xcdURGOTNcXHVERkVCXFx1REYzRVxcdURGNzNcXHVERkVEXFx1REZBNFxcdURGQThdfFxcdTI2OTZcXHVGRTBGP3xcXHVEODNEW1xcdUREMjdcXHVEQ0JDXFx1REQyQ1xcdURDQkJcXHVERTgwXFx1REU5Ml18XFx1MjcwOFxcdUZFMEY/KSk/KXxcXHUyMDBEKD86XFx1RDgzRSg/OlxcdUREMURcXHUyMDBEXFx1RDgzRVxcdURERDF8W1xcdUREQjBcXHVEREIxXFx1RERCM1xcdUREQjJcXHVEREFGXFx1RERCQ1xcdUREQkRdKXxcXHUyNjk1XFx1RkUwRj98XFx1RDgzQ1tcXHVERjkzXFx1REZFQlxcdURGM0VcXHVERjczXFx1REZFRFxcdURGQTRcXHVERkE4XXxcXHUyNjk2XFx1RkUwRj98XFx1RDgzRFtcXHVERDI3XFx1RENCQ1xcdUREMkNcXHVEQ0JCXFx1REU4MFxcdURFOTJdfFxcdTI3MDhcXHVGRTBGPykpKT98W1xcdURERDRcXHVEREQzXSg/OlxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXSk/fFtcXHVERENGXFx1REQyNlxcdUREMzddKD86KD86XFx1RDgzQyg/OltcXHVERkZCLVxcdURGRkZdKD86XFx1MjAwRCg/OltcXHUyNjQyXFx1MjY0MF1cXHVGRTBGPykpPyl8XFx1MjAwRCg/OltcXHUyNjQyXFx1MjY0MF1cXHVGRTBGPykpKT98W1xcdUREMzRcXHVEREQ1XFx1REQzNVxcdUREMzBcXHVERDMxXFx1REQzNl0oPzpcXHVEODNDW1xcdURGRkItXFx1REZGRl0pP3xbXFx1RERCOFxcdUREQjlcXHVEREQ5LVxcdURERERdKD86KD86XFx1RDgzQyg/OltcXHVERkZCLVxcdURGRkZdKD86XFx1MjAwRCg/OltcXHUyNjQyXFx1MjY0MF1cXHVGRTBGPykpPyl8XFx1MjAwRCg/OltcXHUyNjQyXFx1MjY0MF1cXHVGRTBGPykpKT98W1xcdUREREVcXHVERERGXSg/OlxcdTIwMEQoPzpbXFx1MjY0MlxcdTI2NDBdXFx1RkUwRj8pKT98W1xcdUREQ0RcXHVERENFXFx1RERENlxcdURERDdcXHVERDM4XSg/Oig/OlxcdUQ4M0MoPzpbXFx1REZGQi1cXHVERkZGXSg/OlxcdTIwMEQoPzpbXFx1MjY0MlxcdTI2NDBdXFx1RkUwRj8pKT8pfFxcdTIwMEQoPzpbXFx1MjY0MlxcdTI2NDBdXFx1RkUwRj8pKSk/fFxcdUREM0MoPzpcXHUyMDBEKD86W1xcdTI2NDJcXHUyNjQwXVxcdUZFMEY/KSk/fFtcXHVERDNEXFx1REQzRVxcdUREMzlcXHVEREQ4XSg/Oig/OlxcdUQ4M0MoPzpbXFx1REZGQi1cXHVERkZGXSg/OlxcdTIwMEQoPzpbXFx1MjY0MlxcdTI2NDBdXFx1RkUwRj8pKT8pfFxcdTIwMEQoPzpbXFx1MjY0MlxcdTI2NDBdXFx1RkUwRj8pKSk/fFtcXHVERDIzXFx1REQ3MFxcdUREMjlcXHVERDJBXFx1REQxMVxcdUREMTdcXHVERDJEXFx1REQyQlxcdUREMTRcXHVERDEwXFx1REQyOFxcdUREMjVcXHVERDI0XFx1REQxMlxcdUREMTVcXHVERDIyXFx1REQyRVxcdUREMjdcXHVERDc1XFx1REQ3NlxcdURENzRcXHVERDJGXFx1REQyMFxcdURENzNcXHVERDEzXFx1REREMFxcdUREN0FcXHVERDcxXFx1REQyQ1xcdUREMjFcXHVERDE2XFx1RERFMVxcdUREMEVcXHVERDBEXFx1REQxRFxcdUREQkVcXHVEREJGXFx1RERFMFxcdUREQjdcXHVEREI0XFx1REQzQVxcdUREQjBcXHVEREIxXFx1RERCM1xcdUREQjJcXHVERDhEXFx1RERBN1xcdUREQUVcXHVERDhBXFx1REQ5RFxcdUREODFcXHVERDg0XFx1REQ5M1xcdUREOENcXHVERDk5XFx1REQ5MlxcdUREOEZcXHVERDlCXFx1REQ5NFxcdUREODdcXHVEREE1XFx1RERBNlxcdUREQThcXHVERDk4XFx1RERBMVxcdUREODNcXHVERDg1XFx1REQ4NlxcdUREQTJcXHVERDg5XFx1RERBOVxcdUREOUFcXHVERDlDXFx1REQ4RVxcdUREOTVcXHVERDk2XFx1REQ4OFxcdUREOEJcXHVERDk3XFx1REQ4MlxcdUREOUZcXHVEREEwXFx1REQ0MFxcdURENkRcXHVERDVEXFx1REQ2NVxcdURENTFcXHVERDU0XFx1REQ1NVxcdURENTJcXHVERDZDXFx1REQ2NlxcdUREQzRcXHVEREM1XFx1REQ1Q1xcdURENTBcXHVERDU2XFx1REQ2OFxcdURENkZcXHVERDVFXFx1RERDN1xcdUREQzBcXHVERDY5XFx1REQ1M1xcdURENkFcXHVERDU5XFx1RERDNlxcdURENUFcXHVERDU4XFx1REQ2M1xcdURENTdcXHVEREM4XFx1RERDMlxcdURENkJcXHVERDZFXFx1REQ1Ri1cXHVERDYxXFx1REQ4MFxcdUREOUVcXHVERDkwXFx1REQ5MVxcdUREQUFcXHVEREMxXFx1REQ2N1xcdURENUJcXHVERDQyXFx1REQ0M1xcdURENjRcXHVEREMzXFx1RERDOVxcdUREQ0FcXHVERDYyXFx1REQ0NFxcdURERURcXHVEREYxXFx1RERCRFxcdUREQkNcXHVERTgyXFx1RERGM1xcdURFOTBcXHVEREU4XFx1RERFN1xcdURENDctXFx1REQ0OVxcdURENEVcXHVERDRGXFx1REQ0RFxcdURENEFcXHVERDRCXFx1REQ0NVxcdUREM0ZcXHVERDRDXFx1REU4MFxcdURFODFcXHVEREZGXFx1RERFOVxcdURERjhcXHVEREY1XFx1RERGNlxcdUREN0RcXHVERDdDXFx1RERCQVxcdURERTMtXFx1RERFNlxcdUREN0JcXHVERTcxLVxcdURFNzNcXHVERDdFXFx1REQ3RlxcdURFNzBcXHVEREUyXFx1REU5NVxcdURENDFcXHVEREVFXFx1REU5NFxcdURERkVcXHVERTkzXFx1RERBRlxcdURERjBcXHVEREYyXFx1RERFQS1cXHVEREVDXFx1REU3OC1cXHVERTdBXFx1REU5MVxcdURFOTJcXHVEREY0XFx1RERGN1xcdURERjktXFx1RERGRFxcdURERUZdKXxbXFx1MjYzQVxcdTI2MzlcXHUyNjIwXFx1Mjc2M1xcdTI3NjRdXFx1RkUwRj98XFx1MjcwQig/OlxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXSk/fFtcXHUyNzBDXFx1MjYxRF0oPzooPzpcXHVEODNDW1xcdURGRkItXFx1REZGRl18XFx1RkUwRikpP3xcXHUyNzBBKD86XFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdKT98XFx1MjcwRCg/Oig/OlxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXXxcXHVGRTBGKSk/fFxcdUQ4M0MoPzpcXHVERjg1KD86XFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdKT98XFx1REZDMyg/Oig/OlxcdUQ4M0MoPzpbXFx1REZGQi1cXHVERkZGXSg/OlxcdTIwMEQoPzpbXFx1MjY0MlxcdTI2NDBdXFx1RkUwRj8pKT8pfFxcdTIwMEQoPzpbXFx1MjY0MlxcdTI2NDBdXFx1RkUwRj8pKSk/fFtcXHVERkM3XFx1REZDMl0oPzpcXHVEODNDW1xcdURGRkItXFx1REZGRl0pP3xcXHVERkNDKD86KD86XFx1RkUwRig/OlxcdTIwMEQoPzpbXFx1MjY0MlxcdTI2NDBdXFx1RkUwRj8pKT98XFx1RDgzQyg/OltcXHVERkZCLVxcdURGRkZdKD86XFx1MjAwRCg/OltcXHUyNjQyXFx1MjY0MF1cXHVGRTBGPykpPyl8XFx1MjAwRCg/OltcXHUyNjQyXFx1MjY0MF1cXHVGRTBGPykpKT98W1xcdURGQzRcXHVERkNBXSg/Oig/OlxcdUQ4M0MoPzpbXFx1REZGQi1cXHVERkZGXSg/OlxcdTIwMEQoPzpbXFx1MjY0MlxcdTI2NDBdXFx1RkUwRj8pKT8pfFxcdTIwMEQoPzpbXFx1MjY0MlxcdTI2NDBdXFx1RkUwRj8pKSk/fFxcdURGQ0IoPzooPzpcXHVGRTBGKD86XFx1MjAwRCg/OltcXHUyNjQyXFx1MjY0MF1cXHVGRTBGPykpP3xcXHVEODNDKD86W1xcdURGRkItXFx1REZGRl0oPzpcXHUyMDBEKD86W1xcdTI2NDJcXHUyNjQwXVxcdUZFMEY/KSk/KXxcXHUyMDBEKD86W1xcdTI2NDJcXHUyNjQwXVxcdUZFMEY/KSkpP3xbXFx1REZGNVxcdURGMzZcXHVERjdEXFx1REZENC1cXHVERkQ2XFx1REZEQy1cXHVERkRGXFx1REZEQlxcdURGRDdcXHVERkQ4XFx1REZEQVxcdURGRDlcXHVERkNFXFx1REZDRFxcdURGMjFcXHVERjI0LVxcdURGMkNcXHVERjk3XFx1REY5RlxcdURGOTZcXHVERjk5LVxcdURGOUJcXHVERjlFXFx1REZGN1xcdURENzBcXHVERDcxXFx1REQ3RVxcdUREN0ZcXHVERTAyXFx1REUzN11cXHVGRTBGP3xcXHVERkY0KD86KD86XFx1MjAwRFxcdTI2MjBcXHVGRTBGP3xcXHVEQjQwXFx1REM2N1xcdURCNDBcXHVEQzYyXFx1REI0MCg/OlxcdURDNjVcXHVEQjQwXFx1REM2RVxcdURCNDBcXHVEQzY3XFx1REI0MFxcdURDN0Z8XFx1REM3M1xcdURCNDBcXHVEQzYzXFx1REI0MFxcdURDNzRcXHVEQjQwXFx1REM3RnxcXHVEQzc3XFx1REI0MFxcdURDNkNcXHVEQjQwXFx1REM3M1xcdURCNDBcXHVEQzdGKSkpP3xcXHVERkYzKD86KD86XFx1RkUwRig/OlxcdTIwMERcXHVEODNDXFx1REYwOCk/fFxcdTIwMERcXHVEODNDXFx1REYwOCkpP3xcXHVEREU2XFx1RDgzQ1tcXHVEREU4LVxcdURERUNcXHVEREVFXFx1RERGMVxcdURERjJcXHVEREY0XFx1RERGNi1cXHVEREZBXFx1RERGQ1xcdURERkRcXHVEREZGXXxcXHVEREU3XFx1RDgzQ1tcXHVEREU2XFx1RERFN1xcdURERTktXFx1RERFRlxcdURERjEtXFx1RERGNFxcdURERjYtXFx1RERGOVxcdURERkJcXHVEREZDXFx1RERGRVxcdURERkZdfFxcdURERThcXHVEODNDW1xcdURERTZcXHVEREU4XFx1RERFOVxcdURERUItXFx1RERFRVxcdURERjAtXFx1RERGNVxcdURERjdcXHVEREZBLVxcdURERkZdfFxcdURERTlcXHVEODNDW1xcdURERUFcXHVEREVDXFx1RERFRlxcdURERjBcXHVEREYyXFx1RERGNFxcdURERkZdfFxcdURERUFcXHVEODNDW1xcdURERTZcXHVEREU4XFx1RERFQVxcdURERUNcXHVEREVEXFx1RERGNy1cXHVEREZBXXxcXHVEREVCXFx1RDgzQ1tcXHVEREVFLVxcdURERjBcXHVEREYyXFx1RERGNFxcdURERjddfFxcdURERUNcXHVEODNDW1xcdURERTZcXHVEREU3XFx1RERFOS1cXHVEREVFXFx1RERGMS1cXHVEREYzXFx1RERGNS1cXHVEREZBXFx1RERGQ1xcdURERkVdfFxcdURERURcXHVEODNDW1xcdURERjBcXHVEREYyXFx1RERGM1xcdURERjdcXHVEREY5XFx1RERGQV18XFx1RERFRVxcdUQ4M0NbXFx1RERFOC1cXHVEREVBXFx1RERGMS1cXHVEREY0XFx1RERGNi1cXHVEREY5XXxcXHVEREVGXFx1RDgzQ1tcXHVEREVBXFx1RERGMlxcdURERjRcXHVEREY1XXxcXHVEREYwXFx1RDgzQ1tcXHVEREVBXFx1RERFQy1cXHVEREVFXFx1RERGMlxcdURERjNcXHVEREY1XFx1RERGN1xcdURERkNcXHVEREZFXFx1RERGRl18XFx1RERGMVxcdUQ4M0NbXFx1RERFNi1cXHVEREU4XFx1RERFRVxcdURERjBcXHVEREY3LVxcdURERkJcXHVEREZFXXxcXHVEREYyXFx1RDgzQ1tcXHVEREU2XFx1RERFOC1cXHVEREVEXFx1RERGMC1cXHVEREZGXXxcXHVEREYzXFx1RDgzQ1tcXHVEREU2XFx1RERFOFxcdURERUEtXFx1RERFQ1xcdURERUVcXHVEREYxXFx1RERGNFxcdURERjVcXHVEREY3XFx1RERGQVxcdURERkZdfFxcdURERjRcXHVEODNDXFx1RERGMnxcXHVEREY1XFx1RDgzQ1tcXHVEREU2XFx1RERFQS1cXHVEREVEXFx1RERGMC1cXHVEREYzXFx1RERGNy1cXHVEREY5XFx1RERGQ1xcdURERkVdfFxcdURERjZcXHVEODNDXFx1RERFNnxcXHVEREY3XFx1RDgzQ1tcXHVEREVBXFx1RERGNFxcdURERjhcXHVEREZBXFx1RERGQ118XFx1RERGOFxcdUQ4M0NbXFx1RERFNi1cXHVEREVBXFx1RERFQy1cXHVEREY0XFx1RERGNy1cXHVEREY5XFx1RERGQlxcdURERkQtXFx1RERGRl18XFx1RERGOVxcdUQ4M0NbXFx1RERFNlxcdURERThcXHVEREU5XFx1RERFQi1cXHVEREVEXFx1RERFRi1cXHVEREY0XFx1RERGN1xcdURERjlcXHVEREZCXFx1RERGQ1xcdURERkZdfFxcdURERkFcXHVEODNDW1xcdURERTZcXHVEREVDXFx1RERGMlxcdURERjNcXHVEREY4XFx1RERGRVxcdURERkZdfFxcdURERkJcXHVEODNDW1xcdURERTZcXHVEREU4XFx1RERFQVxcdURERUNcXHVEREVFXFx1RERGM1xcdURERkFdfFxcdURERkNcXHVEODNDW1xcdURERUJcXHVEREY4XXxcXHVEREZEXFx1RDgzQ1xcdURERjB8XFx1RERGRVxcdUQ4M0NbXFx1RERFQVxcdURERjldfFxcdURERkZcXHVEODNDW1xcdURERTZcXHVEREYyXFx1RERGQ118W1xcdURGRkItXFx1REZGRlxcdURGMzgtXFx1REYzQ1xcdURGMzdcXHVERjMxLVxcdURGMzVcXHVERjNFLVxcdURGNDNcXHVERjQ3LVxcdURGNTNcXHVERjQ1XFx1REY0NlxcdURGM0RcXHVERjQ0XFx1REYzMFxcdURGNUVcXHVERjU2XFx1REY1N1xcdURGNTRcXHVERjVGXFx1REY1NVxcdURGMkQtXFx1REYyRlxcdURGNzNcXHVERjcyXFx1REY3RlxcdURGNzFcXHVERjU4LVxcdURGNURcXHVERjYwXFx1REY2Mi1cXHVERjY1XFx1REY2MVxcdURGNjYtXFx1REY2QVxcdURGODJcXHVERjcwXFx1REY2Qi1cXHVERjZGXFx1REY3Q1xcdURGNzVcXHVERjc2XFx1REY3RVxcdURGNzctXFx1REY3QlxcdURGNzRcXHVERkZBXFx1REYwRC1cXHVERjEwXFx1REYwQlxcdURGRTAtXFx1REZFNlxcdURGRTgtXFx1REZFRFxcdURGRUZcXHVERkYwXFx1REYwMVxcdURGMDMtXFx1REYwN1xcdURGMDlcXHVERkEwLVxcdURGQTJcXHVERkFBXFx1REYxMS1cXHVERjIwXFx1REYwQ1xcdURGMDBcXHVERjA4XFx1REYwMlxcdURGMEFcXHVERjgzXFx1REY4NFxcdURGODYtXFx1REY4QlxcdURGOEQtXFx1REY5MVxcdURGODBcXHVERjgxXFx1REZBQlxcdURGQzZcXHVERkM1XFx1REZDMFxcdURGRDBcXHVERkM4XFx1REZDOVxcdURGQkVcXHVERkIzXFx1REZDRlxcdURGRDEtXFx1REZEM1xcdURGRjhcXHVERkEzXFx1REZCRFxcdURGQkZcXHVERkFGXFx1REZCMVxcdURGQUVcXHVERkIwXFx1REZCMlxcdURDQ0ZcXHVEQzA0XFx1REZCNFxcdURGQURcXHVERkE4XFx1REY5MlxcdURGQTlcXHVERjkzXFx1REZCQ1xcdURGQjVcXHVERkI2XFx1REZBNFxcdURGQTdcXHVERkI3LVxcdURGQkJcXHVERkE1XFx1REZBQ1xcdURGRUVcXHVERkY5XFx1REZFN1xcdURGQTZcXHVERDhFXFx1REQ5MS1cXHVERDlBXFx1REUwMVxcdURFMzZcXHVERTJGXFx1REU1MFxcdURFMzlcXHVERTFBXFx1REUzMlxcdURFNTFcXHVERTM4XFx1REUzNFxcdURFMzNcXHVERTNBXFx1REUzNVxcdURGQzFcXHVERjhDXSl8XFx1MjZGN1xcdUZFMEY/fFxcdTI2RjkoPzooPzpcXHVGRTBGKD86XFx1MjAwRCg/OltcXHUyNjQyXFx1MjY0MF1cXHVGRTBGPykpP3xcXHVEODNDKD86W1xcdURGRkItXFx1REZGRl0oPzpcXHUyMDBEKD86W1xcdTI2NDJcXHUyNjQwXVxcdUZFMEY/KSk/KXxcXHUyMDBEKD86W1xcdTI2NDJcXHUyNjQwXVxcdUZFMEY/KSkpP3xbXFx1MjYxOFxcdTI2RjBcXHUyNkU5XFx1MjY2OFxcdTI2RjRcXHUyNzA4XFx1MjNGMVxcdTIzRjJcXHUyNjAwXFx1MjYwMVxcdTI2QzhcXHUyNjAyXFx1MjZGMVxcdTI3NDRcXHUyNjAzXFx1MjYwNFxcdTI2RjhcXHUyNjYwXFx1MjY2NVxcdTI2NjZcXHUyNjYzXFx1MjY1RlxcdTI2RDFcXHUyNjBFXFx1MjMyOFxcdTI3MDlcXHUyNzBGXFx1MjcxMlxcdTI3MDJcXHUyNkNGXFx1MjY5MlxcdTI2OTRcXHUyNjk5XFx1MjY5NlxcdTI2RDNcXHUyNjk3XFx1MjZCMFxcdTI2QjFcXHUyNkEwXFx1MjYyMlxcdTI2MjNcXHUyQjA2XFx1MjE5N1xcdTI3QTFcXHUyMTk4XFx1MkIwN1xcdTIxOTlcXHUyQjA1XFx1MjE5NlxcdTIxOTVcXHUyMTk0XFx1MjFBOVxcdTIxQUFcXHUyOTM0XFx1MjkzNVxcdTI2OUJcXHUyNzIxXFx1MjYzOFxcdTI2MkZcXHUyNzFEXFx1MjYyNlxcdTI2MkFcXHUyNjJFXFx1MjVCNlxcdTIzRURcXHUyM0VGXFx1MjVDMFxcdTIzRUVcXHUyM0Y4LVxcdTIzRkFcXHUyM0NGXFx1MjY0MFxcdTI2NDJcXHUyNjk1XFx1MjY3RVxcdTI2N0JcXHUyNjlDXFx1MjYxMVxcdTI3MTRcXHUyNzE2XFx1MzAzRFxcdTI3MzNcXHUyNzM0XFx1Mjc0N1xcdTIwM0NcXHUyMDQ5XFx1MzAzMFxcdTAwQTlcXHUwMEFFXFx1MjEyMl1cXHVGRTBGP3xbXFx1MDAyM1xcdTAwMkFcXHUwMDMwLVxcdTAwMzldKD86XFx1RkUwRlxcdTIwRTN8XFx1MjBFMyl8W1xcdTIxMzlcXHUyNEMyXFx1MzI5N1xcdTMyOTlcXHUyNUZDXFx1MjVGQlxcdTI1QUFcXHUyNUFCXVxcdUZFMEY/fFtcXHUyNjE1XFx1MjZFQVxcdTI2RjJcXHUyNkZBXFx1MjZGRFxcdTI2OTNcXHUyNkY1XFx1MjMxQlxcdTIzRjNcXHUyMzFBXFx1MjNGMFxcdTJCNTBcXHUyNkM1XFx1MjYxNFxcdTI2QTFcXHUyNkM0XFx1MjcyOFxcdTI2QkRcXHUyNkJFXFx1MjZGM1xcdTI2N0ZcXHUyNkQ0XFx1MjY0OC1cXHUyNjUzXFx1MjZDRVxcdTIzRTktXFx1MjNFQ1xcdTJCNTVcXHUyNzA1XFx1Mjc0Q1xcdTI3NEVcXHUyNzk1LVxcdTI3OTdcXHUyN0IwXFx1MjdCRlxcdTI3NTMtXFx1Mjc1NVxcdTI3NTdcXHUyNkFCXFx1MjZBQVxcdTJCMUJcXHUyQjFDXFx1MjVGRVxcdTI1RkRdKS87XHJcbiAgICAgICAgaWYgKGlzUmVwbHkgJiYgZW1vamlSZWdFeHAudGVzdChtZXNzYWdlLmNvbnRlbnQpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkUmVhY3Rpb24obWVzc2FnZSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBub21lc3NhZ2VzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ3aWtpLXRhbGstbm9tZXNzYWdlc1wiKTtcclxuICAgICAgICBpZiAobm9tZXNzYWdlcyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIG5vbWVzc2FnZXMucmVtb3ZlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgbWVzc2FnZUxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpXCIpO1xyXG4gICAgICAgIG1lc3NhZ2VMaS5pZCA9IGB3aWtpLW1lc3NhZ2UtJHttZXNzYWdlLmlkfWA7XHJcblxyXG4gICAgICAgIGxldCBtZXNzYWdlRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICBtZXNzYWdlTGkuYXBwZW5kQ2hpbGQobWVzc2FnZURpdik7XHJcbiAgICAgICAgbWVzc2FnZURpdi5pZCA9IGB3aWtpLW1lc3NhZ2UtZGl2LSR7bWVzc2FnZS5pZH1gO1xyXG4gICAgICAgIG1lc3NhZ2VEaXYuY2xhc3NMaXN0LmFkZChcIndpa2ktbWVzc2FnZVwiLCBcImNvbGxhcHNpYmxlXCIsIFwiY29sbGFwc2VkXCIpO1xyXG5cclxuICAgICAgICBsZXQgbWVzc2FnZUhlYWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgbWVzc2FnZURpdi5hcHBlbmRDaGlsZChtZXNzYWdlSGVhZGVyKTtcclxuICAgICAgICBtZXNzYWdlSGVhZGVyLmNsYXNzTGlzdC5hZGQoXCJ3aWtpLW1lc3NhZ2UtaGVhZGVyXCIpO1xyXG5cclxuICAgICAgICBsZXQgc2VuZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XHJcbiAgICAgICAgbWVzc2FnZUhlYWRlci5hcHBlbmRDaGlsZChzZW5kZXIpO1xyXG4gICAgICAgIHNlbmRlci5jbGFzc0xpc3QuYWRkKFwid2lraS1tZXNzYWdlLXNlbmRlclwiKTtcclxuXHJcbiAgICAgICAgbGV0IHVzZXJuYW1lID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobWVzc2FnZS5zZW5kZXJOYW1lKTtcclxuXHJcbiAgICAgICAgaWYgKG1lc3NhZ2Uuc2VuZGVyRXhpc3RzKSB7XHJcbiAgICAgICAgICAgIGxldCB1c2VyTGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO1xyXG4gICAgICAgICAgICBzZW5kZXIuYXBwZW5kQ2hpbGQodXNlckxpbmspO1xyXG4gICAgICAgICAgICB1c2VyTGluay5jbGFzc0xpc3QuYWRkKFwid2lraS11c2VybmFtZVwiLCBcIndpa2ktdXNlcm5hbWUtbGlua1wiKTtcclxuICAgICAgICAgICAgdXNlckxpbmsuaHJlZiA9IGAvJHt3aW5kb3cud2lraW12Y2NoYXQudXNlck5hbWVzcGFjZX06JHttZXNzYWdlLnNlbmRlcklkfWA7XHJcbiAgICAgICAgICAgIHVzZXJMaW5rLnRpdGxlID0gYFZpc2l0IHRoZSB1c2VyIHBhZ2UgZm9yICR7bWVzc2FnZS5zZW5kZXJOYW1lfWBcclxuICAgICAgICAgICAgdXNlckxpbmsuYXBwZW5kQ2hpbGQodXNlcm5hbWUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCB1c2VyU3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xyXG4gICAgICAgICAgICBzZW5kZXIuYXBwZW5kQ2hpbGQodXNlclNwYW4pO1xyXG4gICAgICAgICAgICB1c2VyTGluay5jbGFzc0xpc3QuYWRkKFwid2lraS11c2VybmFtZVwiLCBcIndpa2ktdXNlcm5hbWUtbm9saW5rXCIpO1xyXG4gICAgICAgICAgICB1c2VyTGluay5hcHBlbmRDaGlsZCh1c2VybmFtZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgcmVhY3Rpb25zU3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xyXG4gICAgICAgIG1lc3NhZ2VIZWFkZXIuYXBwZW5kQ2hpbGQocmVhY3Rpb25zU3Bhbik7XHJcbiAgICAgICAgcmVhY3Rpb25zU3Bhbi5jbGFzc0xpc3QuYWRkKFwid2lraS1tZXNzYWdlLXJlYWN0aW9uc1wiLCBgd2lraS1tZXNzYWdlLXJlYWN0aW9ucy0ke21lc3NhZ2UuaWR9YCk7XHJcblxyXG4gICAgICAgIGxldCBtZXNzYWdlVGltZXN0YW1wID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XHJcbiAgICAgICAgbWVzc2FnZUhlYWRlci5hcHBlbmRDaGlsZChtZXNzYWdlVGltZXN0YW1wKTtcclxuICAgICAgICBtZXNzYWdlVGltZXN0YW1wLmNsYXNzTGlzdC5hZGQoXCJ3aWtpLW1lc3NhZ2UtdGltZXN0YW1wXCIpO1xyXG5cclxuICAgICAgICBsZXQgdGltZXN0YW1wID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobmV3IERhdGUoKG1lc3NhZ2UudGltZXN0YW1wIC8gMTAwMDApIC0gMjIwODk4ODgwMDAwMCkudG9Mb2NhbGVTdHJpbmcoKSk7XHJcbiAgICAgICAgbWVzc2FnZVRpbWVzdGFtcC5hcHBlbmRDaGlsZCh0aW1lc3RhbXApO1xyXG5cclxuICAgICAgICBsZXQgdGhyZWFkVG9nZ2xlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgbWVzc2FnZUhlYWRlci5hcHBlbmRDaGlsZCh0aHJlYWRUb2dnbGVyKTtcclxuICAgICAgICB0aHJlYWRUb2dnbGVyLmNsYXNzTGlzdC5hZGQoXCJ3aWtpLW1lc3NhZ2UtdGhyZWFkLXRvZ2dsZXJcIik7XHJcbiAgICAgICAgdGhyZWFkVG9nZ2xlci5pbm5lckhUTUwgPSBcIjxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB3aWR0aD1cXFwiMTJcXFwiIGhlaWdodD1cXFwiMTJcXFwiPjxwYXRoIGQ9XFxcIk00IDEuNTMzdjkuNjcxbDQuNzUyLTQuODcxelxcXCIgLz48L3N2ZyA+XCI7XHJcbiAgICAgICAgdGhyZWFkVG9nZ2xlci5vbmNsaWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIGV2ZW50LnRhcmdldC5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZShcImV4cGFuZGVkXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IG1lc3NhZ2VDb250ZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICBtZXNzYWdlRGl2LmFwcGVuZENoaWxkKG1lc3NhZ2VDb250ZW50KTtcclxuICAgICAgICBtZXNzYWdlQ29udGVudC5jbGFzc0xpc3QuYWRkKFwid2lraS1tZXNzYWdlLWNvbnRlbnRcIik7XHJcblxyXG4gICAgICAgIGxldCBjb250ZW50ID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobWVzc2FnZS5jb250ZW50KTtcclxuICAgICAgICBtZXNzYWdlQ29udGVudC5hcHBlbmRDaGlsZChjb250ZW50KTtcclxuXHJcbiAgICAgICAgbGV0IGNvbGxhcHNlVG9nZ2xlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgbWVzc2FnZURpdi5hcHBlbmRDaGlsZChjb2xsYXBzZVRvZ2dsZXIpO1xyXG4gICAgICAgIGNvbGxhcHNlVG9nZ2xlci5jbGFzc0xpc3QuYWRkKFwid2lraS1tZXNzYWdlLWNvbGxhcHNlLXRvZ2dsZXJcIik7XHJcblxyXG4gICAgICAgIGxldCB0b2dnbGVMaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XHJcbiAgICAgICAgY29sbGFwc2VUb2dnbGVyLmFwcGVuZENoaWxkKHRvZ2dsZUxpbmspO1xyXG4gICAgICAgIHRvZ2dsZUxpbmsuaHJlZiA9IFwiamF2YXNjcmlwdDogdm9pZCgwKTtcIjtcclxuICAgICAgICB0b2dnbGVMaW5rLm9uY2xpY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgZXZlbnQudGFyZ2V0LnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKFwiY29sbGFwc2VkXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFpc1JlcGx5KSB7XHJcbiAgICAgICAgICAgIGxldCByZXBseURpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgICAgIG1lc3NhZ2VEaXYuYXBwZW5kQ2hpbGQocmVwbHlEaXYpO1xyXG4gICAgICAgICAgICByZXBseURpdi5jbGFzc0xpc3QuYWRkKFwid2lraS10YWxrLXJlcGx5XCIpO1xyXG5cclxuICAgICAgICAgICAgbGV0IGZvcm1EaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgICAgICByZXBseURpdi5hcHBlbmRDaGlsZChmb3JtRGl2KTtcclxuICAgICAgICAgICAgZm9ybURpdi5jbGFzc0xpc3QuYWRkKFwiZm9ybS1ncm91cFwiKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBmb3JtTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XHJcbiAgICAgICAgICAgIGZvcm1EaXYuYXBwZW5kQ2hpbGQoZm9ybUxhYmVsKTtcclxuICAgICAgICAgICAgZm9ybUxhYmVsLmh0bWxGb3IgPSBgd2lraS10YWxrLW1lc3NhZ2UtaW5wdXQtJHttZXNzYWdlLmlkfWA7XHJcbiAgICAgICAgICAgIGZvcm1MYWJlbC50ZXh0Q29udGVudCA9IFwiUmVwbHlcIjtcclxuXHJcbiAgICAgICAgICAgIGxldCBmb3JtVGV4dEFyZWEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGV4dGFyZWFcIik7XHJcbiAgICAgICAgICAgIGZvcm1EaXYuYXBwZW5kQ2hpbGQoZm9ybVRleHRBcmVhKTtcclxuICAgICAgICAgICAgZm9ybVRleHRBcmVhLmlkID0gYHdpa2ktdGFsay1tZXNzYWdlLWlucHV0LSR7bWVzc2FnZS5pZH1gO1xyXG4gICAgICAgICAgICBmb3JtRGl2LmNsYXNzTGlzdC5hZGQoXCJmb3JtLWNvbnRyb2xcIik7XHJcblxyXG4gICAgICAgICAgICBsZXQgcmVwbHlCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xyXG4gICAgICAgICAgICByZXBseURpdi5hcHBlbmRDaGlsZChyZXBseUJ1dHRvbik7XHJcbiAgICAgICAgICAgIHJlcGx5QnV0dG9uLmlkID0gYHdpa2ktdGFsay1yZXBseS1idXR0b24tJHttZXNzYWdlLmlkfWA7XHJcbiAgICAgICAgICAgIHJlcGx5QnV0dG9uLnR5cGUgPSAnYnV0dG9uJztcclxuICAgICAgICAgICAgcmVwbHlCdXR0b24uY2xhc3NMaXN0LmFkZChcImJ0blwiLCBcImJ0bi1wcmltYXJ5XCIpO1xyXG4gICAgICAgICAgICByZXBseUJ1dHRvbi50ZXh0Q29udGVudCA9IFwiUG9zdFwiO1xyXG4gICAgICAgICAgICByZXBseUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBldmVudCA9IGV2ZW50IHx8IHdpbmRvdy5ldmVudDtcclxuICAgICAgICAgICAgICAgIGxldCB0YXJnZXQgPSBlLnRhcmdldCB8fCBlLnNyY0VsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICBsZXQgaWQgPSB0YXJnZXQuaWQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoaWQgPT0gbnVsbCB8fCBpZC5sZW5ndGggPT0gbnVsbCB8fCBpZC5sZW5ndGggPD0gMjMpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZCA9IGlkLnN1YnN0cigyMyk7XHJcbiAgICAgICAgICAgICAgICBsZXQgY2hhdElucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYHdpa2ktdGFsay1tZXNzYWdlLWlucHV0LSR7aWR9YCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hhdElucHV0ID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBsZXQgcmVwbHkgPSBjaGF0SW5wdXQudmFsdWU7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVwbHkgPT0gbnVsbCB8fCByZXBseS5sZW5ndGggPT0gbnVsbCB8fCAhKHJlcGx5Lmxlbmd0aCA+IDApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgd2luZG93Lndpa2ltdmNjaGF0LmNvbm5lY3Rpb24uaW52b2tlKFwiU2VuZFwiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgTWFya2Rvd246IHJlcGx5LFxyXG4gICAgICAgICAgICAgICAgICAgIE1lc3NhZ2VJZDogaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgVG9waWNJZDogdG9waWNJZCxcclxuICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL3JldHVybiBjb25zb2xlLmVycm9yKGVyci50b1N0cmluZygpKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29uc29sZS5lcnJvcihcIkFuIGVycm9yIG9jY3VycmVkIHdoaWxlIHNlbmRpbmcgYSBjaGF0IG1lc3NhZ2VcIik7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB3aW5kb3cud2lraW12Y2NoYXQubWVzc2FnZUxpc3RVbC5hcHBlbmRDaGlsZChtZXNzYWdlTGkpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCBwYXJlbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgd2lraS1tZXNzYWdlLWRpdi0ke21lc3NhZ2UucmVwbHlNZXNzYWdlSWR9YCk7XHJcbiAgICAgICAgICAgIGlmIChwYXJlbnQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcGFyZW50LmNsYXNzTGlzdC5hZGQoXCJ3aWtpLW1lc3NhZ2UtdGhyZWFkXCIpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGNoaWxkTWVzc2FnZUxpc3QgPSBwYXJlbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJ1bFwiKTtcclxuICAgICAgICAgICAgICAgIGlmIChjaGlsZE1lc3NhZ2VMaXN0ID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZE1lc3NhZ2VMaXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInVsXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudC5hcHBlbmRDaGlsZChjaGlsZE1lc3NhZ2VMaXN0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNoaWxkTWVzc2FnZUxpc3QuYXBwZW5kQ2hpbGQobWVzc2FnZUxpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGhlaWdodCA9IHBhcnNlSW50KGdldENvbXB1dGVkU3R5bGUobWVzc2FnZUNvbnRlbnQpLmdldFByb3BlcnR5VmFsdWUoXCJoZWlnaHRcIikpO1xyXG4gICAgICAgIGxldCBtYXhIZWlnaHQgPSBwYXJzZUludChnZXRDb21wdXRlZFN0eWxlKG1lc3NhZ2VDb250ZW50KS5nZXRQcm9wZXJ0eVZhbHVlKFwibWF4LWhlaWdodFwiKSk7XHJcbiAgICAgICAgaWYgKGhlaWdodCA8IG1heEhlaWdodCkge1xyXG4gICAgICAgICAgICBtZXNzYWdlRGl2LmNsYXNzTGlzdC5yZW1vdmUoXCJjb2xsYXBzaWJsZVwiKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIGFkZFJlYWN0aW9uOiBmdW5jdGlvbiAocmVhY3Rpb24pIHtcclxuICAgICAgICBpZiAocmVhY3Rpb24gPT0gbnVsbCB8fCByZWFjdGlvbi5tZXNzYWdlSWQgPT0gbnVsbCB8fCByZWFjdGlvbi5yZXBseU1lc3NhZ2VJZCA9PSBudWxsICYmIHJlYWN0aW9uLnJlcGx5TWVzc2FnZUlkLmxlbmd0aCA9PSBudWxsICYmICEocmVhY3Rpb24ucmVwbHlNZXNzYWdlSWQubGVuZ3RoID4gMCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHBhcmVudFJlYWN0aW9uU3BhbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGB3aWtpLW1lc3NhZ2UtcmVhY3Rpb25zLSR7cmVhY3Rpb24ucmVwbHlNZXNzYWdlSWR9YCk7XHJcbiAgICAgICAgaWYgKHBhcmVudFJlYWN0aW9uU3BhbiA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCB0eXBlTmFtZSA9IHJlYWN0aW9uLmNvbnRlbnQucmVwbGFjZSgvW15hLXpBLVpdL2csICcnKTtcclxuICAgICAgICBsZXQgcmVhY3Rpb25zID0gcGFyZW50UmVhY3Rpb25TcGFuLmdldEVsZW1lbnRCeUlkKGB3aWtpLW1lc3NhZ2UtcmVhY3Rpb25zLSR7dHlwZU5hbWV9LSR7cmVhY3Rpb24ubWVzc2FnZUlkfWApO1xyXG4gICAgICAgIGlmIChyZWFjdGlvbnMgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZWFjdGlvbnMgPSB3aW5kb3cud2lraW12Y2NoYXQuYWRkUmVhY3Rpb25MaXN0KHJlYWN0aW9uLnJlcGx5TWVzc2FnZUlkLCByZWFjdGlvbi50b3BpY0lkLCBwYXJlbnRSZWFjdGlvblNwYW4sIHR5cGVOYW1lLCByZWFjdGlvbi5jb250ZW50KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHdpbmRvdy53aWtpbXZjY2hhdC5hZGRSZWFjdGlvblRvTGlzdChyZWFjdGlvbiwgdHlwZU5hbWUpO1xyXG4gICAgfSxcclxuXHJcbiAgICBhZGRSZWFjdGlvbkxpc3Q6IGZ1bmN0aW9uIChtZXNzYWdlSWQsIHRvcGljSWQsIHNwYW4sIHR5cGVOYW1lLCBjb250ZW50KSB7XHJcbiAgICAgICAgbGV0IHJlYWN0aW9uVHlwZVNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcclxuICAgICAgICBzcGFuLmFwcGVuZENoaWxkKHJlYWN0aW9uVHlwZVNwYW4pO1xyXG4gICAgICAgIHJlYWN0aW9uVHlwZVNwYW4uaWQgPSBgd2lraS1tZXNzYWdlLXJlYWN0aW9ucy0ke3R5cGVOYW1lfS0ke21lc3NhZ2VJZH1gO1xyXG4gICAgICAgIHJlYWN0aW9uVHlwZVNwYW4uY2xhc3NMaXN0LmFkZChcIndpa2ktbWVzc2FnZS1yZWFjdGlvbnNcIik7XHJcblxyXG4gICAgICAgIGxldCByZWFjdGlvbkljb25TcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XHJcbiAgICAgICAgcmVhY3Rpb25UeXBlU3Bhbi5hcHBlbmRDaGlsZChyZWFjdGlvbkljb25TcGFuKTtcclxuICAgICAgICByZWFjdGlvbkljb25TcGFuLmNsYXNzTGlzdC5hZGQoXCJ3aWtpLW1lc3NhZ2UtcmVhY3Rpb24taWNvblwiKTtcclxuICAgICAgICByZWFjdGlvbkljb25TcGFuLm9uY2xpY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgd2luZG93Lndpa2ltdmNjaGF0LmNvbm5lY3Rpb24uaW52b2tlKFwiU2VuZFwiLCB7XHJcbiAgICAgICAgICAgICAgICBNYXJrZG93bjogY29udGVudCxcclxuICAgICAgICAgICAgICAgIE1lc3NhZ2VJZDogbWVzc2FnZUlkLFxyXG4gICAgICAgICAgICAgICAgVG9waWNJZDogdG9waWNJZCxcclxuICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICAgICAgLy9yZXR1cm4gY29uc29sZS5lcnJvcihgQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgYXR0ZW1wdGluZyB0byBzZW5kIGEgY2hhdCByZWFjdGlvbjogJHtlcnJ9YCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29uc29sZS5lcnJvcihcIkFuIGVycm9yIG9jY3VycmVkIHdoaWxlIGF0dGVtcHRpbmcgdG8gc2VuZCBhIGNoYXQgcmVhY3Rpb25cIik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBsZXQgcmVhY3Rpb25Db3VudFNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcclxuICAgICAgICByZWFjdGlvblR5cGVTcGFuLmFwcGVuZENoaWxkKHJlYWN0aW9uQ291bnRTcGFuKTtcclxuICAgICAgICByZWFjdGlvblR5cGVTcGFuLmlkID0gYHdpa2ktbWVzc2FnZS1yZWFjdGlvbi1jb3VudC0ke3R5cGVOYW1lfS0ke21lc3NhZ2VJZH1gO1xyXG4gICAgICAgIHJlYWN0aW9uQ291bnRTcGFuLmNsYXNzTGlzdC5hZGQoXCJ3aWtpLW1lc3NhZ2UtcmVhY3Rpb24tY291bnRcIik7XHJcblxyXG4gICAgICAgIGxldCByZWFjdGlvbkNvdW50ID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoXCIwXCIpO1xyXG4gICAgICAgIHJlYWN0aW9uQ291bnRTcGFuLmFwcGVuZENoaWxkKHJlYWN0aW9uQ291bnQpO1xyXG5cclxuICAgICAgICBsZXQgcmVhY3Rpb25MaXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInVsXCIpO1xyXG4gICAgICAgIHJlYWN0aW9uVHlwZVNwYW4uYXBwZW5kQ2hpbGQocmVhY3Rpb25MaXN0KTtcclxuICAgICAgICByZWFjdGlvbkxpc3QuaWQgPSBgd2lraS1tZXNzYWdlLXJlYWN0aW9uLWxpc3QtJHt0eXBlTmFtZX0tJHttZXNzYWdlSWR9YDtcclxuICAgICAgICByZWFjdGlvbkxpc3QuY2xhc3NMaXN0LmFkZChcIndpa2ktbWVzc2FnZS1yZWFjdGlvbi1saXN0XCIpO1xyXG4gICAgICAgIHJlYWN0aW9uTGlzdC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcblxyXG4gICAgICAgIHRpcHB5KHJlYWN0aW9uVHlwZVNwYW4sIHtcclxuICAgICAgICAgICAgY29udGVudCgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgd2lraS1tZXNzYWdlLXJlYWN0aW9uLWxpc3QtJHt0eXBlTmFtZX0tJHttZXNzYWdlSWR9YCkuaW5uZXJIVE1MO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBwbGFjZW1lbnQ6ICdhdXRvJyxcclxuICAgICAgICAgICAgYWxsb3dIVE1MOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiByZWFjdGlvblR5cGVTcGFuO1xyXG4gICAgfSxcclxuXHJcbiAgICBhZGRSZWFjdGlvblRvTGlzdChyZWFjdGlvbiwgdHlwZU5hbWUpIHtcclxuICAgICAgICBsZXQgY291bnRTcGFuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYHdpa2ktbWVzc2FnZS1yZWFjdGlvbi1jb3VudC0ke3R5cGVOYW1lfS0ke3JlYWN0aW9uLnJlcGx5TWVzc2FnZUlkfWApO1xyXG4gICAgICAgIGlmIChjb3VudFNwYW4gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBsZXQgY291bnQgPSBwYXJzZUludChjb3VudFNwYW4udGV4dENvbnRlbnQpO1xyXG4gICAgICAgICAgICBjb3VudCsrO1xyXG4gICAgICAgICAgICBjb3VudFNwYW4udGV4dENvbnRlbnQgPSBjb3VudC50b0xvY2FsZVN0cmluZygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHJlYWN0aW9uTGlzdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGB3aWtpLW1lc3NhZ2UtcmVhY3Rpb24tbGlzdC0ke3R5cGVOYW1lfS0ke3JlYWN0aW9uLnJlcGx5TWVzc2FnZUlkfWApO1xyXG4gICAgICAgIGlmIChyZWFjdGlvbkxpc3QgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB3aW5kb3cud2lraW12Y2NoYXQuYWRkUmVhY3Rpb25Ub0xpc3QocmVhY3Rpb25MaXN0LCByZWFjdGlvbik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgcmVhY3Rpb25MaXN0SXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaVwiKTtcclxuICAgICAgICByZWFjdGlvbkxpc3QuYXBwZW5kQ2hpbGQocmVhY3Rpb25MaXN0SXRlbSk7XHJcblxyXG4gICAgICAgIGxldCB1c2VybmFtZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHJlYWN0aW9uLnNlbmRlck5hbWUpO1xyXG4gICAgICAgIGlmIChyZWFjdGlvbi5zZW5kZXJFeGlzdHMpIHtcclxuICAgICAgICAgICAgbGV0IHVzZXJMaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XHJcbiAgICAgICAgICAgIHJlYWN0aW9uTGlzdEl0ZW0uYXBwZW5kQ2hpbGQodXNlckxpbmspO1xyXG4gICAgICAgICAgICB1c2VyTGluay5jbGFzc0xpc3QuYWRkKFwid2lraS11c2VybmFtZVwiLCBcIndpa2ktdXNlcm5hbWUtbGlua1wiKTtcclxuICAgICAgICAgICAgdXNlckxpbmsuaHJlZiA9IGAvJHt3aW5kb3cud2lraW12Y2NoYXQudXNlck5hbWVzcGFjZX06JHtyZWFjdGlvbi5zZW5kZXJJZH1gO1xyXG4gICAgICAgICAgICB1c2VyTGluay50aXRsZSA9IGBWaXNpdCB0aGUgdXNlciBwYWdlIGZvciAke3JlYWN0aW9uLnNlbmRlck5hbWV9YDtcclxuICAgICAgICAgICAgdXNlckxpbmsuYXBwZW5kQ2hpbGQodXNlcm5hbWUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCB1c2VyU3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xyXG4gICAgICAgICAgICByZWFjdGlvbkxpc3RJdGVtLmFwcGVuZENoaWxkKHVzZXJTcGFuKTtcclxuICAgICAgICAgICAgdXNlclNwYW4uY2xhc3NMaXN0LmFkZChcIndpa2ktdXNlcm5hbWVcIiwgXCJ3aWtpLXVzZXJuYW1lLW5vbGlua1wiKTtcclxuICAgICAgICAgICAgdXNlclNwYW4uYXBwZW5kQ2hpbGQodXNlcm5hbWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHJlYWN0aW9uVGltZXN0YW1wID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XHJcbiAgICAgICAgcmVhY3Rpb25MaXN0SXRlbS5hcHBlbmRDaGlsZChyZWFjdGlvblRpbWVzdGFtcCk7XHJcblxyXG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShuZXcgRGF0ZSgobGlzdFtpXS50aW1lc3RhbXAgLyAxMDAwMCkgLSAyMjA4OTg4ODAwMDAwKS50b0xvY2FsZVN0cmluZygpKTtcclxuICAgICAgICByZWFjdGlvblRpbWVzdGFtcC5hcHBlbmRDaGlsZCh0aW1lc3RhbXApO1xyXG4gICAgfSxcclxuXHJcbiAgICBzZW5kTWVzc2FnZTogZnVuY3Rpb24gKHRvcGljSWQsIG1lc3NhZ2UpIHtcclxuICAgICAgICBpZiAobWVzc2FnZSAmJiBtZXNzYWdlLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB3aW5kb3cud2lraW12Y2NoYXQuY29ubmVjdGlvbi5pbnZva2UoXCJTZW5kXCIsIHtcclxuICAgICAgICAgICAgICAgIE1hcmtkb3duOiBtZXNzYWdlLFxyXG4gICAgICAgICAgICAgICAgVG9waWNJZDogdG9waWNJZCxcclxuICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnNvbGUuZXJyb3IoZXJyKTtcclxuICAgICAgICAgICAgICAgIC8vcmV0dXJuIGNvbnNvbGUuZXJyb3IoXCJBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSBzZW5kaW5nIGEgY2hhdCBtZXNzYWdlXCIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG59O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuLy8gQ29weXJpZ2h0IChjKSAuTkVUIEZvdW5kYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbi8vIFJvdWdoIHBvbHlmaWxsIG9mIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9BYm9ydENvbnRyb2xsZXJcclxuLy8gV2UgZG9uJ3QgYWN0dWFsbHkgZXZlciB1c2UgdGhlIEFQSSBiZWluZyBwb2x5ZmlsbGVkLCB3ZSBhbHdheXMgdXNlIHRoZSBwb2x5ZmlsbCBiZWNhdXNlXHJcbi8vIGl0J3MgYSB2ZXJ5IG5ldyBBUEkgcmlnaHQgbm93LlxyXG4vLyBOb3QgZXhwb3J0ZWQgZnJvbSBpbmRleC5cclxuLyoqIEBwcml2YXRlICovXHJcbnZhciBBYm9ydENvbnRyb2xsZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBBYm9ydENvbnRyb2xsZXIoKSB7XHJcbiAgICAgICAgdGhpcy5pc0Fib3J0ZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLm9uYWJvcnQgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgQWJvcnRDb250cm9sbGVyLnByb3RvdHlwZS5hYm9ydCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNBYm9ydGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXNBYm9ydGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgaWYgKHRoaXMub25hYm9ydCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbmFib3J0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFib3J0Q29udHJvbGxlci5wcm90b3R5cGUsIFwic2lnbmFsXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWJvcnRDb250cm9sbGVyLnByb3RvdHlwZSwgXCJhYm9ydGVkXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXNBYm9ydGVkO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIEFib3J0Q29udHJvbGxlcjtcclxufSgpKTtcclxuZXhwb3J0cy5BYm9ydENvbnRyb2xsZXIgPSBBYm9ydENvbnRyb2xsZXI7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFib3J0Q29udHJvbGxlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuLy8gQ29weXJpZ2h0IChjKSAuTkVUIEZvdW5kYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG4gICAgfTtcclxufSkoKTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgRXJyb3JzXzEgPSByZXF1aXJlKFwiLi9FcnJvcnNcIik7XHJcbnZhciBGZXRjaEh0dHBDbGllbnRfMSA9IHJlcXVpcmUoXCIuL0ZldGNoSHR0cENsaWVudFwiKTtcclxudmFyIEh0dHBDbGllbnRfMSA9IHJlcXVpcmUoXCIuL0h0dHBDbGllbnRcIik7XHJcbnZhciBVdGlsc18xID0gcmVxdWlyZShcIi4vVXRpbHNcIik7XHJcbnZhciBYaHJIdHRwQ2xpZW50XzEgPSByZXF1aXJlKFwiLi9YaHJIdHRwQ2xpZW50XCIpO1xyXG4vKiogRGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBvZiB7QGxpbmsgQG1pY3Jvc29mdC9zaWduYWxyLkh0dHBDbGllbnR9LiAqL1xyXG52YXIgRGVmYXVsdEh0dHBDbGllbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoRGVmYXVsdEh0dHBDbGllbnQsIF9zdXBlcik7XHJcbiAgICAvKiogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUge0BsaW5rIEBtaWNyb3NvZnQvc2lnbmFsci5EZWZhdWx0SHR0cENsaWVudH0sIHVzaW5nIHRoZSBwcm92aWRlZCB7QGxpbmsgQG1pY3Jvc29mdC9zaWduYWxyLklMb2dnZXJ9IHRvIGxvZyBtZXNzYWdlcy4gKi9cclxuICAgIGZ1bmN0aW9uIERlZmF1bHRIdHRwQ2xpZW50KGxvZ2dlcikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBmZXRjaCAhPT0gXCJ1bmRlZmluZWRcIiB8fCBVdGlsc18xLlBsYXRmb3JtLmlzTm9kZSkge1xyXG4gICAgICAgICAgICBfdGhpcy5odHRwQ2xpZW50ID0gbmV3IEZldGNoSHR0cENsaWVudF8xLkZldGNoSHR0cENsaWVudChsb2dnZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICAgICAgX3RoaXMuaHR0cENsaWVudCA9IG5ldyBYaHJIdHRwQ2xpZW50XzEuWGhySHR0cENsaWVudChsb2dnZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gdXNhYmxlIEh0dHBDbGllbnQgZm91bmQuXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICAvKiogQGluaGVyaXREb2MgKi9cclxuICAgIERlZmF1bHRIdHRwQ2xpZW50LnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24gKHJlcXVlc3QpIHtcclxuICAgICAgICAvLyBDaGVjayB0aGF0IGFib3J0IHdhcyBub3Qgc2lnbmFsZWQgYmVmb3JlIGNhbGxpbmcgc2VuZFxyXG4gICAgICAgIGlmIChyZXF1ZXN0LmFib3J0U2lnbmFsICYmIHJlcXVlc3QuYWJvcnRTaWduYWwuYWJvcnRlZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yc18xLkFib3J0RXJyb3IoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghcmVxdWVzdC5tZXRob2QpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIk5vIG1ldGhvZCBkZWZpbmVkLlwiKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghcmVxdWVzdC51cmwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIk5vIHVybCBkZWZpbmVkLlwiKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQuc2VuZChyZXF1ZXN0KTtcclxuICAgIH07XHJcbiAgICBEZWZhdWx0SHR0cENsaWVudC5wcm90b3R5cGUuZ2V0Q29va2llU3RyaW5nID0gZnVuY3Rpb24gKHVybCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQuZ2V0Q29va2llU3RyaW5nKHVybCk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIERlZmF1bHRIdHRwQ2xpZW50O1xyXG59KEh0dHBDbGllbnRfMS5IdHRwQ2xpZW50KSk7XHJcbmV4cG9ydHMuRGVmYXVsdEh0dHBDbGllbnQgPSBEZWZhdWx0SHR0cENsaWVudDtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RGVmYXVsdEh0dHBDbGllbnQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8vIENvcHlyaWdodCAoYykgLk5FVCBGb3VuZGF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG4vLyAwLCAyLCAxMCwgMzAgc2Vjb25kIGRlbGF5cyBiZWZvcmUgcmVjb25uZWN0IGF0dGVtcHRzLlxyXG52YXIgREVGQVVMVF9SRVRSWV9ERUxBWVNfSU5fTUlMTElTRUNPTkRTID0gWzAsIDIwMDAsIDEwMDAwLCAzMDAwMCwgbnVsbF07XHJcbi8qKiBAcHJpdmF0ZSAqL1xyXG52YXIgRGVmYXVsdFJlY29ubmVjdFBvbGljeSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIERlZmF1bHRSZWNvbm5lY3RQb2xpY3kocmV0cnlEZWxheXMpIHtcclxuICAgICAgICB0aGlzLnJldHJ5RGVsYXlzID0gcmV0cnlEZWxheXMgIT09IHVuZGVmaW5lZCA/IHJldHJ5RGVsYXlzLmNvbmNhdChbbnVsbF0pIDogREVGQVVMVF9SRVRSWV9ERUxBWVNfSU5fTUlMTElTRUNPTkRTO1xyXG4gICAgfVxyXG4gICAgRGVmYXVsdFJlY29ubmVjdFBvbGljeS5wcm90b3R5cGUubmV4dFJldHJ5RGVsYXlJbk1pbGxpc2Vjb25kcyA9IGZ1bmN0aW9uIChyZXRyeUNvbnRleHQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZXRyeURlbGF5c1tyZXRyeUNvbnRleHQucHJldmlvdXNSZXRyeUNvdW50XTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRGVmYXVsdFJlY29ubmVjdFBvbGljeTtcclxufSgpKTtcclxuZXhwb3J0cy5EZWZhdWx0UmVjb25uZWN0UG9saWN5ID0gRGVmYXVsdFJlY29ubmVjdFBvbGljeTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RGVmYXVsdFJlY29ubmVjdFBvbGljeS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuLy8gQ29weXJpZ2h0IChjKSAuTkVUIEZvdW5kYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG4gICAgfTtcclxufSkoKTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG4vKiogRXJyb3IgdGhyb3duIHdoZW4gYW4gSFRUUCByZXF1ZXN0IGZhaWxzLiAqL1xyXG52YXIgSHR0cEVycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKEh0dHBFcnJvciwgX3N1cGVyKTtcclxuICAgIC8qKiBDb25zdHJ1Y3RzIGEgbmV3IGluc3RhbmNlIG9mIHtAbGluayBAbWljcm9zb2Z0L3NpZ25hbHIuSHR0cEVycm9yfS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXJyb3JNZXNzYWdlIEEgZGVzY3JpcHRpdmUgZXJyb3IgbWVzc2FnZS5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGF0dXNDb2RlIFRoZSBIVFRQIHN0YXR1cyBjb2RlIHJlcHJlc2VudGVkIGJ5IHRoaXMgZXJyb3IuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIEh0dHBFcnJvcihlcnJvck1lc3NhZ2UsIHN0YXR1c0NvZGUpIHtcclxuICAgICAgICB2YXIgX25ld1RhcmdldCA9IHRoaXMuY29uc3RydWN0b3I7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgdHJ1ZVByb3RvID0gX25ld1RhcmdldC5wcm90b3R5cGU7XHJcbiAgICAgICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBlcnJvck1lc3NhZ2UpIHx8IHRoaXM7XHJcbiAgICAgICAgX3RoaXMuc3RhdHVzQ29kZSA9IHN0YXR1c0NvZGU7XHJcbiAgICAgICAgLy8gV29ya2Fyb3VuZCBpc3N1ZSBpbiBUeXBlc2NyaXB0IGNvbXBpbGVyXHJcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9UeXBlU2NyaXB0L2lzc3Vlcy8xMzk2NSNpc3N1ZWNvbW1lbnQtMjc4NTcwMjAwXHJcbiAgICAgICAgX3RoaXMuX19wcm90b19fID0gdHJ1ZVByb3RvO1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIHJldHVybiBIdHRwRXJyb3I7XHJcbn0oRXJyb3IpKTtcclxuZXhwb3J0cy5IdHRwRXJyb3IgPSBIdHRwRXJyb3I7XHJcbi8qKiBFcnJvciB0aHJvd24gd2hlbiBhIHRpbWVvdXQgZWxhcHNlcy4gKi9cclxudmFyIFRpbWVvdXRFcnJvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhUaW1lb3V0RXJyb3IsIF9zdXBlcik7XHJcbiAgICAvKiogQ29uc3RydWN0cyBhIG5ldyBpbnN0YW5jZSBvZiB7QGxpbmsgQG1pY3Jvc29mdC9zaWduYWxyLlRpbWVvdXRFcnJvcn0uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGVycm9yTWVzc2FnZSBBIGRlc2NyaXB0aXZlIGVycm9yIG1lc3NhZ2UuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIFRpbWVvdXRFcnJvcihlcnJvck1lc3NhZ2UpIHtcclxuICAgICAgICB2YXIgX25ld1RhcmdldCA9IHRoaXMuY29uc3RydWN0b3I7XHJcbiAgICAgICAgaWYgKGVycm9yTWVzc2FnZSA9PT0gdm9pZCAwKSB7IGVycm9yTWVzc2FnZSA9IFwiQSB0aW1lb3V0IG9jY3VycmVkLlwiOyB9XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgdHJ1ZVByb3RvID0gX25ld1RhcmdldC5wcm90b3R5cGU7XHJcbiAgICAgICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBlcnJvck1lc3NhZ2UpIHx8IHRoaXM7XHJcbiAgICAgICAgLy8gV29ya2Fyb3VuZCBpc3N1ZSBpbiBUeXBlc2NyaXB0IGNvbXBpbGVyXHJcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9UeXBlU2NyaXB0L2lzc3Vlcy8xMzk2NSNpc3N1ZWNvbW1lbnQtMjc4NTcwMjAwXHJcbiAgICAgICAgX3RoaXMuX19wcm90b19fID0gdHJ1ZVByb3RvO1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIHJldHVybiBUaW1lb3V0RXJyb3I7XHJcbn0oRXJyb3IpKTtcclxuZXhwb3J0cy5UaW1lb3V0RXJyb3IgPSBUaW1lb3V0RXJyb3I7XHJcbi8qKiBFcnJvciB0aHJvd24gd2hlbiBhbiBhY3Rpb24gaXMgYWJvcnRlZC4gKi9cclxudmFyIEFib3J0RXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoQWJvcnRFcnJvciwgX3N1cGVyKTtcclxuICAgIC8qKiBDb25zdHJ1Y3RzIGEgbmV3IGluc3RhbmNlIG9mIHtAbGluayBBYm9ydEVycm9yfS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXJyb3JNZXNzYWdlIEEgZGVzY3JpcHRpdmUgZXJyb3IgbWVzc2FnZS5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gQWJvcnRFcnJvcihlcnJvck1lc3NhZ2UpIHtcclxuICAgICAgICB2YXIgX25ld1RhcmdldCA9IHRoaXMuY29uc3RydWN0b3I7XHJcbiAgICAgICAgaWYgKGVycm9yTWVzc2FnZSA9PT0gdm9pZCAwKSB7IGVycm9yTWVzc2FnZSA9IFwiQW4gYWJvcnQgb2NjdXJyZWQuXCI7IH1cclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciB0cnVlUHJvdG8gPSBfbmV3VGFyZ2V0LnByb3RvdHlwZTtcclxuICAgICAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGVycm9yTWVzc2FnZSkgfHwgdGhpcztcclxuICAgICAgICAvLyBXb3JrYXJvdW5kIGlzc3VlIGluIFR5cGVzY3JpcHQgY29tcGlsZXJcclxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vTWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzEzOTY1I2lzc3VlY29tbWVudC0yNzg1NzAyMDBcclxuICAgICAgICBfdGhpcy5fX3Byb3RvX18gPSB0cnVlUHJvdG87XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIEFib3J0RXJyb3I7XHJcbn0oRXJyb3IpKTtcclxuZXhwb3J0cy5BYm9ydEVycm9yID0gQWJvcnRFcnJvcjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RXJyb3JzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG4vLyBDb3B5cmlnaHQgKGMpIC5ORVQgRm91bmRhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbiAgICB9O1xyXG59KSgpO1xyXG52YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcclxuICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxyXG4gICAgICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59O1xyXG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUocmVzdWx0LnZhbHVlKTsgfSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59O1xyXG52YXIgX19nZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIEVycm9yc18xID0gcmVxdWlyZShcIi4vRXJyb3JzXCIpO1xyXG52YXIgSHR0cENsaWVudF8xID0gcmVxdWlyZShcIi4vSHR0cENsaWVudFwiKTtcclxudmFyIElMb2dnZXJfMSA9IHJlcXVpcmUoXCIuL0lMb2dnZXJcIik7XHJcbnZhciBVdGlsc18xID0gcmVxdWlyZShcIi4vVXRpbHNcIik7XHJcbnZhciBGZXRjaEh0dHBDbGllbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoRmV0Y2hIdHRwQ2xpZW50LCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gRmV0Y2hIdHRwQ2xpZW50KGxvZ2dlcikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XHJcbiAgICAgICAgX3RoaXMubG9nZ2VyID0gbG9nZ2VyO1xyXG4gICAgICAgIGlmICh0eXBlb2YgZmV0Y2ggPT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICAgICAgLy8gSW4gb3JkZXIgdG8gaWdub3JlIHRoZSBkeW5hbWljIHJlcXVpcmUgaW4gd2VicGFjayBidWlsZHMgd2UgbmVlZCB0byBkbyB0aGlzIG1hZ2ljXHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmU6IFRTIGRvZXNuJ3Qga25vdyBhYm91dCB0aGVzZSBuYW1lc1xyXG4gICAgICAgICAgICB2YXIgcmVxdWlyZUZ1bmMgPSB0eXBlb2YgX193ZWJwYWNrX3JlcXVpcmVfXyA9PT0gXCJmdW5jdGlvblwiID8gX19ub25fd2VicGFja19yZXF1aXJlX18gOiByZXF1aXJlO1xyXG4gICAgICAgICAgICAvLyBDb29raWVzIGFyZW4ndCBhdXRvbWF0aWNhbGx5IGhhbmRsZWQgaW4gTm9kZSBzbyB3ZSBuZWVkIHRvIGFkZCBhIENvb2tpZUphciB0byBwcmVzZXJ2ZSBjb29raWVzIGFjcm9zcyByZXF1ZXN0c1xyXG4gICAgICAgICAgICBfdGhpcy5qYXIgPSBuZXcgKHJlcXVpcmVGdW5jKFwidG91Z2gtY29va2llXCIpKS5Db29raWVKYXIoKTtcclxuICAgICAgICAgICAgX3RoaXMuZmV0Y2hUeXBlID0gcmVxdWlyZUZ1bmMoXCJub2RlLWZldGNoXCIpO1xyXG4gICAgICAgICAgICAvLyBub2RlLWZldGNoIGRvZXNuJ3QgaGF2ZSBhIG5pY2UgQVBJIGZvciBnZXR0aW5nIGFuZCBzZXR0aW5nIGNvb2tpZXNcclxuICAgICAgICAgICAgLy8gZmV0Y2gtY29va2llIHdpbGwgd3JhcCBhIGZldGNoIGltcGxlbWVudGF0aW9uIHdpdGggYSBkZWZhdWx0IENvb2tpZUphciBvciBhIHByb3ZpZGVkIG9uZVxyXG4gICAgICAgICAgICBfdGhpcy5mZXRjaFR5cGUgPSByZXF1aXJlRnVuYyhcImZldGNoLWNvb2tpZVwiKShfdGhpcy5mZXRjaFR5cGUsIF90aGlzLmphcik7XHJcbiAgICAgICAgICAgIC8vIE5vZGUgbmVlZHMgRXZlbnRMaXN0ZW5lciBtZXRob2RzIG9uIEFib3J0Q29udHJvbGxlciB3aGljaCBvdXIgY3VzdG9tIHBvbHlmaWxsIGRvZXNuJ3QgcHJvdmlkZVxyXG4gICAgICAgICAgICBfdGhpcy5hYm9ydENvbnRyb2xsZXJUeXBlID0gcmVxdWlyZUZ1bmMoXCJhYm9ydC1jb250cm9sbGVyXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgX3RoaXMuZmV0Y2hUeXBlID0gZmV0Y2guYmluZChzZWxmKTtcclxuICAgICAgICAgICAgX3RoaXMuYWJvcnRDb250cm9sbGVyVHlwZSA9IEFib3J0Q29udHJvbGxlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgLyoqIEBpbmhlcml0RG9jICovXHJcbiAgICBGZXRjaEh0dHBDbGllbnQucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAocmVxdWVzdCkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGFib3J0Q29udHJvbGxlciwgZXJyb3IsIHRpbWVvdXRJZCwgbXNUaW1lb3V0LCByZXNwb25zZSwgZV8xLCBjb250ZW50LCBwYXlsb2FkO1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayB0aGF0IGFib3J0IHdhcyBub3Qgc2lnbmFsZWQgYmVmb3JlIGNhbGxpbmcgc2VuZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVxdWVzdC5hYm9ydFNpZ25hbCAmJiByZXF1ZXN0LmFib3J0U2lnbmFsLmFib3J0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcnNfMS5BYm9ydEVycm9yKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXF1ZXN0Lm1ldGhvZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gbWV0aG9kIGRlZmluZWQuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmVxdWVzdC51cmwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHVybCBkZWZpbmVkLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhYm9ydENvbnRyb2xsZXIgPSBuZXcgdGhpcy5hYm9ydENvbnRyb2xsZXJUeXBlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEhvb2sgb3VyIGFib3J0U2lnbmFsIGludG8gdGhlIGFib3J0IGNvbnRyb2xsZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlcXVlc3QuYWJvcnRTaWduYWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3QuYWJvcnRTaWduYWwub25hYm9ydCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhYm9ydENvbnRyb2xsZXIuYWJvcnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9IG5ldyBFcnJvcnNfMS5BYm9ydEVycm9yKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVvdXRJZCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXF1ZXN0LnRpbWVvdXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1zVGltZW91dCA9IHJlcXVlc3QudGltZW91dDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFib3J0Q29udHJvbGxlci5hYm9ydCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLldhcm5pbmcsIFwiVGltZW91dCBmcm9tIEhUVFAgcmVxdWVzdC5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSBuZXcgRXJyb3JzXzEuVGltZW91dEVycm9yKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBtc1RpbWVvdXQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnRyeXMucHVzaChbMSwgMywgNCwgNV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmZldGNoVHlwZShyZXF1ZXN0LnVybCwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvZHk6IHJlcXVlc3QuY29udGVudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWNoZTogXCJuby1jYWNoZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWRlbnRpYWxzOiByZXF1ZXN0LndpdGhDcmVkZW50aWFscyA9PT0gdHJ1ZSA/IFwiaW5jbHVkZVwiIDogXCJzYW1lLW9yaWdpblwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IF9fYXNzaWduKHsgXCJDb250ZW50LVR5cGVcIjogXCJ0ZXh0L3BsYWluO2NoYXJzZXQ9VVRGLThcIiwgXCJYLVJlcXVlc3RlZC1XaXRoXCI6IFwiWE1MSHR0cFJlcXVlc3RcIiB9LCByZXF1ZXN0LmhlYWRlcnMpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogcmVxdWVzdC5tZXRob2QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZTogXCJjb3JzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVkaXJlY3Q6IFwibWFudWFsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmFsOiBhYm9ydENvbnRyb2xsZXIuc2lnbmFsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDVdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZV8xID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuV2FybmluZywgXCJFcnJvciBmcm9tIEhUVFAgcmVxdWVzdC4gXCIgKyBlXzEgKyBcIi5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGVfMTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aW1lb3V0SWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXF1ZXN0LmFib3J0U2lnbmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LmFib3J0U2lnbmFsLm9uYWJvcnQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNyAvKmVuZGZpbmFsbHkqL107XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3JzXzEuSHR0cEVycm9yKHJlc3BvbnNlLnN0YXR1c1RleHQsIHJlc3BvbnNlLnN0YXR1cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudCA9IGRlc2VyaWFsaXplQ29udGVudChyZXNwb25zZSwgcmVxdWVzdC5yZXNwb25zZVR5cGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBjb250ZW50XTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBheWxvYWQgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBuZXcgSHR0cENsaWVudF8xLkh0dHBSZXNwb25zZShyZXNwb25zZS5zdGF0dXMsIHJlc3BvbnNlLnN0YXR1c1RleHQsIHBheWxvYWQpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgRmV0Y2hIdHRwQ2xpZW50LnByb3RvdHlwZS5nZXRDb29raWVTdHJpbmcgPSBmdW5jdGlvbiAodXJsKSB7XHJcbiAgICAgICAgdmFyIGNvb2tpZXMgPSBcIlwiO1xyXG4gICAgICAgIGlmIChVdGlsc18xLlBsYXRmb3JtLmlzTm9kZSAmJiB0aGlzLmphcikge1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlOiB1bnVzZWQgdmFyaWFibGVcclxuICAgICAgICAgICAgdGhpcy5qYXIuZ2V0Q29va2llcyh1cmwsIGZ1bmN0aW9uIChlLCBjKSB7IHJldHVybiBjb29raWVzID0gYy5qb2luKFwiOyBcIik7IH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY29va2llcztcclxuICAgIH07XHJcbiAgICByZXR1cm4gRmV0Y2hIdHRwQ2xpZW50O1xyXG59KEh0dHBDbGllbnRfMS5IdHRwQ2xpZW50KSk7XHJcbmV4cG9ydHMuRmV0Y2hIdHRwQ2xpZW50ID0gRmV0Y2hIdHRwQ2xpZW50O1xyXG5mdW5jdGlvbiBkZXNlcmlhbGl6ZUNvbnRlbnQocmVzcG9uc2UsIHJlc3BvbnNlVHlwZSkge1xyXG4gICAgdmFyIGNvbnRlbnQ7XHJcbiAgICBzd2l0Y2ggKHJlc3BvbnNlVHlwZSkge1xyXG4gICAgICAgIGNhc2UgXCJhcnJheWJ1ZmZlclwiOlxyXG4gICAgICAgICAgICBjb250ZW50ID0gcmVzcG9uc2UuYXJyYXlCdWZmZXIoKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBcInRleHRcIjpcclxuICAgICAgICAgICAgY29udGVudCA9IHJlc3BvbnNlLnRleHQoKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBcImJsb2JcIjpcclxuICAgICAgICBjYXNlIFwiZG9jdW1lbnRcIjpcclxuICAgICAgICBjYXNlIFwianNvblwiOlxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVzcG9uc2VUeXBlICsgXCIgaXMgbm90IHN1cHBvcnRlZC5cIik7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgY29udGVudCA9IHJlc3BvbnNlLnRleHQoKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY29udGVudDtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1GZXRjaEh0dHBDbGllbnQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8vIENvcHlyaWdodCAoYykgLk5FVCBGb3VuZGF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgVGV4dE1lc3NhZ2VGb3JtYXRfMSA9IHJlcXVpcmUoXCIuL1RleHRNZXNzYWdlRm9ybWF0XCIpO1xyXG52YXIgVXRpbHNfMSA9IHJlcXVpcmUoXCIuL1V0aWxzXCIpO1xyXG4vKiogQHByaXZhdGUgKi9cclxudmFyIEhhbmRzaGFrZVByb3RvY29sID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gSGFuZHNoYWtlUHJvdG9jb2woKSB7XHJcbiAgICB9XHJcbiAgICAvLyBIYW5kc2hha2UgcmVxdWVzdCBpcyBhbHdheXMgSlNPTlxyXG4gICAgSGFuZHNoYWtlUHJvdG9jb2wucHJvdG90eXBlLndyaXRlSGFuZHNoYWtlUmVxdWVzdCA9IGZ1bmN0aW9uIChoYW5kc2hha2VSZXF1ZXN0KSB7XHJcbiAgICAgICAgcmV0dXJuIFRleHRNZXNzYWdlRm9ybWF0XzEuVGV4dE1lc3NhZ2VGb3JtYXQud3JpdGUoSlNPTi5zdHJpbmdpZnkoaGFuZHNoYWtlUmVxdWVzdCkpO1xyXG4gICAgfTtcclxuICAgIEhhbmRzaGFrZVByb3RvY29sLnByb3RvdHlwZS5wYXJzZUhhbmRzaGFrZVJlc3BvbnNlID0gZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICB2YXIgcmVzcG9uc2VNZXNzYWdlO1xyXG4gICAgICAgIHZhciBtZXNzYWdlRGF0YTtcclxuICAgICAgICB2YXIgcmVtYWluaW5nRGF0YTtcclxuICAgICAgICBpZiAoVXRpbHNfMS5pc0FycmF5QnVmZmVyKGRhdGEpIHx8ICh0eXBlb2YgQnVmZmVyICE9PSBcInVuZGVmaW5lZFwiICYmIGRhdGEgaW5zdGFuY2VvZiBCdWZmZXIpKSB7XHJcbiAgICAgICAgICAgIC8vIEZvcm1hdCBpcyBiaW5hcnkgYnV0IHN0aWxsIG5lZWQgdG8gcmVhZCBKU09OIHRleHQgZnJvbSBoYW5kc2hha2UgcmVzcG9uc2VcclxuICAgICAgICAgICAgdmFyIGJpbmFyeURhdGEgPSBuZXcgVWludDhBcnJheShkYXRhKTtcclxuICAgICAgICAgICAgdmFyIHNlcGFyYXRvckluZGV4ID0gYmluYXJ5RGF0YS5pbmRleE9mKFRleHRNZXNzYWdlRm9ybWF0XzEuVGV4dE1lc3NhZ2VGb3JtYXQuUmVjb3JkU2VwYXJhdG9yQ29kZSk7XHJcbiAgICAgICAgICAgIGlmIChzZXBhcmF0b3JJbmRleCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1lc3NhZ2UgaXMgaW5jb21wbGV0ZS5cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gY29udGVudCBiZWZvcmUgc2VwYXJhdG9yIGlzIGhhbmRzaGFrZSByZXNwb25zZVxyXG4gICAgICAgICAgICAvLyBvcHRpb25hbCBjb250ZW50IGFmdGVyIGlzIGFkZGl0aW9uYWwgbWVzc2FnZXNcclxuICAgICAgICAgICAgdmFyIHJlc3BvbnNlTGVuZ3RoID0gc2VwYXJhdG9ySW5kZXggKyAxO1xyXG4gICAgICAgICAgICBtZXNzYWdlRGF0YSA9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgYmluYXJ5RGF0YS5zbGljZSgwLCByZXNwb25zZUxlbmd0aCkpO1xyXG4gICAgICAgICAgICByZW1haW5pbmdEYXRhID0gKGJpbmFyeURhdGEuYnl0ZUxlbmd0aCA+IHJlc3BvbnNlTGVuZ3RoKSA/IGJpbmFyeURhdGEuc2xpY2UocmVzcG9uc2VMZW5ndGgpLmJ1ZmZlciA6IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgdGV4dERhdGEgPSBkYXRhO1xyXG4gICAgICAgICAgICB2YXIgc2VwYXJhdG9ySW5kZXggPSB0ZXh0RGF0YS5pbmRleE9mKFRleHRNZXNzYWdlRm9ybWF0XzEuVGV4dE1lc3NhZ2VGb3JtYXQuUmVjb3JkU2VwYXJhdG9yKTtcclxuICAgICAgICAgICAgaWYgKHNlcGFyYXRvckluZGV4ID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWVzc2FnZSBpcyBpbmNvbXBsZXRlLlwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBjb250ZW50IGJlZm9yZSBzZXBhcmF0b3IgaXMgaGFuZHNoYWtlIHJlc3BvbnNlXHJcbiAgICAgICAgICAgIC8vIG9wdGlvbmFsIGNvbnRlbnQgYWZ0ZXIgaXMgYWRkaXRpb25hbCBtZXNzYWdlc1xyXG4gICAgICAgICAgICB2YXIgcmVzcG9uc2VMZW5ndGggPSBzZXBhcmF0b3JJbmRleCArIDE7XHJcbiAgICAgICAgICAgIG1lc3NhZ2VEYXRhID0gdGV4dERhdGEuc3Vic3RyaW5nKDAsIHJlc3BvbnNlTGVuZ3RoKTtcclxuICAgICAgICAgICAgcmVtYWluaW5nRGF0YSA9ICh0ZXh0RGF0YS5sZW5ndGggPiByZXNwb25zZUxlbmd0aCkgPyB0ZXh0RGF0YS5zdWJzdHJpbmcocmVzcG9uc2VMZW5ndGgpIDogbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQXQgdGhpcyBwb2ludCB3ZSBzaG91bGQgaGF2ZSBqdXN0IHRoZSBzaW5nbGUgaGFuZHNoYWtlIG1lc3NhZ2VcclxuICAgICAgICB2YXIgbWVzc2FnZXMgPSBUZXh0TWVzc2FnZUZvcm1hdF8xLlRleHRNZXNzYWdlRm9ybWF0LnBhcnNlKG1lc3NhZ2VEYXRhKTtcclxuICAgICAgICB2YXIgcmVzcG9uc2UgPSBKU09OLnBhcnNlKG1lc3NhZ2VzWzBdKTtcclxuICAgICAgICBpZiAocmVzcG9uc2UudHlwZSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCBhIGhhbmRzaGFrZSByZXNwb25zZSBmcm9tIHRoZSBzZXJ2ZXIuXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXNwb25zZU1lc3NhZ2UgPSByZXNwb25zZTtcclxuICAgICAgICAvLyBtdWx0aXBsZSBtZXNzYWdlcyBjb3VsZCBoYXZlIGFycml2ZWQgd2l0aCBoYW5kc2hha2VcclxuICAgICAgICAvLyByZXR1cm4gYWRkaXRpb25hbCBkYXRhIHRvIGJlIHBhcnNlZCBhcyB1c3VhbCwgb3IgbnVsbCBpZiBhbGwgcGFyc2VkXHJcbiAgICAgICAgcmV0dXJuIFtyZW1haW5pbmdEYXRhLCByZXNwb25zZU1lc3NhZ2VdO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBIYW5kc2hha2VQcm90b2NvbDtcclxufSgpKTtcclxuZXhwb3J0cy5IYW5kc2hha2VQcm90b2NvbCA9IEhhbmRzaGFrZVByb3RvY29sO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1IYW5kc2hha2VQcm90b2NvbC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuLy8gQ29weXJpZ2h0IChjKSAuTkVUIEZvdW5kYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG52YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcclxuICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxyXG4gICAgICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbi8qKiBSZXByZXNlbnRzIGFuIEhUVFAgcmVzcG9uc2UuICovXHJcbnZhciBIdHRwUmVzcG9uc2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBIdHRwUmVzcG9uc2Uoc3RhdHVzQ29kZSwgc3RhdHVzVGV4dCwgY29udGVudCkge1xyXG4gICAgICAgIHRoaXMuc3RhdHVzQ29kZSA9IHN0YXR1c0NvZGU7XHJcbiAgICAgICAgdGhpcy5zdGF0dXNUZXh0ID0gc3RhdHVzVGV4dDtcclxuICAgICAgICB0aGlzLmNvbnRlbnQgPSBjb250ZW50O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIEh0dHBSZXNwb25zZTtcclxufSgpKTtcclxuZXhwb3J0cy5IdHRwUmVzcG9uc2UgPSBIdHRwUmVzcG9uc2U7XHJcbi8qKiBBYnN0cmFjdGlvbiBvdmVyIGFuIEhUVFAgY2xpZW50LlxyXG4gKlxyXG4gKiBUaGlzIGNsYXNzIHByb3ZpZGVzIGFuIGFic3RyYWN0aW9uIG92ZXIgYW4gSFRUUCBjbGllbnQgc28gdGhhdCBhIGRpZmZlcmVudCBpbXBsZW1lbnRhdGlvbiBjYW4gYmUgcHJvdmlkZWQgb24gZGlmZmVyZW50IHBsYXRmb3Jtcy5cclxuICovXHJcbnZhciBIdHRwQ2xpZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gSHR0cENsaWVudCgpIHtcclxuICAgIH1cclxuICAgIEh0dHBDbGllbnQucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uICh1cmwsIG9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKF9fYXNzaWduKHt9LCBvcHRpb25zLCB7IG1ldGhvZDogXCJHRVRcIiwgdXJsOiB1cmwgfSkpO1xyXG4gICAgfTtcclxuICAgIEh0dHBDbGllbnQucHJvdG90eXBlLnBvc3QgPSBmdW5jdGlvbiAodXJsLCBvcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZChfX2Fzc2lnbih7fSwgb3B0aW9ucywgeyBtZXRob2Q6IFwiUE9TVFwiLCB1cmw6IHVybCB9KSk7XHJcbiAgICB9O1xyXG4gICAgSHR0cENsaWVudC5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKHVybCwgb3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoX19hc3NpZ24oe30sIG9wdGlvbnMsIHsgbWV0aG9kOiBcIkRFTEVURVwiLCB1cmw6IHVybCB9KSk7XHJcbiAgICB9O1xyXG4gICAgLyoqIEdldHMgYWxsIGNvb2tpZXMgdGhhdCBhcHBseSB0byB0aGUgc3BlY2lmaWVkIFVSTC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gdXJsIFRoZSBVUkwgdGhhdCB0aGUgY29va2llcyBhcmUgdmFsaWQgZm9yLlxyXG4gICAgICogQHJldHVybnMge3N0cmluZ30gQSBzdHJpbmcgY29udGFpbmluZyBhbGwgdGhlIGtleS12YWx1ZSBjb29raWUgcGFpcnMgZm9yIHRoZSBzcGVjaWZpZWQgVVJMLlxyXG4gICAgICovXHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBIdHRwQ2xpZW50LnByb3RvdHlwZS5nZXRDb29raWVTdHJpbmcgPSBmdW5jdGlvbiAodXJsKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiXCI7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEh0dHBDbGllbnQ7XHJcbn0oKSk7XHJcbmV4cG9ydHMuSHR0cENsaWVudCA9IEh0dHBDbGllbnQ7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUh0dHBDbGllbnQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8vIENvcHlyaWdodCAoYykgLk5FVCBGb3VuZGF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XHJcbiAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcclxuICAgICAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdDtcclxufTtcclxudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufTtcclxudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBEZWZhdWx0SHR0cENsaWVudF8xID0gcmVxdWlyZShcIi4vRGVmYXVsdEh0dHBDbGllbnRcIik7XHJcbnZhciBJTG9nZ2VyXzEgPSByZXF1aXJlKFwiLi9JTG9nZ2VyXCIpO1xyXG52YXIgSVRyYW5zcG9ydF8xID0gcmVxdWlyZShcIi4vSVRyYW5zcG9ydFwiKTtcclxudmFyIExvbmdQb2xsaW5nVHJhbnNwb3J0XzEgPSByZXF1aXJlKFwiLi9Mb25nUG9sbGluZ1RyYW5zcG9ydFwiKTtcclxudmFyIFNlcnZlclNlbnRFdmVudHNUcmFuc3BvcnRfMSA9IHJlcXVpcmUoXCIuL1NlcnZlclNlbnRFdmVudHNUcmFuc3BvcnRcIik7XHJcbnZhciBVdGlsc18xID0gcmVxdWlyZShcIi4vVXRpbHNcIik7XHJcbnZhciBXZWJTb2NrZXRUcmFuc3BvcnRfMSA9IHJlcXVpcmUoXCIuL1dlYlNvY2tldFRyYW5zcG9ydFwiKTtcclxudmFyIE1BWF9SRURJUkVDVFMgPSAxMDA7XHJcbi8qKiBAcHJpdmF0ZSAqL1xyXG52YXIgSHR0cENvbm5lY3Rpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBIdHRwQ29ubmVjdGlvbih1cmwsIG9wdGlvbnMpIHtcclxuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxyXG4gICAgICAgIHRoaXMuZmVhdHVyZXMgPSB7fTtcclxuICAgICAgICB0aGlzLm5lZ290aWF0ZVZlcnNpb24gPSAxO1xyXG4gICAgICAgIFV0aWxzXzEuQXJnLmlzUmVxdWlyZWQodXJsLCBcInVybFwiKTtcclxuICAgICAgICB0aGlzLmxvZ2dlciA9IFV0aWxzXzEuY3JlYXRlTG9nZ2VyKG9wdGlvbnMubG9nZ2VyKTtcclxuICAgICAgICB0aGlzLmJhc2VVcmwgPSB0aGlzLnJlc29sdmVVcmwodXJsKTtcclxuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuICAgICAgICBvcHRpb25zLmxvZ01lc3NhZ2VDb250ZW50ID0gb3B0aW9ucy5sb2dNZXNzYWdlQ29udGVudCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBvcHRpb25zLmxvZ01lc3NhZ2VDb250ZW50O1xyXG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy53aXRoQ3JlZGVudGlhbHMgPT09IFwiYm9vbGVhblwiIHx8IG9wdGlvbnMud2l0aENyZWRlbnRpYWxzID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgb3B0aW9ucy53aXRoQ3JlZGVudGlhbHMgPSBvcHRpb25zLndpdGhDcmVkZW50aWFscyA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IG9wdGlvbnMud2l0aENyZWRlbnRpYWxzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwid2l0aENyZWRlbnRpYWxzIG9wdGlvbiB3YXMgbm90IGEgJ2Jvb2xlYW4nIG9yICd1bmRlZmluZWQnIHZhbHVlXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgd2ViU29ja2V0TW9kdWxlID0gbnVsbDtcclxuICAgICAgICB2YXIgZXZlbnRTb3VyY2VNb2R1bGUgPSBudWxsO1xyXG4gICAgICAgIGlmIChVdGlsc18xLlBsYXRmb3JtLmlzTm9kZSAmJiB0eXBlb2YgcmVxdWlyZSAhPT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgICAvLyBJbiBvcmRlciB0byBpZ25vcmUgdGhlIGR5bmFtaWMgcmVxdWlyZSBpbiB3ZWJwYWNrIGJ1aWxkcyB3ZSBuZWVkIHRvIGRvIHRoaXMgbWFnaWNcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZTogVFMgZG9lc24ndCBrbm93IGFib3V0IHRoZXNlIG5hbWVzXHJcbiAgICAgICAgICAgIHZhciByZXF1aXJlRnVuYyA9IHR5cGVvZiBfX3dlYnBhY2tfcmVxdWlyZV9fID09PSBcImZ1bmN0aW9uXCIgPyBfX25vbl93ZWJwYWNrX3JlcXVpcmVfXyA6IHJlcXVpcmU7XHJcbiAgICAgICAgICAgIHdlYlNvY2tldE1vZHVsZSA9IHJlcXVpcmVGdW5jKFwid3NcIik7XHJcbiAgICAgICAgICAgIGV2ZW50U291cmNlTW9kdWxlID0gcmVxdWlyZUZ1bmMoXCJldmVudHNvdXJjZVwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFVdGlsc18xLlBsYXRmb3JtLmlzTm9kZSAmJiB0eXBlb2YgV2ViU29ja2V0ICE9PSBcInVuZGVmaW5lZFwiICYmICFvcHRpb25zLldlYlNvY2tldCkge1xyXG4gICAgICAgICAgICBvcHRpb25zLldlYlNvY2tldCA9IFdlYlNvY2tldDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoVXRpbHNfMS5QbGF0Zm9ybS5pc05vZGUgJiYgIW9wdGlvbnMuV2ViU29ja2V0KSB7XHJcbiAgICAgICAgICAgIGlmICh3ZWJTb2NrZXRNb2R1bGUpIHtcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMuV2ViU29ja2V0ID0gd2ViU29ja2V0TW9kdWxlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghVXRpbHNfMS5QbGF0Zm9ybS5pc05vZGUgJiYgdHlwZW9mIEV2ZW50U291cmNlICE9PSBcInVuZGVmaW5lZFwiICYmICFvcHRpb25zLkV2ZW50U291cmNlKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMuRXZlbnRTb3VyY2UgPSBFdmVudFNvdXJjZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoVXRpbHNfMS5QbGF0Zm9ybS5pc05vZGUgJiYgIW9wdGlvbnMuRXZlbnRTb3VyY2UpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBldmVudFNvdXJjZU1vZHVsZSAhPT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5FdmVudFNvdXJjZSA9IGV2ZW50U291cmNlTW9kdWxlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaHR0cENsaWVudCA9IG9wdGlvbnMuaHR0cENsaWVudCB8fCBuZXcgRGVmYXVsdEh0dHBDbGllbnRfMS5EZWZhdWx0SHR0cENsaWVudCh0aGlzLmxvZ2dlcik7XHJcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uU3RhdGUgPSBcIkRpc2Nvbm5lY3RlZFwiIC8qIERpc2Nvbm5lY3RlZCAqLztcclxuICAgICAgICB0aGlzLmNvbm5lY3Rpb25TdGFydGVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcclxuICAgICAgICB0aGlzLm9ucmVjZWl2ZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5vbmNsb3NlID0gbnVsbDtcclxuICAgIH1cclxuICAgIEh0dHBDb25uZWN0aW9uLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uICh0cmFuc2ZlckZvcm1hdCkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIG1lc3NhZ2UsIG1lc3NhZ2U7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZmVyRm9ybWF0ID0gdHJhbnNmZXJGb3JtYXQgfHwgSVRyYW5zcG9ydF8xLlRyYW5zZmVyRm9ybWF0LkJpbmFyeTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgVXRpbHNfMS5BcmcuaXNJbih0cmFuc2ZlckZvcm1hdCwgSVRyYW5zcG9ydF8xLlRyYW5zZmVyRm9ybWF0LCBcInRyYW5zZmVyRm9ybWF0XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkRlYnVnLCBcIlN0YXJ0aW5nIGNvbm5lY3Rpb24gd2l0aCB0cmFuc2ZlciBmb3JtYXQgJ1wiICsgSVRyYW5zcG9ydF8xLlRyYW5zZmVyRm9ybWF0W3RyYW5zZmVyRm9ybWF0XSArIFwiJy5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbm5lY3Rpb25TdGF0ZSAhPT0gXCJEaXNjb25uZWN0ZWRcIiAvKiBEaXNjb25uZWN0ZWQgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJDYW5ub3Qgc3RhcnQgYW4gSHR0cENvbm5lY3Rpb24gdGhhdCBpcyBub3QgaW4gdGhlICdEaXNjb25uZWN0ZWQnIHN0YXRlLlwiKSldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvblN0YXRlID0gXCJDb25uZWN0aW5nXCIgLyogQ29ubmVjdGluZyAqLztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFydEludGVybmFsUHJvbWlzZSA9IHRoaXMuc3RhcnRJbnRlcm5hbCh0cmFuc2ZlckZvcm1hdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuc3RhcnRJbnRlcm5hbFByb21pc2VdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISh0aGlzLmNvbm5lY3Rpb25TdGF0ZSA9PT0gXCJEaXNjb25uZWN0aW5nXCIgLyogRGlzY29ubmVjdGluZyAqLykpIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gXCJGYWlsZWQgdG8gc3RhcnQgdGhlIEh0dHBDb25uZWN0aW9uIGJlZm9yZSBzdG9wKCkgd2FzIGNhbGxlZC5cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5FcnJvciwgbWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIGNhbm5vdCBhd2FpdCBzdG9wUHJvbWlzZSBpbnNpZGUgc3RhcnRJbnRlcm5hbCBzaW5jZSBzdG9wSW50ZXJuYWwgYXdhaXRzIHRoZSBzdGFydEludGVybmFsUHJvbWlzZS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5zdG9wUHJvbWlzZV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSBjYW5ub3QgYXdhaXQgc3RvcFByb21pc2UgaW5zaWRlIHN0YXJ0SW50ZXJuYWwgc2luY2Ugc3RvcEludGVybmFsIGF3YWl0cyB0aGUgc3RhcnRJbnRlcm5hbFByb21pc2UuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihtZXNzYWdlKSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY29ubmVjdGlvblN0YXRlICE9PSBcIkNvbm5lY3RlZFwiIC8qIENvbm5lY3RlZCAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IFwiSHR0cENvbm5lY3Rpb24uc3RhcnRJbnRlcm5hbCBjb21wbGV0ZWQgZ3JhY2VmdWxseSBidXQgZGlkbid0IGVudGVyIHRoZSBjb25uZWN0aW9uIGludG8gdGhlIGNvbm5lY3RlZCBzdGF0ZSFcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuRXJyb3IsIG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihtZXNzYWdlKSldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gNDtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvblN0YXJ0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEh0dHBDb25uZWN0aW9uLnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICBpZiAodGhpcy5jb25uZWN0aW9uU3RhdGUgIT09IFwiQ29ubmVjdGVkXCIgLyogQ29ubmVjdGVkICovKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJDYW5ub3Qgc2VuZCBkYXRhIGlmIHRoZSBjb25uZWN0aW9uIGlzIG5vdCBpbiB0aGUgJ0Nvbm5lY3RlZCcgU3RhdGUuXCIpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCF0aGlzLnNlbmRRdWV1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLnNlbmRRdWV1ZSA9IG5ldyBUcmFuc3BvcnRTZW5kUXVldWUodGhpcy50cmFuc3BvcnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBUcmFuc3BvcnQgd2lsbCBub3QgYmUgbnVsbCBpZiBzdGF0ZSBpcyBjb25uZWN0ZWRcclxuICAgICAgICByZXR1cm4gdGhpcy5zZW5kUXVldWUuc2VuZChkYXRhKTtcclxuICAgIH07XHJcbiAgICBIdHRwQ29ubmVjdGlvbi5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY29ubmVjdGlvblN0YXRlID09PSBcIkRpc2Nvbm5lY3RlZFwiIC8qIERpc2Nvbm5lY3RlZCAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5EZWJ1ZywgXCJDYWxsIHRvIEh0dHBDb25uZWN0aW9uLnN0b3AoXCIgKyBlcnJvciArIFwiKSBpZ25vcmVkIGJlY2F1c2UgdGhlIGNvbm5lY3Rpb24gaXMgYWxyZWFkeSBpbiB0aGUgZGlzY29ubmVjdGVkIHN0YXRlLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBQcm9taXNlLnJlc29sdmUoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY29ubmVjdGlvblN0YXRlID09PSBcIkRpc2Nvbm5lY3RpbmdcIiAvKiBEaXNjb25uZWN0aW5nICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkRlYnVnLCBcIkNhbGwgdG8gSHR0cENvbm5lY3Rpb24uc3RvcChcIiArIGVycm9yICsgXCIpIGlnbm9yZWQgYmVjYXVzZSB0aGUgY29ubmVjdGlvbiBpcyBhbHJlYWR5IGluIHRoZSBkaXNjb25uZWN0aW5nIHN0YXRlLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB0aGlzLnN0b3BQcm9taXNlXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb25TdGF0ZSA9IFwiRGlzY29ubmVjdGluZ1wiIC8qIERpc2Nvbm5lY3RpbmcgKi87XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RvcFByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRG9uJ3QgY29tcGxldGUgc3RvcCgpIHVudGlsIHN0b3BDb25uZWN0aW9uKCkgY29tcGxldGVzLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuc3RvcFByb21pc2VSZXNvbHZlciA9IHJlc29sdmU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzdG9wSW50ZXJuYWwgc2hvdWxkIG5ldmVyIHRocm93IHNvIGp1c3Qgb2JzZXJ2ZSBpdC5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5zdG9wSW50ZXJuYWwoZXJyb3IpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHN0b3BJbnRlcm5hbCBzaG91bGQgbmV2ZXIgdGhyb3cgc28ganVzdCBvYnNlcnZlIGl0LlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuc3RvcFByb21pc2VdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEh0dHBDb25uZWN0aW9uLnByb3RvdHlwZS5zdG9wSW50ZXJuYWwgPSBmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBlXzEsIGVfMjtcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IGVycm9yIGFzIHNvb24gYXMgcG9zc2libGUgb3RoZXJ3aXNlIHRoZXJlIGlzIGEgcmFjZSBiZXR3ZWVuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSB0cmFuc3BvcnQgY2xvc2luZyBhbmQgcHJvdmlkaW5nIGFuIGVycm9yIGFuZCB0aGUgZXJyb3IgZnJvbSBhIGNsb3NlIG1lc3NhZ2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2Ugd291bGQgcHJlZmVyIHRoZSBjbG9zZSBtZXNzYWdlIGVycm9yLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3BFcnJvciA9IGVycm9yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS50cnlzLnB1c2goWzEsIDMsICwgNF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnN0YXJ0SW50ZXJuYWxQcm9taXNlXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlXzEgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDRdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnRyYW5zcG9ydCkgcmV0dXJuIFszIC8qYnJlYWsqLywgOV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gNTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnRyeXMucHVzaChbNSwgNywgLCA4XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMudHJhbnNwb3J0LnN0b3AoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDhdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZV8yID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkVycm9yLCBcIkh0dHBDb25uZWN0aW9uLnRyYW5zcG9ydC5zdG9wKCkgdGhyZXcgZXJyb3IgJ1wiICsgZV8yICsgXCInLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9wQ29ubmVjdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA4XTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDg6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCAxMF07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA5OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkRlYnVnLCBcIkh0dHBDb25uZWN0aW9uLnRyYW5zcG9ydCBpcyB1bmRlZmluZWQgaW4gSHR0cENvbm5lY3Rpb24uc3RvcCgpIGJlY2F1c2Ugc3RhcnQoKSBmYWlsZWQuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3BDb25uZWN0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMTA7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxMDogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBIdHRwQ29ubmVjdGlvbi5wcm90b3R5cGUuc3RhcnRJbnRlcm5hbCA9IGZ1bmN0aW9uICh0cmFuc2ZlckZvcm1hdCkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHVybCwgbmVnb3RpYXRlUmVzcG9uc2UsIHJlZGlyZWN0cywgX2xvb3BfMSwgdGhpc18xLCBlXzM7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybCA9IHRoaXMuYmFzZVVybDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hY2Nlc3NUb2tlbkZhY3RvcnkgPSB0aGlzLm9wdGlvbnMuYWNjZXNzVG9rZW5GYWN0b3J5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS50cnlzLnB1c2goWzEsIDEyLCAsIDEzXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLnNraXBOZWdvdGlhdGlvbikgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHRoaXMub3B0aW9ucy50cmFuc3BvcnQgPT09IElUcmFuc3BvcnRfMS5IdHRwVHJhbnNwb3J0VHlwZS5XZWJTb2NrZXRzKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgM107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vIG5lZWQgdG8gYWRkIGEgY29ubmVjdGlvbiBJRCBpbiB0aGlzIGNhc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFuc3BvcnQgPSB0aGlzLmNvbnN0cnVjdFRyYW5zcG9ydChJVHJhbnNwb3J0XzEuSHR0cFRyYW5zcG9ydFR5cGUuV2ViU29ja2V0cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIHNob3VsZCBqdXN0IGNhbGwgY29ubmVjdCBkaXJlY3RseSBpbiB0aGlzIGNhc2UuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vIGZhbGxiYWNrIG9yIG5lZ290aWF0ZSBpbiB0aGlzIGNhc2UuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuc3RhcnRUcmFuc3BvcnQodXJsLCB0cmFuc2ZlckZvcm1hdCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2Ugc2hvdWxkIGp1c3QgY2FsbCBjb25uZWN0IGRpcmVjdGx5IGluIHRoaXMgY2FzZS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm8gZmFsbGJhY2sgb3IgbmVnb3RpYXRlIGluIHRoaXMgY2FzZS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA0XTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6IHRocm93IG5ldyBFcnJvcihcIk5lZ290aWF0aW9uIGNhbiBvbmx5IGJlIHNraXBwZWQgd2hlbiB1c2luZyB0aGUgV2ViU29ja2V0IHRyYW5zcG9ydCBkaXJlY3RseS5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzMgLypicmVhayovLCAxMV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZWdvdGlhdGVSZXNwb25zZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0cyA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9sb29wXzEgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWNjZXNzVG9rZW5fMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpc18xLmdldE5lZ290aWF0aW9uUmVzcG9uc2UodXJsKV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5lZ290aWF0ZVJlc3BvbnNlID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIHVzZXIgdHJpZXMgdG8gc3RvcCB0aGUgY29ubmVjdGlvbiB3aGVuIGl0IGlzIGJlaW5nIHN0YXJ0ZWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzXzEuY29ubmVjdGlvblN0YXRlID09PSBcIkRpc2Nvbm5lY3RpbmdcIiAvKiBEaXNjb25uZWN0aW5nICovIHx8IHRoaXNfMS5jb25uZWN0aW9uU3RhdGUgPT09IFwiRGlzY29ubmVjdGVkXCIgLyogRGlzY29ubmVjdGVkICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIGNvbm5lY3Rpb24gd2FzIHN0b3BwZWQgZHVyaW5nIG5lZ290aWF0aW9uLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZWdvdGlhdGVSZXNwb25zZS5lcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihuZWdvdGlhdGVSZXNwb25zZS5lcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmVnb3RpYXRlUmVzcG9uc2UuUHJvdG9jb2xWZXJzaW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRGV0ZWN0ZWQgYSBjb25uZWN0aW9uIGF0dGVtcHQgdG8gYW4gQVNQLk5FVCBTaWduYWxSIFNlcnZlci4gVGhpcyBjbGllbnQgb25seSBzdXBwb3J0cyBjb25uZWN0aW5nIHRvIGFuIEFTUC5ORVQgQ29yZSBTaWduYWxSIFNlcnZlci4gU2VlIGh0dHBzOi8vYWthLm1zL3NpZ25hbHItY29yZS1kaWZmZXJlbmNlcyBmb3IgZGV0YWlscy5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmVnb3RpYXRlUmVzcG9uc2UudXJsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsID0gbmVnb3RpYXRlUmVzcG9uc2UudXJsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5lZ290aWF0ZVJlc3BvbnNlLmFjY2Vzc1Rva2VuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXNzVG9rZW5fMSA9IG5lZ290aWF0ZVJlc3BvbnNlLmFjY2Vzc1Rva2VuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNfMS5hY2Nlc3NUb2tlbkZhY3RvcnkgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBhY2Nlc3NUb2tlbl8xOyB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVkaXJlY3RzKys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNfMSA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gNjtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6IHJldHVybiBbNSAvKnlpZWxkKiovLCBfbG9vcF8xKCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDg7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA4OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmVnb3RpYXRlUmVzcG9uc2UudXJsICYmIHJlZGlyZWN0cyA8IE1BWF9SRURJUkVDVFMpIHJldHVybiBbMyAvKmJyZWFrKi8sIDZdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDk7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA5OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVkaXJlY3RzID09PSBNQVhfUkVESVJFQ1RTICYmIG5lZ290aWF0ZVJlc3BvbnNlLnVybCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTmVnb3RpYXRlIHJlZGlyZWN0aW9uIGxpbWl0IGV4Y2VlZGVkLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmNyZWF0ZVRyYW5zcG9ydCh1cmwsIHRoaXMub3B0aW9ucy50cmFuc3BvcnQsIG5lZ290aWF0ZVJlc3BvbnNlLCB0cmFuc2ZlckZvcm1hdCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAxMTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDExOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy50cmFuc3BvcnQgaW5zdGFuY2VvZiBMb25nUG9sbGluZ1RyYW5zcG9ydF8xLkxvbmdQb2xsaW5nVHJhbnNwb3J0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZlYXR1cmVzLmluaGVyZW50S2VlcEFsaXZlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jb25uZWN0aW9uU3RhdGUgPT09IFwiQ29ubmVjdGluZ1wiIC8qIENvbm5lY3RpbmcgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEVuc3VyZSB0aGUgY29ubmVjdGlvbiB0cmFuc2l0aW9ucyB0byB0aGUgY29ubmVjdGVkIHN0YXRlIHByaW9yIHRvIGNvbXBsZXRpbmcgdGhpcy5zdGFydEludGVybmFsUHJvbWlzZS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHN0YXJ0KCkgd2lsbCBoYW5kbGUgdGhlIGNhc2Ugd2hlbiBzdG9wIHdhcyBjYWxsZWQgYW5kIHN0YXJ0SW50ZXJuYWwgZXhpdHMgc3RpbGwgaW4gdGhlIGRpc2Nvbm5lY3Rpbmcgc3RhdGUuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkRlYnVnLCBcIlRoZSBIdHRwQ29ubmVjdGlvbiBjb25uZWN0ZWQgc3VjY2Vzc2Z1bGx5LlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvblN0YXRlID0gXCJDb25uZWN0ZWRcIiAvKiBDb25uZWN0ZWQgKi87XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgMTNdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVfMyA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5FcnJvciwgXCJGYWlsZWQgdG8gc3RhcnQgdGhlIGNvbm5lY3Rpb246IFwiICsgZV8zKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uU3RhdGUgPSBcIkRpc2Nvbm5lY3RlZFwiIC8qIERpc2Nvbm5lY3RlZCAqLztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFuc3BvcnQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBQcm9taXNlLnJlamVjdChlXzMpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDEzOiByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEh0dHBDb25uZWN0aW9uLnByb3RvdHlwZS5nZXROZWdvdGlhdGlvblJlc3BvbnNlID0gZnVuY3Rpb24gKHVybCkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGhlYWRlcnMsIHRva2VuLCBfYSwgbmFtZSwgdmFsdWUsIG5lZ290aWF0ZVVybCwgcmVzcG9uc2UsIG5lZ290aWF0ZVJlc3BvbnNlLCBlXzQ7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnMgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmFjY2Vzc1Rva2VuRmFjdG9yeSkgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuYWNjZXNzVG9rZW5GYWN0b3J5KCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW4gPSBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b2tlbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyc1tcIkF1dGhvcml6YXRpb25cIl0gPSBcIkJlYXJlciBcIiArIHRva2VuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMjtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gVXRpbHNfMS5nZXRVc2VyQWdlbnRIZWFkZXIoKSwgbmFtZSA9IF9hWzBdLCB2YWx1ZSA9IF9hWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzW25hbWVdID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5lZ290aWF0ZVVybCA9IHRoaXMucmVzb2x2ZU5lZ290aWF0ZVVybCh1cmwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkRlYnVnLCBcIlNlbmRpbmcgbmVnb3RpYXRpb24gcmVxdWVzdDogXCIgKyBuZWdvdGlhdGVVcmwgKyBcIi5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLnRyeXMucHVzaChbMywgNSwgLCA2XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuaHR0cENsaWVudC5wb3N0KG5lZ290aWF0ZVVybCwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogX19hc3NpZ24oe30sIGhlYWRlcnMsIHRoaXMub3B0aW9ucy5oZWFkZXJzKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMub3B0aW9ucy53aXRoQ3JlZGVudGlhbHMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1c0NvZGUgIT09IDIwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIlVuZXhwZWN0ZWQgc3RhdHVzIGNvZGUgcmV0dXJuZWQgZnJvbSBuZWdvdGlhdGUgJ1wiICsgcmVzcG9uc2Uuc3RhdHVzQ29kZSArIFwiJ1wiKSldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5lZ290aWF0ZVJlc3BvbnNlID0gSlNPTi5wYXJzZShyZXNwb25zZS5jb250ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFuZWdvdGlhdGVSZXNwb25zZS5uZWdvdGlhdGVWZXJzaW9uIHx8IG5lZ290aWF0ZVJlc3BvbnNlLm5lZ290aWF0ZVZlcnNpb24gPCAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOZWdvdGlhdGUgdmVyc2lvbiAwIGRvZXNuJ3QgdXNlIGNvbm5lY3Rpb25Ub2tlblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU28gd2Ugc2V0IGl0IGVxdWFsIHRvIGNvbm5lY3Rpb25JZCBzbyBhbGwgb3VyIGxvZ2ljIGNhbiB1c2UgY29ubmVjdGlvblRva2VuIHdpdGhvdXQgYmVpbmcgYXdhcmUgb2YgdGhlIG5lZ290aWF0ZSB2ZXJzaW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZWdvdGlhdGVSZXNwb25zZS5jb25uZWN0aW9uVG9rZW4gPSBuZWdvdGlhdGVSZXNwb25zZS5jb25uZWN0aW9uSWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIG5lZ290aWF0ZVJlc3BvbnNlXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVfNCA9IF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5FcnJvciwgXCJGYWlsZWQgdG8gY29tcGxldGUgbmVnb3RpYXRpb24gd2l0aCB0aGUgc2VydmVyOiBcIiArIGVfNCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBQcm9taXNlLnJlamVjdChlXzQpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6IHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgSHR0cENvbm5lY3Rpb24ucHJvdG90eXBlLmNyZWF0ZUNvbm5lY3RVcmwgPSBmdW5jdGlvbiAodXJsLCBjb25uZWN0aW9uVG9rZW4pIHtcclxuICAgICAgICBpZiAoIWNvbm5lY3Rpb25Ub2tlbikge1xyXG4gICAgICAgICAgICByZXR1cm4gdXJsO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdXJsICsgKHVybC5pbmRleE9mKFwiP1wiKSA9PT0gLTEgPyBcIj9cIiA6IFwiJlwiKSArIChcImlkPVwiICsgY29ubmVjdGlvblRva2VuKTtcclxuICAgIH07XHJcbiAgICBIdHRwQ29ubmVjdGlvbi5wcm90b3R5cGUuY3JlYXRlVHJhbnNwb3J0ID0gZnVuY3Rpb24gKHVybCwgcmVxdWVzdGVkVHJhbnNwb3J0LCBuZWdvdGlhdGVSZXNwb25zZSwgcmVxdWVzdGVkVHJhbnNmZXJGb3JtYXQpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBjb25uZWN0VXJsLCB0cmFuc3BvcnRFeGNlcHRpb25zLCB0cmFuc3BvcnRzLCBuZWdvdGlhdGUsIF9pLCB0cmFuc3BvcnRzXzEsIGVuZHBvaW50LCB0cmFuc3BvcnRPckVycm9yLCBleF8xLCBleF8yLCBtZXNzYWdlO1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0VXJsID0gdGhpcy5jcmVhdGVDb25uZWN0VXJsKHVybCwgbmVnb3RpYXRlUmVzcG9uc2UuY29ubmVjdGlvblRva2VuKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzSVRyYW5zcG9ydChyZXF1ZXN0ZWRUcmFuc3BvcnQpKSByZXR1cm4gWzMgLypicmVhayovLCAyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5EZWJ1ZywgXCJDb25uZWN0aW9uIHdhcyBwcm92aWRlZCBhbiBpbnN0YW5jZSBvZiBJVHJhbnNwb3J0LCB1c2luZyB0aGF0IGRpcmVjdGx5LlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFuc3BvcnQgPSByZXF1ZXN0ZWRUcmFuc3BvcnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuc3RhcnRUcmFuc3BvcnQoY29ubmVjdFVybCwgcmVxdWVzdGVkVHJhbnNmZXJGb3JtYXQpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uSWQgPSBuZWdvdGlhdGVSZXNwb25zZS5jb25uZWN0aW9uSWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zcG9ydEV4Y2VwdGlvbnMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNwb3J0cyA9IG5lZ290aWF0ZVJlc3BvbnNlLmF2YWlsYWJsZVRyYW5zcG9ydHMgfHwgW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5lZ290aWF0ZSA9IG5lZ290aWF0ZVJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfaSA9IDAsIHRyYW5zcG9ydHNfMSA9IHRyYW5zcG9ydHM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKF9pIDwgdHJhbnNwb3J0c18xLmxlbmd0aCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDEzXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kcG9pbnQgPSB0cmFuc3BvcnRzXzFbX2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc3BvcnRPckVycm9yID0gdGhpcy5yZXNvbHZlVHJhbnNwb3J0T3JFcnJvcihlbmRwb2ludCwgcmVxdWVzdGVkVHJhbnNwb3J0LCByZXF1ZXN0ZWRUcmFuc2ZlckZvcm1hdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHRyYW5zcG9ydE9yRXJyb3IgaW5zdGFuY2VvZiBFcnJvcikpIHJldHVybiBbMyAvKmJyZWFrKi8sIDRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTdG9yZSB0aGUgZXJyb3IgYW5kIGNvbnRpbnVlLCB3ZSBkb24ndCB3YW50IHRvIGNhdXNlIGEgcmUtbmVnb3RpYXRlIGluIHRoZXNlIGNhc2VzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zcG9ydEV4Y2VwdGlvbnMucHVzaChlbmRwb2ludC50cmFuc3BvcnQgKyBcIiBmYWlsZWQ6IFwiICsgdHJhbnNwb3J0T3JFcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDEyXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc0lUcmFuc3BvcnQodHJhbnNwb3J0T3JFcnJvcikpIHJldHVybiBbMyAvKmJyZWFrKi8sIDEyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFuc3BvcnQgPSB0cmFuc3BvcnRPckVycm9yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISFuZWdvdGlhdGUpIHJldHVybiBbMyAvKmJyZWFrKi8sIDldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDU7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS50cnlzLnB1c2goWzUsIDcsICwgOF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmdldE5lZ290aWF0aW9uUmVzcG9uc2UodXJsKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZWdvdGlhdGUgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDhdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhfMSA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIFByb21pc2UucmVqZWN0KGV4XzEpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDg6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3RVcmwgPSB0aGlzLmNyZWF0ZUNvbm5lY3RVcmwodXJsLCBuZWdvdGlhdGUuY29ubmVjdGlvblRva2VuKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSA5O1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgOTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EudHJ5cy5wdXNoKFs5LCAxMSwgLCAxMl0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnN0YXJ0VHJhbnNwb3J0KGNvbm5lY3RVcmwsIHJlcXVlc3RlZFRyYW5zZmVyRm9ybWF0KV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb25JZCA9IG5lZ290aWF0ZS5jb25uZWN0aW9uSWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDExOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBleF8yID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkVycm9yLCBcIkZhaWxlZCB0byBzdGFydCB0aGUgdHJhbnNwb3J0ICdcIiArIGVuZHBvaW50LnRyYW5zcG9ydCArIFwiJzogXCIgKyBleF8yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmVnb3RpYXRlID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc3BvcnRFeGNlcHRpb25zLnB1c2goZW5kcG9pbnQudHJhbnNwb3J0ICsgXCIgZmFpbGVkOiBcIiArIGV4XzIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jb25uZWN0aW9uU3RhdGUgIT09IFwiQ29ubmVjdGluZ1wiIC8qIENvbm5lY3RpbmcgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBcIkZhaWxlZCB0byBzZWxlY3QgdHJhbnNwb3J0IGJlZm9yZSBzdG9wKCkgd2FzIGNhbGxlZC5cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuRGVidWcsIG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihtZXNzYWdlKSldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDEyXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDEyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfaSsrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCAzXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDEzOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHJhbnNwb3J0RXhjZXB0aW9ucy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiVW5hYmxlIHRvIGNvbm5lY3QgdG8gdGhlIHNlcnZlciB3aXRoIGFueSBvZiB0aGUgYXZhaWxhYmxlIHRyYW5zcG9ydHMuIFwiICsgdHJhbnNwb3J0RXhjZXB0aW9ucy5qb2luKFwiIFwiKSkpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm9uZSBvZiB0aGUgdHJhbnNwb3J0cyBzdXBwb3J0ZWQgYnkgdGhlIGNsaWVudCBhcmUgc3VwcG9ydGVkIGJ5IHRoZSBzZXJ2ZXIuXCIpKV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEh0dHBDb25uZWN0aW9uLnByb3RvdHlwZS5jb25zdHJ1Y3RUcmFuc3BvcnQgPSBmdW5jdGlvbiAodHJhbnNwb3J0KSB7XHJcbiAgICAgICAgc3dpdGNoICh0cmFuc3BvcnQpIHtcclxuICAgICAgICAgICAgY2FzZSBJVHJhbnNwb3J0XzEuSHR0cFRyYW5zcG9ydFR5cGUuV2ViU29ja2V0czpcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLldlYlNvY2tldCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIidXZWJTb2NrZXQnIGlzIG5vdCBzdXBwb3J0ZWQgaW4geW91ciBlbnZpcm9ubWVudC5cIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFdlYlNvY2tldFRyYW5zcG9ydF8xLldlYlNvY2tldFRyYW5zcG9ydCh0aGlzLmh0dHBDbGllbnQsIHRoaXMuYWNjZXNzVG9rZW5GYWN0b3J5LCB0aGlzLmxvZ2dlciwgdGhpcy5vcHRpb25zLmxvZ01lc3NhZ2VDb250ZW50IHx8IGZhbHNlLCB0aGlzLm9wdGlvbnMuV2ViU29ja2V0LCB0aGlzLm9wdGlvbnMuaGVhZGVycyB8fCB7fSk7XHJcbiAgICAgICAgICAgIGNhc2UgSVRyYW5zcG9ydF8xLkh0dHBUcmFuc3BvcnRUeXBlLlNlcnZlclNlbnRFdmVudHM6XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5FdmVudFNvdXJjZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIidFdmVudFNvdXJjZScgaXMgbm90IHN1cHBvcnRlZCBpbiB5b3VyIGVudmlyb25tZW50LlwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgU2VydmVyU2VudEV2ZW50c1RyYW5zcG9ydF8xLlNlcnZlclNlbnRFdmVudHNUcmFuc3BvcnQodGhpcy5odHRwQ2xpZW50LCB0aGlzLmFjY2Vzc1Rva2VuRmFjdG9yeSwgdGhpcy5sb2dnZXIsIHRoaXMub3B0aW9ucy5sb2dNZXNzYWdlQ29udGVudCB8fCBmYWxzZSwgdGhpcy5vcHRpb25zLkV2ZW50U291cmNlLCB0aGlzLm9wdGlvbnMud2l0aENyZWRlbnRpYWxzLCB0aGlzLm9wdGlvbnMuaGVhZGVycyB8fCB7fSk7XHJcbiAgICAgICAgICAgIGNhc2UgSVRyYW5zcG9ydF8xLkh0dHBUcmFuc3BvcnRUeXBlLkxvbmdQb2xsaW5nOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBMb25nUG9sbGluZ1RyYW5zcG9ydF8xLkxvbmdQb2xsaW5nVHJhbnNwb3J0KHRoaXMuaHR0cENsaWVudCwgdGhpcy5hY2Nlc3NUb2tlbkZhY3RvcnksIHRoaXMubG9nZ2VyLCB0aGlzLm9wdGlvbnMubG9nTWVzc2FnZUNvbnRlbnQgfHwgZmFsc2UsIHRoaXMub3B0aW9ucy53aXRoQ3JlZGVudGlhbHMsIHRoaXMub3B0aW9ucy5oZWFkZXJzIHx8IHt9KTtcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVua25vd24gdHJhbnNwb3J0OiBcIiArIHRyYW5zcG9ydCArIFwiLlwiKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgSHR0cENvbm5lY3Rpb24ucHJvdG90eXBlLnN0YXJ0VHJhbnNwb3J0ID0gZnVuY3Rpb24gKHVybCwgdHJhbnNmZXJGb3JtYXQpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMudHJhbnNwb3J0Lm9ucmVjZWl2ZSA9IHRoaXMub25yZWNlaXZlO1xyXG4gICAgICAgIHRoaXMudHJhbnNwb3J0Lm9uY2xvc2UgPSBmdW5jdGlvbiAoZSkgeyByZXR1cm4gX3RoaXMuc3RvcENvbm5lY3Rpb24oZSk7IH07XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNwb3J0LmNvbm5lY3QodXJsLCB0cmFuc2ZlckZvcm1hdCk7XHJcbiAgICB9O1xyXG4gICAgSHR0cENvbm5lY3Rpb24ucHJvdG90eXBlLnJlc29sdmVUcmFuc3BvcnRPckVycm9yID0gZnVuY3Rpb24gKGVuZHBvaW50LCByZXF1ZXN0ZWRUcmFuc3BvcnQsIHJlcXVlc3RlZFRyYW5zZmVyRm9ybWF0KSB7XHJcbiAgICAgICAgdmFyIHRyYW5zcG9ydCA9IElUcmFuc3BvcnRfMS5IdHRwVHJhbnNwb3J0VHlwZVtlbmRwb2ludC50cmFuc3BvcnRdO1xyXG4gICAgICAgIGlmICh0cmFuc3BvcnQgPT09IG51bGwgfHwgdHJhbnNwb3J0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5EZWJ1ZywgXCJTa2lwcGluZyB0cmFuc3BvcnQgJ1wiICsgZW5kcG9pbnQudHJhbnNwb3J0ICsgXCInIGJlY2F1c2UgaXQgaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIGNsaWVudC5cIik7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoXCJTa2lwcGluZyB0cmFuc3BvcnQgJ1wiICsgZW5kcG9pbnQudHJhbnNwb3J0ICsgXCInIGJlY2F1c2UgaXQgaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIGNsaWVudC5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodHJhbnNwb3J0TWF0Y2hlcyhyZXF1ZXN0ZWRUcmFuc3BvcnQsIHRyYW5zcG9ydCkpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0cmFuc2ZlckZvcm1hdHMgPSBlbmRwb2ludC50cmFuc2ZlckZvcm1hdHMubWFwKGZ1bmN0aW9uIChzKSB7IHJldHVybiBJVHJhbnNwb3J0XzEuVHJhbnNmZXJGb3JtYXRbc107IH0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRyYW5zZmVyRm9ybWF0cy5pbmRleE9mKHJlcXVlc3RlZFRyYW5zZmVyRm9ybWF0KSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCh0cmFuc3BvcnQgPT09IElUcmFuc3BvcnRfMS5IdHRwVHJhbnNwb3J0VHlwZS5XZWJTb2NrZXRzICYmICF0aGlzLm9wdGlvbnMuV2ViU29ja2V0KSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAodHJhbnNwb3J0ID09PSBJVHJhbnNwb3J0XzEuSHR0cFRyYW5zcG9ydFR5cGUuU2VydmVyU2VudEV2ZW50cyAmJiAhdGhpcy5vcHRpb25zLkV2ZW50U291cmNlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkRlYnVnLCBcIlNraXBwaW5nIHRyYW5zcG9ydCAnXCIgKyBJVHJhbnNwb3J0XzEuSHR0cFRyYW5zcG9ydFR5cGVbdHJhbnNwb3J0XSArIFwiJyBiZWNhdXNlIGl0IGlzIG5vdCBzdXBwb3J0ZWQgaW4geW91ciBlbnZpcm9ubWVudC4nXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKFwiJ1wiICsgSVRyYW5zcG9ydF8xLkh0dHBUcmFuc3BvcnRUeXBlW3RyYW5zcG9ydF0gKyBcIicgaXMgbm90IHN1cHBvcnRlZCBpbiB5b3VyIGVudmlyb25tZW50LlwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuRGVidWcsIFwiU2VsZWN0aW5nIHRyYW5zcG9ydCAnXCIgKyBJVHJhbnNwb3J0XzEuSHR0cFRyYW5zcG9ydFR5cGVbdHJhbnNwb3J0XSArIFwiJy5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3RUcmFuc3BvcnQodHJhbnNwb3J0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBleDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuRGVidWcsIFwiU2tpcHBpbmcgdHJhbnNwb3J0ICdcIiArIElUcmFuc3BvcnRfMS5IdHRwVHJhbnNwb3J0VHlwZVt0cmFuc3BvcnRdICsgXCInIGJlY2F1c2UgaXQgZG9lcyBub3Qgc3VwcG9ydCB0aGUgcmVxdWVzdGVkIHRyYW5zZmVyIGZvcm1hdCAnXCIgKyBJVHJhbnNwb3J0XzEuVHJhbnNmZXJGb3JtYXRbcmVxdWVzdGVkVHJhbnNmZXJGb3JtYXRdICsgXCInLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKFwiJ1wiICsgSVRyYW5zcG9ydF8xLkh0dHBUcmFuc3BvcnRUeXBlW3RyYW5zcG9ydF0gKyBcIicgZG9lcyBub3Qgc3VwcG9ydCBcIiArIElUcmFuc3BvcnRfMS5UcmFuc2ZlckZvcm1hdFtyZXF1ZXN0ZWRUcmFuc2ZlckZvcm1hdF0gKyBcIi5cIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkRlYnVnLCBcIlNraXBwaW5nIHRyYW5zcG9ydCAnXCIgKyBJVHJhbnNwb3J0XzEuSHR0cFRyYW5zcG9ydFR5cGVbdHJhbnNwb3J0XSArIFwiJyBiZWNhdXNlIGl0IHdhcyBkaXNhYmxlZCBieSB0aGUgY2xpZW50LlwiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoXCInXCIgKyBJVHJhbnNwb3J0XzEuSHR0cFRyYW5zcG9ydFR5cGVbdHJhbnNwb3J0XSArIFwiJyBpcyBkaXNhYmxlZCBieSB0aGUgY2xpZW50LlwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBIdHRwQ29ubmVjdGlvbi5wcm90b3R5cGUuaXNJVHJhbnNwb3J0ID0gZnVuY3Rpb24gKHRyYW5zcG9ydCkge1xyXG4gICAgICAgIHJldHVybiB0cmFuc3BvcnQgJiYgdHlwZW9mICh0cmFuc3BvcnQpID09PSBcIm9iamVjdFwiICYmIFwiY29ubmVjdFwiIGluIHRyYW5zcG9ydDtcclxuICAgIH07XHJcbiAgICBIdHRwQ29ubmVjdGlvbi5wcm90b3R5cGUuc3RvcENvbm5lY3Rpb24gPSBmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuRGVidWcsIFwiSHR0cENvbm5lY3Rpb24uc3RvcENvbm5lY3Rpb24oXCIgKyBlcnJvciArIFwiKSBjYWxsZWQgd2hpbGUgaW4gc3RhdGUgXCIgKyB0aGlzLmNvbm5lY3Rpb25TdGF0ZSArIFwiLlwiKTtcclxuICAgICAgICB0aGlzLnRyYW5zcG9ydCA9IHVuZGVmaW5lZDtcclxuICAgICAgICAvLyBJZiB3ZSBoYXZlIGEgc3RvcEVycm9yLCBpdCB0YWtlcyBwcmVjZWRlbmNlIG92ZXIgdGhlIGVycm9yIGZyb20gdGhlIHRyYW5zcG9ydFxyXG4gICAgICAgIGVycm9yID0gdGhpcy5zdG9wRXJyb3IgfHwgZXJyb3I7XHJcbiAgICAgICAgdGhpcy5zdG9wRXJyb3IgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgaWYgKHRoaXMuY29ubmVjdGlvblN0YXRlID09PSBcIkRpc2Nvbm5lY3RlZFwiIC8qIERpc2Nvbm5lY3RlZCAqLykge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkRlYnVnLCBcIkNhbGwgdG8gSHR0cENvbm5lY3Rpb24uc3RvcENvbm5lY3Rpb24oXCIgKyBlcnJvciArIFwiKSB3YXMgaWdub3JlZCBiZWNhdXNlIHRoZSBjb25uZWN0aW9uIGlzIGFscmVhZHkgaW4gdGhlIGRpc2Nvbm5lY3RlZCBzdGF0ZS5cIik7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuY29ubmVjdGlvblN0YXRlID09PSBcIkNvbm5lY3RpbmdcIiAvKiBDb25uZWN0aW5nICovKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuV2FybmluZywgXCJDYWxsIHRvIEh0dHBDb25uZWN0aW9uLnN0b3BDb25uZWN0aW9uKFwiICsgZXJyb3IgKyBcIikgd2FzIGlnbm9yZWQgYmVjYXVzZSB0aGUgY29ubmVjdGlvbiBpcyBzdGlsbCBpbiB0aGUgY29ubmVjdGluZyBzdGF0ZS5cIik7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkh0dHBDb25uZWN0aW9uLnN0b3BDb25uZWN0aW9uKFwiICsgZXJyb3IgKyBcIikgd2FzIGNhbGxlZCB3aGlsZSB0aGUgY29ubmVjdGlvbiBpcyBzdGlsbCBpbiB0aGUgY29ubmVjdGluZyBzdGF0ZS5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmNvbm5lY3Rpb25TdGF0ZSA9PT0gXCJEaXNjb25uZWN0aW5nXCIgLyogRGlzY29ubmVjdGluZyAqLykge1xyXG4gICAgICAgICAgICAvLyBBIGNhbGwgdG8gc3RvcCgpIGluZHVjZWQgdGhpcyBjYWxsIHRvIHN0b3BDb25uZWN0aW9uIGFuZCBuZWVkcyB0byBiZSBjb21wbGV0ZWQuXHJcbiAgICAgICAgICAgIC8vIEFueSBzdG9wKCkgYXdhaXRlcnMgd2lsbCBiZSBzY2hlZHVsZWQgdG8gY29udGludWUgYWZ0ZXIgdGhlIG9uY2xvc2UgY2FsbGJhY2sgZmlyZXMuXHJcbiAgICAgICAgICAgIHRoaXMuc3RvcFByb21pc2VSZXNvbHZlcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5FcnJvciwgXCJDb25uZWN0aW9uIGRpc2Nvbm5lY3RlZCB3aXRoIGVycm9yICdcIiArIGVycm9yICsgXCInLlwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuSW5mb3JtYXRpb24sIFwiQ29ubmVjdGlvbiBkaXNjb25uZWN0ZWQuXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5zZW5kUXVldWUpIHtcclxuICAgICAgICAgICAgdGhpcy5zZW5kUXVldWUuc3RvcCgpLmNhdGNoKGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5FcnJvciwgXCJUcmFuc3BvcnRTZW5kUXVldWUuc3RvcCgpIHRocmV3IGVycm9yICdcIiArIGUgKyBcIicuXCIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy5zZW5kUXVldWUgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY29ubmVjdGlvbklkID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMuY29ubmVjdGlvblN0YXRlID0gXCJEaXNjb25uZWN0ZWRcIiAvKiBEaXNjb25uZWN0ZWQgKi87XHJcbiAgICAgICAgaWYgKHRoaXMuY29ubmVjdGlvblN0YXJ0ZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uU3RhcnRlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub25jbG9zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25jbG9zZShlcnJvcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuRXJyb3IsIFwiSHR0cENvbm5lY3Rpb24ub25jbG9zZShcIiArIGVycm9yICsgXCIpIHRocmV3IGVycm9yICdcIiArIGUgKyBcIicuXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEh0dHBDb25uZWN0aW9uLnByb3RvdHlwZS5yZXNvbHZlVXJsID0gZnVuY3Rpb24gKHVybCkge1xyXG4gICAgICAgIC8vIHN0YXJ0c1dpdGggaXMgbm90IHN1cHBvcnRlZCBpbiBJRVxyXG4gICAgICAgIGlmICh1cmwubGFzdEluZGV4T2YoXCJodHRwczovL1wiLCAwKSA9PT0gMCB8fCB1cmwubGFzdEluZGV4T2YoXCJodHRwOi8vXCIsIDApID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB1cmw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghVXRpbHNfMS5QbGF0Zm9ybS5pc0Jyb3dzZXIgfHwgIXdpbmRvdy5kb2N1bWVudCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgcmVzb2x2ZSAnXCIgKyB1cmwgKyBcIicuXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBTZXR0aW5nIHRoZSB1cmwgdG8gdGhlIGhyZWYgcHJvcGVyeSBvZiBhbiBhbmNob3IgdGFnIGhhbmRsZXMgbm9ybWFsaXphdGlvblxyXG4gICAgICAgIC8vIGZvciB1cy4gVGhlcmUgYXJlIDMgbWFpbiBjYXNlcy5cclxuICAgICAgICAvLyAxLiBSZWxhdGl2ZSBwYXRoIG5vcm1hbGl6YXRpb24gZS5nIFwiYlwiIC0+IFwiaHR0cDovL2xvY2FsaG9zdDo1MDAwL2EvYlwiXHJcbiAgICAgICAgLy8gMi4gQWJzb2x1dGUgcGF0aCBub3JtYWxpemF0aW9uIGUuZyBcIi9hL2JcIiAtPiBcImh0dHA6Ly9sb2NhbGhvc3Q6NTAwMC9hL2JcIlxyXG4gICAgICAgIC8vIDMuIE5ldHdvcmtwYXRoIHJlZmVyZW5jZSBub3JtYWxpemF0aW9uIGUuZyBcIi8vbG9jYWxob3N0OjUwMDAvYS9iXCIgLT4gXCJodHRwOi8vbG9jYWxob3N0OjUwMDAvYS9iXCJcclxuICAgICAgICB2YXIgYVRhZyA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcclxuICAgICAgICBhVGFnLmhyZWYgPSB1cmw7XHJcbiAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5JbmZvcm1hdGlvbiwgXCJOb3JtYWxpemluZyAnXCIgKyB1cmwgKyBcIicgdG8gJ1wiICsgYVRhZy5ocmVmICsgXCInLlwiKTtcclxuICAgICAgICByZXR1cm4gYVRhZy5ocmVmO1xyXG4gICAgfTtcclxuICAgIEh0dHBDb25uZWN0aW9uLnByb3RvdHlwZS5yZXNvbHZlTmVnb3RpYXRlVXJsID0gZnVuY3Rpb24gKHVybCkge1xyXG4gICAgICAgIHZhciBpbmRleCA9IHVybC5pbmRleE9mKFwiP1wiKTtcclxuICAgICAgICB2YXIgbmVnb3RpYXRlVXJsID0gdXJsLnN1YnN0cmluZygwLCBpbmRleCA9PT0gLTEgPyB1cmwubGVuZ3RoIDogaW5kZXgpO1xyXG4gICAgICAgIGlmIChuZWdvdGlhdGVVcmxbbmVnb3RpYXRlVXJsLmxlbmd0aCAtIDFdICE9PSBcIi9cIikge1xyXG4gICAgICAgICAgICBuZWdvdGlhdGVVcmwgKz0gXCIvXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG5lZ290aWF0ZVVybCArPSBcIm5lZ290aWF0ZVwiO1xyXG4gICAgICAgIG5lZ290aWF0ZVVybCArPSBpbmRleCA9PT0gLTEgPyBcIlwiIDogdXJsLnN1YnN0cmluZyhpbmRleCk7XHJcbiAgICAgICAgaWYgKG5lZ290aWF0ZVVybC5pbmRleE9mKFwibmVnb3RpYXRlVmVyc2lvblwiKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgbmVnb3RpYXRlVXJsICs9IGluZGV4ID09PSAtMSA/IFwiP1wiIDogXCImXCI7XHJcbiAgICAgICAgICAgIG5lZ290aWF0ZVVybCArPSBcIm5lZ290aWF0ZVZlcnNpb249XCIgKyB0aGlzLm5lZ290aWF0ZVZlcnNpb247XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZWdvdGlhdGVVcmw7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEh0dHBDb25uZWN0aW9uO1xyXG59KCkpO1xyXG5leHBvcnRzLkh0dHBDb25uZWN0aW9uID0gSHR0cENvbm5lY3Rpb247XHJcbmZ1bmN0aW9uIHRyYW5zcG9ydE1hdGNoZXMocmVxdWVzdGVkVHJhbnNwb3J0LCBhY3R1YWxUcmFuc3BvcnQpIHtcclxuICAgIHJldHVybiAhcmVxdWVzdGVkVHJhbnNwb3J0IHx8ICgoYWN0dWFsVHJhbnNwb3J0ICYgcmVxdWVzdGVkVHJhbnNwb3J0KSAhPT0gMCk7XHJcbn1cclxuLyoqIEBwcml2YXRlICovXHJcbnZhciBUcmFuc3BvcnRTZW5kUXVldWUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBUcmFuc3BvcnRTZW5kUXVldWUodHJhbnNwb3J0KSB7XHJcbiAgICAgICAgdGhpcy50cmFuc3BvcnQgPSB0cmFuc3BvcnQ7XHJcbiAgICAgICAgdGhpcy5idWZmZXIgPSBbXTtcclxuICAgICAgICB0aGlzLmV4ZWN1dGluZyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5zZW5kQnVmZmVyZWREYXRhID0gbmV3IFByb21pc2VTb3VyY2UoKTtcclxuICAgICAgICB0aGlzLnRyYW5zcG9ydFJlc3VsdCA9IG5ldyBQcm9taXNlU291cmNlKCk7XHJcbiAgICAgICAgdGhpcy5zZW5kTG9vcFByb21pc2UgPSB0aGlzLnNlbmRMb29wKCk7XHJcbiAgICB9XHJcbiAgICBUcmFuc3BvcnRTZW5kUXVldWUucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgIHRoaXMuYnVmZmVyRGF0YShkYXRhKTtcclxuICAgICAgICBpZiAoIXRoaXMudHJhbnNwb3J0UmVzdWx0KSB7XHJcbiAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0UmVzdWx0ID0gbmV3IFByb21pc2VTb3VyY2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNwb3J0UmVzdWx0LnByb21pc2U7XHJcbiAgICB9O1xyXG4gICAgVHJhbnNwb3J0U2VuZFF1ZXVlLnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuZXhlY3V0aW5nID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5zZW5kQnVmZmVyZWREYXRhLnJlc29sdmUoKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZW5kTG9vcFByb21pc2U7XHJcbiAgICB9O1xyXG4gICAgVHJhbnNwb3J0U2VuZFF1ZXVlLnByb3RvdHlwZS5idWZmZXJEYXRhID0gZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICBpZiAodGhpcy5idWZmZXIubGVuZ3RoICYmIHR5cGVvZiAodGhpcy5idWZmZXJbMF0pICE9PSB0eXBlb2YgKGRhdGEpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkV4cGVjdGVkIGRhdGEgdG8gYmUgb2YgdHlwZSBcIiArIHR5cGVvZiAodGhpcy5idWZmZXIpICsgXCIgYnV0IHdhcyBvZiB0eXBlIFwiICsgdHlwZW9mIChkYXRhKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYnVmZmVyLnB1c2goZGF0YSk7XHJcbiAgICAgICAgdGhpcy5zZW5kQnVmZmVyZWREYXRhLnJlc29sdmUoKTtcclxuICAgIH07XHJcbiAgICBUcmFuc3BvcnRTZW5kUXVldWUucHJvdG90eXBlLnNlbmRMb29wID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHRyYW5zcG9ydFJlc3VsdCwgZGF0YSwgZXJyb3JfMTtcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0cnVlKSByZXR1cm4gWzMgLypicmVhayovLCA2XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5zZW5kQnVmZmVyZWREYXRhLnByb21pc2VdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZXhlY3V0aW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy50cmFuc3BvcnRSZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYW5zcG9ydFJlc3VsdC5yZWplY3QoXCJDb25uZWN0aW9uIHN0b3BwZWQuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZW5kQnVmZmVyZWREYXRhID0gbmV3IFByb21pc2VTb3VyY2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNwb3J0UmVzdWx0ID0gdGhpcy50cmFuc3BvcnRSZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0UmVzdWx0ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gdHlwZW9mICh0aGlzLmJ1ZmZlclswXSkgPT09IFwic3RyaW5nXCIgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5idWZmZXIuam9pbihcIlwiKSA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBUcmFuc3BvcnRTZW5kUXVldWUuY29uY2F0QnVmZmVycyh0aGlzLmJ1ZmZlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVyLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMjtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnRyeXMucHVzaChbMiwgNCwgLCA1XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMudHJhbnNwb3J0LnNlbmQoZGF0YSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc3BvcnRSZXN1bHQucmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA1XTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yXzEgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zcG9ydFJlc3VsdC5yZWplY3QoZXJyb3JfMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDVdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTogcmV0dXJuIFszIC8qYnJlYWsqLywgMF07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OiByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFRyYW5zcG9ydFNlbmRRdWV1ZS5jb25jYXRCdWZmZXJzID0gZnVuY3Rpb24gKGFycmF5QnVmZmVycykge1xyXG4gICAgICAgIHZhciB0b3RhbExlbmd0aCA9IGFycmF5QnVmZmVycy5tYXAoZnVuY3Rpb24gKGIpIHsgcmV0dXJuIGIuYnl0ZUxlbmd0aDsgfSkucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhICsgYjsgfSk7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KHRvdGFsTGVuZ3RoKTtcclxuICAgICAgICB2YXIgb2Zmc2V0ID0gMDtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGFycmF5QnVmZmVyc18xID0gYXJyYXlCdWZmZXJzOyBfaSA8IGFycmF5QnVmZmVyc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgaXRlbSA9IGFycmF5QnVmZmVyc18xW19pXTtcclxuICAgICAgICAgICAgcmVzdWx0LnNldChuZXcgVWludDhBcnJheShpdGVtKSwgb2Zmc2V0KTtcclxuICAgICAgICAgICAgb2Zmc2V0ICs9IGl0ZW0uYnl0ZUxlbmd0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdC5idWZmZXI7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFRyYW5zcG9ydFNlbmRRdWV1ZTtcclxufSgpKTtcclxuZXhwb3J0cy5UcmFuc3BvcnRTZW5kUXVldWUgPSBUcmFuc3BvcnRTZW5kUXVldWU7XHJcbnZhciBQcm9taXNlU291cmNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUHJvbWlzZVNvdXJjZSgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgICAgICByZXR1cm4gX2EgPSBbcmVzb2x2ZSwgcmVqZWN0XSwgX3RoaXMucmVzb2x2ZXIgPSBfYVswXSwgX3RoaXMucmVqZWN0ZXIgPSBfYVsxXSwgX2E7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBQcm9taXNlU291cmNlLnByb3RvdHlwZS5yZXNvbHZlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMucmVzb2x2ZXIoKTtcclxuICAgIH07XHJcbiAgICBQcm9taXNlU291cmNlLnByb3RvdHlwZS5yZWplY3QgPSBmdW5jdGlvbiAocmVhc29uKSB7XHJcbiAgICAgICAgdGhpcy5yZWplY3RlcihyZWFzb24pO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBQcm9taXNlU291cmNlO1xyXG59KCkpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1IdHRwQ29ubmVjdGlvbi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuLy8gQ29weXJpZ2h0IChjKSAuTkVUIEZvdW5kYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUocmVzdWx0LnZhbHVlKTsgfSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59O1xyXG52YXIgX19nZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIEhhbmRzaGFrZVByb3RvY29sXzEgPSByZXF1aXJlKFwiLi9IYW5kc2hha2VQcm90b2NvbFwiKTtcclxudmFyIElIdWJQcm90b2NvbF8xID0gcmVxdWlyZShcIi4vSUh1YlByb3RvY29sXCIpO1xyXG52YXIgSUxvZ2dlcl8xID0gcmVxdWlyZShcIi4vSUxvZ2dlclwiKTtcclxudmFyIFN1YmplY3RfMSA9IHJlcXVpcmUoXCIuL1N1YmplY3RcIik7XHJcbnZhciBVdGlsc18xID0gcmVxdWlyZShcIi4vVXRpbHNcIik7XHJcbnZhciBERUZBVUxUX1RJTUVPVVRfSU5fTVMgPSAzMCAqIDEwMDA7XHJcbnZhciBERUZBVUxUX1BJTkdfSU5URVJWQUxfSU5fTVMgPSAxNSAqIDEwMDA7XHJcbi8qKiBEZXNjcmliZXMgdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIHtAbGluayBIdWJDb25uZWN0aW9ufSB0byB0aGUgc2VydmVyLiAqL1xyXG52YXIgSHViQ29ubmVjdGlvblN0YXRlO1xyXG4oZnVuY3Rpb24gKEh1YkNvbm5lY3Rpb25TdGF0ZSkge1xyXG4gICAgLyoqIFRoZSBodWIgY29ubmVjdGlvbiBpcyBkaXNjb25uZWN0ZWQuICovXHJcbiAgICBIdWJDb25uZWN0aW9uU3RhdGVbXCJEaXNjb25uZWN0ZWRcIl0gPSBcIkRpc2Nvbm5lY3RlZFwiO1xyXG4gICAgLyoqIFRoZSBodWIgY29ubmVjdGlvbiBpcyBjb25uZWN0aW5nLiAqL1xyXG4gICAgSHViQ29ubmVjdGlvblN0YXRlW1wiQ29ubmVjdGluZ1wiXSA9IFwiQ29ubmVjdGluZ1wiO1xyXG4gICAgLyoqIFRoZSBodWIgY29ubmVjdGlvbiBpcyBjb25uZWN0ZWQuICovXHJcbiAgICBIdWJDb25uZWN0aW9uU3RhdGVbXCJDb25uZWN0ZWRcIl0gPSBcIkNvbm5lY3RlZFwiO1xyXG4gICAgLyoqIFRoZSBodWIgY29ubmVjdGlvbiBpcyBkaXNjb25uZWN0aW5nLiAqL1xyXG4gICAgSHViQ29ubmVjdGlvblN0YXRlW1wiRGlzY29ubmVjdGluZ1wiXSA9IFwiRGlzY29ubmVjdGluZ1wiO1xyXG4gICAgLyoqIFRoZSBodWIgY29ubmVjdGlvbiBpcyByZWNvbm5lY3RpbmcuICovXHJcbiAgICBIdWJDb25uZWN0aW9uU3RhdGVbXCJSZWNvbm5lY3RpbmdcIl0gPSBcIlJlY29ubmVjdGluZ1wiO1xyXG59KShIdWJDb25uZWN0aW9uU3RhdGUgPSBleHBvcnRzLkh1YkNvbm5lY3Rpb25TdGF0ZSB8fCAoZXhwb3J0cy5IdWJDb25uZWN0aW9uU3RhdGUgPSB7fSkpO1xyXG4vKiogUmVwcmVzZW50cyBhIGNvbm5lY3Rpb24gdG8gYSBTaWduYWxSIEh1Yi4gKi9cclxudmFyIEh1YkNvbm5lY3Rpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBIdWJDb25uZWN0aW9uKGNvbm5lY3Rpb24sIGxvZ2dlciwgcHJvdG9jb2wsIHJlY29ubmVjdFBvbGljeSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgVXRpbHNfMS5BcmcuaXNSZXF1aXJlZChjb25uZWN0aW9uLCBcImNvbm5lY3Rpb25cIik7XHJcbiAgICAgICAgVXRpbHNfMS5BcmcuaXNSZXF1aXJlZChsb2dnZXIsIFwibG9nZ2VyXCIpO1xyXG4gICAgICAgIFV0aWxzXzEuQXJnLmlzUmVxdWlyZWQocHJvdG9jb2wsIFwicHJvdG9jb2xcIik7XHJcbiAgICAgICAgdGhpcy5zZXJ2ZXJUaW1lb3V0SW5NaWxsaXNlY29uZHMgPSBERUZBVUxUX1RJTUVPVVRfSU5fTVM7XHJcbiAgICAgICAgdGhpcy5rZWVwQWxpdmVJbnRlcnZhbEluTWlsbGlzZWNvbmRzID0gREVGQVVMVF9QSU5HX0lOVEVSVkFMX0lOX01TO1xyXG4gICAgICAgIHRoaXMubG9nZ2VyID0gbG9nZ2VyO1xyXG4gICAgICAgIHRoaXMucHJvdG9jb2wgPSBwcm90b2NvbDtcclxuICAgICAgICB0aGlzLmNvbm5lY3Rpb24gPSBjb25uZWN0aW9uO1xyXG4gICAgICAgIHRoaXMucmVjb25uZWN0UG9saWN5ID0gcmVjb25uZWN0UG9saWN5O1xyXG4gICAgICAgIHRoaXMuaGFuZHNoYWtlUHJvdG9jb2wgPSBuZXcgSGFuZHNoYWtlUHJvdG9jb2xfMS5IYW5kc2hha2VQcm90b2NvbCgpO1xyXG4gICAgICAgIHRoaXMuY29ubmVjdGlvbi5vbnJlY2VpdmUgPSBmdW5jdGlvbiAoZGF0YSkgeyByZXR1cm4gX3RoaXMucHJvY2Vzc0luY29taW5nRGF0YShkYXRhKTsgfTtcclxuICAgICAgICB0aGlzLmNvbm5lY3Rpb24ub25jbG9zZSA9IGZ1bmN0aW9uIChlcnJvcikgeyByZXR1cm4gX3RoaXMuY29ubmVjdGlvbkNsb3NlZChlcnJvcik7IH07XHJcbiAgICAgICAgdGhpcy5jYWxsYmFja3MgPSB7fTtcclxuICAgICAgICB0aGlzLm1ldGhvZHMgPSB7fTtcclxuICAgICAgICB0aGlzLmNsb3NlZENhbGxiYWNrcyA9IFtdO1xyXG4gICAgICAgIHRoaXMucmVjb25uZWN0aW5nQ2FsbGJhY2tzID0gW107XHJcbiAgICAgICAgdGhpcy5yZWNvbm5lY3RlZENhbGxiYWNrcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuaW52b2NhdGlvbklkID0gMDtcclxuICAgICAgICB0aGlzLnJlY2VpdmVkSGFuZHNoYWtlUmVzcG9uc2UgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmNvbm5lY3Rpb25TdGF0ZSA9IEh1YkNvbm5lY3Rpb25TdGF0ZS5EaXNjb25uZWN0ZWQ7XHJcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uU3RhcnRlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuY2FjaGVkUGluZ01lc3NhZ2UgPSB0aGlzLnByb3RvY29sLndyaXRlTWVzc2FnZSh7IHR5cGU6IElIdWJQcm90b2NvbF8xLk1lc3NhZ2VUeXBlLlBpbmcgfSk7XHJcbiAgICB9XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICAvLyBVc2luZyBhIHB1YmxpYyBzdGF0aWMgZmFjdG9yeSBtZXRob2QgbWVhbnMgd2UgY2FuIGhhdmUgYSBwcml2YXRlIGNvbnN0cnVjdG9yIGFuZCBhbiBfaW50ZXJuYWxfXHJcbiAgICAvLyBjcmVhdGUgbWV0aG9kIHRoYXQgY2FuIGJlIHVzZWQgYnkgSHViQ29ubmVjdGlvbkJ1aWxkZXIuIEFuIFwiaW50ZXJuYWxcIiBjb25zdHJ1Y3RvciB3b3VsZCBqdXN0XHJcbiAgICAvLyBiZSBzdHJpcHBlZCBhd2F5IGFuZCB0aGUgJy5kLnRzJyBmaWxlIHdvdWxkIGhhdmUgbm8gY29uc3RydWN0b3IsIHdoaWNoIGlzIGludGVycHJldGVkIGFzIGFcclxuICAgIC8vIHB1YmxpYyBwYXJhbWV0ZXItbGVzcyBjb25zdHJ1Y3Rvci5cclxuICAgIEh1YkNvbm5lY3Rpb24uY3JlYXRlID0gZnVuY3Rpb24gKGNvbm5lY3Rpb24sIGxvZ2dlciwgcHJvdG9jb2wsIHJlY29ubmVjdFBvbGljeSkge1xyXG4gICAgICAgIHJldHVybiBuZXcgSHViQ29ubmVjdGlvbihjb25uZWN0aW9uLCBsb2dnZXIsIHByb3RvY29sLCByZWNvbm5lY3RQb2xpY3kpO1xyXG4gICAgfTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShIdWJDb25uZWN0aW9uLnByb3RvdHlwZSwgXCJzdGF0ZVwiLCB7XHJcbiAgICAgICAgLyoqIEluZGljYXRlcyB0aGUgc3RhdGUgb2YgdGhlIHtAbGluayBIdWJDb25uZWN0aW9ufSB0byB0aGUgc2VydmVyLiAqL1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25uZWN0aW9uU3RhdGU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoSHViQ29ubmVjdGlvbi5wcm90b3R5cGUsIFwiY29ubmVjdGlvbklkXCIsIHtcclxuICAgICAgICAvKiogUmVwcmVzZW50cyB0aGUgY29ubmVjdGlvbiBpZCBvZiB0aGUge0BsaW5rIEh1YkNvbm5lY3Rpb259IG9uIHRoZSBzZXJ2ZXIuIFRoZSBjb25uZWN0aW9uIGlkIHdpbGwgYmUgbnVsbCB3aGVuIHRoZSBjb25uZWN0aW9uIGlzIGVpdGhlclxyXG4gICAgICAgICAqICBpbiB0aGUgZGlzY29ubmVjdGVkIHN0YXRlIG9yIGlmIHRoZSBuZWdvdGlhdGlvbiBzdGVwIHdhcyBza2lwcGVkLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25uZWN0aW9uID8gKHRoaXMuY29ubmVjdGlvbi5jb25uZWN0aW9uSWQgfHwgbnVsbCkgOiBudWxsO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEh1YkNvbm5lY3Rpb24ucHJvdG90eXBlLCBcImJhc2VVcmxcIiwge1xyXG4gICAgICAgIC8qKiBJbmRpY2F0ZXMgdGhlIHVybCBvZiB0aGUge0BsaW5rIEh1YkNvbm5lY3Rpb259IHRvIHRoZSBzZXJ2ZXIuICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbm5lY3Rpb24uYmFzZVVybCB8fCBcIlwiO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogU2V0cyBhIG5ldyB1cmwgZm9yIHRoZSBIdWJDb25uZWN0aW9uLiBOb3RlIHRoYXQgdGhlIHVybCBjYW4gb25seSBiZSBjaGFuZ2VkIHdoZW4gdGhlIGNvbm5lY3Rpb24gaXMgaW4gZWl0aGVyIHRoZSBEaXNjb25uZWN0ZWQgb3JcclxuICAgICAgICAgKiBSZWNvbm5lY3Rpbmcgc3RhdGVzLlxyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIHVybCB0byBjb25uZWN0IHRvLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHVybCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5jb25uZWN0aW9uU3RhdGUgIT09IEh1YkNvbm5lY3Rpb25TdGF0ZS5EaXNjb25uZWN0ZWQgJiYgdGhpcy5jb25uZWN0aW9uU3RhdGUgIT09IEh1YkNvbm5lY3Rpb25TdGF0ZS5SZWNvbm5lY3RpbmcpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBIdWJDb25uZWN0aW9uIG11c3QgYmUgaW4gdGhlIERpc2Nvbm5lY3RlZCBvciBSZWNvbm5lY3Rpbmcgc3RhdGUgdG8gY2hhbmdlIHRoZSB1cmwuXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghdXJsKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgSHViQ29ubmVjdGlvbiB1cmwgbXVzdCBiZSBhIHZhbGlkIHVybC5cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uLmJhc2VVcmwgPSB1cmw7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICAvKiogU3RhcnRzIHRoZSBjb25uZWN0aW9uLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fSBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSBjb25uZWN0aW9uIGhhcyBiZWVuIHN1Y2Nlc3NmdWxseSBlc3RhYmxpc2hlZCwgb3IgcmVqZWN0cyB3aXRoIGFuIGVycm9yLlxyXG4gICAgICovXHJcbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLnN0YXJ0UHJvbWlzZSA9IHRoaXMuc3RhcnRXaXRoU3RhdGVUcmFuc2l0aW9ucygpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnN0YXJ0UHJvbWlzZTtcclxuICAgIH07XHJcbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5zdGFydFdpdGhTdGF0ZVRyYW5zaXRpb25zID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGVfMTtcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY29ubmVjdGlvblN0YXRlICE9PSBIdWJDb25uZWN0aW9uU3RhdGUuRGlzY29ubmVjdGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiQ2Fubm90IHN0YXJ0IGEgSHViQ29ubmVjdGlvbiB0aGF0IGlzIG5vdCBpbiB0aGUgJ0Rpc2Nvbm5lY3RlZCcgc3RhdGUuXCIpKV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uU3RhdGUgPSBIdWJDb25uZWN0aW9uU3RhdGUuQ29ubmVjdGluZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5EZWJ1ZywgXCJTdGFydGluZyBIdWJDb25uZWN0aW9uLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EudHJ5cy5wdXNoKFsxLCAzLCAsIDRdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5zdGFydEludGVybmFsKCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb25TdGF0ZSA9IEh1YkNvbm5lY3Rpb25TdGF0ZS5Db25uZWN0ZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvblN0YXJ0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkRlYnVnLCBcIkh1YkNvbm5lY3Rpb24gY29ubmVjdGVkIHN1Y2Nlc3NmdWxseS5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDRdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZV8xID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb25TdGF0ZSA9IEh1YkNvbm5lY3Rpb25TdGF0ZS5EaXNjb25uZWN0ZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuRGVidWcsIFwiSHViQ29ubmVjdGlvbiBmYWlsZWQgdG8gc3RhcnQgc3VjY2Vzc2Z1bGx5IGJlY2F1c2Ugb2YgZXJyb3IgJ1wiICsgZV8xICsgXCInLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIFByb21pc2UucmVqZWN0KGVfMSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5zdGFydEludGVybmFsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGhhbmRzaGFrZVByb21pc2UsIGhhbmRzaGFrZVJlcXVlc3QsIGVfMjtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9wRHVyaW5nU3RhcnRFcnJvciA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWNlaXZlZEhhbmRzaGFrZVJlc3BvbnNlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRzaGFrZVByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5oYW5kc2hha2VSZXNvbHZlciA9IHJlc29sdmU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5oYW5kc2hha2VSZWplY3RlciA9IHJlamVjdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuY29ubmVjdGlvbi5zdGFydCh0aGlzLnByb3RvY29sLnRyYW5zZmVyRm9ybWF0KV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMjtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnRyeXMucHVzaChbMiwgNSwgLCA3XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRzaGFrZVJlcXVlc3QgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm90b2NvbDogdGhpcy5wcm90b2NvbC5uYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVyc2lvbjogdGhpcy5wcm90b2NvbC52ZXJzaW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkRlYnVnLCBcIlNlbmRpbmcgaGFuZHNoYWtlIHJlcXVlc3QuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnNlbmRNZXNzYWdlKHRoaXMuaGFuZHNoYWtlUHJvdG9jb2wud3JpdGVIYW5kc2hha2VSZXF1ZXN0KGhhbmRzaGFrZVJlcXVlc3QpKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuSW5mb3JtYXRpb24sIFwiVXNpbmcgSHViUHJvdG9jb2wgJ1wiICsgdGhpcy5wcm90b2NvbC5uYW1lICsgXCInLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGVmZW5zaXZlbHkgY2xlYW51cCB0aW1lb3V0IGluIGNhc2Ugd2UgcmVjZWl2ZSBhIG1lc3NhZ2UgZnJvbSB0aGUgc2VydmVyIGJlZm9yZSB3ZSBmaW5pc2ggc3RhcnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhbnVwVGltZW91dCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc2V0VGltZW91dFBlcmlvZCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc2V0S2VlcEFsaXZlSW50ZXJ2YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgaGFuZHNoYWtlUHJvbWlzZV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEl0J3MgaW1wb3J0YW50IHRvIGNoZWNrIHRoZSBzdG9wRHVyaW5nU3RhcnRFcnJvciBpbnN0ZWFkIG9mIGp1c3QgcmVseWluZyBvbiB0aGUgaGFuZHNoYWtlUHJvbWlzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBiZWluZyByZWplY3RlZCBvbiBjbG9zZSwgYmVjYXVzZSB0aGlzIGNvbnRpbnVhdGlvbiBjYW4gcnVuIGFmdGVyIGJvdGggdGhlIGhhbmRzaGFrZSBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFuZCB0aGUgY29ubmVjdGlvbiB3YXMgY2xvc2VkLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zdG9wRHVyaW5nU3RhcnRFcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSXQncyBpbXBvcnRhbnQgdG8gdGhyb3cgaW5zdGVhZCBvZiByZXR1cm5pbmcgYSByZWplY3RlZCBwcm9taXNlLCBiZWNhdXNlIHdlIGRvbid0IHdhbnQgdG8gYWxsb3cgYW55IHN0YXRlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0cmFuc2l0aW9ucyB0byBvY2N1ciBiZXR3ZWVuIG5vdyBhbmQgdGhlIGNhbGxpbmcgY29kZSBvYnNlcnZpbmcgdGhlIGV4Y2VwdGlvbnMuIFJldHVybmluZyBhIHJlamVjdGVkIHByb21pc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdpbGwgY2F1c2UgdGhlIGNhbGxpbmcgY29udGludWF0aW9uIHRvIGdldCBzY2hlZHVsZWQgdG8gcnVuIGxhdGVyLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgdGhpcy5zdG9wRHVyaW5nU3RhcnRFcnJvcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA3XTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVfMiA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5EZWJ1ZywgXCJIdWIgaGFuZHNoYWtlIGZhaWxlZCB3aXRoIGVycm9yICdcIiArIGVfMiArIFwiJyBkdXJpbmcgc3RhcnQoKS4gU3RvcHBpbmcgSHViQ29ubmVjdGlvbi5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYW51cFRpbWVvdXQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhbnVwUGluZ1RpbWVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEh0dHBDb25uZWN0aW9uLnN0b3AoKSBzaG91bGQgbm90IGNvbXBsZXRlIHVudGlsIGFmdGVyIHRoZSBvbmNsb3NlIGNhbGxiYWNrIGlzIGludm9rZWQuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgd2lsbCB0cmFuc2l0aW9uIHRoZSBIdWJDb25uZWN0aW9uIHRvIHRoZSBkaXNjb25uZWN0ZWQgc3RhdGUgYmVmb3JlIEh0dHBDb25uZWN0aW9uLnN0b3AoKSBjb21wbGV0ZXMuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuY29ubmVjdGlvbi5zdG9wKGVfMildO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSHR0cENvbm5lY3Rpb24uc3RvcCgpIHNob3VsZCBub3QgY29tcGxldGUgdW50aWwgYWZ0ZXIgdGhlIG9uY2xvc2UgY2FsbGJhY2sgaXMgaW52b2tlZC5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyB3aWxsIHRyYW5zaXRpb24gdGhlIEh1YkNvbm5lY3Rpb24gdG8gdGhlIGRpc2Nvbm5lY3RlZCBzdGF0ZSBiZWZvcmUgSHR0cENvbm5lY3Rpb24uc3RvcCgpIGNvbXBsZXRlcy5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBlXzI7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA3OiByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKiBTdG9wcyB0aGUgY29ubmVjdGlvbi5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn0gQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgY29ubmVjdGlvbiBoYXMgYmVlbiBzdWNjZXNzZnVsbHkgdGVybWluYXRlZCwgb3IgcmVqZWN0cyB3aXRoIGFuIGVycm9yLlxyXG4gICAgICovXHJcbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHN0YXJ0UHJvbWlzZSwgZV8zO1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydFByb21pc2UgPSB0aGlzLnN0YXJ0UHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9wUHJvbWlzZSA9IHRoaXMuc3RvcEludGVybmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuc3RvcFByb21pc2VdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDI7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS50cnlzLnB1c2goWzIsIDQsICwgNV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBd2FpdGluZyB1bmRlZmluZWQgY29udGludWVzIGltbWVkaWF0ZWx5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHN0YXJ0UHJvbWlzZV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBd2FpdGluZyB1bmRlZmluZWQgY29udGludWVzIGltbWVkaWF0ZWx5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlXzMgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDVdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5zdG9wSW50ZXJuYWwgPSBmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICBpZiAodGhpcy5jb25uZWN0aW9uU3RhdGUgPT09IEh1YkNvbm5lY3Rpb25TdGF0ZS5EaXNjb25uZWN0ZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5EZWJ1ZywgXCJDYWxsIHRvIEh1YkNvbm5lY3Rpb24uc3RvcChcIiArIGVycm9yICsgXCIpIGlnbm9yZWQgYmVjYXVzZSBpdCBpcyBhbHJlYWR5IGluIHRoZSBkaXNjb25uZWN0ZWQgc3RhdGUuXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmNvbm5lY3Rpb25TdGF0ZSA9PT0gSHViQ29ubmVjdGlvblN0YXRlLkRpc2Nvbm5lY3RpbmcpIHtcclxuICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5EZWJ1ZywgXCJDYWxsIHRvIEh0dHBDb25uZWN0aW9uLnN0b3AoXCIgKyBlcnJvciArIFwiKSBpZ25vcmVkIGJlY2F1c2UgdGhlIGNvbm5lY3Rpb24gaXMgYWxyZWFkeSBpbiB0aGUgZGlzY29ubmVjdGluZyBzdGF0ZS5cIik7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0b3BQcm9taXNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNvbm5lY3Rpb25TdGF0ZSA9IEh1YkNvbm5lY3Rpb25TdGF0ZS5EaXNjb25uZWN0aW5nO1xyXG4gICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuRGVidWcsIFwiU3RvcHBpbmcgSHViQ29ubmVjdGlvbi5cIik7XHJcbiAgICAgICAgaWYgKHRoaXMucmVjb25uZWN0RGVsYXlIYW5kbGUpIHtcclxuICAgICAgICAgICAgLy8gV2UncmUgaW4gYSByZWNvbm5lY3QgZGVsYXkgd2hpY2ggbWVhbnMgdGhlIHVuZGVybHlpbmcgY29ubmVjdGlvbiBpcyBjdXJyZW50bHkgYWxyZWFkeSBzdG9wcGVkLlxyXG4gICAgICAgICAgICAvLyBKdXN0IGNsZWFyIHRoZSBoYW5kbGUgdG8gc3RvcCB0aGUgcmVjb25uZWN0IGxvb3AgKHdoaWNoIG5vIG9uZSBpcyB3YWl0aW5nIG9uIHRoYW5rZnVsbHkpIGFuZFxyXG4gICAgICAgICAgICAvLyBmaXJlIHRoZSBvbmNsb3NlIGNhbGxiYWNrcy5cclxuICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5EZWJ1ZywgXCJDb25uZWN0aW9uIHN0b3BwZWQgZHVyaW5nIHJlY29ubmVjdCBkZWxheS4gRG9uZSByZWNvbm5lY3RpbmcuXCIpO1xyXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5yZWNvbm5lY3REZWxheUhhbmRsZSk7XHJcbiAgICAgICAgICAgIHRoaXMucmVjb25uZWN0RGVsYXlIYW5kbGUgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIHRoaXMuY29tcGxldGVDbG9zZSgpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY2xlYW51cFRpbWVvdXQoKTtcclxuICAgICAgICB0aGlzLmNsZWFudXBQaW5nVGltZXIoKTtcclxuICAgICAgICB0aGlzLnN0b3BEdXJpbmdTdGFydEVycm9yID0gZXJyb3IgfHwgbmV3IEVycm9yKFwiVGhlIGNvbm5lY3Rpb24gd2FzIHN0b3BwZWQgYmVmb3JlIHRoZSBodWIgaGFuZHNoYWtlIGNvdWxkIGNvbXBsZXRlLlwiKTtcclxuICAgICAgICAvLyBIdHRwQ29ubmVjdGlvbi5zdG9wKCkgc2hvdWxkIG5vdCBjb21wbGV0ZSB1bnRpbCBhZnRlciBlaXRoZXIgSHR0cENvbm5lY3Rpb24uc3RhcnQoKSBmYWlsc1xyXG4gICAgICAgIC8vIG9yIHRoZSBvbmNsb3NlIGNhbGxiYWNrIGlzIGludm9rZWQuIFRoZSBvbmNsb3NlIGNhbGxiYWNrIHdpbGwgdHJhbnNpdGlvbiB0aGUgSHViQ29ubmVjdGlvblxyXG4gICAgICAgIC8vIHRvIHRoZSBkaXNjb25uZWN0ZWQgc3RhdGUgaWYgbmVlZCBiZSBiZWZvcmUgSHR0cENvbm5lY3Rpb24uc3RvcCgpIGNvbXBsZXRlcy5cclxuICAgICAgICByZXR1cm4gdGhpcy5jb25uZWN0aW9uLnN0b3AoZXJyb3IpO1xyXG4gICAgfTtcclxuICAgIC8qKiBJbnZva2VzIGEgc3RyZWFtaW5nIGh1YiBtZXRob2Qgb24gdGhlIHNlcnZlciB1c2luZyB0aGUgc3BlY2lmaWVkIG5hbWUgYW5kIGFyZ3VtZW50cy5cclxuICAgICAqXHJcbiAgICAgKiBAdHlwZXBhcmFtIFQgVGhlIHR5cGUgb2YgdGhlIGl0ZW1zIHJldHVybmVkIGJ5IHRoZSBzZXJ2ZXIuXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kTmFtZSBUaGUgbmFtZSBvZiB0aGUgc2VydmVyIG1ldGhvZCB0byBpbnZva2UuXHJcbiAgICAgKiBAcGFyYW0ge2FueVtdfSBhcmdzIFRoZSBhcmd1bWVudHMgdXNlZCB0byBpbnZva2UgdGhlIHNlcnZlciBtZXRob2QuXHJcbiAgICAgKiBAcmV0dXJucyB7SVN0cmVhbVJlc3VsdDxUPn0gQW4gb2JqZWN0IHRoYXQgeWllbGRzIHJlc3VsdHMgZnJvbSB0aGUgc2VydmVyIGFzIHRoZXkgYXJlIHJlY2VpdmVkLlxyXG4gICAgICovXHJcbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5zdHJlYW0gPSBmdW5jdGlvbiAobWV0aG9kTmFtZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICBhcmdzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgX2EgPSB0aGlzLnJlcGxhY2VTdHJlYW1pbmdQYXJhbXMoYXJncyksIHN0cmVhbXMgPSBfYVswXSwgc3RyZWFtSWRzID0gX2FbMV07XHJcbiAgICAgICAgdmFyIGludm9jYXRpb25EZXNjcmlwdG9yID0gdGhpcy5jcmVhdGVTdHJlYW1JbnZvY2F0aW9uKG1ldGhvZE5hbWUsIGFyZ3MsIHN0cmVhbUlkcyk7XHJcbiAgICAgICAgdmFyIHByb21pc2VRdWV1ZTtcclxuICAgICAgICB2YXIgc3ViamVjdCA9IG5ldyBTdWJqZWN0XzEuU3ViamVjdCgpO1xyXG4gICAgICAgIHN1YmplY3QuY2FuY2VsQ2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBjYW5jZWxJbnZvY2F0aW9uID0gX3RoaXMuY3JlYXRlQ2FuY2VsSW52b2NhdGlvbihpbnZvY2F0aW9uRGVzY3JpcHRvci5pbnZvY2F0aW9uSWQpO1xyXG4gICAgICAgICAgICBkZWxldGUgX3RoaXMuY2FsbGJhY2tzW2ludm9jYXRpb25EZXNjcmlwdG9yLmludm9jYXRpb25JZF07XHJcbiAgICAgICAgICAgIHJldHVybiBwcm9taXNlUXVldWUudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuc2VuZFdpdGhQcm90b2NvbChjYW5jZWxJbnZvY2F0aW9uKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmNhbGxiYWNrc1tpbnZvY2F0aW9uRGVzY3JpcHRvci5pbnZvY2F0aW9uSWRdID0gZnVuY3Rpb24gKGludm9jYXRpb25FdmVudCwgZXJyb3IpIHtcclxuICAgICAgICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBzdWJqZWN0LmVycm9yKGVycm9yKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChpbnZvY2F0aW9uRXZlbnQpIHtcclxuICAgICAgICAgICAgICAgIC8vIGludm9jYXRpb25FdmVudCB3aWxsIG5vdCBiZSBudWxsIHdoZW4gYW4gZXJyb3IgaXMgbm90IHBhc3NlZCB0byB0aGUgY2FsbGJhY2tcclxuICAgICAgICAgICAgICAgIGlmIChpbnZvY2F0aW9uRXZlbnQudHlwZSA9PT0gSUh1YlByb3RvY29sXzEuTWVzc2FnZVR5cGUuQ29tcGxldGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnZvY2F0aW9uRXZlbnQuZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3ViamVjdC5lcnJvcihuZXcgRXJyb3IoaW52b2NhdGlvbkV2ZW50LmVycm9yKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJqZWN0LmNvbXBsZXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3ViamVjdC5uZXh0KChpbnZvY2F0aW9uRXZlbnQuaXRlbSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBwcm9taXNlUXVldWUgPSB0aGlzLnNlbmRXaXRoUHJvdG9jb2woaW52b2NhdGlvbkRlc2NyaXB0b3IpXHJcbiAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBzdWJqZWN0LmVycm9yKGUpO1xyXG4gICAgICAgICAgICBkZWxldGUgX3RoaXMuY2FsbGJhY2tzW2ludm9jYXRpb25EZXNjcmlwdG9yLmludm9jYXRpb25JZF07XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5sYXVuY2hTdHJlYW1zKHN0cmVhbXMsIHByb21pc2VRdWV1ZSk7XHJcbiAgICAgICAgcmV0dXJuIHN1YmplY3Q7XHJcbiAgICB9O1xyXG4gICAgSHViQ29ubmVjdGlvbi5wcm90b3R5cGUuc2VuZE1lc3NhZ2UgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xyXG4gICAgICAgIHRoaXMucmVzZXRLZWVwQWxpdmVJbnRlcnZhbCgpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbm5lY3Rpb24uc2VuZChtZXNzYWdlKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFNlbmRzIGEganMgb2JqZWN0IHRvIHRoZSBzZXJ2ZXIuXHJcbiAgICAgKiBAcGFyYW0gbWVzc2FnZSBUaGUganMgb2JqZWN0IHRvIHNlcmlhbGl6ZSBhbmQgc2VuZC5cclxuICAgICAqL1xyXG4gICAgSHViQ29ubmVjdGlvbi5wcm90b3R5cGUuc2VuZFdpdGhQcm90b2NvbCA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZE1lc3NhZ2UodGhpcy5wcm90b2NvbC53cml0ZU1lc3NhZ2UobWVzc2FnZSkpO1xyXG4gICAgfTtcclxuICAgIC8qKiBJbnZva2VzIGEgaHViIG1ldGhvZCBvbiB0aGUgc2VydmVyIHVzaW5nIHRoZSBzcGVjaWZpZWQgbmFtZSBhbmQgYXJndW1lbnRzLiBEb2VzIG5vdCB3YWl0IGZvciBhIHJlc3BvbnNlIGZyb20gdGhlIHJlY2VpdmVyLlxyXG4gICAgICpcclxuICAgICAqIFRoZSBQcm9taXNlIHJldHVybmVkIGJ5IHRoaXMgbWV0aG9kIHJlc29sdmVzIHdoZW4gdGhlIGNsaWVudCBoYXMgc2VudCB0aGUgaW52b2NhdGlvbiB0byB0aGUgc2VydmVyLiBUaGUgc2VydmVyIG1heSBzdGlsbFxyXG4gICAgICogYmUgcHJvY2Vzc2luZyB0aGUgaW52b2NhdGlvbi5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kTmFtZSBUaGUgbmFtZSBvZiB0aGUgc2VydmVyIG1ldGhvZCB0byBpbnZva2UuXHJcbiAgICAgKiBAcGFyYW0ge2FueVtdfSBhcmdzIFRoZSBhcmd1bWVudHMgdXNlZCB0byBpbnZva2UgdGhlIHNlcnZlciBtZXRob2QuXHJcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn0gQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgaW52b2NhdGlvbiBoYXMgYmVlbiBzdWNjZXNzZnVsbHkgc2VudCwgb3IgcmVqZWN0cyB3aXRoIGFuIGVycm9yLlxyXG4gICAgICovXHJcbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24gKG1ldGhvZE5hbWUpIHtcclxuICAgICAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGFyZ3NbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBfYSA9IHRoaXMucmVwbGFjZVN0cmVhbWluZ1BhcmFtcyhhcmdzKSwgc3RyZWFtcyA9IF9hWzBdLCBzdHJlYW1JZHMgPSBfYVsxXTtcclxuICAgICAgICB2YXIgc2VuZFByb21pc2UgPSB0aGlzLnNlbmRXaXRoUHJvdG9jb2wodGhpcy5jcmVhdGVJbnZvY2F0aW9uKG1ldGhvZE5hbWUsIGFyZ3MsIHRydWUsIHN0cmVhbUlkcykpO1xyXG4gICAgICAgIHRoaXMubGF1bmNoU3RyZWFtcyhzdHJlYW1zLCBzZW5kUHJvbWlzZSk7XHJcbiAgICAgICAgcmV0dXJuIHNlbmRQcm9taXNlO1xyXG4gICAgfTtcclxuICAgIC8qKiBJbnZva2VzIGEgaHViIG1ldGhvZCBvbiB0aGUgc2VydmVyIHVzaW5nIHRoZSBzcGVjaWZpZWQgbmFtZSBhbmQgYXJndW1lbnRzLlxyXG4gICAgICpcclxuICAgICAqIFRoZSBQcm9taXNlIHJldHVybmVkIGJ5IHRoaXMgbWV0aG9kIHJlc29sdmVzIHdoZW4gdGhlIHNlcnZlciBpbmRpY2F0ZXMgaXQgaGFzIGZpbmlzaGVkIGludm9raW5nIHRoZSBtZXRob2QuIFdoZW4gdGhlIHByb21pc2VcclxuICAgICAqIHJlc29sdmVzLCB0aGUgc2VydmVyIGhhcyBmaW5pc2hlZCBpbnZva2luZyB0aGUgbWV0aG9kLiBJZiB0aGUgc2VydmVyIG1ldGhvZCByZXR1cm5zIGEgcmVzdWx0LCBpdCBpcyBwcm9kdWNlZCBhcyB0aGUgcmVzdWx0IG9mXHJcbiAgICAgKiByZXNvbHZpbmcgdGhlIFByb21pc2UuXHJcbiAgICAgKlxyXG4gICAgICogQHR5cGVwYXJhbSBUIFRoZSBleHBlY3RlZCByZXR1cm4gdHlwZS5cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2ROYW1lIFRoZSBuYW1lIG9mIHRoZSBzZXJ2ZXIgbWV0aG9kIHRvIGludm9rZS5cclxuICAgICAqIEBwYXJhbSB7YW55W119IGFyZ3MgVGhlIGFyZ3VtZW50cyB1c2VkIHRvIGludm9rZSB0aGUgc2VydmVyIG1ldGhvZC5cclxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPFQ+fSBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSByZXN1bHQgb2YgdGhlIHNlcnZlciBtZXRob2QgKGlmIGFueSksIG9yIHJlamVjdHMgd2l0aCBhbiBlcnJvci5cclxuICAgICAqL1xyXG4gICAgSHViQ29ubmVjdGlvbi5wcm90b3R5cGUuaW52b2tlID0gZnVuY3Rpb24gKG1ldGhvZE5hbWUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBhcmdzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgYXJnc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIF9hID0gdGhpcy5yZXBsYWNlU3RyZWFtaW5nUGFyYW1zKGFyZ3MpLCBzdHJlYW1zID0gX2FbMF0sIHN0cmVhbUlkcyA9IF9hWzFdO1xyXG4gICAgICAgIHZhciBpbnZvY2F0aW9uRGVzY3JpcHRvciA9IHRoaXMuY3JlYXRlSW52b2NhdGlvbihtZXRob2ROYW1lLCBhcmdzLCBmYWxzZSwgc3RyZWFtSWRzKTtcclxuICAgICAgICB2YXIgcCA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgLy8gaW52b2NhdGlvbklkIHdpbGwgYWx3YXlzIGhhdmUgYSB2YWx1ZSBmb3IgYSBub24tYmxvY2tpbmcgaW52b2NhdGlvblxyXG4gICAgICAgICAgICBfdGhpcy5jYWxsYmFja3NbaW52b2NhdGlvbkRlc2NyaXB0b3IuaW52b2NhdGlvbklkXSA9IGZ1bmN0aW9uIChpbnZvY2F0aW9uRXZlbnQsIGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGludm9jYXRpb25FdmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGludm9jYXRpb25FdmVudCB3aWxsIG5vdCBiZSBudWxsIHdoZW4gYW4gZXJyb3IgaXMgbm90IHBhc3NlZCB0byB0aGUgY2FsbGJhY2tcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW52b2NhdGlvbkV2ZW50LnR5cGUgPT09IElIdWJQcm90b2NvbF8xLk1lc3NhZ2VUeXBlLkNvbXBsZXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGludm9jYXRpb25FdmVudC5lcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihpbnZvY2F0aW9uRXZlbnQuZXJyb3IpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoaW52b2NhdGlvbkV2ZW50LnJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJVbmV4cGVjdGVkIG1lc3NhZ2UgdHlwZTogXCIgKyBpbnZvY2F0aW9uRXZlbnQudHlwZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdmFyIHByb21pc2VRdWV1ZSA9IF90aGlzLnNlbmRXaXRoUHJvdG9jb2woaW52b2NhdGlvbkRlc2NyaXB0b3IpXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChlKTtcclxuICAgICAgICAgICAgICAgIC8vIGludm9jYXRpb25JZCB3aWxsIGFsd2F5cyBoYXZlIGEgdmFsdWUgZm9yIGEgbm9uLWJsb2NraW5nIGludm9jYXRpb25cclxuICAgICAgICAgICAgICAgIGRlbGV0ZSBfdGhpcy5jYWxsYmFja3NbaW52b2NhdGlvbkRlc2NyaXB0b3IuaW52b2NhdGlvbklkXTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIF90aGlzLmxhdW5jaFN0cmVhbXMoc3RyZWFtcywgcHJvbWlzZVF1ZXVlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gcDtcclxuICAgIH07XHJcbiAgICAvKiogUmVnaXN0ZXJzIGEgaGFuZGxlciB0aGF0IHdpbGwgYmUgaW52b2tlZCB3aGVuIHRoZSBodWIgbWV0aG9kIHdpdGggdGhlIHNwZWNpZmllZCBtZXRob2QgbmFtZSBpcyBpbnZva2VkLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2ROYW1lIFRoZSBuYW1lIG9mIHRoZSBodWIgbWV0aG9kIHRvIGRlZmluZS5cclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG5ld01ldGhvZCBUaGUgaGFuZGxlciB0aGF0IHdpbGwgYmUgcmFpc2VkIHdoZW4gdGhlIGh1YiBtZXRob2QgaXMgaW52b2tlZC5cclxuICAgICAqL1xyXG4gICAgSHViQ29ubmVjdGlvbi5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAobWV0aG9kTmFtZSwgbmV3TWV0aG9kKSB7XHJcbiAgICAgICAgaWYgKCFtZXRob2ROYW1lIHx8ICFuZXdNZXRob2QpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBtZXRob2ROYW1lID0gbWV0aG9kTmFtZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgIGlmICghdGhpcy5tZXRob2RzW21ldGhvZE5hbWVdKSB7XHJcbiAgICAgICAgICAgIHRoaXMubWV0aG9kc1ttZXRob2ROYW1lXSA9IFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBQcmV2ZW50aW5nIGFkZGluZyB0aGUgc2FtZSBoYW5kbGVyIG11bHRpcGxlIHRpbWVzLlxyXG4gICAgICAgIGlmICh0aGlzLm1ldGhvZHNbbWV0aG9kTmFtZV0uaW5kZXhPZihuZXdNZXRob2QpICE9PSAtMSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubWV0aG9kc1ttZXRob2ROYW1lXS5wdXNoKG5ld01ldGhvZCk7XHJcbiAgICB9O1xyXG4gICAgSHViQ29ubmVjdGlvbi5wcm90b3R5cGUub2ZmID0gZnVuY3Rpb24gKG1ldGhvZE5hbWUsIG1ldGhvZCkge1xyXG4gICAgICAgIGlmICghbWV0aG9kTmFtZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG1ldGhvZE5hbWUgPSBtZXRob2ROYW1lLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgdmFyIGhhbmRsZXJzID0gdGhpcy5tZXRob2RzW21ldGhvZE5hbWVdO1xyXG4gICAgICAgIGlmICghaGFuZGxlcnMpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobWV0aG9kKSB7XHJcbiAgICAgICAgICAgIHZhciByZW1vdmVJZHggPSBoYW5kbGVycy5pbmRleE9mKG1ldGhvZCk7XHJcbiAgICAgICAgICAgIGlmIChyZW1vdmVJZHggIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVycy5zcGxpY2UocmVtb3ZlSWR4LCAxKTtcclxuICAgICAgICAgICAgICAgIGlmIChoYW5kbGVycy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5tZXRob2RzW21ldGhvZE5hbWVdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5tZXRob2RzW21ldGhvZE5hbWVdO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKiogUmVnaXN0ZXJzIGEgaGFuZGxlciB0aGF0IHdpbGwgYmUgaW52b2tlZCB3aGVuIHRoZSBjb25uZWN0aW9uIGlzIGNsb3NlZC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgaGFuZGxlciB0aGF0IHdpbGwgYmUgaW52b2tlZCB3aGVuIHRoZSBjb25uZWN0aW9uIGlzIGNsb3NlZC4gT3B0aW9uYWxseSByZWNlaXZlcyBhIHNpbmdsZSBhcmd1bWVudCBjb250YWluaW5nIHRoZSBlcnJvciB0aGF0IGNhdXNlZCB0aGUgY29ubmVjdGlvbiB0byBjbG9zZSAoaWYgYW55KS5cclxuICAgICAqL1xyXG4gICAgSHViQ29ubmVjdGlvbi5wcm90b3R5cGUub25jbG9zZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgICAgIGlmIChjYWxsYmFjaykge1xyXG4gICAgICAgICAgICB0aGlzLmNsb3NlZENhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqIFJlZ2lzdGVycyBhIGhhbmRsZXIgdGhhdCB3aWxsIGJlIGludm9rZWQgd2hlbiB0aGUgY29ubmVjdGlvbiBzdGFydHMgcmVjb25uZWN0aW5nLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBoYW5kbGVyIHRoYXQgd2lsbCBiZSBpbnZva2VkIHdoZW4gdGhlIGNvbm5lY3Rpb24gc3RhcnRzIHJlY29ubmVjdGluZy4gT3B0aW9uYWxseSByZWNlaXZlcyBhIHNpbmdsZSBhcmd1bWVudCBjb250YWluaW5nIHRoZSBlcnJvciB0aGF0IGNhdXNlZCB0aGUgY29ubmVjdGlvbiB0byBzdGFydCByZWNvbm5lY3RpbmcgKGlmIGFueSkuXHJcbiAgICAgKi9cclxuICAgIEh1YkNvbm5lY3Rpb24ucHJvdG90eXBlLm9ucmVjb25uZWN0aW5nID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVjb25uZWN0aW5nQ2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKiogUmVnaXN0ZXJzIGEgaGFuZGxlciB0aGF0IHdpbGwgYmUgaW52b2tlZCB3aGVuIHRoZSBjb25uZWN0aW9uIHN1Y2Nlc3NmdWxseSByZWNvbm5lY3RzLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBoYW5kbGVyIHRoYXQgd2lsbCBiZSBpbnZva2VkIHdoZW4gdGhlIGNvbm5lY3Rpb24gc3VjY2Vzc2Z1bGx5IHJlY29ubmVjdHMuXHJcbiAgICAgKi9cclxuICAgIEh1YkNvbm5lY3Rpb24ucHJvdG90eXBlLm9ucmVjb25uZWN0ZWQgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgICAgICBpZiAoY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgdGhpcy5yZWNvbm5lY3RlZENhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgSHViQ29ubmVjdGlvbi5wcm90b3R5cGUucHJvY2Vzc0luY29taW5nRGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgdGhpcy5jbGVhbnVwVGltZW91dCgpO1xyXG4gICAgICAgIGlmICghdGhpcy5yZWNlaXZlZEhhbmRzaGFrZVJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgIGRhdGEgPSB0aGlzLnByb2Nlc3NIYW5kc2hha2VSZXNwb25zZShkYXRhKTtcclxuICAgICAgICAgICAgdGhpcy5yZWNlaXZlZEhhbmRzaGFrZVJlc3BvbnNlID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gRGF0YSBtYXkgaGF2ZSBhbGwgYmVlbiByZWFkIHdoZW4gcHJvY2Vzc2luZyBoYW5kc2hha2UgcmVzcG9uc2VcclxuICAgICAgICBpZiAoZGF0YSkge1xyXG4gICAgICAgICAgICAvLyBQYXJzZSB0aGUgbWVzc2FnZXNcclxuICAgICAgICAgICAgdmFyIG1lc3NhZ2VzID0gdGhpcy5wcm90b2NvbC5wYXJzZU1lc3NhZ2VzKGRhdGEsIHRoaXMubG9nZ2VyKTtcclxuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBtZXNzYWdlc18xID0gbWVzc2FnZXM7IF9pIDwgbWVzc2FnZXNfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlID0gbWVzc2FnZXNfMVtfaV07XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKG1lc3NhZ2UudHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgSUh1YlByb3RvY29sXzEuTWVzc2FnZVR5cGUuSW52b2NhdGlvbjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnZva2VDbGllbnRNZXRob2QobWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgSUh1YlByb3RvY29sXzEuTWVzc2FnZVR5cGUuU3RyZWFtSXRlbTpcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIElIdWJQcm90b2NvbF8xLk1lc3NhZ2VUeXBlLkNvbXBsZXRpb246XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjYWxsYmFjayA9IHRoaXMuY2FsbGJhY2tzW21lc3NhZ2UuaW52b2NhdGlvbklkXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS50eXBlID09PSBJSHViUHJvdG9jb2xfMS5NZXNzYWdlVHlwZS5Db21wbGV0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuY2FsbGJhY2tzW21lc3NhZ2UuaW52b2NhdGlvbklkXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgSUh1YlByb3RvY29sXzEuTWVzc2FnZVR5cGUuUGluZzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRG9uJ3QgY2FyZSBhYm91dCBwaW5nc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIElIdWJQcm90b2NvbF8xLk1lc3NhZ2VUeXBlLkNsb3NlOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkluZm9ybWF0aW9uLCBcIkNsb3NlIG1lc3NhZ2UgcmVjZWl2ZWQgZnJvbSBzZXJ2ZXIuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXJyb3IgPSBtZXNzYWdlLmVycm9yID8gbmV3IEVycm9yKFwiU2VydmVyIHJldHVybmVkIGFuIGVycm9yIG9uIGNsb3NlOiBcIiArIG1lc3NhZ2UuZXJyb3IpIDogdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5hbGxvd1JlY29ubmVjdCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSXQgZmVlbHMgd3Jvbmcgbm90IHRvIGF3YWl0IGNvbm5lY3Rpb24uc3RvcCgpIGhlcmUsIGJ1dCBwcm9jZXNzSW5jb21pbmdEYXRhIGlzIGNhbGxlZCBhcyBwYXJ0IG9mIGFuIG9ucmVjZWl2ZSBjYWxsYmFjayB3aGljaCBpcyBub3QgYXN5bmMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGlzIGlzIGFscmVhZHkgdGhlIGJlaGF2aW9yIGZvciBzZXJ2ZXJUaW1lb3V0KCksIGFuZCBIdHRwQ29ubmVjdGlvbi5TdG9wKCkgc2hvdWxkIGNhdGNoIGFuZCBsb2cgYWxsIHBvc3NpYmxlIGV4Y2VwdGlvbnMuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tZmxvYXRpbmctcHJvbWlzZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvbi5zdG9wKGVycm9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIGNhbm5vdCBhd2FpdCBzdG9wSW50ZXJuYWwoKSBoZXJlLCBidXQgc3Vic2VxdWVudCBjYWxscyB0byBzdG9wKCkgd2lsbCBhd2FpdCB0aGlzIGlmIHN0b3BJbnRlcm5hbCgpIGlzIHN0aWxsIG9uZ29pbmcuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3BQcm9taXNlID0gdGhpcy5zdG9wSW50ZXJuYWwoZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuV2FybmluZywgXCJJbnZhbGlkIG1lc3NhZ2UgdHlwZTogXCIgKyBtZXNzYWdlLnR5cGUgKyBcIi5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucmVzZXRUaW1lb3V0UGVyaW9kKCk7XHJcbiAgICB9O1xyXG4gICAgSHViQ29ubmVjdGlvbi5wcm90b3R5cGUucHJvY2Vzc0hhbmRzaGFrZVJlc3BvbnNlID0gZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgdmFyIHJlc3BvbnNlTWVzc2FnZTtcclxuICAgICAgICB2YXIgcmVtYWluaW5nRGF0YTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBfYSA9IHRoaXMuaGFuZHNoYWtlUHJvdG9jb2wucGFyc2VIYW5kc2hha2VSZXNwb25zZShkYXRhKSwgcmVtYWluaW5nRGF0YSA9IF9hWzBdLCByZXNwb25zZU1lc3NhZ2UgPSBfYVsxXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgdmFyIG1lc3NhZ2UgPSBcIkVycm9yIHBhcnNpbmcgaGFuZHNoYWtlIHJlc3BvbnNlOiBcIiArIGU7XHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuRXJyb3IsIG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSk7XHJcbiAgICAgICAgICAgIHRoaXMuaGFuZHNoYWtlUmVqZWN0ZXIoZXJyb3IpO1xyXG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHJlc3BvbnNlTWVzc2FnZS5lcnJvcikge1xyXG4gICAgICAgICAgICB2YXIgbWVzc2FnZSA9IFwiU2VydmVyIHJldHVybmVkIGhhbmRzaGFrZSBlcnJvcjogXCIgKyByZXNwb25zZU1lc3NhZ2UuZXJyb3I7XHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuRXJyb3IsIG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSk7XHJcbiAgICAgICAgICAgIHRoaXMuaGFuZHNoYWtlUmVqZWN0ZXIoZXJyb3IpO1xyXG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuRGVidWcsIFwiU2VydmVyIGhhbmRzaGFrZSBjb21wbGV0ZS5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaGFuZHNoYWtlUmVzb2x2ZXIoKTtcclxuICAgICAgICByZXR1cm4gcmVtYWluaW5nRGF0YTtcclxuICAgIH07XHJcbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5yZXNldEtlZXBBbGl2ZUludGVydmFsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKHRoaXMuY29ubmVjdGlvbi5mZWF0dXJlcy5pbmhlcmVudEtlZXBBbGl2ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY2xlYW51cFBpbmdUaW1lcigpO1xyXG4gICAgICAgIHRoaXMucGluZ1NlcnZlckhhbmRsZSA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyByZXR1cm4gX19hd2FpdGVyKF90aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHRoaXMuY29ubmVjdGlvblN0YXRlID09PSBIdWJDb25uZWN0aW9uU3RhdGUuQ29ubmVjdGVkKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLnRyeXMucHVzaChbMSwgMywgLCA0XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuc2VuZE1lc3NhZ2UodGhpcy5jYWNoZWRQaW5nTWVzc2FnZSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA0XTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSBkb24ndCBjYXJlIGFib3V0IHRoZSBlcnJvci4gSXQgc2hvdWxkIGJlIHNlZW4gZWxzZXdoZXJlIGluIHRoZSBjbGllbnQuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSBjb25uZWN0aW9uIGlzIHByb2JhYmx5IGluIGEgYmFkIG9yIGNsb3NlZCBzdGF0ZSBub3csIGNsZWFudXAgdGhlIHRpbWVyIHNvIGl0IHN0b3BzIHRyaWdnZXJpbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhbnVwUGluZ1RpbWVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDRdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTsgfSwgdGhpcy5rZWVwQWxpdmVJbnRlcnZhbEluTWlsbGlzZWNvbmRzKTtcclxuICAgIH07XHJcbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5yZXNldFRpbWVvdXRQZXJpb2QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBpZiAoIXRoaXMuY29ubmVjdGlvbi5mZWF0dXJlcyB8fCAhdGhpcy5jb25uZWN0aW9uLmZlYXR1cmVzLmluaGVyZW50S2VlcEFsaXZlKSB7XHJcbiAgICAgICAgICAgIC8vIFNldCB0aGUgdGltZW91dCB0aW1lclxyXG4gICAgICAgICAgICB0aGlzLnRpbWVvdXRIYW5kbGUgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnNlcnZlclRpbWVvdXQoKTsgfSwgdGhpcy5zZXJ2ZXJUaW1lb3V0SW5NaWxsaXNlY29uZHMpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5zZXJ2ZXJUaW1lb3V0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIFRoZSBzZXJ2ZXIgaGFzbid0IHRhbGtlZCB0byB1cyBpbiBhIHdoaWxlLiBJdCBkb2Vzbid0IGxpa2UgdXMgYW55bW9yZSAuLi4gOihcclxuICAgICAgICAvLyBUZXJtaW5hdGUgdGhlIGNvbm5lY3Rpb24sIGJ1dCB3ZSBkb24ndCBuZWVkIHRvIHdhaXQgb24gdGhlIHByb21pc2UuIFRoaXMgY291bGQgdHJpZ2dlciByZWNvbm5lY3RpbmcuXHJcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWZsb2F0aW5nLXByb21pc2VzXHJcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uLnN0b3AobmV3IEVycm9yKFwiU2VydmVyIHRpbWVvdXQgZWxhcHNlZCB3aXRob3V0IHJlY2VpdmluZyBhIG1lc3NhZ2UgZnJvbSB0aGUgc2VydmVyLlwiKSk7XHJcbiAgICB9O1xyXG4gICAgSHViQ29ubmVjdGlvbi5wcm90b3R5cGUuaW52b2tlQ2xpZW50TWV0aG9kID0gZnVuY3Rpb24gKGludm9jYXRpb25NZXNzYWdlKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgbWV0aG9kcyA9IHRoaXMubWV0aG9kc1tpbnZvY2F0aW9uTWVzc2FnZS50YXJnZXQudG9Mb3dlckNhc2UoKV07XHJcbiAgICAgICAgaWYgKG1ldGhvZHMpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIG1ldGhvZHMuZm9yRWFjaChmdW5jdGlvbiAobSkgeyByZXR1cm4gbS5hcHBseShfdGhpcywgaW52b2NhdGlvbk1lc3NhZ2UuYXJndW1lbnRzKTsgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuRXJyb3IsIFwiQSBjYWxsYmFjayBmb3IgdGhlIG1ldGhvZCBcIiArIGludm9jYXRpb25NZXNzYWdlLnRhcmdldC50b0xvd2VyQ2FzZSgpICsgXCIgdGhyZXcgZXJyb3IgJ1wiICsgZSArIFwiJy5cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGludm9jYXRpb25NZXNzYWdlLmludm9jYXRpb25JZCkge1xyXG4gICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBub3Qgc3VwcG9ydGVkIGluIHYxLiBTbyB3ZSByZXR1cm4gYW4gZXJyb3IgdG8gYXZvaWQgYmxvY2tpbmcgdGhlIHNlcnZlciB3YWl0aW5nIGZvciB0aGUgcmVzcG9uc2UuXHJcbiAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZSA9IFwiU2VydmVyIHJlcXVlc3RlZCBhIHJlc3BvbnNlLCB3aGljaCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgdmVyc2lvbiBvZiB0aGUgY2xpZW50LlwiO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5FcnJvciwgbWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAvLyBXZSBkb24ndCB3YW50IHRvIHdhaXQgb24gdGhlIHN0b3AgaXRzZWxmLlxyXG4gICAgICAgICAgICAgICAgdGhpcy5zdG9wUHJvbWlzZSA9IHRoaXMuc3RvcEludGVybmFsKG5ldyBFcnJvcihtZXNzYWdlKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuV2FybmluZywgXCJObyBjbGllbnQgbWV0aG9kIHdpdGggdGhlIG5hbWUgJ1wiICsgaW52b2NhdGlvbk1lc3NhZ2UudGFyZ2V0ICsgXCInIGZvdW5kLlwiKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgSHViQ29ubmVjdGlvbi5wcm90b3R5cGUuY29ubmVjdGlvbkNsb3NlZCA9IGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuRGVidWcsIFwiSHViQ29ubmVjdGlvbi5jb25uZWN0aW9uQ2xvc2VkKFwiICsgZXJyb3IgKyBcIikgY2FsbGVkIHdoaWxlIGluIHN0YXRlIFwiICsgdGhpcy5jb25uZWN0aW9uU3RhdGUgKyBcIi5cIik7XHJcbiAgICAgICAgLy8gVHJpZ2dlcmluZyB0aGlzLmhhbmRzaGFrZVJlamVjdGVyIGlzIGluc3VmZmljaWVudCBiZWNhdXNlIGl0IGNvdWxkIGFscmVhZHkgYmUgcmVzb2x2ZWQgd2l0aG91dCB0aGUgY29udGludWF0aW9uIGhhdmluZyBydW4geWV0LlxyXG4gICAgICAgIHRoaXMuc3RvcER1cmluZ1N0YXJ0RXJyb3IgPSB0aGlzLnN0b3BEdXJpbmdTdGFydEVycm9yIHx8IGVycm9yIHx8IG5ldyBFcnJvcihcIlRoZSB1bmRlcmx5aW5nIGNvbm5lY3Rpb24gd2FzIGNsb3NlZCBiZWZvcmUgdGhlIGh1YiBoYW5kc2hha2UgY291bGQgY29tcGxldGUuXCIpO1xyXG4gICAgICAgIC8vIElmIHRoZSBoYW5kc2hha2UgaXMgaW4gcHJvZ3Jlc3MsIHN0YXJ0IHdpbGwgYmUgd2FpdGluZyBmb3IgdGhlIGhhbmRzaGFrZSBwcm9taXNlLCBzbyB3ZSBjb21wbGV0ZSBpdC5cclxuICAgICAgICAvLyBJZiBpdCBoYXMgYWxyZWFkeSBjb21wbGV0ZWQsIHRoaXMgc2hvdWxkIGp1c3Qgbm9vcC5cclxuICAgICAgICBpZiAodGhpcy5oYW5kc2hha2VSZXNvbHZlcikge1xyXG4gICAgICAgICAgICB0aGlzLmhhbmRzaGFrZVJlc29sdmVyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY2FuY2VsQ2FsbGJhY2tzV2l0aEVycm9yKGVycm9yIHx8IG5ldyBFcnJvcihcIkludm9jYXRpb24gY2FuY2VsZWQgZHVlIHRvIHRoZSB1bmRlcmx5aW5nIGNvbm5lY3Rpb24gYmVpbmcgY2xvc2VkLlwiKSk7XHJcbiAgICAgICAgdGhpcy5jbGVhbnVwVGltZW91dCgpO1xyXG4gICAgICAgIHRoaXMuY2xlYW51cFBpbmdUaW1lcigpO1xyXG4gICAgICAgIGlmICh0aGlzLmNvbm5lY3Rpb25TdGF0ZSA9PT0gSHViQ29ubmVjdGlvblN0YXRlLkRpc2Nvbm5lY3RpbmcpIHtcclxuICAgICAgICAgICAgdGhpcy5jb21wbGV0ZUNsb3NlKGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5jb25uZWN0aW9uU3RhdGUgPT09IEh1YkNvbm5lY3Rpb25TdGF0ZS5Db25uZWN0ZWQgJiYgdGhpcy5yZWNvbm5lY3RQb2xpY3kpIHtcclxuICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWZsb2F0aW5nLXByb21pc2VzXHJcbiAgICAgICAgICAgIHRoaXMucmVjb25uZWN0KGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5jb25uZWN0aW9uU3RhdGUgPT09IEh1YkNvbm5lY3Rpb25TdGF0ZS5Db25uZWN0ZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5jb21wbGV0ZUNsb3NlKGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gSWYgbm9uZSBvZiB0aGUgYWJvdmUgaWYgY29uZGl0aW9ucyB3ZXJlIHRydWUgd2VyZSBjYWxsZWQgdGhlIEh1YkNvbm5lY3Rpb24gbXVzdCBiZSBpbiBlaXRoZXI6XHJcbiAgICAgICAgLy8gMS4gVGhlIENvbm5lY3Rpbmcgc3RhdGUgaW4gd2hpY2ggY2FzZSB0aGUgaGFuZHNoYWtlUmVzb2x2ZXIgd2lsbCBjb21wbGV0ZSBpdCBhbmQgc3RvcER1cmluZ1N0YXJ0RXJyb3Igd2lsbCBmYWlsIGl0LlxyXG4gICAgICAgIC8vIDIuIFRoZSBSZWNvbm5lY3Rpbmcgc3RhdGUgaW4gd2hpY2ggY2FzZSB0aGUgaGFuZHNoYWtlUmVzb2x2ZXIgd2lsbCBjb21wbGV0ZSBpdCBhbmQgc3RvcER1cmluZ1N0YXJ0RXJyb3Igd2lsbCBmYWlsIHRoZSBjdXJyZW50IHJlY29ubmVjdCBhdHRlbXB0XHJcbiAgICAgICAgLy8gICAgYW5kIHBvdGVudGlhbGx5IGNvbnRpbnVlIHRoZSByZWNvbm5lY3QoKSBsb29wLlxyXG4gICAgICAgIC8vIDMuIFRoZSBEaXNjb25uZWN0ZWQgc3RhdGUgaW4gd2hpY2ggY2FzZSB3ZSdyZSBhbHJlYWR5IGRvbmUuXHJcbiAgICB9O1xyXG4gICAgSHViQ29ubmVjdGlvbi5wcm90b3R5cGUuY29tcGxldGVDbG9zZSA9IGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKHRoaXMuY29ubmVjdGlvblN0YXJ0ZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uU3RhdGUgPSBIdWJDb25uZWN0aW9uU3RhdGUuRGlzY29ubmVjdGVkO1xyXG4gICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb25TdGFydGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlZENhbGxiYWNrcy5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLmFwcGx5KF90aGlzLCBbZXJyb3JdKTsgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuRXJyb3IsIFwiQW4gb25jbG9zZSBjYWxsYmFjayBjYWxsZWQgd2l0aCBlcnJvciAnXCIgKyBlcnJvciArIFwiJyB0aHJldyBlcnJvciAnXCIgKyBlICsgXCInLlwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5yZWNvbm5lY3QgPSBmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciByZWNvbm5lY3RTdGFydFRpbWUsIHByZXZpb3VzUmVjb25uZWN0QXR0ZW1wdHMsIHJldHJ5RXJyb3IsIG5leHRSZXRyeURlbGF5LCBlXzQ7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY29ubmVjdFN0YXJ0VGltZSA9IERhdGUubm93KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzUmVjb25uZWN0QXR0ZW1wdHMgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXRyeUVycm9yID0gZXJyb3IgIT09IHVuZGVmaW5lZCA/IGVycm9yIDogbmV3IEVycm9yKFwiQXR0ZW1wdGluZyB0byByZWNvbm5lY3QgZHVlIHRvIGEgdW5rbm93biBlcnJvci5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHRSZXRyeURlbGF5ID0gdGhpcy5nZXROZXh0UmV0cnlEZWxheShwcmV2aW91c1JlY29ubmVjdEF0dGVtcHRzKyssIDAsIHJldHJ5RXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV4dFJldHJ5RGVsYXkgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuRGVidWcsIFwiQ29ubmVjdGlvbiBub3QgcmVjb25uZWN0aW5nIGJlY2F1c2UgdGhlIElSZXRyeVBvbGljeSByZXR1cm5lZCBudWxsIG9uIHRoZSBmaXJzdCByZWNvbm5lY3QgYXR0ZW1wdC5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbXBsZXRlQ2xvc2UoZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvblN0YXRlID0gSHViQ29ubmVjdGlvblN0YXRlLlJlY29ubmVjdGluZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkluZm9ybWF0aW9uLCBcIkNvbm5lY3Rpb24gcmVjb25uZWN0aW5nIGJlY2F1c2Ugb2YgZXJyb3IgJ1wiICsgZXJyb3IgKyBcIicuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5JbmZvcm1hdGlvbiwgXCJDb25uZWN0aW9uIHJlY29ubmVjdGluZy5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub25yZWNvbm5lY3RpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWNvbm5lY3RpbmdDYWxsYmFja3MuZm9yRWFjaChmdW5jdGlvbiAoYykgeyByZXR1cm4gYy5hcHBseShfdGhpcywgW2Vycm9yXSk7IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkVycm9yLCBcIkFuIG9ucmVjb25uZWN0aW5nIGNhbGxiYWNrIGNhbGxlZCB3aXRoIGVycm9yICdcIiArIGVycm9yICsgXCInIHRocmV3IGVycm9yICdcIiArIGUgKyBcIicuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXhpdCBlYXJseSBpZiBhbiBvbnJlY29ubmVjdGluZyBjYWxsYmFjayBjYWxsZWQgY29ubmVjdGlvbi5zdG9wKCkuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jb25uZWN0aW9uU3RhdGUgIT09IEh1YkNvbm5lY3Rpb25TdGF0ZS5SZWNvbm5lY3RpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkRlYnVnLCBcIkNvbm5lY3Rpb24gbGVmdCB0aGUgcmVjb25uZWN0aW5nIHN0YXRlIGluIG9ucmVjb25uZWN0aW5nIGNhbGxiYWNrLiBEb25lIHJlY29ubmVjdGluZy5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKG5leHRSZXRyeURlbGF5ICE9PSBudWxsKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgN107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuSW5mb3JtYXRpb24sIFwiUmVjb25uZWN0IGF0dGVtcHQgbnVtYmVyIFwiICsgcHJldmlvdXNSZWNvbm5lY3RBdHRlbXB0cyArIFwiIHdpbGwgc3RhcnQgaW4gXCIgKyBuZXh0UmV0cnlEZWxheSArIFwiIG1zLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5yZWNvbm5lY3REZWxheUhhbmRsZSA9IHNldFRpbWVvdXQocmVzb2x2ZSwgbmV4dFJldHJ5RGVsYXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlY29ubmVjdERlbGF5SGFuZGxlID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jb25uZWN0aW9uU3RhdGUgIT09IEh1YkNvbm5lY3Rpb25TdGF0ZS5SZWNvbm5lY3RpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuRGVidWcsIFwiQ29ubmVjdGlvbiBsZWZ0IHRoZSByZWNvbm5lY3Rpbmcgc3RhdGUgZHVyaW5nIHJlY29ubmVjdCBkZWxheS4gRG9uZSByZWNvbm5lY3RpbmcuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnRyeXMucHVzaChbMywgNSwgLCA2XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuc3RhcnRJbnRlcm5hbCgpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uU3RhdGUgPSBIdWJDb25uZWN0aW9uU3RhdGUuQ29ubmVjdGVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkluZm9ybWF0aW9uLCBcIkh1YkNvbm5lY3Rpb24gcmVjb25uZWN0ZWQgc3VjY2Vzc2Z1bGx5LlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub25yZWNvbm5lY3RlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlY29ubmVjdGVkQ2FsbGJhY2tzLmZvckVhY2goZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMuYXBwbHkoX3RoaXMsIFtfdGhpcy5jb25uZWN0aW9uLmNvbm5lY3Rpb25JZF0pOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5FcnJvciwgXCJBbiBvbnJlY29ubmVjdGVkIGNhbGxiYWNrIGNhbGxlZCB3aXRoIGNvbm5lY3Rpb25JZCAnXCIgKyB0aGlzLmNvbm5lY3Rpb24uY29ubmVjdGlvbklkICsgXCI7IHRocmV3IGVycm9yICdcIiArIGUgKyBcIicuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVfNCA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5JbmZvcm1hdGlvbiwgXCJSZWNvbm5lY3QgYXR0ZW1wdCBmYWlsZWQgYmVjYXVzZSBvZiBlcnJvciAnXCIgKyBlXzQgKyBcIicuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jb25uZWN0aW9uU3RhdGUgIT09IEh1YkNvbm5lY3Rpb25TdGF0ZS5SZWNvbm5lY3RpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuRGVidWcsIFwiQ29ubmVjdGlvbiBsZWZ0IHRoZSByZWNvbm5lY3Rpbmcgc3RhdGUgZHVyaW5nIHJlY29ubmVjdCBhdHRlbXB0LiBEb25lIHJlY29ubmVjdGluZy5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0cnlFcnJvciA9IGVfNCBpbnN0YW5jZW9mIEVycm9yID8gZV80IDogbmV3IEVycm9yKGVfNC50b1N0cmluZygpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dFJldHJ5RGVsYXkgPSB0aGlzLmdldE5leHRSZXRyeURlbGF5KHByZXZpb3VzUmVjb25uZWN0QXR0ZW1wdHMrKywgRGF0ZS5ub3coKSAtIHJlY29ubmVjdFN0YXJ0VGltZSwgcmV0cnlFcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDZdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjogcmV0dXJuIFszIC8qYnJlYWsqLywgMV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA3OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkluZm9ybWF0aW9uLCBcIlJlY29ubmVjdCByZXRyaWVzIGhhdmUgYmVlbiBleGhhdXN0ZWQgYWZ0ZXIgXCIgKyAoRGF0ZS5ub3coKSAtIHJlY29ubmVjdFN0YXJ0VGltZSkgKyBcIiBtcyBhbmQgXCIgKyBwcmV2aW91c1JlY29ubmVjdEF0dGVtcHRzICsgXCIgZmFpbGVkIGF0dGVtcHRzLiBDb25uZWN0aW9uIGRpc2Nvbm5lY3RpbmcuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbXBsZXRlQ2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5nZXROZXh0UmV0cnlEZWxheSA9IGZ1bmN0aW9uIChwcmV2aW91c1JldHJ5Q291bnQsIGVsYXBzZWRNaWxsaXNlY29uZHMsIHJldHJ5UmVhc29uKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVjb25uZWN0UG9saWN5Lm5leHRSZXRyeURlbGF5SW5NaWxsaXNlY29uZHMoe1xyXG4gICAgICAgICAgICAgICAgZWxhcHNlZE1pbGxpc2Vjb25kczogZWxhcHNlZE1pbGxpc2Vjb25kcyxcclxuICAgICAgICAgICAgICAgIHByZXZpb3VzUmV0cnlDb3VudDogcHJldmlvdXNSZXRyeUNvdW50LFxyXG4gICAgICAgICAgICAgICAgcmV0cnlSZWFzb246IHJldHJ5UmVhc29uLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5FcnJvciwgXCJJUmV0cnlQb2xpY3kubmV4dFJldHJ5RGVsYXlJbk1pbGxpc2Vjb25kcyhcIiArIHByZXZpb3VzUmV0cnlDb3VudCArIFwiLCBcIiArIGVsYXBzZWRNaWxsaXNlY29uZHMgKyBcIikgdGhyZXcgZXJyb3IgJ1wiICsgZSArIFwiJy5cIik7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5jYW5jZWxDYWxsYmFja3NXaXRoRXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICB2YXIgY2FsbGJhY2tzID0gdGhpcy5jYWxsYmFja3M7XHJcbiAgICAgICAgdGhpcy5jYWxsYmFja3MgPSB7fTtcclxuICAgICAgICBPYmplY3Qua2V5cyhjYWxsYmFja3MpXHJcbiAgICAgICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgdmFyIGNhbGxiYWNrID0gY2FsbGJhY2tzW2tleV07XHJcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIGVycm9yKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5jbGVhbnVwUGluZ1RpbWVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnBpbmdTZXJ2ZXJIYW5kbGUpIHtcclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMucGluZ1NlcnZlckhhbmRsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEh1YkNvbm5lY3Rpb24ucHJvdG90eXBlLmNsZWFudXBUaW1lb3V0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnRpbWVvdXRIYW5kbGUpIHtcclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dEhhbmRsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEh1YkNvbm5lY3Rpb24ucHJvdG90eXBlLmNyZWF0ZUludm9jYXRpb24gPSBmdW5jdGlvbiAobWV0aG9kTmFtZSwgYXJncywgbm9uYmxvY2tpbmcsIHN0cmVhbUlkcykge1xyXG4gICAgICAgIGlmIChub25ibG9ja2luZykge1xyXG4gICAgICAgICAgICBpZiAoc3RyZWFtSWRzLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICBhcmd1bWVudHM6IGFyZ3MsXHJcbiAgICAgICAgICAgICAgICAgICAgc3RyZWFtSWRzOiBzdHJlYW1JZHMsXHJcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBtZXRob2ROYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IElIdWJQcm90b2NvbF8xLk1lc3NhZ2VUeXBlLkludm9jYXRpb24sXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICBhcmd1bWVudHM6IGFyZ3MsXHJcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBtZXRob2ROYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IElIdWJQcm90b2NvbF8xLk1lc3NhZ2VUeXBlLkludm9jYXRpb24sXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgaW52b2NhdGlvbklkID0gdGhpcy5pbnZvY2F0aW9uSWQ7XHJcbiAgICAgICAgICAgIHRoaXMuaW52b2NhdGlvbklkKys7XHJcbiAgICAgICAgICAgIGlmIChzdHJlYW1JZHMubGVuZ3RoICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50czogYXJncyxcclxuICAgICAgICAgICAgICAgICAgICBpbnZvY2F0aW9uSWQ6IGludm9jYXRpb25JZC50b1N0cmluZygpLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0cmVhbUlkczogc3RyZWFtSWRzLFxyXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogbWV0aG9kTmFtZSxcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBJSHViUHJvdG9jb2xfMS5NZXNzYWdlVHlwZS5JbnZvY2F0aW9uLFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXJndW1lbnRzOiBhcmdzLFxyXG4gICAgICAgICAgICAgICAgICAgIGludm9jYXRpb25JZDogaW52b2NhdGlvbklkLnRvU3RyaW5nKCksXHJcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBtZXRob2ROYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IElIdWJQcm90b2NvbF8xLk1lc3NhZ2VUeXBlLkludm9jYXRpb24sXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEh1YkNvbm5lY3Rpb24ucHJvdG90eXBlLmxhdW5jaFN0cmVhbXMgPSBmdW5jdGlvbiAoc3RyZWFtcywgcHJvbWlzZVF1ZXVlKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBpZiAoc3RyZWFtcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBTeW5jaHJvbml6ZSBzdHJlYW0gZGF0YSBzbyB0aGV5IGFycml2ZSBpbi1vcmRlciBvbiB0aGUgc2VydmVyXHJcbiAgICAgICAgaWYgKCFwcm9taXNlUXVldWUpIHtcclxuICAgICAgICAgICAgcHJvbWlzZVF1ZXVlID0gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBfbG9vcF8xID0gZnVuY3Rpb24gKHN0cmVhbUlkKSB7XHJcbiAgICAgICAgICAgIHN0cmVhbXNbc3RyZWFtSWRdLnN1YnNjcmliZSh7XHJcbiAgICAgICAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb21pc2VRdWV1ZSA9IHByb21pc2VRdWV1ZS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnNlbmRXaXRoUHJvdG9jb2woX3RoaXMuY3JlYXRlQ29tcGxldGlvbk1lc3NhZ2Uoc3RyZWFtSWQpKTsgfSk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyIGluc3RhbmNlb2YgRXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IGVyci5tZXNzYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChlcnIgJiYgZXJyLnRvU3RyaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBlcnIudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBcIlVua25vd24gZXJyb3JcIjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZVF1ZXVlID0gcHJvbWlzZVF1ZXVlLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuc2VuZFdpdGhQcm90b2NvbChfdGhpcy5jcmVhdGVDb21wbGV0aW9uTWVzc2FnZShzdHJlYW1JZCwgbWVzc2FnZSkpOyB9KTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb21pc2VRdWV1ZSA9IHByb21pc2VRdWV1ZS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnNlbmRXaXRoUHJvdG9jb2woX3RoaXMuY3JlYXRlU3RyZWFtSXRlbU1lc3NhZ2Uoc3RyZWFtSWQsIGl0ZW0pKTsgfSk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vIFdlIHdhbnQgdG8gaXRlcmF0ZSBvdmVyIHRoZSBrZXlzLCBzaW5jZSB0aGUga2V5cyBhcmUgdGhlIHN0cmVhbSBpZHNcclxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6Zm9yaW5cclxuICAgICAgICBmb3IgKHZhciBzdHJlYW1JZCBpbiBzdHJlYW1zKSB7XHJcbiAgICAgICAgICAgIF9sb29wXzEoc3RyZWFtSWQpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5yZXBsYWNlU3RyZWFtaW5nUGFyYW1zID0gZnVuY3Rpb24gKGFyZ3MpIHtcclxuICAgICAgICB2YXIgc3RyZWFtcyA9IFtdO1xyXG4gICAgICAgIHZhciBzdHJlYW1JZHMgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIGFyZ3VtZW50ID0gYXJnc1tpXTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNPYnNlcnZhYmxlKGFyZ3VtZW50KSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHN0cmVhbUlkID0gdGhpcy5pbnZvY2F0aW9uSWQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmludm9jYXRpb25JZCsrO1xyXG4gICAgICAgICAgICAgICAgLy8gU3RvcmUgdGhlIHN0cmVhbSBmb3IgbGF0ZXIgdXNlXHJcbiAgICAgICAgICAgICAgICBzdHJlYW1zW3N0cmVhbUlkXSA9IGFyZ3VtZW50O1xyXG4gICAgICAgICAgICAgICAgc3RyZWFtSWRzLnB1c2goc3RyZWFtSWQudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgICAgICAgICAvLyByZW1vdmUgc3RyZWFtIGZyb20gYXJnc1xyXG4gICAgICAgICAgICAgICAgYXJncy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFtzdHJlYW1zLCBzdHJlYW1JZHNdO1xyXG4gICAgfTtcclxuICAgIEh1YkNvbm5lY3Rpb24ucHJvdG90eXBlLmlzT2JzZXJ2YWJsZSA9IGZ1bmN0aW9uIChhcmcpIHtcclxuICAgICAgICAvLyBUaGlzIGFsbG93cyBvdGhlciBzdHJlYW0gaW1wbGVtZW50YXRpb25zIHRvIGp1c3Qgd29yayAobGlrZSByeGpzKVxyXG4gICAgICAgIHJldHVybiBhcmcgJiYgYXJnLnN1YnNjcmliZSAmJiB0eXBlb2YgYXJnLnN1YnNjcmliZSA9PT0gXCJmdW5jdGlvblwiO1xyXG4gICAgfTtcclxuICAgIEh1YkNvbm5lY3Rpb24ucHJvdG90eXBlLmNyZWF0ZVN0cmVhbUludm9jYXRpb24gPSBmdW5jdGlvbiAobWV0aG9kTmFtZSwgYXJncywgc3RyZWFtSWRzKSB7XHJcbiAgICAgICAgdmFyIGludm9jYXRpb25JZCA9IHRoaXMuaW52b2NhdGlvbklkO1xyXG4gICAgICAgIHRoaXMuaW52b2NhdGlvbklkKys7XHJcbiAgICAgICAgaWYgKHN0cmVhbUlkcy5sZW5ndGggIT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGFyZ3VtZW50czogYXJncyxcclxuICAgICAgICAgICAgICAgIGludm9jYXRpb25JZDogaW52b2NhdGlvbklkLnRvU3RyaW5nKCksXHJcbiAgICAgICAgICAgICAgICBzdHJlYW1JZHM6IHN0cmVhbUlkcyxcclxuICAgICAgICAgICAgICAgIHRhcmdldDogbWV0aG9kTmFtZSxcclxuICAgICAgICAgICAgICAgIHR5cGU6IElIdWJQcm90b2NvbF8xLk1lc3NhZ2VUeXBlLlN0cmVhbUludm9jYXRpb24sXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgYXJndW1lbnRzOiBhcmdzLFxyXG4gICAgICAgICAgICAgICAgaW52b2NhdGlvbklkOiBpbnZvY2F0aW9uSWQudG9TdHJpbmcoKSxcclxuICAgICAgICAgICAgICAgIHRhcmdldDogbWV0aG9kTmFtZSxcclxuICAgICAgICAgICAgICAgIHR5cGU6IElIdWJQcm90b2NvbF8xLk1lc3NhZ2VUeXBlLlN0cmVhbUludm9jYXRpb24sXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEh1YkNvbm5lY3Rpb24ucHJvdG90eXBlLmNyZWF0ZUNhbmNlbEludm9jYXRpb24gPSBmdW5jdGlvbiAoaWQpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBpbnZvY2F0aW9uSWQ6IGlkLFxyXG4gICAgICAgICAgICB0eXBlOiBJSHViUHJvdG9jb2xfMS5NZXNzYWdlVHlwZS5DYW5jZWxJbnZvY2F0aW9uLFxyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgSHViQ29ubmVjdGlvbi5wcm90b3R5cGUuY3JlYXRlU3RyZWFtSXRlbU1lc3NhZ2UgPSBmdW5jdGlvbiAoaWQsIGl0ZW0pIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBpbnZvY2F0aW9uSWQ6IGlkLFxyXG4gICAgICAgICAgICBpdGVtOiBpdGVtLFxyXG4gICAgICAgICAgICB0eXBlOiBJSHViUHJvdG9jb2xfMS5NZXNzYWdlVHlwZS5TdHJlYW1JdGVtLFxyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgSHViQ29ubmVjdGlvbi5wcm90b3R5cGUuY3JlYXRlQ29tcGxldGlvbk1lc3NhZ2UgPSBmdW5jdGlvbiAoaWQsIGVycm9yLCByZXN1bHQpIHtcclxuICAgICAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvcixcclxuICAgICAgICAgICAgICAgIGludm9jYXRpb25JZDogaWQsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiBJSHViUHJvdG9jb2xfMS5NZXNzYWdlVHlwZS5Db21wbGV0aW9uLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBpbnZvY2F0aW9uSWQ6IGlkLFxyXG4gICAgICAgICAgICByZXN1bHQ6IHJlc3VsdCxcclxuICAgICAgICAgICAgdHlwZTogSUh1YlByb3RvY29sXzEuTWVzc2FnZVR5cGUuQ29tcGxldGlvbixcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuICAgIHJldHVybiBIdWJDb25uZWN0aW9uO1xyXG59KCkpO1xyXG5leHBvcnRzLkh1YkNvbm5lY3Rpb24gPSBIdWJDb25uZWN0aW9uO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1IdWJDb25uZWN0aW9uLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG4vLyBDb3B5cmlnaHQgKGMpIC5ORVQgRm91bmRhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xyXG4gICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXHJcbiAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIERlZmF1bHRSZWNvbm5lY3RQb2xpY3lfMSA9IHJlcXVpcmUoXCIuL0RlZmF1bHRSZWNvbm5lY3RQb2xpY3lcIik7XHJcbnZhciBIdHRwQ29ubmVjdGlvbl8xID0gcmVxdWlyZShcIi4vSHR0cENvbm5lY3Rpb25cIik7XHJcbnZhciBIdWJDb25uZWN0aW9uXzEgPSByZXF1aXJlKFwiLi9IdWJDb25uZWN0aW9uXCIpO1xyXG52YXIgSUxvZ2dlcl8xID0gcmVxdWlyZShcIi4vSUxvZ2dlclwiKTtcclxudmFyIEpzb25IdWJQcm90b2NvbF8xID0gcmVxdWlyZShcIi4vSnNvbkh1YlByb3RvY29sXCIpO1xyXG52YXIgTG9nZ2Vyc18xID0gcmVxdWlyZShcIi4vTG9nZ2Vyc1wiKTtcclxudmFyIFV0aWxzXzEgPSByZXF1aXJlKFwiLi9VdGlsc1wiKTtcclxuLy8gdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzXHJcbnZhciBMb2dMZXZlbE5hbWVNYXBwaW5nID0ge1xyXG4gICAgdHJhY2U6IElMb2dnZXJfMS5Mb2dMZXZlbC5UcmFjZSxcclxuICAgIGRlYnVnOiBJTG9nZ2VyXzEuTG9nTGV2ZWwuRGVidWcsXHJcbiAgICBpbmZvOiBJTG9nZ2VyXzEuTG9nTGV2ZWwuSW5mb3JtYXRpb24sXHJcbiAgICBpbmZvcm1hdGlvbjogSUxvZ2dlcl8xLkxvZ0xldmVsLkluZm9ybWF0aW9uLFxyXG4gICAgd2FybjogSUxvZ2dlcl8xLkxvZ0xldmVsLldhcm5pbmcsXHJcbiAgICB3YXJuaW5nOiBJTG9nZ2VyXzEuTG9nTGV2ZWwuV2FybmluZyxcclxuICAgIGVycm9yOiBJTG9nZ2VyXzEuTG9nTGV2ZWwuRXJyb3IsXHJcbiAgICBjcml0aWNhbDogSUxvZ2dlcl8xLkxvZ0xldmVsLkNyaXRpY2FsLFxyXG4gICAgbm9uZTogSUxvZ2dlcl8xLkxvZ0xldmVsLk5vbmUsXHJcbn07XHJcbmZ1bmN0aW9uIHBhcnNlTG9nTGV2ZWwobmFtZSkge1xyXG4gICAgLy8gQ2FzZS1pbnNlbnNpdGl2ZSBtYXRjaGluZyB2aWEgbG93ZXItY2FzaW5nXHJcbiAgICAvLyBZZXMsIEkga25vdyBjYXNlLWZvbGRpbmcgaXMgYSBjb21wbGljYXRlZCBwcm9ibGVtIGluIFVuaWNvZGUsIGJ1dCB3ZSBvbmx5IHN1cHBvcnRcclxuICAgIC8vIHRoZSBBU0NJSSBzdHJpbmdzIGRlZmluZWQgaW4gTG9nTGV2ZWxOYW1lTWFwcGluZyBhbnl3YXksIHNvIGl0J3MgZmluZSAtYW51cnNlLlxyXG4gICAgdmFyIG1hcHBpbmcgPSBMb2dMZXZlbE5hbWVNYXBwaW5nW25hbWUudG9Mb3dlckNhc2UoKV07XHJcbiAgICBpZiAodHlwZW9mIG1hcHBpbmcgIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICByZXR1cm4gbWFwcGluZztcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVua25vd24gbG9nIGxldmVsOiBcIiArIG5hbWUpO1xyXG4gICAgfVxyXG59XHJcbi8qKiBBIGJ1aWxkZXIgZm9yIGNvbmZpZ3VyaW5nIHtAbGluayBAbWljcm9zb2Z0L3NpZ25hbHIuSHViQ29ubmVjdGlvbn0gaW5zdGFuY2VzLiAqL1xyXG52YXIgSHViQ29ubmVjdGlvbkJ1aWxkZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBIdWJDb25uZWN0aW9uQnVpbGRlcigpIHtcclxuICAgIH1cclxuICAgIEh1YkNvbm5lY3Rpb25CdWlsZGVyLnByb3RvdHlwZS5jb25maWd1cmVMb2dnaW5nID0gZnVuY3Rpb24gKGxvZ2dpbmcpIHtcclxuICAgICAgICBVdGlsc18xLkFyZy5pc1JlcXVpcmVkKGxvZ2dpbmcsIFwibG9nZ2luZ1wiKTtcclxuICAgICAgICBpZiAoaXNMb2dnZXIobG9nZ2luZykpIHtcclxuICAgICAgICAgICAgdGhpcy5sb2dnZXIgPSBsb2dnaW5nO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgbG9nZ2luZyA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICB2YXIgbG9nTGV2ZWwgPSBwYXJzZUxvZ0xldmVsKGxvZ2dpbmcpO1xyXG4gICAgICAgICAgICB0aGlzLmxvZ2dlciA9IG5ldyBVdGlsc18xLkNvbnNvbGVMb2dnZXIobG9nTGV2ZWwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5sb2dnZXIgPSBuZXcgVXRpbHNfMS5Db25zb2xlTG9nZ2VyKGxvZ2dpbmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICBIdWJDb25uZWN0aW9uQnVpbGRlci5wcm90b3R5cGUud2l0aFVybCA9IGZ1bmN0aW9uICh1cmwsIHRyYW5zcG9ydFR5cGVPck9wdGlvbnMpIHtcclxuICAgICAgICBVdGlsc18xLkFyZy5pc1JlcXVpcmVkKHVybCwgXCJ1cmxcIik7XHJcbiAgICAgICAgdGhpcy51cmwgPSB1cmw7XHJcbiAgICAgICAgLy8gRmxvdy10eXBpbmcga25vd3Mgd2hlcmUgaXQncyBhdC4gU2luY2UgSHR0cFRyYW5zcG9ydFR5cGUgaXMgYSBudW1iZXIgYW5kIElIdHRwQ29ubmVjdGlvbk9wdGlvbnMgaXMgZ3VhcmFudGVlZFxyXG4gICAgICAgIC8vIHRvIGJlIGFuIG9iamVjdCwgd2Uga25vdyAoYXMgZG9lcyBUeXBlU2NyaXB0KSB0aGlzIGNvbXBhcmlzb24gaXMgYWxsIHdlIG5lZWQgdG8gZmlndXJlIG91dCB3aGljaCBvdmVybG9hZCB3YXMgY2FsbGVkLlxyXG4gICAgICAgIGlmICh0eXBlb2YgdHJhbnNwb3J0VHlwZU9yT3B0aW9ucyA9PT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgICAgICB0aGlzLmh0dHBDb25uZWN0aW9uT3B0aW9ucyA9IF9fYXNzaWduKHt9LCB0aGlzLmh0dHBDb25uZWN0aW9uT3B0aW9ucywgdHJhbnNwb3J0VHlwZU9yT3B0aW9ucyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmh0dHBDb25uZWN0aW9uT3B0aW9ucyA9IF9fYXNzaWduKHt9LCB0aGlzLmh0dHBDb25uZWN0aW9uT3B0aW9ucywgeyB0cmFuc3BvcnQ6IHRyYW5zcG9ydFR5cGVPck9wdGlvbnMgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIC8qKiBDb25maWd1cmVzIHRoZSB7QGxpbmsgQG1pY3Jvc29mdC9zaWduYWxyLkh1YkNvbm5lY3Rpb259IHRvIHVzZSB0aGUgc3BlY2lmaWVkIEh1YiBQcm90b2NvbC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0lIdWJQcm90b2NvbH0gcHJvdG9jb2wgVGhlIHtAbGluayBAbWljcm9zb2Z0L3NpZ25hbHIuSUh1YlByb3RvY29sfSBpbXBsZW1lbnRhdGlvbiB0byB1c2UuXHJcbiAgICAgKi9cclxuICAgIEh1YkNvbm5lY3Rpb25CdWlsZGVyLnByb3RvdHlwZS53aXRoSHViUHJvdG9jb2wgPSBmdW5jdGlvbiAocHJvdG9jb2wpIHtcclxuICAgICAgICBVdGlsc18xLkFyZy5pc1JlcXVpcmVkKHByb3RvY29sLCBcInByb3RvY29sXCIpO1xyXG4gICAgICAgIHRoaXMucHJvdG9jb2wgPSBwcm90b2NvbDtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICBIdWJDb25uZWN0aW9uQnVpbGRlci5wcm90b3R5cGUud2l0aEF1dG9tYXRpY1JlY29ubmVjdCA9IGZ1bmN0aW9uIChyZXRyeURlbGF5c09yUmVjb25uZWN0UG9saWN5KSB7XHJcbiAgICAgICAgaWYgKHRoaXMucmVjb25uZWN0UG9saWN5KSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkEgcmVjb25uZWN0UG9saWN5IGhhcyBhbHJlYWR5IGJlZW4gc2V0LlwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFyZXRyeURlbGF5c09yUmVjb25uZWN0UG9saWN5KSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVjb25uZWN0UG9saWN5ID0gbmV3IERlZmF1bHRSZWNvbm5lY3RQb2xpY3lfMS5EZWZhdWx0UmVjb25uZWN0UG9saWN5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocmV0cnlEZWxheXNPclJlY29ubmVjdFBvbGljeSkpIHtcclxuICAgICAgICAgICAgdGhpcy5yZWNvbm5lY3RQb2xpY3kgPSBuZXcgRGVmYXVsdFJlY29ubmVjdFBvbGljeV8xLkRlZmF1bHRSZWNvbm5lY3RQb2xpY3kocmV0cnlEZWxheXNPclJlY29ubmVjdFBvbGljeSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnJlY29ubmVjdFBvbGljeSA9IHJldHJ5RGVsYXlzT3JSZWNvbm5lY3RQb2xpY3k7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIC8qKiBDcmVhdGVzIGEge0BsaW5rIEBtaWNyb3NvZnQvc2lnbmFsci5IdWJDb25uZWN0aW9ufSBmcm9tIHRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgc3BlY2lmaWVkIGluIHRoaXMgYnVpbGRlci5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7SHViQ29ubmVjdGlvbn0gVGhlIGNvbmZpZ3VyZWQge0BsaW5rIEBtaWNyb3NvZnQvc2lnbmFsci5IdWJDb25uZWN0aW9ufS5cclxuICAgICAqL1xyXG4gICAgSHViQ29ubmVjdGlvbkJ1aWxkZXIucHJvdG90eXBlLmJ1aWxkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIElmIGh0dHBDb25uZWN0aW9uT3B0aW9ucyBoYXMgYSBsb2dnZXIsIHVzZSBpdC4gT3RoZXJ3aXNlLCBvdmVycmlkZSBpdCB3aXRoIHRoZSBvbmVcclxuICAgICAgICAvLyBwcm92aWRlZCB0byBjb25maWd1cmVMb2dnZXJcclxuICAgICAgICB2YXIgaHR0cENvbm5lY3Rpb25PcHRpb25zID0gdGhpcy5odHRwQ29ubmVjdGlvbk9wdGlvbnMgfHwge307XHJcbiAgICAgICAgLy8gSWYgaXQncyAnbnVsbCcsIHRoZSB1c2VyICoqZXhwbGljaXRseSoqIGFza2VkIGZvciBudWxsLCBkb24ndCBtZXNzIHdpdGggaXQuXHJcbiAgICAgICAgaWYgKGh0dHBDb25uZWN0aW9uT3B0aW9ucy5sb2dnZXIgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAvLyBJZiBvdXIgbG9nZ2VyIGlzIHVuZGVmaW5lZCBvciBudWxsLCB0aGF0J3MgT0ssIHRoZSBIdHRwQ29ubmVjdGlvbiBjb25zdHJ1Y3RvciB3aWxsIGhhbmRsZSBpdC5cclxuICAgICAgICAgICAgaHR0cENvbm5lY3Rpb25PcHRpb25zLmxvZ2dlciA9IHRoaXMubG9nZ2VyO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBOb3cgY3JlYXRlIHRoZSBjb25uZWN0aW9uXHJcbiAgICAgICAgaWYgKCF0aGlzLnVybCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgJ0h1YkNvbm5lY3Rpb25CdWlsZGVyLndpdGhVcmwnIG1ldGhvZCBtdXN0IGJlIGNhbGxlZCBiZWZvcmUgYnVpbGRpbmcgdGhlIGNvbm5lY3Rpb24uXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgY29ubmVjdGlvbiA9IG5ldyBIdHRwQ29ubmVjdGlvbl8xLkh0dHBDb25uZWN0aW9uKHRoaXMudXJsLCBodHRwQ29ubmVjdGlvbk9wdGlvbnMpO1xyXG4gICAgICAgIHJldHVybiBIdWJDb25uZWN0aW9uXzEuSHViQ29ubmVjdGlvbi5jcmVhdGUoY29ubmVjdGlvbiwgdGhpcy5sb2dnZXIgfHwgTG9nZ2Vyc18xLk51bGxMb2dnZXIuaW5zdGFuY2UsIHRoaXMucHJvdG9jb2wgfHwgbmV3IEpzb25IdWJQcm90b2NvbF8xLkpzb25IdWJQcm90b2NvbCgpLCB0aGlzLnJlY29ubmVjdFBvbGljeSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEh1YkNvbm5lY3Rpb25CdWlsZGVyO1xyXG59KCkpO1xyXG5leHBvcnRzLkh1YkNvbm5lY3Rpb25CdWlsZGVyID0gSHViQ29ubmVjdGlvbkJ1aWxkZXI7XHJcbmZ1bmN0aW9uIGlzTG9nZ2VyKGxvZ2dlcikge1xyXG4gICAgcmV0dXJuIGxvZ2dlci5sb2cgIT09IHVuZGVmaW5lZDtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1IdWJDb25uZWN0aW9uQnVpbGRlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuLy8gQ29weXJpZ2h0IChjKSAuTkVUIEZvdW5kYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbi8qKiBEZWZpbmVzIHRoZSB0eXBlIG9mIGEgSHViIE1lc3NhZ2UuICovXHJcbnZhciBNZXNzYWdlVHlwZTtcclxuKGZ1bmN0aW9uIChNZXNzYWdlVHlwZSkge1xyXG4gICAgLyoqIEluZGljYXRlcyB0aGUgbWVzc2FnZSBpcyBhbiBJbnZvY2F0aW9uIG1lc3NhZ2UgYW5kIGltcGxlbWVudHMgdGhlIHtAbGluayBAbWljcm9zb2Z0L3NpZ25hbHIuSW52b2NhdGlvbk1lc3NhZ2V9IGludGVyZmFjZS4gKi9cclxuICAgIE1lc3NhZ2VUeXBlW01lc3NhZ2VUeXBlW1wiSW52b2NhdGlvblwiXSA9IDFdID0gXCJJbnZvY2F0aW9uXCI7XHJcbiAgICAvKiogSW5kaWNhdGVzIHRoZSBtZXNzYWdlIGlzIGEgU3RyZWFtSXRlbSBtZXNzYWdlIGFuZCBpbXBsZW1lbnRzIHRoZSB7QGxpbmsgQG1pY3Jvc29mdC9zaWduYWxyLlN0cmVhbUl0ZW1NZXNzYWdlfSBpbnRlcmZhY2UuICovXHJcbiAgICBNZXNzYWdlVHlwZVtNZXNzYWdlVHlwZVtcIlN0cmVhbUl0ZW1cIl0gPSAyXSA9IFwiU3RyZWFtSXRlbVwiO1xyXG4gICAgLyoqIEluZGljYXRlcyB0aGUgbWVzc2FnZSBpcyBhIENvbXBsZXRpb24gbWVzc2FnZSBhbmQgaW1wbGVtZW50cyB0aGUge0BsaW5rIEBtaWNyb3NvZnQvc2lnbmFsci5Db21wbGV0aW9uTWVzc2FnZX0gaW50ZXJmYWNlLiAqL1xyXG4gICAgTWVzc2FnZVR5cGVbTWVzc2FnZVR5cGVbXCJDb21wbGV0aW9uXCJdID0gM10gPSBcIkNvbXBsZXRpb25cIjtcclxuICAgIC8qKiBJbmRpY2F0ZXMgdGhlIG1lc3NhZ2UgaXMgYSBTdHJlYW0gSW52b2NhdGlvbiBtZXNzYWdlIGFuZCBpbXBsZW1lbnRzIHRoZSB7QGxpbmsgQG1pY3Jvc29mdC9zaWduYWxyLlN0cmVhbUludm9jYXRpb25NZXNzYWdlfSBpbnRlcmZhY2UuICovXHJcbiAgICBNZXNzYWdlVHlwZVtNZXNzYWdlVHlwZVtcIlN0cmVhbUludm9jYXRpb25cIl0gPSA0XSA9IFwiU3RyZWFtSW52b2NhdGlvblwiO1xyXG4gICAgLyoqIEluZGljYXRlcyB0aGUgbWVzc2FnZSBpcyBhIENhbmNlbCBJbnZvY2F0aW9uIG1lc3NhZ2UgYW5kIGltcGxlbWVudHMgdGhlIHtAbGluayBAbWljcm9zb2Z0L3NpZ25hbHIuQ2FuY2VsSW52b2NhdGlvbk1lc3NhZ2V9IGludGVyZmFjZS4gKi9cclxuICAgIE1lc3NhZ2VUeXBlW01lc3NhZ2VUeXBlW1wiQ2FuY2VsSW52b2NhdGlvblwiXSA9IDVdID0gXCJDYW5jZWxJbnZvY2F0aW9uXCI7XHJcbiAgICAvKiogSW5kaWNhdGVzIHRoZSBtZXNzYWdlIGlzIGEgUGluZyBtZXNzYWdlIGFuZCBpbXBsZW1lbnRzIHRoZSB7QGxpbmsgQG1pY3Jvc29mdC9zaWduYWxyLlBpbmdNZXNzYWdlfSBpbnRlcmZhY2UuICovXHJcbiAgICBNZXNzYWdlVHlwZVtNZXNzYWdlVHlwZVtcIlBpbmdcIl0gPSA2XSA9IFwiUGluZ1wiO1xyXG4gICAgLyoqIEluZGljYXRlcyB0aGUgbWVzc2FnZSBpcyBhIENsb3NlIG1lc3NhZ2UgYW5kIGltcGxlbWVudHMgdGhlIHtAbGluayBAbWljcm9zb2Z0L3NpZ25hbHIuQ2xvc2VNZXNzYWdlfSBpbnRlcmZhY2UuICovXHJcbiAgICBNZXNzYWdlVHlwZVtNZXNzYWdlVHlwZVtcIkNsb3NlXCJdID0gN10gPSBcIkNsb3NlXCI7XHJcbn0pKE1lc3NhZ2VUeXBlID0gZXhwb3J0cy5NZXNzYWdlVHlwZSB8fCAoZXhwb3J0cy5NZXNzYWdlVHlwZSA9IHt9KSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUlIdWJQcm90b2NvbC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuLy8gQ29weXJpZ2h0IChjKSAuTkVUIEZvdW5kYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbi8vIFRoZXNlIHZhbHVlcyBhcmUgZGVzaWduZWQgdG8gbWF0Y2ggdGhlIEFTUC5ORVQgTG9nIExldmVscyBzaW5jZSB0aGF0J3MgdGhlIHBhdHRlcm4gd2UncmUgZW11bGF0aW5nIGhlcmUuXHJcbi8qKiBJbmRpY2F0ZXMgdGhlIHNldmVyaXR5IG9mIGEgbG9nIG1lc3NhZ2UuXHJcbiAqXHJcbiAqIExvZyBMZXZlbHMgYXJlIG9yZGVyZWQgaW4gaW5jcmVhc2luZyBzZXZlcml0eS4gU28gYERlYnVnYCBpcyBtb3JlIHNldmVyZSB0aGFuIGBUcmFjZWAsIGV0Yy5cclxuICovXHJcbnZhciBMb2dMZXZlbDtcclxuKGZ1bmN0aW9uIChMb2dMZXZlbCkge1xyXG4gICAgLyoqIExvZyBsZXZlbCBmb3IgdmVyeSBsb3cgc2V2ZXJpdHkgZGlhZ25vc3RpYyBtZXNzYWdlcy4gKi9cclxuICAgIExvZ0xldmVsW0xvZ0xldmVsW1wiVHJhY2VcIl0gPSAwXSA9IFwiVHJhY2VcIjtcclxuICAgIC8qKiBMb2cgbGV2ZWwgZm9yIGxvdyBzZXZlcml0eSBkaWFnbm9zdGljIG1lc3NhZ2VzLiAqL1xyXG4gICAgTG9nTGV2ZWxbTG9nTGV2ZWxbXCJEZWJ1Z1wiXSA9IDFdID0gXCJEZWJ1Z1wiO1xyXG4gICAgLyoqIExvZyBsZXZlbCBmb3IgaW5mb3JtYXRpb25hbCBkaWFnbm9zdGljIG1lc3NhZ2VzLiAqL1xyXG4gICAgTG9nTGV2ZWxbTG9nTGV2ZWxbXCJJbmZvcm1hdGlvblwiXSA9IDJdID0gXCJJbmZvcm1hdGlvblwiO1xyXG4gICAgLyoqIExvZyBsZXZlbCBmb3IgZGlhZ25vc3RpYyBtZXNzYWdlcyB0aGF0IGluZGljYXRlIGEgbm9uLWZhdGFsIHByb2JsZW0uICovXHJcbiAgICBMb2dMZXZlbFtMb2dMZXZlbFtcIldhcm5pbmdcIl0gPSAzXSA9IFwiV2FybmluZ1wiO1xyXG4gICAgLyoqIExvZyBsZXZlbCBmb3IgZGlhZ25vc3RpYyBtZXNzYWdlcyB0aGF0IGluZGljYXRlIGEgZmFpbHVyZSBpbiB0aGUgY3VycmVudCBvcGVyYXRpb24uICovXHJcbiAgICBMb2dMZXZlbFtMb2dMZXZlbFtcIkVycm9yXCJdID0gNF0gPSBcIkVycm9yXCI7XHJcbiAgICAvKiogTG9nIGxldmVsIGZvciBkaWFnbm9zdGljIG1lc3NhZ2VzIHRoYXQgaW5kaWNhdGUgYSBmYWlsdXJlIHRoYXQgd2lsbCB0ZXJtaW5hdGUgdGhlIGVudGlyZSBhcHBsaWNhdGlvbi4gKi9cclxuICAgIExvZ0xldmVsW0xvZ0xldmVsW1wiQ3JpdGljYWxcIl0gPSA1XSA9IFwiQ3JpdGljYWxcIjtcclxuICAgIC8qKiBUaGUgaGlnaGVzdCBwb3NzaWJsZSBsb2cgbGV2ZWwuIFVzZWQgd2hlbiBjb25maWd1cmluZyBsb2dnaW5nIHRvIGluZGljYXRlIHRoYXQgbm8gbG9nIG1lc3NhZ2VzIHNob3VsZCBiZSBlbWl0dGVkLiAqL1xyXG4gICAgTG9nTGV2ZWxbTG9nTGV2ZWxbXCJOb25lXCJdID0gNl0gPSBcIk5vbmVcIjtcclxufSkoTG9nTGV2ZWwgPSBleHBvcnRzLkxvZ0xldmVsIHx8IChleHBvcnRzLkxvZ0xldmVsID0ge30pKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SUxvZ2dlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuLy8gQ29weXJpZ2h0IChjKSAuTkVUIEZvdW5kYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbi8vIFRoaXMgd2lsbCBiZSB0cmVhdGVkIGFzIGEgYml0IGZsYWcgaW4gdGhlIGZ1dHVyZSwgc28gd2Uga2VlcCBpdCB1c2luZyBwb3dlci1vZi10d28gdmFsdWVzLlxyXG4vKiogU3BlY2lmaWVzIGEgc3BlY2lmaWMgSFRUUCB0cmFuc3BvcnQgdHlwZS4gKi9cclxudmFyIEh0dHBUcmFuc3BvcnRUeXBlO1xyXG4oZnVuY3Rpb24gKEh0dHBUcmFuc3BvcnRUeXBlKSB7XHJcbiAgICAvKiogU3BlY2lmaWVzIG5vIHRyYW5zcG9ydCBwcmVmZXJlbmNlLiAqL1xyXG4gICAgSHR0cFRyYW5zcG9ydFR5cGVbSHR0cFRyYW5zcG9ydFR5cGVbXCJOb25lXCJdID0gMF0gPSBcIk5vbmVcIjtcclxuICAgIC8qKiBTcGVjaWZpZXMgdGhlIFdlYlNvY2tldHMgdHJhbnNwb3J0LiAqL1xyXG4gICAgSHR0cFRyYW5zcG9ydFR5cGVbSHR0cFRyYW5zcG9ydFR5cGVbXCJXZWJTb2NrZXRzXCJdID0gMV0gPSBcIldlYlNvY2tldHNcIjtcclxuICAgIC8qKiBTcGVjaWZpZXMgdGhlIFNlcnZlci1TZW50IEV2ZW50cyB0cmFuc3BvcnQuICovXHJcbiAgICBIdHRwVHJhbnNwb3J0VHlwZVtIdHRwVHJhbnNwb3J0VHlwZVtcIlNlcnZlclNlbnRFdmVudHNcIl0gPSAyXSA9IFwiU2VydmVyU2VudEV2ZW50c1wiO1xyXG4gICAgLyoqIFNwZWNpZmllcyB0aGUgTG9uZyBQb2xsaW5nIHRyYW5zcG9ydC4gKi9cclxuICAgIEh0dHBUcmFuc3BvcnRUeXBlW0h0dHBUcmFuc3BvcnRUeXBlW1wiTG9uZ1BvbGxpbmdcIl0gPSA0XSA9IFwiTG9uZ1BvbGxpbmdcIjtcclxufSkoSHR0cFRyYW5zcG9ydFR5cGUgPSBleHBvcnRzLkh0dHBUcmFuc3BvcnRUeXBlIHx8IChleHBvcnRzLkh0dHBUcmFuc3BvcnRUeXBlID0ge30pKTtcclxuLyoqIFNwZWNpZmllcyB0aGUgdHJhbnNmZXIgZm9ybWF0IGZvciBhIGNvbm5lY3Rpb24uICovXHJcbnZhciBUcmFuc2ZlckZvcm1hdDtcclxuKGZ1bmN0aW9uIChUcmFuc2ZlckZvcm1hdCkge1xyXG4gICAgLyoqIFNwZWNpZmllcyB0aGF0IG9ubHkgdGV4dCBkYXRhIHdpbGwgYmUgdHJhbnNtaXR0ZWQgb3ZlciB0aGUgY29ubmVjdGlvbi4gKi9cclxuICAgIFRyYW5zZmVyRm9ybWF0W1RyYW5zZmVyRm9ybWF0W1wiVGV4dFwiXSA9IDFdID0gXCJUZXh0XCI7XHJcbiAgICAvKiogU3BlY2lmaWVzIHRoYXQgYmluYXJ5IGRhdGEgd2lsbCBiZSB0cmFuc21pdHRlZCBvdmVyIHRoZSBjb25uZWN0aW9uLiAqL1xyXG4gICAgVHJhbnNmZXJGb3JtYXRbVHJhbnNmZXJGb3JtYXRbXCJCaW5hcnlcIl0gPSAyXSA9IFwiQmluYXJ5XCI7XHJcbn0pKFRyYW5zZmVyRm9ybWF0ID0gZXhwb3J0cy5UcmFuc2ZlckZvcm1hdCB8fCAoZXhwb3J0cy5UcmFuc2ZlckZvcm1hdCA9IHt9KSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUlUcmFuc3BvcnQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8vIENvcHlyaWdodCAoYykgLk5FVCBGb3VuZGF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgSUh1YlByb3RvY29sXzEgPSByZXF1aXJlKFwiLi9JSHViUHJvdG9jb2xcIik7XHJcbnZhciBJTG9nZ2VyXzEgPSByZXF1aXJlKFwiLi9JTG9nZ2VyXCIpO1xyXG52YXIgSVRyYW5zcG9ydF8xID0gcmVxdWlyZShcIi4vSVRyYW5zcG9ydFwiKTtcclxudmFyIExvZ2dlcnNfMSA9IHJlcXVpcmUoXCIuL0xvZ2dlcnNcIik7XHJcbnZhciBUZXh0TWVzc2FnZUZvcm1hdF8xID0gcmVxdWlyZShcIi4vVGV4dE1lc3NhZ2VGb3JtYXRcIik7XHJcbnZhciBKU09OX0hVQl9QUk9UT0NPTF9OQU1FID0gXCJqc29uXCI7XHJcbi8qKiBJbXBsZW1lbnRzIHRoZSBKU09OIEh1YiBQcm90b2NvbC4gKi9cclxudmFyIEpzb25IdWJQcm90b2NvbCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEpzb25IdWJQcm90b2NvbCgpIHtcclxuICAgICAgICAvKiogQGluaGVyaXREb2MgKi9cclxuICAgICAgICB0aGlzLm5hbWUgPSBKU09OX0hVQl9QUk9UT0NPTF9OQU1FO1xyXG4gICAgICAgIC8qKiBAaW5oZXJpdERvYyAqL1xyXG4gICAgICAgIHRoaXMudmVyc2lvbiA9IDE7XHJcbiAgICAgICAgLyoqIEBpbmhlcml0RG9jICovXHJcbiAgICAgICAgdGhpcy50cmFuc2ZlckZvcm1hdCA9IElUcmFuc3BvcnRfMS5UcmFuc2ZlckZvcm1hdC5UZXh0O1xyXG4gICAgfVxyXG4gICAgLyoqIENyZWF0ZXMgYW4gYXJyYXkgb2Yge0BsaW5rIEBtaWNyb3NvZnQvc2lnbmFsci5IdWJNZXNzYWdlfSBvYmplY3RzIGZyb20gdGhlIHNwZWNpZmllZCBzZXJpYWxpemVkIHJlcHJlc2VudGF0aW9uLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dCBBIHN0cmluZyBjb250YWluaW5nIHRoZSBzZXJpYWxpemVkIHJlcHJlc2VudGF0aW9uLlxyXG4gICAgICogQHBhcmFtIHtJTG9nZ2VyfSBsb2dnZXIgQSBsb2dnZXIgdGhhdCB3aWxsIGJlIHVzZWQgdG8gbG9nIG1lc3NhZ2VzIHRoYXQgb2NjdXIgZHVyaW5nIHBhcnNpbmcuXHJcbiAgICAgKi9cclxuICAgIEpzb25IdWJQcm90b2NvbC5wcm90b3R5cGUucGFyc2VNZXNzYWdlcyA9IGZ1bmN0aW9uIChpbnB1dCwgbG9nZ2VyKSB7XHJcbiAgICAgICAgLy8gVGhlIGludGVyZmFjZSBkb2VzIGFsbG93IFwiQXJyYXlCdWZmZXJcIiB0byBiZSBwYXNzZWQgaW4sIGJ1dCB0aGlzIGltcGxlbWVudGF0aW9uIGRvZXMgbm90LiBTbyBsZXQncyB0aHJvdyBhIHVzZWZ1bCBlcnJvci5cclxuICAgICAgICBpZiAodHlwZW9mIGlucHV0ICE9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgaW5wdXQgZm9yIEpTT04gaHViIHByb3RvY29sLiBFeHBlY3RlZCBhIHN0cmluZy5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghaW5wdXQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobG9nZ2VyID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGxvZ2dlciA9IExvZ2dlcnNfMS5OdWxsTG9nZ2VyLmluc3RhbmNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBQYXJzZSB0aGUgbWVzc2FnZXNcclxuICAgICAgICB2YXIgbWVzc2FnZXMgPSBUZXh0TWVzc2FnZUZvcm1hdF8xLlRleHRNZXNzYWdlRm9ybWF0LnBhcnNlKGlucHV0KTtcclxuICAgICAgICB2YXIgaHViTWVzc2FnZXMgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIG1lc3NhZ2VzXzEgPSBtZXNzYWdlczsgX2kgPCBtZXNzYWdlc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgbWVzc2FnZSA9IG1lc3NhZ2VzXzFbX2ldO1xyXG4gICAgICAgICAgICB2YXIgcGFyc2VkTWVzc2FnZSA9IEpTT04ucGFyc2UobWVzc2FnZSk7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcGFyc2VkTWVzc2FnZS50eXBlICE9PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHBheWxvYWQuXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHN3aXRjaCAocGFyc2VkTWVzc2FnZS50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIElIdWJQcm90b2NvbF8xLk1lc3NhZ2VUeXBlLkludm9jYXRpb246XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0ludm9jYXRpb25NZXNzYWdlKHBhcnNlZE1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBJSHViUHJvdG9jb2xfMS5NZXNzYWdlVHlwZS5TdHJlYW1JdGVtOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNTdHJlYW1JdGVtTWVzc2FnZShwYXJzZWRNZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgSUh1YlByb3RvY29sXzEuTWVzc2FnZVR5cGUuQ29tcGxldGlvbjpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzQ29tcGxldGlvbk1lc3NhZ2UocGFyc2VkTWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIElIdWJQcm90b2NvbF8xLk1lc3NhZ2VUeXBlLlBpbmc6XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gU2luZ2xlIHZhbHVlLCBubyBuZWVkIHRvIHZhbGlkYXRlXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIElIdWJQcm90b2NvbF8xLk1lc3NhZ2VUeXBlLkNsb3NlOlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEFsbCBvcHRpb25hbCB2YWx1ZXMsIG5vIG5lZWQgdG8gdmFsaWRhdGVcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gRnV0dXJlIHByb3RvY29sIGNoYW5nZXMgY2FuIGFkZCBtZXNzYWdlIHR5cGVzLCBvbGQgY2xpZW50cyBjYW4gaWdub3JlIHRoZW1cclxuICAgICAgICAgICAgICAgICAgICBsb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5JbmZvcm1hdGlvbiwgXCJVbmtub3duIG1lc3NhZ2UgdHlwZSAnXCIgKyBwYXJzZWRNZXNzYWdlLnR5cGUgKyBcIicgaWdub3JlZC5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaHViTWVzc2FnZXMucHVzaChwYXJzZWRNZXNzYWdlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGh1Yk1lc3NhZ2VzO1xyXG4gICAgfTtcclxuICAgIC8qKiBXcml0ZXMgdGhlIHNwZWNpZmllZCB7QGxpbmsgQG1pY3Jvc29mdC9zaWduYWxyLkh1Yk1lc3NhZ2V9IHRvIGEgc3RyaW5nIGFuZCByZXR1cm5zIGl0LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7SHViTWVzc2FnZX0gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byB3cml0ZS5cclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IEEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIHNlcmlhbGl6ZWQgcmVwcmVzZW50YXRpb24gb2YgdGhlIG1lc3NhZ2UuXHJcbiAgICAgKi9cclxuICAgIEpzb25IdWJQcm90b2NvbC5wcm90b3R5cGUud3JpdGVNZXNzYWdlID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcclxuICAgICAgICByZXR1cm4gVGV4dE1lc3NhZ2VGb3JtYXRfMS5UZXh0TWVzc2FnZUZvcm1hdC53cml0ZShKU09OLnN0cmluZ2lmeShtZXNzYWdlKSk7XHJcbiAgICB9O1xyXG4gICAgSnNvbkh1YlByb3RvY29sLnByb3RvdHlwZS5pc0ludm9jYXRpb25NZXNzYWdlID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcclxuICAgICAgICB0aGlzLmFzc2VydE5vdEVtcHR5U3RyaW5nKG1lc3NhZ2UudGFyZ2V0LCBcIkludmFsaWQgcGF5bG9hZCBmb3IgSW52b2NhdGlvbiBtZXNzYWdlLlwiKTtcclxuICAgICAgICBpZiAobWVzc2FnZS5pbnZvY2F0aW9uSWQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmFzc2VydE5vdEVtcHR5U3RyaW5nKG1lc3NhZ2UuaW52b2NhdGlvbklkLCBcIkludmFsaWQgcGF5bG9hZCBmb3IgSW52b2NhdGlvbiBtZXNzYWdlLlwiKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgSnNvbkh1YlByb3RvY29sLnByb3RvdHlwZS5pc1N0cmVhbUl0ZW1NZXNzYWdlID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcclxuICAgICAgICB0aGlzLmFzc2VydE5vdEVtcHR5U3RyaW5nKG1lc3NhZ2UuaW52b2NhdGlvbklkLCBcIkludmFsaWQgcGF5bG9hZCBmb3IgU3RyZWFtSXRlbSBtZXNzYWdlLlwiKTtcclxuICAgICAgICBpZiAobWVzc2FnZS5pdGVtID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBwYXlsb2FkIGZvciBTdHJlYW1JdGVtIG1lc3NhZ2UuXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBKc29uSHViUHJvdG9jb2wucHJvdG90eXBlLmlzQ29tcGxldGlvbk1lc3NhZ2UgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xyXG4gICAgICAgIGlmIChtZXNzYWdlLnJlc3VsdCAmJiBtZXNzYWdlLmVycm9yKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgcGF5bG9hZCBmb3IgQ29tcGxldGlvbiBtZXNzYWdlLlwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFtZXNzYWdlLnJlc3VsdCAmJiBtZXNzYWdlLmVycm9yKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXNzZXJ0Tm90RW1wdHlTdHJpbmcobWVzc2FnZS5lcnJvciwgXCJJbnZhbGlkIHBheWxvYWQgZm9yIENvbXBsZXRpb24gbWVzc2FnZS5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYXNzZXJ0Tm90RW1wdHlTdHJpbmcobWVzc2FnZS5pbnZvY2F0aW9uSWQsIFwiSW52YWxpZCBwYXlsb2FkIGZvciBDb21wbGV0aW9uIG1lc3NhZ2UuXCIpO1xyXG4gICAgfTtcclxuICAgIEpzb25IdWJQcm90b2NvbC5wcm90b3R5cGUuYXNzZXJ0Tm90RW1wdHlTdHJpbmcgPSBmdW5jdGlvbiAodmFsdWUsIGVycm9yTWVzc2FnZSkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwic3RyaW5nXCIgfHwgdmFsdWUgPT09IFwiXCIpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yTWVzc2FnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBKc29uSHViUHJvdG9jb2w7XHJcbn0oKSk7XHJcbmV4cG9ydHMuSnNvbkh1YlByb3RvY29sID0gSnNvbkh1YlByb3RvY29sO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1Kc29uSHViUHJvdG9jb2wuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8vIENvcHlyaWdodCAoYykgLk5FVCBGb3VuZGF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG4vKiogQSBsb2dnZXIgdGhhdCBkb2VzIG5vdGhpbmcgd2hlbiBsb2cgbWVzc2FnZXMgYXJlIHNlbnQgdG8gaXQuICovXHJcbnZhciBOdWxsTG9nZ2VyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gTnVsbExvZ2dlcigpIHtcclxuICAgIH1cclxuICAgIC8qKiBAaW5oZXJpdERvYyAqL1xyXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXHJcbiAgICBOdWxsTG9nZ2VyLnByb3RvdHlwZS5sb2cgPSBmdW5jdGlvbiAoX2xvZ0xldmVsLCBfbWVzc2FnZSkge1xyXG4gICAgfTtcclxuICAgIC8qKiBUaGUgc2luZ2xldG9uIGluc3RhbmNlIG9mIHRoZSB7QGxpbmsgQG1pY3Jvc29mdC9zaWduYWxyLk51bGxMb2dnZXJ9LiAqL1xyXG4gICAgTnVsbExvZ2dlci5pbnN0YW5jZSA9IG5ldyBOdWxsTG9nZ2VyKCk7XHJcbiAgICByZXR1cm4gTnVsbExvZ2dlcjtcclxufSgpKTtcclxuZXhwb3J0cy5OdWxsTG9nZ2VyID0gTnVsbExvZ2dlcjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TG9nZ2Vycy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuLy8gQ29weXJpZ2h0IChjKSAuTkVUIEZvdW5kYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG52YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcclxuICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxyXG4gICAgICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59O1xyXG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUocmVzdWx0LnZhbHVlKTsgfSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59O1xyXG52YXIgX19nZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIEFib3J0Q29udHJvbGxlcl8xID0gcmVxdWlyZShcIi4vQWJvcnRDb250cm9sbGVyXCIpO1xyXG52YXIgRXJyb3JzXzEgPSByZXF1aXJlKFwiLi9FcnJvcnNcIik7XHJcbnZhciBJTG9nZ2VyXzEgPSByZXF1aXJlKFwiLi9JTG9nZ2VyXCIpO1xyXG52YXIgSVRyYW5zcG9ydF8xID0gcmVxdWlyZShcIi4vSVRyYW5zcG9ydFwiKTtcclxudmFyIFV0aWxzXzEgPSByZXF1aXJlKFwiLi9VdGlsc1wiKTtcclxuLy8gTm90IGV4cG9ydGVkIGZyb20gJ2luZGV4JywgdGhpcyB0eXBlIGlzIGludGVybmFsLlxyXG4vKiogQHByaXZhdGUgKi9cclxudmFyIExvbmdQb2xsaW5nVHJhbnNwb3J0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gTG9uZ1BvbGxpbmdUcmFuc3BvcnQoaHR0cENsaWVudCwgYWNjZXNzVG9rZW5GYWN0b3J5LCBsb2dnZXIsIGxvZ01lc3NhZ2VDb250ZW50LCB3aXRoQ3JlZGVudGlhbHMsIGhlYWRlcnMpIHtcclxuICAgICAgICB0aGlzLmh0dHBDbGllbnQgPSBodHRwQ2xpZW50O1xyXG4gICAgICAgIHRoaXMuYWNjZXNzVG9rZW5GYWN0b3J5ID0gYWNjZXNzVG9rZW5GYWN0b3J5O1xyXG4gICAgICAgIHRoaXMubG9nZ2VyID0gbG9nZ2VyO1xyXG4gICAgICAgIHRoaXMucG9sbEFib3J0ID0gbmV3IEFib3J0Q29udHJvbGxlcl8xLkFib3J0Q29udHJvbGxlcigpO1xyXG4gICAgICAgIHRoaXMubG9nTWVzc2FnZUNvbnRlbnQgPSBsb2dNZXNzYWdlQ29udGVudDtcclxuICAgICAgICB0aGlzLndpdGhDcmVkZW50aWFscyA9IHdpdGhDcmVkZW50aWFscztcclxuICAgICAgICB0aGlzLmhlYWRlcnMgPSBoZWFkZXJzO1xyXG4gICAgICAgIHRoaXMucnVubmluZyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMub25yZWNlaXZlID0gbnVsbDtcclxuICAgICAgICB0aGlzLm9uY2xvc2UgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KExvbmdQb2xsaW5nVHJhbnNwb3J0LnByb3RvdHlwZSwgXCJwb2xsQWJvcnRlZFwiLCB7XHJcbiAgICAgICAgLy8gVGhpcyBpcyBhbiBpbnRlcm5hbCB0eXBlLCBub3QgZXhwb3J0ZWQgZnJvbSAnaW5kZXgnIHNvIHRoaXMgaXMgcmVhbGx5IGp1c3QgaW50ZXJuYWwuXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBvbGxBYm9ydC5hYm9ydGVkO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgTG9uZ1BvbGxpbmdUcmFuc3BvcnQucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiAodXJsLCB0cmFuc2ZlckZvcm1hdCkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIF9hLCBfYiwgbmFtZSwgdmFsdWUsIGhlYWRlcnMsIHBvbGxPcHRpb25zLCB0b2tlbiwgcG9sbFVybCwgcmVzcG9uc2U7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2MpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFV0aWxzXzEuQXJnLmlzUmVxdWlyZWQodXJsLCBcInVybFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgVXRpbHNfMS5BcmcuaXNSZXF1aXJlZCh0cmFuc2ZlckZvcm1hdCwgXCJ0cmFuc2ZlckZvcm1hdFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgVXRpbHNfMS5BcmcuaXNJbih0cmFuc2ZlckZvcm1hdCwgSVRyYW5zcG9ydF8xLlRyYW5zZmVyRm9ybWF0LCBcInRyYW5zZmVyRm9ybWF0XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVybCA9IHVybDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5UcmFjZSwgXCIoTG9uZ1BvbGxpbmcgdHJhbnNwb3J0KSBDb25uZWN0aW5nLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWxsb3cgYmluYXJ5IGZvcm1hdCBvbiBOb2RlIGFuZCBCcm93c2VycyB0aGF0IHN1cHBvcnQgYmluYXJ5IGNvbnRlbnQgKGluZGljYXRlZCBieSB0aGUgcHJlc2VuY2Ugb2YgcmVzcG9uc2VUeXBlIHByb3BlcnR5KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHJhbnNmZXJGb3JtYXQgPT09IElUcmFuc3BvcnRfMS5UcmFuc2ZlckZvcm1hdC5CaW5hcnkgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIG5ldyBYTUxIdHRwUmVxdWVzdCgpLnJlc3BvbnNlVHlwZSAhPT0gXCJzdHJpbmdcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkJpbmFyeSBwcm90b2NvbHMgb3ZlciBYbWxIdHRwUmVxdWVzdCBub3QgaW1wbGVtZW50aW5nIGFkdmFuY2VkIGZlYXR1cmVzIGFyZSBub3Qgc3VwcG9ydGVkLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYiA9IFV0aWxzXzEuZ2V0VXNlckFnZW50SGVhZGVyKCksIG5hbWUgPSBfYlswXSwgdmFsdWUgPSBfYlsxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVycyA9IF9fYXNzaWduKChfYSA9IHt9LCBfYVtuYW1lXSA9IHZhbHVlLCBfYSksIHRoaXMuaGVhZGVycyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvbGxPcHRpb25zID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWJvcnRTaWduYWw6IHRoaXMucG9sbEFib3J0LnNpZ25hbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lb3V0OiAxMDAwMDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMud2l0aENyZWRlbnRpYWxzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHJhbnNmZXJGb3JtYXQgPT09IElUcmFuc3BvcnRfMS5UcmFuc2ZlckZvcm1hdC5CaW5hcnkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvbGxPcHRpb25zLnJlc3BvbnNlVHlwZSA9IFwiYXJyYXlidWZmZXJcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmdldEFjY2Vzc1Rva2VuKCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW4gPSBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlSGVhZGVyVG9rZW4ocG9sbE9wdGlvbnMsIHRva2VuKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9sbFVybCA9IHVybCArIFwiJl89XCIgKyBEYXRlLm5vdygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLlRyYWNlLCBcIihMb25nUG9sbGluZyB0cmFuc3BvcnQpIHBvbGxpbmc6IFwiICsgcG9sbFVybCArIFwiLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5odHRwQ2xpZW50LmdldChwb2xsVXJsLCBwb2xsT3B0aW9ucyldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXNDb2RlICE9PSAyMDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuRXJyb3IsIFwiKExvbmdQb2xsaW5nIHRyYW5zcG9ydCkgVW5leHBlY3RlZCByZXNwb25zZSBjb2RlOiBcIiArIHJlc3BvbnNlLnN0YXR1c0NvZGUgKyBcIi5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBNYXJrIHJ1bm5pbmcgYXMgZmFsc2Ugc28gdGhhdCB0aGUgcG9sbCBpbW1lZGlhdGVseSBlbmRzIGFuZCBydW5zIHRoZSBjbG9zZSBsb2dpY1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZUVycm9yID0gbmV3IEVycm9yc18xLkh0dHBFcnJvcihyZXNwb25zZS5zdGF0dXNUZXh0IHx8IFwiXCIsIHJlc3BvbnNlLnN0YXR1c0NvZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ydW5uaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJ1bm5pbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVjZWl2aW5nID0gdGhpcy5wb2xsKHRoaXMudXJsLCBwb2xsT3B0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgTG9uZ1BvbGxpbmdUcmFuc3BvcnQucHJvdG90eXBlLmdldEFjY2Vzc1Rva2VuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmFjY2Vzc1Rva2VuRmFjdG9yeSkgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuYWNjZXNzVG9rZW5GYWN0b3J5KCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIF9hLnNlbnQoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOiByZXR1cm4gWzIgLypyZXR1cm4qLywgbnVsbF07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIExvbmdQb2xsaW5nVHJhbnNwb3J0LnByb3RvdHlwZS51cGRhdGVIZWFkZXJUb2tlbiA9IGZ1bmN0aW9uIChyZXF1ZXN0LCB0b2tlbikge1xyXG4gICAgICAgIGlmICghcmVxdWVzdC5oZWFkZXJzKSB7XHJcbiAgICAgICAgICAgIHJlcXVlc3QuaGVhZGVycyA9IHt9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodG9rZW4pIHtcclxuICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXN0cmluZy1saXRlcmFsXHJcbiAgICAgICAgICAgIHJlcXVlc3QuaGVhZGVyc1tcIkF1dGhvcml6YXRpb25cIl0gPSBcIkJlYXJlciBcIiArIHRva2VuO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1zdHJpbmctbGl0ZXJhbFxyXG4gICAgICAgIGlmIChyZXF1ZXN0LmhlYWRlcnNbXCJBdXRob3JpemF0aW9uXCJdKSB7XHJcbiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1zdHJpbmctbGl0ZXJhbFxyXG4gICAgICAgICAgICBkZWxldGUgcmVxdWVzdC5oZWFkZXJzW1wiQXV0aG9yaXphdGlvblwiXTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgTG9uZ1BvbGxpbmdUcmFuc3BvcnQucHJvdG90eXBlLnBvbGwgPSBmdW5jdGlvbiAodXJsLCBwb2xsT3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHRva2VuLCBwb2xsVXJsLCByZXNwb25zZSwgZV8xO1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS50cnlzLnB1c2goWzAsICwgOCwgOV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMucnVubmluZykgcmV0dXJuIFszIC8qYnJlYWsqLywgN107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuZ2V0QWNjZXNzVG9rZW4oKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2tlbiA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVIZWFkZXJUb2tlbihwb2xsT3B0aW9ucywgdG9rZW4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDM7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS50cnlzLnB1c2goWzMsIDUsICwgNl0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb2xsVXJsID0gdXJsICsgXCImXz1cIiArIERhdGUubm93KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuVHJhY2UsIFwiKExvbmdQb2xsaW5nIHRyYW5zcG9ydCkgcG9sbGluZzogXCIgKyBwb2xsVXJsICsgXCIuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmh0dHBDbGllbnQuZ2V0KHBvbGxVcmwsIHBvbGxPcHRpb25zKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1c0NvZGUgPT09IDIwNCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5JbmZvcm1hdGlvbiwgXCIoTG9uZ1BvbGxpbmcgdHJhbnNwb3J0KSBQb2xsIHRlcm1pbmF0ZWQgYnkgc2VydmVyLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucnVubmluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHJlc3BvbnNlLnN0YXR1c0NvZGUgIT09IDIwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5FcnJvciwgXCIoTG9uZ1BvbGxpbmcgdHJhbnNwb3J0KSBVbmV4cGVjdGVkIHJlc3BvbnNlIGNvZGU6IFwiICsgcmVzcG9uc2Uuc3RhdHVzQ29kZSArIFwiLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVuZXhwZWN0ZWQgc3RhdHVzIGNvZGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VFcnJvciA9IG5ldyBFcnJvcnNfMS5IdHRwRXJyb3IocmVzcG9uc2Uuc3RhdHVzVGV4dCB8fCBcIlwiLCByZXNwb25zZS5zdGF0dXNDb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucnVubmluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUHJvY2VzcyB0aGUgcmVzcG9uc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5jb250ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5UcmFjZSwgXCIoTG9uZ1BvbGxpbmcgdHJhbnNwb3J0KSBkYXRhIHJlY2VpdmVkLiBcIiArIFV0aWxzXzEuZ2V0RGF0YURldGFpbChyZXNwb25zZS5jb250ZW50LCB0aGlzLmxvZ01lc3NhZ2VDb250ZW50KSArIFwiLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vbnJlY2VpdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbnJlY2VpdmUocmVzcG9uc2UuY29udGVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBhbm90aGVyIHdheSB0aW1lb3V0IG1hbmlmZXN0LlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuVHJhY2UsIFwiKExvbmdQb2xsaW5nIHRyYW5zcG9ydCkgUG9sbCB0aW1lZCBvdXQsIHJlaXNzdWluZy5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNl07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlXzEgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5ydW5uaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBMb2cgYnV0IGRpc3JlZ2FyZCBlcnJvcnMgdGhhdCBvY2N1ciBhZnRlciBzdG9wcGluZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5UcmFjZSwgXCIoTG9uZ1BvbGxpbmcgdHJhbnNwb3J0KSBQb2xsIGVycm9yZWQgYWZ0ZXIgc2h1dGRvd246IFwiICsgZV8xLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVfMSBpbnN0YW5jZW9mIEVycm9yc18xLlRpbWVvdXRFcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElnbm9yZSB0aW1lb3V0cyBhbmQgcmVpc3N1ZSB0aGUgcG9sbC5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLlRyYWNlLCBcIihMb25nUG9sbGluZyB0cmFuc3BvcnQpIFBvbGwgdGltZWQgb3V0LCByZWlzc3VpbmcuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2xvc2UgdGhlIGNvbm5lY3Rpb24gd2l0aCB0aGUgZXJyb3IgYXMgdGhlIHJlc3VsdC5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb3NlRXJyb3IgPSBlXzE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ydW5uaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNl07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OiByZXR1cm4gWzMgLypicmVhayovLCAxXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDc6IHJldHVybiBbMyAvKmJyZWFrKi8sIDldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgODpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5UcmFjZSwgXCIoTG9uZ1BvbGxpbmcgdHJhbnNwb3J0KSBQb2xsaW5nIGNvbXBsZXRlLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2Ugd2lsbCByZWFjaCBoZXJlIHdpdGggcG9sbEFib3J0ZWQ9PWZhbHNlIHdoZW4gdGhlIHNlcnZlciByZXR1cm5lZCBhIHJlc3BvbnNlIGNhdXNpbmcgdGhlIHRyYW5zcG9ydCB0byBzdG9wLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiBwb2xsQWJvcnRlZD09dHJ1ZSB0aGVuIGNsaWVudCBpbml0aWF0ZWQgdGhlIHN0b3AgYW5kIHRoZSBzdG9wIG1ldGhvZCB3aWxsIHJhaXNlIHRoZSBjbG9zZSBldmVudCBhZnRlciBERUxFVEUgaXMgc2VudC5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnBvbGxBYm9ydGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJhaXNlT25DbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNyAvKmVuZGZpbmFsbHkqL107XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA5OiByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIExvbmdQb2xsaW5nVHJhbnNwb3J0LnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5ydW5uaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIkNhbm5vdCBzZW5kIHVudGlsIHRoZSB0cmFuc3BvcnQgaXMgY29ubmVjdGVkXCIpKV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgVXRpbHNfMS5zZW5kTWVzc2FnZSh0aGlzLmxvZ2dlciwgXCJMb25nUG9sbGluZ1wiLCB0aGlzLmh0dHBDbGllbnQsIHRoaXMudXJsLCB0aGlzLmFjY2Vzc1Rva2VuRmFjdG9yeSwgZGF0YSwgdGhpcy5sb2dNZXNzYWdlQ29udGVudCwgdGhpcy53aXRoQ3JlZGVudGlhbHMsIHRoaXMuaGVhZGVycyldO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBMb25nUG9sbGluZ1RyYW5zcG9ydC5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBoZWFkZXJzLCBfYSwgbmFtZV8xLCB2YWx1ZSwgZGVsZXRlT3B0aW9ucywgdG9rZW47XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuVHJhY2UsIFwiKExvbmdQb2xsaW5nIHRyYW5zcG9ydCkgU3RvcHBpbmcgcG9sbGluZy5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRlbGwgcmVjZWl2aW5nIGxvb3AgdG8gc3RvcCwgYWJvcnQgYW55IGN1cnJlbnQgcmVxdWVzdCwgYW5kIHRoZW4gd2FpdCBmb3IgaXQgdG8gZmluaXNoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucnVubmluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBvbGxBYm9ydC5hYm9ydCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYi50cnlzLnB1c2goWzEsICwgNSwgNl0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnJlY2VpdmluZ107XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNlbmQgREVMRVRFIHRvIGNsZWFuIHVwIGxvbmcgcG9sbGluZyBvbiB0aGUgc2VydmVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuVHJhY2UsIFwiKExvbmdQb2xsaW5nIHRyYW5zcG9ydCkgc2VuZGluZyBERUxFVEUgcmVxdWVzdCB0byBcIiArIHRoaXMudXJsICsgXCIuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gVXRpbHNfMS5nZXRVc2VyQWdlbnRIZWFkZXIoKSwgbmFtZV8xID0gX2FbMF0sIHZhbHVlID0gX2FbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnNbbmFtZV8xXSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGVPcHRpb25zID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogX19hc3NpZ24oe30sIGhlYWRlcnMsIHRoaXMuaGVhZGVycyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMud2l0aENyZWRlbnRpYWxzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmdldEFjY2Vzc1Rva2VuKCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW4gPSBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlSGVhZGVyVG9rZW4oZGVsZXRlT3B0aW9ucywgdG9rZW4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmh0dHBDbGllbnQuZGVsZXRlKHRoaXMudXJsLCBkZWxldGVPcHRpb25zKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuVHJhY2UsIFwiKExvbmdQb2xsaW5nIHRyYW5zcG9ydCkgREVMRVRFIHJlcXVlc3Qgc2VudC5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDZdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5UcmFjZSwgXCIoTG9uZ1BvbGxpbmcgdHJhbnNwb3J0KSBTdG9wIGZpbmlzaGVkLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmFpc2UgY2xvc2UgZXZlbnQgaGVyZSBpbnN0ZWFkIG9mIGluIHBvbGxpbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSXQgbmVlZHMgdG8gaGFwcGVuIGFmdGVyIHRoZSBERUxFVEUgcmVxdWVzdCBpcyBzZW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmFpc2VPbkNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNyAvKmVuZGZpbmFsbHkqL107XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OiByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIExvbmdQb2xsaW5nVHJhbnNwb3J0LnByb3RvdHlwZS5yYWlzZU9uQ2xvc2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMub25jbG9zZSkge1xyXG4gICAgICAgICAgICB2YXIgbG9nTWVzc2FnZSA9IFwiKExvbmdQb2xsaW5nIHRyYW5zcG9ydCkgRmlyaW5nIG9uY2xvc2UgZXZlbnQuXCI7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNsb3NlRXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIGxvZ01lc3NhZ2UgKz0gXCIgRXJyb3I6IFwiICsgdGhpcy5jbG9zZUVycm9yO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuVHJhY2UsIGxvZ01lc3NhZ2UpO1xyXG4gICAgICAgICAgICB0aGlzLm9uY2xvc2UodGhpcy5jbG9zZUVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIExvbmdQb2xsaW5nVHJhbnNwb3J0O1xyXG59KCkpO1xyXG5leHBvcnRzLkxvbmdQb2xsaW5nVHJhbnNwb3J0ID0gTG9uZ1BvbGxpbmdUcmFuc3BvcnQ7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUxvbmdQb2xsaW5nVHJhbnNwb3J0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG4vLyBDb3B5cmlnaHQgKGMpIC5ORVQgRm91bmRhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xyXG4gICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXHJcbiAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn07XHJcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZShyZXN1bHQudmFsdWUpOyB9KS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn07XHJcbnZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgSUxvZ2dlcl8xID0gcmVxdWlyZShcIi4vSUxvZ2dlclwiKTtcclxudmFyIElUcmFuc3BvcnRfMSA9IHJlcXVpcmUoXCIuL0lUcmFuc3BvcnRcIik7XHJcbnZhciBVdGlsc18xID0gcmVxdWlyZShcIi4vVXRpbHNcIik7XHJcbi8qKiBAcHJpdmF0ZSAqL1xyXG52YXIgU2VydmVyU2VudEV2ZW50c1RyYW5zcG9ydCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFNlcnZlclNlbnRFdmVudHNUcmFuc3BvcnQoaHR0cENsaWVudCwgYWNjZXNzVG9rZW5GYWN0b3J5LCBsb2dnZXIsIGxvZ01lc3NhZ2VDb250ZW50LCBldmVudFNvdXJjZUNvbnN0cnVjdG9yLCB3aXRoQ3JlZGVudGlhbHMsIGhlYWRlcnMpIHtcclxuICAgICAgICB0aGlzLmh0dHBDbGllbnQgPSBodHRwQ2xpZW50O1xyXG4gICAgICAgIHRoaXMuYWNjZXNzVG9rZW5GYWN0b3J5ID0gYWNjZXNzVG9rZW5GYWN0b3J5O1xyXG4gICAgICAgIHRoaXMubG9nZ2VyID0gbG9nZ2VyO1xyXG4gICAgICAgIHRoaXMubG9nTWVzc2FnZUNvbnRlbnQgPSBsb2dNZXNzYWdlQ29udGVudDtcclxuICAgICAgICB0aGlzLndpdGhDcmVkZW50aWFscyA9IHdpdGhDcmVkZW50aWFscztcclxuICAgICAgICB0aGlzLmV2ZW50U291cmNlQ29uc3RydWN0b3IgPSBldmVudFNvdXJjZUNvbnN0cnVjdG9yO1xyXG4gICAgICAgIHRoaXMuaGVhZGVycyA9IGhlYWRlcnM7XHJcbiAgICAgICAgdGhpcy5vbnJlY2VpdmUgPSBudWxsO1xyXG4gICAgICAgIHRoaXMub25jbG9zZSA9IG51bGw7XHJcbiAgICB9XHJcbiAgICBTZXJ2ZXJTZW50RXZlbnRzVHJhbnNwb3J0LnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24gKHVybCwgdHJhbnNmZXJGb3JtYXQpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciB0b2tlbjtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgVXRpbHNfMS5BcmcuaXNSZXF1aXJlZCh1cmwsIFwidXJsXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBVdGlsc18xLkFyZy5pc1JlcXVpcmVkKHRyYW5zZmVyRm9ybWF0LCBcInRyYW5zZmVyRm9ybWF0XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBVdGlsc18xLkFyZy5pc0luKHRyYW5zZmVyRm9ybWF0LCBJVHJhbnNwb3J0XzEuVHJhbnNmZXJGb3JtYXQsIFwidHJhbnNmZXJGb3JtYXRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuVHJhY2UsIFwiKFNTRSB0cmFuc3BvcnQpIENvbm5lY3RpbmcuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzZXQgdXJsIGJlZm9yZSBhY2Nlc3NUb2tlbkZhY3RvcnkgYmVjYXVzZSB0aGlzLnVybCBpcyBvbmx5IGZvciBzZW5kIGFuZCB3ZSBzZXQgdGhlIGF1dGggaGVhZGVyIGluc3RlYWQgb2YgdGhlIHF1ZXJ5IHN0cmluZyBmb3Igc2VuZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVybCA9IHVybDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmFjY2Vzc1Rva2VuRmFjdG9yeSkgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuYWNjZXNzVG9rZW5GYWN0b3J5KCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW4gPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b2tlbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsICs9ICh1cmwuaW5kZXhPZihcIj9cIikgPCAwID8gXCI/XCIgOiBcIiZcIikgKyAoXCJhY2Nlc3NfdG9rZW49XCIgKyBlbmNvZGVVUklDb21wb25lbnQodG9rZW4pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDI7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOiByZXR1cm4gWzIgLypyZXR1cm4qLywgbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9wZW5lZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRyYW5zZmVyRm9ybWF0ICE9PSBJVHJhbnNwb3J0XzEuVHJhbnNmZXJGb3JtYXQuVGV4dCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJUaGUgU2VydmVyLVNlbnQgRXZlbnRzIHRyYW5zcG9ydCBvbmx5IHN1cHBvcnRzIHRoZSAnVGV4dCcgdHJhbnNmZXIgZm9ybWF0XCIpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXZlbnRTb3VyY2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoVXRpbHNfMS5QbGF0Zm9ybS5pc0Jyb3dzZXIgfHwgVXRpbHNfMS5QbGF0Zm9ybS5pc1dlYldvcmtlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50U291cmNlID0gbmV3IF90aGlzLmV2ZW50U291cmNlQ29uc3RydWN0b3IodXJsLCB7IHdpdGhDcmVkZW50aWFsczogX3RoaXMud2l0aENyZWRlbnRpYWxzIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm9uLWJyb3dzZXIgcGFzc2VzIGNvb2tpZXMgdmlhIHRoZSBkaWN0aW9uYXJ5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvb2tpZXMgPSBfdGhpcy5odHRwQ2xpZW50LmdldENvb2tpZVN0cmluZyh1cmwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoZWFkZXJzID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVycy5Db29raWUgPSBjb29raWVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfYSA9IFV0aWxzXzEuZ2V0VXNlckFnZW50SGVhZGVyKCksIG5hbWVfMSA9IF9hWzBdLCB2YWx1ZSA9IF9hWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnNbbmFtZV8xXSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50U291cmNlID0gbmV3IF90aGlzLmV2ZW50U291cmNlQ29uc3RydWN0b3IodXJsLCB7IHdpdGhDcmVkZW50aWFsczogX3RoaXMud2l0aENyZWRlbnRpYWxzLCBoZWFkZXJzOiBfX2Fzc2lnbih7fSwgaGVhZGVycywgX3RoaXMuaGVhZGVycykgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50U291cmNlLm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5vbnJlY2VpdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuVHJhY2UsIFwiKFNTRSB0cmFuc3BvcnQpIGRhdGEgcmVjZWl2ZWQuIFwiICsgVXRpbHNfMS5nZXREYXRhRGV0YWlsKGUuZGF0YSwgX3RoaXMubG9nTWVzc2FnZUNvbnRlbnQpICsgXCIuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLm9ucmVjZWl2ZShlLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuY2xvc2UoZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRTb3VyY2Uub25lcnJvciA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlcnJvciA9IG5ldyBFcnJvcihlLmRhdGEgfHwgXCJFcnJvciBvY2N1cnJlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wZW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuY2xvc2UoZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRTb3VyY2Uub25vcGVuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5JbmZvcm1hdGlvbiwgXCJTU0UgY29ubmVjdGVkIHRvIFwiICsgX3RoaXMudXJsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuZXZlbnRTb3VyY2UgPSBldmVudFNvdXJjZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlbmVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgU2VydmVyU2VudEV2ZW50c1RyYW5zcG9ydC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZXZlbnRTb3VyY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiQ2Fubm90IHNlbmQgdW50aWwgdGhlIHRyYW5zcG9ydCBpcyBjb25uZWN0ZWRcIikpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBVdGlsc18xLnNlbmRNZXNzYWdlKHRoaXMubG9nZ2VyLCBcIlNTRVwiLCB0aGlzLmh0dHBDbGllbnQsIHRoaXMudXJsLCB0aGlzLmFjY2Vzc1Rva2VuRmFjdG9yeSwgZGF0YSwgdGhpcy5sb2dNZXNzYWdlQ29udGVudCwgdGhpcy53aXRoQ3JlZGVudGlhbHMsIHRoaXMuaGVhZGVycyldO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBTZXJ2ZXJTZW50RXZlbnRzVHJhbnNwb3J0LnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICB9O1xyXG4gICAgU2VydmVyU2VudEV2ZW50c1RyYW5zcG9ydC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGlmICh0aGlzLmV2ZW50U291cmNlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZXZlbnRTb3VyY2UuY2xvc2UoKTtcclxuICAgICAgICAgICAgdGhpcy5ldmVudFNvdXJjZSA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgaWYgKHRoaXMub25jbG9zZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbmNsb3NlKGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBTZXJ2ZXJTZW50RXZlbnRzVHJhbnNwb3J0O1xyXG59KCkpO1xyXG5leHBvcnRzLlNlcnZlclNlbnRFdmVudHNUcmFuc3BvcnQgPSBTZXJ2ZXJTZW50RXZlbnRzVHJhbnNwb3J0O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1TZXJ2ZXJTZW50RXZlbnRzVHJhbnNwb3J0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG4vLyBDb3B5cmlnaHQgKGMpIC5ORVQgRm91bmRhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIFV0aWxzXzEgPSByZXF1aXJlKFwiLi9VdGlsc1wiKTtcclxuLyoqIFN0cmVhbSBpbXBsZW1lbnRhdGlvbiB0byBzdHJlYW0gaXRlbXMgdG8gdGhlIHNlcnZlci4gKi9cclxudmFyIFN1YmplY3QgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBTdWJqZWN0KCkge1xyXG4gICAgICAgIHRoaXMub2JzZXJ2ZXJzID0gW107XHJcbiAgICB9XHJcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5vYnNlcnZlcnM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBvYnNlcnZlciA9IF9hW19pXTtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChpdGVtKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgU3ViamVjdC5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMub2JzZXJ2ZXJzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgb2JzZXJ2ZXIgPSBfYVtfaV07XHJcbiAgICAgICAgICAgIGlmIChvYnNlcnZlci5lcnJvcikge1xyXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IoZXJyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5vYnNlcnZlcnM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBvYnNlcnZlciA9IF9hW19pXTtcclxuICAgICAgICAgICAgaWYgKG9ic2VydmVyLmNvbXBsZXRlKSB7XHJcbiAgICAgICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFN1YmplY3QucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIChvYnNlcnZlcikge1xyXG4gICAgICAgIHRoaXMub2JzZXJ2ZXJzLnB1c2gob2JzZXJ2ZXIpO1xyXG4gICAgICAgIHJldHVybiBuZXcgVXRpbHNfMS5TdWJqZWN0U3Vic2NyaXB0aW9uKHRoaXMsIG9ic2VydmVyKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gU3ViamVjdDtcclxufSgpKTtcclxuZXhwb3J0cy5TdWJqZWN0ID0gU3ViamVjdDtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3ViamVjdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuLy8gQ29weXJpZ2h0IChjKSAuTkVUIEZvdW5kYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbi8vIE5vdCBleHBvcnRlZCBmcm9tIGluZGV4XHJcbi8qKiBAcHJpdmF0ZSAqL1xyXG52YXIgVGV4dE1lc3NhZ2VGb3JtYXQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBUZXh0TWVzc2FnZUZvcm1hdCgpIHtcclxuICAgIH1cclxuICAgIFRleHRNZXNzYWdlRm9ybWF0LndyaXRlID0gZnVuY3Rpb24gKG91dHB1dCkge1xyXG4gICAgICAgIHJldHVybiBcIlwiICsgb3V0cHV0ICsgVGV4dE1lc3NhZ2VGb3JtYXQuUmVjb3JkU2VwYXJhdG9yO1xyXG4gICAgfTtcclxuICAgIFRleHRNZXNzYWdlRm9ybWF0LnBhcnNlID0gZnVuY3Rpb24gKGlucHV0KSB7XHJcbiAgICAgICAgaWYgKGlucHV0W2lucHV0Lmxlbmd0aCAtIDFdICE9PSBUZXh0TWVzc2FnZUZvcm1hdC5SZWNvcmRTZXBhcmF0b3IpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWVzc2FnZSBpcyBpbmNvbXBsZXRlLlwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIG1lc3NhZ2VzID0gaW5wdXQuc3BsaXQoVGV4dE1lc3NhZ2VGb3JtYXQuUmVjb3JkU2VwYXJhdG9yKTtcclxuICAgICAgICBtZXNzYWdlcy5wb3AoKTtcclxuICAgICAgICByZXR1cm4gbWVzc2FnZXM7XHJcbiAgICB9O1xyXG4gICAgVGV4dE1lc3NhZ2VGb3JtYXQuUmVjb3JkU2VwYXJhdG9yQ29kZSA9IDB4MWU7XHJcbiAgICBUZXh0TWVzc2FnZUZvcm1hdC5SZWNvcmRTZXBhcmF0b3IgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKFRleHRNZXNzYWdlRm9ybWF0LlJlY29yZFNlcGFyYXRvckNvZGUpO1xyXG4gICAgcmV0dXJuIFRleHRNZXNzYWdlRm9ybWF0O1xyXG59KCkpO1xyXG5leHBvcnRzLlRleHRNZXNzYWdlRm9ybWF0ID0gVGV4dE1lc3NhZ2VGb3JtYXQ7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVRleHRNZXNzYWdlRm9ybWF0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG4vLyBDb3B5cmlnaHQgKGMpIC5ORVQgRm91bmRhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xyXG4gICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXHJcbiAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn07XHJcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZShyZXN1bHQudmFsdWUpOyB9KS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn07XHJcbnZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgSUxvZ2dlcl8xID0gcmVxdWlyZShcIi4vSUxvZ2dlclwiKTtcclxudmFyIExvZ2dlcnNfMSA9IHJlcXVpcmUoXCIuL0xvZ2dlcnNcIik7XHJcbi8vIFZlcnNpb24gdG9rZW4gdGhhdCB3aWxsIGJlIHJlcGxhY2VkIGJ5IHRoZSBwcmVwYWNrIGNvbW1hbmRcclxuLyoqIFRoZSB2ZXJzaW9uIG9mIHRoZSBTaWduYWxSIGNsaWVudC4gKi9cclxuZXhwb3J0cy5WRVJTSU9OID0gXCI1LjAuMC1wcmV2aWV3LjQuMjAyNTcuMTBcIjtcclxuLyoqIEBwcml2YXRlICovXHJcbnZhciBBcmcgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBBcmcoKSB7XHJcbiAgICB9XHJcbiAgICBBcmcuaXNSZXF1aXJlZCA9IGZ1bmN0aW9uICh2YWwsIG5hbWUpIHtcclxuICAgICAgICBpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSAnXCIgKyBuYW1lICsgXCInIGFyZ3VtZW50IGlzIHJlcXVpcmVkLlwiKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgQXJnLmlzSW4gPSBmdW5jdGlvbiAodmFsLCB2YWx1ZXMsIG5hbWUpIHtcclxuICAgICAgICAvLyBUeXBlU2NyaXB0IGVudW1zIGhhdmUga2V5cyBmb3IgKipib3RoKiogdGhlIG5hbWUgYW5kIHRoZSB2YWx1ZSBvZiBlYWNoIGVudW0gbWVtYmVyIG9uIHRoZSB0eXBlIGl0c2VsZi5cclxuICAgICAgICBpZiAoISh2YWwgaW4gdmFsdWVzKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIFwiICsgbmFtZSArIFwiIHZhbHVlOiBcIiArIHZhbCArIFwiLlwiKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEFyZztcclxufSgpKTtcclxuZXhwb3J0cy5BcmcgPSBBcmc7XHJcbi8qKiBAcHJpdmF0ZSAqL1xyXG52YXIgUGxhdGZvcm0gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBQbGF0Zm9ybSgpIHtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShQbGF0Zm9ybSwgXCJpc0Jyb3dzZXJcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShQbGF0Zm9ybSwgXCJpc1dlYldvcmtlclwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0eXBlb2Ygc2VsZiA9PT0gXCJvYmplY3RcIiAmJiBcImltcG9ydFNjcmlwdHNcIiBpbiBzZWxmO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFBsYXRmb3JtLCBcImlzTm9kZVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAhdGhpcy5pc0Jyb3dzZXIgJiYgIXRoaXMuaXNXZWJXb3JrZXI7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gUGxhdGZvcm07XHJcbn0oKSk7XHJcbmV4cG9ydHMuUGxhdGZvcm0gPSBQbGF0Zm9ybTtcclxuLyoqIEBwcml2YXRlICovXHJcbmZ1bmN0aW9uIGdldERhdGFEZXRhaWwoZGF0YSwgaW5jbHVkZUNvbnRlbnQpIHtcclxuICAgIHZhciBkZXRhaWwgPSBcIlwiO1xyXG4gICAgaWYgKGlzQXJyYXlCdWZmZXIoZGF0YSkpIHtcclxuICAgICAgICBkZXRhaWwgPSBcIkJpbmFyeSBkYXRhIG9mIGxlbmd0aCBcIiArIGRhdGEuYnl0ZUxlbmd0aDtcclxuICAgICAgICBpZiAoaW5jbHVkZUNvbnRlbnQpIHtcclxuICAgICAgICAgICAgZGV0YWlsICs9IFwiLiBDb250ZW50OiAnXCIgKyBmb3JtYXRBcnJheUJ1ZmZlcihkYXRhKSArIFwiJ1wiO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgZGV0YWlsID0gXCJTdHJpbmcgZGF0YSBvZiBsZW5ndGggXCIgKyBkYXRhLmxlbmd0aDtcclxuICAgICAgICBpZiAoaW5jbHVkZUNvbnRlbnQpIHtcclxuICAgICAgICAgICAgZGV0YWlsICs9IFwiLiBDb250ZW50OiAnXCIgKyBkYXRhICsgXCInXCI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGRldGFpbDtcclxufVxyXG5leHBvcnRzLmdldERhdGFEZXRhaWwgPSBnZXREYXRhRGV0YWlsO1xyXG4vKiogQHByaXZhdGUgKi9cclxuZnVuY3Rpb24gZm9ybWF0QXJyYXlCdWZmZXIoZGF0YSkge1xyXG4gICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShkYXRhKTtcclxuICAgIC8vIFVpbnQ4QXJyYXkubWFwIG9ubHkgc3VwcG9ydHMgcmV0dXJuaW5nIGFub3RoZXIgVWludDhBcnJheT9cclxuICAgIHZhciBzdHIgPSBcIlwiO1xyXG4gICAgdmlldy5mb3JFYWNoKGZ1bmN0aW9uIChudW0pIHtcclxuICAgICAgICB2YXIgcGFkID0gbnVtIDwgMTYgPyBcIjBcIiA6IFwiXCI7XHJcbiAgICAgICAgc3RyICs9IFwiMHhcIiArIHBhZCArIG51bS50b1N0cmluZygxNikgKyBcIiBcIjtcclxuICAgIH0pO1xyXG4gICAgLy8gVHJpbSBvZiB0cmFpbGluZyBzcGFjZS5cclxuICAgIHJldHVybiBzdHIuc3Vic3RyKDAsIHN0ci5sZW5ndGggLSAxKTtcclxufVxyXG5leHBvcnRzLmZvcm1hdEFycmF5QnVmZmVyID0gZm9ybWF0QXJyYXlCdWZmZXI7XHJcbi8vIEFsc28gaW4gc2lnbmFsci1wcm90b2NvbC1tc2dwYWNrL1V0aWxzLnRzXHJcbi8qKiBAcHJpdmF0ZSAqL1xyXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyKHZhbCkge1xyXG4gICAgcmV0dXJuIHZhbCAmJiB0eXBlb2YgQXJyYXlCdWZmZXIgIT09IFwidW5kZWZpbmVkXCIgJiZcclxuICAgICAgICAodmFsIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIgfHxcclxuICAgICAgICAgICAgLy8gU29tZXRpbWVzIHdlIGdldCBhbiBBcnJheUJ1ZmZlciB0aGF0IGRvZXNuJ3Qgc2F0aXNmeSBpbnN0YW5jZW9mXHJcbiAgICAgICAgICAgICh2YWwuY29uc3RydWN0b3IgJiYgdmFsLmNvbnN0cnVjdG9yLm5hbWUgPT09IFwiQXJyYXlCdWZmZXJcIikpO1xyXG59XHJcbmV4cG9ydHMuaXNBcnJheUJ1ZmZlciA9IGlzQXJyYXlCdWZmZXI7XHJcbi8qKiBAcHJpdmF0ZSAqL1xyXG5mdW5jdGlvbiBzZW5kTWVzc2FnZShsb2dnZXIsIHRyYW5zcG9ydE5hbWUsIGh0dHBDbGllbnQsIHVybCwgYWNjZXNzVG9rZW5GYWN0b3J5LCBjb250ZW50LCBsb2dNZXNzYWdlQ29udGVudCwgd2l0aENyZWRlbnRpYWxzLCBkZWZhdWx0SGVhZGVycykge1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfYSwgaGVhZGVycywgdG9rZW4sIF9iLCBuYW1lLCB2YWx1ZSwgcmVzcG9uc2VUeXBlLCByZXNwb25zZTtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhY2Nlc3NUb2tlbkZhY3RvcnkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGFjY2Vzc1Rva2VuRmFjdG9yeSgpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICB0b2tlbiA9IF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodG9rZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVycyA9IChfYSA9IHt9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2FbXCJBdXRob3JpemF0aW9uXCJdID0gXCJCZWFyZXIgXCIgKyB0b2tlbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgX2MubGFiZWwgPSAyO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgIF9iID0gZ2V0VXNlckFnZW50SGVhZGVyKCksIG5hbWUgPSBfYlswXSwgdmFsdWUgPSBfYlsxXTtcclxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzW25hbWVdID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuVHJhY2UsIFwiKFwiICsgdHJhbnNwb3J0TmFtZSArIFwiIHRyYW5zcG9ydCkgc2VuZGluZyBkYXRhLiBcIiArIGdldERhdGFEZXRhaWwoY29udGVudCwgbG9nTWVzc2FnZUNvbnRlbnQpICsgXCIuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9IGlzQXJyYXlCdWZmZXIoY29udGVudCkgPyBcImFycmF5YnVmZmVyXCIgOiBcInRleHRcIjtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBodHRwQ2xpZW50LnBvc3QodXJsLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBjb250ZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogX19hc3NpZ24oe30sIGhlYWRlcnMsIGRlZmF1bHRIZWFkZXJzKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogcmVzcG9uc2VUeXBlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB3aXRoQ3JlZGVudGlhbHMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBsb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5UcmFjZSwgXCIoXCIgKyB0cmFuc3BvcnROYW1lICsgXCIgdHJhbnNwb3J0KSByZXF1ZXN0IGNvbXBsZXRlLiBSZXNwb25zZSBzdGF0dXM6IFwiICsgcmVzcG9uc2Uuc3RhdHVzQ29kZSArIFwiLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydHMuc2VuZE1lc3NhZ2UgPSBzZW5kTWVzc2FnZTtcclxuLyoqIEBwcml2YXRlICovXHJcbmZ1bmN0aW9uIGNyZWF0ZUxvZ2dlcihsb2dnZXIpIHtcclxuICAgIGlmIChsb2dnZXIgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgQ29uc29sZUxvZ2dlcihJTG9nZ2VyXzEuTG9nTGV2ZWwuSW5mb3JtYXRpb24pO1xyXG4gICAgfVxyXG4gICAgaWYgKGxvZ2dlciA9PT0gbnVsbCkge1xyXG4gICAgICAgIHJldHVybiBMb2dnZXJzXzEuTnVsbExvZ2dlci5pbnN0YW5jZTtcclxuICAgIH1cclxuICAgIGlmIChsb2dnZXIubG9nKSB7XHJcbiAgICAgICAgcmV0dXJuIGxvZ2dlcjtcclxuICAgIH1cclxuICAgIHJldHVybiBuZXcgQ29uc29sZUxvZ2dlcihsb2dnZXIpO1xyXG59XHJcbmV4cG9ydHMuY3JlYXRlTG9nZ2VyID0gY3JlYXRlTG9nZ2VyO1xyXG4vKiogQHByaXZhdGUgKi9cclxudmFyIFN1YmplY3RTdWJzY3JpcHRpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBTdWJqZWN0U3Vic2NyaXB0aW9uKHN1YmplY3QsIG9ic2VydmVyKSB7XHJcbiAgICAgICAgdGhpcy5zdWJqZWN0ID0gc3ViamVjdDtcclxuICAgICAgICB0aGlzLm9ic2VydmVyID0gb2JzZXJ2ZXI7XHJcbiAgICB9XHJcbiAgICBTdWJqZWN0U3Vic2NyaXB0aW9uLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMuc3ViamVjdC5vYnNlcnZlcnMuaW5kZXhPZih0aGlzLm9ic2VydmVyKTtcclxuICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xyXG4gICAgICAgICAgICB0aGlzLnN1YmplY3Qub2JzZXJ2ZXJzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnN1YmplY3Qub2JzZXJ2ZXJzLmxlbmd0aCA9PT0gMCAmJiB0aGlzLnN1YmplY3QuY2FuY2VsQ2FsbGJhY2spIHtcclxuICAgICAgICAgICAgdGhpcy5zdWJqZWN0LmNhbmNlbENhbGxiYWNrKCkuY2F0Y2goZnVuY3Rpb24gKF8pIHsgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBTdWJqZWN0U3Vic2NyaXB0aW9uO1xyXG59KCkpO1xyXG5leHBvcnRzLlN1YmplY3RTdWJzY3JpcHRpb24gPSBTdWJqZWN0U3Vic2NyaXB0aW9uO1xyXG4vKiogQHByaXZhdGUgKi9cclxudmFyIENvbnNvbGVMb2dnZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBDb25zb2xlTG9nZ2VyKG1pbmltdW1Mb2dMZXZlbCkge1xyXG4gICAgICAgIHRoaXMubWluaW11bUxvZ0xldmVsID0gbWluaW11bUxvZ0xldmVsO1xyXG4gICAgICAgIHRoaXMub3V0cHV0Q29uc29sZSA9IGNvbnNvbGU7XHJcbiAgICB9XHJcbiAgICBDb25zb2xlTG9nZ2VyLnByb3RvdHlwZS5sb2cgPSBmdW5jdGlvbiAobG9nTGV2ZWwsIG1lc3NhZ2UpIHtcclxuICAgICAgICBpZiAobG9nTGV2ZWwgPj0gdGhpcy5taW5pbXVtTG9nTGV2ZWwpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChsb2dMZXZlbCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBJTG9nZ2VyXzEuTG9nTGV2ZWwuQ3JpdGljYWw6XHJcbiAgICAgICAgICAgICAgICBjYXNlIElMb2dnZXJfMS5Mb2dMZXZlbC5FcnJvcjpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm91dHB1dENvbnNvbGUuZXJyb3IoXCJbXCIgKyBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkgKyBcIl0gXCIgKyBJTG9nZ2VyXzEuTG9nTGV2ZWxbbG9nTGV2ZWxdICsgXCI6IFwiICsgbWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIElMb2dnZXJfMS5Mb2dMZXZlbC5XYXJuaW5nOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3V0cHV0Q29uc29sZS53YXJuKFwiW1wiICsgbmV3IERhdGUoKS50b0lTT1N0cmluZygpICsgXCJdIFwiICsgSUxvZ2dlcl8xLkxvZ0xldmVsW2xvZ0xldmVsXSArIFwiOiBcIiArIG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBJTG9nZ2VyXzEuTG9nTGV2ZWwuSW5mb3JtYXRpb246XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vdXRwdXRDb25zb2xlLmluZm8oXCJbXCIgKyBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkgKyBcIl0gXCIgKyBJTG9nZ2VyXzEuTG9nTGV2ZWxbbG9nTGV2ZWxdICsgXCI6IFwiICsgbWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUuZGVidWcgb25seSBnb2VzIHRvIGF0dGFjaGVkIGRlYnVnZ2VycyBpbiBOb2RlLCBzbyB3ZSB1c2UgY29uc29sZS5sb2cgZm9yIFRyYWNlIGFuZCBEZWJ1Z1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3V0cHV0Q29uc29sZS5sb2coXCJbXCIgKyBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkgKyBcIl0gXCIgKyBJTG9nZ2VyXzEuTG9nTGV2ZWxbbG9nTGV2ZWxdICsgXCI6IFwiICsgbWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIENvbnNvbGVMb2dnZXI7XHJcbn0oKSk7XHJcbmV4cG9ydHMuQ29uc29sZUxvZ2dlciA9IENvbnNvbGVMb2dnZXI7XHJcbi8qKiBAcHJpdmF0ZSAqL1xyXG5mdW5jdGlvbiBnZXRVc2VyQWdlbnRIZWFkZXIoKSB7XHJcbiAgICB2YXIgdXNlckFnZW50SGVhZGVyTmFtZSA9IFwiWC1TaWduYWxSLVVzZXItQWdlbnRcIjtcclxuICAgIGlmIChQbGF0Zm9ybS5pc05vZGUpIHtcclxuICAgICAgICB1c2VyQWdlbnRIZWFkZXJOYW1lID0gXCJVc2VyLUFnZW50XCI7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gW3VzZXJBZ2VudEhlYWRlck5hbWUsIGNvbnN0cnVjdFVzZXJBZ2VudChleHBvcnRzLlZFUlNJT04sIGdldE9zTmFtZSgpLCBnZXRSdW50aW1lKCksIGdldFJ1bnRpbWVWZXJzaW9uKCkpXTtcclxufVxyXG5leHBvcnRzLmdldFVzZXJBZ2VudEhlYWRlciA9IGdldFVzZXJBZ2VudEhlYWRlcjtcclxuLyoqIEBwcml2YXRlICovXHJcbmZ1bmN0aW9uIGNvbnN0cnVjdFVzZXJBZ2VudCh2ZXJzaW9uLCBvcywgcnVudGltZSwgcnVudGltZVZlcnNpb24pIHtcclxuICAgIC8vIE1pY3Jvc29mdCBTaWduYWxSL1tWZXJzaW9uXSAoW0RldGFpbGVkIFZlcnNpb25dOyBbT3BlcmF0aW5nIFN5c3RlbV07IFtSdW50aW1lXTsgW1J1bnRpbWUgVmVyc2lvbl0pXHJcbiAgICB2YXIgdXNlckFnZW50ID0gXCJNaWNyb3NvZnQgU2lnbmFsUi9cIjtcclxuICAgIHZhciBtYWpvckFuZE1pbm9yID0gdmVyc2lvbi5zcGxpdChcIi5cIik7XHJcbiAgICB1c2VyQWdlbnQgKz0gbWFqb3JBbmRNaW5vclswXSArIFwiLlwiICsgbWFqb3JBbmRNaW5vclsxXTtcclxuICAgIHVzZXJBZ2VudCArPSBcIiAoXCIgKyB2ZXJzaW9uICsgXCI7IFwiO1xyXG4gICAgaWYgKG9zICYmIG9zICE9PSBcIlwiKSB7XHJcbiAgICAgICAgdXNlckFnZW50ICs9IG9zICsgXCI7IFwiO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdXNlckFnZW50ICs9IFwiVW5rbm93biBPUzsgXCI7XHJcbiAgICB9XHJcbiAgICB1c2VyQWdlbnQgKz0gXCJcIiArIHJ1bnRpbWU7XHJcbiAgICBpZiAocnVudGltZVZlcnNpb24pIHtcclxuICAgICAgICB1c2VyQWdlbnQgKz0gXCI7IFwiICsgcnVudGltZVZlcnNpb247XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB1c2VyQWdlbnQgKz0gXCI7IFVua25vd24gUnVudGltZSBWZXJzaW9uXCI7XHJcbiAgICB9XHJcbiAgICB1c2VyQWdlbnQgKz0gXCIpXCI7XHJcbiAgICByZXR1cm4gdXNlckFnZW50O1xyXG59XHJcbmV4cG9ydHMuY29uc3RydWN0VXNlckFnZW50ID0gY29uc3RydWN0VXNlckFnZW50O1xyXG5mdW5jdGlvbiBnZXRPc05hbWUoKSB7XHJcbiAgICBpZiAoUGxhdGZvcm0uaXNOb2RlKSB7XHJcbiAgICAgICAgc3dpdGNoIChwcm9jZXNzLnBsYXRmb3JtKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJ3aW4zMlwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiV2luZG93cyBOVFwiO1xyXG4gICAgICAgICAgICBjYXNlIFwiZGFyd2luXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJtYWNPU1wiO1xyXG4gICAgICAgICAgICBjYXNlIFwibGludXhcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIkxpbnV4XCI7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvY2Vzcy5wbGF0Zm9ybTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gXCJcIjtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBnZXRSdW50aW1lVmVyc2lvbigpIHtcclxuICAgIGlmIChQbGF0Zm9ybS5pc05vZGUpIHtcclxuICAgICAgICByZXR1cm4gcHJvY2Vzcy52ZXJzaW9ucy5ub2RlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcclxufVxyXG5mdW5jdGlvbiBnZXRSdW50aW1lKCkge1xyXG4gICAgaWYgKFBsYXRmb3JtLmlzTm9kZSkge1xyXG4gICAgICAgIHJldHVybiBcIk5vZGVKU1wiO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIFwiQnJvd3NlclwiO1xyXG4gICAgfVxyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVV0aWxzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG4vLyBDb3B5cmlnaHQgKGMpIC5ORVQgRm91bmRhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xyXG4gICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXHJcbiAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn07XHJcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZShyZXN1bHQudmFsdWUpOyB9KS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn07XHJcbnZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgSUxvZ2dlcl8xID0gcmVxdWlyZShcIi4vSUxvZ2dlclwiKTtcclxudmFyIElUcmFuc3BvcnRfMSA9IHJlcXVpcmUoXCIuL0lUcmFuc3BvcnRcIik7XHJcbnZhciBVdGlsc18xID0gcmVxdWlyZShcIi4vVXRpbHNcIik7XHJcbi8qKiBAcHJpdmF0ZSAqL1xyXG52YXIgV2ViU29ja2V0VHJhbnNwb3J0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gV2ViU29ja2V0VHJhbnNwb3J0KGh0dHBDbGllbnQsIGFjY2Vzc1Rva2VuRmFjdG9yeSwgbG9nZ2VyLCBsb2dNZXNzYWdlQ29udGVudCwgd2ViU29ja2V0Q29uc3RydWN0b3IsIGhlYWRlcnMpIHtcclxuICAgICAgICB0aGlzLmxvZ2dlciA9IGxvZ2dlcjtcclxuICAgICAgICB0aGlzLmFjY2Vzc1Rva2VuRmFjdG9yeSA9IGFjY2Vzc1Rva2VuRmFjdG9yeTtcclxuICAgICAgICB0aGlzLmxvZ01lc3NhZ2VDb250ZW50ID0gbG9nTWVzc2FnZUNvbnRlbnQ7XHJcbiAgICAgICAgdGhpcy53ZWJTb2NrZXRDb25zdHJ1Y3RvciA9IHdlYlNvY2tldENvbnN0cnVjdG9yO1xyXG4gICAgICAgIHRoaXMuaHR0cENsaWVudCA9IGh0dHBDbGllbnQ7XHJcbiAgICAgICAgdGhpcy5vbnJlY2VpdmUgPSBudWxsO1xyXG4gICAgICAgIHRoaXMub25jbG9zZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5oZWFkZXJzID0gaGVhZGVycztcclxuICAgIH1cclxuICAgIFdlYlNvY2tldFRyYW5zcG9ydC5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uICh1cmwsIHRyYW5zZmVyRm9ybWF0KSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgdG9rZW47XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFV0aWxzXzEuQXJnLmlzUmVxdWlyZWQodXJsLCBcInVybFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgVXRpbHNfMS5BcmcuaXNSZXF1aXJlZCh0cmFuc2ZlckZvcm1hdCwgXCJ0cmFuc2ZlckZvcm1hdFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgVXRpbHNfMS5BcmcuaXNJbih0cmFuc2ZlckZvcm1hdCwgSVRyYW5zcG9ydF8xLlRyYW5zZmVyRm9ybWF0LCBcInRyYW5zZmVyRm9ybWF0XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLlRyYWNlLCBcIihXZWJTb2NrZXRzIHRyYW5zcG9ydCkgQ29ubmVjdGluZy5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5hY2Nlc3NUb2tlbkZhY3RvcnkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmFjY2Vzc1Rva2VuRmFjdG9yeSgpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodG9rZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybCArPSAodXJsLmluZGV4T2YoXCI/XCIpIDwgMCA/IFwiP1wiIDogXCImXCIpICsgKFwiYWNjZXNzX3Rva2VuPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KHRva2VuKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAyO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybCA9IHVybC5yZXBsYWNlKC9eaHR0cC8sIFwid3NcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgd2ViU29ja2V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvb2tpZXMgPSBfdGhpcy5odHRwQ2xpZW50LmdldENvb2tpZVN0cmluZyh1cmwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9wZW5lZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFV0aWxzXzEuUGxhdGZvcm0uaXNOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhlYWRlcnMgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2EgPSBVdGlsc18xLmdldFVzZXJBZ2VudEhlYWRlcigpLCBuYW1lXzEgPSBfYVswXSwgdmFsdWUgPSBfYVsxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzW25hbWVfMV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29va2llcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzW1wiQ29va2llXCJdID0gXCJcIiArIGNvb2tpZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE9ubHkgcGFzcyBoZWFkZXJzIHdoZW4gaW4gbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2ViU29ja2V0ID0gbmV3IF90aGlzLndlYlNvY2tldENvbnN0cnVjdG9yKHVybCwgdW5kZWZpbmVkLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IF9fYXNzaWduKHt9LCBoZWFkZXJzLCBfdGhpcy5oZWFkZXJzKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghd2ViU29ja2V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hyb21lIGlzIG5vdCBoYXBweSB3aXRoIHBhc3NpbmcgJ3VuZGVmaW5lZCcgYXMgcHJvdG9jb2xcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ZWJTb2NrZXQgPSBuZXcgX3RoaXMud2ViU29ja2V0Q29uc3RydWN0b3IodXJsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cmFuc2ZlckZvcm1hdCA9PT0gSVRyYW5zcG9ydF8xLlRyYW5zZmVyRm9ybWF0LkJpbmFyeSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdlYlNvY2tldC5iaW5hcnlUeXBlID0gXCJhcnJheWJ1ZmZlclwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnZhcmlhYmxlLW5hbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdlYlNvY2tldC5vbm9wZW4gPSBmdW5jdGlvbiAoX2V2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuSW5mb3JtYXRpb24sIFwiV2ViU29ja2V0IGNvbm5lY3RlZCB0byBcIiArIHVybCArIFwiLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy53ZWJTb2NrZXQgPSB3ZWJTb2NrZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlbmVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2ViU29ja2V0Lm9uZXJyb3IgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXJyb3IgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEVycm9yRXZlbnQgaXMgYSBicm93c2VyIG9ubHkgdHlwZSB3ZSBuZWVkIHRvIGNoZWNrIGlmIHRoZSB0eXBlIGV4aXN0cyBiZWZvcmUgdXNpbmcgaXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIEVycm9yRXZlbnQgIT09IFwidW5kZWZpbmVkXCIgJiYgZXZlbnQgaW5zdGFuY2VvZiBFcnJvckV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yID0gZXZlbnQuZXJyb3I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9IG5ldyBFcnJvcihcIlRoZXJlIHdhcyBhbiBlcnJvciB3aXRoIHRoZSB0cmFuc3BvcnQuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdlYlNvY2tldC5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLlRyYWNlLCBcIihXZWJTb2NrZXRzIHRyYW5zcG9ydCkgZGF0YSByZWNlaXZlZC4gXCIgKyBVdGlsc18xLmdldERhdGFEZXRhaWwobWVzc2FnZS5kYXRhLCBfdGhpcy5sb2dNZXNzYWdlQ29udGVudCkgKyBcIi5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLm9ucmVjZWl2ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMub25yZWNlaXZlKG1lc3NhZ2UuZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5jbG9zZShlcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2ViU29ja2V0Lm9uY2xvc2UgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEb24ndCBjYWxsIGNsb3NlIGhhbmRsZXIgaWYgY29ubmVjdGlvbiB3YXMgbmV2ZXIgZXN0YWJsaXNoZWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSdsbCByZWplY3QgdGhlIGNvbm5lY3QgY2FsbCBpbnN0ZWFkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wZW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5jbG9zZShldmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXJyb3IgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFcnJvckV2ZW50IGlzIGEgYnJvd3NlciBvbmx5IHR5cGUgd2UgbmVlZCB0byBjaGVjayBpZiB0aGUgdHlwZSBleGlzdHMgYmVmb3JlIHVzaW5nIGl0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgRXJyb3JFdmVudCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBldmVudCBpbnN0YW5jZW9mIEVycm9yRXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yID0gZXZlbnQuZXJyb3I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9IG5ldyBFcnJvcihcIlRoZXJlIHdhcyBhbiBlcnJvciB3aXRoIHRoZSB0cmFuc3BvcnQuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBXZWJTb2NrZXRUcmFuc3BvcnQucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgIGlmICh0aGlzLndlYlNvY2tldCAmJiB0aGlzLndlYlNvY2tldC5yZWFkeVN0YXRlID09PSB0aGlzLndlYlNvY2tldENvbnN0cnVjdG9yLk9QRU4pIHtcclxuICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5UcmFjZSwgXCIoV2ViU29ja2V0cyB0cmFuc3BvcnQpIHNlbmRpbmcgZGF0YS4gXCIgKyBVdGlsc18xLmdldERhdGFEZXRhaWwoZGF0YSwgdGhpcy5sb2dNZXNzYWdlQ29udGVudCkgKyBcIi5cIik7XHJcbiAgICAgICAgICAgIHRoaXMud2ViU29ja2V0LnNlbmQoZGF0YSk7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFwiV2ViU29ja2V0IGlzIG5vdCBpbiB0aGUgT1BFTiBzdGF0ZVwiKTtcclxuICAgIH07XHJcbiAgICBXZWJTb2NrZXRUcmFuc3BvcnQucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMud2ViU29ja2V0KSB7XHJcbiAgICAgICAgICAgIC8vIE1hbnVhbGx5IGludm9rZSBvbmNsb3NlIGNhbGxiYWNrIGlubGluZSBzbyB3ZSBrbm93IHRoZSBIdHRwQ29ubmVjdGlvbiB3YXMgY2xvc2VkIHByb3Blcmx5IGJlZm9yZSByZXR1cm5pbmdcclxuICAgICAgICAgICAgLy8gVGhpcyBhbHNvIHNvbHZlcyBhbiBpc3N1ZSB3aGVyZSB3ZWJzb2NrZXQub25jbG9zZSBjb3VsZCB0YWtlIDE4KyBzZWNvbmRzIHRvIHRyaWdnZXIgZHVyaW5nIG5ldHdvcmsgZGlzY29ubmVjdHNcclxuICAgICAgICAgICAgdGhpcy5jbG9zZSh1bmRlZmluZWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICB9O1xyXG4gICAgV2ViU29ja2V0VHJhbnNwb3J0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgIC8vIHdlYlNvY2tldCB3aWxsIGJlIG51bGwgaWYgdGhlIHRyYW5zcG9ydCBkaWQgbm90IHN0YXJ0IHN1Y2Nlc3NmdWxseVxyXG4gICAgICAgIGlmICh0aGlzLndlYlNvY2tldCkge1xyXG4gICAgICAgICAgICAvLyBDbGVhciB3ZWJzb2NrZXQgaGFuZGxlcnMgYmVjYXVzZSB3ZSBhcmUgY29uc2lkZXJpbmcgdGhlIHNvY2tldCBjbG9zZWQgbm93XHJcbiAgICAgICAgICAgIHRoaXMud2ViU29ja2V0Lm9uY2xvc2UgPSBmdW5jdGlvbiAoKSB7IH07XHJcbiAgICAgICAgICAgIHRoaXMud2ViU29ja2V0Lm9ubWVzc2FnZSA9IGZ1bmN0aW9uICgpIHsgfTtcclxuICAgICAgICAgICAgdGhpcy53ZWJTb2NrZXQub25lcnJvciA9IGZ1bmN0aW9uICgpIHsgfTtcclxuICAgICAgICAgICAgdGhpcy53ZWJTb2NrZXQuY2xvc2UoKTtcclxuICAgICAgICAgICAgdGhpcy53ZWJTb2NrZXQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuVHJhY2UsIFwiKFdlYlNvY2tldHMgdHJhbnNwb3J0KSBzb2NrZXQgY2xvc2VkLlwiKTtcclxuICAgICAgICBpZiAodGhpcy5vbmNsb3NlKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzQ2xvc2VFdmVudChldmVudCkgJiYgKGV2ZW50Lndhc0NsZWFuID09PSBmYWxzZSB8fCBldmVudC5jb2RlICE9PSAxMDAwKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbmNsb3NlKG5ldyBFcnJvcihcIldlYlNvY2tldCBjbG9zZWQgd2l0aCBzdGF0dXMgY29kZTogXCIgKyBldmVudC5jb2RlICsgXCIgKFwiICsgZXZlbnQucmVhc29uICsgXCIpLlwiKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoZXZlbnQgaW5zdGFuY2VvZiBFcnJvcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbmNsb3NlKGV2ZW50KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub25jbG9zZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFdlYlNvY2tldFRyYW5zcG9ydC5wcm90b3R5cGUuaXNDbG9zZUV2ZW50ID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIGV2ZW50ICYmIHR5cGVvZiBldmVudC53YXNDbGVhbiA9PT0gXCJib29sZWFuXCIgJiYgdHlwZW9mIGV2ZW50LmNvZGUgPT09IFwibnVtYmVyXCI7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFdlYlNvY2tldFRyYW5zcG9ydDtcclxufSgpKTtcclxuZXhwb3J0cy5XZWJTb2NrZXRUcmFuc3BvcnQgPSBXZWJTb2NrZXRUcmFuc3BvcnQ7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVdlYlNvY2tldFRyYW5zcG9ydC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuLy8gQ29weXJpZ2h0IChjKSAuTkVUIEZvdW5kYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG4gICAgfTtcclxufSkoKTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgRXJyb3JzXzEgPSByZXF1aXJlKFwiLi9FcnJvcnNcIik7XHJcbnZhciBIdHRwQ2xpZW50XzEgPSByZXF1aXJlKFwiLi9IdHRwQ2xpZW50XCIpO1xyXG52YXIgSUxvZ2dlcl8xID0gcmVxdWlyZShcIi4vSUxvZ2dlclwiKTtcclxudmFyIFhockh0dHBDbGllbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoWGhySHR0cENsaWVudCwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIFhockh0dHBDbGllbnQobG9nZ2VyKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcclxuICAgICAgICBfdGhpcy5sb2dnZXIgPSBsb2dnZXI7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgLyoqIEBpbmhlcml0RG9jICovXHJcbiAgICBYaHJIdHRwQ2xpZW50LnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24gKHJlcXVlc3QpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIC8vIENoZWNrIHRoYXQgYWJvcnQgd2FzIG5vdCBzaWduYWxlZCBiZWZvcmUgY2FsbGluZyBzZW5kXHJcbiAgICAgICAgaWYgKHJlcXVlc3QuYWJvcnRTaWduYWwgJiYgcmVxdWVzdC5hYm9ydFNpZ25hbC5hYm9ydGVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3JzXzEuQWJvcnRFcnJvcigpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFyZXF1ZXN0Lm1ldGhvZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8gbWV0aG9kIGRlZmluZWQuXCIpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFyZXF1ZXN0LnVybCkge1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8gdXJsIGRlZmluZWQuXCIpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xyXG4gICAgICAgICAgICB4aHIub3BlbihyZXF1ZXN0Lm1ldGhvZCwgcmVxdWVzdC51cmwsIHRydWUpO1xyXG4gICAgICAgICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gcmVxdWVzdC53aXRoQ3JlZGVudGlhbHMgPT09IHVuZGVmaW5lZCA/IHRydWUgOiByZXF1ZXN0LndpdGhDcmVkZW50aWFscztcclxuICAgICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoXCJYLVJlcXVlc3RlZC1XaXRoXCIsIFwiWE1MSHR0cFJlcXVlc3RcIik7XHJcbiAgICAgICAgICAgIC8vIEV4cGxpY2l0bHkgc2V0dGluZyB0aGUgQ29udGVudC1UeXBlIGhlYWRlciBmb3IgUmVhY3QgTmF0aXZlIG9uIEFuZHJvaWQgcGxhdGZvcm0uXHJcbiAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC1UeXBlXCIsIFwidGV4dC9wbGFpbjtjaGFyc2V0PVVURi04XCIpO1xyXG4gICAgICAgICAgICB2YXIgaGVhZGVycyA9IHJlcXVlc3QuaGVhZGVycztcclxuICAgICAgICAgICAgaWYgKGhlYWRlcnMpIHtcclxuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKGhlYWRlcnMpXHJcbiAgICAgICAgICAgICAgICAgICAgLmZvckVhY2goZnVuY3Rpb24gKGhlYWRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKGhlYWRlciwgaGVhZGVyc1toZWFkZXJdKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChyZXF1ZXN0LnJlc3BvbnNlVHlwZSkge1xyXG4gICAgICAgICAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9IHJlcXVlc3QucmVzcG9uc2VUeXBlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChyZXF1ZXN0LmFib3J0U2lnbmFsKSB7XHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0LmFib3J0U2lnbmFsLm9uYWJvcnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgeGhyLmFib3J0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcnNfMS5BYm9ydEVycm9yKCkpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocmVxdWVzdC50aW1lb3V0KSB7XHJcbiAgICAgICAgICAgICAgICB4aHIudGltZW91dCA9IHJlcXVlc3QudGltZW91dDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB4aHIub25sb2FkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlcXVlc3QuYWJvcnRTaWduYWwpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LmFib3J0U2lnbmFsLm9uYWJvcnQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHhoci5zdGF0dXMgPj0gMjAwICYmIHhoci5zdGF0dXMgPCAzMDApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKG5ldyBIdHRwQ2xpZW50XzEuSHR0cFJlc3BvbnNlKHhoci5zdGF0dXMsIHhoci5zdGF0dXNUZXh0LCB4aHIucmVzcG9uc2UgfHwgeGhyLnJlc3BvbnNlVGV4dCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcnNfMS5IdHRwRXJyb3IoeGhyLnN0YXR1c1RleHQsIHhoci5zdGF0dXMpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgeGhyLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5XYXJuaW5nLCBcIkVycm9yIGZyb20gSFRUUCByZXF1ZXN0LiBcIiArIHhoci5zdGF0dXMgKyBcIjogXCIgKyB4aHIuc3RhdHVzVGV4dCArIFwiLlwiKTtcclxuICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3JzXzEuSHR0cEVycm9yKHhoci5zdGF0dXNUZXh0LCB4aHIuc3RhdHVzKSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHhoci5vbnRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5XYXJuaW5nLCBcIlRpbWVvdXQgZnJvbSBIVFRQIHJlcXVlc3QuXCIpO1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcnNfMS5UaW1lb3V0RXJyb3IoKSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHhoci5zZW5kKHJlcXVlc3QuY29udGVudCB8fCBcIlwiKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gWGhySHR0cENsaWVudDtcclxufShIdHRwQ2xpZW50XzEuSHR0cENsaWVudCkpO1xyXG5leHBvcnRzLlhockh0dHBDbGllbnQgPSBYaHJIdHRwQ2xpZW50O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1YaHJIdHRwQ2xpZW50LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG4vLyBDb3B5cmlnaHQgKGMpIC5ORVQgRm91bmRhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIEVycm9yc18xID0gcmVxdWlyZShcIi4vRXJyb3JzXCIpO1xyXG5leHBvcnRzLkFib3J0RXJyb3IgPSBFcnJvcnNfMS5BYm9ydEVycm9yO1xyXG5leHBvcnRzLkh0dHBFcnJvciA9IEVycm9yc18xLkh0dHBFcnJvcjtcclxuZXhwb3J0cy5UaW1lb3V0RXJyb3IgPSBFcnJvcnNfMS5UaW1lb3V0RXJyb3I7XHJcbnZhciBIdHRwQ2xpZW50XzEgPSByZXF1aXJlKFwiLi9IdHRwQ2xpZW50XCIpO1xyXG5leHBvcnRzLkh0dHBDbGllbnQgPSBIdHRwQ2xpZW50XzEuSHR0cENsaWVudDtcclxuZXhwb3J0cy5IdHRwUmVzcG9uc2UgPSBIdHRwQ2xpZW50XzEuSHR0cFJlc3BvbnNlO1xyXG52YXIgRGVmYXVsdEh0dHBDbGllbnRfMSA9IHJlcXVpcmUoXCIuL0RlZmF1bHRIdHRwQ2xpZW50XCIpO1xyXG5leHBvcnRzLkRlZmF1bHRIdHRwQ2xpZW50ID0gRGVmYXVsdEh0dHBDbGllbnRfMS5EZWZhdWx0SHR0cENsaWVudDtcclxudmFyIEh1YkNvbm5lY3Rpb25fMSA9IHJlcXVpcmUoXCIuL0h1YkNvbm5lY3Rpb25cIik7XHJcbmV4cG9ydHMuSHViQ29ubmVjdGlvbiA9IEh1YkNvbm5lY3Rpb25fMS5IdWJDb25uZWN0aW9uO1xyXG5leHBvcnRzLkh1YkNvbm5lY3Rpb25TdGF0ZSA9IEh1YkNvbm5lY3Rpb25fMS5IdWJDb25uZWN0aW9uU3RhdGU7XHJcbnZhciBIdWJDb25uZWN0aW9uQnVpbGRlcl8xID0gcmVxdWlyZShcIi4vSHViQ29ubmVjdGlvbkJ1aWxkZXJcIik7XHJcbmV4cG9ydHMuSHViQ29ubmVjdGlvbkJ1aWxkZXIgPSBIdWJDb25uZWN0aW9uQnVpbGRlcl8xLkh1YkNvbm5lY3Rpb25CdWlsZGVyO1xyXG52YXIgSUh1YlByb3RvY29sXzEgPSByZXF1aXJlKFwiLi9JSHViUHJvdG9jb2xcIik7XHJcbmV4cG9ydHMuTWVzc2FnZVR5cGUgPSBJSHViUHJvdG9jb2xfMS5NZXNzYWdlVHlwZTtcclxudmFyIElMb2dnZXJfMSA9IHJlcXVpcmUoXCIuL0lMb2dnZXJcIik7XHJcbmV4cG9ydHMuTG9nTGV2ZWwgPSBJTG9nZ2VyXzEuTG9nTGV2ZWw7XHJcbnZhciBJVHJhbnNwb3J0XzEgPSByZXF1aXJlKFwiLi9JVHJhbnNwb3J0XCIpO1xyXG5leHBvcnRzLkh0dHBUcmFuc3BvcnRUeXBlID0gSVRyYW5zcG9ydF8xLkh0dHBUcmFuc3BvcnRUeXBlO1xyXG5leHBvcnRzLlRyYW5zZmVyRm9ybWF0ID0gSVRyYW5zcG9ydF8xLlRyYW5zZmVyRm9ybWF0O1xyXG52YXIgTG9nZ2Vyc18xID0gcmVxdWlyZShcIi4vTG9nZ2Vyc1wiKTtcclxuZXhwb3J0cy5OdWxsTG9nZ2VyID0gTG9nZ2Vyc18xLk51bGxMb2dnZXI7XHJcbnZhciBKc29uSHViUHJvdG9jb2xfMSA9IHJlcXVpcmUoXCIuL0pzb25IdWJQcm90b2NvbFwiKTtcclxuZXhwb3J0cy5Kc29uSHViUHJvdG9jb2wgPSBKc29uSHViUHJvdG9jb2xfMS5Kc29uSHViUHJvdG9jb2w7XHJcbnZhciBTdWJqZWN0XzEgPSByZXF1aXJlKFwiLi9TdWJqZWN0XCIpO1xyXG5leHBvcnRzLlN1YmplY3QgPSBTdWJqZWN0XzEuU3ViamVjdDtcclxudmFyIFV0aWxzXzEgPSByZXF1aXJlKFwiLi9VdGlsc1wiKTtcclxuZXhwb3J0cy5WRVJTSU9OID0gVXRpbHNfMS5WRVJTSU9OO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCIvKipcbiAqIEBwb3BwZXJqcy9jb3JlIHYyLjQuMCAtIE1JVCBMaWNlbnNlXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5mdW5jdGlvbiBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudCkge1xuICB2YXIgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHJldHVybiB7XG4gICAgd2lkdGg6IHJlY3Qud2lkdGgsXG4gICAgaGVpZ2h0OiByZWN0LmhlaWdodCxcbiAgICB0b3A6IHJlY3QudG9wLFxuICAgIHJpZ2h0OiByZWN0LnJpZ2h0LFxuICAgIGJvdHRvbTogcmVjdC5ib3R0b20sXG4gICAgbGVmdDogcmVjdC5sZWZ0LFxuICAgIHg6IHJlY3QubGVmdCxcbiAgICB5OiByZWN0LnRvcFxuICB9O1xufVxuXG4vKjo6IGltcG9ydCB0eXBlIHsgV2luZG93IH0gZnJvbSAnLi4vdHlwZXMnOyAqL1xuXG4vKjo6IGRlY2xhcmUgZnVuY3Rpb24gZ2V0V2luZG93KG5vZGU6IE5vZGUgfCBXaW5kb3cpOiBXaW5kb3c7ICovXG5mdW5jdGlvbiBnZXRXaW5kb3cobm9kZSkge1xuICBpZiAobm9kZS50b1N0cmluZygpICE9PSAnW29iamVjdCBXaW5kb3ddJykge1xuICAgIHZhciBvd25lckRvY3VtZW50ID0gbm9kZS5vd25lckRvY3VtZW50O1xuICAgIHJldHVybiBvd25lckRvY3VtZW50ID8gb3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyA6IHdpbmRvdztcbiAgfVxuXG4gIHJldHVybiBub2RlO1xufVxuXG5mdW5jdGlvbiBnZXRXaW5kb3dTY3JvbGwobm9kZSkge1xuICB2YXIgd2luID0gZ2V0V2luZG93KG5vZGUpO1xuICB2YXIgc2Nyb2xsTGVmdCA9IHdpbi5wYWdlWE9mZnNldDtcbiAgdmFyIHNjcm9sbFRvcCA9IHdpbi5wYWdlWU9mZnNldDtcbiAgcmV0dXJuIHtcbiAgICBzY3JvbGxMZWZ0OiBzY3JvbGxMZWZ0LFxuICAgIHNjcm9sbFRvcDogc2Nyb2xsVG9wXG4gIH07XG59XG5cbi8qOjogZGVjbGFyZSBmdW5jdGlvbiBpc0VsZW1lbnQobm9kZTogbWl4ZWQpOiBib29sZWFuICVjaGVja3Mobm9kZSBpbnN0YW5jZW9mXG4gIEVsZW1lbnQpOyAqL1xuXG5mdW5jdGlvbiBpc0VsZW1lbnQobm9kZSkge1xuICB2YXIgT3duRWxlbWVudCA9IGdldFdpbmRvdyhub2RlKS5FbGVtZW50O1xuICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIE93bkVsZW1lbnQgfHwgbm9kZSBpbnN0YW5jZW9mIEVsZW1lbnQ7XG59XG4vKjo6IGRlY2xhcmUgZnVuY3Rpb24gaXNIVE1MRWxlbWVudChub2RlOiBtaXhlZCk6IGJvb2xlYW4gJWNoZWNrcyhub2RlIGluc3RhbmNlb2ZcbiAgSFRNTEVsZW1lbnQpOyAqL1xuXG5cbmZ1bmN0aW9uIGlzSFRNTEVsZW1lbnQobm9kZSkge1xuICB2YXIgT3duRWxlbWVudCA9IGdldFdpbmRvdyhub2RlKS5IVE1MRWxlbWVudDtcbiAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBPd25FbGVtZW50IHx8IG5vZGUgaW5zdGFuY2VvZiBIVE1MRWxlbWVudDtcbn1cblxuZnVuY3Rpb24gZ2V0SFRNTEVsZW1lbnRTY3JvbGwoZWxlbWVudCkge1xuICByZXR1cm4ge1xuICAgIHNjcm9sbExlZnQ6IGVsZW1lbnQuc2Nyb2xsTGVmdCxcbiAgICBzY3JvbGxUb3A6IGVsZW1lbnQuc2Nyb2xsVG9wXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldE5vZGVTY3JvbGwobm9kZSkge1xuICBpZiAobm9kZSA9PT0gZ2V0V2luZG93KG5vZGUpIHx8ICFpc0hUTUxFbGVtZW50KG5vZGUpKSB7XG4gICAgcmV0dXJuIGdldFdpbmRvd1Njcm9sbChub2RlKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZ2V0SFRNTEVsZW1lbnRTY3JvbGwobm9kZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0Tm9kZU5hbWUoZWxlbWVudCkge1xuICByZXR1cm4gZWxlbWVudCA/IChlbGVtZW50Lm5vZGVOYW1lIHx8ICcnKS50b0xvd2VyQ2FzZSgpIDogbnVsbDtcbn1cblxuZnVuY3Rpb24gZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpIHtcbiAgLy8gJEZsb3dGaXhNZTogYXNzdW1lIGJvZHkgaXMgYWx3YXlzIGF2YWlsYWJsZVxuICByZXR1cm4gKGlzRWxlbWVudChlbGVtZW50KSA/IGVsZW1lbnQub3duZXJEb2N1bWVudCA6IGVsZW1lbnQuZG9jdW1lbnQpLmRvY3VtZW50RWxlbWVudDtcbn1cblxuZnVuY3Rpb24gZ2V0V2luZG93U2Nyb2xsQmFyWChlbGVtZW50KSB7XG4gIC8vIElmIDxodG1sPiBoYXMgYSBDU1Mgd2lkdGggZ3JlYXRlciB0aGFuIHRoZSB2aWV3cG9ydCwgdGhlbiB0aGlzIHdpbGwgYmVcbiAgLy8gaW5jb3JyZWN0IGZvciBSVEwuXG4gIC8vIFBvcHBlciAxIGlzIGJyb2tlbiBpbiB0aGlzIGNhc2UgYW5kIG5ldmVyIGhhZCBhIGJ1ZyByZXBvcnQgc28gbGV0J3MgYXNzdW1lXG4gIC8vIGl0J3Mgbm90IGFuIGlzc3VlLiBJIGRvbid0IHRoaW5rIGFueW9uZSBldmVyIHNwZWNpZmllcyB3aWR0aCBvbiA8aHRtbD5cbiAgLy8gYW55d2F5LlxuICAvLyBCcm93c2VycyB3aGVyZSB0aGUgbGVmdCBzY3JvbGxiYXIgZG9lc24ndCBjYXVzZSBhbiBpc3N1ZSByZXBvcnQgYDBgIGZvclxuICAvLyB0aGlzIChlLmcuIEVkZ2UgMjAxOSwgSUUxMSwgU2FmYXJpKVxuICByZXR1cm4gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSkubGVmdCArIGdldFdpbmRvd1Njcm9sbChlbGVtZW50KS5zY3JvbGxMZWZ0O1xufVxuXG5mdW5jdGlvbiBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGdldFdpbmRvdyhlbGVtZW50KS5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xufVxuXG5mdW5jdGlvbiBpc1Njcm9sbFBhcmVudChlbGVtZW50KSB7XG4gIC8vIEZpcmVmb3ggd2FudHMgdXMgdG8gY2hlY2sgYC14YCBhbmQgYC15YCB2YXJpYXRpb25zIGFzIHdlbGxcbiAgdmFyIF9nZXRDb21wdXRlZFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KSxcbiAgICAgIG92ZXJmbG93ID0gX2dldENvbXB1dGVkU3R5bGUub3ZlcmZsb3csXG4gICAgICBvdmVyZmxvd1ggPSBfZ2V0Q29tcHV0ZWRTdHlsZS5vdmVyZmxvd1gsXG4gICAgICBvdmVyZmxvd1kgPSBfZ2V0Q29tcHV0ZWRTdHlsZS5vdmVyZmxvd1k7XG5cbiAgcmV0dXJuIC9hdXRvfHNjcm9sbHxvdmVybGF5fGhpZGRlbi8udGVzdChvdmVyZmxvdyArIG92ZXJmbG93WSArIG92ZXJmbG93WCk7XG59XG5cbi8vIENvbXBvc2l0ZSBtZWFucyBpdCB0YWtlcyBpbnRvIGFjY291bnQgdHJhbnNmb3JtcyBhcyB3ZWxsIGFzIGxheW91dC5cblxuZnVuY3Rpb24gZ2V0Q29tcG9zaXRlUmVjdChlbGVtZW50T3JWaXJ0dWFsRWxlbWVudCwgb2Zmc2V0UGFyZW50LCBpc0ZpeGVkKSB7XG4gIGlmIChpc0ZpeGVkID09PSB2b2lkIDApIHtcbiAgICBpc0ZpeGVkID0gZmFsc2U7XG4gIH1cblxuICB2YXIgZG9jdW1lbnRFbGVtZW50ID0gZ2V0RG9jdW1lbnRFbGVtZW50KG9mZnNldFBhcmVudCk7XG4gIHZhciByZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnRPclZpcnR1YWxFbGVtZW50KTtcbiAgdmFyIHNjcm9sbCA9IHtcbiAgICBzY3JvbGxMZWZ0OiAwLFxuICAgIHNjcm9sbFRvcDogMFxuICB9O1xuICB2YXIgb2Zmc2V0cyA9IHtcbiAgICB4OiAwLFxuICAgIHk6IDBcbiAgfTtcblxuICBpZiAoIWlzRml4ZWQpIHtcbiAgICBpZiAoZ2V0Tm9kZU5hbWUob2Zmc2V0UGFyZW50KSAhPT0gJ2JvZHknIHx8IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wb3BwZXJqcy9wb3BwZXItY29yZS9pc3N1ZXMvMTA3OFxuICAgIGlzU2Nyb2xsUGFyZW50KGRvY3VtZW50RWxlbWVudCkpIHtcbiAgICAgIHNjcm9sbCA9IGdldE5vZGVTY3JvbGwob2Zmc2V0UGFyZW50KTtcbiAgICB9XG5cbiAgICBpZiAoaXNIVE1MRWxlbWVudChvZmZzZXRQYXJlbnQpKSB7XG4gICAgICBvZmZzZXRzID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KG9mZnNldFBhcmVudCk7XG4gICAgICBvZmZzZXRzLnggKz0gb2Zmc2V0UGFyZW50LmNsaWVudExlZnQ7XG4gICAgICBvZmZzZXRzLnkgKz0gb2Zmc2V0UGFyZW50LmNsaWVudFRvcDtcbiAgICB9IGVsc2UgaWYgKGRvY3VtZW50RWxlbWVudCkge1xuICAgICAgb2Zmc2V0cy54ID0gZ2V0V2luZG93U2Nyb2xsQmFyWChkb2N1bWVudEVsZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgeDogcmVjdC5sZWZ0ICsgc2Nyb2xsLnNjcm9sbExlZnQgLSBvZmZzZXRzLngsXG4gICAgeTogcmVjdC50b3AgKyBzY3JvbGwuc2Nyb2xsVG9wIC0gb2Zmc2V0cy55LFxuICAgIHdpZHRoOiByZWN0LndpZHRoLFxuICAgIGhlaWdodDogcmVjdC5oZWlnaHRcbiAgfTtcbn1cblxuLy8gUmV0dXJucyB0aGUgbGF5b3V0IHJlY3Qgb2YgYW4gZWxlbWVudCByZWxhdGl2ZSB0byBpdHMgb2Zmc2V0UGFyZW50LiBMYXlvdXRcbi8vIG1lYW5zIGl0IGRvZXNuJ3QgdGFrZSBpbnRvIGFjY291bnQgdHJhbnNmb3Jtcy5cbmZ1bmN0aW9uIGdldExheW91dFJlY3QoZWxlbWVudCkge1xuICByZXR1cm4ge1xuICAgIHg6IGVsZW1lbnQub2Zmc2V0TGVmdCxcbiAgICB5OiBlbGVtZW50Lm9mZnNldFRvcCxcbiAgICB3aWR0aDogZWxlbWVudC5vZmZzZXRXaWR0aCxcbiAgICBoZWlnaHQ6IGVsZW1lbnQub2Zmc2V0SGVpZ2h0XG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldFBhcmVudE5vZGUoZWxlbWVudCkge1xuICBpZiAoZ2V0Tm9kZU5hbWUoZWxlbWVudCkgPT09ICdodG1sJykge1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG5cbiAgcmV0dXJuICgvLyAkRmxvd0ZpeE1lOiB0aGlzIGlzIGEgcXVpY2tlciAoYnV0IGxlc3MgdHlwZSBzYWZlKSB3YXkgdG8gc2F2ZSBxdWl0ZSBzb21lIGJ5dGVzIGZyb20gdGhlIGJ1bmRsZVxuICAgIGVsZW1lbnQuYXNzaWduZWRTbG90IHx8IC8vIHN0ZXAgaW50byB0aGUgc2hhZG93IERPTSBvZiB0aGUgcGFyZW50IG9mIGEgc2xvdHRlZCBub2RlXG4gICAgZWxlbWVudC5wYXJlbnROb2RlIHx8IC8vIERPTSBFbGVtZW50IGRldGVjdGVkXG4gICAgLy8gJEZsb3dGaXhNZTogbmVlZCBhIGJldHRlciB3YXkgdG8gaGFuZGxlIHRoaXMuLi5cbiAgICBlbGVtZW50Lmhvc3QgfHwgLy8gU2hhZG93Um9vdCBkZXRlY3RlZFxuICAgIC8vICRGbG93Rml4TWU6IEhUTUxFbGVtZW50IGlzIGEgTm9kZVxuICAgIGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSAvLyBmYWxsYmFja1xuXG4gICk7XG59XG5cbmZ1bmN0aW9uIGdldFNjcm9sbFBhcmVudChub2RlKSB7XG4gIGlmIChbJ2h0bWwnLCAnYm9keScsICcjZG9jdW1lbnQnXS5pbmRleE9mKGdldE5vZGVOYW1lKG5vZGUpKSA+PSAwKSB7XG4gICAgLy8gJEZsb3dGaXhNZTogYXNzdW1lIGJvZHkgaXMgYWx3YXlzIGF2YWlsYWJsZVxuICAgIHJldHVybiBub2RlLm93bmVyRG9jdW1lbnQuYm9keTtcbiAgfVxuXG4gIGlmIChpc0hUTUxFbGVtZW50KG5vZGUpICYmIGlzU2Nyb2xsUGFyZW50KG5vZGUpKSB7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cblxuICByZXR1cm4gZ2V0U2Nyb2xsUGFyZW50KGdldFBhcmVudE5vZGUobm9kZSkpO1xufVxuXG5mdW5jdGlvbiBsaXN0U2Nyb2xsUGFyZW50cyhlbGVtZW50LCBsaXN0KSB7XG4gIGlmIChsaXN0ID09PSB2b2lkIDApIHtcbiAgICBsaXN0ID0gW107XG4gIH1cblxuICB2YXIgc2Nyb2xsUGFyZW50ID0gZ2V0U2Nyb2xsUGFyZW50KGVsZW1lbnQpO1xuICB2YXIgaXNCb2R5ID0gZ2V0Tm9kZU5hbWUoc2Nyb2xsUGFyZW50KSA9PT0gJ2JvZHknO1xuICB2YXIgd2luID0gZ2V0V2luZG93KHNjcm9sbFBhcmVudCk7XG4gIHZhciB0YXJnZXQgPSBpc0JvZHkgPyBbd2luXS5jb25jYXQod2luLnZpc3VhbFZpZXdwb3J0IHx8IFtdLCBpc1Njcm9sbFBhcmVudChzY3JvbGxQYXJlbnQpID8gc2Nyb2xsUGFyZW50IDogW10pIDogc2Nyb2xsUGFyZW50O1xuICB2YXIgdXBkYXRlZExpc3QgPSBsaXN0LmNvbmNhdCh0YXJnZXQpO1xuICByZXR1cm4gaXNCb2R5ID8gdXBkYXRlZExpc3QgOiAvLyAkRmxvd0ZpeE1lOiBpc0JvZHkgdGVsbHMgdXMgdGFyZ2V0IHdpbGwgYmUgYW4gSFRNTEVsZW1lbnQgaGVyZVxuICB1cGRhdGVkTGlzdC5jb25jYXQobGlzdFNjcm9sbFBhcmVudHMoZ2V0UGFyZW50Tm9kZSh0YXJnZXQpKSk7XG59XG5cbmZ1bmN0aW9uIGlzVGFibGVFbGVtZW50KGVsZW1lbnQpIHtcbiAgcmV0dXJuIFsndGFibGUnLCAndGQnLCAndGgnXS5pbmRleE9mKGdldE5vZGVOYW1lKGVsZW1lbnQpKSA+PSAwO1xufVxuXG5mdW5jdGlvbiBnZXRUcnVlT2Zmc2V0UGFyZW50KGVsZW1lbnQpIHtcbiAgaWYgKCFpc0hUTUxFbGVtZW50KGVsZW1lbnQpIHx8IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wb3BwZXJqcy9wb3BwZXItY29yZS9pc3N1ZXMvODM3XG4gIGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkucG9zaXRpb24gPT09ICdmaXhlZCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBlbGVtZW50Lm9mZnNldFBhcmVudDtcbn1cblxuZnVuY3Rpb24gZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQpIHtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdyhlbGVtZW50KTtcbiAgdmFyIG9mZnNldFBhcmVudCA9IGdldFRydWVPZmZzZXRQYXJlbnQoZWxlbWVudCk7IC8vIEZpbmQgdGhlIG5lYXJlc3Qgbm9uLXRhYmxlIG9mZnNldFBhcmVudFxuXG4gIHdoaWxlIChvZmZzZXRQYXJlbnQgJiYgaXNUYWJsZUVsZW1lbnQob2Zmc2V0UGFyZW50KSkge1xuICAgIG9mZnNldFBhcmVudCA9IGdldFRydWVPZmZzZXRQYXJlbnQob2Zmc2V0UGFyZW50KTtcbiAgfVxuXG4gIGlmIChvZmZzZXRQYXJlbnQgJiYgZ2V0Tm9kZU5hbWUob2Zmc2V0UGFyZW50KSA9PT0gJ2JvZHknICYmIGdldENvbXB1dGVkU3R5bGUob2Zmc2V0UGFyZW50KS5wb3NpdGlvbiA9PT0gJ3N0YXRpYycpIHtcbiAgICByZXR1cm4gd2luZG93O1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldFBhcmVudCB8fCB3aW5kb3c7XG59XG5cbnZhciB0b3AgPSAndG9wJztcbnZhciBib3R0b20gPSAnYm90dG9tJztcbnZhciByaWdodCA9ICdyaWdodCc7XG52YXIgbGVmdCA9ICdsZWZ0JztcbnZhciBhdXRvID0gJ2F1dG8nO1xudmFyIGJhc2VQbGFjZW1lbnRzID0gW3RvcCwgYm90dG9tLCByaWdodCwgbGVmdF07XG52YXIgc3RhcnQgPSAnc3RhcnQnO1xudmFyIGVuZCA9ICdlbmQnO1xudmFyIGNsaXBwaW5nUGFyZW50cyA9ICdjbGlwcGluZ1BhcmVudHMnO1xudmFyIHZpZXdwb3J0ID0gJ3ZpZXdwb3J0JztcbnZhciBwb3BwZXIgPSAncG9wcGVyJztcbnZhciByZWZlcmVuY2UgPSAncmVmZXJlbmNlJztcbnZhciB2YXJpYXRpb25QbGFjZW1lbnRzID0gLyojX19QVVJFX18qL2Jhc2VQbGFjZW1lbnRzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIGFjYy5jb25jYXQoW3BsYWNlbWVudCArIFwiLVwiICsgc3RhcnQsIHBsYWNlbWVudCArIFwiLVwiICsgZW5kXSk7XG59LCBbXSk7XG52YXIgcGxhY2VtZW50cyA9IC8qI19fUFVSRV9fKi9bXS5jb25jYXQoYmFzZVBsYWNlbWVudHMsIFthdXRvXSkucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBsYWNlbWVudCkge1xuICByZXR1cm4gYWNjLmNvbmNhdChbcGxhY2VtZW50LCBwbGFjZW1lbnQgKyBcIi1cIiArIHN0YXJ0LCBwbGFjZW1lbnQgKyBcIi1cIiArIGVuZF0pO1xufSwgW10pOyAvLyBtb2RpZmllcnMgdGhhdCBuZWVkIHRvIHJlYWQgdGhlIERPTVxuXG52YXIgYmVmb3JlUmVhZCA9ICdiZWZvcmVSZWFkJztcbnZhciByZWFkID0gJ3JlYWQnO1xudmFyIGFmdGVyUmVhZCA9ICdhZnRlclJlYWQnOyAvLyBwdXJlLWxvZ2ljIG1vZGlmaWVyc1xuXG52YXIgYmVmb3JlTWFpbiA9ICdiZWZvcmVNYWluJztcbnZhciBtYWluID0gJ21haW4nO1xudmFyIGFmdGVyTWFpbiA9ICdhZnRlck1haW4nOyAvLyBtb2RpZmllciB3aXRoIHRoZSBwdXJwb3NlIHRvIHdyaXRlIHRvIHRoZSBET00gKG9yIHdyaXRlIGludG8gYSBmcmFtZXdvcmsgc3RhdGUpXG5cbnZhciBiZWZvcmVXcml0ZSA9ICdiZWZvcmVXcml0ZSc7XG52YXIgd3JpdGUgPSAnd3JpdGUnO1xudmFyIGFmdGVyV3JpdGUgPSAnYWZ0ZXJXcml0ZSc7XG52YXIgbW9kaWZpZXJQaGFzZXMgPSBbYmVmb3JlUmVhZCwgcmVhZCwgYWZ0ZXJSZWFkLCBiZWZvcmVNYWluLCBtYWluLCBhZnRlck1haW4sIGJlZm9yZVdyaXRlLCB3cml0ZSwgYWZ0ZXJXcml0ZV07XG5cbmZ1bmN0aW9uIG9yZGVyKG1vZGlmaWVycykge1xuICB2YXIgbWFwID0gbmV3IE1hcCgpO1xuICB2YXIgdmlzaXRlZCA9IG5ldyBTZXQoKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBtb2RpZmllcnMuZm9yRWFjaChmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICBtYXAuc2V0KG1vZGlmaWVyLm5hbWUsIG1vZGlmaWVyKTtcbiAgfSk7IC8vIE9uIHZpc2l0aW5nIG9iamVjdCwgY2hlY2sgZm9yIGl0cyBkZXBlbmRlbmNpZXMgYW5kIHZpc2l0IHRoZW0gcmVjdXJzaXZlbHlcblxuICBmdW5jdGlvbiBzb3J0KG1vZGlmaWVyKSB7XG4gICAgdmlzaXRlZC5hZGQobW9kaWZpZXIubmFtZSk7XG4gICAgdmFyIHJlcXVpcmVzID0gW10uY29uY2F0KG1vZGlmaWVyLnJlcXVpcmVzIHx8IFtdLCBtb2RpZmllci5yZXF1aXJlc0lmRXhpc3RzIHx8IFtdKTtcbiAgICByZXF1aXJlcy5mb3JFYWNoKGZ1bmN0aW9uIChkZXApIHtcbiAgICAgIGlmICghdmlzaXRlZC5oYXMoZGVwKSkge1xuICAgICAgICB2YXIgZGVwTW9kaWZpZXIgPSBtYXAuZ2V0KGRlcCk7XG5cbiAgICAgICAgaWYgKGRlcE1vZGlmaWVyKSB7XG4gICAgICAgICAgc29ydChkZXBNb2RpZmllcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXN1bHQucHVzaChtb2RpZmllcik7XG4gIH1cblxuICBtb2RpZmllcnMuZm9yRWFjaChmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICBpZiAoIXZpc2l0ZWQuaGFzKG1vZGlmaWVyLm5hbWUpKSB7XG4gICAgICAvLyBjaGVjayBmb3IgdmlzaXRlZCBvYmplY3RcbiAgICAgIHNvcnQobW9kaWZpZXIpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG9yZGVyTW9kaWZpZXJzKG1vZGlmaWVycykge1xuICAvLyBvcmRlciBiYXNlZCBvbiBkZXBlbmRlbmNpZXNcbiAgdmFyIG9yZGVyZWRNb2RpZmllcnMgPSBvcmRlcihtb2RpZmllcnMpOyAvLyBvcmRlciBiYXNlZCBvbiBwaGFzZVxuXG4gIHJldHVybiBtb2RpZmllclBoYXNlcy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGhhc2UpIHtcbiAgICByZXR1cm4gYWNjLmNvbmNhdChvcmRlcmVkTW9kaWZpZXJzLmZpbHRlcihmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICAgIHJldHVybiBtb2RpZmllci5waGFzZSA9PT0gcGhhc2U7XG4gICAgfSkpO1xuICB9LCBbXSk7XG59XG5cbmZ1bmN0aW9uIGRlYm91bmNlKGZuKSB7XG4gIHZhciBwZW5kaW5nO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghcGVuZGluZykge1xuICAgICAgcGVuZGluZyA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHBlbmRpbmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgcmVzb2x2ZShmbigpKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGVuZGluZztcbiAgfTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0KHN0cikge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gW10uY29uY2F0KGFyZ3MpLnJlZHVjZShmdW5jdGlvbiAocCwgYykge1xuICAgIHJldHVybiBwLnJlcGxhY2UoLyVzLywgYyk7XG4gIH0sIHN0cik7XG59XG5cbnZhciBJTlZBTElEX01PRElGSUVSX0VSUk9SID0gJ1BvcHBlcjogbW9kaWZpZXIgXCIlc1wiIHByb3ZpZGVkIGFuIGludmFsaWQgJXMgcHJvcGVydHksIGV4cGVjdGVkICVzIGJ1dCBnb3QgJXMnO1xudmFyIE1JU1NJTkdfREVQRU5ERU5DWV9FUlJPUiA9ICdQb3BwZXI6IG1vZGlmaWVyIFwiJXNcIiByZXF1aXJlcyBcIiVzXCIsIGJ1dCBcIiVzXCIgbW9kaWZpZXIgaXMgbm90IGF2YWlsYWJsZSc7XG52YXIgVkFMSURfUFJPUEVSVElFUyA9IFsnbmFtZScsICdlbmFibGVkJywgJ3BoYXNlJywgJ2ZuJywgJ2VmZmVjdCcsICdyZXF1aXJlcycsICdvcHRpb25zJ107XG5mdW5jdGlvbiB2YWxpZGF0ZU1vZGlmaWVycyhtb2RpZmllcnMpIHtcbiAgbW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgT2JqZWN0LmtleXMobW9kaWZpZXIpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgY2FzZSAnbmFtZSc6XG4gICAgICAgICAgaWYgKHR5cGVvZiBtb2RpZmllci5uYW1lICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihmb3JtYXQoSU5WQUxJRF9NT0RJRklFUl9FUlJPUiwgU3RyaW5nKG1vZGlmaWVyLm5hbWUpLCAnXCJuYW1lXCInLCAnXCJzdHJpbmdcIicsIFwiXFxcIlwiICsgU3RyaW5nKG1vZGlmaWVyLm5hbWUpICsgXCJcXFwiXCIpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdlbmFibGVkJzpcbiAgICAgICAgICBpZiAodHlwZW9mIG1vZGlmaWVyLmVuYWJsZWQgIT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihmb3JtYXQoSU5WQUxJRF9NT0RJRklFUl9FUlJPUiwgbW9kaWZpZXIubmFtZSwgJ1wiZW5hYmxlZFwiJywgJ1wiYm9vbGVhblwiJywgXCJcXFwiXCIgKyBTdHJpbmcobW9kaWZpZXIuZW5hYmxlZCkgKyBcIlxcXCJcIikpO1xuICAgICAgICAgIH1cblxuICAgICAgICBjYXNlICdwaGFzZSc6XG4gICAgICAgICAgaWYgKG1vZGlmaWVyUGhhc2VzLmluZGV4T2YobW9kaWZpZXIucGhhc2UpIDwgMCkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihmb3JtYXQoSU5WQUxJRF9NT0RJRklFUl9FUlJPUiwgbW9kaWZpZXIubmFtZSwgJ1wicGhhc2VcIicsIFwiZWl0aGVyIFwiICsgbW9kaWZpZXJQaGFzZXMuam9pbignLCAnKSwgXCJcXFwiXCIgKyBTdHJpbmcobW9kaWZpZXIucGhhc2UpICsgXCJcXFwiXCIpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdmbic6XG4gICAgICAgICAgaWYgKHR5cGVvZiBtb2RpZmllci5mbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihmb3JtYXQoSU5WQUxJRF9NT0RJRklFUl9FUlJPUiwgbW9kaWZpZXIubmFtZSwgJ1wiZm5cIicsICdcImZ1bmN0aW9uXCInLCBcIlxcXCJcIiArIFN0cmluZyhtb2RpZmllci5mbikgKyBcIlxcXCJcIikpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2VmZmVjdCc6XG4gICAgICAgICAgaWYgKHR5cGVvZiBtb2RpZmllci5lZmZlY3QgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZm9ybWF0KElOVkFMSURfTU9ESUZJRVJfRVJST1IsIG1vZGlmaWVyLm5hbWUsICdcImVmZmVjdFwiJywgJ1wiZnVuY3Rpb25cIicsIFwiXFxcIlwiICsgU3RyaW5nKG1vZGlmaWVyLmZuKSArIFwiXFxcIlwiKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAncmVxdWlyZXMnOlxuICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShtb2RpZmllci5yZXF1aXJlcykpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZm9ybWF0KElOVkFMSURfTU9ESUZJRVJfRVJST1IsIG1vZGlmaWVyLm5hbWUsICdcInJlcXVpcmVzXCInLCAnXCJhcnJheVwiJywgXCJcXFwiXCIgKyBTdHJpbmcobW9kaWZpZXIucmVxdWlyZXMpICsgXCJcXFwiXCIpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdyZXF1aXJlc0lmRXhpc3RzJzpcbiAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkobW9kaWZpZXIucmVxdWlyZXNJZkV4aXN0cykpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZm9ybWF0KElOVkFMSURfTU9ESUZJRVJfRVJST1IsIG1vZGlmaWVyLm5hbWUsICdcInJlcXVpcmVzSWZFeGlzdHNcIicsICdcImFycmF5XCInLCBcIlxcXCJcIiArIFN0cmluZyhtb2RpZmllci5yZXF1aXJlc0lmRXhpc3RzKSArIFwiXFxcIlwiKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnb3B0aW9ucyc6XG4gICAgICAgIGNhc2UgJ2RhdGEnOlxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcIlBvcHBlckpTOiBhbiBpbnZhbGlkIHByb3BlcnR5IGhhcyBiZWVuIHByb3ZpZGVkIHRvIHRoZSBcXFwiXCIgKyBtb2RpZmllci5uYW1lICsgXCJcXFwiIG1vZGlmaWVyLCB2YWxpZCBwcm9wZXJ0aWVzIGFyZSBcIiArIFZBTElEX1BST1BFUlRJRVMubWFwKGZ1bmN0aW9uIChzKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJcXFwiXCIgKyBzICsgXCJcXFwiXCI7XG4gICAgICAgICAgfSkuam9pbignLCAnKSArIFwiOyBidXQgXFxcIlwiICsga2V5ICsgXCJcXFwiIHdhcyBwcm92aWRlZC5cIik7XG4gICAgICB9XG5cbiAgICAgIG1vZGlmaWVyLnJlcXVpcmVzICYmIG1vZGlmaWVyLnJlcXVpcmVzLmZvckVhY2goZnVuY3Rpb24gKHJlcXVpcmVtZW50KSB7XG4gICAgICAgIGlmIChtb2RpZmllcnMuZmluZChmdW5jdGlvbiAobW9kKSB7XG4gICAgICAgICAgcmV0dXJuIG1vZC5uYW1lID09PSByZXF1aXJlbWVudDtcbiAgICAgICAgfSkgPT0gbnVsbCkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZm9ybWF0KE1JU1NJTkdfREVQRU5ERU5DWV9FUlJPUiwgU3RyaW5nKG1vZGlmaWVyLm5hbWUpLCByZXF1aXJlbWVudCwgcmVxdWlyZW1lbnQpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiB1bmlxdWVCeShhcnIsIGZuKSB7XG4gIHZhciBpZGVudGlmaWVycyA9IG5ldyBTZXQoKTtcbiAgcmV0dXJuIGFyci5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICB2YXIgaWRlbnRpZmllciA9IGZuKGl0ZW0pO1xuXG4gICAgaWYgKCFpZGVudGlmaWVycy5oYXMoaWRlbnRpZmllcikpIHtcbiAgICAgIGlkZW50aWZpZXJzLmFkZChpZGVudGlmaWVyKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHJldHVybiBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbn1cblxuZnVuY3Rpb24gbWVyZ2VCeU5hbWUobW9kaWZpZXJzKSB7XG4gIHZhciBtZXJnZWQgPSBtb2RpZmllcnMucmVkdWNlKGZ1bmN0aW9uIChtZXJnZWQsIGN1cnJlbnQpIHtcbiAgICB2YXIgZXhpc3RpbmcgPSBtZXJnZWRbY3VycmVudC5uYW1lXTtcbiAgICBtZXJnZWRbY3VycmVudC5uYW1lXSA9IGV4aXN0aW5nID8gT2JqZWN0LmFzc2lnbih7fSwgZXhpc3RpbmcsIHt9LCBjdXJyZW50LCB7XG4gICAgICBvcHRpb25zOiBPYmplY3QuYXNzaWduKHt9LCBleGlzdGluZy5vcHRpb25zLCB7fSwgY3VycmVudC5vcHRpb25zKSxcbiAgICAgIGRhdGE6IE9iamVjdC5hc3NpZ24oe30sIGV4aXN0aW5nLmRhdGEsIHt9LCBjdXJyZW50LmRhdGEpXG4gICAgfSkgOiBjdXJyZW50O1xuICAgIHJldHVybiBtZXJnZWQ7XG4gIH0sIHt9KTsgLy8gSUUxMSBkb2VzIG5vdCBzdXBwb3J0IE9iamVjdC52YWx1ZXNcblxuICByZXR1cm4gT2JqZWN0LmtleXMobWVyZ2VkKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBtZXJnZWRba2V5XTtcbiAgfSk7XG59XG5cbnZhciBJTlZBTElEX0VMRU1FTlRfRVJST1IgPSAnUG9wcGVyOiBJbnZhbGlkIHJlZmVyZW5jZSBvciBwb3BwZXIgYXJndW1lbnQgcHJvdmlkZWQuIFRoZXkgbXVzdCBiZSBlaXRoZXIgYSBET00gZWxlbWVudCBvciB2aXJ0dWFsIGVsZW1lbnQuJztcbnZhciBJTkZJTklURV9MT09QX0VSUk9SID0gJ1BvcHBlcjogQW4gaW5maW5pdGUgbG9vcCBpbiB0aGUgbW9kaWZpZXJzIGN5Y2xlIGhhcyBiZWVuIGRldGVjdGVkISBUaGUgY3ljbGUgaGFzIGJlZW4gaW50ZXJydXB0ZWQgdG8gcHJldmVudCBhIGJyb3dzZXIgY3Jhc2guJztcbnZhciBERUZBVUxUX09QVElPTlMgPSB7XG4gIHBsYWNlbWVudDogJ2JvdHRvbScsXG4gIG1vZGlmaWVyczogW10sXG4gIHN0cmF0ZWd5OiAnYWJzb2x1dGUnXG59O1xuXG5mdW5jdGlvbiBhcmVWYWxpZEVsZW1lbnRzKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuICFhcmdzLnNvbWUoZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gIShlbGVtZW50ICYmIHR5cGVvZiBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCA9PT0gJ2Z1bmN0aW9uJyk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBwb3BwZXJHZW5lcmF0b3IoZ2VuZXJhdG9yT3B0aW9ucykge1xuICBpZiAoZ2VuZXJhdG9yT3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgZ2VuZXJhdG9yT3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIF9nZW5lcmF0b3JPcHRpb25zID0gZ2VuZXJhdG9yT3B0aW9ucyxcbiAgICAgIF9nZW5lcmF0b3JPcHRpb25zJGRlZiA9IF9nZW5lcmF0b3JPcHRpb25zLmRlZmF1bHRNb2RpZmllcnMsXG4gICAgICBkZWZhdWx0TW9kaWZpZXJzID0gX2dlbmVyYXRvck9wdGlvbnMkZGVmID09PSB2b2lkIDAgPyBbXSA6IF9nZW5lcmF0b3JPcHRpb25zJGRlZixcbiAgICAgIF9nZW5lcmF0b3JPcHRpb25zJGRlZjIgPSBfZ2VuZXJhdG9yT3B0aW9ucy5kZWZhdWx0T3B0aW9ucyxcbiAgICAgIGRlZmF1bHRPcHRpb25zID0gX2dlbmVyYXRvck9wdGlvbnMkZGVmMiA9PT0gdm9pZCAwID8gREVGQVVMVF9PUFRJT05TIDogX2dlbmVyYXRvck9wdGlvbnMkZGVmMjtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNyZWF0ZVBvcHBlcihyZWZlcmVuY2UsIHBvcHBlciwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSBkZWZhdWx0T3B0aW9ucztcbiAgICB9XG5cbiAgICB2YXIgc3RhdGUgPSB7XG4gICAgICBwbGFjZW1lbnQ6ICdib3R0b20nLFxuICAgICAgb3JkZXJlZE1vZGlmaWVyczogW10sXG4gICAgICBvcHRpb25zOiBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX09QVElPTlMsIHt9LCBkZWZhdWx0T3B0aW9ucyksXG4gICAgICBtb2RpZmllcnNEYXRhOiB7fSxcbiAgICAgIGVsZW1lbnRzOiB7XG4gICAgICAgIHJlZmVyZW5jZTogcmVmZXJlbmNlLFxuICAgICAgICBwb3BwZXI6IHBvcHBlclxuICAgICAgfSxcbiAgICAgIGF0dHJpYnV0ZXM6IHt9LFxuICAgICAgc3R5bGVzOiB7fVxuICAgIH07XG4gICAgdmFyIGVmZmVjdENsZWFudXBGbnMgPSBbXTtcbiAgICB2YXIgaXNEZXN0cm95ZWQgPSBmYWxzZTtcbiAgICB2YXIgaW5zdGFuY2UgPSB7XG4gICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICBzZXRPcHRpb25zOiBmdW5jdGlvbiBzZXRPcHRpb25zKG9wdGlvbnMpIHtcbiAgICAgICAgY2xlYW51cE1vZGlmaWVyRWZmZWN0cygpO1xuICAgICAgICBzdGF0ZS5vcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdE9wdGlvbnMsIHt9LCBzdGF0ZS5vcHRpb25zLCB7fSwgb3B0aW9ucyk7XG4gICAgICAgIHN0YXRlLnNjcm9sbFBhcmVudHMgPSB7XG4gICAgICAgICAgcmVmZXJlbmNlOiBpc0VsZW1lbnQocmVmZXJlbmNlKSA/IGxpc3RTY3JvbGxQYXJlbnRzKHJlZmVyZW5jZSkgOiByZWZlcmVuY2UuY29udGV4dEVsZW1lbnQgPyBsaXN0U2Nyb2xsUGFyZW50cyhyZWZlcmVuY2UuY29udGV4dEVsZW1lbnQpIDogW10sXG4gICAgICAgICAgcG9wcGVyOiBsaXN0U2Nyb2xsUGFyZW50cyhwb3BwZXIpXG4gICAgICAgIH07IC8vIE9yZGVycyB0aGUgbW9kaWZpZXJzIGJhc2VkIG9uIHRoZWlyIGRlcGVuZGVuY2llcyBhbmQgYHBoYXNlYFxuICAgICAgICAvLyBwcm9wZXJ0aWVzXG5cbiAgICAgICAgdmFyIG9yZGVyZWRNb2RpZmllcnMgPSBvcmRlck1vZGlmaWVycyhtZXJnZUJ5TmFtZShbXS5jb25jYXQoZGVmYXVsdE1vZGlmaWVycywgc3RhdGUub3B0aW9ucy5tb2RpZmllcnMpKSk7IC8vIFN0cmlwIG91dCBkaXNhYmxlZCBtb2RpZmllcnNcblxuICAgICAgICBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzID0gb3JkZXJlZE1vZGlmaWVycy5maWx0ZXIoZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgICByZXR1cm4gbS5lbmFibGVkO1xuICAgICAgICB9KTsgLy8gVmFsaWRhdGUgdGhlIHByb3ZpZGVkIG1vZGlmaWVycyBzbyB0aGF0IHRoZSBjb25zdW1lciB3aWxsIGdldCB3YXJuZWRcbiAgICAgICAgLy8gaWYgb25lIG9mIHRoZSBtb2RpZmllcnMgaXMgaW52YWxpZCBmb3IgYW55IHJlYXNvblxuXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICB2YXIgbW9kaWZpZXJzID0gdW5pcXVlQnkoW10uY29uY2F0KG9yZGVyZWRNb2RpZmllcnMsIHN0YXRlLm9wdGlvbnMubW9kaWZpZXJzKSwgZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgICAgICAgIHZhciBuYW1lID0gX3JlZi5uYW1lO1xuICAgICAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdmFsaWRhdGVNb2RpZmllcnMobW9kaWZpZXJzKTtcblxuICAgICAgICAgIGlmIChnZXRCYXNlUGxhY2VtZW50KHN0YXRlLm9wdGlvbnMucGxhY2VtZW50KSA9PT0gYXV0bykge1xuICAgICAgICAgICAgdmFyIGZsaXBNb2RpZmllciA9IHN0YXRlLm9yZGVyZWRNb2RpZmllcnMuZmluZChmdW5jdGlvbiAoX3JlZjIpIHtcbiAgICAgICAgICAgICAgdmFyIG5hbWUgPSBfcmVmMi5uYW1lO1xuICAgICAgICAgICAgICByZXR1cm4gbmFtZSA9PT0gJ2ZsaXAnO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmICghZmxpcE1vZGlmaWVyKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoWydQb3BwZXI6IFwiYXV0b1wiIHBsYWNlbWVudHMgcmVxdWlyZSB0aGUgXCJmbGlwXCIgbW9kaWZpZXIgYmUnLCAncHJlc2VudCBhbmQgZW5hYmxlZCB0byB3b3JrLiddLmpvaW4oJyAnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIF9nZXRDb21wdXRlZFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShwb3BwZXIpLFxuICAgICAgICAgICAgICBtYXJnaW5Ub3AgPSBfZ2V0Q29tcHV0ZWRTdHlsZS5tYXJnaW5Ub3AsXG4gICAgICAgICAgICAgIG1hcmdpblJpZ2h0ID0gX2dldENvbXB1dGVkU3R5bGUubWFyZ2luUmlnaHQsXG4gICAgICAgICAgICAgIG1hcmdpbkJvdHRvbSA9IF9nZXRDb21wdXRlZFN0eWxlLm1hcmdpbkJvdHRvbSxcbiAgICAgICAgICAgICAgbWFyZ2luTGVmdCA9IF9nZXRDb21wdXRlZFN0eWxlLm1hcmdpbkxlZnQ7IC8vIFdlIG5vIGxvbmdlciB0YWtlIGludG8gYWNjb3VudCBgbWFyZ2luc2Agb24gdGhlIHBvcHBlciwgYW5kIGl0IGNhblxuICAgICAgICAgIC8vIGNhdXNlIGJ1Z3Mgd2l0aCBwb3NpdGlvbmluZywgc28gd2UnbGwgd2FybiB0aGUgY29uc3VtZXJcblxuXG4gICAgICAgICAgaWYgKFttYXJnaW5Ub3AsIG1hcmdpblJpZ2h0LCBtYXJnaW5Cb3R0b20sIG1hcmdpbkxlZnRdLnNvbWUoZnVuY3Rpb24gKG1hcmdpbikge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQobWFyZ2luKTtcbiAgICAgICAgICB9KSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFsnUG9wcGVyOiBDU1MgXCJtYXJnaW5cIiBzdHlsZXMgY2Fubm90IGJlIHVzZWQgdG8gYXBwbHkgcGFkZGluZycsICdiZXR3ZWVuIHRoZSBwb3BwZXIgYW5kIGl0cyByZWZlcmVuY2UgZWxlbWVudCBvciBib3VuZGFyeS4nLCAnVG8gcmVwbGljYXRlIG1hcmdpbiwgdXNlIHRoZSBgb2Zmc2V0YCBtb2RpZmllciwgYXMgd2VsbCBhcycsICd0aGUgYHBhZGRpbmdgIG9wdGlvbiBpbiB0aGUgYHByZXZlbnRPdmVyZmxvd2AgYW5kIGBmbGlwYCcsICdtb2RpZmllcnMuJ10uam9pbignICcpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBydW5Nb2RpZmllckVmZmVjdHMoKTtcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlLnVwZGF0ZSgpO1xuICAgICAgfSxcbiAgICAgIC8vIFN5bmMgdXBkYXRlIOKAkyBpdCB3aWxsIGFsd2F5cyBiZSBleGVjdXRlZCwgZXZlbiBpZiBub3QgbmVjZXNzYXJ5LiBUaGlzXG4gICAgICAvLyBpcyB1c2VmdWwgZm9yIGxvdyBmcmVxdWVuY3kgdXBkYXRlcyB3aGVyZSBzeW5jIGJlaGF2aW9yIHNpbXBsaWZpZXMgdGhlXG4gICAgICAvLyBsb2dpYy5cbiAgICAgIC8vIEZvciBoaWdoIGZyZXF1ZW5jeSB1cGRhdGVzIChlLmcuIGByZXNpemVgIGFuZCBgc2Nyb2xsYCBldmVudHMpLCBhbHdheXNcbiAgICAgIC8vIHByZWZlciB0aGUgYXN5bmMgUG9wcGVyI3VwZGF0ZSBtZXRob2RcbiAgICAgIGZvcmNlVXBkYXRlOiBmdW5jdGlvbiBmb3JjZVVwZGF0ZSgpIHtcbiAgICAgICAgaWYgKGlzRGVzdHJveWVkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIF9zdGF0ZSRlbGVtZW50cyA9IHN0YXRlLmVsZW1lbnRzLFxuICAgICAgICAgICAgcmVmZXJlbmNlID0gX3N0YXRlJGVsZW1lbnRzLnJlZmVyZW5jZSxcbiAgICAgICAgICAgIHBvcHBlciA9IF9zdGF0ZSRlbGVtZW50cy5wb3BwZXI7IC8vIERvbid0IHByb2NlZWQgaWYgYHJlZmVyZW5jZWAgb3IgYHBvcHBlcmAgYXJlIG5vdCB2YWxpZCBlbGVtZW50c1xuICAgICAgICAvLyBhbnltb3JlXG5cbiAgICAgICAgaWYgKCFhcmVWYWxpZEVsZW1lbnRzKHJlZmVyZW5jZSwgcG9wcGVyKSkge1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoSU5WQUxJRF9FTEVNRU5UX0VSUk9SKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gLy8gU3RvcmUgdGhlIHJlZmVyZW5jZSBhbmQgcG9wcGVyIHJlY3RzIHRvIGJlIHJlYWQgYnkgbW9kaWZpZXJzXG5cblxuICAgICAgICBzdGF0ZS5yZWN0cyA9IHtcbiAgICAgICAgICByZWZlcmVuY2U6IGdldENvbXBvc2l0ZVJlY3QocmVmZXJlbmNlLCBnZXRPZmZzZXRQYXJlbnQocG9wcGVyKSwgc3RhdGUub3B0aW9ucy5zdHJhdGVneSA9PT0gJ2ZpeGVkJyksXG4gICAgICAgICAgcG9wcGVyOiBnZXRMYXlvdXRSZWN0KHBvcHBlcilcbiAgICAgICAgfTsgLy8gTW9kaWZpZXJzIGhhdmUgdGhlIGFiaWxpdHkgdG8gcmVzZXQgdGhlIGN1cnJlbnQgdXBkYXRlIGN5Y2xlLiBUaGVcbiAgICAgICAgLy8gbW9zdCBjb21tb24gdXNlIGNhc2UgZm9yIHRoaXMgaXMgdGhlIGBmbGlwYCBtb2RpZmllciBjaGFuZ2luZyB0aGVcbiAgICAgICAgLy8gcGxhY2VtZW50LCB3aGljaCB0aGVuIG5lZWRzIHRvIHJlLXJ1biBhbGwgdGhlIG1vZGlmaWVycywgYmVjYXVzZSB0aGVcbiAgICAgICAgLy8gbG9naWMgd2FzIHByZXZpb3VzbHkgcmFuIGZvciB0aGUgcHJldmlvdXMgcGxhY2VtZW50IGFuZCBpcyB0aGVyZWZvcmVcbiAgICAgICAgLy8gc3RhbGUvaW5jb3JyZWN0XG5cbiAgICAgICAgc3RhdGUucmVzZXQgPSBmYWxzZTtcbiAgICAgICAgc3RhdGUucGxhY2VtZW50ID0gc3RhdGUub3B0aW9ucy5wbGFjZW1lbnQ7IC8vIE9uIGVhY2ggdXBkYXRlIGN5Y2xlLCB0aGUgYG1vZGlmaWVyc0RhdGFgIHByb3BlcnR5IGZvciBlYWNoIG1vZGlmaWVyXG4gICAgICAgIC8vIGlzIGZpbGxlZCB3aXRoIHRoZSBpbml0aWFsIGRhdGEgc3BlY2lmaWVkIGJ5IHRoZSBtb2RpZmllci4gVGhpcyBtZWFuc1xuICAgICAgICAvLyBpdCBkb2Vzbid0IHBlcnNpc3QgYW5kIGlzIGZyZXNoIG9uIGVhY2ggdXBkYXRlLlxuICAgICAgICAvLyBUbyBlbnN1cmUgcGVyc2lzdGVudCBkYXRhLCB1c2UgYCR7bmFtZX0jcGVyc2lzdGVudGBcblxuICAgICAgICBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgICAgICAgcmV0dXJuIHN0YXRlLm1vZGlmaWVyc0RhdGFbbW9kaWZpZXIubmFtZV0gPSBPYmplY3QuYXNzaWduKHt9LCBtb2RpZmllci5kYXRhKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBfX2RlYnVnX2xvb3BzX18gPSAwO1xuXG4gICAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgIF9fZGVidWdfbG9vcHNfXyArPSAxO1xuXG4gICAgICAgICAgICBpZiAoX19kZWJ1Z19sb29wc19fID4gMTAwKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoSU5GSU5JVEVfTE9PUF9FUlJPUik7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzdGF0ZS5yZXNldCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgc3RhdGUucmVzZXQgPSBmYWxzZTtcbiAgICAgICAgICAgIGluZGV4ID0gLTE7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgX3N0YXRlJG9yZGVyZWRNb2RpZmllID0gc3RhdGUub3JkZXJlZE1vZGlmaWVyc1tpbmRleF0sXG4gICAgICAgICAgICAgIGZuID0gX3N0YXRlJG9yZGVyZWRNb2RpZmllLmZuLFxuICAgICAgICAgICAgICBfc3RhdGUkb3JkZXJlZE1vZGlmaWUyID0gX3N0YXRlJG9yZGVyZWRNb2RpZmllLm9wdGlvbnMsXG4gICAgICAgICAgICAgIF9vcHRpb25zID0gX3N0YXRlJG9yZGVyZWRNb2RpZmllMiA9PT0gdm9pZCAwID8ge30gOiBfc3RhdGUkb3JkZXJlZE1vZGlmaWUyLFxuICAgICAgICAgICAgICBuYW1lID0gX3N0YXRlJG9yZGVyZWRNb2RpZmllLm5hbWU7XG5cbiAgICAgICAgICBpZiAodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IGZuKHtcbiAgICAgICAgICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAgICAgICAgICBvcHRpb25zOiBfb3B0aW9ucyxcbiAgICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgaW5zdGFuY2U6IGluc3RhbmNlXG4gICAgICAgICAgICB9KSB8fCBzdGF0ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyBBc3luYyBhbmQgb3B0aW1pc3RpY2FsbHkgb3B0aW1pemVkIHVwZGF0ZSDigJMgaXQgd2lsbCBub3QgYmUgZXhlY3V0ZWQgaWZcbiAgICAgIC8vIG5vdCBuZWNlc3NhcnkgKGRlYm91bmNlZCB0byBydW4gYXQgbW9zdCBvbmNlLXBlci10aWNrKVxuICAgICAgdXBkYXRlOiBkZWJvdW5jZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgIGluc3RhbmNlLmZvcmNlVXBkYXRlKCk7XG4gICAgICAgICAgcmVzb2x2ZShzdGF0ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSksXG4gICAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgICBjbGVhbnVwTW9kaWZpZXJFZmZlY3RzKCk7XG4gICAgICAgIGlzRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKCFhcmVWYWxpZEVsZW1lbnRzKHJlZmVyZW5jZSwgcG9wcGVyKSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICBjb25zb2xlLmVycm9yKElOVkFMSURfRUxFTUVOVF9FUlJPUik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICB9XG5cbiAgICBpbnN0YW5jZS5zZXRPcHRpb25zKG9wdGlvbnMpLnRoZW4oZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICBpZiAoIWlzRGVzdHJveWVkICYmIG9wdGlvbnMub25GaXJzdFVwZGF0ZSkge1xuICAgICAgICBvcHRpb25zLm9uRmlyc3RVcGRhdGUoc3RhdGUpO1xuICAgICAgfVxuICAgIH0pOyAvLyBNb2RpZmllcnMgaGF2ZSB0aGUgYWJpbGl0eSB0byBleGVjdXRlIGFyYml0cmFyeSBjb2RlIGJlZm9yZSB0aGUgZmlyc3RcbiAgICAvLyB1cGRhdGUgY3ljbGUgcnVucy4gVGhleSB3aWxsIGJlIGV4ZWN1dGVkIGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZSB1cGRhdGVcbiAgICAvLyBjeWNsZS4gVGhpcyBpcyB1c2VmdWwgd2hlbiBhIG1vZGlmaWVyIGFkZHMgc29tZSBwZXJzaXN0ZW50IGRhdGEgdGhhdFxuICAgIC8vIG90aGVyIG1vZGlmaWVycyBuZWVkIHRvIHVzZSwgYnV0IHRoZSBtb2RpZmllciBpcyBydW4gYWZ0ZXIgdGhlIGRlcGVuZGVudFxuICAgIC8vIG9uZS5cblxuICAgIGZ1bmN0aW9uIHJ1bk1vZGlmaWVyRWZmZWN0cygpIHtcbiAgICAgIHN0YXRlLm9yZGVyZWRNb2RpZmllcnMuZm9yRWFjaChmdW5jdGlvbiAoX3JlZjMpIHtcbiAgICAgICAgdmFyIG5hbWUgPSBfcmVmMy5uYW1lLFxuICAgICAgICAgICAgX3JlZjMkb3B0aW9ucyA9IF9yZWYzLm9wdGlvbnMsXG4gICAgICAgICAgICBvcHRpb25zID0gX3JlZjMkb3B0aW9ucyA9PT0gdm9pZCAwID8ge30gOiBfcmVmMyRvcHRpb25zLFxuICAgICAgICAgICAgZWZmZWN0ID0gX3JlZjMuZWZmZWN0O1xuXG4gICAgICAgIGlmICh0eXBlb2YgZWZmZWN0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdmFyIGNsZWFudXBGbiA9IGVmZmVjdCh7XG4gICAgICAgICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgaW5zdGFuY2U6IGluc3RhbmNlLFxuICAgICAgICAgICAgb3B0aW9uczogb3B0aW9uc1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgdmFyIG5vb3BGbiA9IGZ1bmN0aW9uIG5vb3BGbigpIHt9O1xuXG4gICAgICAgICAgZWZmZWN0Q2xlYW51cEZucy5wdXNoKGNsZWFudXBGbiB8fCBub29wRm4pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGVhbnVwTW9kaWZpZXJFZmZlY3RzKCkge1xuICAgICAgZWZmZWN0Q2xlYW51cEZucy5mb3JFYWNoKGZ1bmN0aW9uIChmbikge1xuICAgICAgICByZXR1cm4gZm4oKTtcbiAgICAgIH0pO1xuICAgICAgZWZmZWN0Q2xlYW51cEZucyA9IFtdO1xuICAgIH1cblxuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfTtcbn1cblxudmFyIHBhc3NpdmUgPSB7XG4gIHBhc3NpdmU6IHRydWVcbn07XG5cbmZ1bmN0aW9uIGVmZmVjdChfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBpbnN0YW5jZSA9IF9yZWYuaW5zdGFuY2UsXG4gICAgICBvcHRpb25zID0gX3JlZi5vcHRpb25zO1xuICB2YXIgX29wdGlvbnMkc2Nyb2xsID0gb3B0aW9ucy5zY3JvbGwsXG4gICAgICBzY3JvbGwgPSBfb3B0aW9ucyRzY3JvbGwgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRzY3JvbGwsXG4gICAgICBfb3B0aW9ucyRyZXNpemUgPSBvcHRpb25zLnJlc2l6ZSxcbiAgICAgIHJlc2l6ZSA9IF9vcHRpb25zJHJlc2l6ZSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJHJlc2l6ZTtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdyhzdGF0ZS5lbGVtZW50cy5wb3BwZXIpO1xuICB2YXIgc2Nyb2xsUGFyZW50cyA9IFtdLmNvbmNhdChzdGF0ZS5zY3JvbGxQYXJlbnRzLnJlZmVyZW5jZSwgc3RhdGUuc2Nyb2xsUGFyZW50cy5wb3BwZXIpO1xuXG4gIGlmIChzY3JvbGwpIHtcbiAgICBzY3JvbGxQYXJlbnRzLmZvckVhY2goZnVuY3Rpb24gKHNjcm9sbFBhcmVudCkge1xuICAgICAgc2Nyb2xsUGFyZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGluc3RhbmNlLnVwZGF0ZSwgcGFzc2l2ZSk7XG4gICAgfSk7XG4gIH1cblxuICBpZiAocmVzaXplKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGluc3RhbmNlLnVwZGF0ZSwgcGFzc2l2ZSk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmIChzY3JvbGwpIHtcbiAgICAgIHNjcm9sbFBhcmVudHMuZm9yRWFjaChmdW5jdGlvbiAoc2Nyb2xsUGFyZW50KSB7XG4gICAgICAgIHNjcm9sbFBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBpbnN0YW5jZS51cGRhdGUsIHBhc3NpdmUpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHJlc2l6ZSkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGluc3RhbmNlLnVwZGF0ZSwgcGFzc2l2ZSk7XG4gICAgfVxuICB9O1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxudmFyIGV2ZW50TGlzdGVuZXJzID0ge1xuICBuYW1lOiAnZXZlbnRMaXN0ZW5lcnMnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ3dyaXRlJyxcbiAgZm46IGZ1bmN0aW9uIGZuKCkge30sXG4gIGVmZmVjdDogZWZmZWN0LFxuICBkYXRhOiB7fVxufTtcblxuZnVuY3Rpb24gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudCkge1xuICByZXR1cm4gcGxhY2VtZW50LnNwbGl0KCctJylbMV07XG59XG5cbmZ1bmN0aW9uIGdldE1haW5BeGlzRnJvbVBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIFsndG9wJywgJ2JvdHRvbSddLmluZGV4T2YocGxhY2VtZW50KSA+PSAwID8gJ3gnIDogJ3knO1xufVxuXG5mdW5jdGlvbiBjb21wdXRlT2Zmc2V0cyhfcmVmKSB7XG4gIHZhciByZWZlcmVuY2UgPSBfcmVmLnJlZmVyZW5jZSxcbiAgICAgIGVsZW1lbnQgPSBfcmVmLmVsZW1lbnQsXG4gICAgICBwbGFjZW1lbnQgPSBfcmVmLnBsYWNlbWVudDtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBwbGFjZW1lbnQgPyBnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCkgOiBudWxsO1xuICB2YXIgdmFyaWF0aW9uID0gcGxhY2VtZW50ID8gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudCkgOiBudWxsO1xuICB2YXIgY29tbW9uWCA9IHJlZmVyZW5jZS54ICsgcmVmZXJlbmNlLndpZHRoIC8gMiAtIGVsZW1lbnQud2lkdGggLyAyO1xuICB2YXIgY29tbW9uWSA9IHJlZmVyZW5jZS55ICsgcmVmZXJlbmNlLmhlaWdodCAvIDIgLSBlbGVtZW50LmhlaWdodCAvIDI7XG4gIHZhciBvZmZzZXRzO1xuXG4gIHN3aXRjaCAoYmFzZVBsYWNlbWVudCkge1xuICAgIGNhc2UgdG9wOlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogY29tbW9uWCxcbiAgICAgICAgeTogcmVmZXJlbmNlLnkgLSBlbGVtZW50LmhlaWdodFxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBib3R0b206XG4gICAgICBvZmZzZXRzID0ge1xuICAgICAgICB4OiBjb21tb25YLFxuICAgICAgICB5OiByZWZlcmVuY2UueSArIHJlZmVyZW5jZS5oZWlnaHRcbiAgICAgIH07XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgcmlnaHQ6XG4gICAgICBvZmZzZXRzID0ge1xuICAgICAgICB4OiByZWZlcmVuY2UueCArIHJlZmVyZW5jZS53aWR0aCxcbiAgICAgICAgeTogY29tbW9uWVxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBsZWZ0OlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogcmVmZXJlbmNlLnggLSBlbGVtZW50LndpZHRoLFxuICAgICAgICB5OiBjb21tb25ZXG4gICAgICB9O1xuICAgICAgYnJlYWs7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogcmVmZXJlbmNlLngsXG4gICAgICAgIHk6IHJlZmVyZW5jZS55XG4gICAgICB9O1xuICB9XG5cbiAgdmFyIG1haW5BeGlzID0gYmFzZVBsYWNlbWVudCA/IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudChiYXNlUGxhY2VtZW50KSA6IG51bGw7XG5cbiAgaWYgKG1haW5BeGlzICE9IG51bGwpIHtcbiAgICB2YXIgbGVuID0gbWFpbkF4aXMgPT09ICd5JyA/ICdoZWlnaHQnIDogJ3dpZHRoJztcblxuICAgIHN3aXRjaCAodmFyaWF0aW9uKSB7XG4gICAgICBjYXNlIHN0YXJ0OlxuICAgICAgICBvZmZzZXRzW21haW5BeGlzXSA9IE1hdGguZmxvb3Iob2Zmc2V0c1ttYWluQXhpc10pIC0gTWF0aC5mbG9vcihyZWZlcmVuY2VbbGVuXSAvIDIgLSBlbGVtZW50W2xlbl0gLyAyKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgZW5kOlxuICAgICAgICBvZmZzZXRzW21haW5BeGlzXSA9IE1hdGguZmxvb3Iob2Zmc2V0c1ttYWluQXhpc10pICsgTWF0aC5jZWlsKHJlZmVyZW5jZVtsZW5dIC8gMiAtIGVsZW1lbnRbbGVuXSAvIDIpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0cztcbn1cblxuZnVuY3Rpb24gcG9wcGVyT2Zmc2V0cyhfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBuYW1lID0gX3JlZi5uYW1lO1xuICAvLyBPZmZzZXRzIGFyZSB0aGUgYWN0dWFsIHBvc2l0aW9uIHRoZSBwb3BwZXIgbmVlZHMgdG8gaGF2ZSB0byBiZVxuICAvLyBwcm9wZXJseSBwb3NpdGlvbmVkIG5lYXIgaXRzIHJlZmVyZW5jZSBlbGVtZW50XG4gIC8vIFRoaXMgaXMgdGhlIG1vc3QgYmFzaWMgcGxhY2VtZW50LCBhbmQgd2lsbCBiZSBhZGp1c3RlZCBieVxuICAvLyB0aGUgbW9kaWZpZXJzIGluIHRoZSBuZXh0IHN0ZXBcbiAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXSA9IGNvbXB1dGVPZmZzZXRzKHtcbiAgICByZWZlcmVuY2U6IHN0YXRlLnJlY3RzLnJlZmVyZW5jZSxcbiAgICBlbGVtZW50OiBzdGF0ZS5yZWN0cy5wb3BwZXIsXG4gICAgc3RyYXRlZ3k6ICdhYnNvbHV0ZScsXG4gICAgcGxhY2VtZW50OiBzdGF0ZS5wbGFjZW1lbnRcbiAgfSk7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG52YXIgcG9wcGVyT2Zmc2V0cyQxID0ge1xuICBuYW1lOiAncG9wcGVyT2Zmc2V0cycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAncmVhZCcsXG4gIGZuOiBwb3BwZXJPZmZzZXRzLFxuICBkYXRhOiB7fVxufTtcblxudmFyIHVuc2V0U2lkZXMgPSB7XG4gIHRvcDogJ2F1dG8nLFxuICByaWdodDogJ2F1dG8nLFxuICBib3R0b206ICdhdXRvJyxcbiAgbGVmdDogJ2F1dG8nXG59OyAvLyBSb3VuZCB0aGUgb2Zmc2V0cyB0byB0aGUgbmVhcmVzdCBzdWl0YWJsZSBzdWJwaXhlbCBiYXNlZCBvbiB0aGUgRFBSLlxuLy8gWm9vbWluZyBjYW4gY2hhbmdlIHRoZSBEUFIsIGJ1dCBpdCBzZWVtcyB0byByZXBvcnQgYSB2YWx1ZSB0aGF0IHdpbGxcbi8vIGNsZWFubHkgZGl2aWRlIHRoZSB2YWx1ZXMgaW50byB0aGUgYXBwcm9wcmlhdGUgc3VicGl4ZWxzLlxuXG5mdW5jdGlvbiByb3VuZE9mZnNldHMoX3JlZikge1xuICB2YXIgeCA9IF9yZWYueCxcbiAgICAgIHkgPSBfcmVmLnk7XG4gIHZhciB3aW4gPSB3aW5kb3c7XG4gIHZhciBkcHIgPSB3aW4uZGV2aWNlUGl4ZWxSYXRpbyB8fCAxO1xuICByZXR1cm4ge1xuICAgIHg6IE1hdGgucm91bmQoeCAqIGRwcikgLyBkcHIgfHwgMCxcbiAgICB5OiBNYXRoLnJvdW5kKHkgKiBkcHIpIC8gZHByIHx8IDBcbiAgfTtcbn1cblxuZnVuY3Rpb24gbWFwVG9TdHlsZXMoX3JlZjIpIHtcbiAgdmFyIF9PYmplY3QkYXNzaWduMjtcblxuICB2YXIgcG9wcGVyID0gX3JlZjIucG9wcGVyLFxuICAgICAgcG9wcGVyUmVjdCA9IF9yZWYyLnBvcHBlclJlY3QsXG4gICAgICBwbGFjZW1lbnQgPSBfcmVmMi5wbGFjZW1lbnQsXG4gICAgICBvZmZzZXRzID0gX3JlZjIub2Zmc2V0cyxcbiAgICAgIHBvc2l0aW9uID0gX3JlZjIucG9zaXRpb24sXG4gICAgICBncHVBY2NlbGVyYXRpb24gPSBfcmVmMi5ncHVBY2NlbGVyYXRpb24sXG4gICAgICBhZGFwdGl2ZSA9IF9yZWYyLmFkYXB0aXZlO1xuXG4gIHZhciBfcm91bmRPZmZzZXRzID0gcm91bmRPZmZzZXRzKG9mZnNldHMpLFxuICAgICAgeCA9IF9yb3VuZE9mZnNldHMueCxcbiAgICAgIHkgPSBfcm91bmRPZmZzZXRzLnk7XG5cbiAgdmFyIGhhc1ggPSBvZmZzZXRzLmhhc093blByb3BlcnR5KCd4Jyk7XG4gIHZhciBoYXNZID0gb2Zmc2V0cy5oYXNPd25Qcm9wZXJ0eSgneScpO1xuICB2YXIgc2lkZVggPSBsZWZ0O1xuICB2YXIgc2lkZVkgPSB0b3A7XG4gIHZhciB3aW4gPSB3aW5kb3c7XG5cbiAgaWYgKGFkYXB0aXZlKSB7XG4gICAgdmFyIG9mZnNldFBhcmVudCA9IGdldE9mZnNldFBhcmVudChwb3BwZXIpO1xuXG4gICAgaWYgKG9mZnNldFBhcmVudCA9PT0gZ2V0V2luZG93KHBvcHBlcikpIHtcbiAgICAgIG9mZnNldFBhcmVudCA9IGdldERvY3VtZW50RWxlbWVudChwb3BwZXIpO1xuICAgIH0gLy8gJEZsb3dGaXhNZTogZm9yY2UgdHlwZSByZWZpbmVtZW50LCB3ZSBjb21wYXJlIG9mZnNldFBhcmVudCB3aXRoIHdpbmRvdyBhYm92ZSwgYnV0IEZsb3cgZG9lc24ndCBkZXRlY3QgaXRcblxuICAgIC8qOjogb2Zmc2V0UGFyZW50ID0gKG9mZnNldFBhcmVudDogRWxlbWVudCk7ICovXG5cblxuICAgIGlmIChwbGFjZW1lbnQgPT09IHRvcCkge1xuICAgICAgc2lkZVkgPSBib3R0b207XG4gICAgICB5IC09IG9mZnNldFBhcmVudC5jbGllbnRIZWlnaHQgLSBwb3BwZXJSZWN0LmhlaWdodDtcbiAgICAgIHkgKj0gZ3B1QWNjZWxlcmF0aW9uID8gMSA6IC0xO1xuICAgIH1cblxuICAgIGlmIChwbGFjZW1lbnQgPT09IGxlZnQpIHtcbiAgICAgIHNpZGVYID0gcmlnaHQ7XG4gICAgICB4IC09IG9mZnNldFBhcmVudC5jbGllbnRXaWR0aCAtIHBvcHBlclJlY3Qud2lkdGg7XG4gICAgICB4ICo9IGdwdUFjY2VsZXJhdGlvbiA/IDEgOiAtMTtcbiAgICB9XG4gIH1cblxuICB2YXIgY29tbW9uU3R5bGVzID0gT2JqZWN0LmFzc2lnbih7XG4gICAgcG9zaXRpb246IHBvc2l0aW9uXG4gIH0sIGFkYXB0aXZlICYmIHVuc2V0U2lkZXMpO1xuXG4gIGlmIChncHVBY2NlbGVyYXRpb24pIHtcbiAgICB2YXIgX09iamVjdCRhc3NpZ247XG5cbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgY29tbW9uU3R5bGVzLCAoX09iamVjdCRhc3NpZ24gPSB7fSwgX09iamVjdCRhc3NpZ25bc2lkZVldID0gaGFzWSA/ICcwJyA6ICcnLCBfT2JqZWN0JGFzc2lnbltzaWRlWF0gPSBoYXNYID8gJzAnIDogJycsIF9PYmplY3QkYXNzaWduLnRyYW5zZm9ybSA9ICh3aW4uZGV2aWNlUGl4ZWxSYXRpbyB8fCAxKSA8IDIgPyBcInRyYW5zbGF0ZShcIiArIHggKyBcInB4LCBcIiArIHkgKyBcInB4KVwiIDogXCJ0cmFuc2xhdGUzZChcIiArIHggKyBcInB4LCBcIiArIHkgKyBcInB4LCAwKVwiLCBfT2JqZWN0JGFzc2lnbikpO1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGNvbW1vblN0eWxlcywgKF9PYmplY3QkYXNzaWduMiA9IHt9LCBfT2JqZWN0JGFzc2lnbjJbc2lkZVldID0gaGFzWSA/IHkgKyBcInB4XCIgOiAnJywgX09iamVjdCRhc3NpZ24yW3NpZGVYXSA9IGhhc1ggPyB4ICsgXCJweFwiIDogJycsIF9PYmplY3QkYXNzaWduMi50cmFuc2Zvcm0gPSAnJywgX09iamVjdCRhc3NpZ24yKSk7XG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVTdHlsZXMoX3JlZjMpIHtcbiAgdmFyIHN0YXRlID0gX3JlZjMuc3RhdGUsXG4gICAgICBvcHRpb25zID0gX3JlZjMub3B0aW9ucztcbiAgdmFyIF9vcHRpb25zJGdwdUFjY2VsZXJhdCA9IG9wdGlvbnMuZ3B1QWNjZWxlcmF0aW9uLFxuICAgICAgZ3B1QWNjZWxlcmF0aW9uID0gX29wdGlvbnMkZ3B1QWNjZWxlcmF0ID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkZ3B1QWNjZWxlcmF0LFxuICAgICAgX29wdGlvbnMkYWRhcHRpdmUgPSBvcHRpb25zLmFkYXB0aXZlLFxuICAgICAgYWRhcHRpdmUgPSBfb3B0aW9ucyRhZGFwdGl2ZSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJGFkYXB0aXZlO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICB2YXIgdHJhbnNpdGlvblByb3BlcnR5ID0gZ2V0Q29tcHV0ZWRTdHlsZShzdGF0ZS5lbGVtZW50cy5wb3BwZXIpLnRyYW5zaXRpb25Qcm9wZXJ0eSB8fCAnJztcblxuICAgIGlmIChhZGFwdGl2ZSAmJiBbJ3RyYW5zZm9ybScsICd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnXS5zb21lKGZ1bmN0aW9uIChwcm9wZXJ0eSkge1xuICAgICAgcmV0dXJuIHRyYW5zaXRpb25Qcm9wZXJ0eS5pbmRleE9mKHByb3BlcnR5KSA+PSAwO1xuICAgIH0pKSB7XG4gICAgICBjb25zb2xlLndhcm4oWydQb3BwZXI6IERldGVjdGVkIENTUyB0cmFuc2l0aW9ucyBvbiBhdCBsZWFzdCBvbmUgb2YgdGhlIGZvbGxvd2luZycsICdDU1MgcHJvcGVydGllczogXCJ0cmFuc2Zvcm1cIiwgXCJ0b3BcIiwgXCJyaWdodFwiLCBcImJvdHRvbVwiLCBcImxlZnRcIi4nLCAnXFxuXFxuJywgJ0Rpc2FibGUgdGhlIFwiY29tcHV0ZVN0eWxlc1wiIG1vZGlmaWVyXFwncyBgYWRhcHRpdmVgIG9wdGlvbiB0byBhbGxvdycsICdmb3Igc21vb3RoIHRyYW5zaXRpb25zLCBvciByZW1vdmUgdGhlc2UgcHJvcGVydGllcyBmcm9tIHRoZSBDU1MnLCAndHJhbnNpdGlvbiBkZWNsYXJhdGlvbiBvbiB0aGUgcG9wcGVyIGVsZW1lbnQgaWYgb25seSB0cmFuc2l0aW9uaW5nJywgJ29wYWNpdHkgb3IgYmFja2dyb3VuZC1jb2xvciBmb3IgZXhhbXBsZS4nLCAnXFxuXFxuJywgJ1dlIHJlY29tbWVuZCB1c2luZyB0aGUgcG9wcGVyIGVsZW1lbnQgYXMgYSB3cmFwcGVyIGFyb3VuZCBhbiBpbm5lcicsICdlbGVtZW50IHRoYXQgY2FuIGhhdmUgYW55IENTUyBwcm9wZXJ0eSB0cmFuc2l0aW9uZWQgZm9yIGFuaW1hdGlvbnMuJ10uam9pbignICcpKTtcbiAgICB9XG4gIH1cblxuICB2YXIgY29tbW9uU3R5bGVzID0ge1xuICAgIHBsYWNlbWVudDogZ2V0QmFzZVBsYWNlbWVudChzdGF0ZS5wbGFjZW1lbnQpLFxuICAgIHBvcHBlcjogc3RhdGUuZWxlbWVudHMucG9wcGVyLFxuICAgIHBvcHBlclJlY3Q6IHN0YXRlLnJlY3RzLnBvcHBlcixcbiAgICBncHVBY2NlbGVyYXRpb246IGdwdUFjY2VsZXJhdGlvblxuICB9O1xuXG4gIGlmIChzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMgIT0gbnVsbCkge1xuICAgIHN0YXRlLnN0eWxlcy5wb3BwZXIgPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZS5zdHlsZXMucG9wcGVyLCB7fSwgbWFwVG9TdHlsZXMoT2JqZWN0LmFzc2lnbih7fSwgY29tbW9uU3R5bGVzLCB7XG4gICAgICBvZmZzZXRzOiBzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMsXG4gICAgICBwb3NpdGlvbjogc3RhdGUub3B0aW9ucy5zdHJhdGVneSxcbiAgICAgIGFkYXB0aXZlOiBhZGFwdGl2ZVxuICAgIH0pKSk7XG4gIH1cblxuICBpZiAoc3RhdGUubW9kaWZpZXJzRGF0YS5hcnJvdyAhPSBudWxsKSB7XG4gICAgc3RhdGUuc3R5bGVzLmFycm93ID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUuc3R5bGVzLmFycm93LCB7fSwgbWFwVG9TdHlsZXMoT2JqZWN0LmFzc2lnbih7fSwgY29tbW9uU3R5bGVzLCB7XG4gICAgICBvZmZzZXRzOiBzdGF0ZS5tb2RpZmllcnNEYXRhLmFycm93LFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICBhZGFwdGl2ZTogZmFsc2VcbiAgICB9KSkpO1xuICB9XG5cbiAgc3RhdGUuYXR0cmlidXRlcy5wb3BwZXIgPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZS5hdHRyaWJ1dGVzLnBvcHBlciwge1xuICAgICdkYXRhLXBvcHBlci1wbGFjZW1lbnQnOiBzdGF0ZS5wbGFjZW1lbnRcbiAgfSk7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG52YXIgY29tcHV0ZVN0eWxlcyQxID0ge1xuICBuYW1lOiAnY29tcHV0ZVN0eWxlcycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnYmVmb3JlV3JpdGUnLFxuICBmbjogY29tcHV0ZVN0eWxlcyxcbiAgZGF0YToge31cbn07XG5cbi8vIGFuZCBhcHBsaWVzIHRoZW0gdG8gdGhlIEhUTUxFbGVtZW50cyBzdWNoIGFzIHBvcHBlciBhbmQgYXJyb3dcblxuZnVuY3Rpb24gYXBwbHlTdHlsZXMoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlO1xuICBPYmplY3Qua2V5cyhzdGF0ZS5lbGVtZW50cykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgIHZhciBzdHlsZSA9IHN0YXRlLnN0eWxlc1tuYW1lXSB8fCB7fTtcbiAgICB2YXIgYXR0cmlidXRlcyA9IHN0YXRlLmF0dHJpYnV0ZXNbbmFtZV0gfHwge307XG4gICAgdmFyIGVsZW1lbnQgPSBzdGF0ZS5lbGVtZW50c1tuYW1lXTsgLy8gYXJyb3cgaXMgb3B0aW9uYWwgKyB2aXJ0dWFsIGVsZW1lbnRzXG5cbiAgICBpZiAoIWlzSFRNTEVsZW1lbnQoZWxlbWVudCkgfHwgIWdldE5vZGVOYW1lKGVsZW1lbnQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBGbG93IGRvZXNuJ3Qgc3VwcG9ydCB0byBleHRlbmQgdGhpcyBwcm9wZXJ0eSwgYnV0IGl0J3MgdGhlIG1vc3RcbiAgICAvLyBlZmZlY3RpdmUgd2F5IHRvIGFwcGx5IHN0eWxlcyB0byBhbiBIVE1MRWxlbWVudFxuICAgIC8vICRGbG93Rml4TWVcblxuXG4gICAgT2JqZWN0LmFzc2lnbihlbGVtZW50LnN0eWxlLCBzdHlsZSk7XG4gICAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgdmFyIHZhbHVlID0gYXR0cmlidXRlc1tuYW1lXTtcblxuICAgICAgaWYgKHZhbHVlID09PSBmYWxzZSkge1xuICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlID09PSB0cnVlID8gJycgOiB2YWx1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBlZmZlY3QkMShfcmVmMikge1xuICB2YXIgc3RhdGUgPSBfcmVmMi5zdGF0ZTtcbiAgdmFyIGluaXRpYWxTdHlsZXMgPSB7XG4gICAgcG9wcGVyOiB7XG4gICAgICBwb3NpdGlvbjogc3RhdGUub3B0aW9ucy5zdHJhdGVneSxcbiAgICAgIGxlZnQ6ICcwJyxcbiAgICAgIHRvcDogJzAnLFxuICAgICAgbWFyZ2luOiAnMCdcbiAgICB9LFxuICAgIGFycm93OiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJ1xuICAgIH0sXG4gICAgcmVmZXJlbmNlOiB7fVxuICB9O1xuICBPYmplY3QuYXNzaWduKHN0YXRlLmVsZW1lbnRzLnBvcHBlci5zdHlsZSwgaW5pdGlhbFN0eWxlcy5wb3BwZXIpO1xuXG4gIGlmIChzdGF0ZS5lbGVtZW50cy5hcnJvdykge1xuICAgIE9iamVjdC5hc3NpZ24oc3RhdGUuZWxlbWVudHMuYXJyb3cuc3R5bGUsIGluaXRpYWxTdHlsZXMuYXJyb3cpO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBPYmplY3Qua2V5cyhzdGF0ZS5lbGVtZW50cykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgdmFyIGVsZW1lbnQgPSBzdGF0ZS5lbGVtZW50c1tuYW1lXTtcbiAgICAgIHZhciBhdHRyaWJ1dGVzID0gc3RhdGUuYXR0cmlidXRlc1tuYW1lXSB8fCB7fTtcbiAgICAgIHZhciBzdHlsZVByb3BlcnRpZXMgPSBPYmplY3Qua2V5cyhzdGF0ZS5zdHlsZXMuaGFzT3duUHJvcGVydHkobmFtZSkgPyBzdGF0ZS5zdHlsZXNbbmFtZV0gOiBpbml0aWFsU3R5bGVzW25hbWVdKTsgLy8gU2V0IGFsbCB2YWx1ZXMgdG8gYW4gZW1wdHkgc3RyaW5nIHRvIHVuc2V0IHRoZW1cblxuICAgICAgdmFyIHN0eWxlID0gc3R5bGVQcm9wZXJ0aWVzLnJlZHVjZShmdW5jdGlvbiAoc3R5bGUsIHByb3BlcnR5KSB7XG4gICAgICAgIHN0eWxlW3Byb3BlcnR5XSA9ICcnO1xuICAgICAgICByZXR1cm4gc3R5bGU7XG4gICAgICB9LCB7fSk7IC8vIGFycm93IGlzIG9wdGlvbmFsICsgdmlydHVhbCBlbGVtZW50c1xuXG4gICAgICBpZiAoIWlzSFRNTEVsZW1lbnQoZWxlbWVudCkgfHwgIWdldE5vZGVOYW1lKGVsZW1lbnQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gRmxvdyBkb2Vzbid0IHN1cHBvcnQgdG8gZXh0ZW5kIHRoaXMgcHJvcGVydHksIGJ1dCBpdCdzIHRoZSBtb3N0XG4gICAgICAvLyBlZmZlY3RpdmUgd2F5IHRvIGFwcGx5IHN0eWxlcyB0byBhbiBIVE1MRWxlbWVudFxuICAgICAgLy8gJEZsb3dGaXhNZVxuXG5cbiAgICAgIE9iamVjdC5hc3NpZ24oZWxlbWVudC5zdHlsZSwgc3R5bGUpO1xuICAgICAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoYXR0cmlidXRlKSB7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbnZhciBhcHBseVN0eWxlcyQxID0ge1xuICBuYW1lOiAnYXBwbHlTdHlsZXMnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ3dyaXRlJyxcbiAgZm46IGFwcGx5U3R5bGVzLFxuICBlZmZlY3Q6IGVmZmVjdCQxLFxuICByZXF1aXJlczogWydjb21wdXRlU3R5bGVzJ11cbn07XG5cbmZ1bmN0aW9uIGRpc3RhbmNlQW5kU2tpZGRpbmdUb1hZKHBsYWNlbWVudCwgcmVjdHMsIG9mZnNldCkge1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KTtcbiAgdmFyIGludmVydERpc3RhbmNlID0gW2xlZnQsIHRvcF0uaW5kZXhPZihiYXNlUGxhY2VtZW50KSA+PSAwID8gLTEgOiAxO1xuXG4gIHZhciBfcmVmID0gdHlwZW9mIG9mZnNldCA9PT0gJ2Z1bmN0aW9uJyA/IG9mZnNldChPYmplY3QuYXNzaWduKHt9LCByZWN0cywge1xuICAgIHBsYWNlbWVudDogcGxhY2VtZW50XG4gIH0pKSA6IG9mZnNldCxcbiAgICAgIHNraWRkaW5nID0gX3JlZlswXSxcbiAgICAgIGRpc3RhbmNlID0gX3JlZlsxXTtcblxuICBza2lkZGluZyA9IHNraWRkaW5nIHx8IDA7XG4gIGRpc3RhbmNlID0gKGRpc3RhbmNlIHx8IDApICogaW52ZXJ0RGlzdGFuY2U7XG4gIHJldHVybiBbbGVmdCwgcmlnaHRdLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgPj0gMCA/IHtcbiAgICB4OiBkaXN0YW5jZSxcbiAgICB5OiBza2lkZGluZ1xuICB9IDoge1xuICAgIHg6IHNraWRkaW5nLFxuICAgIHk6IGRpc3RhbmNlXG4gIH07XG59XG5cbmZ1bmN0aW9uIG9mZnNldChfcmVmMikge1xuICB2YXIgc3RhdGUgPSBfcmVmMi5zdGF0ZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmMi5vcHRpb25zLFxuICAgICAgbmFtZSA9IF9yZWYyLm5hbWU7XG4gIHZhciBfb3B0aW9ucyRvZmZzZXQgPSBvcHRpb25zLm9mZnNldCxcbiAgICAgIG9mZnNldCA9IF9vcHRpb25zJG9mZnNldCA9PT0gdm9pZCAwID8gWzAsIDBdIDogX29wdGlvbnMkb2Zmc2V0O1xuICB2YXIgZGF0YSA9IHBsYWNlbWVudHMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBsYWNlbWVudCkge1xuICAgIGFjY1twbGFjZW1lbnRdID0gZGlzdGFuY2VBbmRTa2lkZGluZ1RvWFkocGxhY2VtZW50LCBzdGF0ZS5yZWN0cywgb2Zmc2V0KTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG4gIHZhciBfZGF0YSRzdGF0ZSRwbGFjZW1lbnQgPSBkYXRhW3N0YXRlLnBsYWNlbWVudF0sXG4gICAgICB4ID0gX2RhdGEkc3RhdGUkcGxhY2VtZW50LngsXG4gICAgICB5ID0gX2RhdGEkc3RhdGUkcGxhY2VtZW50Lnk7XG5cbiAgaWYgKHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cyAhPSBudWxsKSB7XG4gICAgc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzLnggKz0geDtcbiAgICBzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMueSArPSB5O1xuICB9XG5cbiAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXSA9IGRhdGE7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG52YXIgb2Zmc2V0JDEgPSB7XG4gIG5hbWU6ICdvZmZzZXQnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ21haW4nLFxuICByZXF1aXJlczogWydwb3BwZXJPZmZzZXRzJ10sXG4gIGZuOiBvZmZzZXRcbn07XG5cbnZhciBoYXNoID0ge1xuICBsZWZ0OiAncmlnaHQnLFxuICByaWdodDogJ2xlZnQnLFxuICBib3R0b206ICd0b3AnLFxuICB0b3A6ICdib3R0b20nXG59O1xuZnVuY3Rpb24gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHJldHVybiBwbGFjZW1lbnQucmVwbGFjZSgvbGVmdHxyaWdodHxib3R0b218dG9wL2csIGZ1bmN0aW9uIChtYXRjaGVkKSB7XG4gICAgcmV0dXJuIGhhc2hbbWF0Y2hlZF07XG4gIH0pO1xufVxuXG52YXIgaGFzaCQxID0ge1xuICBzdGFydDogJ2VuZCcsXG4gIGVuZDogJ3N0YXJ0J1xufTtcbmZ1bmN0aW9uIGdldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50KHBsYWNlbWVudCkge1xuICByZXR1cm4gcGxhY2VtZW50LnJlcGxhY2UoL3N0YXJ0fGVuZC9nLCBmdW5jdGlvbiAobWF0Y2hlZCkge1xuICAgIHJldHVybiBoYXNoJDFbbWF0Y2hlZF07XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRWaWV3cG9ydFJlY3QoZWxlbWVudCkge1xuICB2YXIgd2luID0gZ2V0V2luZG93KGVsZW1lbnQpO1xuICB2YXIgdmlzdWFsVmlld3BvcnQgPSB3aW4udmlzdWFsVmlld3BvcnQ7XG4gIHZhciB3aWR0aCA9IHdpbi5pbm5lcldpZHRoO1xuICB2YXIgaGVpZ2h0ID0gd2luLmlubmVySGVpZ2h0OyAvLyBXZSBkb24ndCBrbm93IHdoaWNoIGJyb3dzZXJzIGhhdmUgYnVnZ3kgb3Igb2RkIGltcGxlbWVudGF0aW9ucyBvZiB0aGlzLCBzb1xuICAvLyBmb3Igbm93IHdlJ3JlIG9ubHkgYXBwbHlpbmcgaXQgdG8gaU9TIHRvIGZpeCB0aGUga2V5Ym9hcmQgaXNzdWUuXG4gIC8vIEludmVzdGlnYXRpb24gcmVxdWlyZWRcblxuICBpZiAodmlzdWFsVmlld3BvcnQgJiYgL2lQaG9uZXxpUG9kfGlQYWQvLnRlc3QobmF2aWdhdG9yLnBsYXRmb3JtKSkge1xuICAgIHdpZHRoID0gdmlzdWFsVmlld3BvcnQud2lkdGg7XG4gICAgaGVpZ2h0ID0gdmlzdWFsVmlld3BvcnQuaGVpZ2h0O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgeDogMCxcbiAgICB5OiAwXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldERvY3VtZW50UmVjdChlbGVtZW50KSB7XG4gIHZhciB3aW4gPSBnZXRXaW5kb3coZWxlbWVudCk7XG4gIHZhciB3aW5TY3JvbGwgPSBnZXRXaW5kb3dTY3JvbGwoZWxlbWVudCk7XG4gIHZhciBkb2N1bWVudFJlY3QgPSBnZXRDb21wb3NpdGVSZWN0KGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSwgd2luKTtcbiAgZG9jdW1lbnRSZWN0LmhlaWdodCA9IE1hdGgubWF4KGRvY3VtZW50UmVjdC5oZWlnaHQsIHdpbi5pbm5lckhlaWdodCk7XG4gIGRvY3VtZW50UmVjdC53aWR0aCA9IE1hdGgubWF4KGRvY3VtZW50UmVjdC53aWR0aCwgd2luLmlubmVyV2lkdGgpO1xuICBkb2N1bWVudFJlY3QueCA9IC13aW5TY3JvbGwuc2Nyb2xsTGVmdDtcbiAgZG9jdW1lbnRSZWN0LnkgPSAtd2luU2Nyb2xsLnNjcm9sbFRvcDtcbiAgcmV0dXJuIGRvY3VtZW50UmVjdDtcbn1cblxuZnVuY3Rpb24gdG9OdW1iZXIoY3NzVmFsdWUpIHtcbiAgcmV0dXJuIHBhcnNlRmxvYXQoY3NzVmFsdWUpIHx8IDA7XG59XG5cbmZ1bmN0aW9uIGdldEJvcmRlcnMoZWxlbWVudCkge1xuICB2YXIgY29tcHV0ZWRTdHlsZSA9IGlzSFRNTEVsZW1lbnQoZWxlbWVudCkgPyBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpIDoge307XG4gIHJldHVybiB7XG4gICAgdG9wOiB0b051bWJlcihjb21wdXRlZFN0eWxlLmJvcmRlclRvcFdpZHRoKSxcbiAgICByaWdodDogdG9OdW1iZXIoY29tcHV0ZWRTdHlsZS5ib3JkZXJSaWdodFdpZHRoKSxcbiAgICBib3R0b206IHRvTnVtYmVyKGNvbXB1dGVkU3R5bGUuYm9yZGVyQm90dG9tV2lkdGgpLFxuICAgIGxlZnQ6IHRvTnVtYmVyKGNvbXB1dGVkU3R5bGUuYm9yZGVyTGVmdFdpZHRoKVxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXREZWNvcmF0aW9ucyhlbGVtZW50KSB7XG4gIHZhciB3aW4gPSBnZXRXaW5kb3coZWxlbWVudCk7XG4gIHZhciBib3JkZXJzID0gZ2V0Qm9yZGVycyhlbGVtZW50KTtcbiAgdmFyIGlzSFRNTCA9IGdldE5vZGVOYW1lKGVsZW1lbnQpID09PSAnaHRtbCc7XG4gIHZhciB3aW5TY3JvbGxCYXJYID0gZ2V0V2luZG93U2Nyb2xsQmFyWChlbGVtZW50KTtcbiAgdmFyIHggPSBlbGVtZW50LmNsaWVudFdpZHRoICsgYm9yZGVycy5yaWdodDtcbiAgdmFyIHkgPSBlbGVtZW50LmNsaWVudEhlaWdodCArIGJvcmRlcnMuYm90dG9tOyAvLyBIQUNLOlxuICAvLyBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0IG9uIGlPUyByZXBvcnRzIHRoZSBoZWlnaHQgb2YgdGhlXG4gIC8vIHZpZXdwb3J0IGluY2x1ZGluZyB0aGUgYm90dG9tIGJhciwgZXZlbiBpZiB0aGUgYm90dG9tIGJhciBpc24ndCB2aXNpYmxlLlxuICAvLyBJZiB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHdpbmRvdyBpbm5lckhlaWdodCBhbmQgaHRtbCBjbGllbnRIZWlnaHQgaXMgbW9yZVxuICAvLyB0aGFuIDUwLCB3ZSBhc3N1bWUgaXQncyBhIG1vYmlsZSBib3R0b20gYmFyIGFuZCBpZ25vcmUgc2Nyb2xsYmFycy5cbiAgLy8gKiBBIDUwcHggdGhpY2sgc2Nyb2xsYmFyIGlzIGxpa2VseSBub24tZXhpc3RlbnQgKG1hY09TIGlzIDE1cHggYW5kIFdpbmRvd3NcbiAgLy8gICBpcyBhYm91dCAxN3B4KVxuICAvLyAqIFRoZSBtb2JpbGUgYmFyIGlzIDExNHB4IHRhbGxcblxuICBpZiAoaXNIVE1MICYmIHdpbi5pbm5lckhlaWdodCAtIGVsZW1lbnQuY2xpZW50SGVpZ2h0ID4gNTApIHtcbiAgICB5ID0gd2luLmlubmVySGVpZ2h0IC0gYm9yZGVycy5ib3R0b207XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHRvcDogaXNIVE1MID8gMCA6IGVsZW1lbnQuY2xpZW50VG9wLFxuICAgIHJpZ2h0OiAvLyBSVEwgc2Nyb2xsYmFyIChzY3JvbGxpbmcgY29udGFpbmVycyBvbmx5KVxuICAgIGVsZW1lbnQuY2xpZW50TGVmdCA+IGJvcmRlcnMubGVmdCA/IGJvcmRlcnMucmlnaHQgOiAvLyBMVFIgc2Nyb2xsYmFyXG4gICAgaXNIVE1MID8gd2luLmlubmVyV2lkdGggLSB4IC0gd2luU2Nyb2xsQmFyWCA6IGVsZW1lbnQub2Zmc2V0V2lkdGggLSB4LFxuICAgIGJvdHRvbTogaXNIVE1MID8gd2luLmlubmVySGVpZ2h0IC0geSA6IGVsZW1lbnQub2Zmc2V0SGVpZ2h0IC0geSxcbiAgICBsZWZ0OiBpc0hUTUwgPyB3aW5TY3JvbGxCYXJYIDogZWxlbWVudC5jbGllbnRMZWZ0XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbnRhaW5zKHBhcmVudCwgY2hpbGQpIHtcbiAgLy8gJEZsb3dGaXhNZTogaGFzT3duUHJvcGVydHkgZG9lc24ndCBzZWVtIHRvIHdvcmsgaW4gdGVzdHNcbiAgdmFyIGlzU2hhZG93ID0gQm9vbGVhbihjaGlsZC5nZXRSb290Tm9kZSAmJiBjaGlsZC5nZXRSb290Tm9kZSgpLmhvc3QpOyAvLyBGaXJzdCwgYXR0ZW1wdCB3aXRoIGZhc3RlciBuYXRpdmUgbWV0aG9kXG5cbiAgaWYgKHBhcmVudC5jb250YWlucyhjaGlsZCkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSAvLyB0aGVuIGZhbGxiYWNrIHRvIGN1c3RvbSBpbXBsZW1lbnRhdGlvbiB3aXRoIFNoYWRvdyBET00gc3VwcG9ydFxuICBlbHNlIGlmIChpc1NoYWRvdykge1xuICAgICAgdmFyIG5leHQgPSBjaGlsZDtcblxuICAgICAgZG8ge1xuICAgICAgICBpZiAobmV4dCAmJiBwYXJlbnQuaXNTYW1lTm9kZShuZXh0KSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IC8vICRGbG93Rml4TWU6IG5lZWQgYSBiZXR0ZXIgd2F5IHRvIGhhbmRsZSB0aGlzLi4uXG5cblxuICAgICAgICBuZXh0ID0gbmV4dC5wYXJlbnROb2RlIHx8IG5leHQuaG9zdDtcbiAgICAgIH0gd2hpbGUgKG5leHQpO1xuICAgIH0gLy8gR2l2ZSB1cCwgdGhlIHJlc3VsdCBpcyBmYWxzZVxuXG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiByZWN0VG9DbGllbnRSZWN0KHJlY3QpIHtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHJlY3QsIHtcbiAgICBsZWZ0OiByZWN0LngsXG4gICAgdG9wOiByZWN0LnksXG4gICAgcmlnaHQ6IHJlY3QueCArIHJlY3Qud2lkdGgsXG4gICAgYm90dG9tOiByZWN0LnkgKyByZWN0LmhlaWdodFxuICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0Q2xpZW50UmVjdEZyb21NaXhlZFR5cGUoZWxlbWVudCwgY2xpcHBpbmdQYXJlbnQpIHtcbiAgcmV0dXJuIGNsaXBwaW5nUGFyZW50ID09PSB2aWV3cG9ydCA/IHJlY3RUb0NsaWVudFJlY3QoZ2V0Vmlld3BvcnRSZWN0KGVsZW1lbnQpKSA6IGlzSFRNTEVsZW1lbnQoY2xpcHBpbmdQYXJlbnQpID8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGNsaXBwaW5nUGFyZW50KSA6IHJlY3RUb0NsaWVudFJlY3QoZ2V0RG9jdW1lbnRSZWN0KGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSkpO1xufSAvLyBBIFwiY2xpcHBpbmcgcGFyZW50XCIgaXMgYW4gb3ZlcmZsb3dhYmxlIGNvbnRhaW5lciB3aXRoIHRoZSBjaGFyYWN0ZXJpc3RpYyBvZlxuLy8gY2xpcHBpbmcgKG9yIGhpZGluZykgb3ZlcmZsb3dpbmcgZWxlbWVudHMgd2l0aCBhIHBvc2l0aW9uIGRpZmZlcmVudCBmcm9tXG4vLyBgaW5pdGlhbGBcblxuXG5mdW5jdGlvbiBnZXRDbGlwcGluZ1BhcmVudHMoZWxlbWVudCkge1xuICB2YXIgY2xpcHBpbmdQYXJlbnRzID0gbGlzdFNjcm9sbFBhcmVudHMoZWxlbWVudCk7XG4gIHZhciBjYW5Fc2NhcGVDbGlwcGluZyA9IFsnYWJzb2x1dGUnLCAnZml4ZWQnXS5pbmRleE9mKGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkucG9zaXRpb24pID49IDA7XG4gIHZhciBjbGlwcGVyRWxlbWVudCA9IGNhbkVzY2FwZUNsaXBwaW5nICYmIGlzSFRNTEVsZW1lbnQoZWxlbWVudCkgPyBnZXRPZmZzZXRQYXJlbnQoZWxlbWVudCkgOiBlbGVtZW50O1xuXG4gIGlmICghaXNFbGVtZW50KGNsaXBwZXJFbGVtZW50KSkge1xuICAgIHJldHVybiBbXTtcbiAgfSAvLyAkRmxvd0ZpeE1lOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvMTQxNFxuXG5cbiAgcmV0dXJuIGNsaXBwaW5nUGFyZW50cy5maWx0ZXIoZnVuY3Rpb24gKGNsaXBwaW5nUGFyZW50KSB7XG4gICAgcmV0dXJuIGlzRWxlbWVudChjbGlwcGluZ1BhcmVudCkgJiYgY29udGFpbnMoY2xpcHBpbmdQYXJlbnQsIGNsaXBwZXJFbGVtZW50KTtcbiAgfSk7XG59IC8vIEdldHMgdGhlIG1heGltdW0gYXJlYSB0aGF0IHRoZSBlbGVtZW50IGlzIHZpc2libGUgaW4gZHVlIHRvIGFueSBudW1iZXIgb2Zcbi8vIGNsaXBwaW5nIHBhcmVudHNcblxuXG5mdW5jdGlvbiBnZXRDbGlwcGluZ1JlY3QoZWxlbWVudCwgYm91bmRhcnksIHJvb3RCb3VuZGFyeSkge1xuICB2YXIgbWFpbkNsaXBwaW5nUGFyZW50cyA9IGJvdW5kYXJ5ID09PSAnY2xpcHBpbmdQYXJlbnRzJyA/IGdldENsaXBwaW5nUGFyZW50cyhlbGVtZW50KSA6IFtdLmNvbmNhdChib3VuZGFyeSk7XG4gIHZhciBjbGlwcGluZ1BhcmVudHMgPSBbXS5jb25jYXQobWFpbkNsaXBwaW5nUGFyZW50cywgW3Jvb3RCb3VuZGFyeV0pO1xuICB2YXIgZmlyc3RDbGlwcGluZ1BhcmVudCA9IGNsaXBwaW5nUGFyZW50c1swXTtcbiAgdmFyIGNsaXBwaW5nUmVjdCA9IGNsaXBwaW5nUGFyZW50cy5yZWR1Y2UoZnVuY3Rpb24gKGFjY1JlY3QsIGNsaXBwaW5nUGFyZW50KSB7XG4gICAgdmFyIHJlY3QgPSBnZXRDbGllbnRSZWN0RnJvbU1peGVkVHlwZShlbGVtZW50LCBjbGlwcGluZ1BhcmVudCk7XG4gICAgdmFyIGRlY29yYXRpb25zID0gZ2V0RGVjb3JhdGlvbnMoaXNIVE1MRWxlbWVudChjbGlwcGluZ1BhcmVudCkgPyBjbGlwcGluZ1BhcmVudCA6IGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSk7XG4gICAgYWNjUmVjdC50b3AgPSBNYXRoLm1heChyZWN0LnRvcCArIGRlY29yYXRpb25zLnRvcCwgYWNjUmVjdC50b3ApO1xuICAgIGFjY1JlY3QucmlnaHQgPSBNYXRoLm1pbihyZWN0LnJpZ2h0IC0gZGVjb3JhdGlvbnMucmlnaHQsIGFjY1JlY3QucmlnaHQpO1xuICAgIGFjY1JlY3QuYm90dG9tID0gTWF0aC5taW4ocmVjdC5ib3R0b20gLSBkZWNvcmF0aW9ucy5ib3R0b20sIGFjY1JlY3QuYm90dG9tKTtcbiAgICBhY2NSZWN0LmxlZnQgPSBNYXRoLm1heChyZWN0LmxlZnQgKyBkZWNvcmF0aW9ucy5sZWZ0LCBhY2NSZWN0LmxlZnQpO1xuICAgIHJldHVybiBhY2NSZWN0O1xuICB9LCBnZXRDbGllbnRSZWN0RnJvbU1peGVkVHlwZShlbGVtZW50LCBmaXJzdENsaXBwaW5nUGFyZW50KSk7XG4gIGNsaXBwaW5nUmVjdC53aWR0aCA9IGNsaXBwaW5nUmVjdC5yaWdodCAtIGNsaXBwaW5nUmVjdC5sZWZ0O1xuICBjbGlwcGluZ1JlY3QuaGVpZ2h0ID0gY2xpcHBpbmdSZWN0LmJvdHRvbSAtIGNsaXBwaW5nUmVjdC50b3A7XG4gIGNsaXBwaW5nUmVjdC54ID0gY2xpcHBpbmdSZWN0LmxlZnQ7XG4gIGNsaXBwaW5nUmVjdC55ID0gY2xpcHBpbmdSZWN0LnRvcDtcbiAgcmV0dXJuIGNsaXBwaW5nUmVjdDtcbn1cblxuZnVuY3Rpb24gZ2V0RnJlc2hTaWRlT2JqZWN0KCkge1xuICByZXR1cm4ge1xuICAgIHRvcDogMCxcbiAgICByaWdodDogMCxcbiAgICBib3R0b206IDAsXG4gICAgbGVmdDogMFxuICB9O1xufVxuXG5mdW5jdGlvbiBtZXJnZVBhZGRpbmdPYmplY3QocGFkZGluZ09iamVjdCkge1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgZ2V0RnJlc2hTaWRlT2JqZWN0KCksIHt9LCBwYWRkaW5nT2JqZWN0KTtcbn1cblxuZnVuY3Rpb24gZXhwYW5kVG9IYXNoTWFwKHZhbHVlLCBrZXlzKSB7XG4gIHJldHVybiBrZXlzLnJlZHVjZShmdW5jdGlvbiAoaGFzaE1hcCwga2V5KSB7XG4gICAgaGFzaE1hcFtrZXldID0gdmFsdWU7XG4gICAgcmV0dXJuIGhhc2hNYXA7XG4gIH0sIHt9KTtcbn1cblxuZnVuY3Rpb24gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICBfb3B0aW9ucyRwbGFjZW1lbnQgPSBfb3B0aW9ucy5wbGFjZW1lbnQsXG4gICAgICBwbGFjZW1lbnQgPSBfb3B0aW9ucyRwbGFjZW1lbnQgPT09IHZvaWQgMCA/IHN0YXRlLnBsYWNlbWVudCA6IF9vcHRpb25zJHBsYWNlbWVudCxcbiAgICAgIF9vcHRpb25zJGJvdW5kYXJ5ID0gX29wdGlvbnMuYm91bmRhcnksXG4gICAgICBib3VuZGFyeSA9IF9vcHRpb25zJGJvdW5kYXJ5ID09PSB2b2lkIDAgPyBjbGlwcGluZ1BhcmVudHMgOiBfb3B0aW9ucyRib3VuZGFyeSxcbiAgICAgIF9vcHRpb25zJHJvb3RCb3VuZGFyeSA9IF9vcHRpb25zLnJvb3RCb3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeSA9IF9vcHRpb25zJHJvb3RCb3VuZGFyeSA9PT0gdm9pZCAwID8gdmlld3BvcnQgOiBfb3B0aW9ucyRyb290Qm91bmRhcnksXG4gICAgICBfb3B0aW9ucyRlbGVtZW50Q29udGUgPSBfb3B0aW9ucy5lbGVtZW50Q29udGV4dCxcbiAgICAgIGVsZW1lbnRDb250ZXh0ID0gX29wdGlvbnMkZWxlbWVudENvbnRlID09PSB2b2lkIDAgPyBwb3BwZXIgOiBfb3B0aW9ucyRlbGVtZW50Q29udGUsXG4gICAgICBfb3B0aW9ucyRhbHRCb3VuZGFyeSA9IF9vcHRpb25zLmFsdEJvdW5kYXJ5LFxuICAgICAgYWx0Qm91bmRhcnkgPSBfb3B0aW9ucyRhbHRCb3VuZGFyeSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRhbHRCb3VuZGFyeSxcbiAgICAgIF9vcHRpb25zJHBhZGRpbmcgPSBfb3B0aW9ucy5wYWRkaW5nLFxuICAgICAgcGFkZGluZyA9IF9vcHRpb25zJHBhZGRpbmcgPT09IHZvaWQgMCA/IDAgOiBfb3B0aW9ucyRwYWRkaW5nO1xuICB2YXIgcGFkZGluZ09iamVjdCA9IG1lcmdlUGFkZGluZ09iamVjdCh0eXBlb2YgcGFkZGluZyAhPT0gJ251bWJlcicgPyBwYWRkaW5nIDogZXhwYW5kVG9IYXNoTWFwKHBhZGRpbmcsIGJhc2VQbGFjZW1lbnRzKSk7XG4gIHZhciBhbHRDb250ZXh0ID0gZWxlbWVudENvbnRleHQgPT09IHBvcHBlciA/IHJlZmVyZW5jZSA6IHBvcHBlcjtcbiAgdmFyIHJlZmVyZW5jZUVsZW1lbnQgPSBzdGF0ZS5lbGVtZW50cy5yZWZlcmVuY2U7XG4gIHZhciBwb3BwZXJSZWN0ID0gc3RhdGUucmVjdHMucG9wcGVyO1xuICB2YXIgZWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzW2FsdEJvdW5kYXJ5ID8gYWx0Q29udGV4dCA6IGVsZW1lbnRDb250ZXh0XTtcbiAgdmFyIGNsaXBwaW5nQ2xpZW50UmVjdCA9IGdldENsaXBwaW5nUmVjdChpc0VsZW1lbnQoZWxlbWVudCkgPyBlbGVtZW50IDogZWxlbWVudC5jb250ZXh0RWxlbWVudCB8fCBnZXREb2N1bWVudEVsZW1lbnQoc3RhdGUuZWxlbWVudHMucG9wcGVyKSwgYm91bmRhcnksIHJvb3RCb3VuZGFyeSk7XG4gIHZhciByZWZlcmVuY2VDbGllbnRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KHJlZmVyZW5jZUVsZW1lbnQpO1xuICB2YXIgcG9wcGVyT2Zmc2V0cyA9IGNvbXB1dGVPZmZzZXRzKHtcbiAgICByZWZlcmVuY2U6IHJlZmVyZW5jZUNsaWVudFJlY3QsXG4gICAgZWxlbWVudDogcG9wcGVyUmVjdCxcbiAgICBzdHJhdGVneTogJ2Fic29sdXRlJyxcbiAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudFxuICB9KTtcbiAgdmFyIHBvcHBlckNsaWVudFJlY3QgPSByZWN0VG9DbGllbnRSZWN0KE9iamVjdC5hc3NpZ24oe30sIHBvcHBlclJlY3QsIHt9LCBwb3BwZXJPZmZzZXRzKSk7XG4gIHZhciBlbGVtZW50Q2xpZW50UmVjdCA9IGVsZW1lbnRDb250ZXh0ID09PSBwb3BwZXIgPyBwb3BwZXJDbGllbnRSZWN0IDogcmVmZXJlbmNlQ2xpZW50UmVjdDsgLy8gcG9zaXRpdmUgPSBvdmVyZmxvd2luZyB0aGUgY2xpcHBpbmcgcmVjdFxuICAvLyAwIG9yIG5lZ2F0aXZlID0gd2l0aGluIHRoZSBjbGlwcGluZyByZWN0XG5cbiAgdmFyIG92ZXJmbG93T2Zmc2V0cyA9IHtcbiAgICB0b3A6IGNsaXBwaW5nQ2xpZW50UmVjdC50b3AgLSBlbGVtZW50Q2xpZW50UmVjdC50b3AgKyBwYWRkaW5nT2JqZWN0LnRvcCxcbiAgICBib3R0b206IGVsZW1lbnRDbGllbnRSZWN0LmJvdHRvbSAtIGNsaXBwaW5nQ2xpZW50UmVjdC5ib3R0b20gKyBwYWRkaW5nT2JqZWN0LmJvdHRvbSxcbiAgICBsZWZ0OiBjbGlwcGluZ0NsaWVudFJlY3QubGVmdCAtIGVsZW1lbnRDbGllbnRSZWN0LmxlZnQgKyBwYWRkaW5nT2JqZWN0LmxlZnQsXG4gICAgcmlnaHQ6IGVsZW1lbnRDbGllbnRSZWN0LnJpZ2h0IC0gY2xpcHBpbmdDbGllbnRSZWN0LnJpZ2h0ICsgcGFkZGluZ09iamVjdC5yaWdodFxuICB9O1xuICB2YXIgb2Zmc2V0RGF0YSA9IHN0YXRlLm1vZGlmaWVyc0RhdGEub2Zmc2V0OyAvLyBPZmZzZXRzIGNhbiBiZSBhcHBsaWVkIG9ubHkgdG8gdGhlIHBvcHBlciBlbGVtZW50XG5cbiAgaWYgKGVsZW1lbnRDb250ZXh0ID09PSBwb3BwZXIgJiYgb2Zmc2V0RGF0YSkge1xuICAgIHZhciBvZmZzZXQgPSBvZmZzZXREYXRhW3BsYWNlbWVudF07XG4gICAgT2JqZWN0LmtleXMob3ZlcmZsb3dPZmZzZXRzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHZhciBtdWx0aXBseSA9IFtyaWdodCwgYm90dG9tXS5pbmRleE9mKGtleSkgPj0gMCA/IDEgOiAtMTtcbiAgICAgIHZhciBheGlzID0gW3RvcCwgYm90dG9tXS5pbmRleE9mKGtleSkgPj0gMCA/ICd5JyA6ICd4JztcbiAgICAgIG92ZXJmbG93T2Zmc2V0c1trZXldICs9IG9mZnNldFtheGlzXSAqIG11bHRpcGx5O1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIG92ZXJmbG93T2Zmc2V0cztcbn1cblxuLyo6OiB0eXBlIE92ZXJmbG93c01hcCA9IHsgW0NvbXB1dGVkUGxhY2VtZW50XTogbnVtYmVyIH07ICovXG5cbi8qOzsgdHlwZSBPdmVyZmxvd3NNYXAgPSB7IFtrZXkgaW4gQ29tcHV0ZWRQbGFjZW1lbnRdOiBudW1iZXIgfTsgKi9cbmZ1bmN0aW9uIGNvbXB1dGVBdXRvUGxhY2VtZW50KHN0YXRlLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgcGxhY2VtZW50ID0gX29wdGlvbnMucGxhY2VtZW50LFxuICAgICAgYm91bmRhcnkgPSBfb3B0aW9ucy5ib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeSA9IF9vcHRpb25zLnJvb3RCb3VuZGFyeSxcbiAgICAgIHBhZGRpbmcgPSBfb3B0aW9ucy5wYWRkaW5nLFxuICAgICAgZmxpcFZhcmlhdGlvbnMgPSBfb3B0aW9ucy5mbGlwVmFyaWF0aW9ucyxcbiAgICAgIF9vcHRpb25zJGFsbG93ZWRBdXRvUCA9IF9vcHRpb25zLmFsbG93ZWRBdXRvUGxhY2VtZW50cyxcbiAgICAgIGFsbG93ZWRBdXRvUGxhY2VtZW50cyA9IF9vcHRpb25zJGFsbG93ZWRBdXRvUCA9PT0gdm9pZCAwID8gcGxhY2VtZW50cyA6IF9vcHRpb25zJGFsbG93ZWRBdXRvUDtcbiAgdmFyIHZhcmlhdGlvbiA9IGdldFZhcmlhdGlvbihwbGFjZW1lbnQpO1xuICB2YXIgcGxhY2VtZW50cyQxID0gKHZhcmlhdGlvbiA/IGZsaXBWYXJpYXRpb25zID8gdmFyaWF0aW9uUGxhY2VtZW50cyA6IHZhcmlhdGlvblBsYWNlbWVudHMuZmlsdGVyKGZ1bmN0aW9uIChwbGFjZW1lbnQpIHtcbiAgICByZXR1cm4gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudCkgPT09IHZhcmlhdGlvbjtcbiAgfSkgOiBiYXNlUGxhY2VtZW50cykuZmlsdGVyKGZ1bmN0aW9uIChwbGFjZW1lbnQpIHtcbiAgICByZXR1cm4gYWxsb3dlZEF1dG9QbGFjZW1lbnRzLmluZGV4T2YocGxhY2VtZW50KSA+PSAwO1xuICB9KTsgLy8gJEZsb3dGaXhNZTogRmxvdyBzZWVtcyB0byBoYXZlIHByb2JsZW1zIHdpdGggdHdvIGFycmF5IHVuaW9ucy4uLlxuXG4gIHZhciBvdmVyZmxvd3MgPSBwbGFjZW1lbnRzJDEucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBsYWNlbWVudCkge1xuICAgIGFjY1twbGFjZW1lbnRdID0gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIHtcbiAgICAgIHBsYWNlbWVudDogcGxhY2VtZW50LFxuICAgICAgYm91bmRhcnk6IGJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5OiByb290Qm91bmRhcnksXG4gICAgICBwYWRkaW5nOiBwYWRkaW5nXG4gICAgfSlbZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpXTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvdmVyZmxvd3MpLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gb3ZlcmZsb3dzW2FdIC0gb3ZlcmZsb3dzW2JdO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0RXhwYW5kZWRGYWxsYmFja1BsYWNlbWVudHMocGxhY2VtZW50KSB7XG4gIGlmIChnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCkgPT09IGF1dG8pIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICB2YXIgb3Bwb3NpdGVQbGFjZW1lbnQgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuICByZXR1cm4gW2dldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50KHBsYWNlbWVudCksIG9wcG9zaXRlUGxhY2VtZW50LCBnZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudChvcHBvc2l0ZVBsYWNlbWVudCldO1xufVxuXG5mdW5jdGlvbiBmbGlwKF9yZWYpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmLm9wdGlvbnMsXG4gICAgICBuYW1lID0gX3JlZi5uYW1lO1xuXG4gIGlmIChzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdLl9za2lwKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIF9vcHRpb25zJG1haW5BeGlzID0gb3B0aW9ucy5tYWluQXhpcyxcbiAgICAgIGNoZWNrTWFpbkF4aXMgPSBfb3B0aW9ucyRtYWluQXhpcyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJG1haW5BeGlzLFxuICAgICAgX29wdGlvbnMkYWx0QXhpcyA9IG9wdGlvbnMuYWx0QXhpcyxcbiAgICAgIGNoZWNrQWx0QXhpcyA9IF9vcHRpb25zJGFsdEF4aXMgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRhbHRBeGlzLFxuICAgICAgc3BlY2lmaWVkRmFsbGJhY2tQbGFjZW1lbnRzID0gb3B0aW9ucy5mYWxsYmFja1BsYWNlbWVudHMsXG4gICAgICBwYWRkaW5nID0gb3B0aW9ucy5wYWRkaW5nLFxuICAgICAgYm91bmRhcnkgPSBvcHRpb25zLmJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5ID0gb3B0aW9ucy5yb290Qm91bmRhcnksXG4gICAgICBhbHRCb3VuZGFyeSA9IG9wdGlvbnMuYWx0Qm91bmRhcnksXG4gICAgICBfb3B0aW9ucyRmbGlwVmFyaWF0aW8gPSBvcHRpb25zLmZsaXBWYXJpYXRpb25zLFxuICAgICAgZmxpcFZhcmlhdGlvbnMgPSBfb3B0aW9ucyRmbGlwVmFyaWF0aW8gPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRmbGlwVmFyaWF0aW8sXG4gICAgICBhbGxvd2VkQXV0b1BsYWNlbWVudHMgPSBvcHRpb25zLmFsbG93ZWRBdXRvUGxhY2VtZW50cztcbiAgdmFyIHByZWZlcnJlZFBsYWNlbWVudCA9IHN0YXRlLm9wdGlvbnMucGxhY2VtZW50O1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IGdldEJhc2VQbGFjZW1lbnQocHJlZmVycmVkUGxhY2VtZW50KTtcbiAgdmFyIGlzQmFzZVBsYWNlbWVudCA9IGJhc2VQbGFjZW1lbnQgPT09IHByZWZlcnJlZFBsYWNlbWVudDtcbiAgdmFyIGZhbGxiYWNrUGxhY2VtZW50cyA9IHNwZWNpZmllZEZhbGxiYWNrUGxhY2VtZW50cyB8fCAoaXNCYXNlUGxhY2VtZW50IHx8ICFmbGlwVmFyaWF0aW9ucyA/IFtnZXRPcHBvc2l0ZVBsYWNlbWVudChwcmVmZXJyZWRQbGFjZW1lbnQpXSA6IGdldEV4cGFuZGVkRmFsbGJhY2tQbGFjZW1lbnRzKHByZWZlcnJlZFBsYWNlbWVudCkpO1xuICB2YXIgcGxhY2VtZW50cyA9IFtwcmVmZXJyZWRQbGFjZW1lbnRdLmNvbmNhdChmYWxsYmFja1BsYWNlbWVudHMpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwbGFjZW1lbnQpIHtcbiAgICByZXR1cm4gYWNjLmNvbmNhdChnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCkgPT09IGF1dG8gPyBjb21wdXRlQXV0b1BsYWNlbWVudChzdGF0ZSwge1xuICAgICAgcGxhY2VtZW50OiBwbGFjZW1lbnQsXG4gICAgICBib3VuZGFyeTogYm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnk6IHJvb3RCb3VuZGFyeSxcbiAgICAgIHBhZGRpbmc6IHBhZGRpbmcsXG4gICAgICBmbGlwVmFyaWF0aW9uczogZmxpcFZhcmlhdGlvbnMsXG4gICAgICBhbGxvd2VkQXV0b1BsYWNlbWVudHM6IGFsbG93ZWRBdXRvUGxhY2VtZW50c1xuICAgIH0pIDogcGxhY2VtZW50KTtcbiAgfSwgW10pO1xuICB2YXIgcmVmZXJlbmNlUmVjdCA9IHN0YXRlLnJlY3RzLnJlZmVyZW5jZTtcbiAgdmFyIHBvcHBlclJlY3QgPSBzdGF0ZS5yZWN0cy5wb3BwZXI7XG4gIHZhciBjaGVja3NNYXAgPSBuZXcgTWFwKCk7XG4gIHZhciBtYWtlRmFsbGJhY2tDaGVja3MgPSB0cnVlO1xuICB2YXIgZmlyc3RGaXR0aW5nUGxhY2VtZW50ID0gcGxhY2VtZW50c1swXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBsYWNlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcGxhY2VtZW50ID0gcGxhY2VtZW50c1tpXTtcblxuICAgIHZhciBfYmFzZVBsYWNlbWVudCA9IGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KTtcblxuICAgIHZhciBpc1N0YXJ0VmFyaWF0aW9uID0gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudCkgPT09IHN0YXJ0O1xuICAgIHZhciBpc1ZlcnRpY2FsID0gW3RvcCwgYm90dG9tXS5pbmRleE9mKF9iYXNlUGxhY2VtZW50KSA+PSAwO1xuICAgIHZhciBsZW4gPSBpc1ZlcnRpY2FsID8gJ3dpZHRoJyA6ICdoZWlnaHQnO1xuICAgIHZhciBvdmVyZmxvdyA9IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudCxcbiAgICAgIGJvdW5kYXJ5OiBib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeTogcm9vdEJvdW5kYXJ5LFxuICAgICAgYWx0Qm91bmRhcnk6IGFsdEJvdW5kYXJ5LFxuICAgICAgcGFkZGluZzogcGFkZGluZ1xuICAgIH0pO1xuICAgIHZhciBtYWluVmFyaWF0aW9uU2lkZSA9IGlzVmVydGljYWwgPyBpc1N0YXJ0VmFyaWF0aW9uID8gcmlnaHQgOiBsZWZ0IDogaXNTdGFydFZhcmlhdGlvbiA/IGJvdHRvbSA6IHRvcDtcblxuICAgIGlmIChyZWZlcmVuY2VSZWN0W2xlbl0gPiBwb3BwZXJSZWN0W2xlbl0pIHtcbiAgICAgIG1haW5WYXJpYXRpb25TaWRlID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQobWFpblZhcmlhdGlvblNpZGUpO1xuICAgIH1cblxuICAgIHZhciBhbHRWYXJpYXRpb25TaWRlID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQobWFpblZhcmlhdGlvblNpZGUpO1xuICAgIHZhciBjaGVja3MgPSBbXTtcblxuICAgIGlmIChjaGVja01haW5BeGlzKSB7XG4gICAgICBjaGVja3MucHVzaChvdmVyZmxvd1tfYmFzZVBsYWNlbWVudF0gPD0gMCk7XG4gICAgfVxuXG4gICAgaWYgKGNoZWNrQWx0QXhpcykge1xuICAgICAgY2hlY2tzLnB1c2gob3ZlcmZsb3dbbWFpblZhcmlhdGlvblNpZGVdIDw9IDAsIG92ZXJmbG93W2FsdFZhcmlhdGlvblNpZGVdIDw9IDApO1xuICAgIH1cblxuICAgIGlmIChjaGVja3MuZXZlcnkoZnVuY3Rpb24gKGNoZWNrKSB7XG4gICAgICByZXR1cm4gY2hlY2s7XG4gICAgfSkpIHtcbiAgICAgIGZpcnN0Rml0dGluZ1BsYWNlbWVudCA9IHBsYWNlbWVudDtcbiAgICAgIG1ha2VGYWxsYmFja0NoZWNrcyA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgY2hlY2tzTWFwLnNldChwbGFjZW1lbnQsIGNoZWNrcyk7XG4gIH1cblxuICBpZiAobWFrZUZhbGxiYWNrQ2hlY2tzKSB7XG4gICAgLy8gYDJgIG1heSBiZSBkZXNpcmVkIGluIHNvbWUgY2FzZXMg4oCTIHJlc2VhcmNoIGxhdGVyXG4gICAgdmFyIG51bWJlck9mQ2hlY2tzID0gZmxpcFZhcmlhdGlvbnMgPyAzIDogMTtcblxuICAgIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKF9pKSB7XG4gICAgICB2YXIgZml0dGluZ1BsYWNlbWVudCA9IHBsYWNlbWVudHMuZmluZChmdW5jdGlvbiAocGxhY2VtZW50KSB7XG4gICAgICAgIHZhciBjaGVja3MgPSBjaGVja3NNYXAuZ2V0KHBsYWNlbWVudCk7XG5cbiAgICAgICAgaWYgKGNoZWNrcykge1xuICAgICAgICAgIHJldHVybiBjaGVja3Muc2xpY2UoMCwgX2kpLmV2ZXJ5KGZ1bmN0aW9uIChjaGVjaykge1xuICAgICAgICAgICAgcmV0dXJuIGNoZWNrO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgaWYgKGZpdHRpbmdQbGFjZW1lbnQpIHtcbiAgICAgICAgZmlyc3RGaXR0aW5nUGxhY2VtZW50ID0gZml0dGluZ1BsYWNlbWVudDtcbiAgICAgICAgcmV0dXJuIFwiYnJlYWtcIjtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZm9yICh2YXIgX2kgPSBudW1iZXJPZkNoZWNrczsgX2kgPiAwOyBfaS0tKSB7XG4gICAgICB2YXIgX3JldCA9IF9sb29wKF9pKTtcblxuICAgICAgaWYgKF9yZXQgPT09IFwiYnJlYWtcIikgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgaWYgKHN0YXRlLnBsYWNlbWVudCAhPT0gZmlyc3RGaXR0aW5nUGxhY2VtZW50KSB7XG4gICAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXS5fc2tpcCA9IHRydWU7XG4gICAgc3RhdGUucGxhY2VtZW50ID0gZmlyc3RGaXR0aW5nUGxhY2VtZW50O1xuICAgIHN0YXRlLnJlc2V0ID0gdHJ1ZTtcbiAgfVxufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxudmFyIGZsaXAkMSA9IHtcbiAgbmFtZTogJ2ZsaXAnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ21haW4nLFxuICBmbjogZmxpcCxcbiAgcmVxdWlyZXNJZkV4aXN0czogWydvZmZzZXQnXSxcbiAgZGF0YToge1xuICAgIF9za2lwOiBmYWxzZVxuICB9XG59O1xuXG5mdW5jdGlvbiBnZXRBbHRBeGlzKGF4aXMpIHtcbiAgcmV0dXJuIGF4aXMgPT09ICd4JyA/ICd5JyA6ICd4Jztcbn1cblxuZnVuY3Rpb24gd2l0aGluKG1pbiwgdmFsdWUsIG1heCkge1xuICByZXR1cm4gTWF0aC5tYXgobWluLCBNYXRoLm1pbih2YWx1ZSwgbWF4KSk7XG59XG5cbmZ1bmN0aW9uIHByZXZlbnRPdmVyZmxvdyhfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBvcHRpb25zID0gX3JlZi5vcHRpb25zLFxuICAgICAgbmFtZSA9IF9yZWYubmFtZTtcbiAgdmFyIF9vcHRpb25zJG1haW5BeGlzID0gb3B0aW9ucy5tYWluQXhpcyxcbiAgICAgIGNoZWNrTWFpbkF4aXMgPSBfb3B0aW9ucyRtYWluQXhpcyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJG1haW5BeGlzLFxuICAgICAgX29wdGlvbnMkYWx0QXhpcyA9IG9wdGlvbnMuYWx0QXhpcyxcbiAgICAgIGNoZWNrQWx0QXhpcyA9IF9vcHRpb25zJGFsdEF4aXMgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkYWx0QXhpcyxcbiAgICAgIGJvdW5kYXJ5ID0gb3B0aW9ucy5ib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeSA9IG9wdGlvbnMucm9vdEJvdW5kYXJ5LFxuICAgICAgYWx0Qm91bmRhcnkgPSBvcHRpb25zLmFsdEJvdW5kYXJ5LFxuICAgICAgcGFkZGluZyA9IG9wdGlvbnMucGFkZGluZyxcbiAgICAgIF9vcHRpb25zJHRldGhlciA9IG9wdGlvbnMudGV0aGVyLFxuICAgICAgdGV0aGVyID0gX29wdGlvbnMkdGV0aGVyID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkdGV0aGVyLFxuICAgICAgX29wdGlvbnMkdGV0aGVyT2Zmc2V0ID0gb3B0aW9ucy50ZXRoZXJPZmZzZXQsXG4gICAgICB0ZXRoZXJPZmZzZXQgPSBfb3B0aW9ucyR0ZXRoZXJPZmZzZXQgPT09IHZvaWQgMCA/IDAgOiBfb3B0aW9ucyR0ZXRoZXJPZmZzZXQ7XG4gIHZhciBvdmVyZmxvdyA9IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgYm91bmRhcnk6IGJvdW5kYXJ5LFxuICAgIHJvb3RCb3VuZGFyeTogcm9vdEJvdW5kYXJ5LFxuICAgIHBhZGRpbmc6IHBhZGRpbmcsXG4gICAgYWx0Qm91bmRhcnk6IGFsdEJvdW5kYXJ5XG4gIH0pO1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IGdldEJhc2VQbGFjZW1lbnQoc3RhdGUucGxhY2VtZW50KTtcbiAgdmFyIHZhcmlhdGlvbiA9IGdldFZhcmlhdGlvbihzdGF0ZS5wbGFjZW1lbnQpO1xuICB2YXIgaXNCYXNlUGxhY2VtZW50ID0gIXZhcmlhdGlvbjtcbiAgdmFyIG1haW5BeGlzID0gZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50KGJhc2VQbGFjZW1lbnQpO1xuICB2YXIgYWx0QXhpcyA9IGdldEFsdEF4aXMobWFpbkF4aXMpO1xuICB2YXIgcG9wcGVyT2Zmc2V0cyA9IHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cztcbiAgdmFyIHJlZmVyZW5jZVJlY3QgPSBzdGF0ZS5yZWN0cy5yZWZlcmVuY2U7XG4gIHZhciBwb3BwZXJSZWN0ID0gc3RhdGUucmVjdHMucG9wcGVyO1xuICB2YXIgdGV0aGVyT2Zmc2V0VmFsdWUgPSB0eXBlb2YgdGV0aGVyT2Zmc2V0ID09PSAnZnVuY3Rpb24nID8gdGV0aGVyT2Zmc2V0KE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLnJlY3RzLCB7XG4gICAgcGxhY2VtZW50OiBzdGF0ZS5wbGFjZW1lbnRcbiAgfSkpIDogdGV0aGVyT2Zmc2V0O1xuICB2YXIgZGF0YSA9IHtcbiAgICB4OiAwLFxuICAgIHk6IDBcbiAgfTtcblxuICBpZiAoIXBvcHBlck9mZnNldHMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoY2hlY2tNYWluQXhpcykge1xuICAgIHZhciBtYWluU2lkZSA9IG1haW5BeGlzID09PSAneScgPyB0b3AgOiBsZWZ0O1xuICAgIHZhciBhbHRTaWRlID0gbWFpbkF4aXMgPT09ICd5JyA/IGJvdHRvbSA6IHJpZ2h0O1xuICAgIHZhciBsZW4gPSBtYWluQXhpcyA9PT0gJ3knID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuICAgIHZhciBvZmZzZXQgPSBwb3BwZXJPZmZzZXRzW21haW5BeGlzXTtcbiAgICB2YXIgbWluID0gcG9wcGVyT2Zmc2V0c1ttYWluQXhpc10gKyBvdmVyZmxvd1ttYWluU2lkZV07XG4gICAgdmFyIG1heCA9IHBvcHBlck9mZnNldHNbbWFpbkF4aXNdIC0gb3ZlcmZsb3dbYWx0U2lkZV07XG4gICAgdmFyIGFkZGl0aXZlID0gdGV0aGVyID8gLXBvcHBlclJlY3RbbGVuXSAvIDIgOiAwO1xuICAgIHZhciBtaW5MZW4gPSB2YXJpYXRpb24gPT09IHN0YXJ0ID8gcmVmZXJlbmNlUmVjdFtsZW5dIDogcG9wcGVyUmVjdFtsZW5dO1xuICAgIHZhciBtYXhMZW4gPSB2YXJpYXRpb24gPT09IHN0YXJ0ID8gLXBvcHBlclJlY3RbbGVuXSA6IC1yZWZlcmVuY2VSZWN0W2xlbl07IC8vIFdlIG5lZWQgdG8gaW5jbHVkZSB0aGUgYXJyb3cgaW4gdGhlIGNhbGN1bGF0aW9uIHNvIHRoZSBhcnJvdyBkb2Vzbid0IGdvXG4gICAgLy8gb3V0c2lkZSB0aGUgcmVmZXJlbmNlIGJvdW5kc1xuXG4gICAgdmFyIGFycm93RWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzLmFycm93O1xuICAgIHZhciBhcnJvd1JlY3QgPSB0ZXRoZXIgJiYgYXJyb3dFbGVtZW50ID8gZ2V0TGF5b3V0UmVjdChhcnJvd0VsZW1lbnQpIDoge1xuICAgICAgd2lkdGg6IDAsXG4gICAgICBoZWlnaHQ6IDBcbiAgICB9O1xuICAgIHZhciBhcnJvd1BhZGRpbmdPYmplY3QgPSBzdGF0ZS5tb2RpZmllcnNEYXRhWydhcnJvdyNwZXJzaXN0ZW50J10gPyBzdGF0ZS5tb2RpZmllcnNEYXRhWydhcnJvdyNwZXJzaXN0ZW50J10ucGFkZGluZyA6IGdldEZyZXNoU2lkZU9iamVjdCgpO1xuICAgIHZhciBhcnJvd1BhZGRpbmdNaW4gPSBhcnJvd1BhZGRpbmdPYmplY3RbbWFpblNpZGVdO1xuICAgIHZhciBhcnJvd1BhZGRpbmdNYXggPSBhcnJvd1BhZGRpbmdPYmplY3RbYWx0U2lkZV07IC8vIElmIHRoZSByZWZlcmVuY2UgbGVuZ3RoIGlzIHNtYWxsZXIgdGhhbiB0aGUgYXJyb3cgbGVuZ3RoLCB3ZSBkb24ndCB3YW50XG4gICAgLy8gdG8gaW5jbHVkZSBpdHMgZnVsbCBzaXplIGluIHRoZSBjYWxjdWxhdGlvbi4gSWYgdGhlIHJlZmVyZW5jZSBpcyBzbWFsbFxuICAgIC8vIGFuZCBuZWFyIHRoZSBlZGdlIG9mIGEgYm91bmRhcnksIHRoZSBwb3BwZXIgY2FuIG92ZXJmbG93IGV2ZW4gaWYgdGhlXG4gICAgLy8gcmVmZXJlbmNlIGlzIG5vdCBvdmVyZmxvd2luZyBhcyB3ZWxsIChlLmcuIHZpcnR1YWwgZWxlbWVudHMgd2l0aCBub1xuICAgIC8vIHdpZHRoIG9yIGhlaWdodClcblxuICAgIHZhciBhcnJvd0xlbiA9IHdpdGhpbigwLCByZWZlcmVuY2VSZWN0W2xlbl0sIGFycm93UmVjdFtsZW5dKTtcbiAgICB2YXIgbWluT2Zmc2V0ID0gaXNCYXNlUGxhY2VtZW50ID8gcmVmZXJlbmNlUmVjdFtsZW5dIC8gMiAtIGFkZGl0aXZlIC0gYXJyb3dMZW4gLSBhcnJvd1BhZGRpbmdNaW4gLSB0ZXRoZXJPZmZzZXRWYWx1ZSA6IG1pbkxlbiAtIGFycm93TGVuIC0gYXJyb3dQYWRkaW5nTWluIC0gdGV0aGVyT2Zmc2V0VmFsdWU7XG4gICAgdmFyIG1heE9mZnNldCA9IGlzQmFzZVBsYWNlbWVudCA/IC1yZWZlcmVuY2VSZWN0W2xlbl0gLyAyICsgYWRkaXRpdmUgKyBhcnJvd0xlbiArIGFycm93UGFkZGluZ01heCArIHRldGhlck9mZnNldFZhbHVlIDogbWF4TGVuICsgYXJyb3dMZW4gKyBhcnJvd1BhZGRpbmdNYXggKyB0ZXRoZXJPZmZzZXRWYWx1ZTtcbiAgICB2YXIgYXJyb3dPZmZzZXRQYXJlbnQgPSBzdGF0ZS5lbGVtZW50cy5hcnJvdyAmJiBnZXRPZmZzZXRQYXJlbnQoc3RhdGUuZWxlbWVudHMuYXJyb3cpO1xuICAgIHZhciBjbGllbnRPZmZzZXQgPSBhcnJvd09mZnNldFBhcmVudCA/IG1haW5BeGlzID09PSAneScgPyBhcnJvd09mZnNldFBhcmVudC5jbGllbnRUb3AgfHwgMCA6IGFycm93T2Zmc2V0UGFyZW50LmNsaWVudExlZnQgfHwgMCA6IDA7XG4gICAgdmFyIG9mZnNldE1vZGlmaWVyVmFsdWUgPSBzdGF0ZS5tb2RpZmllcnNEYXRhLm9mZnNldCA/IHN0YXRlLm1vZGlmaWVyc0RhdGEub2Zmc2V0W3N0YXRlLnBsYWNlbWVudF1bbWFpbkF4aXNdIDogMDtcbiAgICB2YXIgdGV0aGVyTWluID0gcG9wcGVyT2Zmc2V0c1ttYWluQXhpc10gKyBtaW5PZmZzZXQgLSBvZmZzZXRNb2RpZmllclZhbHVlIC0gY2xpZW50T2Zmc2V0O1xuICAgIHZhciB0ZXRoZXJNYXggPSBwb3BwZXJPZmZzZXRzW21haW5BeGlzXSArIG1heE9mZnNldCAtIG9mZnNldE1vZGlmaWVyVmFsdWU7XG4gICAgdmFyIHByZXZlbnRlZE9mZnNldCA9IHdpdGhpbih0ZXRoZXIgPyBNYXRoLm1pbihtaW4sIHRldGhlck1pbikgOiBtaW4sIG9mZnNldCwgdGV0aGVyID8gTWF0aC5tYXgobWF4LCB0ZXRoZXJNYXgpIDogbWF4KTtcbiAgICBwb3BwZXJPZmZzZXRzW21haW5BeGlzXSA9IHByZXZlbnRlZE9mZnNldDtcbiAgICBkYXRhW21haW5BeGlzXSA9IHByZXZlbnRlZE9mZnNldCAtIG9mZnNldDtcbiAgfVxuXG4gIGlmIChjaGVja0FsdEF4aXMpIHtcbiAgICB2YXIgX21haW5TaWRlID0gbWFpbkF4aXMgPT09ICd4JyA/IHRvcCA6IGxlZnQ7XG5cbiAgICB2YXIgX2FsdFNpZGUgPSBtYWluQXhpcyA9PT0gJ3gnID8gYm90dG9tIDogcmlnaHQ7XG5cbiAgICB2YXIgX29mZnNldCA9IHBvcHBlck9mZnNldHNbYWx0QXhpc107XG5cbiAgICB2YXIgX21pbiA9IF9vZmZzZXQgKyBvdmVyZmxvd1tfbWFpblNpZGVdO1xuXG4gICAgdmFyIF9tYXggPSBfb2Zmc2V0IC0gb3ZlcmZsb3dbX2FsdFNpZGVdO1xuXG4gICAgdmFyIF9wcmV2ZW50ZWRPZmZzZXQgPSB3aXRoaW4oX21pbiwgX29mZnNldCwgX21heCk7XG5cbiAgICBwb3BwZXJPZmZzZXRzW2FsdEF4aXNdID0gX3ByZXZlbnRlZE9mZnNldDtcbiAgICBkYXRhW2FsdEF4aXNdID0gX3ByZXZlbnRlZE9mZnNldCAtIF9vZmZzZXQ7XG4gIH1cblxuICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdID0gZGF0YTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbnZhciBwcmV2ZW50T3ZlcmZsb3ckMSA9IHtcbiAgbmFtZTogJ3ByZXZlbnRPdmVyZmxvdycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnbWFpbicsXG4gIGZuOiBwcmV2ZW50T3ZlcmZsb3csXG4gIHJlcXVpcmVzSWZFeGlzdHM6IFsnb2Zmc2V0J11cbn07XG5cbmZ1bmN0aW9uIGFycm93KF9yZWYpIHtcbiAgdmFyIF9zdGF0ZSRtb2RpZmllcnNEYXRhJDtcblxuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgbmFtZSA9IF9yZWYubmFtZTtcbiAgdmFyIGFycm93RWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzLmFycm93O1xuICB2YXIgcG9wcGVyT2Zmc2V0cyA9IHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cztcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHN0YXRlLnBsYWNlbWVudCk7XG4gIHZhciBheGlzID0gZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50KGJhc2VQbGFjZW1lbnQpO1xuICB2YXIgaXNWZXJ0aWNhbCA9IFtsZWZ0LCByaWdodF0uaW5kZXhPZihiYXNlUGxhY2VtZW50KSA+PSAwO1xuICB2YXIgbGVuID0gaXNWZXJ0aWNhbCA/ICdoZWlnaHQnIDogJ3dpZHRoJztcblxuICBpZiAoIWFycm93RWxlbWVudCB8fCAhcG9wcGVyT2Zmc2V0cykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBwYWRkaW5nT2JqZWN0ID0gc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lICsgXCIjcGVyc2lzdGVudFwiXS5wYWRkaW5nO1xuICB2YXIgYXJyb3dSZWN0ID0gZ2V0TGF5b3V0UmVjdChhcnJvd0VsZW1lbnQpO1xuICB2YXIgbWluUHJvcCA9IGF4aXMgPT09ICd5JyA/IHRvcCA6IGxlZnQ7XG4gIHZhciBtYXhQcm9wID0gYXhpcyA9PT0gJ3knID8gYm90dG9tIDogcmlnaHQ7XG4gIHZhciBlbmREaWZmID0gc3RhdGUucmVjdHMucmVmZXJlbmNlW2xlbl0gKyBzdGF0ZS5yZWN0cy5yZWZlcmVuY2VbYXhpc10gLSBwb3BwZXJPZmZzZXRzW2F4aXNdIC0gc3RhdGUucmVjdHMucG9wcGVyW2xlbl07XG4gIHZhciBzdGFydERpZmYgPSBwb3BwZXJPZmZzZXRzW2F4aXNdIC0gc3RhdGUucmVjdHMucmVmZXJlbmNlW2F4aXNdO1xuICB2YXIgYXJyb3dPZmZzZXRQYXJlbnQgPSBnZXRPZmZzZXRQYXJlbnQoYXJyb3dFbGVtZW50KTtcbiAgdmFyIGNsaWVudFNpemUgPSBhcnJvd09mZnNldFBhcmVudCA/IGF4aXMgPT09ICd5JyA/IGFycm93T2Zmc2V0UGFyZW50LmNsaWVudEhlaWdodCB8fCAwIDogYXJyb3dPZmZzZXRQYXJlbnQuY2xpZW50V2lkdGggfHwgMCA6IDA7XG4gIHZhciBjZW50ZXJUb1JlZmVyZW5jZSA9IGVuZERpZmYgLyAyIC0gc3RhcnREaWZmIC8gMjsgLy8gTWFrZSBzdXJlIHRoZSBhcnJvdyBkb2Vzbid0IG92ZXJmbG93IHRoZSBwb3BwZXIgaWYgdGhlIGNlbnRlciBwb2ludCBpc1xuICAvLyBvdXRzaWRlIG9mIHRoZSBwb3BwZXIgYm91bmRzXG5cbiAgdmFyIG1pbiA9IHBhZGRpbmdPYmplY3RbbWluUHJvcF07XG4gIHZhciBtYXggPSBjbGllbnRTaXplIC0gYXJyb3dSZWN0W2xlbl0gLSBwYWRkaW5nT2JqZWN0W21heFByb3BdO1xuICB2YXIgY2VudGVyID0gY2xpZW50U2l6ZSAvIDIgLSBhcnJvd1JlY3RbbGVuXSAvIDIgKyBjZW50ZXJUb1JlZmVyZW5jZTtcbiAgdmFyIG9mZnNldCA9IHdpdGhpbihtaW4sIGNlbnRlciwgbWF4KTsgLy8gUHJldmVudHMgYnJlYWtpbmcgc3ludGF4IGhpZ2hsaWdodGluZy4uLlxuXG4gIHZhciBheGlzUHJvcCA9IGF4aXM7XG4gIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0gPSAoX3N0YXRlJG1vZGlmaWVyc0RhdGEkID0ge30sIF9zdGF0ZSRtb2RpZmllcnNEYXRhJFtheGlzUHJvcF0gPSBvZmZzZXQsIF9zdGF0ZSRtb2RpZmllcnNEYXRhJC5jZW50ZXJPZmZzZXQgPSBvZmZzZXQgLSBjZW50ZXIsIF9zdGF0ZSRtb2RpZmllcnNEYXRhJCk7XG59XG5cbmZ1bmN0aW9uIGVmZmVjdCQyKF9yZWYyKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYyLnN0YXRlLFxuICAgICAgb3B0aW9ucyA9IF9yZWYyLm9wdGlvbnMsXG4gICAgICBuYW1lID0gX3JlZjIubmFtZTtcbiAgdmFyIF9vcHRpb25zJGVsZW1lbnQgPSBvcHRpb25zLmVsZW1lbnQsXG4gICAgICBhcnJvd0VsZW1lbnQgPSBfb3B0aW9ucyRlbGVtZW50ID09PSB2b2lkIDAgPyAnW2RhdGEtcG9wcGVyLWFycm93XScgOiBfb3B0aW9ucyRlbGVtZW50LFxuICAgICAgX29wdGlvbnMkcGFkZGluZyA9IG9wdGlvbnMucGFkZGluZyxcbiAgICAgIHBhZGRpbmcgPSBfb3B0aW9ucyRwYWRkaW5nID09PSB2b2lkIDAgPyAwIDogX29wdGlvbnMkcGFkZGluZztcblxuICBpZiAoYXJyb3dFbGVtZW50ID09IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH0gLy8gQ1NTIHNlbGVjdG9yXG5cblxuICBpZiAodHlwZW9mIGFycm93RWxlbWVudCA9PT0gJ3N0cmluZycpIHtcbiAgICBhcnJvd0VsZW1lbnQgPSBzdGF0ZS5lbGVtZW50cy5wb3BwZXIucXVlcnlTZWxlY3RvcihhcnJvd0VsZW1lbnQpO1xuXG4gICAgaWYgKCFhcnJvd0VsZW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgaWYgKCFpc0hUTUxFbGVtZW50KGFycm93RWxlbWVudCkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoWydQb3BwZXI6IFwiYXJyb3dcIiBlbGVtZW50IG11c3QgYmUgYW4gSFRNTEVsZW1lbnQgKG5vdCBhbiBTVkdFbGVtZW50KS4nLCAnVG8gdXNlIGFuIFNWRyBhcnJvdywgd3JhcCBpdCBpbiBhbiBIVE1MRWxlbWVudCB0aGF0IHdpbGwgYmUgdXNlZCBhcycsICd0aGUgYXJyb3cuJ10uam9pbignICcpKTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWNvbnRhaW5zKHN0YXRlLmVsZW1lbnRzLnBvcHBlciwgYXJyb3dFbGVtZW50KSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoWydQb3BwZXI6IFwiYXJyb3dcIiBtb2RpZmllclxcJ3MgYGVsZW1lbnRgIG11c3QgYmUgYSBjaGlsZCBvZiB0aGUgcG9wcGVyJywgJ2VsZW1lbnQuJ10uam9pbignICcpKTtcbiAgICB9XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBzdGF0ZS5lbGVtZW50cy5hcnJvdyA9IGFycm93RWxlbWVudDtcbiAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lICsgXCIjcGVyc2lzdGVudFwiXSA9IHtcbiAgICBwYWRkaW5nOiBtZXJnZVBhZGRpbmdPYmplY3QodHlwZW9mIHBhZGRpbmcgIT09ICdudW1iZXInID8gcGFkZGluZyA6IGV4cGFuZFRvSGFzaE1hcChwYWRkaW5nLCBiYXNlUGxhY2VtZW50cykpXG4gIH07XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG52YXIgYXJyb3ckMSA9IHtcbiAgbmFtZTogJ2Fycm93JyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdtYWluJyxcbiAgZm46IGFycm93LFxuICBlZmZlY3Q6IGVmZmVjdCQyLFxuICByZXF1aXJlczogWydwb3BwZXJPZmZzZXRzJ10sXG4gIHJlcXVpcmVzSWZFeGlzdHM6IFsncHJldmVudE92ZXJmbG93J11cbn07XG5cbmZ1bmN0aW9uIGdldFNpZGVPZmZzZXRzKG92ZXJmbG93LCByZWN0LCBwcmV2ZW50ZWRPZmZzZXRzKSB7XG4gIGlmIChwcmV2ZW50ZWRPZmZzZXRzID09PSB2b2lkIDApIHtcbiAgICBwcmV2ZW50ZWRPZmZzZXRzID0ge1xuICAgICAgeDogMCxcbiAgICAgIHk6IDBcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0b3A6IG92ZXJmbG93LnRvcCAtIHJlY3QuaGVpZ2h0IC0gcHJldmVudGVkT2Zmc2V0cy55LFxuICAgIHJpZ2h0OiBvdmVyZmxvdy5yaWdodCAtIHJlY3Qud2lkdGggKyBwcmV2ZW50ZWRPZmZzZXRzLngsXG4gICAgYm90dG9tOiBvdmVyZmxvdy5ib3R0b20gLSByZWN0LmhlaWdodCArIHByZXZlbnRlZE9mZnNldHMueSxcbiAgICBsZWZ0OiBvdmVyZmxvdy5sZWZ0IC0gcmVjdC53aWR0aCAtIHByZXZlbnRlZE9mZnNldHMueFxuICB9O1xufVxuXG5mdW5jdGlvbiBpc0FueVNpZGVGdWxseUNsaXBwZWQob3ZlcmZsb3cpIHtcbiAgcmV0dXJuIFt0b3AsIHJpZ2h0LCBib3R0b20sIGxlZnRdLnNvbWUoZnVuY3Rpb24gKHNpZGUpIHtcbiAgICByZXR1cm4gb3ZlcmZsb3dbc2lkZV0gPj0gMDtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGhpZGUoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgbmFtZSA9IF9yZWYubmFtZTtcbiAgdmFyIHJlZmVyZW5jZVJlY3QgPSBzdGF0ZS5yZWN0cy5yZWZlcmVuY2U7XG4gIHZhciBwb3BwZXJSZWN0ID0gc3RhdGUucmVjdHMucG9wcGVyO1xuICB2YXIgcHJldmVudGVkT2Zmc2V0cyA9IHN0YXRlLm1vZGlmaWVyc0RhdGEucHJldmVudE92ZXJmbG93O1xuICB2YXIgcmVmZXJlbmNlT3ZlcmZsb3cgPSBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwge1xuICAgIGVsZW1lbnRDb250ZXh0OiAncmVmZXJlbmNlJ1xuICB9KTtcbiAgdmFyIHBvcHBlckFsdE92ZXJmbG93ID0gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIHtcbiAgICBhbHRCb3VuZGFyeTogdHJ1ZVxuICB9KTtcbiAgdmFyIHJlZmVyZW5jZUNsaXBwaW5nT2Zmc2V0cyA9IGdldFNpZGVPZmZzZXRzKHJlZmVyZW5jZU92ZXJmbG93LCByZWZlcmVuY2VSZWN0KTtcbiAgdmFyIHBvcHBlckVzY2FwZU9mZnNldHMgPSBnZXRTaWRlT2Zmc2V0cyhwb3BwZXJBbHRPdmVyZmxvdywgcG9wcGVyUmVjdCwgcHJldmVudGVkT2Zmc2V0cyk7XG4gIHZhciBpc1JlZmVyZW5jZUhpZGRlbiA9IGlzQW55U2lkZUZ1bGx5Q2xpcHBlZChyZWZlcmVuY2VDbGlwcGluZ09mZnNldHMpO1xuICB2YXIgaGFzUG9wcGVyRXNjYXBlZCA9IGlzQW55U2lkZUZ1bGx5Q2xpcHBlZChwb3BwZXJFc2NhcGVPZmZzZXRzKTtcbiAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXSA9IHtcbiAgICByZWZlcmVuY2VDbGlwcGluZ09mZnNldHM6IHJlZmVyZW5jZUNsaXBwaW5nT2Zmc2V0cyxcbiAgICBwb3BwZXJFc2NhcGVPZmZzZXRzOiBwb3BwZXJFc2NhcGVPZmZzZXRzLFxuICAgIGlzUmVmZXJlbmNlSGlkZGVuOiBpc1JlZmVyZW5jZUhpZGRlbixcbiAgICBoYXNQb3BwZXJFc2NhcGVkOiBoYXNQb3BwZXJFc2NhcGVkXG4gIH07XG4gIHN0YXRlLmF0dHJpYnV0ZXMucG9wcGVyID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUuYXR0cmlidXRlcy5wb3BwZXIsIHtcbiAgICAnZGF0YS1wb3BwZXItcmVmZXJlbmNlLWhpZGRlbic6IGlzUmVmZXJlbmNlSGlkZGVuLFxuICAgICdkYXRhLXBvcHBlci1lc2NhcGVkJzogaGFzUG9wcGVyRXNjYXBlZFxuICB9KTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbnZhciBoaWRlJDEgPSB7XG4gIG5hbWU6ICdoaWRlJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdtYWluJyxcbiAgcmVxdWlyZXNJZkV4aXN0czogWydwcmV2ZW50T3ZlcmZsb3cnXSxcbiAgZm46IGhpZGVcbn07XG5cbnZhciBkZWZhdWx0TW9kaWZpZXJzID0gW2V2ZW50TGlzdGVuZXJzLCBwb3BwZXJPZmZzZXRzJDEsIGNvbXB1dGVTdHlsZXMkMSwgYXBwbHlTdHlsZXMkMSwgb2Zmc2V0JDEsIGZsaXAkMSwgcHJldmVudE92ZXJmbG93JDEsIGFycm93JDEsIGhpZGUkMV07XG52YXIgY3JlYXRlUG9wcGVyID0gLyojX19QVVJFX18qL3BvcHBlckdlbmVyYXRvcih7XG4gIGRlZmF1bHRNb2RpZmllcnM6IGRlZmF1bHRNb2RpZmllcnNcbn0pOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbmV4cG9ydHMuY3JlYXRlUG9wcGVyID0gY3JlYXRlUG9wcGVyO1xuZXhwb3J0cy5kZWZhdWx0TW9kaWZpZXJzID0gZGVmYXVsdE1vZGlmaWVycztcbmV4cG9ydHMuZGV0ZWN0T3ZlcmZsb3cgPSBkZXRlY3RPdmVyZmxvdztcbmV4cG9ydHMucG9wcGVyR2VuZXJhdG9yID0gcG9wcGVyR2VuZXJhdG9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cG9wcGVyLmpzLm1hcFxuIiwiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydHMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcbmV4cG9ydHMudG9CeXRlQXJyYXkgPSB0b0J5dGVBcnJheVxuZXhwb3J0cy5mcm9tQnl0ZUFycmF5ID0gZnJvbUJ5dGVBcnJheVxuXG52YXIgbG9va3VwID0gW11cbnZhciByZXZMb29rdXAgPSBbXVxudmFyIEFyciA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyA/IFVpbnQ4QXJyYXkgOiBBcnJheVxuXG52YXIgY29kZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJ1xuZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvZGUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgbG9va3VwW2ldID0gY29kZVtpXVxuICByZXZMb29rdXBbY29kZS5jaGFyQ29kZUF0KGkpXSA9IGlcbn1cblxuLy8gU3VwcG9ydCBkZWNvZGluZyBVUkwtc2FmZSBiYXNlNjQgc3RyaW5ncywgYXMgTm9kZS5qcyBkb2VzLlxuLy8gU2VlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CYXNlNjQjVVJMX2FwcGxpY2F0aW9uc1xucmV2TG9va3VwWyctJy5jaGFyQ29kZUF0KDApXSA9IDYyXG5yZXZMb29rdXBbJ18nLmNoYXJDb2RlQXQoMCldID0gNjNcblxuZnVuY3Rpb24gZ2V0TGVucyAoYjY0KSB7XG4gIHZhciBsZW4gPSBiNjQubGVuZ3RoXG5cbiAgaWYgKGxlbiAlIDQgPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0JylcbiAgfVxuXG4gIC8vIFRyaW0gb2ZmIGV4dHJhIGJ5dGVzIGFmdGVyIHBsYWNlaG9sZGVyIGJ5dGVzIGFyZSBmb3VuZFxuICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9iZWF0Z2FtbWl0L2Jhc2U2NC1qcy9pc3N1ZXMvNDJcbiAgdmFyIHZhbGlkTGVuID0gYjY0LmluZGV4T2YoJz0nKVxuICBpZiAodmFsaWRMZW4gPT09IC0xKSB2YWxpZExlbiA9IGxlblxuXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSB2YWxpZExlbiA9PT0gbGVuXG4gICAgPyAwXG4gICAgOiA0IC0gKHZhbGlkTGVuICUgNClcblxuICByZXR1cm4gW3ZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW5dXG59XG5cbi8vIGJhc2U2NCBpcyA0LzMgKyB1cCB0byB0d28gY2hhcmFjdGVycyBvZiB0aGUgb3JpZ2luYWwgZGF0YVxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoYjY0KSB7XG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIF9ieXRlTGVuZ3RoIChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pIHtcbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIHRvQnl0ZUFycmF5IChiNjQpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG5cbiAgdmFyIGFyciA9IG5ldyBBcnIoX2J5dGVMZW5ndGgoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSlcblxuICB2YXIgY3VyQnl0ZSA9IDBcblxuICAvLyBpZiB0aGVyZSBhcmUgcGxhY2Vob2xkZXJzLCBvbmx5IGdldCB1cCB0byB0aGUgbGFzdCBjb21wbGV0ZSA0IGNoYXJzXG4gIHZhciBsZW4gPSBwbGFjZUhvbGRlcnNMZW4gPiAwXG4gICAgPyB2YWxpZExlbiAtIDRcbiAgICA6IHZhbGlkTGVuXG5cbiAgdmFyIGlcbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDE4KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgMTIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA8PCA2KSB8XG4gICAgICByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDMpXVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiAxNikgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMikge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPj4gNClcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDEpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTApIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCA0KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPj4gMilcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIHRyaXBsZXRUb0Jhc2U2NCAobnVtKSB7XG4gIHJldHVybiBsb29rdXBbbnVtID4+IDE4ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gMTIgJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiA2ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gJiAweDNGXVxufVxuXG5mdW5jdGlvbiBlbmNvZGVDaHVuayAodWludDgsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHRtcFxuICB2YXIgb3V0cHV0ID0gW11cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IDMpIHtcbiAgICB0bXAgPVxuICAgICAgKCh1aW50OFtpXSA8PCAxNikgJiAweEZGMDAwMCkgK1xuICAgICAgKCh1aW50OFtpICsgMV0gPDwgOCkgJiAweEZGMDApICtcbiAgICAgICh1aW50OFtpICsgMl0gJiAweEZGKVxuICAgIG91dHB1dC5wdXNoKHRyaXBsZXRUb0Jhc2U2NCh0bXApKVxuICB9XG4gIHJldHVybiBvdXRwdXQuam9pbignJylcbn1cblxuZnVuY3Rpb24gZnJvbUJ5dGVBcnJheSAodWludDgpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVuID0gdWludDgubGVuZ3RoXG4gIHZhciBleHRyYUJ5dGVzID0gbGVuICUgMyAvLyBpZiB3ZSBoYXZlIDEgYnl0ZSBsZWZ0LCBwYWQgMiBieXRlc1xuICB2YXIgcGFydHMgPSBbXVxuICB2YXIgbWF4Q2h1bmtMZW5ndGggPSAxNjM4MyAvLyBtdXN0IGJlIG11bHRpcGxlIG9mIDNcblxuICAvLyBnbyB0aHJvdWdoIHRoZSBhcnJheSBldmVyeSB0aHJlZSBieXRlcywgd2UnbGwgZGVhbCB3aXRoIHRyYWlsaW5nIHN0dWZmIGxhdGVyXG4gIGZvciAodmFyIGkgPSAwLCBsZW4yID0gbGVuIC0gZXh0cmFCeXRlczsgaSA8IGxlbjI7IGkgKz0gbWF4Q2h1bmtMZW5ndGgpIHtcbiAgICBwYXJ0cy5wdXNoKGVuY29kZUNodW5rKFxuICAgICAgdWludDgsIGksIChpICsgbWF4Q2h1bmtMZW5ndGgpID4gbGVuMiA/IGxlbjIgOiAoaSArIG1heENodW5rTGVuZ3RoKVxuICAgICkpXG4gIH1cblxuICAvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzXG4gIGlmIChleHRyYUJ5dGVzID09PSAxKSB7XG4gICAgdG1wID0gdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAyXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCA0KSAmIDB4M0ZdICtcbiAgICAgICc9PSdcbiAgICApXG4gIH0gZWxzZSBpZiAoZXh0cmFCeXRlcyA9PT0gMikge1xuICAgIHRtcCA9ICh1aW50OFtsZW4gLSAyXSA8PCA4KSArIHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMTBdICtcbiAgICAgIGxvb2t1cFsodG1wID4+IDQpICYgMHgzRl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgMikgJiAweDNGXSArXG4gICAgICAnPSdcbiAgICApXG4gIH1cblxuICByZXR1cm4gcGFydHMuam9pbignJylcbn1cbiIsIi8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbnZhciBiYXNlNjQgPSByZXF1aXJlKCdiYXNlNjQtanMnKVxudmFyIGllZWU3NTQgPSByZXF1aXJlKCdpZWVlNzU0JylcbnZhciBjdXN0b21JbnNwZWN0U3ltYm9sID1cbiAgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbC5mb3IgPT09ICdmdW5jdGlvbicpXG4gICAgPyBTeW1ib2wuZm9yKCdub2RlanMudXRpbC5pbnNwZWN0LmN1c3RvbScpXG4gICAgOiBudWxsXG5cbmV4cG9ydHMuQnVmZmVyID0gQnVmZmVyXG5leHBvcnRzLlNsb3dCdWZmZXIgPSBTbG93QnVmZmVyXG5leHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTID0gNTBcblxudmFyIEtfTUFYX0xFTkdUSCA9IDB4N2ZmZmZmZmZcbmV4cG9ydHMua01heExlbmd0aCA9IEtfTUFYX0xFTkdUSFxuXG4vKipcbiAqIElmIGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGA6XG4gKiAgID09PSB0cnVlICAgIFVzZSBVaW50OEFycmF5IGltcGxlbWVudGF0aW9uIChmYXN0ZXN0KVxuICogICA9PT0gZmFsc2UgICBQcmludCB3YXJuaW5nIGFuZCByZWNvbW1lbmQgdXNpbmcgYGJ1ZmZlcmAgdjQueCB3aGljaCBoYXMgYW4gT2JqZWN0XG4gKiAgICAgICAgICAgICAgIGltcGxlbWVudGF0aW9uIChtb3N0IGNvbXBhdGlibGUsIGV2ZW4gSUU2KVxuICpcbiAqIEJyb3dzZXJzIHRoYXQgc3VwcG9ydCB0eXBlZCBhcnJheXMgYXJlIElFIDEwKywgRmlyZWZveCA0KywgQ2hyb21lIDcrLCBTYWZhcmkgNS4xKyxcbiAqIE9wZXJhIDExLjYrLCBpT1MgNC4yKy5cbiAqXG4gKiBXZSByZXBvcnQgdGhhdCB0aGUgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHR5cGVkIGFycmF5cyBpZiB0aGUgYXJlIG5vdCBzdWJjbGFzc2FibGVcbiAqIHVzaW5nIF9fcHJvdG9fXy4gRmlyZWZveCA0LTI5IGxhY2tzIHN1cHBvcnQgZm9yIGFkZGluZyBuZXcgcHJvcGVydGllcyB0byBgVWludDhBcnJheWBcbiAqIChTZWU6IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY5NTQzOCkuIElFIDEwIGxhY2tzIHN1cHBvcnRcbiAqIGZvciBfX3Byb3RvX18gYW5kIGhhcyBhIGJ1Z2d5IHR5cGVkIGFycmF5IGltcGxlbWVudGF0aW9uLlxuICovXG5CdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCA9IHR5cGVkQXJyYXlTdXBwb3J0KClcblxuaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgY29uc29sZS5lcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICBjb25zb2xlLmVycm9yKFxuICAgICdUaGlzIGJyb3dzZXIgbGFja3MgdHlwZWQgYXJyYXkgKFVpbnQ4QXJyYXkpIHN1cHBvcnQgd2hpY2ggaXMgcmVxdWlyZWQgYnkgJyArXG4gICAgJ2BidWZmZXJgIHY1LnguIFVzZSBgYnVmZmVyYCB2NC54IGlmIHlvdSByZXF1aXJlIG9sZCBicm93c2VyIHN1cHBvcnQuJ1xuICApXG59XG5cbmZ1bmN0aW9uIHR5cGVkQXJyYXlTdXBwb3J0ICgpIHtcbiAgLy8gQ2FuIHR5cGVkIGFycmF5IGluc3RhbmNlcyBjYW4gYmUgYXVnbWVudGVkP1xuICB0cnkge1xuICAgIHZhciBhcnIgPSBuZXcgVWludDhBcnJheSgxKVxuICAgIHZhciBwcm90byA9IHsgZm9vOiBmdW5jdGlvbiAoKSB7IHJldHVybiA0MiB9IH1cbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YocHJvdG8sIFVpbnQ4QXJyYXkucHJvdG90eXBlKVxuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihhcnIsIHByb3RvKVxuICAgIHJldHVybiBhcnIuZm9vKCkgPT09IDQyXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyLnByb3RvdHlwZSwgJ3BhcmVudCcsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGhpcykpIHJldHVybiB1bmRlZmluZWRcbiAgICByZXR1cm4gdGhpcy5idWZmZXJcbiAgfVxufSlcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlci5wcm90b3R5cGUsICdvZmZzZXQnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKHRoaXMpKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgcmV0dXJuIHRoaXMuYnl0ZU9mZnNldFxuICB9XG59KVxuXG5mdW5jdGlvbiBjcmVhdGVCdWZmZXIgKGxlbmd0aCkge1xuICBpZiAobGVuZ3RoID4gS19NQVhfTEVOR1RIKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBcIicgKyBsZW5ndGggKyAnXCIgaXMgaW52YWxpZCBmb3Igb3B0aW9uIFwic2l6ZVwiJylcbiAgfVxuICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZVxuICB2YXIgYnVmID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKVxuICBPYmplY3Quc2V0UHJvdG90eXBlT2YoYnVmLCBCdWZmZXIucHJvdG90eXBlKVxuICByZXR1cm4gYnVmXG59XG5cbi8qKlxuICogVGhlIEJ1ZmZlciBjb25zdHJ1Y3RvciByZXR1cm5zIGluc3RhbmNlcyBvZiBgVWludDhBcnJheWAgdGhhdCBoYXZlIHRoZWlyXG4gKiBwcm90b3R5cGUgY2hhbmdlZCB0byBgQnVmZmVyLnByb3RvdHlwZWAuIEZ1cnRoZXJtb3JlLCBgQnVmZmVyYCBpcyBhIHN1YmNsYXNzIG9mXG4gKiBgVWludDhBcnJheWAsIHNvIHRoZSByZXR1cm5lZCBpbnN0YW5jZXMgd2lsbCBoYXZlIGFsbCB0aGUgbm9kZSBgQnVmZmVyYCBtZXRob2RzXG4gKiBhbmQgdGhlIGBVaW50OEFycmF5YCBtZXRob2RzLiBTcXVhcmUgYnJhY2tldCBub3RhdGlvbiB3b3JrcyBhcyBleHBlY3RlZCAtLSBpdFxuICogcmV0dXJucyBhIHNpbmdsZSBvY3RldC5cbiAqXG4gKiBUaGUgYFVpbnQ4QXJyYXlgIHByb3RvdHlwZSByZW1haW5zIHVubW9kaWZpZWQuXG4gKi9cblxuZnVuY3Rpb24gQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICAvLyBDb21tb24gY2FzZS5cbiAgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZ09yT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgJ1RoZSBcInN0cmluZ1wiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBzdHJpbmcuIFJlY2VpdmVkIHR5cGUgbnVtYmVyJ1xuICAgICAgKVxuICAgIH1cbiAgICByZXR1cm4gYWxsb2NVbnNhZmUoYXJnKVxuICB9XG4gIHJldHVybiBmcm9tKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucG9vbFNpemUgPSA4MTkyIC8vIG5vdCB1c2VkIGJ5IHRoaXMgaW1wbGVtZW50YXRpb25cblxuZnVuY3Rpb24gZnJvbSAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmcm9tU3RyaW5nKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0KVxuICB9XG5cbiAgaWYgKEFycmF5QnVmZmVyLmlzVmlldyh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5TGlrZSh2YWx1ZSlcbiAgfVxuXG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICdUaGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBvbmUgb2YgdHlwZSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCAnICtcbiAgICAgICdvciBBcnJheS1saWtlIE9iamVjdC4gUmVjZWl2ZWQgdHlwZSAnICsgKHR5cGVvZiB2YWx1ZSlcbiAgICApXG4gIH1cblxuICBpZiAoaXNJbnN0YW5jZSh2YWx1ZSwgQXJyYXlCdWZmZXIpIHx8XG4gICAgICAodmFsdWUgJiYgaXNJbnN0YW5jZSh2YWx1ZS5idWZmZXIsIEFycmF5QnVmZmVyKSkpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAodHlwZW9mIFNoYXJlZEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgKGlzSW5zdGFuY2UodmFsdWUsIFNoYXJlZEFycmF5QnVmZmVyKSB8fFxuICAgICAgKHZhbHVlICYmIGlzSW5zdGFuY2UodmFsdWUuYnVmZmVyLCBTaGFyZWRBcnJheUJ1ZmZlcikpKSkge1xuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICdUaGUgXCJ2YWx1ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIG9mIHR5cGUgbnVtYmVyLiBSZWNlaXZlZCB0eXBlIG51bWJlcidcbiAgICApXG4gIH1cblxuICB2YXIgdmFsdWVPZiA9IHZhbHVlLnZhbHVlT2YgJiYgdmFsdWUudmFsdWVPZigpXG4gIGlmICh2YWx1ZU9mICE9IG51bGwgJiYgdmFsdWVPZiAhPT0gdmFsdWUpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20odmFsdWVPZiwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgdmFyIGIgPSBmcm9tT2JqZWN0KHZhbHVlKVxuICBpZiAoYikgcmV0dXJuIGJcblxuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvUHJpbWl0aXZlICE9IG51bGwgJiZcbiAgICAgIHR5cGVvZiB2YWx1ZVtTeW1ib2wudG9QcmltaXRpdmVdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKFxuICAgICAgdmFsdWVbU3ltYm9sLnRvUHJpbWl0aXZlXSgnc3RyaW5nJyksIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aFxuICAgIClcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgJ1RoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksICcgK1xuICAgICdvciBBcnJheS1saWtlIE9iamVjdC4gUmVjZWl2ZWQgdHlwZSAnICsgKHR5cGVvZiB2YWx1ZSlcbiAgKVxufVxuXG4vKipcbiAqIEZ1bmN0aW9uYWxseSBlcXVpdmFsZW50IHRvIEJ1ZmZlcihhcmcsIGVuY29kaW5nKSBidXQgdGhyb3dzIGEgVHlwZUVycm9yXG4gKiBpZiB2YWx1ZSBpcyBhIG51bWJlci5cbiAqIEJ1ZmZlci5mcm9tKHN0clssIGVuY29kaW5nXSlcbiAqIEJ1ZmZlci5mcm9tKGFycmF5KVxuICogQnVmZmVyLmZyb20oYnVmZmVyKVxuICogQnVmZmVyLmZyb20oYXJyYXlCdWZmZXJbLCBieXRlT2Zmc2V0WywgbGVuZ3RoXV0pXG4gKiovXG5CdWZmZXIuZnJvbSA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBmcm9tKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbi8vIE5vdGU6IENoYW5nZSBwcm90b3R5cGUgKmFmdGVyKiBCdWZmZXIuZnJvbSBpcyBkZWZpbmVkIHRvIHdvcmthcm91bmQgQ2hyb21lIGJ1Zzpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL3B1bGwvMTQ4XG5PYmplY3Quc2V0UHJvdG90eXBlT2YoQnVmZmVyLnByb3RvdHlwZSwgVWludDhBcnJheS5wcm90b3R5cGUpXG5PYmplY3Quc2V0UHJvdG90eXBlT2YoQnVmZmVyLCBVaW50OEFycmF5KVxuXG5mdW5jdGlvbiBhc3NlcnRTaXplIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgbnVtYmVyJylcbiAgfSBlbHNlIGlmIChzaXplIDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgXCInICsgc2l6ZSArICdcIiBpcyBpbnZhbGlkIGZvciBvcHRpb24gXCJzaXplXCInKVxuICB9XG59XG5cbmZ1bmN0aW9uIGFsbG9jIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIGlmIChzaXplIDw9IDApIHtcbiAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHNpemUpXG4gIH1cbiAgaWYgKGZpbGwgIT09IHVuZGVmaW5lZCkge1xuICAgIC8vIE9ubHkgcGF5IGF0dGVudGlvbiB0byBlbmNvZGluZyBpZiBpdCdzIGEgc3RyaW5nLiBUaGlzXG4gICAgLy8gcHJldmVudHMgYWNjaWRlbnRhbGx5IHNlbmRpbmcgaW4gYSBudW1iZXIgdGhhdCB3b3VsZFxuICAgIC8vIGJlIGludGVycHJldHRlZCBhcyBhIHN0YXJ0IG9mZnNldC5cbiAgICByZXR1cm4gdHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJ1xuICAgICAgPyBjcmVhdGVCdWZmZXIoc2l6ZSkuZmlsbChmaWxsLCBlbmNvZGluZylcbiAgICAgIDogY3JlYXRlQnVmZmVyKHNpemUpLmZpbGwoZmlsbClcbiAgfVxuICByZXR1cm4gY3JlYXRlQnVmZmVyKHNpemUpXG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBmaWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogYWxsb2Moc2l6ZVssIGZpbGxbLCBlbmNvZGluZ11dKVxuICoqL1xuQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIHJldHVybiBhbGxvYyhzaXplLCBmaWxsLCBlbmNvZGluZylcbn1cblxuZnVuY3Rpb24gYWxsb2NVbnNhZmUgKHNpemUpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICByZXR1cm4gY3JlYXRlQnVmZmVyKHNpemUgPCAwID8gMCA6IGNoZWNrZWQoc2l6ZSkgfCAwKVxufVxuXG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gQnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKHNpemUpXG59XG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gU2xvd0J1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICovXG5CdWZmZXIuYWxsb2NVbnNhZmVTbG93ID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKHNpemUpXG59XG5cbmZ1bmN0aW9uIGZyb21TdHJpbmcgKHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycgfHwgZW5jb2RpbmcgPT09ICcnKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgfVxuXG4gIGlmICghQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICB9XG5cbiAgdmFyIGxlbmd0aCA9IGJ5dGVMZW5ndGgoc3RyaW5nLCBlbmNvZGluZykgfCAwXG4gIHZhciBidWYgPSBjcmVhdGVCdWZmZXIobGVuZ3RoKVxuXG4gIHZhciBhY3R1YWwgPSBidWYud3JpdGUoc3RyaW5nLCBlbmNvZGluZylcblxuICBpZiAoYWN0dWFsICE9PSBsZW5ndGgpIHtcbiAgICAvLyBXcml0aW5nIGEgaGV4IHN0cmluZywgZm9yIGV4YW1wbGUsIHRoYXQgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzIHdpbGxcbiAgICAvLyBjYXVzZSBldmVyeXRoaW5nIGFmdGVyIHRoZSBmaXJzdCBpbnZhbGlkIGNoYXJhY3RlciB0byBiZSBpZ25vcmVkLiAoZS5nLlxuICAgIC8vICdhYnh4Y2QnIHdpbGwgYmUgdHJlYXRlZCBhcyAnYWInKVxuICAgIGJ1ZiA9IGJ1Zi5zbGljZSgwLCBhY3R1YWwpXG4gIH1cblxuICByZXR1cm4gYnVmXG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUxpa2UgKGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGggPCAwID8gMCA6IGNoZWNrZWQoYXJyYXkubGVuZ3RoKSB8IDBcbiAgdmFyIGJ1ZiA9IGNyZWF0ZUJ1ZmZlcihsZW5ndGgpXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICBidWZbaV0gPSBhcnJheVtpXSAmIDI1NVxuICB9XG4gIHJldHVybiBidWZcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5QnVmZmVyIChhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmIChieXRlT2Zmc2V0IDwgMCB8fCBhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcIm9mZnNldFwiIGlzIG91dHNpZGUgb2YgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQgKyAobGVuZ3RoIHx8IDApKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wibGVuZ3RoXCIgaXMgb3V0c2lkZSBvZiBidWZmZXIgYm91bmRzJylcbiAgfVxuXG4gIHZhciBidWZcbiAgaWYgKGJ5dGVPZmZzZXQgPT09IHVuZGVmaW5lZCAmJiBsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGFycmF5KVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYnVmID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQpXG4gIH0gZWxzZSB7XG4gICAgYnVmID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlXG4gIE9iamVjdC5zZXRQcm90b3R5cGVPZihidWYsIEJ1ZmZlci5wcm90b3R5cGUpXG5cbiAgcmV0dXJuIGJ1ZlxufVxuXG5mdW5jdGlvbiBmcm9tT2JqZWN0IChvYmopIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihvYmopKSB7XG4gICAgdmFyIGxlbiA9IGNoZWNrZWQob2JqLmxlbmd0aCkgfCAwXG4gICAgdmFyIGJ1ZiA9IGNyZWF0ZUJ1ZmZlcihsZW4pXG5cbiAgICBpZiAoYnVmLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGJ1ZlxuICAgIH1cblxuICAgIG9iai5jb3B5KGJ1ZiwgMCwgMCwgbGVuKVxuICAgIHJldHVybiBidWZcbiAgfVxuXG4gIGlmIChvYmoubGVuZ3RoICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAodHlwZW9mIG9iai5sZW5ndGggIT09ICdudW1iZXInIHx8IG51bWJlcklzTmFOKG9iai5sZW5ndGgpKSB7XG4gICAgICByZXR1cm4gY3JlYXRlQnVmZmVyKDApXG4gICAgfVxuICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKG9iailcbiAgfVxuXG4gIGlmIChvYmoudHlwZSA9PT0gJ0J1ZmZlcicgJiYgQXJyYXkuaXNBcnJheShvYmouZGF0YSkpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5TGlrZShvYmouZGF0YSlcbiAgfVxufVxuXG5mdW5jdGlvbiBjaGVja2VkIChsZW5ndGgpIHtcbiAgLy8gTm90ZTogY2Fubm90IHVzZSBgbGVuZ3RoIDwgS19NQVhfTEVOR1RIYCBoZXJlIGJlY2F1c2UgdGhhdCBmYWlscyB3aGVuXG4gIC8vIGxlbmd0aCBpcyBOYU4gKHdoaWNoIGlzIG90aGVyd2lzZSBjb2VyY2VkIHRvIHplcm8uKVxuICBpZiAobGVuZ3RoID49IEtfTUFYX0xFTkdUSCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIGFsbG9jYXRlIEJ1ZmZlciBsYXJnZXIgdGhhbiBtYXhpbXVtICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICdzaXplOiAweCcgKyBLX01BWF9MRU5HVEgudG9TdHJpbmcoMTYpICsgJyBieXRlcycpXG4gIH1cbiAgcmV0dXJuIGxlbmd0aCB8IDBcbn1cblxuZnVuY3Rpb24gU2xvd0J1ZmZlciAobGVuZ3RoKSB7XG4gIGlmICgrbGVuZ3RoICE9IGxlbmd0aCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgIGxlbmd0aCA9IDBcbiAgfVxuICByZXR1cm4gQnVmZmVyLmFsbG9jKCtsZW5ndGgpXG59XG5cbkJ1ZmZlci5pc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyIChiKSB7XG4gIHJldHVybiBiICE9IG51bGwgJiYgYi5faXNCdWZmZXIgPT09IHRydWUgJiZcbiAgICBiICE9PSBCdWZmZXIucHJvdG90eXBlIC8vIHNvIEJ1ZmZlci5pc0J1ZmZlcihCdWZmZXIucHJvdG90eXBlKSB3aWxsIGJlIGZhbHNlXG59XG5cbkJ1ZmZlci5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAoYSwgYikge1xuICBpZiAoaXNJbnN0YW5jZShhLCBVaW50OEFycmF5KSkgYSA9IEJ1ZmZlci5mcm9tKGEsIGEub2Zmc2V0LCBhLmJ5dGVMZW5ndGgpXG4gIGlmIChpc0luc3RhbmNlKGIsIFVpbnQ4QXJyYXkpKSBiID0gQnVmZmVyLmZyb20oYiwgYi5vZmZzZXQsIGIuYnl0ZUxlbmd0aClcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYSkgfHwgIUJ1ZmZlci5pc0J1ZmZlcihiKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAnVGhlIFwiYnVmMVwiLCBcImJ1ZjJcIiBhcmd1bWVudHMgbXVzdCBiZSBvbmUgb2YgdHlwZSBCdWZmZXIgb3IgVWludDhBcnJheSdcbiAgICApXG4gIH1cblxuICBpZiAoYSA9PT0gYikgcmV0dXJuIDBcblxuICB2YXIgeCA9IGEubGVuZ3RoXG4gIHZhciB5ID0gYi5sZW5ndGhcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gTWF0aC5taW4oeCwgeSk7IGkgPCBsZW47ICsraSkge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICB4ID0gYVtpXVxuICAgICAgeSA9IGJbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG5CdWZmZXIuaXNFbmNvZGluZyA9IGZ1bmN0aW9uIGlzRW5jb2RpbmcgKGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5CdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0IChsaXN0LCBsZW5ndGgpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGxpc3QpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBCdWZmZXIuYWxsb2MoMClcbiAgfVxuXG4gIHZhciBpXG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGxlbmd0aCA9IDBcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgbGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgdmFyIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW5ndGgpXG4gIHZhciBwb3MgPSAwXG4gIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGJ1ZiA9IGxpc3RbaV1cbiAgICBpZiAoaXNJbnN0YW5jZShidWYsIFVpbnQ4QXJyYXkpKSB7XG4gICAgICBidWYgPSBCdWZmZXIuZnJvbShidWYpXG4gICAgfVxuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gICAgfVxuICAgIGJ1Zi5jb3B5KGJ1ZmZlciwgcG9zKVxuICAgIHBvcyArPSBidWYubGVuZ3RoXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlclxufVxuXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoc3RyaW5nKSkge1xuICAgIHJldHVybiBzdHJpbmcubGVuZ3RoXG4gIH1cbiAgaWYgKEFycmF5QnVmZmVyLmlzVmlldyhzdHJpbmcpIHx8IGlzSW5zdGFuY2Uoc3RyaW5nLCBBcnJheUJ1ZmZlcikpIHtcbiAgICByZXR1cm4gc3RyaW5nLmJ5dGVMZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ1RoZSBcInN0cmluZ1wiIGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgc3RyaW5nLCBCdWZmZXIsIG9yIEFycmF5QnVmZmVyLiAnICtcbiAgICAgICdSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2Ygc3RyaW5nXG4gICAgKVxuICB9XG5cbiAgdmFyIGxlbiA9IHN0cmluZy5sZW5ndGhcbiAgdmFyIG11c3RNYXRjaCA9IChhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gPT09IHRydWUpXG4gIGlmICghbXVzdE1hdGNoICYmIGxlbiA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBVc2UgYSBmb3IgbG9vcCB0byBhdm9pZCByZWN1cnNpb25cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGVuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gbGVuICogMlxuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGxlbiA+Pj4gMVxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkge1xuICAgICAgICAgIHJldHVybiBtdXN0TWF0Y2ggPyAtMSA6IHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoIC8vIGFzc3VtZSB1dGY4XG4gICAgICAgIH1cbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cbkJ1ZmZlci5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuXG5mdW5jdGlvbiBzbG93VG9TdHJpbmcgKGVuY29kaW5nLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG5cbiAgLy8gTm8gbmVlZCB0byB2ZXJpZnkgdGhhdCBcInRoaXMubGVuZ3RoIDw9IE1BWF9VSU5UMzJcIiBzaW5jZSBpdCdzIGEgcmVhZC1vbmx5XG4gIC8vIHByb3BlcnR5IG9mIGEgdHlwZWQgYXJyYXkuXG5cbiAgLy8gVGhpcyBiZWhhdmVzIG5laXRoZXIgbGlrZSBTdHJpbmcgbm9yIFVpbnQ4QXJyYXkgaW4gdGhhdCB3ZSBzZXQgc3RhcnQvZW5kXG4gIC8vIHRvIHRoZWlyIHVwcGVyL2xvd2VyIGJvdW5kcyBpZiB0aGUgdmFsdWUgcGFzc2VkIGlzIG91dCBvZiByYW5nZS5cbiAgLy8gdW5kZWZpbmVkIGlzIGhhbmRsZWQgc3BlY2lhbGx5IGFzIHBlciBFQ01BLTI2MiA2dGggRWRpdGlvbixcbiAgLy8gU2VjdGlvbiAxMy4zLjMuNyBSdW50aW1lIFNlbWFudGljczogS2V5ZWRCaW5kaW5nSW5pdGlhbGl6YXRpb24uXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkIHx8IHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIC8vIFJldHVybiBlYXJseSBpZiBzdGFydCA+IHRoaXMubGVuZ3RoLiBEb25lIGhlcmUgdG8gcHJldmVudCBwb3RlbnRpYWwgdWludDMyXG4gIC8vIGNvZXJjaW9uIGZhaWwgYmVsb3cuXG4gIGlmIChzdGFydCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKGVuZCA8PSAwKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICAvLyBGb3JjZSBjb2Vyc2lvbiB0byB1aW50MzIuIFRoaXMgd2lsbCBhbHNvIGNvZXJjZSBmYWxzZXkvTmFOIHZhbHVlcyB0byAwLlxuICBlbmQgPj4+PSAwXG4gIHN0YXJ0ID4+Pj0gMFxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdXRmMTZsZVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9IChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG4vLyBUaGlzIHByb3BlcnR5IGlzIHVzZWQgYnkgYEJ1ZmZlci5pc0J1ZmZlcmAgKGFuZCB0aGUgYGlzLWJ1ZmZlcmAgbnBtIHBhY2thZ2UpXG4vLyB0byBkZXRlY3QgYSBCdWZmZXIgaW5zdGFuY2UuIEl0J3Mgbm90IHBvc3NpYmxlIHRvIHVzZSBgaW5zdGFuY2VvZiBCdWZmZXJgXG4vLyByZWxpYWJseSBpbiBhIGJyb3dzZXJpZnkgY29udGV4dCBiZWNhdXNlIHRoZXJlIGNvdWxkIGJlIG11bHRpcGxlIGRpZmZlcmVudFxuLy8gY29waWVzIG9mIHRoZSAnYnVmZmVyJyBwYWNrYWdlIGluIHVzZS4gVGhpcyBtZXRob2Qgd29ya3MgZXZlbiBmb3IgQnVmZmVyXG4vLyBpbnN0YW5jZXMgdGhhdCB3ZXJlIGNyZWF0ZWQgZnJvbSBhbm90aGVyIGNvcHkgb2YgdGhlIGBidWZmZXJgIHBhY2thZ2UuXG4vLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL2lzc3Vlcy8xNTRcbkJ1ZmZlci5wcm90b3R5cGUuX2lzQnVmZmVyID0gdHJ1ZVxuXG5mdW5jdGlvbiBzd2FwIChiLCBuLCBtKSB7XG4gIHZhciBpID0gYltuXVxuICBiW25dID0gYlttXVxuICBiW21dID0gaVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAxNiA9IGZ1bmN0aW9uIHN3YXAxNiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgMiAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMTYtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDEpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMzIgPSBmdW5jdGlvbiBzd2FwMzIgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDQgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMyLWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAzKVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyAyKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDY0ID0gZnVuY3Rpb24gc3dhcDY0ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA4ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA2NC1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA4KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgNylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgNilcbiAgICBzd2FwKHRoaXMsIGkgKyAyLCBpICsgNSlcbiAgICBzd2FwKHRoaXMsIGkgKyAzLCBpICsgNClcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbmd0aCA9PT0gMCkgcmV0dXJuICcnXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIDAsIGxlbmd0aClcbiAgcmV0dXJuIHNsb3dUb1N0cmluZy5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9Mb2NhbGVTdHJpbmcgPSBCdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nXG5cbkJ1ZmZlci5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzIChiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgaWYgKHRoaXMgPT09IGIpIHJldHVybiB0cnVlXG4gIHJldHVybiBCdWZmZXIuY29tcGFyZSh0aGlzLCBiKSA9PT0gMFxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgdmFyIHN0ciA9ICcnXG4gIHZhciBtYXggPSBleHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTXG4gIHN0ciA9IHRoaXMudG9TdHJpbmcoJ2hleCcsIDAsIG1heCkucmVwbGFjZSgvKC57Mn0pL2csICckMSAnKS50cmltKClcbiAgaWYgKHRoaXMubGVuZ3RoID4gbWF4KSBzdHIgKz0gJyAuLi4gJ1xuICByZXR1cm4gJzxCdWZmZXIgJyArIHN0ciArICc+J1xufVxuaWYgKGN1c3RvbUluc3BlY3RTeW1ib2wpIHtcbiAgQnVmZmVyLnByb3RvdHlwZVtjdXN0b21JbnNwZWN0U3ltYm9sXSA9IEJ1ZmZlci5wcm90b3R5cGUuaW5zcGVjdFxufVxuXG5CdWZmZXIucHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlICh0YXJnZXQsIHN0YXJ0LCBlbmQsIHRoaXNTdGFydCwgdGhpc0VuZCkge1xuICBpZiAoaXNJbnN0YW5jZSh0YXJnZXQsIFVpbnQ4QXJyYXkpKSB7XG4gICAgdGFyZ2V0ID0gQnVmZmVyLmZyb20odGFyZ2V0LCB0YXJnZXQub2Zmc2V0LCB0YXJnZXQuYnl0ZUxlbmd0aClcbiAgfVxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0YXJnZXQpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICdUaGUgXCJ0YXJnZXRcIiBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIEJ1ZmZlciBvciBVaW50OEFycmF5LiAnICtcbiAgICAgICdSZWNlaXZlZCB0eXBlICcgKyAodHlwZW9mIHRhcmdldClcbiAgICApXG4gIH1cblxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuZCA9IHRhcmdldCA/IHRhcmdldC5sZW5ndGggOiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc1N0YXJ0ID0gMFxuICB9XG4gIGlmICh0aGlzRW5kID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzRW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChzdGFydCA8IDAgfHwgZW5kID4gdGFyZ2V0Lmxlbmd0aCB8fCB0aGlzU3RhcnQgPCAwIHx8IHRoaXNFbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdvdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kICYmIHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kKSB7XG4gICAgcmV0dXJuIC0xXG4gIH1cbiAgaWYgKHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAxXG4gIH1cblxuICBzdGFydCA+Pj49IDBcbiAgZW5kID4+Pj0gMFxuICB0aGlzU3RhcnQgPj4+PSAwXG4gIHRoaXNFbmQgPj4+PSAwXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCkgcmV0dXJuIDBcblxuICB2YXIgeCA9IHRoaXNFbmQgLSB0aGlzU3RhcnRcbiAgdmFyIHkgPSBlbmQgLSBzdGFydFxuICB2YXIgbGVuID0gTWF0aC5taW4oeCwgeSlcblxuICB2YXIgdGhpc0NvcHkgPSB0aGlzLnNsaWNlKHRoaXNTdGFydCwgdGhpc0VuZClcbiAgdmFyIHRhcmdldENvcHkgPSB0YXJnZXQuc2xpY2Uoc3RhcnQsIGVuZClcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKHRoaXNDb3B5W2ldICE9PSB0YXJnZXRDb3B5W2ldKSB7XG4gICAgICB4ID0gdGhpc0NvcHlbaV1cbiAgICAgIHkgPSB0YXJnZXRDb3B5W2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuLy8gRmluZHMgZWl0aGVyIHRoZSBmaXJzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPj0gYGJ5dGVPZmZzZXRgLFxuLy8gT1IgdGhlIGxhc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0IDw9IGBieXRlT2Zmc2V0YC5cbi8vXG4vLyBBcmd1bWVudHM6XG4vLyAtIGJ1ZmZlciAtIGEgQnVmZmVyIHRvIHNlYXJjaFxuLy8gLSB2YWwgLSBhIHN0cmluZywgQnVmZmVyLCBvciBudW1iZXJcbi8vIC0gYnl0ZU9mZnNldCAtIGFuIGluZGV4IGludG8gYGJ1ZmZlcmA7IHdpbGwgYmUgY2xhbXBlZCB0byBhbiBpbnQzMlxuLy8gLSBlbmNvZGluZyAtIGFuIG9wdGlvbmFsIGVuY29kaW5nLCByZWxldmFudCBpcyB2YWwgaXMgYSBzdHJpbmdcbi8vIC0gZGlyIC0gdHJ1ZSBmb3IgaW5kZXhPZiwgZmFsc2UgZm9yIGxhc3RJbmRleE9mXG5mdW5jdGlvbiBiaWRpcmVjdGlvbmFsSW5kZXhPZiAoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgLy8gRW1wdHkgYnVmZmVyIG1lYW5zIG5vIG1hdGNoXG4gIGlmIChidWZmZXIubGVuZ3RoID09PSAwKSByZXR1cm4gLTFcblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldFxuICBpZiAodHlwZW9mIGJ5dGVPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBieXRlT2Zmc2V0XG4gICAgYnl0ZU9mZnNldCA9IDBcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0ID4gMHg3ZmZmZmZmZikge1xuICAgIGJ5dGVPZmZzZXQgPSAweDdmZmZmZmZmXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IC0weDgwMDAwMDAwKSB7XG4gICAgYnl0ZU9mZnNldCA9IC0weDgwMDAwMDAwXG4gIH1cbiAgYnl0ZU9mZnNldCA9ICtieXRlT2Zmc2V0IC8vIENvZXJjZSB0byBOdW1iZXIuXG4gIGlmIChudW1iZXJJc05hTihieXRlT2Zmc2V0KSkge1xuICAgIC8vIGJ5dGVPZmZzZXQ6IGl0IGl0J3MgdW5kZWZpbmVkLCBudWxsLCBOYU4sIFwiZm9vXCIsIGV0Yywgc2VhcmNoIHdob2xlIGJ1ZmZlclxuICAgIGJ5dGVPZmZzZXQgPSBkaXIgPyAwIDogKGJ1ZmZlci5sZW5ndGggLSAxKVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXQ6IG5lZ2F0aXZlIG9mZnNldHMgc3RhcnQgZnJvbSB0aGUgZW5kIG9mIHRoZSBidWZmZXJcbiAgaWYgKGJ5dGVPZmZzZXQgPCAwKSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCArIGJ5dGVPZmZzZXRcbiAgaWYgKGJ5dGVPZmZzZXQgPj0gYnVmZmVyLmxlbmd0aCkge1xuICAgIGlmIChkaXIpIHJldHVybiAtMVxuICAgIGVsc2UgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggLSAxXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IDApIHtcbiAgICBpZiAoZGlyKSBieXRlT2Zmc2V0ID0gMFxuICAgIGVsc2UgcmV0dXJuIC0xXG4gIH1cblxuICAvLyBOb3JtYWxpemUgdmFsXG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHZhbCA9IEJ1ZmZlci5mcm9tKHZhbCwgZW5jb2RpbmcpXG4gIH1cblxuICAvLyBGaW5hbGx5LCBzZWFyY2ggZWl0aGVyIGluZGV4T2YgKGlmIGRpciBpcyB0cnVlKSBvciBsYXN0SW5kZXhPZlxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbCkpIHtcbiAgICAvLyBTcGVjaWFsIGNhc2U6IGxvb2tpbmcgZm9yIGVtcHR5IHN0cmluZy9idWZmZXIgYWx3YXlzIGZhaWxzXG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiAtMVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMHhGRiAvLyBTZWFyY2ggZm9yIGEgYnl0ZSB2YWx1ZSBbMC0yNTVdXG4gICAgaWYgKHR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAoZGlyKSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIFt2YWxdLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmFsIG11c3QgYmUgc3RyaW5nLCBudW1iZXIgb3IgQnVmZmVyJylcbn1cblxuZnVuY3Rpb24gYXJyYXlJbmRleE9mIChhcnIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICB2YXIgaW5kZXhTaXplID0gMVxuICB2YXIgYXJyTGVuZ3RoID0gYXJyLmxlbmd0aFxuICB2YXIgdmFsTGVuZ3RoID0gdmFsLmxlbmd0aFxuXG4gIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSBTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICBpZiAoZW5jb2RpbmcgPT09ICd1Y3MyJyB8fCBlbmNvZGluZyA9PT0gJ3Vjcy0yJyB8fFxuICAgICAgICBlbmNvZGluZyA9PT0gJ3V0ZjE2bGUnIHx8IGVuY29kaW5nID09PSAndXRmLTE2bGUnKSB7XG4gICAgICBpZiAoYXJyLmxlbmd0aCA8IDIgfHwgdmFsLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIC0xXG4gICAgICB9XG4gICAgICBpbmRleFNpemUgPSAyXG4gICAgICBhcnJMZW5ndGggLz0gMlxuICAgICAgdmFsTGVuZ3RoIC89IDJcbiAgICAgIGJ5dGVPZmZzZXQgLz0gMlxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWQgKGJ1ZiwgaSkge1xuICAgIGlmIChpbmRleFNpemUgPT09IDEpIHtcbiAgICAgIHJldHVybiBidWZbaV1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGJ1Zi5yZWFkVUludDE2QkUoaSAqIGluZGV4U2l6ZSlcbiAgICB9XG4gIH1cblxuICB2YXIgaVxuICBpZiAoZGlyKSB7XG4gICAgdmFyIGZvdW5kSW5kZXggPSAtMVxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPCBhcnJMZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHJlYWQoYXJyLCBpKSA9PT0gcmVhZCh2YWwsIGZvdW5kSW5kZXggPT09IC0xID8gMCA6IGkgLSBmb3VuZEluZGV4KSkge1xuICAgICAgICBpZiAoZm91bmRJbmRleCA9PT0gLTEpIGZvdW5kSW5kZXggPSBpXG4gICAgICAgIGlmIChpIC0gZm91bmRJbmRleCArIDEgPT09IHZhbExlbmd0aCkgcmV0dXJuIGZvdW5kSW5kZXggKiBpbmRleFNpemVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ICE9PSAtMSkgaSAtPSBpIC0gZm91bmRJbmRleFxuICAgICAgICBmb3VuZEluZGV4ID0gLTFcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGJ5dGVPZmZzZXQgKyB2YWxMZW5ndGggPiBhcnJMZW5ndGgpIGJ5dGVPZmZzZXQgPSBhcnJMZW5ndGggLSB2YWxMZW5ndGhcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGZvdW5kID0gdHJ1ZVxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWxMZW5ndGg7IGorKykge1xuICAgICAgICBpZiAocmVhZChhcnIsIGkgKyBqKSAhPT0gcmVhZCh2YWwsIGopKSB7XG4gICAgICAgICAgZm91bmQgPSBmYWxzZVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChmb3VuZCkgcmV0dXJuIGlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmNsdWRlcyA9IGZ1bmN0aW9uIGluY2x1ZGVzICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiB0aGlzLmluZGV4T2YodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykgIT09IC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIHRydWUpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUubGFzdEluZGV4T2YgPSBmdW5jdGlvbiBsYXN0SW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZmFsc2UpXG59XG5cbmZ1bmN0aW9uIGhleFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgb2Zmc2V0ID0gTnVtYmVyKG9mZnNldCkgfHwgMFxuICB2YXIgcmVtYWluaW5nID0gYnVmLmxlbmd0aCAtIG9mZnNldFxuICBpZiAoIWxlbmd0aCkge1xuICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9IE51bWJlcihsZW5ndGgpXG4gICAgaWYgKGxlbmd0aCA+IHJlbWFpbmluZykge1xuICAgICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gICAgfVxuICB9XG5cbiAgdmFyIHN0ckxlbiA9IHN0cmluZy5sZW5ndGhcblxuICBpZiAobGVuZ3RoID4gc3RyTGVuIC8gMikge1xuICAgIGxlbmd0aCA9IHN0ckxlbiAvIDJcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgdmFyIHBhcnNlZCA9IHBhcnNlSW50KHN0cmluZy5zdWJzdHIoaSAqIDIsIDIpLCAxNilcbiAgICBpZiAobnVtYmVySXNOYU4ocGFyc2VkKSkgcmV0dXJuIGlcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSBwYXJzZWRcbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiB1dGY4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGY4VG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBhc2NpaVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYXNjaWlUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGxhdGluMVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGFzY2lpV3JpdGUoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBiYXNlNjRXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGJhc2U2NFRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gdWNzMldyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmMTZsZVRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIHdyaXRlIChzdHJpbmcsIG9mZnNldCwgbGVuZ3RoLCBlbmNvZGluZykge1xuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nKVxuICBpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBlbmNvZGluZylcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gb2Zmc2V0XG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIG9mZnNldFssIGxlbmd0aF1bLCBlbmNvZGluZ10pXG4gIH0gZWxzZSBpZiAoaXNGaW5pdGUob2Zmc2V0KSkge1xuICAgIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBsZW5ndGggPSBsZW5ndGggPj4+IDBcbiAgICAgIGlmIChlbmNvZGluZyA9PT0gdW5kZWZpbmVkKSBlbmNvZGluZyA9ICd1dGY4J1xuICAgIH0gZWxzZSB7XG4gICAgICBlbmNvZGluZyA9IGxlbmd0aFxuICAgICAgbGVuZ3RoID0gdW5kZWZpbmVkXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCdcbiAgICApXG4gIH1cblxuICB2YXIgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IGxlbmd0aCA+IHJlbWFpbmluZykgbGVuZ3RoID0gcmVtYWluaW5nXG5cbiAgaWYgKChzdHJpbmcubGVuZ3RoID4gMCAmJiAobGVuZ3RoIDwgMCB8fCBvZmZzZXQgPCAwKSkgfHwgb2Zmc2V0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byB3cml0ZSBvdXRzaWRlIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICAvLyBXYXJuaW5nOiBtYXhMZW5ndGggbm90IHRha2VuIGludG8gYWNjb3VudCBpbiBiYXNlNjRXcml0ZVxuICAgICAgICByZXR1cm4gYmFzZTY0V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHVjczJXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdCdWZmZXInLFxuICAgIGRhdGE6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2FyciB8fCB0aGlzLCAwKVxuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSlcbiAgfVxufVxuXG5mdW5jdGlvbiB1dGY4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG4gIHZhciByZXMgPSBbXVxuXG4gIHZhciBpID0gc3RhcnRcbiAgd2hpbGUgKGkgPCBlbmQpIHtcbiAgICB2YXIgZmlyc3RCeXRlID0gYnVmW2ldXG4gICAgdmFyIGNvZGVQb2ludCA9IG51bGxcbiAgICB2YXIgYnl0ZXNQZXJTZXF1ZW5jZSA9IChmaXJzdEJ5dGUgPiAweEVGKSA/IDRcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4REYpID8gM1xuICAgICAgICA6IChmaXJzdEJ5dGUgPiAweEJGKSA/IDJcbiAgICAgICAgICA6IDFcblxuICAgIGlmIChpICsgYnl0ZXNQZXJTZXF1ZW5jZSA8PSBlbmQpIHtcbiAgICAgIHZhciBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnRcblxuICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAoZmlyc3RCeXRlIDwgMHg4MCkge1xuICAgICAgICAgICAgY29kZVBvaW50ID0gZmlyc3RCeXRlXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IChzZWNvbmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3Rikge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweEMgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4NiB8ICh0aGlyZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGRiAmJiAodGVtcENvZGVQb2ludCA8IDB4RDgwMCB8fCB0ZW1wQ29kZVBvaW50ID4gMHhERkZGKSkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAoZm91cnRoQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IChmb3VydGhCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHhGRkZGICYmIHRlbXBDb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHtcbiAgICAgIC8vIHdlIGRpZCBub3QgZ2VuZXJhdGUgYSB2YWxpZCBjb2RlUG9pbnQgc28gaW5zZXJ0IGFcbiAgICAgIC8vIHJlcGxhY2VtZW50IGNoYXIgKFUrRkZGRCkgYW5kIGFkdmFuY2Ugb25seSAxIGJ5dGVcbiAgICAgIGNvZGVQb2ludCA9IDB4RkZGRFxuICAgICAgYnl0ZXNQZXJTZXF1ZW5jZSA9IDFcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikge1xuICAgICAgLy8gZW5jb2RlIHRvIHV0ZjE2IChzdXJyb2dhdGUgcGFpciBkYW5jZSlcbiAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwXG4gICAgICByZXMucHVzaChjb2RlUG9pbnQgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApXG4gICAgICBjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRlxuICAgIH1cblxuICAgIHJlcy5wdXNoKGNvZGVQb2ludClcbiAgICBpICs9IGJ5dGVzUGVyU2VxdWVuY2VcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKVxufVxuXG4vLyBCYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjc0NzI3Mi82ODA3NDIsIHRoZSBicm93c2VyIHdpdGhcbi8vIHRoZSBsb3dlc3QgbGltaXQgaXMgQ2hyb21lLCB3aXRoIDB4MTAwMDAgYXJncy5cbi8vIFdlIGdvIDEgbWFnbml0dWRlIGxlc3MsIGZvciBzYWZldHlcbnZhciBNQVhfQVJHVU1FTlRTX0xFTkdUSCA9IDB4MTAwMFxuXG5mdW5jdGlvbiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkgKGNvZGVQb2ludHMpIHtcbiAgdmFyIGxlbiA9IGNvZGVQb2ludHMubGVuZ3RoXG4gIGlmIChsZW4gPD0gTUFYX0FSR1VNRU5UU19MRU5HVEgpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNvZGVQb2ludHMpIC8vIGF2b2lkIGV4dHJhIHNsaWNlKClcbiAgfVxuXG4gIC8vIERlY29kZSBpbiBjaHVua3MgdG8gYXZvaWQgXCJjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIi5cbiAgdmFyIHJlcyA9ICcnXG4gIHZhciBpID0gMFxuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFxuICAgICAgU3RyaW5nLFxuICAgICAgY29kZVBvaW50cy5zbGljZShpLCBpICs9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKVxuICAgIClcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldICYgMHg3RilcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGxhdGluMVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGhleFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblxuICB2YXIgb3V0ID0gJydcbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICBvdXQgKz0gaGV4U2xpY2VMb29rdXBUYWJsZVtidWZbaV1dXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiB1dGYxNmxlU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgYnl0ZXMgPSBidWYuc2xpY2Uoc3RhcnQsIGVuZClcbiAgdmFyIHJlcyA9ICcnXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSArIChieXRlc1tpICsgMV0gKiAyNTYpKVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIHNsaWNlIChzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBzdGFydCA9IH5+c3RhcnRcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB+fmVuZFxuXG4gIGlmIChzdGFydCA8IDApIHtcbiAgICBzdGFydCArPSBsZW5cbiAgICBpZiAoc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgfSBlbHNlIGlmIChzdGFydCA+IGxlbikge1xuICAgIHN0YXJ0ID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgMCkge1xuICAgIGVuZCArPSBsZW5cbiAgICBpZiAoZW5kIDwgMCkgZW5kID0gMFxuICB9IGVsc2UgaWYgKGVuZCA+IGxlbikge1xuICAgIGVuZCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIHZhciBuZXdCdWYgPSB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpXG4gIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlXG4gIE9iamVjdC5zZXRQcm90b3R5cGVPZihuZXdCdWYsIEJ1ZmZlci5wcm90b3R5cGUpXG5cbiAgcmV0dXJuIG5ld0J1ZlxufVxuXG4vKlxuICogTmVlZCB0byBtYWtlIHN1cmUgdGhhdCBidWZmZXIgaXNuJ3QgdHJ5aW5nIHRvIHdyaXRlIG91dCBvZiBib3VuZHMuXG4gKi9cbmZ1bmN0aW9uIGNoZWNrT2Zmc2V0IChvZmZzZXQsIGV4dCwgbGVuZ3RoKSB7XG4gIGlmICgob2Zmc2V0ICUgMSkgIT09IDAgfHwgb2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ29mZnNldCBpcyBub3QgdWludCcpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBsZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdUcnlpbmcgdG8gYWNjZXNzIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludExFID0gZnVuY3Rpb24gcmVhZFVJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRCRSA9IGZ1bmN0aW9uIHJlYWRVSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuICB9XG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXVxuICB2YXIgbXVsID0gMVxuICB3aGlsZSAoYnl0ZUxlbmd0aCA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQ4ID0gZnVuY3Rpb24gcmVhZFVJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkxFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2QkUgPSBmdW5jdGlvbiByZWFkVUludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDgpIHwgdGhpc1tvZmZzZXQgKyAxXVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKCh0aGlzW29mZnNldF0pIHxcbiAgICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSkgK1xuICAgICAgKHRoaXNbb2Zmc2V0ICsgM10gKiAweDEwMDAwMDApXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkJFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdICogMHgxMDAwMDAwKSArXG4gICAgKCh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgIHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gcmVhZEludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRCRSA9IGZ1bmN0aW9uIHJlYWRJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgaSA9IGJ5dGVMZW5ndGhcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1pXVxuICB3aGlsZSAoaSA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50OCA9IGZ1bmN0aW9uIHJlYWRJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICBpZiAoISh0aGlzW29mZnNldF0gJiAweDgwKSkgcmV0dXJuICh0aGlzW29mZnNldF0pXG4gIHJldHVybiAoKDB4ZmYgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gcmVhZEludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2QkUgPSBmdW5jdGlvbiByZWFkSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgMV0gfCAodGhpc1tvZmZzZXRdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdKSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10gPDwgMjQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyQkUgPSBmdW5jdGlvbiByZWFkSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCAyNCkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdExFID0gZnVuY3Rpb24gcmVhZEZsb2F0TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRCRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdEJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVMRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDUyLCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVCRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCA1MiwgOClcbn1cblxuZnVuY3Rpb24gY2hlY2tJbnQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJ1ZmZlclwiIGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIgaW5zdGFuY2UnKVxuICBpZiAodmFsdWUgPiBtYXggfHwgdmFsdWUgPCBtaW4pIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgaXMgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlVUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDggPSBmdW5jdGlvbiB3cml0ZVVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHhmZiwgMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludExFID0gZnVuY3Rpb24gd3JpdGVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCAoOCAqIGJ5dGVMZW5ndGgpIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgdmFyIGkgPSAwXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSAtIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgKDggKiBieXRlTGVuZ3RoKSAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgKyAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50OCA9IGZ1bmN0aW9uIHdyaXRlSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4N2YsIC0weDgwKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmYgKyB2YWx1ZSArIDFcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbmZ1bmN0aW9uIGNoZWNrSUVFRTc1NCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbiAgaWYgKG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5mdW5jdGlvbiB3cml0ZUZsb2F0IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA0LCAzLjQwMjgyMzQ2NjM4NTI4ODZlKzM4LCAtMy40MDI4MjM0NjYzODUyODg2ZSszOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCAyMywgNClcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0TEUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRCRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5mdW5jdGlvbiB3cml0ZURvdWJsZSAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgOCwgMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgsIC0xLjc5NzY5MzEzNDg2MjMxNTdFKzMwOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCA1MiwgOClcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlQkUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG4vLyBjb3B5KHRhcmdldEJ1ZmZlciwgdGFyZ2V0U3RhcnQ9MCwgc291cmNlU3RhcnQ9MCwgc291cmNlRW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5ICh0YXJnZXQsIHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHRhcmdldCkpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FyZ3VtZW50IHNob3VsZCBiZSBhIEJ1ZmZlcicpXG4gIGlmICghc3RhcnQpIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXRTdGFydCA+PSB0YXJnZXQubGVuZ3RoKSB0YXJnZXRTdGFydCA9IHRhcmdldC5sZW5ndGhcbiAgaWYgKCF0YXJnZXRTdGFydCkgdGFyZ2V0U3RhcnQgPSAwXG4gIGlmIChlbmQgPiAwICYmIGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZVxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuIDBcbiAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgdGhpcy5sZW5ndGggPT09IDApIHJldHVybiAwXG5cbiAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9uc1xuICBpZiAodGFyZ2V0U3RhcnQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICB9XG4gIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuICBpZiAoZW5kIDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZUVuZCBvdXQgb2YgYm91bmRzJylcblxuICAvLyBBcmUgd2Ugb29iP1xuICBpZiAoZW5kID4gdGhpcy5sZW5ndGgpIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgPCBlbmQgLSBzdGFydCkge1xuICAgIGVuZCA9IHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCArIHN0YXJ0XG4gIH1cblxuICB2YXIgbGVuID0gZW5kIC0gc3RhcnRcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0ICYmIHR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gVXNlIGJ1aWx0LWluIHdoZW4gYXZhaWxhYmxlLCBtaXNzaW5nIGZyb20gSUUxMVxuICAgIHRoaXMuY29weVdpdGhpbih0YXJnZXRTdGFydCwgc3RhcnQsIGVuZClcbiAgfSBlbHNlIGlmICh0aGlzID09PSB0YXJnZXQgJiYgc3RhcnQgPCB0YXJnZXRTdGFydCAmJiB0YXJnZXRTdGFydCA8IGVuZCkge1xuICAgIC8vIGRlc2NlbmRpbmcgY29weSBmcm9tIGVuZFxuICAgIGZvciAodmFyIGkgPSBsZW4gLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoXG4gICAgICB0YXJnZXQsXG4gICAgICB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpLFxuICAgICAgdGFyZ2V0U3RhcnRcbiAgICApXG4gIH1cblxuICByZXR1cm4gbGVuXG59XG5cbi8vIFVzYWdlOlxuLy8gICAgYnVmZmVyLmZpbGwobnVtYmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChidWZmZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKHN0cmluZ1ssIG9mZnNldFssIGVuZF1dWywgZW5jb2RpbmddKVxuQnVmZmVyLnByb3RvdHlwZS5maWxsID0gZnVuY3Rpb24gZmlsbCAodmFsLCBzdGFydCwgZW5kLCBlbmNvZGluZykge1xuICAvLyBIYW5kbGUgc3RyaW5nIGNhc2VzOlxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAodHlwZW9mIHN0YXJ0ID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBzdGFydFxuICAgICAgc3RhcnQgPSAwXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGVuZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gZW5kXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH1cbiAgICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdlbmNvZGluZyBtdXN0IGJlIGEgc3RyaW5nJylcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycgJiYgIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgIH1cbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdmFyIGNvZGUgPSB2YWwuY2hhckNvZGVBdCgwKVxuICAgICAgaWYgKChlbmNvZGluZyA9PT0gJ3V0ZjgnICYmIGNvZGUgPCAxMjgpIHx8XG4gICAgICAgICAgZW5jb2RpbmcgPT09ICdsYXRpbjEnKSB7XG4gICAgICAgIC8vIEZhc3QgcGF0aDogSWYgYHZhbGAgZml0cyBpbnRvIGEgc2luZ2xlIGJ5dGUsIHVzZSB0aGF0IG51bWVyaWMgdmFsdWUuXG4gICAgICAgIHZhbCA9IGNvZGVcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAyNTVcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnYm9vbGVhbicpIHtcbiAgICB2YWwgPSBOdW1iZXIodmFsKVxuICB9XG5cbiAgLy8gSW52YWxpZCByYW5nZXMgYXJlIG5vdCBzZXQgdG8gYSBkZWZhdWx0LCBzbyBjYW4gcmFuZ2UgY2hlY2sgZWFybHkuXG4gIGlmIChzdGFydCA8IDAgfHwgdGhpcy5sZW5ndGggPCBzdGFydCB8fCB0aGlzLmxlbmd0aCA8IGVuZCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdPdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBzdGFydCA9IHN0YXJ0ID4+PiAwXG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gdGhpcy5sZW5ndGggOiBlbmQgPj4+IDBcblxuICBpZiAoIXZhbCkgdmFsID0gMFxuXG4gIHZhciBpXG4gIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICAgIHRoaXNbaV0gPSB2YWxcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGJ5dGVzID0gQnVmZmVyLmlzQnVmZmVyKHZhbClcbiAgICAgID8gdmFsXG4gICAgICA6IEJ1ZmZlci5mcm9tKHZhbCwgZW5jb2RpbmcpXG4gICAgdmFyIGxlbiA9IGJ5dGVzLmxlbmd0aFxuICAgIGlmIChsZW4gPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSB2YWx1ZSBcIicgKyB2YWwgK1xuICAgICAgICAnXCIgaXMgaW52YWxpZCBmb3IgYXJndW1lbnQgXCJ2YWx1ZVwiJylcbiAgICB9XG4gICAgZm9yIChpID0gMDsgaSA8IGVuZCAtIHN0YXJ0OyArK2kpIHtcbiAgICAgIHRoaXNbaSArIHN0YXJ0XSA9IGJ5dGVzW2kgJSBsZW5dXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuLy8gSEVMUEVSIEZVTkNUSU9OU1xuLy8gPT09PT09PT09PT09PT09PVxuXG52YXIgSU5WQUxJRF9CQVNFNjRfUkUgPSAvW14rLzAtOUEtWmEtei1fXS9nXG5cbmZ1bmN0aW9uIGJhc2U2NGNsZWFuIChzdHIpIHtcbiAgLy8gTm9kZSB0YWtlcyBlcXVhbCBzaWducyBhcyBlbmQgb2YgdGhlIEJhc2U2NCBlbmNvZGluZ1xuICBzdHIgPSBzdHIuc3BsaXQoJz0nKVswXVxuICAvLyBOb2RlIHN0cmlwcyBvdXQgaW52YWxpZCBjaGFyYWN0ZXJzIGxpa2UgXFxuIGFuZCBcXHQgZnJvbSB0aGUgc3RyaW5nLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgc3RyID0gc3RyLnRyaW0oKS5yZXBsYWNlKElOVkFMSURfQkFTRTY0X1JFLCAnJylcbiAgLy8gTm9kZSBjb252ZXJ0cyBzdHJpbmdzIHdpdGggbGVuZ3RoIDwgMiB0byAnJ1xuICBpZiAoc3RyLmxlbmd0aCA8IDIpIHJldHVybiAnJ1xuICAvLyBOb2RlIGFsbG93cyBmb3Igbm9uLXBhZGRlZCBiYXNlNjQgc3RyaW5ncyAobWlzc2luZyB0cmFpbGluZyA9PT0pLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgd2hpbGUgKHN0ci5sZW5ndGggJSA0ICE9PSAwKSB7XG4gICAgc3RyID0gc3RyICsgJz0nXG4gIH1cbiAgcmV0dXJuIHN0clxufVxuXG5mdW5jdGlvbiB1dGY4VG9CeXRlcyAoc3RyaW5nLCB1bml0cykge1xuICB1bml0cyA9IHVuaXRzIHx8IEluZmluaXR5XG4gIHZhciBjb2RlUG9pbnRcbiAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGhcbiAgdmFyIGxlYWRTdXJyb2dhdGUgPSBudWxsXG4gIHZhciBieXRlcyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXG5cbiAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50XG4gICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcbiAgICAgIC8vIGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgLy8gbm8gbGVhZCB5ZXRcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4REJGRikge1xuICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWxcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHZhbGlkIGxlYWRcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIDIgbGVhZHMgaW4gYSByb3dcbiAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHtcbiAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXJcbiAgICAgIGNvZGVQb2ludCA9IChsZWFkU3Vycm9nYXRlIC0gMHhEODAwIDw8IDEwIHwgY29kZVBvaW50IC0gMHhEQzAwKSArIDB4MTAwMDBcbiAgICB9IGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUpIHtcbiAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgIH1cblxuICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsXG5cbiAgICAvLyBlbmNvZGUgdXRmOFxuICAgIGlmIChjb2RlUG9pbnQgPCAweDgwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDEpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHgxMiB8IDB4RjAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLlxuICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRilcbiAgfVxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIsIHVuaXRzKSB7XG4gIHZhciBjLCBoaSwgbG9cbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG5cbiAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSlcbiAgICBoaSA9IGMgPj4gOFxuICAgIGxvID0gYyAlIDI1NlxuICAgIGJ5dGVBcnJheS5wdXNoKGxvKVxuICAgIGJ5dGVBcnJheS5wdXNoKGhpKVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiBiYXNlNjRUb0J5dGVzIChzdHIpIHtcbiAgcmV0dXJuIGJhc2U2NC50b0J5dGVBcnJheShiYXNlNjRjbGVhbihzdHIpKVxufVxuXG5mdW5jdGlvbiBibGl0QnVmZmVyIChzcmMsIGRzdCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSkgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV1cbiAgfVxuICByZXR1cm4gaVxufVxuXG4vLyBBcnJheUJ1ZmZlciBvciBVaW50OEFycmF5IG9iamVjdHMgZnJvbSBvdGhlciBjb250ZXh0cyAoaS5lLiBpZnJhbWVzKSBkbyBub3QgcGFzc1xuLy8gdGhlIGBpbnN0YW5jZW9mYCBjaGVjayBidXQgdGhleSBzaG91bGQgYmUgdHJlYXRlZCBhcyBvZiB0aGF0IHR5cGUuXG4vLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL2lzc3Vlcy8xNjZcbmZ1bmN0aW9uIGlzSW5zdGFuY2UgKG9iaiwgdHlwZSkge1xuICByZXR1cm4gb2JqIGluc3RhbmNlb2YgdHlwZSB8fFxuICAgIChvYmogIT0gbnVsbCAmJiBvYmouY29uc3RydWN0b3IgIT0gbnVsbCAmJiBvYmouY29uc3RydWN0b3IubmFtZSAhPSBudWxsICYmXG4gICAgICBvYmouY29uc3RydWN0b3IubmFtZSA9PT0gdHlwZS5uYW1lKVxufVxuZnVuY3Rpb24gbnVtYmVySXNOYU4gKG9iaikge1xuICAvLyBGb3IgSUUxMSBzdXBwb3J0XG4gIHJldHVybiBvYmogIT09IG9iaiAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxufVxuXG4vLyBDcmVhdGUgbG9va3VwIHRhYmxlIGZvciBgdG9TdHJpbmcoJ2hleCcpYFxuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9pc3N1ZXMvMjE5XG52YXIgaGV4U2xpY2VMb29rdXBUYWJsZSA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciBhbHBoYWJldCA9ICcwMTIzNDU2Nzg5YWJjZGVmJ1xuICB2YXIgdGFibGUgPSBuZXcgQXJyYXkoMjU2KVxuICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyArK2kpIHtcbiAgICB2YXIgaTE2ID0gaSAqIDE2XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCAxNjsgKytqKSB7XG4gICAgICB0YWJsZVtpMTYgKyBqXSA9IGFscGhhYmV0W2ldICsgYWxwaGFiZXRbal1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRhYmxlXG59KSgpXG4iLCJleHBvcnRzLnJlYWQgPSBmdW5jdGlvbiAoYnVmZmVyLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbVxuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgbkJpdHMgPSAtN1xuICB2YXIgaSA9IGlzTEUgPyAobkJ5dGVzIC0gMSkgOiAwXG4gIHZhciBkID0gaXNMRSA/IC0xIDogMVxuICB2YXIgcyA9IGJ1ZmZlcltvZmZzZXQgKyBpXVxuXG4gIGkgKz0gZFxuXG4gIGUgPSBzICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIHMgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IGVMZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IChlICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIG0gPSBlICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIGUgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IG1MZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IChtICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhc1xuICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbSA/IE5hTiA6ICgocyA/IC0xIDogMSkgKiBJbmZpbml0eSlcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIE1hdGgucG93KDIsIG1MZW4pXG4gICAgZSA9IGUgLSBlQmlhc1xuICB9XG4gIHJldHVybiAocyA/IC0xIDogMSkgKiBtICogTWF0aC5wb3coMiwgZSAtIG1MZW4pXG59XG5cbmV4cG9ydHMud3JpdGUgPSBmdW5jdGlvbiAoYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG0sIGNcbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIHJ0ID0gKG1MZW4gPT09IDIzID8gTWF0aC5wb3coMiwgLTI0KSAtIE1hdGgucG93KDIsIC03NykgOiAwKVxuICB2YXIgaSA9IGlzTEUgPyAwIDogKG5CeXRlcyAtIDEpXG4gIHZhciBkID0gaXNMRSA/IDEgOiAtMVxuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCAodmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCkgPyAxIDogMFxuXG4gIHZhbHVlID0gTWF0aC5hYnModmFsdWUpXG5cbiAgaWYgKGlzTmFOKHZhbHVlKSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICBtID0gaXNOYU4odmFsdWUpID8gMSA6IDBcbiAgICBlID0gZU1heFxuICB9IGVsc2Uge1xuICAgIGUgPSBNYXRoLmZsb29yKE1hdGgubG9nKHZhbHVlKSAvIE1hdGguTE4yKVxuICAgIGlmICh2YWx1ZSAqIChjID0gTWF0aC5wb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLVxuICAgICAgYyAqPSAyXG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogTWF0aC5wb3coMiwgMSAtIGVCaWFzKVxuICAgIH1cbiAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcbiAgICAgIGUrK1xuICAgICAgYyAvPSAyXG4gICAgfVxuXG4gICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtID0gMFxuICAgICAgZSA9IGVNYXhcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKCh2YWx1ZSAqIGMpIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IGUgKyBlQmlhc1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gdmFsdWUgKiBNYXRoLnBvdygyLCBlQmlhcyAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSAwXG4gICAgfVxuICB9XG5cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW29mZnNldCArIGldID0gbSAmIDB4ZmYsIGkgKz0gZCwgbSAvPSAyNTYsIG1MZW4gLT0gOCkge31cblxuICBlID0gKGUgPDwgbUxlbikgfCBtXG4gIGVMZW4gKz0gbUxlblxuICBmb3IgKDsgZUxlbiA+IDA7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IGUgJiAweGZmLCBpICs9IGQsIGUgLz0gMjU2LCBlTGVuIC09IDgpIHt9XG5cbiAgYnVmZmVyW29mZnNldCArIGkgLSBkXSB8PSBzICogMTI4XG59XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiLyoqIVxuKiB0aXBweS5qcyB2Ni4xLjBcbiogKGMpIDIwMTctMjAyMCBhdG9taWtzXG4qIE1JVCBMaWNlbnNlXG4qL1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG52YXIgY29yZSA9IHJlcXVpcmUoJ0Bwb3BwZXJqcy9jb3JlJyk7XG5cbnZhciBQQVNTSVZFID0ge1xuICBwYXNzaXZlOiB0cnVlXG59O1xudmFyIFJPVU5EX0FSUk9XID0gJzxzdmcgd2lkdGg9XCIxNlwiIGhlaWdodD1cIjZcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+PHBhdGggZD1cIk0wIDZzMS43OTYtLjAxMyA0LjY3LTMuNjE1QzUuODUxLjkgNi45My4wMDYgOCAwYzEuMDctLjAwNiAyLjE0OC44ODcgMy4zNDMgMi4zODVDMTQuMjMzIDYuMDA1IDE2IDYgMTYgNkgwelwiPjwvc3ZnPic7XG52YXIgSU9TX0NMQVNTID0gXCJ0aXBweS1pT1NcIjtcbnZhciBCT1hfQ0xBU1MgPSBcInRpcHB5LWJveFwiO1xudmFyIENPTlRFTlRfQ0xBU1MgPSBcInRpcHB5LWNvbnRlbnRcIjtcbnZhciBCQUNLRFJPUF9DTEFTUyA9IFwidGlwcHktYmFja2Ryb3BcIjtcbnZhciBBUlJPV19DTEFTUyA9IFwidGlwcHktYXJyb3dcIjtcbnZhciBTVkdfQVJST1dfQ0xBU1MgPSBcInRpcHB5LXN2Zy1hcnJvd1wiO1xuXG5mdW5jdGlvbiBoYXNPd25Qcm9wZXJ0eShvYmosIGtleSkge1xuICByZXR1cm4ge30uaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSk7XG59XG5mdW5jdGlvbiBnZXRWYWx1ZUF0SW5kZXhPclJldHVybih2YWx1ZSwgaW5kZXgsIGRlZmF1bHRWYWx1ZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICB2YXIgdiA9IHZhbHVlW2luZGV4XTtcbiAgICByZXR1cm4gdiA9PSBudWxsID8gQXJyYXkuaXNBcnJheShkZWZhdWx0VmFsdWUpID8gZGVmYXVsdFZhbHVlW2luZGV4XSA6IGRlZmF1bHRWYWx1ZSA6IHY7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiBpc1R5cGUodmFsdWUsIHR5cGUpIHtcbiAgdmFyIHN0ciA9IHt9LnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICByZXR1cm4gc3RyLmluZGV4T2YoJ1tvYmplY3QnKSA9PT0gMCAmJiBzdHIuaW5kZXhPZih0eXBlICsgXCJdXCIpID4gLTE7XG59XG5mdW5jdGlvbiBpbnZva2VXaXRoQXJnc09yUmV0dXJuKHZhbHVlLCBhcmdzKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicgPyB2YWx1ZS5hcHBseSh2b2lkIDAsIGFyZ3MpIDogdmFsdWU7XG59XG5mdW5jdGlvbiBkZWJvdW5jZShmbiwgbXMpIHtcbiAgLy8gQXZvaWQgd3JhcHBpbmcgaW4gYHNldFRpbWVvdXRgIGlmIG1zIGlzIDAgYW55d2F5XG4gIGlmIChtcyA9PT0gMCkge1xuICAgIHJldHVybiBmbjtcbiAgfVxuXG4gIHZhciB0aW1lb3V0O1xuICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICB0aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBmbihhcmcpO1xuICAgIH0sIG1zKTtcbiAgfTtcbn1cbmZ1bmN0aW9uIHJlbW92ZVByb3BlcnRpZXMob2JqLCBrZXlzKSB7XG4gIHZhciBjbG9uZSA9IE9iamVjdC5hc3NpZ24oe30sIG9iaik7XG4gIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgZGVsZXRlIGNsb25lW2tleV07XG4gIH0pO1xuICByZXR1cm4gY2xvbmU7XG59XG5mdW5jdGlvbiBzcGxpdEJ5U3BhY2VzKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZS5zcGxpdCgvXFxzKy8pLmZpbHRlcihCb29sZWFuKTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZVRvQXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIFtdLmNvbmNhdCh2YWx1ZSk7XG59XG5mdW5jdGlvbiBwdXNoSWZVbmlxdWUoYXJyLCB2YWx1ZSkge1xuICBpZiAoYXJyLmluZGV4T2YodmFsdWUpID09PSAtMSkge1xuICAgIGFyci5wdXNoKHZhbHVlKTtcbiAgfVxufVxuZnVuY3Rpb24gdW5pcXVlKGFycikge1xuICByZXR1cm4gYXJyLmZpbHRlcihmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcbiAgICByZXR1cm4gYXJyLmluZGV4T2YoaXRlbSkgPT09IGluZGV4O1xuICB9KTtcbn1cbmZ1bmN0aW9uIGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHJldHVybiBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbn1cbmZ1bmN0aW9uIGFycmF5RnJvbSh2YWx1ZSkge1xuICByZXR1cm4gW10uc2xpY2UuY2FsbCh2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIGRpdigpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xufVxuZnVuY3Rpb24gaXNFbGVtZW50KHZhbHVlKSB7XG4gIHJldHVybiBpc1R5cGUodmFsdWUsICdFbGVtZW50Jyk7XG59XG5mdW5jdGlvbiBpc05vZGVMaXN0KHZhbHVlKSB7XG4gIHJldHVybiBpc1R5cGUodmFsdWUsICdOb2RlTGlzdCcpO1xufVxuZnVuY3Rpb24gaXNNb3VzZUV2ZW50KHZhbHVlKSB7XG4gIHJldHVybiBpc1R5cGUodmFsdWUsICdNb3VzZUV2ZW50Jyk7XG59XG5mdW5jdGlvbiBpc1JlZmVyZW5jZUVsZW1lbnQodmFsdWUpIHtcbiAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLl90aXBweSAmJiB2YWx1ZS5fdGlwcHkucmVmZXJlbmNlID09PSB2YWx1ZSk7XG59XG5mdW5jdGlvbiBnZXRBcnJheU9mRWxlbWVudHModmFsdWUpIHtcbiAgaWYgKGlzRWxlbWVudCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gW3ZhbHVlXTtcbiAgfVxuXG4gIGlmIChpc05vZGVMaXN0KHZhbHVlKSkge1xuICAgIHJldHVybiBhcnJheUZyb20odmFsdWUpO1xuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIGFycmF5RnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHZhbHVlKSk7XG59XG5mdW5jdGlvbiBzZXRUcmFuc2l0aW9uRHVyYXRpb24oZWxzLCB2YWx1ZSkge1xuICBlbHMuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICBpZiAoZWwpIHtcbiAgICAgIGVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IHZhbHVlICsgXCJtc1wiO1xuICAgIH1cbiAgfSk7XG59XG5mdW5jdGlvbiBzZXRWaXNpYmlsaXR5U3RhdGUoZWxzLCBzdGF0ZSkge1xuICBlbHMuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICBpZiAoZWwpIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgnZGF0YS1zdGF0ZScsIHN0YXRlKTtcbiAgICB9XG4gIH0pO1xufVxuZnVuY3Rpb24gZ2V0T3duZXJEb2N1bWVudChlbGVtZW50T3JFbGVtZW50cykge1xuICB2YXIgX25vcm1hbGl6ZVRvQXJyYXkgPSBub3JtYWxpemVUb0FycmF5KGVsZW1lbnRPckVsZW1lbnRzKSxcbiAgICAgIGVsZW1lbnQgPSBfbm9ybWFsaXplVG9BcnJheVswXTtcblxuICByZXR1cm4gZWxlbWVudCA/IGVsZW1lbnQub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCA6IGRvY3VtZW50O1xufVxuZnVuY3Rpb24gaXNDdXJzb3JPdXRzaWRlSW50ZXJhY3RpdmVCb3JkZXIocG9wcGVyVHJlZURhdGEsIGV2ZW50KSB7XG4gIHZhciBjbGllbnRYID0gZXZlbnQuY2xpZW50WCxcbiAgICAgIGNsaWVudFkgPSBldmVudC5jbGllbnRZO1xuICByZXR1cm4gcG9wcGVyVHJlZURhdGEuZXZlcnkoZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgcG9wcGVyUmVjdCA9IF9yZWYucG9wcGVyUmVjdCxcbiAgICAgICAgcG9wcGVyU3RhdGUgPSBfcmVmLnBvcHBlclN0YXRlLFxuICAgICAgICBwcm9wcyA9IF9yZWYucHJvcHM7XG4gICAgdmFyIGludGVyYWN0aXZlQm9yZGVyID0gcHJvcHMuaW50ZXJhY3RpdmVCb3JkZXI7XG4gICAgdmFyIGJhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHBvcHBlclN0YXRlLnBsYWNlbWVudCk7XG4gICAgdmFyIG9mZnNldERhdGEgPSBwb3BwZXJTdGF0ZS5tb2RpZmllcnNEYXRhLm9mZnNldDtcblxuICAgIGlmICghb2Zmc2V0RGF0YSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdmFyIHRvcERpc3RhbmNlID0gYmFzZVBsYWNlbWVudCA9PT0gJ2JvdHRvbScgPyBvZmZzZXREYXRhLnRvcC55IDogMDtcbiAgICB2YXIgYm90dG9tRGlzdGFuY2UgPSBiYXNlUGxhY2VtZW50ID09PSAndG9wJyA/IG9mZnNldERhdGEuYm90dG9tLnkgOiAwO1xuICAgIHZhciBsZWZ0RGlzdGFuY2UgPSBiYXNlUGxhY2VtZW50ID09PSAncmlnaHQnID8gb2Zmc2V0RGF0YS5sZWZ0LnggOiAwO1xuICAgIHZhciByaWdodERpc3RhbmNlID0gYmFzZVBsYWNlbWVudCA9PT0gJ2xlZnQnID8gb2Zmc2V0RGF0YS5yaWdodC54IDogMDtcbiAgICB2YXIgZXhjZWVkc1RvcCA9IHBvcHBlclJlY3QudG9wIC0gY2xpZW50WSArIHRvcERpc3RhbmNlID4gaW50ZXJhY3RpdmVCb3JkZXI7XG4gICAgdmFyIGV4Y2VlZHNCb3R0b20gPSBjbGllbnRZIC0gcG9wcGVyUmVjdC5ib3R0b20gLSBib3R0b21EaXN0YW5jZSA+IGludGVyYWN0aXZlQm9yZGVyO1xuICAgIHZhciBleGNlZWRzTGVmdCA9IHBvcHBlclJlY3QubGVmdCAtIGNsaWVudFggKyBsZWZ0RGlzdGFuY2UgPiBpbnRlcmFjdGl2ZUJvcmRlcjtcbiAgICB2YXIgZXhjZWVkc1JpZ2h0ID0gY2xpZW50WCAtIHBvcHBlclJlY3QucmlnaHQgLSByaWdodERpc3RhbmNlID4gaW50ZXJhY3RpdmVCb3JkZXI7XG4gICAgcmV0dXJuIGV4Y2VlZHNUb3AgfHwgZXhjZWVkc0JvdHRvbSB8fCBleGNlZWRzTGVmdCB8fCBleGNlZWRzUmlnaHQ7XG4gIH0pO1xufVxuZnVuY3Rpb24gdXBkYXRlVHJhbnNpdGlvbkVuZExpc3RlbmVyKGJveCwgYWN0aW9uLCBsaXN0ZW5lcikge1xuICB2YXIgbWV0aG9kID0gYWN0aW9uICsgXCJFdmVudExpc3RlbmVyXCI7IC8vIHNvbWUgYnJvd3NlcnMgYXBwYXJlbnRseSBzdXBwb3J0IGB0cmFuc2l0aW9uYCAodW5wcmVmaXhlZCkgYnV0IG9ubHkgZmlyZVxuICAvLyBgd2Via2l0VHJhbnNpdGlvbkVuZGAuLi5cblxuICBbJ3RyYW5zaXRpb25lbmQnLCAnd2Via2l0VHJhbnNpdGlvbkVuZCddLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgYm94W21ldGhvZF0oZXZlbnQsIGxpc3RlbmVyKTtcbiAgfSk7XG59XG5cbnZhciBjdXJyZW50SW5wdXQgPSB7XG4gIGlzVG91Y2g6IGZhbHNlXG59O1xudmFyIGxhc3RNb3VzZU1vdmVUaW1lID0gMDtcbi8qKlxuICogV2hlbiBhIGB0b3VjaHN0YXJ0YCBldmVudCBpcyBmaXJlZCwgaXQncyBhc3N1bWVkIHRoZSB1c2VyIGlzIHVzaW5nIHRvdWNoXG4gKiBpbnB1dC4gV2UnbGwgYmluZCBhIGBtb3VzZW1vdmVgIGV2ZW50IGxpc3RlbmVyIHRvIGxpc3RlbiBmb3IgbW91c2UgaW5wdXQgaW5cbiAqIHRoZSBmdXR1cmUuIFRoaXMgd2F5LCB0aGUgYGlzVG91Y2hgIHByb3BlcnR5IGlzIGZ1bGx5IGR5bmFtaWMgYW5kIHdpbGwgaGFuZGxlXG4gKiBoeWJyaWQgZGV2aWNlcyB0aGF0IHVzZSBhIG1peCBvZiB0b3VjaCArIG1vdXNlIGlucHV0LlxuICovXG5cbmZ1bmN0aW9uIG9uRG9jdW1lbnRUb3VjaFN0YXJ0KCkge1xuICBpZiAoY3VycmVudElucHV0LmlzVG91Y2gpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjdXJyZW50SW5wdXQuaXNUb3VjaCA9IHRydWU7XG5cbiAgaWYgKHdpbmRvdy5wZXJmb3JtYW5jZSkge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIG9uRG9jdW1lbnRNb3VzZU1vdmUpO1xuICB9XG59XG4vKipcbiAqIFdoZW4gdHdvIGBtb3VzZW1vdmVgIGV2ZW50IGFyZSBmaXJlZCBjb25zZWN1dGl2ZWx5IHdpdGhpbiAyMG1zLCBpdCdzIGFzc3VtZWRcbiAqIHRoZSB1c2VyIGlzIHVzaW5nIG1vdXNlIGlucHV0IGFnYWluLiBgbW91c2Vtb3ZlYCBjYW4gZmlyZSBvbiB0b3VjaCBkZXZpY2VzIGFzXG4gKiB3ZWxsLCBidXQgdmVyeSByYXJlbHkgdGhhdCBxdWlja2x5LlxuICovXG5cbmZ1bmN0aW9uIG9uRG9jdW1lbnRNb3VzZU1vdmUoKSB7XG4gIHZhciBub3cgPSBwZXJmb3JtYW5jZS5ub3coKTtcblxuICBpZiAobm93IC0gbGFzdE1vdXNlTW92ZVRpbWUgPCAyMCkge1xuICAgIGN1cnJlbnRJbnB1dC5pc1RvdWNoID0gZmFsc2U7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgb25Eb2N1bWVudE1vdXNlTW92ZSk7XG4gIH1cblxuICBsYXN0TW91c2VNb3ZlVGltZSA9IG5vdztcbn1cbi8qKlxuICogV2hlbiBhbiBlbGVtZW50IGlzIGluIGZvY3VzIGFuZCBoYXMgYSB0aXBweSwgbGVhdmluZyB0aGUgdGFiL3dpbmRvdyBhbmRcbiAqIHJldHVybmluZyBjYXVzZXMgaXQgdG8gc2hvdyBhZ2Fpbi4gRm9yIG1vdXNlIHVzZXJzIHRoaXMgaXMgdW5leHBlY3RlZCwgYnV0XG4gKiBmb3Iga2V5Ym9hcmQgdXNlIGl0IG1ha2VzIHNlbnNlLlxuICogVE9ETzogZmluZCBhIGJldHRlciB0ZWNobmlxdWUgdG8gc29sdmUgdGhpcyBwcm9ibGVtXG4gKi9cblxuZnVuY3Rpb24gb25XaW5kb3dCbHVyKCkge1xuICB2YXIgYWN0aXZlRWxlbWVudCA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cbiAgaWYgKGlzUmVmZXJlbmNlRWxlbWVudChhY3RpdmVFbGVtZW50KSkge1xuICAgIHZhciBpbnN0YW5jZSA9IGFjdGl2ZUVsZW1lbnQuX3RpcHB5O1xuXG4gICAgaWYgKGFjdGl2ZUVsZW1lbnQuYmx1ciAmJiAhaW5zdGFuY2Uuc3RhdGUuaXNWaXNpYmxlKSB7XG4gICAgICBhY3RpdmVFbGVtZW50LmJsdXIoKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGJpbmRHbG9iYWxFdmVudExpc3RlbmVycygpIHtcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIG9uRG9jdW1lbnRUb3VjaFN0YXJ0LCBPYmplY3QuYXNzaWduKHt9LCBQQVNTSVZFLCB7XG4gICAgY2FwdHVyZTogdHJ1ZVxuICB9KSk7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgb25XaW5kb3dCbHVyKTtcbn1cblxudmFyIGlzQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCc7XG52YXIgdWEgPSBpc0Jyb3dzZXIgPyBuYXZpZ2F0b3IudXNlckFnZW50IDogJyc7XG52YXIgaXNJRSA9IC9NU0lFIHxUcmlkZW50XFwvLy50ZXN0KHVhKTtcbnZhciBpc0lPUyA9IGlzQnJvd3NlciAmJiAvaVBob25lfGlQYWR8aVBvZC8udGVzdChuYXZpZ2F0b3IucGxhdGZvcm0pO1xuXG5mdW5jdGlvbiBjcmVhdGVNZW1vcnlMZWFrV2FybmluZyhtZXRob2QpIHtcbiAgdmFyIHR4dCA9IG1ldGhvZCA9PT0gJ2Rlc3Ryb3knID8gJ24gYWxyZWFkeS0nIDogJyAnO1xuICByZXR1cm4gW21ldGhvZCArIFwiKCkgd2FzIGNhbGxlZCBvbiBhXCIgKyB0eHQgKyBcImRlc3Ryb3llZCBpbnN0YW5jZS4gVGhpcyBpcyBhIG5vLW9wIGJ1dFwiLCAnaW5kaWNhdGVzIGEgcG90ZW50aWFsIG1lbW9yeSBsZWFrLiddLmpvaW4oJyAnKTtcbn1cbmZ1bmN0aW9uIGNsZWFuKHZhbHVlKSB7XG4gIHZhciBzcGFjZXNBbmRUYWJzID0gL1sgXFx0XXsyLH0vZztcbiAgdmFyIGxpbmVTdGFydFdpdGhTcGFjZXMgPSAvXlsgXFx0XSovZ207XG4gIHJldHVybiB2YWx1ZS5yZXBsYWNlKHNwYWNlc0FuZFRhYnMsICcgJykucmVwbGFjZShsaW5lU3RhcnRXaXRoU3BhY2VzLCAnJykudHJpbSgpO1xufVxuXG5mdW5jdGlvbiBnZXREZXZNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgcmV0dXJuIGNsZWFuKFwiXFxuICAlY3RpcHB5LmpzXFxuXFxuICAlY1wiICsgY2xlYW4obWVzc2FnZSkgKyBcIlxcblxcbiAgJWNcXHVEODNEXFx1REM3N1xcdTIwMEQgVGhpcyBpcyBhIGRldmVsb3BtZW50LW9ubHkgbWVzc2FnZS4gSXQgd2lsbCBiZSByZW1vdmVkIGluIHByb2R1Y3Rpb24uXFxuICBcIik7XG59XG5cbmZ1bmN0aW9uIGdldEZvcm1hdHRlZE1lc3NhZ2UobWVzc2FnZSkge1xuICByZXR1cm4gW2dldERldk1lc3NhZ2UobWVzc2FnZSksIC8vIHRpdGxlXG4gICdjb2xvcjogIzAwQzU4NDsgZm9udC1zaXplOiAxLjNlbTsgZm9udC13ZWlnaHQ6IGJvbGQ7JywgLy8gbWVzc2FnZVxuICAnbGluZS1oZWlnaHQ6IDEuNScsIC8vIGZvb3RlclxuICAnY29sb3I6ICNhNmEwOTU7J107XG59XG4vKipcbiAqIEhlbHBmdWwgd3JhcHBlciBhcm91bmQgYGNvbnNvbGUud2FybigpYC5cbiAqIFRPRE86IFNob3VsZCB3ZSB1c2UgYSBjYWNoZSBzbyBpdCBvbmx5IHdhcm5zIGEgc2luZ2xlIHRpbWUgYW5kIG5vdCBzcGFtIHRoZVxuICogY29uc29sZT8gKE5lZWQgdG8gY29uc2lkZXIgaG90IHJlbG9hZGluZyBhbmQgaW52YWxpZGF0aW9uIHRob3VnaCkuIENocm9tZVxuICogYWxyZWFkeSBiYXRjaGVzIHdhcm5pbmdzIGFzIHdlbGwuXG4gKi9cblxuZnVuY3Rpb24gd2FybldoZW4oY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gIGlmIChjb25kaXRpb24pIHtcbiAgICB2YXIgX2NvbnNvbGU7XG5cbiAgICAoX2NvbnNvbGUgPSBjb25zb2xlKS53YXJuLmFwcGx5KF9jb25zb2xlLCBnZXRGb3JtYXR0ZWRNZXNzYWdlKG1lc3NhZ2UpKTtcbiAgfVxufVxuLyoqXG4gKiBIZWxwZnVsIHdyYXBwZXIgYXJvdW5kIGBjb25zb2xlLmVycm9yKClgXG4gKi9cblxuZnVuY3Rpb24gZXJyb3JXaGVuKGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICBpZiAoY29uZGl0aW9uKSB7XG4gICAgdmFyIF9jb25zb2xlMjtcblxuICAgIChfY29uc29sZTIgPSBjb25zb2xlKS5lcnJvci5hcHBseShfY29uc29sZTIsIGdldEZvcm1hdHRlZE1lc3NhZ2UobWVzc2FnZSkpO1xuICB9XG59XG4vKipcbiAqIFZhbGlkYXRlcyB0aGUgYHRhcmdldHNgIHZhbHVlIHBhc3NlZCB0byBgdGlwcHkoKWBcbiAqL1xuXG5mdW5jdGlvbiB2YWxpZGF0ZVRhcmdldHModGFyZ2V0cykge1xuICB2YXIgZGlkUGFzc0ZhbHN5VmFsdWUgPSAhdGFyZ2V0cztcbiAgdmFyIGRpZFBhc3NQbGFpbk9iamVjdCA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0YXJnZXRzKSA9PT0gJ1tvYmplY3QgT2JqZWN0XScgJiYgIXRhcmdldHMuYWRkRXZlbnRMaXN0ZW5lcjtcbiAgZXJyb3JXaGVuKGRpZFBhc3NGYWxzeVZhbHVlLCBbJ3RpcHB5KCkgd2FzIHBhc3NlZCcsICdgJyArIFN0cmluZyh0YXJnZXRzKSArICdgJywgJ2FzIGl0cyB0YXJnZXRzIChmaXJzdCkgYXJndW1lbnQuIFZhbGlkIHR5cGVzIGFyZTogU3RyaW5nLCBFbGVtZW50LCcsICdFbGVtZW50W10sIG9yIE5vZGVMaXN0LiddLmpvaW4oJyAnKSk7XG4gIGVycm9yV2hlbihkaWRQYXNzUGxhaW5PYmplY3QsIFsndGlwcHkoKSB3YXMgcGFzc2VkIGEgcGxhaW4gb2JqZWN0IHdoaWNoIGlzIG5vdCBzdXBwb3J0ZWQgYXMgYW4gYXJndW1lbnQnLCAnZm9yIHZpcnR1YWwgcG9zaXRpb25pbmcuIFVzZSBwcm9wcy5nZXRSZWZlcmVuY2VDbGllbnRSZWN0IGluc3RlYWQuJ10uam9pbignICcpKTtcbn1cblxudmFyIHBsdWdpblByb3BzID0ge1xuICBhbmltYXRlRmlsbDogZmFsc2UsXG4gIGZvbGxvd0N1cnNvcjogZmFsc2UsXG4gIGlubGluZVBvc2l0aW9uaW5nOiBmYWxzZSxcbiAgc3RpY2t5OiBmYWxzZVxufTtcbnZhciByZW5kZXJQcm9wcyA9IHtcbiAgYWxsb3dIVE1MOiBmYWxzZSxcbiAgYW5pbWF0aW9uOiAnZmFkZScsXG4gIGFycm93OiB0cnVlLFxuICBjb250ZW50OiAnJyxcbiAgaW5lcnRpYTogZmFsc2UsXG4gIG1heFdpZHRoOiAzNTAsXG4gIHJvbGU6ICd0b29sdGlwJyxcbiAgdGhlbWU6ICcnLFxuICB6SW5kZXg6IDk5OTlcbn07XG52YXIgZGVmYXVsdFByb3BzID0gT2JqZWN0LmFzc2lnbih7XG4gIGFwcGVuZFRvOiBmdW5jdGlvbiBhcHBlbmRUbygpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuYm9keTtcbiAgfSxcbiAgYXJpYToge1xuICAgIGNvbnRlbnQ6ICdhdXRvJyxcbiAgICBleHBhbmRlZDogJ2F1dG8nXG4gIH0sXG4gIGNvbnRlbnQ6ICcnLFxuICBkZWxheTogMCxcbiAgZHVyYXRpb246IFszMDAsIDI1MF0sXG4gIGdldFJlZmVyZW5jZUNsaWVudFJlY3Q6IG51bGwsXG4gIGhpZGVPbkNsaWNrOiB0cnVlLFxuICBpZ25vcmVBdHRyaWJ1dGVzOiBmYWxzZSxcbiAgaW50ZXJhY3RpdmU6IGZhbHNlLFxuICBpbnRlcmFjdGl2ZUJvcmRlcjogMixcbiAgaW50ZXJhY3RpdmVEZWJvdW5jZTogMCxcbiAgbW92ZVRyYW5zaXRpb246ICcnLFxuICBvZmZzZXQ6IFswLCAxMF0sXG4gIG9uQWZ0ZXJVcGRhdGU6IGZ1bmN0aW9uIG9uQWZ0ZXJVcGRhdGUoKSB7fSxcbiAgb25CZWZvcmVVcGRhdGU6IGZ1bmN0aW9uIG9uQmVmb3JlVXBkYXRlKCkge30sXG4gIG9uQ3JlYXRlOiBmdW5jdGlvbiBvbkNyZWF0ZSgpIHt9LFxuICBvbkRlc3Ryb3k6IGZ1bmN0aW9uIG9uRGVzdHJveSgpIHt9LFxuICBvbkhpZGRlbjogZnVuY3Rpb24gb25IaWRkZW4oKSB7fSxcbiAgb25IaWRlOiBmdW5jdGlvbiBvbkhpZGUoKSB7fSxcbiAgb25Nb3VudDogZnVuY3Rpb24gb25Nb3VudCgpIHt9LFxuICBvblNob3c6IGZ1bmN0aW9uIG9uU2hvdygpIHt9LFxuICBvblNob3duOiBmdW5jdGlvbiBvblNob3duKCkge30sXG4gIG9uVHJpZ2dlcjogZnVuY3Rpb24gb25UcmlnZ2VyKCkge30sXG4gIG9uVW50cmlnZ2VyOiBmdW5jdGlvbiBvblVudHJpZ2dlcigpIHt9LFxuICBvbkNsaWNrT3V0c2lkZTogZnVuY3Rpb24gb25DbGlja091dHNpZGUoKSB7fSxcbiAgcGxhY2VtZW50OiAndG9wJyxcbiAgcGx1Z2luczogW10sXG4gIHBvcHBlck9wdGlvbnM6IHt9LFxuICByZW5kZXI6IG51bGwsXG4gIHNob3dPbkNyZWF0ZTogZmFsc2UsXG4gIHRvdWNoOiB0cnVlLFxuICB0cmlnZ2VyOiAnbW91c2VlbnRlciBmb2N1cycsXG4gIHRyaWdnZXJUYXJnZXQ6IG51bGxcbn0sIHBsdWdpblByb3BzLCB7fSwgcmVuZGVyUHJvcHMpO1xudmFyIGRlZmF1bHRLZXlzID0gT2JqZWN0LmtleXMoZGVmYXVsdFByb3BzKTtcbnZhciBzZXREZWZhdWx0UHJvcHMgPSBmdW5jdGlvbiBzZXREZWZhdWx0UHJvcHMocGFydGlhbFByb3BzKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICB2YWxpZGF0ZVByb3BzKHBhcnRpYWxQcm9wcywgW10pO1xuICB9XG5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhwYXJ0aWFsUHJvcHMpO1xuICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGRlZmF1bHRQcm9wc1trZXldID0gcGFydGlhbFByb3BzW2tleV07XG4gIH0pO1xufTtcbmZ1bmN0aW9uIGdldEV4dGVuZGVkUGFzc2VkUHJvcHMocGFzc2VkUHJvcHMpIHtcbiAgdmFyIHBsdWdpbnMgPSBwYXNzZWRQcm9wcy5wbHVnaW5zIHx8IFtdO1xuICB2YXIgcGx1Z2luUHJvcHMgPSBwbHVnaW5zLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwbHVnaW4pIHtcbiAgICB2YXIgbmFtZSA9IHBsdWdpbi5uYW1lLFxuICAgICAgICBkZWZhdWx0VmFsdWUgPSBwbHVnaW4uZGVmYXVsdFZhbHVlO1xuXG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIGFjY1tuYW1lXSA9IHBhc3NlZFByb3BzW25hbWVdICE9PSB1bmRlZmluZWQgPyBwYXNzZWRQcm9wc1tuYW1lXSA6IGRlZmF1bHRWYWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBwYXNzZWRQcm9wcywge30sIHBsdWdpblByb3BzKTtcbn1cbmZ1bmN0aW9uIGdldERhdGFBdHRyaWJ1dGVQcm9wcyhyZWZlcmVuY2UsIHBsdWdpbnMpIHtcbiAgdmFyIHByb3BLZXlzID0gcGx1Z2lucyA/IE9iamVjdC5rZXlzKGdldEV4dGVuZGVkUGFzc2VkUHJvcHMoT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdFByb3BzLCB7XG4gICAgcGx1Z2luczogcGx1Z2luc1xuICB9KSkpIDogZGVmYXVsdEtleXM7XG4gIHZhciBwcm9wcyA9IHByb3BLZXlzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBrZXkpIHtcbiAgICB2YXIgdmFsdWVBc1N0cmluZyA9IChyZWZlcmVuY2UuZ2V0QXR0cmlidXRlKFwiZGF0YS10aXBweS1cIiArIGtleSkgfHwgJycpLnRyaW0oKTtcblxuICAgIGlmICghdmFsdWVBc1N0cmluZykge1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9XG5cbiAgICBpZiAoa2V5ID09PSAnY29udGVudCcpIHtcbiAgICAgIGFjY1trZXldID0gdmFsdWVBc1N0cmluZztcbiAgICB9IGVsc2Uge1xuICAgICAgdHJ5IHtcbiAgICAgICAgYWNjW2tleV0gPSBKU09OLnBhcnNlKHZhbHVlQXNTdHJpbmcpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBhY2Nba2V5XSA9IHZhbHVlQXNTdHJpbmc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xuICByZXR1cm4gcHJvcHM7XG59XG5mdW5jdGlvbiBldmFsdWF0ZVByb3BzKHJlZmVyZW5jZSwgcHJvcHMpIHtcbiAgdmFyIG91dCA9IE9iamVjdC5hc3NpZ24oe30sIHByb3BzLCB7XG4gICAgY29udGVudDogaW52b2tlV2l0aEFyZ3NPclJldHVybihwcm9wcy5jb250ZW50LCBbcmVmZXJlbmNlXSlcbiAgfSwgcHJvcHMuaWdub3JlQXR0cmlidXRlcyA/IHt9IDogZ2V0RGF0YUF0dHJpYnV0ZVByb3BzKHJlZmVyZW5jZSwgcHJvcHMucGx1Z2lucykpO1xuICBvdXQuYXJpYSA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRQcm9wcy5hcmlhLCB7fSwgb3V0LmFyaWEpO1xuICBvdXQuYXJpYSA9IHtcbiAgICBleHBhbmRlZDogb3V0LmFyaWEuZXhwYW5kZWQgPT09ICdhdXRvJyA/IHByb3BzLmludGVyYWN0aXZlIDogb3V0LmFyaWEuZXhwYW5kZWQsXG4gICAgY29udGVudDogb3V0LmFyaWEuY29udGVudCA9PT0gJ2F1dG8nID8gcHJvcHMuaW50ZXJhY3RpdmUgPyBudWxsIDogJ2Rlc2NyaWJlZGJ5JyA6IG91dC5hcmlhLmNvbnRlbnRcbiAgfTtcbiAgcmV0dXJuIG91dDtcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcHMocGFydGlhbFByb3BzLCBwbHVnaW5zKSB7XG4gIGlmIChwYXJ0aWFsUHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHBhcnRpYWxQcm9wcyA9IHt9O1xuICB9XG5cbiAgaWYgKHBsdWdpbnMgPT09IHZvaWQgMCkge1xuICAgIHBsdWdpbnMgPSBbXTtcbiAgfVxuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMocGFydGlhbFByb3BzKTtcbiAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgdmFyIG5vblBsdWdpblByb3BzID0gcmVtb3ZlUHJvcGVydGllcyhkZWZhdWx0UHJvcHMsIE9iamVjdC5rZXlzKHBsdWdpblByb3BzKSk7XG4gICAgdmFyIGRpZFBhc3NVbmtub3duUHJvcCA9ICFoYXNPd25Qcm9wZXJ0eShub25QbHVnaW5Qcm9wcywgcHJvcCk7IC8vIENoZWNrIGlmIHRoZSBwcm9wIGV4aXN0cyBpbiBgcGx1Z2luc2BcblxuICAgIGlmIChkaWRQYXNzVW5rbm93blByb3ApIHtcbiAgICAgIGRpZFBhc3NVbmtub3duUHJvcCA9IHBsdWdpbnMuZmlsdGVyKGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICAgICAgcmV0dXJuIHBsdWdpbi5uYW1lID09PSBwcm9wO1xuICAgICAgfSkubGVuZ3RoID09PSAwO1xuICAgIH1cblxuICAgIHdhcm5XaGVuKGRpZFBhc3NVbmtub3duUHJvcCwgW1wiYFwiICsgcHJvcCArIFwiYFwiLCBcImlzIG5vdCBhIHZhbGlkIHByb3AuIFlvdSBtYXkgaGF2ZSBzcGVsbGVkIGl0IGluY29ycmVjdGx5LCBvciBpZiBpdCdzXCIsICdhIHBsdWdpbiwgZm9yZ290IHRvIHBhc3MgaXQgaW4gYW4gYXJyYXkgYXMgcHJvcHMucGx1Z2lucy4nLCAnXFxuXFxuJywgJ0FsbCBwcm9wczogaHR0cHM6Ly9hdG9taWtzLmdpdGh1Yi5pby90aXBweWpzL3Y2L2FsbC1wcm9wcy9cXG4nLCAnUGx1Z2luczogaHR0cHM6Ly9hdG9taWtzLmdpdGh1Yi5pby90aXBweWpzL3Y2L3BsdWdpbnMvJ10uam9pbignICcpKTtcbiAgfSk7XG59XG5cbnZhciBpbm5lckhUTUwgPSBmdW5jdGlvbiBpbm5lckhUTUwoKSB7XG4gIHJldHVybiAnaW5uZXJIVE1MJztcbn07XG5cbmZ1bmN0aW9uIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKGVsZW1lbnQsIGh0bWwpIHtcbiAgZWxlbWVudFtpbm5lckhUTUwoKV0gPSBodG1sO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVBcnJvd0VsZW1lbnQodmFsdWUpIHtcbiAgdmFyIGFycm93ID0gZGl2KCk7XG5cbiAgaWYgKHZhbHVlID09PSB0cnVlKSB7XG4gICAgYXJyb3cuY2xhc3NOYW1lID0gQVJST1dfQ0xBU1M7XG4gIH0gZWxzZSB7XG4gICAgYXJyb3cuY2xhc3NOYW1lID0gU1ZHX0FSUk9XX0NMQVNTO1xuXG4gICAgaWYgKGlzRWxlbWVudCh2YWx1ZSkpIHtcbiAgICAgIGFycm93LmFwcGVuZENoaWxkKHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwoYXJyb3csIHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYXJyb3c7XG59XG5cbmZ1bmN0aW9uIHNldENvbnRlbnQoY29udGVudCwgcHJvcHMpIHtcbiAgaWYgKGlzRWxlbWVudChwcm9wcy5jb250ZW50KSkge1xuICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKGNvbnRlbnQsICcnKTtcbiAgICBjb250ZW50LmFwcGVuZENoaWxkKHByb3BzLmNvbnRlbnQpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm9wcy5jb250ZW50ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKHByb3BzLmFsbG93SFRNTCkge1xuICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwoY29udGVudCwgcHJvcHMuY29udGVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRlbnQudGV4dENvbnRlbnQgPSBwcm9wcy5jb250ZW50O1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gZ2V0Q2hpbGRyZW4ocG9wcGVyKSB7XG4gIHZhciBib3ggPSBwb3BwZXIuZmlyc3RFbGVtZW50Q2hpbGQ7XG4gIHZhciBib3hDaGlsZHJlbiA9IGFycmF5RnJvbShib3guY2hpbGRyZW4pO1xuICByZXR1cm4ge1xuICAgIGJveDogYm94LFxuICAgIGNvbnRlbnQ6IGJveENoaWxkcmVuLmZpbmQoZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIHJldHVybiBub2RlLmNsYXNzTGlzdC5jb250YWlucyhDT05URU5UX0NMQVNTKTtcbiAgICB9KSxcbiAgICBhcnJvdzogYm94Q2hpbGRyZW4uZmluZChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgcmV0dXJuIG5vZGUuY2xhc3NMaXN0LmNvbnRhaW5zKEFSUk9XX0NMQVNTKSB8fCBub2RlLmNsYXNzTGlzdC5jb250YWlucyhTVkdfQVJST1dfQ0xBU1MpO1xuICAgIH0pLFxuICAgIGJhY2tkcm9wOiBib3hDaGlsZHJlbi5maW5kKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICByZXR1cm4gbm9kZS5jbGFzc0xpc3QuY29udGFpbnMoQkFDS0RST1BfQ0xBU1MpO1xuICAgIH0pXG4gIH07XG59XG5mdW5jdGlvbiByZW5kZXIoaW5zdGFuY2UpIHtcbiAgdmFyIHBvcHBlciA9IGRpdigpO1xuICB2YXIgYm94ID0gZGl2KCk7XG4gIGJveC5jbGFzc05hbWUgPSBCT1hfQ0xBU1M7XG4gIGJveC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc3RhdGUnLCAnaGlkZGVuJyk7XG4gIGJveC5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgJy0xJyk7XG4gIHZhciBjb250ZW50ID0gZGl2KCk7XG4gIGNvbnRlbnQuY2xhc3NOYW1lID0gQ09OVEVOVF9DTEFTUztcbiAgY29udGVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc3RhdGUnLCAnaGlkZGVuJyk7XG4gIHNldENvbnRlbnQoY29udGVudCwgaW5zdGFuY2UucHJvcHMpO1xuICBwb3BwZXIuYXBwZW5kQ2hpbGQoYm94KTtcbiAgYm94LmFwcGVuZENoaWxkKGNvbnRlbnQpO1xuICBvblVwZGF0ZShpbnN0YW5jZS5wcm9wcywgaW5zdGFuY2UucHJvcHMpO1xuXG4gIGZ1bmN0aW9uIG9uVXBkYXRlKHByZXZQcm9wcywgbmV4dFByb3BzKSB7XG4gICAgdmFyIF9nZXRDaGlsZHJlbiA9IGdldENoaWxkcmVuKHBvcHBlciksXG4gICAgICAgIGJveCA9IF9nZXRDaGlsZHJlbi5ib3gsXG4gICAgICAgIGNvbnRlbnQgPSBfZ2V0Q2hpbGRyZW4uY29udGVudCxcbiAgICAgICAgYXJyb3cgPSBfZ2V0Q2hpbGRyZW4uYXJyb3c7XG5cbiAgICBpZiAobmV4dFByb3BzLnRoZW1lKSB7XG4gICAgICBib3guc2V0QXR0cmlidXRlKCdkYXRhLXRoZW1lJywgbmV4dFByb3BzLnRoZW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYm94LnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS10aGVtZScpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgbmV4dFByb3BzLmFuaW1hdGlvbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGJveC5zZXRBdHRyaWJ1dGUoJ2RhdGEtYW5pbWF0aW9uJywgbmV4dFByb3BzLmFuaW1hdGlvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJveC5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtYW5pbWF0aW9uJyk7XG4gICAgfVxuXG4gICAgaWYgKG5leHRQcm9wcy5pbmVydGlhKSB7XG4gICAgICBib3guc2V0QXR0cmlidXRlKCdkYXRhLWluZXJ0aWEnLCAnJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJveC5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtaW5lcnRpYScpO1xuICAgIH1cblxuICAgIGJveC5zdHlsZS5tYXhXaWR0aCA9IHR5cGVvZiBuZXh0UHJvcHMubWF4V2lkdGggPT09ICdudW1iZXInID8gbmV4dFByb3BzLm1heFdpZHRoICsgXCJweFwiIDogbmV4dFByb3BzLm1heFdpZHRoO1xuXG4gICAgaWYgKG5leHRQcm9wcy5yb2xlKSB7XG4gICAgICBib3guc2V0QXR0cmlidXRlKCdyb2xlJywgbmV4dFByb3BzLnJvbGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBib3gucmVtb3ZlQXR0cmlidXRlKCdyb2xlJyk7XG4gICAgfVxuXG4gICAgaWYgKHByZXZQcm9wcy5jb250ZW50ICE9PSBuZXh0UHJvcHMuY29udGVudCkge1xuICAgICAgc2V0Q29udGVudChjb250ZW50LCBpbnN0YW5jZS5wcm9wcyk7XG4gICAgfVxuXG4gICAgaWYgKG5leHRQcm9wcy5hcnJvdykge1xuICAgICAgaWYgKCFhcnJvdykge1xuICAgICAgICBib3guYXBwZW5kQ2hpbGQoY3JlYXRlQXJyb3dFbGVtZW50KG5leHRQcm9wcy5hcnJvdykpO1xuICAgICAgfSBlbHNlIGlmIChwcmV2UHJvcHMuYXJyb3cgIT09IG5leHRQcm9wcy5hcnJvdykge1xuICAgICAgICBib3gucmVtb3ZlQ2hpbGQoYXJyb3cpO1xuICAgICAgICBib3guYXBwZW5kQ2hpbGQoY3JlYXRlQXJyb3dFbGVtZW50KG5leHRQcm9wcy5hcnJvdykpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYXJyb3cpIHtcbiAgICAgIGJveC5yZW1vdmVDaGlsZChhcnJvdyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwb3BwZXI6IHBvcHBlcixcbiAgICBvblVwZGF0ZTogb25VcGRhdGVcbiAgfTtcbn0gLy8gUnVudGltZSBjaGVjayB0byBpZGVudGlmeSBpZiB0aGUgcmVuZGVyIGZ1bmN0aW9uIGlzIHRoZSBkZWZhdWx0IG9uZTsgdGhpc1xuLy8gd2F5IHdlIGNhbiBhcHBseSBkZWZhdWx0IENTUyB0cmFuc2l0aW9ucyBsb2dpYyBhbmQgaXQgY2FuIGJlIHRyZWUtc2hha2VuIGF3YXlcblxucmVuZGVyLiQkdGlwcHkgPSB0cnVlO1xuXG52YXIgaWRDb3VudGVyID0gMTtcbnZhciBtb3VzZU1vdmVMaXN0ZW5lcnMgPSBbXTsgLy8gVXNlZCBieSBgaGlkZUFsbCgpYFxuXG52YXIgbW91bnRlZEluc3RhbmNlcyA9IFtdO1xuZnVuY3Rpb24gY3JlYXRlVGlwcHkocmVmZXJlbmNlLCBwYXNzZWRQcm9wcykge1xuICB2YXIgcHJvcHMgPSBldmFsdWF0ZVByb3BzKHJlZmVyZW5jZSwgT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdFByb3BzLCB7fSwgZ2V0RXh0ZW5kZWRQYXNzZWRQcm9wcyhwYXNzZWRQcm9wcykpKTsgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIC8vIPCflJIgUHJpdmF0ZSBtZW1iZXJzXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBzaG93VGltZW91dDtcbiAgdmFyIGhpZGVUaW1lb3V0O1xuICB2YXIgc2NoZWR1bGVIaWRlQW5pbWF0aW9uRnJhbWU7XG4gIHZhciBpc1Zpc2libGVGcm9tQ2xpY2sgPSBmYWxzZTtcbiAgdmFyIGRpZEhpZGVEdWVUb0RvY3VtZW50TW91c2VEb3duID0gZmFsc2U7XG4gIHZhciBpZ25vcmVPbkZpcnN0VXBkYXRlID0gZmFsc2U7XG4gIHZhciBsYXN0VHJpZ2dlckV2ZW50O1xuICB2YXIgY3VycmVudFRyYW5zaXRpb25FbmRMaXN0ZW5lcjtcbiAgdmFyIG9uRmlyc3RVcGRhdGU7XG4gIHZhciBsaXN0ZW5lcnMgPSBbXTtcbiAgdmFyIGRlYm91bmNlZE9uTW91c2VNb3ZlID0gZGVib3VuY2Uob25Nb3VzZU1vdmUsIHByb3BzLmludGVyYWN0aXZlRGVib3VuY2UpO1xuICB2YXIgY3VycmVudFRhcmdldDtcbiAgdmFyIGRvYyA9IGdldE93bmVyRG9jdW1lbnQocHJvcHMudHJpZ2dlclRhcmdldCB8fCByZWZlcmVuY2UpOyAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgLy8g8J+UkSBQdWJsaWMgbWVtYmVyc1xuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICB2YXIgaWQgPSBpZENvdW50ZXIrKztcbiAgdmFyIHBvcHBlckluc3RhbmNlID0gbnVsbDtcbiAgdmFyIHBsdWdpbnMgPSB1bmlxdWUocHJvcHMucGx1Z2lucyk7XG4gIHZhciBzdGF0ZSA9IHtcbiAgICAvLyBJcyB0aGUgaW5zdGFuY2UgY3VycmVudGx5IGVuYWJsZWQ/XG4gICAgaXNFbmFibGVkOiB0cnVlLFxuICAgIC8vIElzIHRoZSB0aXBweSBjdXJyZW50bHkgc2hvd2luZyBhbmQgbm90IHRyYW5zaXRpb25pbmcgb3V0P1xuICAgIGlzVmlzaWJsZTogZmFsc2UsXG4gICAgLy8gSGFzIHRoZSBpbnN0YW5jZSBiZWVuIGRlc3Ryb3llZD9cbiAgICBpc0Rlc3Ryb3llZDogZmFsc2UsXG4gICAgLy8gSXMgdGhlIHRpcHB5IGN1cnJlbnRseSBtb3VudGVkIHRvIHRoZSBET00/XG4gICAgaXNNb3VudGVkOiBmYWxzZSxcbiAgICAvLyBIYXMgdGhlIHRpcHB5IGZpbmlzaGVkIHRyYW5zaXRpb25pbmcgaW4/XG4gICAgaXNTaG93bjogZmFsc2VcbiAgfTtcbiAgdmFyIGluc3RhbmNlID0ge1xuICAgIC8vIHByb3BlcnRpZXNcbiAgICBpZDogaWQsXG4gICAgcmVmZXJlbmNlOiByZWZlcmVuY2UsXG4gICAgcG9wcGVyOiBkaXYoKSxcbiAgICBwb3BwZXJJbnN0YW5jZTogcG9wcGVySW5zdGFuY2UsXG4gICAgcHJvcHM6IHByb3BzLFxuICAgIHN0YXRlOiBzdGF0ZSxcbiAgICBwbHVnaW5zOiBwbHVnaW5zLFxuICAgIC8vIG1ldGhvZHNcbiAgICBjbGVhckRlbGF5VGltZW91dHM6IGNsZWFyRGVsYXlUaW1lb3V0cyxcbiAgICBzZXRQcm9wczogc2V0UHJvcHMsXG4gICAgc2V0Q29udGVudDogc2V0Q29udGVudCxcbiAgICBzaG93OiBzaG93LFxuICAgIGhpZGU6IGhpZGUsXG4gICAgZW5hYmxlOiBlbmFibGUsXG4gICAgZGlzYWJsZTogZGlzYWJsZSxcbiAgICB1bm1vdW50OiB1bm1vdW50LFxuICAgIGRlc3Ryb3k6IGRlc3Ryb3lcbiAgfTsgLy8gVE9ETzogSW52ZXN0aWdhdGUgd2h5IHRoaXMgZWFybHkgcmV0dXJuIGNhdXNlcyBhIFREWiBlcnJvciBpbiB0aGUgdGVzdHMg4oCUXG4gIC8vIGl0IGRvZXNuJ3Qgc2VlbSB0byBoYXBwZW4gaW4gdGhlIGJyb3dzZXJcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cblxuICBpZiAoIXByb3BzLnJlbmRlcikge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIGVycm9yV2hlbih0cnVlLCAncmVuZGVyKCkgZnVuY3Rpb24gaGFzIG5vdCBiZWVuIHN1cHBsaWVkLicpO1xuICAgIH1cblxuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfSAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgLy8gSW5pdGlhbCBtdXRhdGlvbnNcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cblxuICB2YXIgX3Byb3BzJHJlbmRlciA9IHByb3BzLnJlbmRlcihpbnN0YW5jZSksXG4gICAgICBwb3BwZXIgPSBfcHJvcHMkcmVuZGVyLnBvcHBlcixcbiAgICAgIG9uVXBkYXRlID0gX3Byb3BzJHJlbmRlci5vblVwZGF0ZTtcblxuICBwb3BwZXIuc2V0QXR0cmlidXRlKCdkYXRhLXRpcHB5LXJvb3QnLCAnJyk7XG4gIHBvcHBlci5pZCA9IFwidGlwcHktXCIgKyBpbnN0YW5jZS5pZDtcbiAgaW5zdGFuY2UucG9wcGVyID0gcG9wcGVyO1xuICByZWZlcmVuY2UuX3RpcHB5ID0gaW5zdGFuY2U7XG4gIHBvcHBlci5fdGlwcHkgPSBpbnN0YW5jZTtcbiAgdmFyIHBsdWdpbnNIb29rcyA9IHBsdWdpbnMubWFwKGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICByZXR1cm4gcGx1Z2luLmZuKGluc3RhbmNlKTtcbiAgfSk7XG4gIHZhciBoYXNBcmlhRXhwYW5kZWQgPSByZWZlcmVuY2UuaGFzQXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJyk7XG4gIGFkZExpc3RlbmVycygpO1xuICBoYW5kbGVBcmlhRXhwYW5kZWRBdHRyaWJ1dGUoKTtcbiAgaGFuZGxlU3R5bGVzKCk7XG4gIGludm9rZUhvb2soJ29uQ3JlYXRlJywgW2luc3RhbmNlXSk7XG5cbiAgaWYgKHByb3BzLnNob3dPbkNyZWF0ZSkge1xuICAgIHNjaGVkdWxlU2hvdygpO1xuICB9IC8vIFByZXZlbnQgYSB0aXBweSB3aXRoIGEgZGVsYXkgZnJvbSBoaWRpbmcgaWYgdGhlIGN1cnNvciBsZWZ0IHRoZW4gcmV0dXJuZWRcbiAgLy8gYmVmb3JlIGl0IHN0YXJ0ZWQgaGlkaW5nXG5cblxuICBwb3BwZXIuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoaW5zdGFuY2UucHJvcHMuaW50ZXJhY3RpdmUgJiYgaW5zdGFuY2Uuc3RhdGUuaXNWaXNpYmxlKSB7XG4gICAgICBpbnN0YW5jZS5jbGVhckRlbGF5VGltZW91dHMoKTtcbiAgICB9XG4gIH0pO1xuICBwb3BwZXIuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIGlmIChpbnN0YW5jZS5wcm9wcy5pbnRlcmFjdGl2ZSAmJiBpbnN0YW5jZS5wcm9wcy50cmlnZ2VyLmluZGV4T2YoJ21vdXNlZW50ZXInKSA+PSAwKSB7XG4gICAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgZGVib3VuY2VkT25Nb3VzZU1vdmUpO1xuICAgICAgZGVib3VuY2VkT25Nb3VzZU1vdmUoZXZlbnQpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBpbnN0YW5jZTsgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIC8vIPCflJIgUHJpdmF0ZSBtZXRob2RzXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIGdldE5vcm1hbGl6ZWRUb3VjaFNldHRpbmdzKCkge1xuICAgIHZhciB0b3VjaCA9IGluc3RhbmNlLnByb3BzLnRvdWNoO1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHRvdWNoKSA/IHRvdWNoIDogW3RvdWNoLCAwXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldElzQ3VzdG9tVG91Y2hCZWhhdmlvcigpIHtcbiAgICByZXR1cm4gZ2V0Tm9ybWFsaXplZFRvdWNoU2V0dGluZ3MoKVswXSA9PT0gJ2hvbGQnO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0SXNEZWZhdWx0UmVuZGVyRm4oKSB7XG4gICAgdmFyIF9pbnN0YW5jZSRwcm9wcyRyZW5kZTtcblxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICByZXR1cm4gISEoKF9pbnN0YW5jZSRwcm9wcyRyZW5kZSA9IGluc3RhbmNlLnByb3BzLnJlbmRlcikgPT0gbnVsbCA/IHZvaWQgMCA6IF9pbnN0YW5jZSRwcm9wcyRyZW5kZS4kJHRpcHB5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEN1cnJlbnRUYXJnZXQoKSB7XG4gICAgcmV0dXJuIGN1cnJlbnRUYXJnZXQgfHwgcmVmZXJlbmNlO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0RGVmYXVsdFRlbXBsYXRlQ2hpbGRyZW4oKSB7XG4gICAgcmV0dXJuIGdldENoaWxkcmVuKHBvcHBlcik7XG4gIH1cblxuICBmdW5jdGlvbiBnZXREZWxheShpc1Nob3cpIHtcbiAgICAvLyBGb3IgdG91Y2ggb3Iga2V5Ym9hcmQgaW5wdXQsIGZvcmNlIGAwYCBkZWxheSBmb3IgVVggcmVhc29uc1xuICAgIC8vIEFsc28gaWYgdGhlIGluc3RhbmNlIGlzIG1vdW50ZWQgYnV0IG5vdCB2aXNpYmxlICh0cmFuc2l0aW9uaW5nIG91dCksXG4gICAgLy8gaWdub3JlIGRlbGF5XG4gICAgaWYgKGluc3RhbmNlLnN0YXRlLmlzTW91bnRlZCAmJiAhaW5zdGFuY2Uuc3RhdGUuaXNWaXNpYmxlIHx8IGN1cnJlbnRJbnB1dC5pc1RvdWNoIHx8IGxhc3RUcmlnZ2VyRXZlbnQgJiYgbGFzdFRyaWdnZXJFdmVudC50eXBlID09PSAnZm9jdXMnKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2V0VmFsdWVBdEluZGV4T3JSZXR1cm4oaW5zdGFuY2UucHJvcHMuZGVsYXksIGlzU2hvdyA/IDAgOiAxLCBkZWZhdWx0UHJvcHMuZGVsYXkpO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlU3R5bGVzKCkge1xuICAgIHBvcHBlci5zdHlsZS5wb2ludGVyRXZlbnRzID0gaW5zdGFuY2UucHJvcHMuaW50ZXJhY3RpdmUgJiYgaW5zdGFuY2Uuc3RhdGUuaXNWaXNpYmxlID8gJycgOiAnbm9uZSc7XG4gICAgcG9wcGVyLnN0eWxlLnpJbmRleCA9IFwiXCIgKyBpbnN0YW5jZS5wcm9wcy56SW5kZXg7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVJT1NDbGFzcyhpc0FkZCkge1xuICAgIHZhciBzaG91bGRBZGQgPSBpc0FkZCAmJiBpc0lPUyAmJiBjdXJyZW50SW5wdXQuaXNUb3VjaDtcbiAgICBkb2MuYm9keS5jbGFzc0xpc3Rbc2hvdWxkQWRkID8gJ2FkZCcgOiAncmVtb3ZlJ10oSU9TX0NMQVNTKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZUhvb2soaG9vaywgYXJncywgc2hvdWxkSW52b2tlUHJvcHNIb29rKSB7XG4gICAgaWYgKHNob3VsZEludm9rZVByb3BzSG9vayA9PT0gdm9pZCAwKSB7XG4gICAgICBzaG91bGRJbnZva2VQcm9wc0hvb2sgPSB0cnVlO1xuICAgIH1cblxuICAgIHBsdWdpbnNIb29rcy5mb3JFYWNoKGZ1bmN0aW9uIChwbHVnaW5Ib29rcykge1xuICAgICAgaWYgKHBsdWdpbkhvb2tzW2hvb2tdKSB7XG4gICAgICAgIHBsdWdpbkhvb2tzW2hvb2tdLmFwcGx5KHZvaWQgMCwgYXJncyk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoc2hvdWxkSW52b2tlUHJvcHNIb29rKSB7XG4gICAgICB2YXIgX2luc3RhbmNlJHByb3BzO1xuXG4gICAgICAoX2luc3RhbmNlJHByb3BzID0gaW5zdGFuY2UucHJvcHMpW2hvb2tdLmFwcGx5KF9pbnN0YW5jZSRwcm9wcywgYXJncyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlQXJpYUNvbnRlbnRBdHRyaWJ1dGUoKSB7XG4gICAgdmFyIGFyaWEgPSBpbnN0YW5jZS5wcm9wcy5hcmlhO1xuXG4gICAgaWYgKCFhcmlhLmNvbnRlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgYXR0ciA9IFwiYXJpYS1cIiArIGFyaWEuY29udGVudDtcbiAgICB2YXIgaWQgPSBwb3BwZXIuaWQ7XG4gICAgdmFyIG5vZGVzID0gbm9ybWFsaXplVG9BcnJheShpbnN0YW5jZS5wcm9wcy50cmlnZ2VyVGFyZ2V0IHx8IHJlZmVyZW5jZSk7XG4gICAgbm9kZXMuZm9yRWFjaChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgdmFyIGN1cnJlbnRWYWx1ZSA9IG5vZGUuZ2V0QXR0cmlidXRlKGF0dHIpO1xuXG4gICAgICBpZiAoaW5zdGFuY2Uuc3RhdGUuaXNWaXNpYmxlKSB7XG4gICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKGF0dHIsIGN1cnJlbnRWYWx1ZSA/IGN1cnJlbnRWYWx1ZSArIFwiIFwiICsgaWQgOiBpZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgbmV4dFZhbHVlID0gY3VycmVudFZhbHVlICYmIGN1cnJlbnRWYWx1ZS5yZXBsYWNlKGlkLCAnJykudHJpbSgpO1xuXG4gICAgICAgIGlmIChuZXh0VmFsdWUpIHtcbiAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShhdHRyLCBuZXh0VmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKGF0dHIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVBcmlhRXhwYW5kZWRBdHRyaWJ1dGUoKSB7XG4gICAgaWYgKGhhc0FyaWFFeHBhbmRlZCB8fCAhaW5zdGFuY2UucHJvcHMuYXJpYS5leHBhbmRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBub2RlcyA9IG5vcm1hbGl6ZVRvQXJyYXkoaW5zdGFuY2UucHJvcHMudHJpZ2dlclRhcmdldCB8fCByZWZlcmVuY2UpO1xuICAgIG5vZGVzLmZvckVhY2goZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIGlmIChpbnN0YW5jZS5wcm9wcy5pbnRlcmFjdGl2ZSkge1xuICAgICAgICBub2RlLnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsIGluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZSAmJiBub2RlID09PSBnZXRDdXJyZW50VGFyZ2V0KCkgPyAndHJ1ZScgOiAnZmFsc2UnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBjbGVhbnVwSW50ZXJhY3RpdmVNb3VzZUxpc3RlbmVycygpIHtcbiAgICBkb2MuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgc2NoZWR1bGVIaWRlKTtcbiAgICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgZGVib3VuY2VkT25Nb3VzZU1vdmUpO1xuICAgIG1vdXNlTW92ZUxpc3RlbmVycyA9IG1vdXNlTW92ZUxpc3RlbmVycy5maWx0ZXIoZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gbGlzdGVuZXIgIT09IGRlYm91bmNlZE9uTW91c2VNb3ZlO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gb25Eb2N1bWVudE1vdXNlRG93bihldmVudCkge1xuICAgIC8vIENsaWNrZWQgb24gaW50ZXJhY3RpdmUgcG9wcGVyXG4gICAgaWYgKGluc3RhbmNlLnByb3BzLmludGVyYWN0aXZlICYmIHBvcHBlci5jb250YWlucyhldmVudC50YXJnZXQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBDbGlja2VkIG9uIHRoZSBldmVudCBsaXN0ZW5lcnMgdGFyZ2V0XG5cblxuICAgIGlmIChnZXRDdXJyZW50VGFyZ2V0KCkuY29udGFpbnMoZXZlbnQudGFyZ2V0KSkge1xuICAgICAgaWYgKGN1cnJlbnRJbnB1dC5pc1RvdWNoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZSAmJiBpbnN0YW5jZS5wcm9wcy50cmlnZ2VyLmluZGV4T2YoJ2NsaWNrJykgPj0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGluc3RhbmNlLnByb3BzLm9uQ2xpY2tPdXRzaWRlKGluc3RhbmNlLCBldmVudCk7XG4gICAgfVxuXG4gICAgaWYgKGluc3RhbmNlLnByb3BzLmhpZGVPbkNsaWNrID09PSB0cnVlKSB7XG4gICAgICBpc1Zpc2libGVGcm9tQ2xpY2sgPSBmYWxzZTtcbiAgICAgIGluc3RhbmNlLmNsZWFyRGVsYXlUaW1lb3V0cygpO1xuICAgICAgaW5zdGFuY2UuaGlkZSgpOyAvLyBgbW91c2Vkb3duYCBldmVudCBpcyBmaXJlZCByaWdodCBiZWZvcmUgYGZvY3VzYCBpZiBwcmVzc2luZyB0aGVcbiAgICAgIC8vIGN1cnJlbnRUYXJnZXQuIFRoaXMgbGV0cyBhIHRpcHB5IHdpdGggYGZvY3VzYCB0cmlnZ2VyIGtub3cgdGhhdCBpdFxuICAgICAgLy8gc2hvdWxkIG5vdCBzaG93XG5cbiAgICAgIGRpZEhpZGVEdWVUb0RvY3VtZW50TW91c2VEb3duID0gdHJ1ZTtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBkaWRIaWRlRHVlVG9Eb2N1bWVudE1vdXNlRG93biA9IGZhbHNlO1xuICAgICAgfSk7IC8vIFRoZSBsaXN0ZW5lciBnZXRzIGFkZGVkIGluIGBzY2hlZHVsZVNob3coKWAsIGJ1dCB0aGlzIG1heSBiZSBoaWRpbmcgaXRcbiAgICAgIC8vIGJlZm9yZSBpdCBzaG93cywgYW5kIGhpZGUoKSdzIGVhcmx5IGJhaWwtb3V0IGJlaGF2aW9yIGNhbiBwcmV2ZW50IGl0XG4gICAgICAvLyBmcm9tIGJlaW5nIGNsZWFuZWQgdXBcblxuICAgICAgaWYgKCFpbnN0YW5jZS5zdGF0ZS5pc01vdW50ZWQpIHtcbiAgICAgICAgcmVtb3ZlRG9jdW1lbnRNb3VzZURvd25MaXN0ZW5lcigpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZERvY3VtZW50TW91c2VEb3duTGlzdGVuZXIoKSB7XG4gICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIG9uRG9jdW1lbnRNb3VzZURvd24sIHRydWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlRG9jdW1lbnRNb3VzZURvd25MaXN0ZW5lcigpIHtcbiAgICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgb25Eb2N1bWVudE1vdXNlRG93biwgdHJ1ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBvblRyYW5zaXRpb25lZE91dChkdXJhdGlvbiwgY2FsbGJhY2spIHtcbiAgICBvblRyYW5zaXRpb25FbmQoZHVyYXRpb24sIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghaW5zdGFuY2Uuc3RhdGUuaXNWaXNpYmxlICYmIHBvcHBlci5wYXJlbnROb2RlICYmIHBvcHBlci5wYXJlbnROb2RlLmNvbnRhaW5zKHBvcHBlcikpIHtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uVHJhbnNpdGlvbmVkSW4oZHVyYXRpb24sIGNhbGxiYWNrKSB7XG4gICAgb25UcmFuc2l0aW9uRW5kKGR1cmF0aW9uLCBjYWxsYmFjayk7XG4gIH1cblxuICBmdW5jdGlvbiBvblRyYW5zaXRpb25FbmQoZHVyYXRpb24sIGNhbGxiYWNrKSB7XG4gICAgdmFyIGJveCA9IGdldERlZmF1bHRUZW1wbGF0ZUNoaWxkcmVuKCkuYm94O1xuXG4gICAgZnVuY3Rpb24gbGlzdGVuZXIoZXZlbnQpIHtcbiAgICAgIGlmIChldmVudC50YXJnZXQgPT09IGJveCkge1xuICAgICAgICB1cGRhdGVUcmFuc2l0aW9uRW5kTGlzdGVuZXIoYm94LCAncmVtb3ZlJywgbGlzdGVuZXIpO1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH0gLy8gTWFrZSBjYWxsYmFjayBzeW5jaHJvbm91cyBpZiBkdXJhdGlvbiBpcyAwXG4gICAgLy8gYHRyYW5zaXRpb25lbmRgIHdvbid0IGZpcmUgb3RoZXJ3aXNlXG5cblxuICAgIGlmIChkdXJhdGlvbiA9PT0gMCkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfVxuXG4gICAgdXBkYXRlVHJhbnNpdGlvbkVuZExpc3RlbmVyKGJveCwgJ3JlbW92ZScsIGN1cnJlbnRUcmFuc2l0aW9uRW5kTGlzdGVuZXIpO1xuICAgIHVwZGF0ZVRyYW5zaXRpb25FbmRMaXN0ZW5lcihib3gsICdhZGQnLCBsaXN0ZW5lcik7XG4gICAgY3VycmVudFRyYW5zaXRpb25FbmRMaXN0ZW5lciA9IGxpc3RlbmVyO1xuICB9XG5cbiAgZnVuY3Rpb24gb24oZXZlbnRUeXBlLCBoYW5kbGVyLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBub2RlcyA9IG5vcm1hbGl6ZVRvQXJyYXkoaW5zdGFuY2UucHJvcHMudHJpZ2dlclRhcmdldCB8fCByZWZlcmVuY2UpO1xuICAgIG5vZGVzLmZvckVhY2goZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICAgICAgbGlzdGVuZXJzLnB1c2goe1xuICAgICAgICBub2RlOiBub2RlLFxuICAgICAgICBldmVudFR5cGU6IGV2ZW50VHlwZSxcbiAgICAgICAgaGFuZGxlcjogaGFuZGxlcixcbiAgICAgICAgb3B0aW9uczogb3B0aW9uc1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBhZGRMaXN0ZW5lcnMoKSB7XG4gICAgaWYgKGdldElzQ3VzdG9tVG91Y2hCZWhhdmlvcigpKSB7XG4gICAgICBvbigndG91Y2hzdGFydCcsIG9uVHJpZ2dlciwgUEFTU0lWRSk7XG4gICAgICBvbigndG91Y2hlbmQnLCBvbk1vdXNlTGVhdmUsIFBBU1NJVkUpO1xuICAgIH1cblxuICAgIHNwbGl0QnlTcGFjZXMoaW5zdGFuY2UucHJvcHMudHJpZ2dlcikuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnRUeXBlKSB7XG4gICAgICBpZiAoZXZlbnRUeXBlID09PSAnbWFudWFsJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIG9uKGV2ZW50VHlwZSwgb25UcmlnZ2VyKTtcblxuICAgICAgc3dpdGNoIChldmVudFR5cGUpIHtcbiAgICAgICAgY2FzZSAnbW91c2VlbnRlcic6XG4gICAgICAgICAgb24oJ21vdXNlbGVhdmUnLCBvbk1vdXNlTGVhdmUpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2ZvY3VzJzpcbiAgICAgICAgICBvbihpc0lFID8gJ2ZvY3Vzb3V0JyA6ICdibHVyJywgb25CbHVyT3JGb2N1c091dCk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnZm9jdXNpbic6XG4gICAgICAgICAgb24oJ2ZvY3Vzb3V0Jywgb25CbHVyT3JGb2N1c091dCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcnMoKSB7XG4gICAgbGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgIHZhciBub2RlID0gX3JlZi5ub2RlLFxuICAgICAgICAgIGV2ZW50VHlwZSA9IF9yZWYuZXZlbnRUeXBlLFxuICAgICAgICAgIGhhbmRsZXIgPSBfcmVmLmhhbmRsZXIsXG4gICAgICAgICAgb3B0aW9ucyA9IF9yZWYub3B0aW9ucztcbiAgICAgIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICAgIH0pO1xuICAgIGxpc3RlbmVycyA9IFtdO1xuICB9XG5cbiAgZnVuY3Rpb24gb25UcmlnZ2VyKGV2ZW50KSB7XG4gICAgdmFyIHNob3VsZFNjaGVkdWxlQ2xpY2tIaWRlID0gZmFsc2U7XG5cbiAgICBpZiAoIWluc3RhbmNlLnN0YXRlLmlzRW5hYmxlZCB8fCBpc0V2ZW50TGlzdGVuZXJTdG9wcGVkKGV2ZW50KSB8fCBkaWRIaWRlRHVlVG9Eb2N1bWVudE1vdXNlRG93bikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxhc3RUcmlnZ2VyRXZlbnQgPSBldmVudDtcbiAgICBjdXJyZW50VGFyZ2V0ID0gZXZlbnQuY3VycmVudFRhcmdldDtcbiAgICBoYW5kbGVBcmlhRXhwYW5kZWRBdHRyaWJ1dGUoKTtcblxuICAgIGlmICghaW5zdGFuY2Uuc3RhdGUuaXNWaXNpYmxlICYmIGlzTW91c2VFdmVudChldmVudCkpIHtcbiAgICAgIC8vIElmIHNjcm9sbGluZywgYG1vdXNlZW50ZXJgIGV2ZW50cyBjYW4gYmUgZmlyZWQgaWYgdGhlIGN1cnNvciBsYW5kc1xuICAgICAgLy8gb3ZlciBhIG5ldyB0YXJnZXQsIGJ1dCBgbW91c2Vtb3ZlYCBldmVudHMgZG9uJ3QgZ2V0IGZpcmVkLiBUaGlzXG4gICAgICAvLyBjYXVzZXMgaW50ZXJhY3RpdmUgdG9vbHRpcHMgdG8gZ2V0IHN0dWNrIG9wZW4gdW50aWwgdGhlIGN1cnNvciBpc1xuICAgICAgLy8gbW92ZWRcbiAgICAgIG1vdXNlTW92ZUxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgICByZXR1cm4gbGlzdGVuZXIoZXZlbnQpO1xuICAgICAgfSk7XG4gICAgfSAvLyBUb2dnbGUgc2hvdy9oaWRlIHdoZW4gY2xpY2tpbmcgY2xpY2stdHJpZ2dlcmVkIHRvb2x0aXBzXG5cblxuICAgIGlmIChldmVudC50eXBlID09PSAnY2xpY2snICYmIChpbnN0YW5jZS5wcm9wcy50cmlnZ2VyLmluZGV4T2YoJ21vdXNlZW50ZXInKSA8IDAgfHwgaXNWaXNpYmxlRnJvbUNsaWNrKSAmJiBpbnN0YW5jZS5wcm9wcy5oaWRlT25DbGljayAhPT0gZmFsc2UgJiYgaW5zdGFuY2Uuc3RhdGUuaXNWaXNpYmxlKSB7XG4gICAgICBzaG91bGRTY2hlZHVsZUNsaWNrSGlkZSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfZ2V0Tm9ybWFsaXplZFRvdWNoU2UgPSBnZXROb3JtYWxpemVkVG91Y2hTZXR0aW5ncygpLFxuICAgICAgICAgIHZhbHVlID0gX2dldE5vcm1hbGl6ZWRUb3VjaFNlWzBdLFxuICAgICAgICAgIGR1cmF0aW9uID0gX2dldE5vcm1hbGl6ZWRUb3VjaFNlWzFdO1xuXG4gICAgICBpZiAoY3VycmVudElucHV0LmlzVG91Y2ggJiYgdmFsdWUgPT09ICdob2xkJyAmJiBkdXJhdGlvbikge1xuICAgICAgICAvLyBXZSBjYW4gaGlqYWNrIHRoZSBzaG93IHRpbWVvdXQgaGVyZSwgaXQgd2lsbCBiZSBjbGVhcmVkIGJ5XG4gICAgICAgIC8vIGBzY2hlZHVsZUhpZGUoKWAgd2hlbiBuZWNlc3NhcnlcbiAgICAgICAgc2hvd1RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzY2hlZHVsZVNob3coZXZlbnQpO1xuICAgICAgICB9LCBkdXJhdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzY2hlZHVsZVNob3coZXZlbnQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChldmVudC50eXBlID09PSAnY2xpY2snKSB7XG4gICAgICBpc1Zpc2libGVGcm9tQ2xpY2sgPSAhc2hvdWxkU2NoZWR1bGVDbGlja0hpZGU7XG4gICAgfVxuXG4gICAgaWYgKHNob3VsZFNjaGVkdWxlQ2xpY2tIaWRlKSB7XG4gICAgICBzY2hlZHVsZUhpZGUoZXZlbnQpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uTW91c2VNb3ZlKGV2ZW50KSB7XG4gICAgdmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcbiAgICB2YXIgaXNDdXJzb3JPdmVyUmVmZXJlbmNlT3JQb3BwZXIgPSByZWZlcmVuY2UuY29udGFpbnModGFyZ2V0KSB8fCBwb3BwZXIuY29udGFpbnModGFyZ2V0KTtcblxuICAgIGlmIChldmVudC50eXBlID09PSAnbW91c2Vtb3ZlJyAmJiBpc0N1cnNvck92ZXJSZWZlcmVuY2VPclBvcHBlcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBwb3BwZXJUcmVlRGF0YSA9IGdldE5lc3RlZFBvcHBlclRyZWUoKS5jb25jYXQocG9wcGVyKS5tYXAoZnVuY3Rpb24gKHBvcHBlcikge1xuICAgICAgdmFyIF9pbnN0YW5jZSRwb3BwZXJJbnN0YTtcblxuICAgICAgdmFyIGluc3RhbmNlID0gcG9wcGVyLl90aXBweTtcbiAgICAgIHZhciBzdGF0ZSA9IChfaW5zdGFuY2UkcG9wcGVySW5zdGEgPSBpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9pbnN0YW5jZSRwb3BwZXJJbnN0YS5zdGF0ZTtcblxuICAgICAgaWYgKHN0YXRlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcG9wcGVyUmVjdDogcG9wcGVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgICAgIHBvcHBlclN0YXRlOiBzdGF0ZSxcbiAgICAgICAgICBwcm9wczogcHJvcHNcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSkuZmlsdGVyKEJvb2xlYW4pO1xuXG4gICAgaWYgKGlzQ3Vyc29yT3V0c2lkZUludGVyYWN0aXZlQm9yZGVyKHBvcHBlclRyZWVEYXRhLCBldmVudCkpIHtcbiAgICAgIGNsZWFudXBJbnRlcmFjdGl2ZU1vdXNlTGlzdGVuZXJzKCk7XG4gICAgICBzY2hlZHVsZUhpZGUoZXZlbnQpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uTW91c2VMZWF2ZShldmVudCkge1xuICAgIHZhciBzaG91bGRCYWlsID0gaXNFdmVudExpc3RlbmVyU3RvcHBlZChldmVudCkgfHwgaW5zdGFuY2UucHJvcHMudHJpZ2dlci5pbmRleE9mKCdjbGljaycpID49IDAgJiYgaXNWaXNpYmxlRnJvbUNsaWNrO1xuXG4gICAgaWYgKHNob3VsZEJhaWwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaW5zdGFuY2UucHJvcHMuaW50ZXJhY3RpdmUpIHtcbiAgICAgIGRvYy5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCBzY2hlZHVsZUhpZGUpO1xuICAgICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGRlYm91bmNlZE9uTW91c2VNb3ZlKTtcbiAgICAgIHB1c2hJZlVuaXF1ZShtb3VzZU1vdmVMaXN0ZW5lcnMsIGRlYm91bmNlZE9uTW91c2VNb3ZlKTtcbiAgICAgIGRlYm91bmNlZE9uTW91c2VNb3ZlKGV2ZW50KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzY2hlZHVsZUhpZGUoZXZlbnQpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25CbHVyT3JGb2N1c091dChldmVudCkge1xuICAgIGlmIChpbnN0YW5jZS5wcm9wcy50cmlnZ2VyLmluZGV4T2YoJ2ZvY3VzaW4nKSA8IDAgJiYgZXZlbnQudGFyZ2V0ICE9PSBnZXRDdXJyZW50VGFyZ2V0KCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIElmIGZvY3VzIHdhcyBtb3ZlZCB0byB3aXRoaW4gdGhlIHBvcHBlclxuXG5cbiAgICBpZiAoaW5zdGFuY2UucHJvcHMuaW50ZXJhY3RpdmUgJiYgZXZlbnQucmVsYXRlZFRhcmdldCAmJiBwb3BwZXIuY29udGFpbnMoZXZlbnQucmVsYXRlZFRhcmdldCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzY2hlZHVsZUhpZGUoZXZlbnQpO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNFdmVudExpc3RlbmVyU3RvcHBlZChldmVudCkge1xuICAgIHJldHVybiBjdXJyZW50SW5wdXQuaXNUb3VjaCA/IGdldElzQ3VzdG9tVG91Y2hCZWhhdmlvcigpICE9PSBldmVudC50eXBlLmluZGV4T2YoJ3RvdWNoJykgPj0gMCA6IGZhbHNlO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlUG9wcGVySW5zdGFuY2UoKSB7XG4gICAgZGVzdHJveVBvcHBlckluc3RhbmNlKCk7XG4gICAgdmFyIF9pbnN0YW5jZSRwcm9wczIgPSBpbnN0YW5jZS5wcm9wcyxcbiAgICAgICAgcG9wcGVyT3B0aW9ucyA9IF9pbnN0YW5jZSRwcm9wczIucG9wcGVyT3B0aW9ucyxcbiAgICAgICAgcGxhY2VtZW50ID0gX2luc3RhbmNlJHByb3BzMi5wbGFjZW1lbnQsXG4gICAgICAgIG9mZnNldCA9IF9pbnN0YW5jZSRwcm9wczIub2Zmc2V0LFxuICAgICAgICBnZXRSZWZlcmVuY2VDbGllbnRSZWN0ID0gX2luc3RhbmNlJHByb3BzMi5nZXRSZWZlcmVuY2VDbGllbnRSZWN0LFxuICAgICAgICBtb3ZlVHJhbnNpdGlvbiA9IF9pbnN0YW5jZSRwcm9wczIubW92ZVRyYW5zaXRpb247XG4gICAgdmFyIGFycm93ID0gZ2V0SXNEZWZhdWx0UmVuZGVyRm4oKSA/IGdldENoaWxkcmVuKHBvcHBlcikuYXJyb3cgOiBudWxsO1xuICAgIHZhciBjb21wdXRlZFJlZmVyZW5jZSA9IGdldFJlZmVyZW5jZUNsaWVudFJlY3QgPyB7XG4gICAgICBnZXRCb3VuZGluZ0NsaWVudFJlY3Q6IGdldFJlZmVyZW5jZUNsaWVudFJlY3RcbiAgICB9IDogcmVmZXJlbmNlO1xuICAgIHZhciB0aXBweU1vZGlmaWVyID0ge1xuICAgICAgbmFtZTogJyQkdGlwcHknLFxuICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgIHBoYXNlOiAnYmVmb3JlV3JpdGUnLFxuICAgICAgcmVxdWlyZXM6IFsnY29tcHV0ZVN0eWxlcyddLFxuICAgICAgZm46IGZ1bmN0aW9uIGZuKF9yZWYyKSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IF9yZWYyLnN0YXRlO1xuXG4gICAgICAgIGlmIChnZXRJc0RlZmF1bHRSZW5kZXJGbigpKSB7XG4gICAgICAgICAgdmFyIF9nZXREZWZhdWx0VGVtcGxhdGVDaCA9IGdldERlZmF1bHRUZW1wbGF0ZUNoaWxkcmVuKCksXG4gICAgICAgICAgICAgIGJveCA9IF9nZXREZWZhdWx0VGVtcGxhdGVDaC5ib3g7XG5cbiAgICAgICAgICBbJ3BsYWNlbWVudCcsICdyZWZlcmVuY2UtaGlkZGVuJywgJ2VzY2FwZWQnXS5mb3JFYWNoKGZ1bmN0aW9uIChhdHRyKSB7XG4gICAgICAgICAgICBpZiAoYXR0ciA9PT0gJ3BsYWNlbWVudCcpIHtcbiAgICAgICAgICAgICAgYm94LnNldEF0dHJpYnV0ZSgnZGF0YS1wbGFjZW1lbnQnLCBzdGF0ZS5wbGFjZW1lbnQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKHN0YXRlLmF0dHJpYnV0ZXMucG9wcGVyW1wiZGF0YS1wb3BwZXItXCIgKyBhdHRyXSkge1xuICAgICAgICAgICAgICAgIGJveC5zZXRBdHRyaWJ1dGUoXCJkYXRhLVwiICsgYXR0ciwgJycpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGJveC5yZW1vdmVBdHRyaWJ1dGUoXCJkYXRhLVwiICsgYXR0cik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzdGF0ZS5hdHRyaWJ1dGVzLnBvcHBlciA9IHt9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgYXJyb3dNb2RpZmllciA9IHtcbiAgICAgIG5hbWU6ICdhcnJvdycsXG4gICAgICBlbmFibGVkOiAhIWFycm93LFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICBlbGVtZW50OiBhcnJvdyxcbiAgICAgICAgcGFkZGluZzogM1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIG1vZGlmaWVycyA9IFt7XG4gICAgICBuYW1lOiAnb2Zmc2V0JyxcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgb2Zmc2V0OiBvZmZzZXRcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBuYW1lOiAncHJldmVudE92ZXJmbG93JyxcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgcGFkZGluZzoge1xuICAgICAgICAgIHRvcDogMixcbiAgICAgICAgICBib3R0b206IDIsXG4gICAgICAgICAgbGVmdDogNSxcbiAgICAgICAgICByaWdodDogNVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAgbmFtZTogJ2ZsaXAnLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICBwYWRkaW5nOiA1XG4gICAgICB9XG4gICAgfSwge1xuICAgICAgbmFtZTogJ2NvbXB1dGVTdHlsZXMnLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICBhZGFwdGl2ZTogIW1vdmVUcmFuc2l0aW9uXG4gICAgICB9XG4gICAgfV0uY29uY2F0KGdldElzRGVmYXVsdFJlbmRlckZuKCkgPyBbYXJyb3dNb2RpZmllcl0gOiBbXSwgKHBvcHBlck9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IHBvcHBlck9wdGlvbnMubW9kaWZpZXJzKSB8fCBbXSwgW3RpcHB5TW9kaWZpZXJdKTtcbiAgICBpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZSA9IGNvcmUuY3JlYXRlUG9wcGVyKGNvbXB1dGVkUmVmZXJlbmNlLCBwb3BwZXIsIE9iamVjdC5hc3NpZ24oe30sIHBvcHBlck9wdGlvbnMsIHtcbiAgICAgIHBsYWNlbWVudDogcGxhY2VtZW50LFxuICAgICAgb25GaXJzdFVwZGF0ZTogb25GaXJzdFVwZGF0ZSxcbiAgICAgIG1vZGlmaWVyczogbW9kaWZpZXJzXG4gICAgfSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVzdHJveVBvcHBlckluc3RhbmNlKCkge1xuICAgIGlmIChpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZSkge1xuICAgICAgaW5zdGFuY2UucG9wcGVySW5zdGFuY2UuZGVzdHJveSgpO1xuICAgICAgaW5zdGFuY2UucG9wcGVySW5zdGFuY2UgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG1vdW50KCkge1xuICAgIHZhciBhcHBlbmRUbyA9IGluc3RhbmNlLnByb3BzLmFwcGVuZFRvO1xuICAgIHZhciBwYXJlbnROb2RlOyAvLyBCeSBkZWZhdWx0LCB3ZSdsbCBhcHBlbmQgdGhlIHBvcHBlciB0byB0aGUgdHJpZ2dlclRhcmdldHMncyBwYXJlbnROb2RlIHNvXG4gICAgLy8gaXQncyBkaXJlY3RseSBhZnRlciB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgc28gdGhlIGVsZW1lbnRzIGluc2lkZSB0aGVcbiAgICAvLyB0aXBweSBjYW4gYmUgdGFiYmVkIHRvXG4gICAgLy8gSWYgdGhlcmUgYXJlIGNsaXBwaW5nIGlzc3VlcywgdGhlIHVzZXIgY2FuIHNwZWNpZnkgYSBkaWZmZXJlbnQgYXBwZW5kVG9cbiAgICAvLyBhbmQgZW5zdXJlIGZvY3VzIG1hbmFnZW1lbnQgaXMgaGFuZGxlZCBjb3JyZWN0bHkgbWFudWFsbHlcblxuICAgIHZhciBub2RlID0gZ2V0Q3VycmVudFRhcmdldCgpO1xuXG4gICAgaWYgKGluc3RhbmNlLnByb3BzLmludGVyYWN0aXZlICYmIGFwcGVuZFRvID09PSBkZWZhdWx0UHJvcHMuYXBwZW5kVG8gfHwgYXBwZW5kVG8gPT09ICdwYXJlbnQnKSB7XG4gICAgICBwYXJlbnROb2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXJlbnROb2RlID0gaW52b2tlV2l0aEFyZ3NPclJldHVybihhcHBlbmRUbywgW25vZGVdKTtcbiAgICB9IC8vIFRoZSBwb3BwZXIgZWxlbWVudCBuZWVkcyB0byBleGlzdCBvbiB0aGUgRE9NIGJlZm9yZSBpdHMgcG9zaXRpb24gY2FuIGJlXG4gICAgLy8gdXBkYXRlZCBhcyBQb3BwZXIgbmVlZHMgdG8gcmVhZCBpdHMgZGltZW5zaW9uc1xuXG5cbiAgICBpZiAoIXBhcmVudE5vZGUuY29udGFpbnMocG9wcGVyKSkge1xuICAgICAgcGFyZW50Tm9kZS5hcHBlbmRDaGlsZChwb3BwZXIpO1xuICAgIH1cblxuICAgIGNyZWF0ZVBvcHBlckluc3RhbmNlKCk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIC8vIEFjY2Vzc2liaWxpdHkgY2hlY2tcbiAgICAgIHdhcm5XaGVuKGluc3RhbmNlLnByb3BzLmludGVyYWN0aXZlICYmIGFwcGVuZFRvID09PSBkZWZhdWx0UHJvcHMuYXBwZW5kVG8gJiYgbm9kZS5uZXh0RWxlbWVudFNpYmxpbmcgIT09IHBvcHBlciwgWydJbnRlcmFjdGl2ZSB0aXBweSBlbGVtZW50IG1heSBub3QgYmUgYWNjZXNzaWJsZSB2aWEga2V5Ym9hcmQnLCAnbmF2aWdhdGlvbiBiZWNhdXNlIGl0IGlzIG5vdCBkaXJlY3RseSBhZnRlciB0aGUgcmVmZXJlbmNlIGVsZW1lbnQnLCAnaW4gdGhlIERPTSBzb3VyY2Ugb3JkZXIuJywgJ1xcblxcbicsICdVc2luZyBhIHdyYXBwZXIgPGRpdj4gb3IgPHNwYW4+IHRhZyBhcm91bmQgdGhlIHJlZmVyZW5jZSBlbGVtZW50JywgJ3NvbHZlcyB0aGlzIGJ5IGNyZWF0aW5nIGEgbmV3IHBhcmVudE5vZGUgY29udGV4dC4nLCAnXFxuXFxuJywgJ1NwZWNpZnlpbmcgYGFwcGVuZFRvOiBkb2N1bWVudC5ib2R5YCBzaWxlbmNlcyB0aGlzIHdhcm5pbmcsIGJ1dCBpdCcsICdhc3N1bWVzIHlvdSBhcmUgdXNpbmcgYSBmb2N1cyBtYW5hZ2VtZW50IHNvbHV0aW9uIHRvIGhhbmRsZScsICdrZXlib2FyZCBuYXZpZ2F0aW9uLicsICdcXG5cXG4nLCAnU2VlOiBodHRwczovL2F0b21pa3MuZ2l0aHViLmlvL3RpcHB5anMvdjYvYWNjZXNzaWJpbGl0eS8jaW50ZXJhY3Rpdml0eSddLmpvaW4oJyAnKSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0TmVzdGVkUG9wcGVyVHJlZSgpIHtcbiAgICByZXR1cm4gYXJyYXlGcm9tKHBvcHBlci5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS10aXBweS1yb290XScpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNjaGVkdWxlU2hvdyhldmVudCkge1xuICAgIGluc3RhbmNlLmNsZWFyRGVsYXlUaW1lb3V0cygpO1xuXG4gICAgaWYgKGV2ZW50KSB7XG4gICAgICBpbnZva2VIb29rKCdvblRyaWdnZXInLCBbaW5zdGFuY2UsIGV2ZW50XSk7XG4gICAgfVxuXG4gICAgYWRkRG9jdW1lbnRNb3VzZURvd25MaXN0ZW5lcigpO1xuICAgIHZhciBkZWxheSA9IGdldERlbGF5KHRydWUpO1xuXG4gICAgaWYgKGRlbGF5KSB7XG4gICAgICBzaG93VGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBpbnN0YW5jZS5zaG93KCk7XG4gICAgICB9LCBkZWxheSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluc3RhbmNlLnNob3coKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzY2hlZHVsZUhpZGUoZXZlbnQpIHtcbiAgICBpbnN0YW5jZS5jbGVhckRlbGF5VGltZW91dHMoKTtcbiAgICBpbnZva2VIb29rKCdvblVudHJpZ2dlcicsIFtpbnN0YW5jZSwgZXZlbnRdKTtcblxuICAgIGlmICghaW5zdGFuY2Uuc3RhdGUuaXNWaXNpYmxlKSB7XG4gICAgICByZW1vdmVEb2N1bWVudE1vdXNlRG93bkxpc3RlbmVyKCk7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBGb3IgaW50ZXJhY3RpdmUgdGlwcGllcywgc2NoZWR1bGVIaWRlIGlzIGFkZGVkIHRvIGEgZG9jdW1lbnQuYm9keSBoYW5kbGVyXG4gICAgLy8gZnJvbSBvbk1vdXNlTGVhdmUgc28gbXVzdCBpbnRlcmNlcHQgc2NoZWR1bGVkIGhpZGVzIGZyb20gbW91c2Vtb3ZlL2xlYXZlXG4gICAgLy8gZXZlbnRzIHdoZW4gdHJpZ2dlciBjb250YWlucyBtb3VzZWVudGVyIGFuZCBjbGljaywgYW5kIHRoZSB0aXAgaXNcbiAgICAvLyBjdXJyZW50bHkgc2hvd24gYXMgYSByZXN1bHQgb2YgYSBjbGljay5cblxuXG4gICAgaWYgKGluc3RhbmNlLnByb3BzLnRyaWdnZXIuaW5kZXhPZignbW91c2VlbnRlcicpID49IDAgJiYgaW5zdGFuY2UucHJvcHMudHJpZ2dlci5pbmRleE9mKCdjbGljaycpID49IDAgJiYgWydtb3VzZWxlYXZlJywgJ21vdXNlbW92ZSddLmluZGV4T2YoZXZlbnQudHlwZSkgPj0gMCAmJiBpc1Zpc2libGVGcm9tQ2xpY2spIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZGVsYXkgPSBnZXREZWxheShmYWxzZSk7XG5cbiAgICBpZiAoZGVsYXkpIHtcbiAgICAgIGhpZGVUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChpbnN0YW5jZS5zdGF0ZS5pc1Zpc2libGUpIHtcbiAgICAgICAgICBpbnN0YW5jZS5oaWRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0sIGRlbGF5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gRml4ZXMgYSBgdHJhbnNpdGlvbmVuZGAgcHJvYmxlbSB3aGVuIGl0IGZpcmVzIDEgZnJhbWUgdG9vXG4gICAgICAvLyBsYXRlIHNvbWV0aW1lcywgd2UgZG9uJ3Qgd2FudCBoaWRlKCkgdG8gYmUgY2FsbGVkLlxuICAgICAgc2NoZWR1bGVIaWRlQW5pbWF0aW9uRnJhbWUgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICBpbnN0YW5jZS5oaWRlKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0gLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIC8vIPCflJEgUHVibGljIG1ldGhvZHNcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cblxuICBmdW5jdGlvbiBlbmFibGUoKSB7XG4gICAgaW5zdGFuY2Uuc3RhdGUuaXNFbmFibGVkID0gdHJ1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gICAgLy8gRGlzYWJsaW5nIHRoZSBpbnN0YW5jZSBzaG91bGQgYWxzbyBoaWRlIGl0XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2F0b21pa3MvdGlwcHkuanMtcmVhY3QvaXNzdWVzLzEwNlxuICAgIGluc3RhbmNlLmhpZGUoKTtcbiAgICBpbnN0YW5jZS5zdGF0ZS5pc0VuYWJsZWQgPSBmYWxzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsZWFyRGVsYXlUaW1lb3V0cygpIHtcbiAgICBjbGVhclRpbWVvdXQoc2hvd1RpbWVvdXQpO1xuICAgIGNsZWFyVGltZW91dChoaWRlVGltZW91dCk7XG4gICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoc2NoZWR1bGVIaWRlQW5pbWF0aW9uRnJhbWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0UHJvcHMocGFydGlhbFByb3BzKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICB3YXJuV2hlbihpbnN0YW5jZS5zdGF0ZS5pc0Rlc3Ryb3llZCwgY3JlYXRlTWVtb3J5TGVha1dhcm5pbmcoJ3NldFByb3BzJykpO1xuICAgIH1cblxuICAgIGlmIChpbnN0YW5jZS5zdGF0ZS5pc0Rlc3Ryb3llZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGludm9rZUhvb2soJ29uQmVmb3JlVXBkYXRlJywgW2luc3RhbmNlLCBwYXJ0aWFsUHJvcHNdKTtcbiAgICByZW1vdmVMaXN0ZW5lcnMoKTtcbiAgICB2YXIgcHJldlByb3BzID0gaW5zdGFuY2UucHJvcHM7XG4gICAgdmFyIG5leHRQcm9wcyA9IGV2YWx1YXRlUHJvcHMocmVmZXJlbmNlLCBPYmplY3QuYXNzaWduKHt9LCBpbnN0YW5jZS5wcm9wcywge30sIHBhcnRpYWxQcm9wcywge1xuICAgICAgaWdub3JlQXR0cmlidXRlczogdHJ1ZVxuICAgIH0pKTtcbiAgICBpbnN0YW5jZS5wcm9wcyA9IG5leHRQcm9wcztcbiAgICBhZGRMaXN0ZW5lcnMoKTtcblxuICAgIGlmIChwcmV2UHJvcHMuaW50ZXJhY3RpdmVEZWJvdW5jZSAhPT0gbmV4dFByb3BzLmludGVyYWN0aXZlRGVib3VuY2UpIHtcbiAgICAgIGNsZWFudXBJbnRlcmFjdGl2ZU1vdXNlTGlzdGVuZXJzKCk7XG4gICAgICBkZWJvdW5jZWRPbk1vdXNlTW92ZSA9IGRlYm91bmNlKG9uTW91c2VNb3ZlLCBuZXh0UHJvcHMuaW50ZXJhY3RpdmVEZWJvdW5jZSk7XG4gICAgfSAvLyBFbnN1cmUgc3RhbGUgYXJpYS1leHBhbmRlZCBhdHRyaWJ1dGVzIGFyZSByZW1vdmVkXG5cblxuICAgIGlmIChwcmV2UHJvcHMudHJpZ2dlclRhcmdldCAmJiAhbmV4dFByb3BzLnRyaWdnZXJUYXJnZXQpIHtcbiAgICAgIG5vcm1hbGl6ZVRvQXJyYXkocHJldlByb3BzLnRyaWdnZXJUYXJnZXQpLmZvckVhY2goZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAobmV4dFByb3BzLnRyaWdnZXJUYXJnZXQpIHtcbiAgICAgIHJlZmVyZW5jZS5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnKTtcbiAgICB9XG5cbiAgICBoYW5kbGVBcmlhRXhwYW5kZWRBdHRyaWJ1dGUoKTtcbiAgICBoYW5kbGVTdHlsZXMoKTtcblxuICAgIGlmIChvblVwZGF0ZSkge1xuICAgICAgb25VcGRhdGUocHJldlByb3BzLCBuZXh0UHJvcHMpO1xuICAgIH1cblxuICAgIGlmIChpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZSkge1xuICAgICAgY3JlYXRlUG9wcGVySW5zdGFuY2UoKTsgLy8gRml4ZXMgYW4gaXNzdWUgd2l0aCBuZXN0ZWQgdGlwcGllcyBpZiB0aGV5IGFyZSBhbGwgZ2V0dGluZyByZS1yZW5kZXJlZCxcbiAgICAgIC8vIGFuZCB0aGUgbmVzdGVkIG9uZXMgZ2V0IHJlLXJlbmRlcmVkIGZpcnN0LlxuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2F0b21pa3MvdGlwcHlqcy1yZWFjdC9pc3N1ZXMvMTc3XG4gICAgICAvLyBUT0RPOiBmaW5kIGEgY2xlYW5lciAvIG1vcmUgZWZmaWNpZW50IHNvbHV0aW9uKCEpXG5cbiAgICAgIGdldE5lc3RlZFBvcHBlclRyZWUoKS5mb3JFYWNoKGZ1bmN0aW9uIChuZXN0ZWRQb3BwZXIpIHtcbiAgICAgICAgLy8gUmVhY3QgKGFuZCBvdGhlciBVSSBsaWJzIGxpa2VseSkgcmVxdWlyZXMgYSByQUYgd3JhcHBlciBhcyBpdCBmbHVzaGVzXG4gICAgICAgIC8vIGl0cyB3b3JrIGluIG9uZVxuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUobmVzdGVkUG9wcGVyLl90aXBweS5wb3BwZXJJbnN0YW5jZS5mb3JjZVVwZGF0ZSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpbnZva2VIb29rKCdvbkFmdGVyVXBkYXRlJywgW2luc3RhbmNlLCBwYXJ0aWFsUHJvcHNdKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldENvbnRlbnQoY29udGVudCkge1xuICAgIGluc3RhbmNlLnNldFByb3BzKHtcbiAgICAgIGNvbnRlbnQ6IGNvbnRlbnRcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNob3coKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICB3YXJuV2hlbihpbnN0YW5jZS5zdGF0ZS5pc0Rlc3Ryb3llZCwgY3JlYXRlTWVtb3J5TGVha1dhcm5pbmcoJ3Nob3cnKSk7XG4gICAgfSAvLyBFYXJseSBiYWlsLW91dFxuXG5cbiAgICB2YXIgaXNBbHJlYWR5VmlzaWJsZSA9IGluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZTtcbiAgICB2YXIgaXNEZXN0cm95ZWQgPSBpbnN0YW5jZS5zdGF0ZS5pc0Rlc3Ryb3llZDtcbiAgICB2YXIgaXNEaXNhYmxlZCA9ICFpbnN0YW5jZS5zdGF0ZS5pc0VuYWJsZWQ7XG4gICAgdmFyIGlzVG91Y2hBbmRUb3VjaERpc2FibGVkID0gY3VycmVudElucHV0LmlzVG91Y2ggJiYgIWluc3RhbmNlLnByb3BzLnRvdWNoO1xuICAgIHZhciBkdXJhdGlvbiA9IGdldFZhbHVlQXRJbmRleE9yUmV0dXJuKGluc3RhbmNlLnByb3BzLmR1cmF0aW9uLCAwLCBkZWZhdWx0UHJvcHMuZHVyYXRpb24pO1xuXG4gICAgaWYgKGlzQWxyZWFkeVZpc2libGUgfHwgaXNEZXN0cm95ZWQgfHwgaXNEaXNhYmxlZCB8fCBpc1RvdWNoQW5kVG91Y2hEaXNhYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gTm9ybWFsaXplIGBkaXNhYmxlZGAgYmVoYXZpb3IgYWNyb3NzIGJyb3dzZXJzLlxuICAgIC8vIEZpcmVmb3ggYWxsb3dzIGV2ZW50cyBvbiBkaXNhYmxlZCBlbGVtZW50cywgYnV0IENocm9tZSBkb2Vzbid0LlxuICAgIC8vIFVzaW5nIGEgd3JhcHBlciBlbGVtZW50IChpLmUuIDxzcGFuPikgaXMgcmVjb21tZW5kZWQuXG5cblxuICAgIGlmIChnZXRDdXJyZW50VGFyZ2V0KCkuaGFzQXR0cmlidXRlKCdkaXNhYmxlZCcpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaW52b2tlSG9vaygnb25TaG93JywgW2luc3RhbmNlXSwgZmFsc2UpO1xuXG4gICAgaWYgKGluc3RhbmNlLnByb3BzLm9uU2hvdyhpbnN0YW5jZSkgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaW5zdGFuY2Uuc3RhdGUuaXNWaXNpYmxlID0gdHJ1ZTtcblxuICAgIGlmIChnZXRJc0RlZmF1bHRSZW5kZXJGbigpKSB7XG4gICAgICBwb3BwZXIuc3R5bGUudmlzaWJpbGl0eSA9ICd2aXNpYmxlJztcbiAgICB9XG5cbiAgICBoYW5kbGVTdHlsZXMoKTtcbiAgICBhZGREb2N1bWVudE1vdXNlRG93bkxpc3RlbmVyKCk7XG5cbiAgICBpZiAoIWluc3RhbmNlLnN0YXRlLmlzTW91bnRlZCkge1xuICAgICAgcG9wcGVyLnN0eWxlLnRyYW5zaXRpb24gPSAnbm9uZSc7XG4gICAgfSAvLyBJZiBmbGlwcGluZyB0byB0aGUgb3Bwb3NpdGUgc2lkZSBhZnRlciBoaWRpbmcgYXQgbGVhc3Qgb25jZSwgdGhlXG4gICAgLy8gYW5pbWF0aW9uIHdpbGwgdXNlIHRoZSB3cm9uZyBwbGFjZW1lbnQgd2l0aG91dCByZXNldHRpbmcgdGhlIGR1cmF0aW9uXG5cblxuICAgIGlmIChnZXRJc0RlZmF1bHRSZW5kZXJGbigpKSB7XG4gICAgICB2YXIgX2dldERlZmF1bHRUZW1wbGF0ZUNoMiA9IGdldERlZmF1bHRUZW1wbGF0ZUNoaWxkcmVuKCksXG4gICAgICAgICAgYm94ID0gX2dldERlZmF1bHRUZW1wbGF0ZUNoMi5ib3gsXG4gICAgICAgICAgY29udGVudCA9IF9nZXREZWZhdWx0VGVtcGxhdGVDaDIuY29udGVudDtcblxuICAgICAgc2V0VHJhbnNpdGlvbkR1cmF0aW9uKFtib3gsIGNvbnRlbnRdLCAwKTtcbiAgICB9XG5cbiAgICBvbkZpcnN0VXBkYXRlID0gZnVuY3Rpb24gb25GaXJzdFVwZGF0ZSgpIHtcbiAgICAgIGlmICghaW5zdGFuY2Uuc3RhdGUuaXNWaXNpYmxlIHx8IGlnbm9yZU9uRmlyc3RVcGRhdGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZ25vcmVPbkZpcnN0VXBkYXRlID0gdHJ1ZTsgLy8gcmVmbG93XG5cbiAgICAgIHZvaWQgcG9wcGVyLm9mZnNldEhlaWdodDtcbiAgICAgIHBvcHBlci5zdHlsZS50cmFuc2l0aW9uID0gaW5zdGFuY2UucHJvcHMubW92ZVRyYW5zaXRpb247XG5cbiAgICAgIGlmIChnZXRJc0RlZmF1bHRSZW5kZXJGbigpICYmIGluc3RhbmNlLnByb3BzLmFuaW1hdGlvbikge1xuICAgICAgICB2YXIgX2dldERlZmF1bHRUZW1wbGF0ZUNoMyA9IGdldERlZmF1bHRUZW1wbGF0ZUNoaWxkcmVuKCksXG4gICAgICAgICAgICBfYm94ID0gX2dldERlZmF1bHRUZW1wbGF0ZUNoMy5ib3gsXG4gICAgICAgICAgICBfY29udGVudCA9IF9nZXREZWZhdWx0VGVtcGxhdGVDaDMuY29udGVudDtcblxuICAgICAgICBzZXRUcmFuc2l0aW9uRHVyYXRpb24oW19ib3gsIF9jb250ZW50XSwgZHVyYXRpb24pO1xuICAgICAgICBzZXRWaXNpYmlsaXR5U3RhdGUoW19ib3gsIF9jb250ZW50XSwgJ3Zpc2libGUnKTtcbiAgICAgIH1cblxuICAgICAgaGFuZGxlQXJpYUNvbnRlbnRBdHRyaWJ1dGUoKTtcbiAgICAgIGhhbmRsZUFyaWFFeHBhbmRlZEF0dHJpYnV0ZSgpO1xuICAgICAgcHVzaElmVW5pcXVlKG1vdW50ZWRJbnN0YW5jZXMsIGluc3RhbmNlKTtcbiAgICAgIHVwZGF0ZUlPU0NsYXNzKHRydWUpO1xuICAgICAgaW5zdGFuY2Uuc3RhdGUuaXNNb3VudGVkID0gdHJ1ZTtcbiAgICAgIGludm9rZUhvb2soJ29uTW91bnQnLCBbaW5zdGFuY2VdKTtcblxuICAgICAgaWYgKGluc3RhbmNlLnByb3BzLmFuaW1hdGlvbiAmJiBnZXRJc0RlZmF1bHRSZW5kZXJGbigpKSB7XG4gICAgICAgIG9uVHJhbnNpdGlvbmVkSW4oZHVyYXRpb24sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpbnN0YW5jZS5zdGF0ZS5pc1Nob3duID0gdHJ1ZTtcbiAgICAgICAgICBpbnZva2VIb29rKCdvblNob3duJywgW2luc3RhbmNlXSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBtb3VudCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gaGlkZSgpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIHdhcm5XaGVuKGluc3RhbmNlLnN0YXRlLmlzRGVzdHJveWVkLCBjcmVhdGVNZW1vcnlMZWFrV2FybmluZygnaGlkZScpKTtcbiAgICB9IC8vIEVhcmx5IGJhaWwtb3V0XG5cblxuICAgIHZhciBpc0FscmVhZHlIaWRkZW4gPSAhaW5zdGFuY2Uuc3RhdGUuaXNWaXNpYmxlO1xuICAgIHZhciBpc0Rlc3Ryb3llZCA9IGluc3RhbmNlLnN0YXRlLmlzRGVzdHJveWVkO1xuICAgIHZhciBpc0Rpc2FibGVkID0gIWluc3RhbmNlLnN0YXRlLmlzRW5hYmxlZDtcbiAgICB2YXIgZHVyYXRpb24gPSBnZXRWYWx1ZUF0SW5kZXhPclJldHVybihpbnN0YW5jZS5wcm9wcy5kdXJhdGlvbiwgMSwgZGVmYXVsdFByb3BzLmR1cmF0aW9uKTtcblxuICAgIGlmIChpc0FscmVhZHlIaWRkZW4gfHwgaXNEZXN0cm95ZWQgfHwgaXNEaXNhYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGludm9rZUhvb2soJ29uSGlkZScsIFtpbnN0YW5jZV0sIGZhbHNlKTtcblxuICAgIGlmIChpbnN0YW5jZS5wcm9wcy5vbkhpZGUoaW5zdGFuY2UpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZSA9IGZhbHNlO1xuICAgIGluc3RhbmNlLnN0YXRlLmlzU2hvd24gPSBmYWxzZTtcbiAgICBpZ25vcmVPbkZpcnN0VXBkYXRlID0gZmFsc2U7XG5cbiAgICBpZiAoZ2V0SXNEZWZhdWx0UmVuZGVyRm4oKSkge1xuICAgICAgcG9wcGVyLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcbiAgICB9XG5cbiAgICBjbGVhbnVwSW50ZXJhY3RpdmVNb3VzZUxpc3RlbmVycygpO1xuICAgIHJlbW92ZURvY3VtZW50TW91c2VEb3duTGlzdGVuZXIoKTtcbiAgICBoYW5kbGVTdHlsZXMoKTtcblxuICAgIGlmIChnZXRJc0RlZmF1bHRSZW5kZXJGbigpKSB7XG4gICAgICB2YXIgX2dldERlZmF1bHRUZW1wbGF0ZUNoNCA9IGdldERlZmF1bHRUZW1wbGF0ZUNoaWxkcmVuKCksXG4gICAgICAgICAgYm94ID0gX2dldERlZmF1bHRUZW1wbGF0ZUNoNC5ib3gsXG4gICAgICAgICAgY29udGVudCA9IF9nZXREZWZhdWx0VGVtcGxhdGVDaDQuY29udGVudDtcblxuICAgICAgaWYgKGluc3RhbmNlLnByb3BzLmFuaW1hdGlvbikge1xuICAgICAgICBzZXRUcmFuc2l0aW9uRHVyYXRpb24oW2JveCwgY29udGVudF0sIGR1cmF0aW9uKTtcbiAgICAgICAgc2V0VmlzaWJpbGl0eVN0YXRlKFtib3gsIGNvbnRlbnRdLCAnaGlkZGVuJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaGFuZGxlQXJpYUNvbnRlbnRBdHRyaWJ1dGUoKTtcbiAgICBoYW5kbGVBcmlhRXhwYW5kZWRBdHRyaWJ1dGUoKTtcblxuICAgIGlmIChpbnN0YW5jZS5wcm9wcy5hbmltYXRpb24pIHtcbiAgICAgIGlmIChnZXRJc0RlZmF1bHRSZW5kZXJGbigpKSB7XG4gICAgICAgIG9uVHJhbnNpdGlvbmVkT3V0KGR1cmF0aW9uLCBpbnN0YW5jZS51bm1vdW50KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaW5zdGFuY2UudW5tb3VudCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHVubW91bnQoKSB7XG4gICAgaWYgKGluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZSkge1xuICAgICAgaW5zdGFuY2UuaGlkZSgpO1xuICAgIH1cblxuICAgIGlmICghaW5zdGFuY2Uuc3RhdGUuaXNNb3VudGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZGVzdHJveVBvcHBlckluc3RhbmNlKCk7IC8vIElmIGEgcG9wcGVyIGlzIG5vdCBpbnRlcmFjdGl2ZSwgaXQgd2lsbCBiZSBhcHBlbmRlZCBvdXRzaWRlIHRoZSBwb3BwZXJcbiAgICAvLyB0cmVlIGJ5IGRlZmF1bHQuIFRoaXMgc2VlbXMgbWFpbmx5IGZvciBpbnRlcmFjdGl2ZSB0aXBwaWVzLCBidXQgd2Ugc2hvdWxkXG4gICAgLy8gZmluZCBhIHdvcmthcm91bmQgaWYgcG9zc2libGVcblxuICAgIGdldE5lc3RlZFBvcHBlclRyZWUoKS5mb3JFYWNoKGZ1bmN0aW9uIChuZXN0ZWRQb3BwZXIpIHtcbiAgICAgIG5lc3RlZFBvcHBlci5fdGlwcHkudW5tb3VudCgpO1xuICAgIH0pO1xuXG4gICAgaWYgKHBvcHBlci5wYXJlbnROb2RlKSB7XG4gICAgICBwb3BwZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChwb3BwZXIpO1xuICAgIH1cblxuICAgIG1vdW50ZWRJbnN0YW5jZXMgPSBtb3VudGVkSW5zdGFuY2VzLmZpbHRlcihmdW5jdGlvbiAoaSkge1xuICAgICAgcmV0dXJuIGkgIT09IGluc3RhbmNlO1xuICAgIH0pO1xuXG4gICAgaWYgKG1vdW50ZWRJbnN0YW5jZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICB1cGRhdGVJT1NDbGFzcyhmYWxzZSk7XG4gICAgfVxuXG4gICAgaW5zdGFuY2Uuc3RhdGUuaXNNb3VudGVkID0gZmFsc2U7XG4gICAgaW52b2tlSG9vaygnb25IaWRkZW4nLCBbaW5zdGFuY2VdKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICB3YXJuV2hlbihpbnN0YW5jZS5zdGF0ZS5pc0Rlc3Ryb3llZCwgY3JlYXRlTWVtb3J5TGVha1dhcm5pbmcoJ2Rlc3Ryb3knKSk7XG4gICAgfVxuXG4gICAgaWYgKGluc3RhbmNlLnN0YXRlLmlzRGVzdHJveWVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaW5zdGFuY2UuY2xlYXJEZWxheVRpbWVvdXRzKCk7XG4gICAgaW5zdGFuY2UudW5tb3VudCgpO1xuICAgIHJlbW92ZUxpc3RlbmVycygpO1xuICAgIGRlbGV0ZSByZWZlcmVuY2UuX3RpcHB5O1xuICAgIGluc3RhbmNlLnN0YXRlLmlzRGVzdHJveWVkID0gdHJ1ZTtcbiAgICBpbnZva2VIb29rKCdvbkRlc3Ryb3knLCBbaW5zdGFuY2VdKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB0aXBweSh0YXJnZXRzLCBvcHRpb25hbFByb3BzKSB7XG4gIGlmIChvcHRpb25hbFByb3BzID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25hbFByb3BzID0ge307XG4gIH1cblxuICB2YXIgcGx1Z2lucyA9IGRlZmF1bHRQcm9wcy5wbHVnaW5zLmNvbmNhdChvcHRpb25hbFByb3BzLnBsdWdpbnMgfHwgW10pO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICB2YWxpZGF0ZVRhcmdldHModGFyZ2V0cyk7XG4gICAgdmFsaWRhdGVQcm9wcyhvcHRpb25hbFByb3BzLCBwbHVnaW5zKTtcbiAgfVxuXG4gIGJpbmRHbG9iYWxFdmVudExpc3RlbmVycygpO1xuICB2YXIgcGFzc2VkUHJvcHMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25hbFByb3BzLCB7XG4gICAgcGx1Z2luczogcGx1Z2luc1xuICB9KTtcbiAgdmFyIGVsZW1lbnRzID0gZ2V0QXJyYXlPZkVsZW1lbnRzKHRhcmdldHMpO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICB2YXIgaXNTaW5nbGVDb250ZW50RWxlbWVudCA9IGlzRWxlbWVudChwYXNzZWRQcm9wcy5jb250ZW50KTtcbiAgICB2YXIgaXNNb3JlVGhhbk9uZVJlZmVyZW5jZUVsZW1lbnQgPSBlbGVtZW50cy5sZW5ndGggPiAxO1xuICAgIHdhcm5XaGVuKGlzU2luZ2xlQ29udGVudEVsZW1lbnQgJiYgaXNNb3JlVGhhbk9uZVJlZmVyZW5jZUVsZW1lbnQsIFsndGlwcHkoKSB3YXMgcGFzc2VkIGFuIEVsZW1lbnQgYXMgdGhlIGBjb250ZW50YCBwcm9wLCBidXQgbW9yZSB0aGFuJywgJ29uZSB0aXBweSBpbnN0YW5jZSB3YXMgY3JlYXRlZCBieSB0aGlzIGludm9jYXRpb24uIFRoaXMgbWVhbnMgdGhlJywgJ2NvbnRlbnQgZWxlbWVudCB3aWxsIG9ubHkgYmUgYXBwZW5kZWQgdG8gdGhlIGxhc3QgdGlwcHkgaW5zdGFuY2UuJywgJ1xcblxcbicsICdJbnN0ZWFkLCBwYXNzIHRoZSAuaW5uZXJIVE1MIG9mIHRoZSBlbGVtZW50LCBvciB1c2UgYSBmdW5jdGlvbiB0aGF0JywgJ3JldHVybnMgYSBjbG9uZWQgdmVyc2lvbiBvZiB0aGUgZWxlbWVudCBpbnN0ZWFkLicsICdcXG5cXG4nLCAnMSkgY29udGVudDogZWxlbWVudC5pbm5lckhUTUxcXG4nLCAnMikgY29udGVudDogKCkgPT4gZWxlbWVudC5jbG9uZU5vZGUodHJ1ZSknXS5qb2luKCcgJykpO1xuICB9XG5cbiAgdmFyIGluc3RhbmNlcyA9IGVsZW1lbnRzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCByZWZlcmVuY2UpIHtcbiAgICB2YXIgaW5zdGFuY2UgPSByZWZlcmVuY2UgJiYgY3JlYXRlVGlwcHkocmVmZXJlbmNlLCBwYXNzZWRQcm9wcyk7XG5cbiAgICBpZiAoaW5zdGFuY2UpIHtcbiAgICAgIGFjYy5wdXNoKGluc3RhbmNlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWNjO1xuICB9LCBbXSk7XG4gIHJldHVybiBpc0VsZW1lbnQodGFyZ2V0cykgPyBpbnN0YW5jZXNbMF0gOiBpbnN0YW5jZXM7XG59XG5cbnRpcHB5LmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbnRpcHB5LnNldERlZmF1bHRQcm9wcyA9IHNldERlZmF1bHRQcm9wcztcbnRpcHB5LmN1cnJlbnRJbnB1dCA9IGN1cnJlbnRJbnB1dDtcbnZhciBoaWRlQWxsID0gZnVuY3Rpb24gaGlkZUFsbChfdGVtcCkge1xuICB2YXIgX3JlZiA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wLFxuICAgICAgZXhjbHVkZWRSZWZlcmVuY2VPckluc3RhbmNlID0gX3JlZi5leGNsdWRlLFxuICAgICAgZHVyYXRpb24gPSBfcmVmLmR1cmF0aW9uO1xuXG4gIG1vdW50ZWRJbnN0YW5jZXMuZm9yRWFjaChmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICB2YXIgaXNFeGNsdWRlZCA9IGZhbHNlO1xuXG4gICAgaWYgKGV4Y2x1ZGVkUmVmZXJlbmNlT3JJbnN0YW5jZSkge1xuICAgICAgaXNFeGNsdWRlZCA9IGlzUmVmZXJlbmNlRWxlbWVudChleGNsdWRlZFJlZmVyZW5jZU9ySW5zdGFuY2UpID8gaW5zdGFuY2UucmVmZXJlbmNlID09PSBleGNsdWRlZFJlZmVyZW5jZU9ySW5zdGFuY2UgOiBpbnN0YW5jZS5wb3BwZXIgPT09IGV4Y2x1ZGVkUmVmZXJlbmNlT3JJbnN0YW5jZS5wb3BwZXI7XG4gICAgfVxuXG4gICAgaWYgKCFpc0V4Y2x1ZGVkKSB7XG4gICAgICB2YXIgb3JpZ2luYWxEdXJhdGlvbiA9IGluc3RhbmNlLnByb3BzLmR1cmF0aW9uO1xuICAgICAgaW5zdGFuY2Uuc2V0UHJvcHMoe1xuICAgICAgICBkdXJhdGlvbjogZHVyYXRpb25cbiAgICAgIH0pO1xuICAgICAgaW5zdGFuY2UuaGlkZSgpO1xuXG4gICAgICBpZiAoIWluc3RhbmNlLnN0YXRlLmlzRGVzdHJveWVkKSB7XG4gICAgICAgIGluc3RhbmNlLnNldFByb3BzKHtcbiAgICAgICAgICBkdXJhdGlvbjogb3JpZ2luYWxEdXJhdGlvblxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufTtcblxudmFyIGNyZWF0ZVNpbmdsZXRvbiA9IGZ1bmN0aW9uIGNyZWF0ZVNpbmdsZXRvbih0aXBweUluc3RhbmNlcywgb3B0aW9uYWxQcm9wcykge1xuICBpZiAob3B0aW9uYWxQcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9uYWxQcm9wcyA9IHt9O1xuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIGVycm9yV2hlbighQXJyYXkuaXNBcnJheSh0aXBweUluc3RhbmNlcyksIFsnVGhlIGZpcnN0IGFyZ3VtZW50IHBhc3NlZCB0byBjcmVhdGVTaW5nbGV0b24oKSBtdXN0IGJlIGFuIGFycmF5IG9mJywgJ3RpcHB5IGluc3RhbmNlcy4gVGhlIHBhc3NlZCB2YWx1ZSB3YXMnLCBTdHJpbmcodGlwcHlJbnN0YW5jZXMpXS5qb2luKCcgJykpO1xuICB9XG5cbiAgdGlwcHlJbnN0YW5jZXMuZm9yRWFjaChmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICBpbnN0YW5jZS5kaXNhYmxlKCk7XG4gIH0pO1xuICB2YXIgY3VycmVudFRhcmdldDtcbiAgdmFyIHJlZmVyZW5jZXMgPSB0aXBweUluc3RhbmNlcy5tYXAoZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgcmV0dXJuIGluc3RhbmNlLnJlZmVyZW5jZTtcbiAgfSk7XG4gIHZhciBzaW5nbGV0b24gPSB7XG4gICAgZm46IGZ1bmN0aW9uIGZuKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgb25EZXN0cm95OiBmdW5jdGlvbiBvbkRlc3Ryb3koKSB7XG4gICAgICAgICAgdGlwcHlJbnN0YW5jZXMuZm9yRWFjaChmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAgICAgICAgIGluc3RhbmNlLmVuYWJsZSgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBvblRyaWdnZXI6IGZ1bmN0aW9uIG9uVHJpZ2dlcihpbnN0YW5jZSwgZXZlbnQpIHtcbiAgICAgICAgICB2YXIgdGFyZ2V0ID0gZXZlbnQuY3VycmVudFRhcmdldDtcbiAgICAgICAgICB2YXIgaW5kZXggPSByZWZlcmVuY2VzLmluZGV4T2YodGFyZ2V0KTsgLy8gYmFpbC1vdXRcblxuICAgICAgICAgIGlmICh0YXJnZXQgPT09IGN1cnJlbnRUYXJnZXQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjdXJyZW50VGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgICAgIHZhciBvdmVycmlkZVByb3BzID0gKG9wdGlvbmFsUHJvcHMub3ZlcnJpZGVzIHx8IFtdKS5jb25jYXQoJ2NvbnRlbnQnKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcHJvcCkge1xuICAgICAgICAgICAgYWNjW3Byb3BdID0gdGlwcHlJbnN0YW5jZXNbaW5kZXhdLnByb3BzW3Byb3BdO1xuICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgICB9LCB7fSk7XG4gICAgICAgICAgaW5zdGFuY2Uuc2V0UHJvcHMoT2JqZWN0LmFzc2lnbih7fSwgb3ZlcnJpZGVQcm9wcywge1xuICAgICAgICAgICAgZ2V0UmVmZXJlbmNlQ2xpZW50UmVjdDogZnVuY3Rpb24gZ2V0UmVmZXJlbmNlQ2xpZW50UmVjdCgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9O1xuICByZXR1cm4gdGlwcHkoZGl2KCksIE9iamVjdC5hc3NpZ24oe30sIHJlbW92ZVByb3BlcnRpZXMob3B0aW9uYWxQcm9wcywgWydvdmVycmlkZXMnXSksIHtcbiAgICBwbHVnaW5zOiBbc2luZ2xldG9uXS5jb25jYXQob3B0aW9uYWxQcm9wcy5wbHVnaW5zIHx8IFtdKSxcbiAgICB0cmlnZ2VyVGFyZ2V0OiByZWZlcmVuY2VzXG4gIH0pKTtcbn07XG5cbnZhciBCVUJCTElOR19FVkVOVFNfTUFQID0ge1xuICBtb3VzZW92ZXI6ICdtb3VzZWVudGVyJyxcbiAgZm9jdXNpbjogJ2ZvY3VzJyxcbiAgY2xpY2s6ICdjbGljaydcbn07XG4vKipcbiAqIENyZWF0ZXMgYSBkZWxlZ2F0ZSBpbnN0YW5jZSB0aGF0IGNvbnRyb2xzIHRoZSBjcmVhdGlvbiBvZiB0aXBweSBpbnN0YW5jZXNcbiAqIGZvciBjaGlsZCBlbGVtZW50cyAoYHRhcmdldGAgQ1NTIHNlbGVjdG9yKS5cbiAqL1xuXG5mdW5jdGlvbiBkZWxlZ2F0ZSh0YXJnZXRzLCBwcm9wcykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgZXJyb3JXaGVuKCEocHJvcHMgJiYgcHJvcHMudGFyZ2V0KSwgWydZb3UgbXVzdCBzcGVjaXR5IGEgYHRhcmdldGAgcHJvcCBpbmRpY2F0aW5nIGEgQ1NTIHNlbGVjdG9yIHN0cmluZyBtYXRjaGluZycsICd0aGUgdGFyZ2V0IGVsZW1lbnRzIHRoYXQgc2hvdWxkIHJlY2VpdmUgYSB0aXBweS4nXS5qb2luKCcgJykpO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVycyA9IFtdO1xuICB2YXIgY2hpbGRUaXBweUluc3RhbmNlcyA9IFtdO1xuICB2YXIgdGFyZ2V0ID0gcHJvcHMudGFyZ2V0O1xuICB2YXIgbmF0aXZlUHJvcHMgPSByZW1vdmVQcm9wZXJ0aWVzKHByb3BzLCBbJ3RhcmdldCddKTtcbiAgdmFyIHBhcmVudFByb3BzID0gT2JqZWN0LmFzc2lnbih7fSwgbmF0aXZlUHJvcHMsIHtcbiAgICB0cmlnZ2VyOiAnbWFudWFsJ1xuICB9KTtcbiAgdmFyIGNoaWxkUHJvcHMgPSBPYmplY3QuYXNzaWduKHt9LCBuYXRpdmVQcm9wcywge1xuICAgIHNob3dPbkNyZWF0ZTogdHJ1ZVxuICB9KTtcbiAgdmFyIHJldHVyblZhbHVlID0gdGlwcHkodGFyZ2V0cywgcGFyZW50UHJvcHMpO1xuICB2YXIgbm9ybWFsaXplZFJldHVyblZhbHVlID0gbm9ybWFsaXplVG9BcnJheShyZXR1cm5WYWx1ZSk7XG5cbiAgZnVuY3Rpb24gb25UcmlnZ2VyKGV2ZW50KSB7XG4gICAgaWYgKCFldmVudC50YXJnZXQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0Tm9kZSA9IGV2ZW50LnRhcmdldC5jbG9zZXN0KHRhcmdldCk7XG5cbiAgICBpZiAoIXRhcmdldE5vZGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIEdldCByZWxldmFudCB0cmlnZ2VyIHdpdGggZmFsbGJhY2tzOlxuICAgIC8vIDEuIENoZWNrIGBkYXRhLXRpcHB5LXRyaWdnZXJgIGF0dHJpYnV0ZSBvbiB0YXJnZXQgbm9kZVxuICAgIC8vIDIuIEZhbGxiYWNrIHRvIGB0cmlnZ2VyYCBwYXNzZWQgdG8gYGRlbGVnYXRlKClgXG4gICAgLy8gMy4gRmFsbGJhY2sgdG8gYGRlZmF1bHRQcm9wcy50cmlnZ2VyYFxuXG5cbiAgICB2YXIgdHJpZ2dlciA9IHRhcmdldE5vZGUuZ2V0QXR0cmlidXRlKCdkYXRhLXRpcHB5LXRyaWdnZXInKSB8fCBwcm9wcy50cmlnZ2VyIHx8IGRlZmF1bHRQcm9wcy50cmlnZ2VyOyAvLyBPbmx5IGNyZWF0ZSB0aGUgaW5zdGFuY2UgaWYgdGhlIGJ1YmJsaW5nIGV2ZW50IG1hdGNoZXMgdGhlIHRyaWdnZXIgdHlwZSxcbiAgICAvLyBvciB0aGUgbm9kZSBhbHJlYWR5IGhhcyBhIHRpcHB5IGluc3RhbmNlIGF0dGFjaGVkXG5cbiAgICBpZiAodHJpZ2dlci5pbmRleE9mKEJVQkJMSU5HX0VWRU5UU19NQVBbZXZlbnQudHlwZV0pIDwgMCB8fCAvLyBAdHMtaWdub3JlXG4gICAgdGFyZ2V0Tm9kZS5fdGlwcHkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgaW5zdGFuY2UgPSB0aXBweSh0YXJnZXROb2RlLCBjaGlsZFByb3BzKTtcblxuICAgIGlmIChpbnN0YW5jZSkge1xuICAgICAgY2hpbGRUaXBweUluc3RhbmNlcyA9IGNoaWxkVGlwcHlJbnN0YW5jZXMuY29uY2F0KGluc3RhbmNlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvbihub2RlLCBldmVudFR5cGUsIGhhbmRsZXIsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0gZmFsc2U7XG4gICAgfVxuXG4gICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgaGFuZGxlciwgb3B0aW9ucyk7XG4gICAgbGlzdGVuZXJzLnB1c2goe1xuICAgICAgbm9kZTogbm9kZSxcbiAgICAgIGV2ZW50VHlwZTogZXZlbnRUeXBlLFxuICAgICAgaGFuZGxlcjogaGFuZGxlcixcbiAgICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXJzKGluc3RhbmNlKSB7XG4gICAgdmFyIHJlZmVyZW5jZSA9IGluc3RhbmNlLnJlZmVyZW5jZTtcbiAgICBvbihyZWZlcmVuY2UsICdtb3VzZW92ZXInLCBvblRyaWdnZXIpO1xuICAgIG9uKHJlZmVyZW5jZSwgJ2ZvY3VzaW4nLCBvblRyaWdnZXIpO1xuICAgIG9uKHJlZmVyZW5jZSwgJ2NsaWNrJywgb25UcmlnZ2VyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXJzKCkge1xuICAgIGxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICB2YXIgbm9kZSA9IF9yZWYubm9kZSxcbiAgICAgICAgICBldmVudFR5cGUgPSBfcmVmLmV2ZW50VHlwZSxcbiAgICAgICAgICBoYW5kbGVyID0gX3JlZi5oYW5kbGVyLFxuICAgICAgICAgIG9wdGlvbnMgPSBfcmVmLm9wdGlvbnM7XG4gICAgICBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgICB9KTtcbiAgICBsaXN0ZW5lcnMgPSBbXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFwcGx5TXV0YXRpb25zKGluc3RhbmNlKSB7XG4gICAgdmFyIG9yaWdpbmFsRGVzdHJveSA9IGluc3RhbmNlLmRlc3Ryb3k7XG5cbiAgICBpbnN0YW5jZS5kZXN0cm95ID0gZnVuY3Rpb24gKHNob3VsZERlc3Ryb3lDaGlsZEluc3RhbmNlcykge1xuICAgICAgaWYgKHNob3VsZERlc3Ryb3lDaGlsZEluc3RhbmNlcyA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHNob3VsZERlc3Ryb3lDaGlsZEluc3RhbmNlcyA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChzaG91bGREZXN0cm95Q2hpbGRJbnN0YW5jZXMpIHtcbiAgICAgICAgY2hpbGRUaXBweUluc3RhbmNlcy5mb3JFYWNoKGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgICAgICAgIGluc3RhbmNlLmRlc3Ryb3koKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGNoaWxkVGlwcHlJbnN0YW5jZXMgPSBbXTtcbiAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXJzKCk7XG4gICAgICBvcmlnaW5hbERlc3Ryb3koKTtcbiAgICB9O1xuXG4gICAgYWRkRXZlbnRMaXN0ZW5lcnMoaW5zdGFuY2UpO1xuICB9XG5cbiAgbm9ybWFsaXplZFJldHVyblZhbHVlLmZvckVhY2goYXBwbHlNdXRhdGlvbnMpO1xuICByZXR1cm4gcmV0dXJuVmFsdWU7XG59XG5cbnZhciBhbmltYXRlRmlsbCA9IHtcbiAgbmFtZTogJ2FuaW1hdGVGaWxsJyxcbiAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgZm46IGZ1bmN0aW9uIGZuKGluc3RhbmNlKSB7XG4gICAgdmFyIF9pbnN0YW5jZSRwcm9wcyRyZW5kZTtcblxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBpZiAoISgoX2luc3RhbmNlJHByb3BzJHJlbmRlID0gaW5zdGFuY2UucHJvcHMucmVuZGVyKSA9PSBudWxsID8gdm9pZCAwIDogX2luc3RhbmNlJHByb3BzJHJlbmRlLiQkdGlwcHkpKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgIGVycm9yV2hlbihpbnN0YW5jZS5wcm9wcy5hbmltYXRlRmlsbCwgJ1RoZSBgYW5pbWF0ZUZpbGxgIHBsdWdpbiByZXF1aXJlcyB0aGUgZGVmYXVsdCByZW5kZXIgZnVuY3Rpb24uJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG5cbiAgICB2YXIgX2dldENoaWxkcmVuID0gZ2V0Q2hpbGRyZW4oaW5zdGFuY2UucG9wcGVyKSxcbiAgICAgICAgYm94ID0gX2dldENoaWxkcmVuLmJveCxcbiAgICAgICAgY29udGVudCA9IF9nZXRDaGlsZHJlbi5jb250ZW50O1xuXG4gICAgdmFyIGJhY2tkcm9wID0gaW5zdGFuY2UucHJvcHMuYW5pbWF0ZUZpbGwgPyBjcmVhdGVCYWNrZHJvcEVsZW1lbnQoKSA6IG51bGw7XG4gICAgcmV0dXJuIHtcbiAgICAgIG9uQ3JlYXRlOiBmdW5jdGlvbiBvbkNyZWF0ZSgpIHtcbiAgICAgICAgaWYgKGJhY2tkcm9wKSB7XG4gICAgICAgICAgYm94Lmluc2VydEJlZm9yZShiYWNrZHJvcCwgYm94LmZpcnN0RWxlbWVudENoaWxkKTtcbiAgICAgICAgICBib3guc2V0QXR0cmlidXRlKCdkYXRhLWFuaW1hdGVmaWxsJywgJycpO1xuICAgICAgICAgIGJveC5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuICAgICAgICAgIGluc3RhbmNlLnNldFByb3BzKHtcbiAgICAgICAgICAgIGFycm93OiBmYWxzZSxcbiAgICAgICAgICAgIGFuaW1hdGlvbjogJ3NoaWZ0LWF3YXknXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvbk1vdW50OiBmdW5jdGlvbiBvbk1vdW50KCkge1xuICAgICAgICBpZiAoYmFja2Ryb3ApIHtcbiAgICAgICAgICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9uID0gYm94LnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbjtcbiAgICAgICAgICB2YXIgZHVyYXRpb24gPSBOdW1iZXIodHJhbnNpdGlvbkR1cmF0aW9uLnJlcGxhY2UoJ21zJywgJycpKTsgLy8gVGhlIGNvbnRlbnQgc2hvdWxkIGZhZGUgaW4gYWZ0ZXIgdGhlIGJhY2tkcm9wIGhhcyBtb3N0bHkgZmlsbGVkIHRoZVxuICAgICAgICAgIC8vIHRvb2x0aXAgZWxlbWVudC4gYGNsaXAtcGF0aGAgaXMgdGhlIG90aGVyIGFsdGVybmF0aXZlIGJ1dCBpcyBub3RcbiAgICAgICAgICAvLyB3ZWxsLXN1cHBvcnRlZCBhbmQgaXMgYnVnZ3kgb24gc29tZSBkZXZpY2VzLlxuXG4gICAgICAgICAgY29udGVudC5zdHlsZS50cmFuc2l0aW9uRGVsYXkgPSBNYXRoLnJvdW5kKGR1cmF0aW9uIC8gMTApICsgXCJtc1wiO1xuICAgICAgICAgIGJhY2tkcm9wLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IHRyYW5zaXRpb25EdXJhdGlvbjtcbiAgICAgICAgICBzZXRWaXNpYmlsaXR5U3RhdGUoW2JhY2tkcm9wXSwgJ3Zpc2libGUnKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9uU2hvdzogZnVuY3Rpb24gb25TaG93KCkge1xuICAgICAgICBpZiAoYmFja2Ryb3ApIHtcbiAgICAgICAgICBiYWNrZHJvcC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSAnMG1zJztcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9uSGlkZTogZnVuY3Rpb24gb25IaWRlKCkge1xuICAgICAgICBpZiAoYmFja2Ryb3ApIHtcbiAgICAgICAgICBzZXRWaXNpYmlsaXR5U3RhdGUoW2JhY2tkcm9wXSwgJ2hpZGRlbicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxufTtcblxuZnVuY3Rpb24gY3JlYXRlQmFja2Ryb3BFbGVtZW50KCkge1xuICB2YXIgYmFja2Ryb3AgPSBkaXYoKTtcbiAgYmFja2Ryb3AuY2xhc3NOYW1lID0gQkFDS0RST1BfQ0xBU1M7XG4gIHNldFZpc2liaWxpdHlTdGF0ZShbYmFja2Ryb3BdLCAnaGlkZGVuJyk7XG4gIHJldHVybiBiYWNrZHJvcDtcbn1cblxudmFyIGZvbGxvd0N1cnNvciA9IHtcbiAgbmFtZTogJ2ZvbGxvd0N1cnNvcicsXG4gIGRlZmF1bHRWYWx1ZTogZmFsc2UsXG4gIGZuOiBmdW5jdGlvbiBmbihpbnN0YW5jZSkge1xuICAgIHZhciByZWZlcmVuY2UgPSBpbnN0YW5jZS5yZWZlcmVuY2U7XG4gICAgdmFyIGRvYyA9IGdldE93bmVyRG9jdW1lbnQoaW5zdGFuY2UucHJvcHMudHJpZ2dlclRhcmdldCB8fCByZWZlcmVuY2UpO1xuICAgIHZhciBpbml0aWFsTW91c2VDb29yZHMgPSBudWxsO1xuXG4gICAgZnVuY3Rpb24gZ2V0SXNNYW51YWwoKSB7XG4gICAgICByZXR1cm4gaW5zdGFuY2UucHJvcHMudHJpZ2dlci50cmltKCkgPT09ICdtYW51YWwnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldElzRW5hYmxlZCgpIHtcbiAgICAgIC8vICM1OTdcbiAgICAgIHZhciBpc1ZhbGlkTW91c2VFdmVudCA9IGdldElzTWFudWFsKCkgPyB0cnVlIDogLy8gQ2hlY2sgaWYgYSBrZXlib2FyZCBcImNsaWNrXCJcbiAgICAgIGluaXRpYWxNb3VzZUNvb3JkcyAhPT0gbnVsbCAmJiAhKGluaXRpYWxNb3VzZUNvb3Jkcy5jbGllbnRYID09PSAwICYmIGluaXRpYWxNb3VzZUNvb3Jkcy5jbGllbnRZID09PSAwKTtcbiAgICAgIHJldHVybiBpbnN0YW5jZS5wcm9wcy5mb2xsb3dDdXJzb3IgJiYgaXNWYWxpZE1vdXNlRXZlbnQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0SXNJbml0aWFsQmVoYXZpb3IoKSB7XG4gICAgICByZXR1cm4gY3VycmVudElucHV0LmlzVG91Y2ggfHwgaW5zdGFuY2UucHJvcHMuZm9sbG93Q3Vyc29yID09PSAnaW5pdGlhbCcgJiYgaW5zdGFuY2Uuc3RhdGUuaXNWaXNpYmxlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVuc2V0UmVmZXJlbmNlQ2xpZW50UmVjdChzaG91bGRVbnNldCkge1xuICAgICAgaWYgKHNob3VsZFVuc2V0KSB7XG4gICAgICAgIGluc3RhbmNlLnNldFByb3BzKHtcbiAgICAgICAgICBnZXRSZWZlcmVuY2VDbGllbnRSZWN0OiBudWxsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhbmRsZU1vdXNlTW92ZUxpc3RlbmVyKCkge1xuICAgICAgaWYgKGdldElzRW5hYmxlZCgpKSB7XG4gICAgICAgIGFkZExpc3RlbmVyKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1bnNldFJlZmVyZW5jZUNsaWVudFJlY3QoaW5zdGFuY2UucHJvcHMuZm9sbG93Q3Vyc29yKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0cmlnZ2VyTGFzdE1vdXNlTW92ZSgpIHtcbiAgICAgIGlmIChnZXRJc0VuYWJsZWQoKSkge1xuICAgICAgICBvbk1vdXNlTW92ZShpbml0aWFsTW91c2VDb29yZHMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZExpc3RlbmVyKCkge1xuICAgICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIG9uTW91c2VNb3ZlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcigpIHtcbiAgICAgIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBvbk1vdXNlTW92ZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25Nb3VzZU1vdmUoZXZlbnQpIHtcbiAgICAgIGluaXRpYWxNb3VzZUNvb3JkcyA9IHtcbiAgICAgICAgY2xpZW50WDogZXZlbnQuY2xpZW50WCxcbiAgICAgICAgY2xpZW50WTogZXZlbnQuY2xpZW50WVxuICAgICAgfTsgLy8gSWYgdGhlIGluc3RhbmNlIGlzIGludGVyYWN0aXZlLCBhdm9pZCB1cGRhdGluZyB0aGUgcG9zaXRpb24gdW5sZXNzIGl0J3NcbiAgICAgIC8vIG92ZXIgdGhlIHJlZmVyZW5jZSBlbGVtZW50XG5cbiAgICAgIHZhciBpc0N1cnNvck92ZXJSZWZlcmVuY2UgPSBldmVudC50YXJnZXQgPyByZWZlcmVuY2UuY29udGFpbnMoZXZlbnQudGFyZ2V0KSA6IHRydWU7XG4gICAgICB2YXIgZm9sbG93Q3Vyc29yID0gaW5zdGFuY2UucHJvcHMuZm9sbG93Q3Vyc29yO1xuICAgICAgdmFyIGNsaWVudFggPSBldmVudC5jbGllbnRYLFxuICAgICAgICAgIGNsaWVudFkgPSBldmVudC5jbGllbnRZO1xuICAgICAgdmFyIHJlY3QgPSByZWZlcmVuY2UuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICB2YXIgcmVsYXRpdmVYID0gY2xpZW50WCAtIHJlY3QubGVmdDtcbiAgICAgIHZhciByZWxhdGl2ZVkgPSBjbGllbnRZIC0gcmVjdC50b3A7XG5cbiAgICAgIGlmIChpc0N1cnNvck92ZXJSZWZlcmVuY2UgfHwgIWluc3RhbmNlLnByb3BzLmludGVyYWN0aXZlKSB7XG4gICAgICAgIGluc3RhbmNlLnNldFByb3BzKHtcbiAgICAgICAgICBnZXRSZWZlcmVuY2VDbGllbnRSZWN0OiBmdW5jdGlvbiBnZXRSZWZlcmVuY2VDbGllbnRSZWN0KCkge1xuICAgICAgICAgICAgdmFyIHJlY3QgPSByZWZlcmVuY2UuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICB2YXIgeCA9IGNsaWVudFg7XG4gICAgICAgICAgICB2YXIgeSA9IGNsaWVudFk7XG5cbiAgICAgICAgICAgIGlmIChmb2xsb3dDdXJzb3IgPT09ICdpbml0aWFsJykge1xuICAgICAgICAgICAgICB4ID0gcmVjdC5sZWZ0ICsgcmVsYXRpdmVYO1xuICAgICAgICAgICAgICB5ID0gcmVjdC50b3AgKyByZWxhdGl2ZVk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciB0b3AgPSBmb2xsb3dDdXJzb3IgPT09ICdob3Jpem9udGFsJyA/IHJlY3QudG9wIDogeTtcbiAgICAgICAgICAgIHZhciByaWdodCA9IGZvbGxvd0N1cnNvciA9PT0gJ3ZlcnRpY2FsJyA/IHJlY3QucmlnaHQgOiB4O1xuICAgICAgICAgICAgdmFyIGJvdHRvbSA9IGZvbGxvd0N1cnNvciA9PT0gJ2hvcml6b250YWwnID8gcmVjdC5ib3R0b20gOiB5O1xuICAgICAgICAgICAgdmFyIGxlZnQgPSBmb2xsb3dDdXJzb3IgPT09ICd2ZXJ0aWNhbCcgPyByZWN0LmxlZnQgOiB4O1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgd2lkdGg6IHJpZ2h0IC0gbGVmdCxcbiAgICAgICAgICAgICAgaGVpZ2h0OiBib3R0b20gLSB0b3AsXG4gICAgICAgICAgICAgIHRvcDogdG9wLFxuICAgICAgICAgICAgICByaWdodDogcmlnaHQsXG4gICAgICAgICAgICAgIGJvdHRvbTogYm90dG9tLFxuICAgICAgICAgICAgICBsZWZ0OiBsZWZ0XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChnZXRJc0luaXRpYWxCZWhhdmlvcigpKSB7XG4gICAgICAgIHJlbW92ZUxpc3RlbmVyKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIG9uQWZ0ZXJVcGRhdGU6IGZ1bmN0aW9uIG9uQWZ0ZXJVcGRhdGUoXywgX3JlZikge1xuICAgICAgICB2YXIgZm9sbG93Q3Vyc29yID0gX3JlZi5mb2xsb3dDdXJzb3I7XG5cbiAgICAgICAgaWYgKGZvbGxvd0N1cnNvciAhPT0gdW5kZWZpbmVkICYmICFmb2xsb3dDdXJzb3IpIHtcbiAgICAgICAgICB1bnNldFJlZmVyZW5jZUNsaWVudFJlY3QodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvbk1vdW50OiBmdW5jdGlvbiBvbk1vdW50KCkge1xuICAgICAgICB0cmlnZ2VyTGFzdE1vdXNlTW92ZSgpO1xuICAgICAgfSxcbiAgICAgIG9uU2hvdzogZnVuY3Rpb24gb25TaG93KCkge1xuICAgICAgICBpZiAoZ2V0SXNNYW51YWwoKSkge1xuICAgICAgICAgIC8vIFNpbmNlIHRoZXJlJ3Mgbm8gdHJpZ2dlciBldmVudCB0byB1c2UsIHdlIGhhdmUgdG8gdXNlIHRoZXNlIGFzXG4gICAgICAgICAgLy8gYmFzZWxpbmUgY29vcmRzXG4gICAgICAgICAgaW5pdGlhbE1vdXNlQ29vcmRzID0ge1xuICAgICAgICAgICAgY2xpZW50WDogMCxcbiAgICAgICAgICAgIGNsaWVudFk6IDBcbiAgICAgICAgICB9O1xuICAgICAgICAgIGhhbmRsZU1vdXNlTW92ZUxpc3RlbmVyKCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvblRyaWdnZXI6IGZ1bmN0aW9uIG9uVHJpZ2dlcihfLCBldmVudCkge1xuICAgICAgICAvLyBUYXBwaW5nIG9uIHRvdWNoIGRldmljZXMgY2FuIHRyaWdnZXIgYG1vdXNlZW50ZXJgIHRoZW4gYGZvY3VzYFxuICAgICAgICBpZiAoaW5pdGlhbE1vdXNlQ29vcmRzKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzTW91c2VFdmVudChldmVudCkpIHtcbiAgICAgICAgICBpbml0aWFsTW91c2VDb29yZHMgPSB7XG4gICAgICAgICAgICBjbGllbnRYOiBldmVudC5jbGllbnRYLFxuICAgICAgICAgICAgY2xpZW50WTogZXZlbnQuY2xpZW50WVxuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBoYW5kbGVNb3VzZU1vdmVMaXN0ZW5lcigpO1xuICAgICAgfSxcbiAgICAgIG9uVW50cmlnZ2VyOiBmdW5jdGlvbiBvblVudHJpZ2dlcigpIHtcbiAgICAgICAgLy8gSWYgdW50cmlnZ2VyZWQgYmVmb3JlIHNob3dpbmcgKGBvbkhpZGRlbmAgd2lsbCBuZXZlciBiZSBpbnZva2VkKVxuICAgICAgICBpZiAoIWluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZSkge1xuICAgICAgICAgIHJlbW92ZUxpc3RlbmVyKCk7XG4gICAgICAgICAgaW5pdGlhbE1vdXNlQ29vcmRzID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9uSGlkZGVuOiBmdW5jdGlvbiBvbkhpZGRlbigpIHtcbiAgICAgICAgcmVtb3ZlTGlzdGVuZXIoKTtcbiAgICAgICAgaW5pdGlhbE1vdXNlQ29vcmRzID0gbnVsbDtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59O1xuXG4vLyBwb3NpdGlvbi5cblxudmFyIGlubGluZVBvc2l0aW9uaW5nID0ge1xuICBuYW1lOiAnaW5saW5lUG9zaXRpb25pbmcnLFxuICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICBmbjogZnVuY3Rpb24gZm4oaW5zdGFuY2UpIHtcbiAgICB2YXIgcmVmZXJlbmNlID0gaW5zdGFuY2UucmVmZXJlbmNlO1xuXG4gICAgZnVuY3Rpb24gaXNFbmFibGVkKCkge1xuICAgICAgcmV0dXJuICEhaW5zdGFuY2UucHJvcHMuaW5saW5lUG9zaXRpb25pbmc7XG4gICAgfVxuXG4gICAgdmFyIHBsYWNlbWVudDtcbiAgICB2YXIgbW9kaWZpZXIgPSB7XG4gICAgICBuYW1lOiAndGlwcHlJbmxpbmVQb3NpdGlvbmluZycsXG4gICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgcGhhc2U6ICdhZnRlcldyaXRlJyxcbiAgICAgIGZuOiBmdW5jdGlvbiBmbihfcmVmKSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGU7XG5cbiAgICAgICAgaWYgKGlzRW5hYmxlZCgpKSB7XG4gICAgICAgICAgaWYgKHBsYWNlbWVudCAhPT0gc3RhdGUucGxhY2VtZW50KSB7XG4gICAgICAgICAgICBpbnN0YW5jZS5zZXRQcm9wcyh7XG4gICAgICAgICAgICAgIGdldFJlZmVyZW5jZUNsaWVudFJlY3Q6IGZ1bmN0aW9uIGdldFJlZmVyZW5jZUNsaWVudFJlY3QoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9nZXRSZWZlcmVuY2VDbGllbnRSZWN0KHN0YXRlLnBsYWNlbWVudCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHBsYWNlbWVudCA9IHN0YXRlLnBsYWNlbWVudDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBfZ2V0UmVmZXJlbmNlQ2xpZW50UmVjdChwbGFjZW1lbnQpIHtcbiAgICAgIHJldHVybiBnZXRJbmxpbmVCb3VuZGluZ0NsaWVudFJlY3QoZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpLCByZWZlcmVuY2UuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIGFycmF5RnJvbShyZWZlcmVuY2UuZ2V0Q2xpZW50UmVjdHMoKSkpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBvbkNyZWF0ZTogZnVuY3Rpb24gb25DcmVhdGUoKSB7XG4gICAgICAgIHZhciBfaW5zdGFuY2UkcHJvcHMkcG9wcGU7XG5cbiAgICAgICAgaW5zdGFuY2Uuc2V0UHJvcHMoe1xuICAgICAgICAgIHBvcHBlck9wdGlvbnM6IE9iamVjdC5hc3NpZ24oe30sIGluc3RhbmNlLnByb3BzLnBvcHBlck9wdGlvbnMsIHtcbiAgICAgICAgICAgIG1vZGlmaWVyczogW10uY29uY2F0KCgoX2luc3RhbmNlJHByb3BzJHBvcHBlID0gaW5zdGFuY2UucHJvcHMucG9wcGVyT3B0aW9ucykgPT0gbnVsbCA/IHZvaWQgMCA6IF9pbnN0YW5jZSRwcm9wcyRwb3BwZS5tb2RpZmllcnMpIHx8IFtdLCBbbW9kaWZpZXJdKVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gIH1cbn07XG5mdW5jdGlvbiBnZXRJbmxpbmVCb3VuZGluZ0NsaWVudFJlY3QoY3VycmVudEJhc2VQbGFjZW1lbnQsIGJvdW5kaW5nUmVjdCwgY2xpZW50UmVjdHMpIHtcbiAgLy8gTm90IGFuIGlubGluZSBlbGVtZW50LCBvciBwbGFjZW1lbnQgaXMgbm90IHlldCBrbm93blxuICBpZiAoY2xpZW50UmVjdHMubGVuZ3RoIDwgMiB8fCBjdXJyZW50QmFzZVBsYWNlbWVudCA9PT0gbnVsbCkge1xuICAgIHJldHVybiBib3VuZGluZ1JlY3Q7XG4gIH1cblxuICBzd2l0Y2ggKGN1cnJlbnRCYXNlUGxhY2VtZW50KSB7XG4gICAgY2FzZSAndG9wJzpcbiAgICBjYXNlICdib3R0b20nOlxuICAgICAge1xuICAgICAgICB2YXIgZmlyc3RSZWN0ID0gY2xpZW50UmVjdHNbMF07XG4gICAgICAgIHZhciBsYXN0UmVjdCA9IGNsaWVudFJlY3RzW2NsaWVudFJlY3RzLmxlbmd0aCAtIDFdO1xuICAgICAgICB2YXIgaXNUb3AgPSBjdXJyZW50QmFzZVBsYWNlbWVudCA9PT0gJ3RvcCc7XG4gICAgICAgIHZhciB0b3AgPSBmaXJzdFJlY3QudG9wO1xuICAgICAgICB2YXIgYm90dG9tID0gbGFzdFJlY3QuYm90dG9tO1xuICAgICAgICB2YXIgbGVmdCA9IGlzVG9wID8gZmlyc3RSZWN0LmxlZnQgOiBsYXN0UmVjdC5sZWZ0O1xuICAgICAgICB2YXIgcmlnaHQgPSBpc1RvcCA/IGZpcnN0UmVjdC5yaWdodCA6IGxhc3RSZWN0LnJpZ2h0O1xuICAgICAgICB2YXIgd2lkdGggPSByaWdodCAtIGxlZnQ7XG4gICAgICAgIHZhciBoZWlnaHQgPSBib3R0b20gLSB0b3A7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdG9wOiB0b3AsXG4gICAgICAgICAgYm90dG9tOiBib3R0b20sXG4gICAgICAgICAgbGVmdDogbGVmdCxcbiAgICAgICAgICByaWdodDogcmlnaHQsXG4gICAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICAgIGhlaWdodDogaGVpZ2h0XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICBjYXNlICdsZWZ0JzpcbiAgICBjYXNlICdyaWdodCc6XG4gICAgICB7XG4gICAgICAgIHZhciBtaW5MZWZ0ID0gTWF0aC5taW4uYXBwbHkoTWF0aCwgY2xpZW50UmVjdHMubWFwKGZ1bmN0aW9uIChyZWN0cykge1xuICAgICAgICAgIHJldHVybiByZWN0cy5sZWZ0O1xuICAgICAgICB9KSk7XG4gICAgICAgIHZhciBtYXhSaWdodCA9IE1hdGgubWF4LmFwcGx5KE1hdGgsIGNsaWVudFJlY3RzLm1hcChmdW5jdGlvbiAocmVjdHMpIHtcbiAgICAgICAgICByZXR1cm4gcmVjdHMucmlnaHQ7XG4gICAgICAgIH0pKTtcbiAgICAgICAgdmFyIG1lYXN1cmVSZWN0cyA9IGNsaWVudFJlY3RzLmZpbHRlcihmdW5jdGlvbiAocmVjdCkge1xuICAgICAgICAgIHJldHVybiBjdXJyZW50QmFzZVBsYWNlbWVudCA9PT0gJ2xlZnQnID8gcmVjdC5sZWZ0ID09PSBtaW5MZWZ0IDogcmVjdC5yaWdodCA9PT0gbWF4UmlnaHQ7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgX3RvcCA9IG1lYXN1cmVSZWN0c1swXS50b3A7XG4gICAgICAgIHZhciBfYm90dG9tID0gbWVhc3VyZVJlY3RzW21lYXN1cmVSZWN0cy5sZW5ndGggLSAxXS5ib3R0b207XG4gICAgICAgIHZhciBfbGVmdCA9IG1pbkxlZnQ7XG4gICAgICAgIHZhciBfcmlnaHQgPSBtYXhSaWdodDtcblxuICAgICAgICB2YXIgX3dpZHRoID0gX3JpZ2h0IC0gX2xlZnQ7XG5cbiAgICAgICAgdmFyIF9oZWlnaHQgPSBfYm90dG9tIC0gX3RvcDtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHRvcDogX3RvcCxcbiAgICAgICAgICBib3R0b206IF9ib3R0b20sXG4gICAgICAgICAgbGVmdDogX2xlZnQsXG4gICAgICAgICAgcmlnaHQ6IF9yaWdodCxcbiAgICAgICAgICB3aWR0aDogX3dpZHRoLFxuICAgICAgICAgIGhlaWdodDogX2hlaWdodFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgZGVmYXVsdDpcbiAgICAgIHtcbiAgICAgICAgcmV0dXJuIGJvdW5kaW5nUmVjdDtcbiAgICAgIH1cbiAgfVxufVxuXG52YXIgc3RpY2t5ID0ge1xuICBuYW1lOiAnc3RpY2t5JyxcbiAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgZm46IGZ1bmN0aW9uIGZuKGluc3RhbmNlKSB7XG4gICAgdmFyIHJlZmVyZW5jZSA9IGluc3RhbmNlLnJlZmVyZW5jZSxcbiAgICAgICAgcG9wcGVyID0gaW5zdGFuY2UucG9wcGVyO1xuXG4gICAgZnVuY3Rpb24gZ2V0UmVmZXJlbmNlKCkge1xuICAgICAgcmV0dXJuIGluc3RhbmNlLnBvcHBlckluc3RhbmNlID8gaW5zdGFuY2UucG9wcGVySW5zdGFuY2Uuc3RhdGUuZWxlbWVudHMucmVmZXJlbmNlIDogcmVmZXJlbmNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNob3VsZENoZWNrKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaW5zdGFuY2UucHJvcHMuc3RpY2t5ID09PSB0cnVlIHx8IGluc3RhbmNlLnByb3BzLnN0aWNreSA9PT0gdmFsdWU7XG4gICAgfVxuXG4gICAgdmFyIHByZXZSZWZSZWN0ID0gbnVsbDtcbiAgICB2YXIgcHJldlBvcFJlY3QgPSBudWxsO1xuXG4gICAgZnVuY3Rpb24gdXBkYXRlUG9zaXRpb24oKSB7XG4gICAgICB2YXIgY3VycmVudFJlZlJlY3QgPSBzaG91bGRDaGVjaygncmVmZXJlbmNlJykgPyBnZXRSZWZlcmVuY2UoKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSA6IG51bGw7XG4gICAgICB2YXIgY3VycmVudFBvcFJlY3QgPSBzaG91bGRDaGVjaygncG9wcGVyJykgPyBwb3BwZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgOiBudWxsO1xuXG4gICAgICBpZiAoY3VycmVudFJlZlJlY3QgJiYgYXJlUmVjdHNEaWZmZXJlbnQocHJldlJlZlJlY3QsIGN1cnJlbnRSZWZSZWN0KSB8fCBjdXJyZW50UG9wUmVjdCAmJiBhcmVSZWN0c0RpZmZlcmVudChwcmV2UG9wUmVjdCwgY3VycmVudFBvcFJlY3QpKSB7XG4gICAgICAgIGlmIChpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZSkge1xuICAgICAgICAgIGluc3RhbmNlLnBvcHBlckluc3RhbmNlLnVwZGF0ZSgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHByZXZSZWZSZWN0ID0gY3VycmVudFJlZlJlY3Q7XG4gICAgICBwcmV2UG9wUmVjdCA9IGN1cnJlbnRQb3BSZWN0O1xuXG4gICAgICBpZiAoaW5zdGFuY2Uuc3RhdGUuaXNNb3VudGVkKSB7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSh1cGRhdGVQb3NpdGlvbik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIG9uTW91bnQ6IGZ1bmN0aW9uIG9uTW91bnQoKSB7XG4gICAgICAgIGlmIChpbnN0YW5jZS5wcm9wcy5zdGlja3kpIHtcbiAgICAgICAgICB1cGRhdGVQb3NpdGlvbigpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxufTtcblxuZnVuY3Rpb24gYXJlUmVjdHNEaWZmZXJlbnQocmVjdEEsIHJlY3RCKSB7XG4gIGlmIChyZWN0QSAmJiByZWN0Qikge1xuICAgIHJldHVybiByZWN0QS50b3AgIT09IHJlY3RCLnRvcCB8fCByZWN0QS5yaWdodCAhPT0gcmVjdEIucmlnaHQgfHwgcmVjdEEuYm90dG9tICE9PSByZWN0Qi5ib3R0b20gfHwgcmVjdEEubGVmdCAhPT0gcmVjdEIubGVmdDtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG50aXBweS5zZXREZWZhdWx0UHJvcHMoe1xuICByZW5kZXI6IHJlbmRlclxufSk7XG5cbmV4cG9ydHMuYW5pbWF0ZUZpbGwgPSBhbmltYXRlRmlsbDtcbmV4cG9ydHMuY3JlYXRlU2luZ2xldG9uID0gY3JlYXRlU2luZ2xldG9uO1xuZXhwb3J0cy5kZWZhdWx0ID0gdGlwcHk7XG5leHBvcnRzLmRlbGVnYXRlID0gZGVsZWdhdGU7XG5leHBvcnRzLmZvbGxvd0N1cnNvciA9IGZvbGxvd0N1cnNvcjtcbmV4cG9ydHMuaGlkZUFsbCA9IGhpZGVBbGw7XG5leHBvcnRzLmlubGluZVBvc2l0aW9uaW5nID0gaW5saW5lUG9zaXRpb25pbmc7XG5leHBvcnRzLnJvdW5kQXJyb3cgPSBST1VORF9BUlJPVztcbmV4cG9ydHMuc3RpY2t5ID0gc3RpY2t5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGlwcHkuY2pzLmpzLm1hcFxuIl19
