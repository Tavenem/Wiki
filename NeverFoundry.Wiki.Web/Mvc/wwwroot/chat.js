!function i(s,a,c){function u(t,e){if(!a[t]){if(!s[t]){var n="function"==typeof require&&require;if(!e&&n)return n(t,!0);if(l)return l(t,!0);var r=new Error("Cannot find module '"+t+"'");throw r.code="MODULE_NOT_FOUND",r}var o=a[t]={exports:{}};s[t][0].call(o.exports,function(e){return u(s[t][1][e]||e)},o,o.exports,i,s,a,c)}return a[t].exports}for(var l="function"==typeof require&&require,e=0;e<c.length;e++)u(c[e]);return u}({1:[function(e,t,n){"use strict";function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var r,a=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==s(e)&&"function"!=typeof e)return{default:e};var t=c();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e){var i;Object.prototype.hasOwnProperty.call(e,o)&&((i=r?Object.getOwnPropertyDescriptor(e,o):null)&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o])}n.default=e,t&&t.set(e,n);return n}(e("@microsoft/signalr")),p=(r=e("tippy.js"))&&r.__esModule?r:{default:r};function c(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return c=function(){return e},e}var u=document.getElementById("wiki-talk-send");u&&(u.disabled=!0);var l=document.getElementById("wiki-talk-newmessage-input");window.wikimvcchat={connection:null,messageListUl:null,userNamespace:"Users",init:function(e,t,n,r){if(window.wikimvcchat.userNamespace=t,null!=document.getElementById("wiki-talk-messages")){var o=document.createElement("ul");window.wikimvcchat.messageListUl=o,r=JSON.parse(r)||[];for(var i=0;i<r.length;i++)window.wikimvcchat.addMessage(r[i]);e&&e.length&&n&&n.length&&(window.wikimvcchat.connection=(new a.HubConnectionBuilder).withUrl(e).withAutomaticReconnect().build(),window.wikimvcchat.connection.on("Receive",window.wikimvcchat.addMessage),window.wikimvcchat.connection.on("ReceiveReaction",window.wikimvcchat.addReaction),window.wikimvcchat.connection.start().then(function(){u.disabled=!1}).catch(function(e){return console.error("An error occurred while connecting to chat")}),u.addEventListener("click",function(e){var t=l.value;t&&t.length&&connection.invoke("Send",{markdown:t,topicId:n}).catch(function(e){return console.error("An error occurred while sending a chat message")}),e.preventDefault(),e.stopPropagation()}))}},addMessage:function(e){if(null!=e&&null!=e.content&&null!=e.content.length&&0<e.content.length){document.getElementById("wiki-talk-nomessages").remove();var t=document.createElement("li");t.id="wiki-message-".concat(e.id);var n=document.createElement("div");t.appendChild(n),n.classList.add("wiki-message","collapsible","collapsed");var r=document.createElement("div");n.appendChild(r),r.classList.add("wiki-message-header");var o=document.createElement("span");r.appendChild(o),o.classList.add("wiki-message-sender");var i,s,a=document.createTextNode(e.senderName);e.senderExists?(i=document.createElement("a"),o.appendChild(i),i.classList.add("wiki-username","wiki-username-link"),i.href="/".concat(window.wikimvcchat.userNamespace,":").concat(e.senderId),i.title="Visit the user page for ".concat(e.senderName),i.appendChild(a)):(s=document.createElement("span"),o.appendChild(s),userLink.classList.add("wiki-username","wiki-username-nolink"),userLink.appendChild(a));var c=document.createElement("span");r.appendChild(c),c.classList.add("wiki-message-reactions");for(var u=[],l=[],p=[],f=[],h=[],d=0;d<e.reactions.length;d++)switch(e.reactions[d].type){case 0:u.push(e.reactions[d]);break;case 1:h.push(e.reactions[d]);break;case 2:l.push(e.reactions[d]);break;case 3:f.push(e.reactions[d]);break;case 4:p.push(e.reactions[d])}window.wikimvcchat.addReactionList(e.id,c,u,"positive",0),window.wikimvcchat.addReactionList(e.id,c,u,"funny",2),window.wikimvcchat.addReactionList(e.id,c,u,"surprise",4),window.wikimvcchat.addReactionList(e.id,c,u,"sad",3),window.wikimvcchat.addReactionList(e.id,c,u,"negative",1);var g=document.createElement("span");r.appendChild(g),g.classList.add("wiki-message-timestamp");var v=document.createTextNode(new Date(e.timestamp/1e4-22089888e5).toLocaleString());g.appendChild(v);var m=document.createElement("div");n.appendChild(m),m.classList.add("wiki-message-content");var y=document.createTextNode(e.content);m.appendChild(y);var b=document.createElement("div");n.appendChild(b),b.classList.add("wiki-message-toggler");var w=document.createElement("a");b.appendChild(w),w.href="javascript: void(0);",w.onclick=function(e){e.target.parentElement.parentElement.classList.toggle("collapsed")},window.wikimvcchat.messageListUl.appendChild(t),parseInt(getComputedStyle(m).getPropertyValue("height"))<parseInt(getComputedStyle(m).getPropertyValue("max-height"))&&n.classList.remove("collapsible")}},addReaction:function(e){if(null!=e&&null!=e.messageId){var t="";switch(e.type){case 0:t="positive";break;case 1:t="negative";break;case 2:t="funny";break;case 3:t="sad";break;case 4:t="surprise"}var n,r,o,i=document.getElementById("wiki-message-reactions-".concat(t,"-").concat(e.messageId));null!=i&&(n=i.getElementsByClassName("wiki-message-reactions-count")[0],r=parseInt(n.textContent),r++,n.textContent=r.toLocaleString(),o=i.getElementsByClassName("wiki-message-reaction-list")[0],window.wikimvcchat.addReactionToList(o,e))}},addReactionList:function(t,e,n,r,o){var i=document.createElement("span");e.appendChild(i),i.id="wiki-message-reactions-".concat(r,"-").concat(t.id);var s=document.createElement("span");i.appendChild(s),s.classList.add("wiki-message-reactions-".concat(r)),s.onclick=function(e){window.wikimvcchat.connection.invoke("SendReaction",{messageId:t.id,topicId:t.topicId,type:o}).catch(function(e){return console.error("An error occurred while attempting to send a chat reaction")}),e.preventDefault(),e.stopPropagation()};var a=document.createElement("span");i.appendChild(a),a.classList.add("wiki-message-reactions-count");var c=document.createTextNode(n.length.toLocaleString());if(a.appendChild(c),0!==n.length){n.sort(function(e,t){return e.timestamp-t.timestamp});var u=document.createElement("ul");i.appendChild(u),u.classList.add("wiki-message-reaction-list"),u.style.display="none";for(var l=0;l<n.length;l++)window.wikimvcchat.addReactionToList(u,n[l]);(0,p.default)(i,{content:function(e){return e.getElementsByClassName("wiki-message-reaction-list")[0].innerHTML},placement:"auto",allowHTML:!0})}},addReactionToList:function(e,t){var n=document.createElement("li");e.appendChild(n);var r,o,s=document.createTextNode(t.senderName);t.senderExists?(r=document.createElement("a"),n.appendChild(r),r.classList.add("wiki-username","wiki-username-link"),r.href="/".concat(window.wikimvcchat.userNamespace,":").concat(t.senderId),r.title="Visit the user page for ".concat(t.senderName),r.appendChild(s)):(o=document.createElement("span"),n.appendChild(o),o.classList.add("wiki-username","wiki-username-nolink"),o.appendChild(s));var a=document.createElement("span");n.appendChild(a);var c=document.createTextNode(new Date(list[i].timestamp/1e4-22089888e5).toLocaleString());a.appendChild(c)}}},{"@microsoft/signalr":24,"tippy.js":30}],2:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=(o.prototype.abort=function(){this.isAborted||(this.isAborted=!0,this.onabort&&this.onabort())},Object.defineProperty(o.prototype,"signal",{get:function(){return this},enumerable:!0,configurable:!0}),Object.defineProperty(o.prototype,"aborted",{get:function(){return this.isAborted},enumerable:!0,configurable:!0}),o);function o(){this.isAborted=!1,this.onabort=null}n.AbortController=r},{}],3:[function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(n,"__esModule",{value:!0});var i,s=e("./Errors"),a=e("./HttpClient"),c=e("./NodeHttpClient"),u=e("./XhrHttpClient"),l=(i=a.HttpClient,o(p,i),p.prototype.send=function(e){return e.abortSignal&&e.abortSignal.aborted?Promise.reject(new s.AbortError):e.method?e.url?this.httpClient.send(e):Promise.reject(new Error("No url defined.")):Promise.reject(new Error("No method defined."))},p.prototype.getCookieString=function(e){return this.httpClient.getCookieString(e)},p);function p(e){var t=i.call(this)||this;return"undefined"!=typeof XMLHttpRequest?t.httpClient=new u.XhrHttpClient(e):t.httpClient=new c.NodeHttpClient(e),t}n.DefaultHttpClient=l},{"./Errors":5,"./HttpClient":7,"./NodeHttpClient":17,"./XhrHttpClient":23}],4:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=[0,2e3,1e4,3e4,null],o=(i.prototype.nextRetryDelayInMilliseconds=function(e){return this.retryDelays[e.previousRetryCount]},i);function i(e){this.retryDelays=void 0!==e?e.concat([null]):r}n.DefaultReconnectPolicy=o},{}],5:[function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(n,"__esModule",{value:!0});var i,s=(i=Error,o(a,i),a);function a(e,t){var n=this,r=this.constructor.prototype;return(n=i.call(this,e)||this).statusCode=t,n.__proto__=r,n}n.HttpError=s;var c,u=(c=Error,o(l,c),l);function l(e){void 0===e&&(e="A timeout occurred.");var t=this,n=this.constructor.prototype;return(t=c.call(this,e)||this).__proto__=n,t}n.TimeoutError=u;var p,f=(p=Error,o(h,p),h);function h(e){void 0===e&&(e="An abort occurred.");var t=this,n=this.constructor.prototype;return(t=p.call(this,e)||this).__proto__=n,t}n.AbortError=f},{}],6:[function(n,e,r){(function(u){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var l=n("./TextMessageFormat"),p=n("./Utils"),e=(t.prototype.writeHandshakeRequest=function(e){return l.TextMessageFormat.write(JSON.stringify(e))},t.prototype.parseHandshakeResponse=function(e){if(p.isArrayBuffer(e)||void 0!==u&&e instanceof u){var t=new Uint8Array(e);if(-1===(i=t.indexOf(l.TextMessageFormat.RecordSeparatorCode)))throw new Error("Message is incomplete.");var n=i+1,r=String.fromCharCode.apply(null,t.slice(0,n)),o=t.byteLength>n?t.slice(n).buffer:null}else{var i,s=e;if(-1===(i=s.indexOf(l.TextMessageFormat.RecordSeparator)))throw new Error("Message is incomplete.");n=i+1,r=s.substring(0,n),o=s.length>n?s.substring(n):null}var a=l.TextMessageFormat.parse(r),c=JSON.parse(a[0]);if(c.type)throw new Error("Expected a handshake response from the server.");return[o,c]},t);function t(){}r.HandshakeProtocol=e}).call(this,n("buffer").Buffer)},{"./TextMessageFormat":20,"./Utils":21,buffer:27}],7:[function(e,t,n){"use strict";var r=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e};Object.defineProperty(n,"__esModule",{value:!0});function o(e,t,n){this.statusCode=e,this.statusText=t,this.content=n}n.HttpResponse=o;var i=(s.prototype.get=function(e,t){return this.send(r({},t,{method:"GET",url:e}))},s.prototype.post=function(e,t){return this.send(r({},t,{method:"POST",url:e}))},s.prototype.delete=function(e,t){return this.send(r({},t,{method:"DELETE",url:e}))},s.prototype.getCookieString=function(e){return""},s);function s(){}n.HttpClient=i},{}],8:[function(e,t,n){"use strict";var o=this&&this.__awaiter||function(i,s,a,c){return new(a=a||Promise)(function(e,t){function n(e){try{o(c.next(e))}catch(e){t(e)}}function r(e){try{o(c.throw(e))}catch(e){t(e)}}function o(t){t.done?e(t.value):new a(function(e){e(t.value)}).then(n,r)}o((c=c.apply(i,s||[])).next())})},v=this&&this.__generator||function(n,r){var o,i,s,a={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]},e={next:t(0),throw:t(1),return:t(2)};return"function"==typeof Symbol&&(e[Symbol.iterator]=function(){return this}),e;function t(t){return function(e){return function(t){if(o)throw new TypeError("Generator is already executing.");for(;a;)try{if(o=1,i&&(s=2&t[0]?i.return:t[0]?i.throw||((s=i.return)&&s.call(i),0):i.next)&&!(s=s.call(i,t[1])).done)return s;switch(i=0,s&&(t=[2&t[0],s.value]),t[0]){case 0:case 1:s=t;break;case 4:return a.label++,{value:t[1],done:!1};case 5:a.label++,i=t[1],t=[0];continue;case 7:t=a.ops.pop(),a.trys.pop();continue;default:if(!(s=0<(s=a.trys).length&&s[s.length-1])&&(6===t[0]||2===t[0])){a=0;continue}if(3===t[0]&&(!s||t[1]>s[0]&&t[1]<s[3])){a.label=t[1];break}if(6===t[0]&&a.label<s[1]){a.label=s[1],s=t;break}if(s&&a.label<s[2]){a.label=s[2],a.ops.push(t);break}s[2]&&a.ops.pop(),a.trys.pop();continue}t=r.call(n,a)}catch(e){t=[6,e],i=0}finally{o=s=0}if(5&t[0])throw t[1];return{value:t[0]?t[1]:void 0,done:!0}}([t,e])}}};Object.defineProperty(n,"__esModule",{value:!0});var r,i=e("./DefaultHttpClient"),m=e("./ILogger"),c=e("./ITransport"),u=e("./LongPollingTransport"),s=e("./ServerSentEventsTransport"),a=e("./Utils"),l=e("./WebSocketTransport"),p=null,f=null;a.Platform.isNode&&void 0!==e&&(r="function"==typeof __webpack_require__?__non_webpack_require__:e,p=r("ws"),f=r("eventsource"));var h=(d.prototype.start=function(n){return o(this,void 0,void 0,function(){var t;return v(this,function(e){switch(e.label){case 0:return n=n||c.TransferFormat.Binary,a.Arg.isIn(n,c.TransferFormat,"transferFormat"),this.logger.log(m.LogLevel.Debug,"Starting connection with transfer format '"+c.TransferFormat[n]+"'."),"Disconnected"!==this.connectionState?[2,Promise.reject(new Error("Cannot start an HttpConnection that is not in the 'Disconnected' state."))]:(this.connectionState="Connecting ",this.startInternalPromise=this.startInternal(n),[4,this.startInternalPromise]);case 1:return e.sent(),"Disconnecting"!==this.connectionState?[3,3]:(t="Failed to start the HttpConnection before stop() was called.",this.logger.log(m.LogLevel.Error,t),[4,this.stopPromise]);case 2:return e.sent(),[2,Promise.reject(new Error(t))];case 3:if("Connected"!==this.connectionState)return t="HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!",this.logger.log(m.LogLevel.Error,t),[2,Promise.reject(new Error(t))];e.label=4;case 4:return this.connectionStarted=!0,[2]}})})},d.prototype.send=function(e){return"Connected"!==this.connectionState?Promise.reject(new Error("Cannot send data if the connection is not in the 'Connected' State.")):(this.sendQueue||(this.sendQueue=new g(this.transport)),this.sendQueue.send(e))},d.prototype.stop=function(n){return o(this,void 0,void 0,function(){var t=this;return v(this,function(e){switch(e.label){case 0:return"Disconnected"===this.connectionState?(this.logger.log(m.LogLevel.Debug,"Call to HttpConnection.stop("+n+") ignored because the connection is already in the disconnected state."),[2,Promise.resolve()]):"Disconnecting"===this.connectionState?(this.logger.log(m.LogLevel.Debug,"Call to HttpConnection.stop("+n+") ignored because the connection is already in the disconnecting state."),[2,this.stopPromise]):(this.connectionState="Disconnecting",this.stopPromise=new Promise(function(e){t.stopPromiseResolver=e}),[4,this.stopInternal(n)]);case 1:return e.sent(),[4,this.stopPromise];case 2:return e.sent(),[2]}})})},d.prototype.stopInternal=function(r){return o(this,void 0,void 0,function(){var t,n;return v(this,function(e){switch(e.label){case 0:this.stopError=r,e.label=1;case 1:return e.trys.push([1,3,,4]),[4,this.startInternalPromise];case 2:case 3:return e.sent(),[3,4];case 4:if(!this.sendQueue)return[3,9];e.label=5;case 5:return e.trys.push([5,7,,8]),[4,this.sendQueue.stop()];case 6:return e.sent(),[3,8];case 7:return t=e.sent(),this.logger.log(m.LogLevel.Error,"TransportSendQueue.stop() threw error '"+t+"'."),[3,8];case 8:this.sendQueue=void 0,e.label=9;case 9:if(!this.transport)return[3,14];e.label=10;case 10:return e.trys.push([10,12,,13]),[4,this.transport.stop()];case 11:return e.sent(),[3,13];case 12:return n=e.sent(),this.logger.log(m.LogLevel.Error,"HttpConnection.transport.stop() threw error '"+n+"'."),this.stopConnection(),[3,13];case 13:return this.transport=void 0,[3,15];case 14:this.logger.log(m.LogLevel.Debug,"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed."),this.stopConnection(),e.label=15;case 15:return[2]}})})},d.prototype.startInternal=function(a){return o(this,void 0,void 0,function(){var n,r,o,t,i,s;return v(this,function(e){switch(e.label){case 0:n=this.baseUrl,this.accessTokenFactory=this.options.accessTokenFactory,e.label=1;case 1:return e.trys.push([1,12,,13]),this.options.skipNegotiation?this.options.transport!==c.HttpTransportType.WebSockets?[3,3]:(this.transport=this.constructTransport(c.HttpTransportType.WebSockets),[4,this.startTransport(n,a)]):[3,5];case 2:return e.sent(),[3,4];case 3:throw new Error("Negotiation can only be skipped when using the WebSocket transport directly.");case 4:return[3,11];case 5:r=null,o=0,t=function(){var t;return v(this,function(e){switch(e.label){case 0:return[4,i.getNegotiationResponse(n)];case 1:if(r=e.sent(),"Disconnecting"===i.connectionState||"Disconnected"===i.connectionState)throw new Error("The connection was stopped during negotiation.");if(r.error)throw new Error(r.error);if(r.ProtocolVersion)throw new Error("Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.");return r.url&&(n=r.url),r.accessToken&&(t=r.accessToken,i.accessTokenFactory=function(){return t}),o++,[2]}})},i=this,e.label=6;case 6:return[5,t()];case 7:e.sent(),e.label=8;case 8:if(r.url&&o<100)return[3,6];e.label=9;case 9:if(100===o&&r.url)throw new Error("Negotiate redirection limit exceeded.");return[4,this.createTransport(n,this.options.transport,r,a)];case 10:e.sent(),e.label=11;case 11:return this.transport instanceof u.LongPollingTransport&&(this.features.inherentKeepAlive=!0),"Connecting "===this.connectionState&&(this.logger.log(m.LogLevel.Debug,"The HttpConnection connected successfully."),this.connectionState="Connected"),[3,13];case 12:return s=e.sent(),this.logger.log(m.LogLevel.Error,"Failed to start the connection: "+s),this.connectionState="Disconnected",this.transport=void 0,[2,Promise.reject(s)];case 13:return[2]}})})},d.prototype.getNegotiationResponse=function(c){return o(this,void 0,void 0,function(){var t,n,r,o,i,s,a;return v(this,function(e){switch(e.label){case 0:return this.accessTokenFactory?[4,this.accessTokenFactory()]:[3,2];case 1:(r=e.sent())&&((t={}).Authorization="Bearer "+r,n=t),e.label=2;case 2:o=this.resolveNegotiateUrl(c),this.logger.log(m.LogLevel.Debug,"Sending negotiation request: "+o+"."),e.label=3;case 3:return e.trys.push([3,5,,6]),[4,this.httpClient.post(o,{content:"",headers:n})];case 4:return 200!==(i=e.sent()).statusCode?[2,Promise.reject(new Error("Unexpected status code returned from negotiate "+i.statusCode))]:((!(s=JSON.parse(i.content)).negotiateVersion||s.negotiateVersion<1)&&(s.connectionToken=s.connectionId),[2,s]);case 5:return a=e.sent(),this.logger.log(m.LogLevel.Error,"Failed to complete negotiation with the server: "+a),[2,Promise.reject(a)];case 6:return[2]}})})},d.prototype.createConnectUrl=function(e,t){return t?e+(-1===e.indexOf("?")?"?":"&")+"id="+t:e},d.prototype.createTransport=function(f,h,d,g){return o(this,void 0,void 0,function(){var t,n,r,o,i,s,a,c,u,l,p;return v(this,function(e){switch(e.label){case 0:return t=this.createConnectUrl(f,d.connectionToken),this.isITransport(h)?(this.logger.log(m.LogLevel.Debug,"Connection was provided an instance of ITransport, using that directly."),this.transport=h,[4,this.startTransport(t,g)]):[3,2];case 1:return e.sent(),this.connectionId=d.connectionId,[2];case 2:n=[],r=d.availableTransports||[],o=d,i=0,s=r,e.label=3;case 3:return i<s.length?(a=s[i],(c=this.resolveTransportOrError(a,h,g))instanceof Error?(n.push(a.transport+" failed: "+c),[3,12]):[3,4]):[3,13];case 4:if(!this.isITransport(c))return[3,12];if(this.transport=c,o)return[3,9];e.label=5;case 5:return e.trys.push([5,7,,8]),[4,this.getNegotiationResponse(f)];case 6:return o=e.sent(),[3,8];case 7:return u=e.sent(),[2,Promise.reject(u)];case 8:t=this.createConnectUrl(f,o.connectionToken),e.label=9;case 9:return e.trys.push([9,11,,12]),[4,this.startTransport(t,g)];case 10:return e.sent(),this.connectionId=o.connectionId,[2];case 11:return l=e.sent(),this.logger.log(m.LogLevel.Error,"Failed to start the transport '"+a.transport+"': "+l),o=void 0,n.push(a.transport+" failed: "+l),"Connecting "!==this.connectionState?(p="Failed to select transport before stop() was called.",this.logger.log(m.LogLevel.Debug,p),[2,Promise.reject(new Error(p))]):[3,12];case 12:return i++,[3,3];case 13:return 0<n.length?[2,Promise.reject(new Error("Unable to connect to the server with any of the available transports. "+n.join(" ")))]:[2,Promise.reject(new Error("None of the transports supported by the client are supported by the server."))]}})})},d.prototype.constructTransport=function(e){switch(e){case c.HttpTransportType.WebSockets:if(!this.options.WebSocket)throw new Error("'WebSocket' is not supported in your environment.");return new l.WebSocketTransport(this.httpClient,this.accessTokenFactory,this.logger,this.options.logMessageContent||!1,this.options.WebSocket);case c.HttpTransportType.ServerSentEvents:if(!this.options.EventSource)throw new Error("'EventSource' is not supported in your environment.");return new s.ServerSentEventsTransport(this.httpClient,this.accessTokenFactory,this.logger,this.options.logMessageContent||!1,this.options.EventSource);case c.HttpTransportType.LongPolling:return new u.LongPollingTransport(this.httpClient,this.accessTokenFactory,this.logger,this.options.logMessageContent||!1);default:throw new Error("Unknown transport: "+e+".")}},d.prototype.startTransport=function(e,t){var n=this;return this.transport.onreceive=this.onreceive,this.transport.onclose=function(e){return n.stopConnection(e)},this.transport.connect(e,t)},d.prototype.resolveTransportOrError=function(e,t,n){var r,o,i=c.HttpTransportType[e.transport];if(null==i)return this.logger.log(m.LogLevel.Debug,"Skipping transport '"+e.transport+"' because it is not supported by this client."),new Error("Skipping transport '"+e.transport+"' because it is not supported by this client.");if(o=i,(r=t)&&0==(o&r))return this.logger.log(m.LogLevel.Debug,"Skipping transport '"+c.HttpTransportType[i]+"' because it was disabled by the client."),new Error("'"+c.HttpTransportType[i]+"' is disabled by the client.");if(!(0<=e.transferFormats.map(function(e){return c.TransferFormat[e]}).indexOf(n)))return this.logger.log(m.LogLevel.Debug,"Skipping transport '"+c.HttpTransportType[i]+"' because it does not support the requested transfer format '"+c.TransferFormat[n]+"'."),new Error("'"+c.HttpTransportType[i]+"' does not support "+c.TransferFormat[n]+".");if(i===c.HttpTransportType.WebSockets&&!this.options.WebSocket||i===c.HttpTransportType.ServerSentEvents&&!this.options.EventSource)return this.logger.log(m.LogLevel.Debug,"Skipping transport '"+c.HttpTransportType[i]+"' because it is not supported in your environment.'"),new Error("'"+c.HttpTransportType[i]+"' is not supported in your environment.");this.logger.log(m.LogLevel.Debug,"Selecting transport '"+c.HttpTransportType[i]+"'.");try{return this.constructTransport(i)}catch(e){return e}},d.prototype.isITransport=function(e){return e&&"object"==typeof e&&"connect"in e},d.prototype.stopConnection=function(t){if(this.logger.log(m.LogLevel.Debug,"HttpConnection.stopConnection("+t+") called while in state "+this.connectionState+"."),this.transport=void 0,t=this.stopError||t,this.stopError=void 0,"Disconnected"!==this.connectionState)if("Connecting "!==this.connectionState){if("Disconnecting"===this.connectionState&&this.stopPromiseResolver(),t?this.logger.log(m.LogLevel.Error,"Connection disconnected with error '"+t+"'."):this.logger.log(m.LogLevel.Information,"Connection disconnected."),this.connectionId=void 0,this.connectionState="Disconnected",this.onclose&&this.connectionStarted){this.connectionStarted=!1;try{this.onclose(t)}catch(e){this.logger.log(m.LogLevel.Error,"HttpConnection.onclose("+t+") threw error '"+e+"'.")}}}else this.logger.log(m.LogLevel.Warning,"Call to HttpConnection.stopConnection("+t+") was ignored because the connection hasn't yet left the in the connecting state.");else this.logger.log(m.LogLevel.Debug,"Call to HttpConnection.stopConnection("+t+") was ignored because the connection is already in the disconnected state.")},d.prototype.resolveUrl=function(e){if(0===e.lastIndexOf("https://",0)||0===e.lastIndexOf("http://",0))return e;if(!a.Platform.isBrowser||!window.document)throw new Error("Cannot resolve '"+e+"'.");var t=window.document.createElement("a");return t.href=e,this.logger.log(m.LogLevel.Information,"Normalizing '"+e+"' to '"+t.href+"'."),t.href},d.prototype.resolveNegotiateUrl=function(e){var t=e.indexOf("?"),n=e.substring(0,-1===t?e.length:t);return"/"!==n[n.length-1]&&(n+="/"),n+="negotiate",-1===(n+=-1===t?"":e.substring(t)).indexOf("negotiateVersion")&&(n+=-1===t?"?":"&",n+="negotiateVersion="+this.negotiateVersion),n},d);function d(e,t){void 0===t&&(t={}),this.features={},this.negotiateVersion=1,a.Arg.isRequired(e,"url"),this.logger=a.createLogger(t.logger),this.baseUrl=this.resolveUrl(e),(t=t||{}).logMessageContent=t.logMessageContent||!1,a.Platform.isNode||"undefined"==typeof WebSocket||t.WebSocket?a.Platform.isNode&&!t.WebSocket&&p&&(t.WebSocket=p):t.WebSocket=WebSocket,a.Platform.isNode||"undefined"==typeof EventSource||t.EventSource?a.Platform.isNode&&!t.EventSource&&void 0!==f&&(t.EventSource=f):t.EventSource=EventSource,this.httpClient=t.httpClient||new i.DefaultHttpClient(this.logger),this.connectionState="Disconnected",this.connectionStarted=!1,this.options=t,this.onreceive=null,this.onclose=null}n.HttpConnection=h;var g=(y.prototype.send=function(e){return this.bufferData(e),this.transportResult||(this.transportResult=new b),this.transportResult.promise},y.prototype.stop=function(){return this.executing=!1,this.sendBufferedData.resolve(),this.sendLoopPromise},y.prototype.bufferData=function(e){if(this.buffer.length&&typeof this.buffer[0]!=typeof e)throw new Error("Expected data to be of type "+typeof this.buffer+" but was of type "+typeof e);this.buffer.push(e),this.sendBufferedData.resolve()},y.prototype.sendLoop=function(){return o(this,void 0,void 0,function(){var t,n,r;return v(this,function(e){switch(e.label){case 0:return[4,this.sendBufferedData.promise];case 1:if(e.sent(),!this.executing)return this.transportResult&&this.transportResult.reject("Connection stopped."),[3,6];this.sendBufferedData=new b,t=this.transportResult,this.transportResult=void 0,n="string"==typeof this.buffer[0]?this.buffer.join(""):y.concatBuffers(this.buffer),this.buffer.length=0,e.label=2;case 2:return e.trys.push([2,4,,5]),[4,this.transport.send(n)];case 3:return e.sent(),t.resolve(),[3,5];case 4:return r=e.sent(),t.reject(r),[3,5];case 5:return[3,0];case 6:return[2]}})})},y.concatBuffers=function(e){for(var t=e.map(function(e){return e.byteLength}).reduce(function(e,t){return e+t}),n=new Uint8Array(t),r=0,o=0,i=e;o<i.length;o++){var s=i[o];n.set(new Uint8Array(s),r),r+=s.byteLength}return n},y);function y(e){this.transport=e,this.buffer=[],this.executing=!0,this.sendBufferedData=new b,this.transportResult=new b,this.sendLoopPromise=this.sendLoop()}n.TransportSendQueue=g;var b=(w.prototype.resolve=function(){this.resolver()},w.prototype.reject=function(e){this.rejecter(e)},w);function w(){var r=this;this.promise=new Promise(function(e,t){var n=[e,t];return r.resolver=n[0],r.rejecter=n[1],n})}},{"./DefaultHttpClient":3,"./ILogger":12,"./ITransport":13,"./LongPollingTransport":16,"./ServerSentEventsTransport":18,"./Utils":21,"./WebSocketTransport":22}],9:[function(e,t,n){"use strict";var r=this&&this.__awaiter||function(i,s,a,c){return new(a=a||Promise)(function(e,t){function n(e){try{o(c.next(e))}catch(e){t(e)}}function r(e){try{o(c.throw(e))}catch(e){t(e)}}function o(t){t.done?e(t.value):new a(function(e){e(t.value)}).then(n,r)}o((c=c.apply(i,s||[])).next())})},c=this&&this.__generator||function(n,r){var o,i,s,a={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]},e={next:t(0),throw:t(1),return:t(2)};return"function"==typeof Symbol&&(e[Symbol.iterator]=function(){return this}),e;function t(t){return function(e){return function(t){if(o)throw new TypeError("Generator is already executing.");for(;a;)try{if(o=1,i&&(s=2&t[0]?i.return:t[0]?i.throw||((s=i.return)&&s.call(i),0):i.next)&&!(s=s.call(i,t[1])).done)return s;switch(i=0,s&&(t=[2&t[0],s.value]),t[0]){case 0:case 1:s=t;break;case 4:return a.label++,{value:t[1],done:!1};case 5:a.label++,i=t[1],t=[0];continue;case 7:t=a.ops.pop(),a.trys.pop();continue;default:if(!(s=0<(s=a.trys).length&&s[s.length-1])&&(6===t[0]||2===t[0])){a=0;continue}if(3===t[0]&&(!s||t[1]>s[0]&&t[1]<s[3])){a.label=t[1];break}if(6===t[0]&&a.label<s[1]){a.label=s[1],s=t;break}if(s&&a.label<s[2]){a.label=s[2],a.ops.push(t);break}s[2]&&a.ops.pop(),a.trys.pop();continue}t=r.call(n,a)}catch(e){t=[6,e],i=0}finally{o=s=0}if(5&t[0])throw t[1];return{value:t[0]?t[1]:void 0,done:!0}}([t,e])}}};Object.defineProperty(n,"__esModule",{value:!0});var u,o,i=e("./HandshakeProtocol"),l=e("./IHubProtocol"),p=e("./ILogger"),f=e("./Subject"),s=e("./Utils");(o=u=n.HubConnectionState||(n.HubConnectionState={})).Disconnected="Disconnected",o.Connecting="Connecting",o.Connected="Connected",o.Disconnecting="Disconnecting",o.Reconnecting="Reconnecting";var a=(h.create=function(e,t,n,r){return new h(e,t,n,r)},Object.defineProperty(h.prototype,"state",{get:function(){return this.connectionState},enumerable:!0,configurable:!0}),Object.defineProperty(h.prototype,"connectionId",{get:function(){return this.connection&&this.connection.connectionId||null},enumerable:!0,configurable:!0}),Object.defineProperty(h.prototype,"baseUrl",{get:function(){return this.connection.baseUrl||""},set:function(e){if(this.connectionState!==u.Disconnected&&this.connectionState!==u.Reconnecting)throw new Error("The HubConnection must be in the Disconnected or Reconnecting state to change the url.");if(!e)throw new Error("The HubConnection url must be a valid url.");this.connection.baseUrl=e},enumerable:!0,configurable:!0}),h.prototype.start=function(){return this.startPromise=this.startWithStateTransitions(),this.startPromise},h.prototype.startWithStateTransitions=function(){return r(this,void 0,void 0,function(){var t;return c(this,function(e){switch(e.label){case 0:if(this.connectionState!==u.Disconnected)return[2,Promise.reject(new Error("Cannot start a HubConnection that is not in the 'Disconnected' state."))];this.connectionState=u.Connecting,this.logger.log(p.LogLevel.Debug,"Starting HubConnection."),e.label=1;case 1:return e.trys.push([1,3,,4]),[4,this.startInternal()];case 2:return e.sent(),this.connectionState=u.Connected,this.connectionStarted=!0,this.logger.log(p.LogLevel.Debug,"HubConnection connected successfully."),[3,4];case 3:return t=e.sent(),this.connectionState=u.Disconnected,this.logger.log(p.LogLevel.Debug,"HubConnection failed to start successfully because of error '"+t+"'."),[2,Promise.reject(t)];case 4:return[2]}})})},h.prototype.startInternal=function(){return r(this,void 0,void 0,function(){var t,n,r,o=this;return c(this,function(e){switch(e.label){case 0:return this.stopDuringStartError=void 0,this.receivedHandshakeResponse=!1,t=new Promise(function(e,t){o.handshakeResolver=e,o.handshakeRejecter=t}),[4,this.connection.start(this.protocol.transferFormat)];case 1:e.sent(),e.label=2;case 2:return e.trys.push([2,5,,7]),n={protocol:this.protocol.name,version:this.protocol.version},this.logger.log(p.LogLevel.Debug,"Sending handshake request."),[4,this.sendMessage(this.handshakeProtocol.writeHandshakeRequest(n))];case 3:return e.sent(),this.logger.log(p.LogLevel.Information,"Using HubProtocol '"+this.protocol.name+"'."),this.cleanupTimeout(),this.resetTimeoutPeriod(),this.resetKeepAliveInterval(),[4,t];case 4:if(e.sent(),this.stopDuringStartError)throw this.stopDuringStartError;return[3,7];case 5:return r=e.sent(),this.logger.log(p.LogLevel.Debug,"Hub handshake failed with error '"+r+"' during start(). Stopping HubConnection."),this.cleanupTimeout(),this.cleanupPingTimer(),[4,this.connection.stop(r)];case 6:throw e.sent(),r;case 7:return[2]}})})},h.prototype.stop=function(){return r(this,void 0,void 0,function(){var t;return c(this,function(e){switch(e.label){case 0:return t=this.startPromise,this.stopPromise=this.stopInternal(),[4,this.stopPromise];case 1:e.sent(),e.label=2;case 2:return e.trys.push([2,4,,5]),[4,t];case 3:case 4:return e.sent(),[3,5];case 5:return[2]}})})},h.prototype.stopInternal=function(e){return this.connectionState===u.Disconnected?(this.logger.log(p.LogLevel.Debug,"Call to HubConnection.stop("+e+") ignored because it is already in the disconnected state."),Promise.resolve()):this.connectionState===u.Disconnecting?(this.logger.log(p.LogLevel.Debug,"Call to HttpConnection.stop("+e+") ignored because the connection is already in the disconnecting state."),this.stopPromise):(this.connectionState=u.Disconnecting,this.logger.log(p.LogLevel.Debug,"Stopping HubConnection."),this.reconnectDelayHandle?(this.logger.log(p.LogLevel.Debug,"Connection stopped during reconnect delay. Done reconnecting."),clearTimeout(this.reconnectDelayHandle),this.reconnectDelayHandle=void 0,this.completeClose(),Promise.resolve()):(this.cleanupTimeout(),this.cleanupPingTimer(),this.stopDuringStartError=e||new Error("The connection was stopped before the hub handshake could complete."),this.connection.stop(e)))},h.prototype.stream=function(e){for(var t=this,n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];var o,i=this.replaceStreamingParams(n),s=i[0],a=i[1],c=this.createStreamInvocation(e,n,a),u=new f.Subject;return u.cancelCallback=function(){var e=t.createCancelInvocation(c.invocationId);return delete t.callbacks[c.invocationId],o.then(function(){return t.sendWithProtocol(e)})},this.callbacks[c.invocationId]=function(e,t){t?u.error(t):e&&(e.type===l.MessageType.Completion?e.error?u.error(new Error(e.error)):u.complete():u.next(e.item))},o=this.sendWithProtocol(c).catch(function(e){u.error(e),delete t.callbacks[c.invocationId]}),this.launchStreams(s,o),u},h.prototype.sendMessage=function(e){return this.resetKeepAliveInterval(),this.connection.send(e)},h.prototype.sendWithProtocol=function(e){return this.sendMessage(this.protocol.writeMessage(e))},h.prototype.send=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var r=this.replaceStreamingParams(t),o=r[0],i=r[1],s=this.sendWithProtocol(this.createInvocation(e,t,!0,i));return this.launchStreams(o,s),s},h.prototype.invoke=function(e){for(var t=this,n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];var o=this.replaceStreamingParams(n),i=o[0],s=o[1],a=this.createInvocation(e,n,!1,s);return new Promise(function(n,r){t.callbacks[a.invocationId]=function(e,t){t?r(t):e&&(e.type===l.MessageType.Completion?e.error?r(new Error(e.error)):n(e.result):r(new Error("Unexpected message type: "+e.type)))};var e=t.sendWithProtocol(a).catch(function(e){r(e),delete t.callbacks[a.invocationId]});t.launchStreams(i,e)})},h.prototype.on=function(e,t){e&&t&&(e=e.toLowerCase(),this.methods[e]||(this.methods[e]=[]),-1===this.methods[e].indexOf(t)&&this.methods[e].push(t))},h.prototype.off=function(e,t){var n,r;e&&(e=e.toLowerCase(),(n=this.methods[e])&&(t?-1!==(r=n.indexOf(t))&&(n.splice(r,1),0===n.length&&delete this.methods[e]):delete this.methods[e]))},h.prototype.onclose=function(e){e&&this.closedCallbacks.push(e)},h.prototype.onreconnecting=function(e){e&&this.reconnectingCallbacks.push(e)},h.prototype.onreconnected=function(e){e&&this.reconnectedCallbacks.push(e)},h.prototype.processIncomingData=function(e){if(this.cleanupTimeout(),this.receivedHandshakeResponse||(e=this.processHandshakeResponse(e),this.receivedHandshakeResponse=!0),e)for(var t=0,n=this.protocol.parseMessages(e,this.logger);t<n.length;t++){var r=n[t];switch(r.type){case l.MessageType.Invocation:this.invokeClientMethod(r);break;case l.MessageType.StreamItem:case l.MessageType.Completion:var o=this.callbacks[r.invocationId];o&&(r.type===l.MessageType.Completion&&delete this.callbacks[r.invocationId],o(r));break;case l.MessageType.Ping:break;case l.MessageType.Close:this.logger.log(p.LogLevel.Information,"Close message received from server.");var i=r.error?new Error("Server returned an error on close: "+r.error):void 0;!0===r.allowReconnect?this.connection.stop(i):this.stopPromise=this.stopInternal(i);break;default:this.logger.log(p.LogLevel.Warning,"Invalid message type: "+r.type+".")}}this.resetTimeoutPeriod()},h.prototype.processHandshakeResponse=function(e){var t,n,r;try{r=(t=this.handshakeProtocol.parseHandshakeResponse(e))[0],n=t[1]}catch(e){var o="Error parsing handshake response: "+e;this.logger.log(p.LogLevel.Error,o);var i=new Error(o);throw this.handshakeRejecter(i),i}if(n.error)throw o="Server returned handshake error: "+n.error,this.logger.log(p.LogLevel.Error,o),i=new Error(o),this.handshakeRejecter(i),i;return this.logger.log(p.LogLevel.Debug,"Server handshake complete."),this.handshakeResolver(),r},h.prototype.resetKeepAliveInterval=function(){var e=this;this.cleanupPingTimer(),this.pingServerHandle=setTimeout(function(){return r(e,void 0,void 0,function(){return c(this,function(e){switch(e.label){case 0:if(this.connectionState!==u.Connected)return[3,4];e.label=1;case 1:return e.trys.push([1,3,,4]),[4,this.sendMessage(this.cachedPingMessage)];case 2:return e.sent(),[3,4];case 3:return e.sent(),this.cleanupPingTimer(),[3,4];case 4:return[2]}})})},this.keepAliveIntervalInMilliseconds)},h.prototype.resetTimeoutPeriod=function(){var e=this;this.connection.features&&this.connection.features.inherentKeepAlive||(this.timeoutHandle=setTimeout(function(){return e.serverTimeout()},this.serverTimeoutInMilliseconds))},h.prototype.serverTimeout=function(){this.connection.stop(new Error("Server timeout elapsed without receiving a message from the server."))},h.prototype.invokeClientMethod=function(t){var e,n=this,r=this.methods[t.target.toLowerCase()];if(r){try{r.forEach(function(e){return e.apply(n,t.arguments)})}catch(e){this.logger.log(p.LogLevel.Error,"A callback for the method "+t.target.toLowerCase()+" threw error '"+e+"'.")}t.invocationId&&(e="Server requested a response, which is not supported in this version of the client.",this.logger.log(p.LogLevel.Error,e),this.stopPromise=this.stopInternal(new Error(e)))}else this.logger.log(p.LogLevel.Warning,"No client method with the name '"+t.target+"' found.")},h.prototype.connectionClosed=function(e){this.logger.log(p.LogLevel.Debug,"HubConnection.connectionClosed("+e+") called while in state "+this.connectionState+"."),this.stopDuringStartError=this.stopDuringStartError||e||new Error("The underlying connection was closed before the hub handshake could complete."),this.handshakeResolver&&this.handshakeResolver(),this.cancelCallbacksWithError(e||new Error("Invocation canceled due to the underlying connection being closed.")),this.cleanupTimeout(),this.cleanupPingTimer(),this.connectionState===u.Disconnecting?this.completeClose(e):this.connectionState===u.Connected&&this.reconnectPolicy?this.reconnect(e):this.connectionState===u.Connected&&this.completeClose(e)},h.prototype.completeClose=function(t){var n=this;if(this.connectionStarted){this.connectionState=u.Disconnected,this.connectionStarted=!1;try{this.closedCallbacks.forEach(function(e){return e.apply(n,[t])})}catch(e){this.logger.log(p.LogLevel.Error,"An onclose callback called with error '"+t+"' threw error '"+e+"'.")}}},h.prototype.reconnect=function(a){return r(this,void 0,void 0,function(){var t,n,r,o,i,s=this;return c(this,function(e){switch(e.label){case 0:if(t=Date.now(),r=void(n=0)!==a?a:new Error("Attempting to reconnect due to a unknown error."),null===(o=this.getNextRetryDelay(n++,0,r)))return this.logger.log(p.LogLevel.Debug,"Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt."),this.completeClose(a),[2];if(this.connectionState=u.Reconnecting,a?this.logger.log(p.LogLevel.Information,"Connection reconnecting because of error '"+a+"'."):this.logger.log(p.LogLevel.Information,"Connection reconnecting."),this.onreconnecting){try{this.reconnectingCallbacks.forEach(function(e){return e.apply(s,[a])})}catch(e){this.logger.log(p.LogLevel.Error,"An onreconnecting callback called with error '"+a+"' threw error '"+e+"'.")}if(this.connectionState!==u.Reconnecting)return this.logger.log(p.LogLevel.Debug,"Connection left the reconnecting state in onreconnecting callback. Done reconnecting."),[2]}e.label=1;case 1:return null===o?[3,7]:(this.logger.log(p.LogLevel.Information,"Reconnect attempt number "+n+" will start in "+o+" ms."),[4,new Promise(function(e){s.reconnectDelayHandle=setTimeout(e,o)})]);case 2:if(e.sent(),this.reconnectDelayHandle=void 0,this.connectionState!==u.Reconnecting)return this.logger.log(p.LogLevel.Debug,"Connection left the reconnecting state during reconnect delay. Done reconnecting."),[2];e.label=3;case 3:return e.trys.push([3,5,,6]),[4,this.startInternal()];case 4:if(e.sent(),this.connectionState=u.Connected,this.logger.log(p.LogLevel.Information,"HubConnection reconnected successfully."),this.onreconnected)try{this.reconnectedCallbacks.forEach(function(e){return e.apply(s,[s.connection.connectionId])})}catch(e){this.logger.log(p.LogLevel.Error,"An onreconnected callback called with connectionId '"+this.connection.connectionId+"; threw error '"+e+"'.")}return[2];case 5:return i=e.sent(),this.logger.log(p.LogLevel.Information,"Reconnect attempt failed because of error '"+i+"'."),this.connectionState!==u.Reconnecting?(this.logger.log(p.LogLevel.Debug,"Connection left the reconnecting state during reconnect attempt. Done reconnecting."),[2]):(r=i instanceof Error?i:new Error(i.toString()),o=this.getNextRetryDelay(n++,Date.now()-t,r),[3,6]);case 6:return[3,1];case 7:return this.logger.log(p.LogLevel.Information,"Reconnect retries have been exhausted after "+(Date.now()-t)+" ms and "+n+" failed attempts. Connection disconnecting."),this.completeClose(),[2]}})})},h.prototype.getNextRetryDelay=function(t,n,e){try{return this.reconnectPolicy.nextRetryDelayInMilliseconds({elapsedMilliseconds:n,previousRetryCount:t,retryReason:e})}catch(e){return this.logger.log(p.LogLevel.Error,"IRetryPolicy.nextRetryDelayInMilliseconds("+t+", "+n+") threw error '"+e+"'."),null}},h.prototype.cancelCallbacksWithError=function(t){var n=this.callbacks;this.callbacks={},Object.keys(n).forEach(function(e){(0,n[e])(null,t)})},h.prototype.cleanupPingTimer=function(){this.pingServerHandle&&clearTimeout(this.pingServerHandle)},h.prototype.cleanupTimeout=function(){this.timeoutHandle&&clearTimeout(this.timeoutHandle)},h.prototype.createInvocation=function(e,t,n,r){if(n)return{arguments:t,streamIds:r,target:e,type:l.MessageType.Invocation};var o=this.invocationId;return this.invocationId++,{arguments:t,invocationId:o.toString(),streamIds:r,target:e,type:l.MessageType.Invocation}},h.prototype.launchStreams=function(e,r){var o=this;if(0!==e.length){r=r||Promise.resolve();var t=function(n){e[n].subscribe({complete:function(){r=r.then(function(){return o.sendWithProtocol(o.createCompletionMessage(n))})},error:function(e){var t=e instanceof Error?e.message:e&&e.toString?e.toString():"Unknown error";r=r.then(function(){return o.sendWithProtocol(o.createCompletionMessage(n,t))})},next:function(e){r=r.then(function(){return o.sendWithProtocol(o.createStreamItemMessage(n,e))})}})};for(var n in e)t(n)}},h.prototype.replaceStreamingParams=function(e){for(var t=[],n=[],r=0;r<e.length;r++){var o,i=e[r];this.isObservable(i)&&(o=this.invocationId,this.invocationId++,t[o]=i,n.push(o.toString()),e.splice(r,1))}return[t,n]},h.prototype.isObservable=function(e){return e&&e.subscribe&&"function"==typeof e.subscribe},h.prototype.createStreamInvocation=function(e,t,n){var r=this.invocationId;return this.invocationId++,{arguments:t,invocationId:r.toString(),streamIds:n,target:e,type:l.MessageType.StreamInvocation}},h.prototype.createCancelInvocation=function(e){return{invocationId:e,type:l.MessageType.CancelInvocation}},h.prototype.createStreamItemMessage=function(e,t){return{invocationId:e,item:t,type:l.MessageType.StreamItem}},h.prototype.createCompletionMessage=function(e,t,n){return t?{error:t,invocationId:e,type:l.MessageType.Completion}:{invocationId:e,result:n,type:l.MessageType.Completion}},h);function h(e,t,n,r){var o=this;s.Arg.isRequired(e,"connection"),s.Arg.isRequired(t,"logger"),s.Arg.isRequired(n,"protocol"),this.serverTimeoutInMilliseconds=3e4,this.keepAliveIntervalInMilliseconds=15e3,this.logger=t,this.protocol=n,this.connection=e,this.reconnectPolicy=r,this.handshakeProtocol=new i.HandshakeProtocol,this.connection.onreceive=function(e){return o.processIncomingData(e)},this.connection.onclose=function(e){return o.connectionClosed(e)},this.callbacks={},this.methods={},this.closedCallbacks=[],this.reconnectingCallbacks=[],this.reconnectedCallbacks=[],this.invocationId=0,this.receivedHandshakeResponse=!1,this.connectionState=u.Disconnected,this.connectionStarted=!1,this.cachedPingMessage=this.protocol.writeMessage({type:l.MessageType.Ping})}n.HubConnection=a},{"./HandshakeProtocol":6,"./IHubProtocol":11,"./ILogger":12,"./Subject":19,"./Utils":21}],10:[function(e,t,n){"use strict";var r=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e};Object.defineProperty(n,"__esModule",{value:!0});var o=e("./DefaultReconnectPolicy"),i=e("./HttpConnection"),s=e("./HubConnection"),a=e("./ILogger"),c=e("./JsonHubProtocol"),u=e("./Loggers"),l=e("./Utils"),p={trace:a.LogLevel.Trace,debug:a.LogLevel.Debug,info:a.LogLevel.Information,information:a.LogLevel.Information,warn:a.LogLevel.Warning,warning:a.LogLevel.Warning,error:a.LogLevel.Error,critical:a.LogLevel.Critical,none:a.LogLevel.None};var f=(h.prototype.configureLogging=function(e){var t;return l.Arg.isRequired(e,"logging"),void 0!==e.log?this.logger=e:"string"==typeof e?(t=function(e){var t=p[e.toLowerCase()];if(void 0!==t)return t;throw new Error("Unknown log level: "+e)}(e),this.logger=new l.ConsoleLogger(t)):this.logger=new l.ConsoleLogger(e),this},h.prototype.withUrl=function(e,t){return l.Arg.isRequired(e,"url"),this.url=e,this.httpConnectionOptions=r({},this.httpConnectionOptions,"object"==typeof t?t:{transport:t}),this},h.prototype.withHubProtocol=function(e){return l.Arg.isRequired(e,"protocol"),this.protocol=e,this},h.prototype.withAutomaticReconnect=function(e){if(this.reconnectPolicy)throw new Error("A reconnectPolicy has already been set.");return e?Array.isArray(e)?this.reconnectPolicy=new o.DefaultReconnectPolicy(e):this.reconnectPolicy=e:this.reconnectPolicy=new o.DefaultReconnectPolicy,this},h.prototype.build=function(){var e=this.httpConnectionOptions||{};if(void 0===e.logger&&(e.logger=this.logger),!this.url)throw new Error("The 'HubConnectionBuilder.withUrl' method must be called before building the connection.");var t=new i.HttpConnection(this.url,e);return s.HubConnection.create(t,this.logger||u.NullLogger.instance,this.protocol||new c.JsonHubProtocol,this.reconnectPolicy)},h);function h(){}n.HubConnectionBuilder=f},{"./DefaultReconnectPolicy":4,"./HttpConnection":8,"./HubConnection":9,"./ILogger":12,"./JsonHubProtocol":14,"./Loggers":15,"./Utils":21}],11:[function(e,t,n){"use strict";var r;Object.defineProperty(n,"__esModule",{value:!0}),(r=n.MessageType||(n.MessageType={}))[r.Invocation=1]="Invocation",r[r.StreamItem=2]="StreamItem",r[r.Completion=3]="Completion",r[r.StreamInvocation=4]="StreamInvocation",r[r.CancelInvocation=5]="CancelInvocation",r[r.Ping=6]="Ping",r[r.Close=7]="Close"},{}],12:[function(e,t,n){"use strict";var r;Object.defineProperty(n,"__esModule",{value:!0}),(r=n.LogLevel||(n.LogLevel={}))[r.Trace=0]="Trace",r[r.Debug=1]="Debug",r[r.Information=2]="Information",r[r.Warning=3]="Warning",r[r.Error=4]="Error",r[r.Critical=5]="Critical",r[r.None=6]="None"},{}],13:[function(e,t,n){"use strict";var r,o;Object.defineProperty(n,"__esModule",{value:!0}),(r=n.HttpTransportType||(n.HttpTransportType={}))[r.None=0]="None",r[r.WebSockets=1]="WebSockets",r[r.ServerSentEvents=2]="ServerSentEvents",r[r.LongPolling=4]="LongPolling",(o=n.TransferFormat||(n.TransferFormat={}))[o.Text=1]="Text",o[o.Binary=2]="Binary"},{}],14:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=e("./IHubProtocol"),c=e("./ILogger"),r=e("./ITransport"),u=e("./Loggers"),l=e("./TextMessageFormat"),o=(i.prototype.parseMessages=function(e,t){if("string"!=typeof e)throw new Error("Invalid input for JSON hub protocol. Expected a string.");if(!e)return[];null===t&&(t=u.NullLogger.instance);for(var n=[],r=0,o=l.TextMessageFormat.parse(e);r<o.length;r++){var i=o[r],s=JSON.parse(i);if("number"!=typeof s.type)throw new Error("Invalid payload.");switch(s.type){case a.MessageType.Invocation:this.isInvocationMessage(s);break;case a.MessageType.StreamItem:this.isStreamItemMessage(s);break;case a.MessageType.Completion:this.isCompletionMessage(s);break;case a.MessageType.Ping:case a.MessageType.Close:break;default:t.log(c.LogLevel.Information,"Unknown message type '"+s.type+"' ignored.");continue}n.push(s)}return n},i.prototype.writeMessage=function(e){return l.TextMessageFormat.write(JSON.stringify(e))},i.prototype.isInvocationMessage=function(e){this.assertNotEmptyString(e.target,"Invalid payload for Invocation message."),void 0!==e.invocationId&&this.assertNotEmptyString(e.invocationId,"Invalid payload for Invocation message.")},i.prototype.isStreamItemMessage=function(e){if(this.assertNotEmptyString(e.invocationId,"Invalid payload for StreamItem message."),void 0===e.item)throw new Error("Invalid payload for StreamItem message.")},i.prototype.isCompletionMessage=function(e){if(e.result&&e.error)throw new Error("Invalid payload for Completion message.");!e.result&&e.error&&this.assertNotEmptyString(e.error,"Invalid payload for Completion message."),this.assertNotEmptyString(e.invocationId,"Invalid payload for Completion message.")},i.prototype.assertNotEmptyString=function(e,t){if("string"!=typeof e||""===e)throw new Error(t)},i);function i(){this.name="json",this.version=1,this.transferFormat=r.TransferFormat.Text}n.JsonHubProtocol=o},{"./IHubProtocol":11,"./ILogger":12,"./ITransport":13,"./Loggers":15,"./TextMessageFormat":20}],15:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=(o.prototype.log=function(e,t){},o.instance=new o,o);function o(){}n.NullLogger=r},{}],16:[function(e,t,n){"use strict";var r=this&&this.__awaiter||function(i,s,a,c){return new(a=a||Promise)(function(e,t){function n(e){try{o(c.next(e))}catch(e){t(e)}}function r(e){try{o(c.throw(e))}catch(e){t(e)}}function o(t){t.done?e(t.value):new a(function(e){e(t.value)}).then(n,r)}o((c=c.apply(i,s||[])).next())})},a=this&&this.__generator||function(n,r){var o,i,s,a={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]},e={next:t(0),throw:t(1),return:t(2)};return"function"==typeof Symbol&&(e[Symbol.iterator]=function(){return this}),e;function t(t){return function(e){return function(t){if(o)throw new TypeError("Generator is already executing.");for(;a;)try{if(o=1,i&&(s=2&t[0]?i.return:t[0]?i.throw||((s=i.return)&&s.call(i),0):i.next)&&!(s=s.call(i,t[1])).done)return s;switch(i=0,s&&(t=[2&t[0],s.value]),t[0]){case 0:case 1:s=t;break;case 4:return a.label++,{value:t[1],done:!1};case 5:a.label++,i=t[1],t=[0];continue;case 7:t=a.ops.pop(),a.trys.pop();continue;default:if(!(s=0<(s=a.trys).length&&s[s.length-1])&&(6===t[0]||2===t[0])){a=0;continue}if(3===t[0]&&(!s||t[1]>s[0]&&t[1]<s[3])){a.label=t[1];break}if(6===t[0]&&a.label<s[1]){a.label=s[1],s=t;break}if(s&&a.label<s[2]){a.label=s[2],a.ops.push(t);break}s[2]&&a.ops.pop(),a.trys.pop();continue}t=r.call(n,a)}catch(e){t=[6,e],i=0}finally{o=s=0}if(5&t[0])throw t[1];return{value:t[0]?t[1]:void 0,done:!0}}([t,e])}}};Object.defineProperty(n,"__esModule",{value:!0});var o=e("./AbortController"),c=e("./Errors"),u=e("./ILogger"),l=e("./ITransport"),p=e("./Utils"),i=(Object.defineProperty(s.prototype,"pollAborted",{get:function(){return this.pollAbort.aborted},enumerable:!0,configurable:!0}),s.prototype.connect=function(i,s){return r(this,void 0,void 0,function(){var t,n,r,o;return a(this,function(e){switch(e.label){case 0:if(p.Arg.isRequired(i,"url"),p.Arg.isRequired(s,"transferFormat"),p.Arg.isIn(s,l.TransferFormat,"transferFormat"),this.url=i,this.logger.log(u.LogLevel.Trace,"(LongPolling transport) Connecting."),s===l.TransferFormat.Binary&&"undefined"!=typeof XMLHttpRequest&&"string"!=typeof(new XMLHttpRequest).responseType)throw new Error("Binary protocols over XmlHttpRequest not implementing advanced features are not supported.");return t={abortSignal:this.pollAbort.signal,headers:{},timeout:1e5},s===l.TransferFormat.Binary&&(t.responseType="arraybuffer"),[4,this.getAccessToken()];case 1:return n=e.sent(),this.updateHeaderToken(t,n),r=i+"&_="+Date.now(),this.logger.log(u.LogLevel.Trace,"(LongPolling transport) polling: "+r+"."),[4,this.httpClient.get(r,t)];case 2:return 200!==(o=e.sent()).statusCode?(this.logger.log(u.LogLevel.Error,"(LongPolling transport) Unexpected response code: "+o.statusCode+"."),this.closeError=new c.HttpError(o.statusText||"",o.statusCode),this.running=!1):this.running=!0,this.receiving=this.poll(this.url,t),[2]}})})},s.prototype.getAccessToken=function(){return r(this,void 0,void 0,function(){return a(this,function(e){switch(e.label){case 0:return this.accessTokenFactory?[4,this.accessTokenFactory()]:[3,2];case 1:return[2,e.sent()];case 2:return[2,null]}})})},s.prototype.updateHeaderToken=function(e,t){e.headers||(e.headers={}),t?e.headers.Authorization="Bearer "+t:e.headers.Authorization&&delete e.headers.Authorization},s.prototype.poll=function(i,s){return r(this,void 0,void 0,function(){var t,n,r,o;return a(this,function(e){switch(e.label){case 0:e.trys.push([0,,8,9]),e.label=1;case 1:return this.running?[4,this.getAccessToken()]:[3,7];case 2:t=e.sent(),this.updateHeaderToken(s,t),e.label=3;case 3:return e.trys.push([3,5,,6]),n=i+"&_="+Date.now(),this.logger.log(u.LogLevel.Trace,"(LongPolling transport) polling: "+n+"."),[4,this.httpClient.get(n,s)];case 4:return 204===(r=e.sent()).statusCode?(this.logger.log(u.LogLevel.Information,"(LongPolling transport) Poll terminated by server."),this.running=!1):200!==r.statusCode?(this.logger.log(u.LogLevel.Error,"(LongPolling transport) Unexpected response code: "+r.statusCode+"."),this.closeError=new c.HttpError(r.statusText||"",r.statusCode),this.running=!1):r.content?(this.logger.log(u.LogLevel.Trace,"(LongPolling transport) data received. "+p.getDataDetail(r.content,this.logMessageContent)+"."),this.onreceive&&this.onreceive(r.content)):this.logger.log(u.LogLevel.Trace,"(LongPolling transport) Poll timed out, reissuing."),[3,6];case 5:return o=e.sent(),this.running?o instanceof c.TimeoutError?this.logger.log(u.LogLevel.Trace,"(LongPolling transport) Poll timed out, reissuing."):(this.closeError=o,this.running=!1):this.logger.log(u.LogLevel.Trace,"(LongPolling transport) Poll errored after shutdown: "+o.message),[3,6];case 6:return[3,1];case 7:return[3,9];case 8:return this.logger.log(u.LogLevel.Trace,"(LongPolling transport) Polling complete."),this.pollAborted||this.raiseOnClose(),[7];case 9:return[2]}})})},s.prototype.send=function(t){return r(this,void 0,void 0,function(){return a(this,function(e){return this.running?[2,p.sendMessage(this.logger,"LongPolling",this.httpClient,this.url,this.accessTokenFactory,t,this.logMessageContent)]:[2,Promise.reject(new Error("Cannot send until the transport is connected"))]})})},s.prototype.stop=function(){return r(this,void 0,void 0,function(){var t,n;return a(this,function(e){switch(e.label){case 0:this.logger.log(u.LogLevel.Trace,"(LongPolling transport) Stopping polling."),this.running=!1,this.pollAbort.abort(),e.label=1;case 1:return e.trys.push([1,,5,6]),[4,this.receiving];case 2:return e.sent(),this.logger.log(u.LogLevel.Trace,"(LongPolling transport) sending DELETE request to "+this.url+"."),t={headers:{}},[4,this.getAccessToken()];case 3:return n=e.sent(),this.updateHeaderToken(t,n),[4,this.httpClient.delete(this.url,t)];case 4:return e.sent(),this.logger.log(u.LogLevel.Trace,"(LongPolling transport) DELETE request sent."),[3,6];case 5:return this.logger.log(u.LogLevel.Trace,"(LongPolling transport) Stop finished."),this.raiseOnClose(),[7];case 6:return[2]}})})},s.prototype.raiseOnClose=function(){var e;this.onclose&&(e="(LongPolling transport) Firing onclose event.",this.closeError&&(e+=" Error: "+this.closeError),this.logger.log(u.LogLevel.Trace,e),this.onclose(this.closeError))},s);function s(e,t,n,r){this.httpClient=e,this.accessTokenFactory=t,this.logger=n,this.pollAbort=new o.AbortController,this.logMessageContent=r,this.running=!1,this.onreceive=null,this.onclose=null}n.LongPollingTransport=i},{"./AbortController":2,"./Errors":5,"./ILogger":12,"./ITransport":13,"./Utils":21}],17:[function(f,e,h){(function(n){"use strict";var r,e=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),a=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e};Object.defineProperty(h,"__esModule",{value:!0});var o,c=f("./Errors"),u=f("./HttpClient"),l=f("./ILogger"),p=f("./Utils");"undefined"==typeof XMLHttpRequest&&(o=("function"==typeof __webpack_require__?__non_webpack_require__:f)("request"));var i,t=(i=u.HttpClient,e(s,i),s.prototype.send=function(i){var s=this;return new Promise(function(r,o){var e=p.isArrayBuffer(i.content)?n.from(i.content):i.content||"",t=s.request(i.url,{body:e,encoding:"arraybuffer"===i.responseType?null:"utf8",headers:a({"X-Requested-With":"XMLHttpRequest"},i.headers),method:i.method,timeout:i.timeout},function(e,t,n){if(i.abortSignal&&(i.abortSignal.onabort=null),e)return"ETIMEDOUT"===e.code&&(s.logger.log(l.LogLevel.Warning,"Timeout from HTTP request."),o(new c.TimeoutError)),s.logger.log(l.LogLevel.Warning,"Error from HTTP request. "+e),void o(e);200<=t.statusCode&&t.statusCode<300?r(new u.HttpResponse(t.statusCode,t.statusMessage||"",n)):o(new c.HttpError(t.statusMessage||"",t.statusCode||0))});i.abortSignal&&(i.abortSignal.onabort=function(){t.abort(),o(new c.AbortError)})})},s.prototype.getCookieString=function(e){return this.cookieJar.getCookieString(e)},s);function s(e){var t=i.call(this)||this;if(void 0===o)throw new Error("The 'request' module could not be loaded.");return t.logger=e,t.cookieJar=o.jar(),t.request=o.defaults({jar:t.cookieJar}),t}h.NodeHttpClient=t}).call(this,f("buffer").Buffer)},{"./Errors":5,"./HttpClient":7,"./ILogger":12,"./Utils":21,buffer:27}],18:[function(e,t,n){"use strict";var r=this&&this.__awaiter||function(i,s,a,c){return new(a=a||Promise)(function(e,t){function n(e){try{o(c.next(e))}catch(e){t(e)}}function r(e){try{o(c.throw(e))}catch(e){t(e)}}function o(t){t.done?e(t.value):new a(function(e){e(t.value)}).then(n,r)}o((c=c.apply(i,s||[])).next())})},o=this&&this.__generator||function(n,r){var o,i,s,a={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]},e={next:t(0),throw:t(1),return:t(2)};return"function"==typeof Symbol&&(e[Symbol.iterator]=function(){return this}),e;function t(t){return function(e){return function(t){if(o)throw new TypeError("Generator is already executing.");for(;a;)try{if(o=1,i&&(s=2&t[0]?i.return:t[0]?i.throw||((s=i.return)&&s.call(i),0):i.next)&&!(s=s.call(i,t[1])).done)return s;switch(i=0,s&&(t=[2&t[0],s.value]),t[0]){case 0:case 1:s=t;break;case 4:return a.label++,{value:t[1],done:!1};case 5:a.label++,i=t[1],t=[0];continue;case 7:t=a.ops.pop(),a.trys.pop();continue;default:if(!(s=0<(s=a.trys).length&&s[s.length-1])&&(6===t[0]||2===t[0])){a=0;continue}if(3===t[0]&&(!s||t[1]>s[0]&&t[1]<s[3])){a.label=t[1];break}if(6===t[0]&&a.label<s[1]){a.label=s[1],s=t;break}if(s&&a.label<s[2]){a.label=s[2],a.ops.push(t);break}s[2]&&a.ops.pop(),a.trys.pop();continue}t=r.call(n,a)}catch(e){t=[6,e],i=0}finally{o=s=0}if(5&t[0])throw t[1];return{value:t[0]?t[1]:void 0,done:!0}}([t,e])}}};Object.defineProperty(n,"__esModule",{value:!0});var c=e("./ILogger"),u=e("./ITransport"),l=e("./Utils"),i=(s.prototype.connect=function(s,a){return r(this,void 0,void 0,function(){var t,i=this;return o(this,function(e){switch(e.label){case 0:return l.Arg.isRequired(s,"url"),l.Arg.isRequired(a,"transferFormat"),l.Arg.isIn(a,u.TransferFormat,"transferFormat"),this.logger.log(c.LogLevel.Trace,"(SSE transport) Connecting."),this.url=s,this.accessTokenFactory?[4,this.accessTokenFactory()]:[3,2];case 1:(t=e.sent())&&(s+=(s.indexOf("?")<0?"?":"&")+"access_token="+encodeURIComponent(t)),e.label=2;case 2:return[2,new Promise(function(e,n){var t,r,o=!1;if(a===u.TransferFormat.Text){r=l.Platform.isBrowser||l.Platform.isWebWorker?new i.eventSourceConstructor(s,{withCredentials:!0}):(t=i.httpClient.getCookieString(s),new i.eventSourceConstructor(s,{withCredentials:!0,headers:{Cookie:t}}));try{r.onmessage=function(e){if(i.onreceive)try{i.logger.log(c.LogLevel.Trace,"(SSE transport) data received. "+l.getDataDetail(e.data,i.logMessageContent)+"."),i.onreceive(e.data)}catch(e){return void i.close(e)}},r.onerror=function(e){var t=new Error(e.data||"Error occurred");o?i.close(t):n(t)},r.onopen=function(){i.logger.log(c.LogLevel.Information,"SSE connected to "+i.url),i.eventSource=r,o=!0,e()}}catch(e){return void n(e)}}else n(new Error("The Server-Sent Events transport only supports the 'Text' transfer format"))})]}})})},s.prototype.send=function(t){return r(this,void 0,void 0,function(){return o(this,function(e){return this.eventSource?[2,l.sendMessage(this.logger,"SSE",this.httpClient,this.url,this.accessTokenFactory,t,this.logMessageContent)]:[2,Promise.reject(new Error("Cannot send until the transport is connected"))]})})},s.prototype.stop=function(){return this.close(),Promise.resolve()},s.prototype.close=function(e){this.eventSource&&(this.eventSource.close(),this.eventSource=void 0,this.onclose&&this.onclose(e))},s);function s(e,t,n,r,o){this.httpClient=e,this.accessTokenFactory=t,this.logger=n,this.logMessageContent=r,this.eventSourceConstructor=o,this.onreceive=null,this.onclose=null}n.ServerSentEventsTransport=i},{"./ILogger":12,"./ITransport":13,"./Utils":21}],19:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e("./Utils"),o=(i.prototype.next=function(e){for(var t=0,n=this.observers;t<n.length;t++)n[t].next(e)},i.prototype.error=function(e){for(var t=0,n=this.observers;t<n.length;t++){var r=n[t];r.error&&r.error(e)}},i.prototype.complete=function(){for(var e=0,t=this.observers;e<t.length;e++){var n=t[e];n.complete&&n.complete()}},i.prototype.subscribe=function(e){return this.observers.push(e),new r.SubjectSubscription(this,e)},i);function i(){this.observers=[]}n.Subject=o},{"./Utils":21}],20:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=(o.write=function(e){return""+e+o.RecordSeparator},o.parse=function(e){if(e[e.length-1]!==o.RecordSeparator)throw new Error("Message is incomplete.");var t=e.split(o.RecordSeparator);return t.pop(),t},o.RecordSeparatorCode=30,o.RecordSeparator=String.fromCharCode(o.RecordSeparatorCode),o);function o(){}n.TextMessageFormat=r},{}],21:[function(e,t,n){"use strict";var r=this&&this.__awaiter||function(i,s,a,c){return new(a=a||Promise)(function(e,t){function n(e){try{o(c.next(e))}catch(e){t(e)}}function r(e){try{o(c.throw(e))}catch(e){t(e)}}function o(t){t.done?e(t.value):new a(function(e){e(t.value)}).then(n,r)}o((c=c.apply(i,s||[])).next())})},h=this&&this.__generator||function(n,r){var o,i,s,a={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]},e={next:t(0),throw:t(1),return:t(2)};return"function"==typeof Symbol&&(e[Symbol.iterator]=function(){return this}),e;function t(t){return function(e){return function(t){if(o)throw new TypeError("Generator is already executing.");for(;a;)try{if(o=1,i&&(s=2&t[0]?i.return:t[0]?i.throw||((s=i.return)&&s.call(i),0):i.next)&&!(s=s.call(i,t[1])).done)return s;switch(i=0,s&&(t=[2&t[0],s.value]),t[0]){case 0:case 1:s=t;break;case 4:return a.label++,{value:t[1],done:!1};case 5:a.label++,i=t[1],t=[0];continue;case 7:t=a.ops.pop(),a.trys.pop();continue;default:if(!(s=0<(s=a.trys).length&&s[s.length-1])&&(6===t[0]||2===t[0])){a=0;continue}if(3===t[0]&&(!s||t[1]>s[0]&&t[1]<s[3])){a.label=t[1];break}if(6===t[0]&&a.label<s[1]){a.label=s[1],s=t;break}if(s&&a.label<s[2]){a.label=s[2],a.ops.push(t);break}s[2]&&a.ops.pop(),a.trys.pop();continue}t=r.call(n,a)}catch(e){t=[6,e],i=0}finally{o=s=0}if(5&t[0])throw t[1];return{value:t[0]?t[1]:void 0,done:!0}}([t,e])}}};Object.defineProperty(n,"__esModule",{value:!0});var d=e("./ILogger"),o=e("./Loggers"),i=(s.isRequired=function(e,t){if(null==e)throw new Error("The '"+t+"' argument is required.")},s.isIn=function(e,t,n){if(!(e in t))throw new Error("Unknown "+n+" value: "+e+".")},s);function s(){}n.Arg=i;var a=(Object.defineProperty(c,"isBrowser",{get:function(){return"object"==typeof window},enumerable:!0,configurable:!0}),Object.defineProperty(c,"isWebWorker",{get:function(){return"object"==typeof self&&"importScripts"in self},enumerable:!0,configurable:!0}),Object.defineProperty(c,"isNode",{get:function(){return!this.isBrowser&&!this.isWebWorker},enumerable:!0,configurable:!0}),c);function c(){}function g(e,t){var n="";return v(e)?(n="Binary data of length "+e.byteLength,t&&(n+=". Content: '"+u(e)+"'")):"string"==typeof e&&(n="String data of length "+e.length,t&&(n+=". Content: '"+e+"'")),n}function u(e){var t=new Uint8Array(e),n="";return t.forEach(function(e){n+="0x"+(e<16?"0":"")+e.toString(16)+" "}),n.substr(0,n.length-1)}function v(e){return e&&"undefined"!=typeof ArrayBuffer&&(e instanceof ArrayBuffer||e.constructor&&"ArrayBuffer"===e.constructor.name)}n.Platform=a,n.getDataDetail=g,n.formatArrayBuffer=u,n.isArrayBuffer=v,n.sendMessage=function(s,a,c,u,l,p,f){return r(this,void 0,void 0,function(){var t,n,r,o,i;return h(this,function(e){switch(e.label){case 0:return l?[4,l()]:[3,2];case 1:(r=e.sent())&&((t={}).Authorization="Bearer "+r,n=t),e.label=2;case 2:return s.log(d.LogLevel.Trace,"("+a+" transport) sending data. "+g(p,f)+"."),o=v(p)?"arraybuffer":"text",[4,c.post(u,{content:p,headers:n,responseType:o})];case 3:return i=e.sent(),s.log(d.LogLevel.Trace,"("+a+" transport) request complete. Response status: "+i.statusCode+"."),[2]}})})},n.createLogger=function(e){return void 0===e?new f(d.LogLevel.Information):null===e?o.NullLogger.instance:e.log?e:new f(e)};var l=(p.prototype.dispose=function(){var e=this.subject.observers.indexOf(this.observer);-1<e&&this.subject.observers.splice(e,1),0===this.subject.observers.length&&this.subject.cancelCallback&&this.subject.cancelCallback().catch(function(e){})},p);function p(e,t){this.subject=e,this.observer=t}n.SubjectSubscription=l;var f=(m.prototype.log=function(e,t){if(e>=this.minimumLogLevel)switch(e){case d.LogLevel.Critical:case d.LogLevel.Error:this.outputConsole.error("["+(new Date).toISOString()+"] "+d.LogLevel[e]+": "+t);break;case d.LogLevel.Warning:this.outputConsole.warn("["+(new Date).toISOString()+"] "+d.LogLevel[e]+": "+t);break;case d.LogLevel.Information:this.outputConsole.info("["+(new Date).toISOString()+"] "+d.LogLevel[e]+": "+t);break;default:this.outputConsole.log("["+(new Date).toISOString()+"] "+d.LogLevel[e]+": "+t)}},m);function m(e){this.minimumLogLevel=e,this.outputConsole=console}n.ConsoleLogger=f},{"./ILogger":12,"./Loggers":15}],22:[function(e,t,n){"use strict";var r=this&&this.__awaiter||function(i,s,a,c){return new(a=a||Promise)(function(e,t){function n(e){try{o(c.next(e))}catch(e){t(e)}}function r(e){try{o(c.throw(e))}catch(e){t(e)}}function o(t){t.done?e(t.value):new a(function(e){e(t.value)}).then(n,r)}o((c=c.apply(i,s||[])).next())})},o=this&&this.__generator||function(n,r){var o,i,s,a={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]},e={next:t(0),throw:t(1),return:t(2)};return"function"==typeof Symbol&&(e[Symbol.iterator]=function(){return this}),e;function t(t){return function(e){return function(t){if(o)throw new TypeError("Generator is already executing.");for(;a;)try{if(o=1,i&&(s=2&t[0]?i.return:t[0]?i.throw||((s=i.return)&&s.call(i),0):i.next)&&!(s=s.call(i,t[1])).done)return s;switch(i=0,s&&(t=[2&t[0],s.value]),t[0]){case 0:case 1:s=t;break;case 4:return a.label++,{value:t[1],done:!1};case 5:a.label++,i=t[1],t=[0];continue;case 7:t=a.ops.pop(),a.trys.pop();continue;default:if(!(s=0<(s=a.trys).length&&s[s.length-1])&&(6===t[0]||2===t[0])){a=0;continue}if(3===t[0]&&(!s||t[1]>s[0]&&t[1]<s[3])){a.label=t[1];break}if(6===t[0]&&a.label<s[1]){a.label=s[1],s=t;break}if(s&&a.label<s[2]){a.label=s[2],a.ops.push(t);break}s[2]&&a.ops.pop(),a.trys.pop();continue}t=r.call(n,a)}catch(e){t=[6,e],i=0}finally{o=s=0}if(5&t[0])throw t[1];return{value:t[0]?t[1]:void 0,done:!0}}([t,e])}}};Object.defineProperty(n,"__esModule",{value:!0});var c=e("./ILogger"),u=e("./ITransport"),l=e("./Utils"),i=(s.prototype.connect=function(s,a){return r(this,void 0,void 0,function(){var t,i=this;return o(this,function(e){switch(e.label){case 0:return l.Arg.isRequired(s,"url"),l.Arg.isRequired(a,"transferFormat"),l.Arg.isIn(a,u.TransferFormat,"transferFormat"),this.logger.log(c.LogLevel.Trace,"(WebSockets transport) Connecting."),this.accessTokenFactory?[4,this.accessTokenFactory()]:[3,2];case 1:(t=e.sent())&&(s+=(s.indexOf("?")<0?"?":"&")+"access_token="+encodeURIComponent(t)),e.label=2;case 2:return[2,new Promise(function(t,n){var r;s=s.replace(/^http/,"ws");var e=i.httpClient.getCookieString(s),o=!1;l.Platform.isNode&&e&&(r=new i.webSocketConstructor(s,void 0,{headers:{Cookie:""+e}})),r=r||new i.webSocketConstructor(s),a===u.TransferFormat.Binary&&(r.binaryType="arraybuffer"),r.onopen=function(e){i.logger.log(c.LogLevel.Information,"WebSocket connected to "+s+"."),i.webSocket=r,o=!0,t()},r.onerror=function(e){var t=null,t="undefined"!=typeof ErrorEvent&&e instanceof ErrorEvent?e.error:new Error("There was an error with the transport.");n(t)},r.onmessage=function(e){i.logger.log(c.LogLevel.Trace,"(WebSockets transport) data received. "+l.getDataDetail(e.data,i.logMessageContent)+"."),i.onreceive&&i.onreceive(e.data)},r.onclose=function(e){var t;o?i.close(e):(t=null,t="undefined"!=typeof ErrorEvent&&e instanceof ErrorEvent?e.error:new Error("There was an error with the transport."),n(t))}})]}})})},s.prototype.send=function(e){return this.webSocket&&this.webSocket.readyState===this.webSocketConstructor.OPEN?(this.logger.log(c.LogLevel.Trace,"(WebSockets transport) sending data. "+l.getDataDetail(e,this.logMessageContent)+"."),this.webSocket.send(e),Promise.resolve()):Promise.reject("WebSocket is not in the OPEN state")},s.prototype.stop=function(){return this.webSocket&&(this.webSocket.onclose=function(){},this.webSocket.onmessage=function(){},this.webSocket.onerror=function(){},this.webSocket.close(),this.webSocket=void 0,this.close(void 0)),Promise.resolve()},s.prototype.close=function(e){this.logger.log(c.LogLevel.Trace,"(WebSockets transport) socket closed."),this.onclose&&(!e||!1!==e.wasClean&&1e3===e.code?this.onclose():this.onclose(new Error("WebSocket closed with status code: "+e.code+" ("+e.reason+").")))},s);function s(e,t,n,r,o){this.logger=n,this.accessTokenFactory=t,this.logMessageContent=r,this.webSocketConstructor=o,this.httpClient=e,this.onreceive=null,this.onclose=null}n.WebSocketTransport=i},{"./ILogger":12,"./ITransport":13,"./Utils":21}],23:[function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(n,"__esModule",{value:!0});var i,s=e("./Errors"),a=e("./HttpClient"),c=e("./ILogger"),u=(i=a.HttpClient,o(l,i),l.prototype.send=function(o){var i=this;return o.abortSignal&&o.abortSignal.aborted?Promise.reject(new s.AbortError):o.method?o.url?new Promise(function(e,t){var n=new XMLHttpRequest;n.open(o.method,o.url,!0),n.withCredentials=!0,n.setRequestHeader("X-Requested-With","XMLHttpRequest"),n.setRequestHeader("Content-Type","text/plain;charset=UTF-8");var r=o.headers;r&&Object.keys(r).forEach(function(e){n.setRequestHeader(e,r[e])}),o.responseType&&(n.responseType=o.responseType),o.abortSignal&&(o.abortSignal.onabort=function(){n.abort(),t(new s.AbortError)}),o.timeout&&(n.timeout=o.timeout),n.onload=function(){o.abortSignal&&(o.abortSignal.onabort=null),200<=n.status&&n.status<300?e(new a.HttpResponse(n.status,n.statusText,n.response||n.responseText)):t(new s.HttpError(n.statusText,n.status))},n.onerror=function(){i.logger.log(c.LogLevel.Warning,"Error from HTTP request. "+n.status+": "+n.statusText+"."),t(new s.HttpError(n.statusText,n.status))},n.ontimeout=function(){i.logger.log(c.LogLevel.Warning,"Timeout from HTTP request."),t(new s.TimeoutError)},n.send(o.content||"")}):Promise.reject(new Error("No url defined.")):Promise.reject(new Error("No method defined."))},l);function l(e){var t=i.call(this)||this;return t.logger=e,t}n.XhrHttpClient=u},{"./Errors":5,"./HttpClient":7,"./ILogger":12}],24:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.VERSION="3.1.3";var r=e("./Errors");n.AbortError=r.AbortError,n.HttpError=r.HttpError,n.TimeoutError=r.TimeoutError;var o=e("./HttpClient");n.HttpClient=o.HttpClient,n.HttpResponse=o.HttpResponse;var i=e("./DefaultHttpClient");n.DefaultHttpClient=i.DefaultHttpClient;var s=e("./HubConnection");n.HubConnection=s.HubConnection,n.HubConnectionState=s.HubConnectionState;var a=e("./HubConnectionBuilder");n.HubConnectionBuilder=a.HubConnectionBuilder;var c=e("./IHubProtocol");n.MessageType=c.MessageType;var u=e("./ILogger");n.LogLevel=u.LogLevel;var l=e("./ITransport");n.HttpTransportType=l.HttpTransportType,n.TransferFormat=l.TransferFormat;var p=e("./Loggers");n.NullLogger=p.NullLogger;var f=e("./JsonHubProtocol");n.JsonHubProtocol=f.JsonHubProtocol;var h=e("./Subject");n.Subject=h.Subject},{"./DefaultHttpClient":3,"./Errors":5,"./HttpClient":7,"./HubConnection":9,"./HubConnectionBuilder":10,"./IHubProtocol":11,"./ILogger":12,"./ITransport":13,"./JsonHubProtocol":14,"./Loggers":15,"./Subject":19}],25:[function(e,t,c){(function(w){"use strict";function P(e){var t=e.getBoundingClientRect();return{width:t.width,height:t.height,top:t.top,right:t.right,bottom:t.bottom,left:t.left,x:t.left,y:t.top}}function C(e){if("[object Window]"===e.toString())return e;var t=e.ownerDocument;return t?t.defaultView:window}function l(e){var t=C(e);return{scrollLeft:t.pageXOffset,scrollTop:t.pageYOffset}}function O(e){return e instanceof C(e).Element||e instanceof Element}function p(e){return e instanceof C(e).HTMLElement||e instanceof HTMLElement}function u(e){return e?(e.nodeName||"").toLowerCase():null}function I(e){return(O(e)?e.ownerDocument:e.document).documentElement}function f(e){return P(I(e)).left+l(e).scrollLeft}function E(e){return C(e).getComputedStyle(e)}function h(e){var t=E(e),n=t.overflow,r=t.overflowX,o=t.overflowY;return/auto|scroll|overlay|hidden/.test(n+o+r)}function L(e,t,n){void 0===n&&(n=!1);var r,o,i=I(t),s=P(e),a={scrollLeft:0,scrollTop:0},c={x:0,y:0};return n||("body"===u(t)&&!h(i)||(a=(r=t)!==C(r)&&p(r)?{scrollLeft:(o=r).scrollLeft,scrollTop:o.scrollTop}:l(r)),p(t)?((c=P(t)).x+=t.clientLeft,c.y+=t.clientTop):i&&(c.x=f(i))),{x:s.left+a.scrollLeft-c.x,y:s.top+a.scrollTop-c.y,width:s.width,height:s.height}}function ee(e){return{x:e.offsetLeft,y:e.offsetTop,width:e.offsetWidth,height:e.offsetHeight}}function a(e){return"html"===u(e)?e:e.assignedSlot||e.parentNode||e.host||I(e)}function T(e,t){void 0===t&&(t=[]);var n=function e(t){return 0<=["html","body","#document"].indexOf(u(t))?t.ownerDocument.body:p(t)&&h(t)?t:e(a(t))}(e),r="body"===u(n),o=C(n),i=r?[o].concat(o.visualViewport||[],h(n)?n:[]):n,s=t.concat(i);return r?s:s.concat(T(a(i)))}function r(e){return p(e)&&"fixed"!==E(e).position?e.offsetParent:null}function te(e){for(var t=C(e),n=r(e);n&&0<=["table","td","th"].indexOf(u(n));)n=r(n);return(!n||"body"!==u(n)||"static"!==E(n).position)&&n||t}Object.defineProperty(c,"__esModule",{value:!0});var ne="top",re="bottom",oe="right",ie="left",R="auto",B=[ne,re,oe,ie],se="start",d="end",x="clippingParents",A="viewport",D="popper",M="reference",N=B.reduce(function(e,t){return e.concat([t+"-"+se,t+"-"+d])},[]),U=[].concat(B,[R]).reduce(function(e,t){return e.concat([t,t+"-"+se,t+"-"+d])},[]),S=["beforeRead","read","afterRead","beforeMain","main","afterMain","beforeWrite","write","afterWrite"];function k(e){var r=new Map,o=new Set,t=[];return e.forEach(function(e){r.set(e.name,e)}),e.forEach(function(e){o.has(e.name)||!function n(e){o.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach(function(e){var t;o.has(e)||(t=r.get(e))&&n(t)}),t.push(e)}(e)}),t}function j(e){for(var t=arguments.length,n=new Array(1<t?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return[].concat(n).reduce(function(e,t){return e.replace(/%s/,t)},e)}var _='Popper: modifier "%s" provided an invalid %s property, expected %s but got %s',H='Popper: modifier "%s" requires "%s", but "%s" modifier is not available',W=["name","enabled","phase","fn","effect","requires","options"];function ae(e){return e.split("-")[0]}var F="Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.",o={placement:"bottom",modifiers:[],strategy:"absolute"};function q(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return!t.some(function(e){return!(e&&"function"==typeof e.getBoundingClientRect)})}function e(e){void 0===e&&(e={});var t=e.defaultModifiers,y=void 0===t?[]:t,n=e.defaultOptions,b=void 0===n?o:n;return function(f,h,t){void 0===t&&(t=b);var n,r,d={placement:"bottom",orderedModifiers:[],options:Object.assign({},o,{},b),modifiersData:{},elements:{reference:f,popper:h},attributes:{},styles:{}},g=[],l=!1,v={state:d,setOptions:function(e){m(),d.options=Object.assign({},b,{},d.options,{},e),d.scrollParents={reference:O(f)?T(f):f.contextElement?T(f.contextElement):[],popper:T(h)};var t,n,r,o,i,s,a,c,u,l,p=(r=[].concat(y,d.options.modifiers),o=r.reduce(function(e,t){var n=e[t.name];return e[t.name]=n?Object.assign({},n,{},t,{options:Object.assign({},n.options,{},t.options),data:Object.assign({},n.data,{},t.data)}):t,e},{}),t=Object.keys(o).map(function(e){return o[e]}),n=k(t),S.reduce(function(e,t){return e.concat(n.filter(function(e){return e.phase===t}))},[]));return d.orderedModifiers=p.filter(function(e){return e.enabled}),"production"!==w.env.NODE_ENV&&(c=[].concat(p,d.options.modifiers),u=function(e){return e.name},l=new Set,i=c.filter(function(e){var t=u(e);if(!l.has(t))return l.add(t),!0}),(a=i).forEach(function(n){Object.keys(n).forEach(function(e){switch(e){case"name":"string"!=typeof n.name&&console.error(j(_,String(n.name),'"name"','"string"','"'+String(n.name)+'"'));break;case"enabled":"boolean"!=typeof n.enabled&&console.error(j(_,n.name,'"enabled"','"boolean"','"'+String(n.enabled)+'"'));case"phase":S.indexOf(n.phase)<0&&console.error(j(_,n.name,'"phase"',"either "+S.join(", "),'"'+String(n.phase)+'"'));break;case"fn":"function"!=typeof n.fn&&console.error(j(_,n.name,'"fn"','"function"','"'+String(n.fn)+'"'));break;case"effect":"function"!=typeof n.effect&&console.error(j(_,n.name,'"effect"','"function"','"'+String(n.fn)+'"'));break;case"requires":Array.isArray(n.requires)||console.error(j(_,n.name,'"requires"','"array"','"'+String(n.requires)+'"'));break;case"requiresIfExists":Array.isArray(n.requiresIfExists)||console.error(j(_,n.name,'"requiresIfExists"','"array"','"'+String(n.requiresIfExists)+'"'));break;case"options":case"data":break;default:console.error('PopperJS: an invalid property has been provided to the "'+n.name+'" modifier, valid properties are '+W.map(function(e){return'"'+e+'"'}).join(", ")+'; but "'+e+'" was provided.')}n.requires&&n.requires.forEach(function(t){null==a.find(function(e){return e.name===t})&&console.error(j(H,String(n.name),t,t))})})}),ae(d.options.placement)===R&&(d.orderedModifiers.find(function(e){return"flip"===e.name})||console.error(['Popper: "auto" placements require the "flip" modifier be',"present and enabled to work."].join(" "))),[(s=E(h)).marginTop,s.marginRight,s.marginBottom,s.marginLeft].some(function(e){return parseFloat(e)})&&console.warn(['Popper: CSS "margin" styles cannot be used to apply padding',"between the popper and its reference element or boundary.","To replicate margin, use the `offset` modifier, as well as","the `padding` option in the `preventOverflow` and `flip`","modifiers."].join(" "))),d.orderedModifiers.forEach(function(e){var t,n=e.name,r=e.options,o=void 0===r?{}:r,i=e.effect;"function"==typeof i&&(t=i({state:d,name:n,instance:v,options:o}),g.push(t||function(){}))}),v.update()},forceUpdate:function(){if(!l){var e=d.elements,t=e.reference,n=e.popper;if(q(t,n)){d.rects={reference:L(t,te(n),"fixed"===d.options.strategy),popper:ee(n)},d.reset=!1,d.placement=d.options.placement,d.orderedModifiers.forEach(function(e){return d.modifiersData[e.name]=Object.assign({},e.data)});for(var r,o,i,s,a,c=0,u=0;u<d.orderedModifiers.length;u++){if("production"!==w.env.NODE_ENV&&100<(c+=1)){console.error("Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.");break}!0!==d.reset?(o=(r=d.orderedModifiers[u]).fn,s=void 0===(i=r.options)?{}:i,a=r.name,"function"==typeof o&&(d=o({state:d,options:s,name:a,instance:v})||d)):(d.reset=!1,u=-1)}}else"production"!==w.env.NODE_ENV&&console.error(F)}},update:(n=function(){return new Promise(function(e){v.forceUpdate(),e(d)})},function(){return r=r||new Promise(function(e){Promise.resolve().then(function(){r=void 0,e(n())})})}),destroy:function(){m(),l=!0}};if(!q(f,h))return"production"!==w.env.NODE_ENV&&console.error(F),v;function m(){g.forEach(function(e){return e()}),g=[]}return v.setOptions(t).then(function(e){!l&&t.onFirstUpdate&&t.onFirstUpdate(e)}),v}}var g={passive:!0};function ce(e){return e.split("-")[1]}function ue(e){return 0<=["top","bottom"].indexOf(e)?"x":"y"}function V(e){var t,n=e.reference,r=e.element,o=e.placement,i=o?ae(o):null,s=o?ce(o):null,a=n.x+n.width/2-r.width/2,c=n.y+n.height/2-r.height/2;switch(i){case ne:t={x:a,y:n.y-r.height};break;case re:t={x:a,y:n.y+n.height};break;case oe:t={x:n.x+n.width,y:c};break;case ie:t={x:n.x-r.width,y:c};break;default:t={x:n.x,y:n.y}}var u=i?ue(i):null;if(null!=u){var l="y"===u?"height":"width";switch(s){case se:t[u]=Math.floor(t[u])-Math.floor(n[l]/2-r[l]/2);break;case d:t[u]=Math.floor(t[u])+Math.ceil(n[l]/2-r[l]/2)}}return t}var X={top:"auto",right:"auto",bottom:"auto",left:"auto"};function v(e){var t,n,r,o,i,s,a=e.popper,c=e.popperRect,u=e.placement,l=e.offsets,p=e.position,f=e.gpuAcceleration,h=e.adaptive,d=(r=(n=l).x,o=n.y,i=window.devicePixelRatio||1,{x:Math.round(r*i)/i||0,y:Math.round(o*i)/i||0}),g=d.x,v=d.y,m=l.hasOwnProperty("x"),y=l.hasOwnProperty("y"),b=ie,w=ne,E=window;h&&((s=te(a))===C(a)&&(s=I(a)),u===ne&&(w=re,v-=s.clientHeight-c.height,v*=f?1:-1),u===ie&&(b=oe,g-=s.clientWidth-c.width,g*=f?1:-1));var L,T=Object.assign({position:p},h&&X);return f?Object.assign({},T,((L={})[w]=y?"0":"",L[b]=m?"0":"",L.transform=(E.devicePixelRatio||1)<2?"translate("+g+"px, "+v+"px)":"translate3d("+g+"px, "+v+"px, 0)",L)):Object.assign({},T,((t={})[w]=y?v+"px":"",t[b]=m?g+"px":"",t.transform="",t))}var t={left:"right",right:"left",bottom:"top",top:"bottom"};function z(e){return e.replace(/left|right|bottom|top/g,function(e){return t[e]})}var n={start:"end",end:"start"};function J(e){return e.replace(/start|end/g,function(e){return n[e]})}function m(e){return parseFloat(e)||0}function y(e){var t,n,r=C(e),o={top:m((n=p(t=e)?E(t):{}).borderTopWidth),right:m(n.borderRightWidth),bottom:m(n.borderBottomWidth),left:m(n.borderLeftWidth)},i="html"===u(e),s=f(e),a=e.clientWidth+o.right,c=e.clientHeight+o.bottom;return i&&50<r.innerHeight-e.clientHeight&&(c=r.innerHeight-o.bottom),{top:i?0:e.clientTop,right:e.clientLeft>o.left?o.right:i?r.innerWidth-a-s:e.offsetWidth-a,bottom:i?r.innerHeight-c:e.offsetHeight-c,left:i?s:e.clientLeft}}function b(e,t){var n=Boolean(t.getRootNode&&t.getRootNode().host);if(e.contains(t))return!0;if(n){var r=t;do{if(r&&e.isSameNode(r))return!0;r=r.parentNode||r.host}while(r)}return!1}function Y(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function G(e,t){return t===A?Y((s=C(e),a=s.visualViewport,c=s.innerWidth,u=s.innerHeight,a&&/iPhone|iPod|iPad/.test(navigator.platform)&&(c=a.width,u=a.height),{width:c,height:u,x:0,y:0})):p(t)?P(t):Y((n=I(e),r=C(n),o=l(n),(i=L(I(n),r)).height=Math.max(i.height,r.innerHeight),i.width=Math.max(i.width,r.innerWidth),i.x=-o.scrollLeft,i.y=-o.scrollTop,i));var n,r,o,i,s,a,c,u}function Q(o,e,t){var n,r,i,s="clippingParents"===e?(r=T(n=o),O(i=0<=["absolute","fixed"].indexOf(E(n).position)&&p(n)?te(n):n)?r.filter(function(e){return O(e)&&b(e,i)}):[]):[].concat(e),a=[].concat(s,[t]),c=a[0],u=a.reduce(function(e,t){var n=G(o,t),r=y(p(t)?t:I(o));return e.top=Math.max(n.top+r.top,e.top),e.right=Math.min(n.right-r.right,e.right),e.bottom=Math.min(n.bottom-r.bottom,e.bottom),e.left=Math.max(n.left+r.left,e.left),e},G(o,c));return u.width=u.right-u.left,u.height=u.bottom-u.top,u.x=u.left,u.y=u.top,u}function le(){return{top:0,right:0,bottom:0,left:0}}function $(e){return Object.assign({},le(),{},e)}function K(n,e){return e.reduce(function(e,t){return e[t]=n,e},{})}function pe(e,t){void 0===t&&(t={});var r,n=t.placement,o=void 0===n?e.placement:n,i=t.boundary,s=void 0===i?x:i,a=t.rootBoundary,c=void 0===a?A:a,u=t.elementContext,l=void 0===u?D:u,p=t.altBoundary,f=void 0!==p&&p,h=t.padding,d=void 0===h?0:h,g=$("number"!=typeof d?d:K(d,B)),v=l===D?M:D,m=e.elements.reference,y=e.rects.popper,b=e.elements[f?v:l],w=Q(O(b)?b:b.contextElement||I(e.elements.popper),s,c),E=P(m),L=V({reference:E,element:y,strategy:"absolute",placement:o}),T=Y(Object.assign({},y,{},L)),C=l===D?T:E,S={top:w.top-C.top+g.top,bottom:C.bottom-w.bottom+g.bottom,left:w.left-C.left+g.left,right:C.right-w.right+g.right},k=e.modifiersData.offset;return l===D&&k&&(r=k[o],Object.keys(S).forEach(function(e){var t=0<=[oe,re].indexOf(e)?1:-1,n=0<=[ne,re].indexOf(e)?"y":"x";S[e]+=r[n]*t})),S}function fe(e,t,n){return Math.max(e,Math.min(t,n))}function Z(e,t,n){return void 0===n&&(n={x:0,y:0}),{top:e.top-t.height-n.y,right:e.right-t.width+n.x,bottom:e.bottom-t.height+n.y,left:e.left-t.width-n.x}}function he(t){return[ne,oe,re,ie].some(function(e){return 0<=t[e]})}var i=[{name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var t=e.state,n=e.instance,r=e.options,o=r.scroll,i=void 0===o||o,s=r.resize,a=void 0===s||s,c=C(t.elements.popper),u=[].concat(t.scrollParents.reference,t.scrollParents.popper);return i&&u.forEach(function(e){e.addEventListener("scroll",n.update,g)}),a&&c.addEventListener("resize",n.update,g),function(){i&&u.forEach(function(e){e.removeEventListener("scroll",n.update,g)}),a&&c.removeEventListener("resize",n.update,g)}},data:{}},{name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,n=e.name;t.modifiersData[n]=V({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}},{name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t,n=e.state,r=e.options,o=r.gpuAcceleration,i=void 0===o||o,s=r.adaptive,a=void 0===s||s;"production"!==w.env.NODE_ENV&&(t=E(n.elements.popper).transitionProperty||"",a&&["transform","top","right","bottom","left"].some(function(e){return 0<=t.indexOf(e)})&&console.warn(["Popper: Detected CSS transitions on at least one of the following",'CSS properties: "transform", "top", "right", "bottom", "left".',"\n\n",'Disable the "computeStyles" modifier\'s `adaptive` option to allow',"for smooth transitions, or remove these properties from the CSS","transition declaration on the popper element if only transitioning","opacity or background-color for example.","\n\n","We recommend using the popper element as a wrapper around an inner","element that can have any CSS property transitioned for animations."].join(" ")));var c={placement:ae(n.placement),popper:n.elements.popper,popperRect:n.rects.popper,gpuAcceleration:i};null!=n.modifiersData.popperOffsets&&(n.styles.popper=Object.assign({},n.styles.popper,{},v(Object.assign({},c,{offsets:n.modifiersData.popperOffsets,position:n.options.strategy,adaptive:a})))),null!=n.modifiersData.arrow&&(n.styles.arrow=Object.assign({},n.styles.arrow,{},v(Object.assign({},c,{offsets:n.modifiersData.arrow,position:"absolute",adaptive:!1})))),n.attributes.popper=Object.assign({},n.attributes.popper,{"data-popper-placement":n.placement})},data:{}},{name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var o=e.state;Object.keys(o.elements).forEach(function(e){var t=o.styles[e]||{},n=o.attributes[e]||{},r=o.elements[e];p(r)&&u(r)&&(Object.assign(r.style,t),Object.keys(n).forEach(function(e){var t=n[e];!1===t?r.removeAttribute(e):r.setAttribute(e,!0===t?"":t)}))})},effect:function(e){var o=e.state,i={popper:{position:o.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(o.elements.popper.style,i.popper),o.elements.arrow&&Object.assign(o.elements.arrow.style,i.arrow),function(){Object.keys(o.elements).forEach(function(e){var t=o.elements[e],n=o.attributes[e]||{},r=Object.keys(o.styles.hasOwnProperty(e)?o.styles[e]:i[e]).reduce(function(e,t){return e[t]="",e},{});p(t)&&u(t)&&(Object.assign(t.style,r),Object.keys(n).forEach(function(e){t.removeAttribute(e)}))})}},requires:["computeStyles"]},{name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var l=e.state,t=e.options,n=e.name,r=t.offset,p=void 0===r?[0,0]:r,o=U.reduce(function(e,t){var n,r,o,i,s,a,c,u;return e[t]=(n=t,r=l.rects,o=p,i=ae(n),s=0<=[ie,ne].indexOf(i)?-1:1,a="function"==typeof o?o(Object.assign({},r,{placement:n})):o,c=(c=a[0])||0,u=((u=a[1])||0)*s,0<=[ie,oe].indexOf(i)?{x:u,y:c}:{x:c,y:u}),e},{}),i=o[l.placement],s=i.x,a=i.y;null!=l.modifiersData.popperOffsets&&(l.modifiersData.popperOffsets.x+=s,l.modifiersData.popperOffsets.y+=a),l.modifiersData[n]=o}},{name:"flip",enabled:!0,phase:"main",fn:function(e){var n=e.state,t=e.options,r=e.name;if(!n.modifiersData[r]._skip){for(var o=t.mainAxis,i=void 0===o||o,s=t.altAxis,a=void 0===s||s,c=t.fallbackPlacements,u=t.padding,l=t.boundary,p=t.rootBoundary,f=t.altBoundary,h=t.flipVariations,d=void 0===h||h,g=t.allowedAutoPlacements,v=n.options.placement,m=ae(v),y=c||(m===v||!d?[z(v)]:function(e){if(ae(e)===R)return[];var t=z(e);return[J(e),t,J(t)]}(v)),b=[v].concat(y).reduce(function(e,t){return e.concat(ae(t)===R?function(n,e){void 0===e&&(e={});var t=e.placement,r=e.boundary,o=e.rootBoundary,i=e.padding,s=e.flipVariations,a=e.allowedAutoPlacements,c=void 0===a?U:a,u=ce(t),l=(u?s?N:N.filter(function(e){return ce(e)===u}):B).filter(function(e){return 0<=c.indexOf(e)}).reduce(function(e,t){return e[t]=pe(n,{placement:t,boundary:r,rootBoundary:o,padding:i})[ae(t)],e},{});return Object.keys(l).sort(function(e,t){return l[e]-l[t]})}(n,{placement:t,boundary:l,rootBoundary:p,padding:u,flipVariations:d,allowedAutoPlacements:g}):t)},[]),w=n.rects.reference,E=n.rects.popper,L=new Map,T=!0,C=b[0],S=0;S<b.length;S++){var k=b[S],P=ae(k),O=ce(k)===se,I=0<=[ne,re].indexOf(P),x=I?"width":"height",A=pe(n,{placement:k,boundary:l,rootBoundary:p,altBoundary:f,padding:u}),D=I?O?oe:ie:O?re:ne;w[x]>E[x]&&(D=z(D));var M=z(D),j=[];if(i&&j.push(A[P]<=0),a&&j.push(A[D]<=0,A[M]<=0),j.every(function(e){return e})){C=k,T=!1;break}L.set(k,j)}if(T)for(var _=function(n){var e=b.find(function(e){var t=L.get(e);if(t)return t.slice(0,n).every(function(e){return e})});if(e)return C=e,"break"},H=d?3:1;0<H;H--){if("break"===_(H))break}n.placement!==C&&(n.modifiersData[r]._skip=!0,n.placement=C,n.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}},{name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var t,n,r,o,i,s,a,c,u,l,p,f,h,d,g,v,m,y,b,w,E,L,T,C,S,k,P,O=e.state,I=e.options,x=e.name,A=I.mainAxis,D=void 0===A||A,M=I.altAxis,j=void 0!==M&&M,_=I.boundary,H=I.rootBoundary,R=I.altBoundary,B=I.padding,N=I.tether,U=void 0===N||N,W=I.tetherOffset,F=void 0===W?0:W,q=pe(O,{boundary:_,rootBoundary:H,padding:B,altBoundary:R}),V=ae(O.placement),X=ce(O.placement),z=!X,J=ue(V),Y="x"===J?"y":"x",G=O.modifiersData.popperOffsets,Q=O.rects.reference,$=O.rects.popper,K="function"==typeof F?F(Object.assign({},O.rects,{placement:O.placement})):F,Z={x:0,y:0};G&&(D&&(t="y"===J?ne:ie,n="y"===J?re:oe,r="y"===J?"height":"width",o=G[J],i=G[J]+q[t],s=G[J]-q[n],a=U?-$[r]/2:0,c=X===se?Q[r]:$[r],u=X===se?-$[r]:-Q[r],l=O.elements.arrow,p=U&&l?ee(l):{width:0,height:0},h=(f=O.modifiersData["arrow#persistent"]?O.modifiersData["arrow#persistent"].padding:le())[t],d=f[n],g=fe(0,Q[r],p[r]),v=z?Q[r]/2-a-g-h-K:c-g-h-K,m=z?-Q[r]/2+a+g+d+K:u+g+d+K,b=(y=O.elements.arrow&&te(O.elements.arrow))?"y"===J?y.clientTop||0:y.clientLeft||0:0,w=O.modifiersData.offset?O.modifiersData.offset[O.placement][J]:0,E=G[J]+v-w-b,L=G[J]+m-w,T=fe(U?Math.min(i,E):i,o,U?Math.max(s,L):s),G[J]=T,Z[J]=T-o),j&&(C="x"===J?ne:ie,S="x"===J?re:oe,P=fe((k=G[Y])+q[C],k,k-q[S]),G[Y]=P,Z[Y]=P-k),O.modifiersData[x]=Z)},requiresIfExists:["offset"]},{name:"arrow",enabled:!0,phase:"main",fn:function(e){var t,n,r,o,i,s,a,c,u,l,p,f,h,d,g=e.state,v=e.name,m=g.elements.arrow,y=g.modifiersData.popperOffsets,b=ae(g.placement),w=ue(b),E=0<=[ie,oe].indexOf(b)?"height":"width";m&&y&&(n=g.modifiersData[v+"#persistent"].padding,r=ee(m),o="y"===w?ne:ie,i="y"===w?re:oe,s=g.rects.reference[E]+g.rects.reference[w]-y[w]-g.rects.popper[E],a=y[w]-g.rects.reference[w],u=(c=te(m))?"y"===w?c.clientHeight||0:c.clientWidth||0:0,l=s/2-a/2,p=n[o],f=u-r[E]-n[i],d=fe(p,h=u/2-r[E]/2+l,f),g.modifiersData[v]=((t={})[w]=d,t.centerOffset=d-h,t))},effect:function(e){var t=e.state,n=e.options,r=e.name,o=n.element,i=void 0===o?"[data-popper-arrow]":o,s=n.padding,a=void 0===s?0:s;null!=i&&("string"==typeof i&&!(i=t.elements.popper.querySelector(i))||("production"!==w.env.NODE_ENV&&(p(i)||console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).',"To use an SVG arrow, wrap it in an HTMLElement that will be used as","the arrow."].join(" "))),b(t.elements.popper,i)?(t.elements.arrow=i,t.modifiersData[r+"#persistent"]={padding:$("number"!=typeof a?a:K(a,B))}):"production"!==w.env.NODE_ENV&&console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper',"element."].join(" "))))},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]},{name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,n=e.name,r=t.rects.reference,o=t.rects.popper,i=t.modifiersData.preventOverflow,s=pe(t,{elementContext:"reference"}),a=pe(t,{altBoundary:!0}),c=Z(s,r),u=Z(a,o,i),l=he(c),p=he(u);t.modifiersData[n]={referenceClippingOffsets:c,popperEscapeOffsets:u,isReferenceHidden:l,hasPopperEscaped:p},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":l,"data-popper-escaped":p})}}],s=e({defaultModifiers:i});c.createPopper=s,c.defaultModifiers=i,c.detectOverflow=pe,c.popperGenerator=e}).call(this,e("_process"))},{_process:29}],26:[function(e,t,n){"use strict";n.byteLength=function(e){var t=p(e),n=t[0],r=t[1];return 3*(n+r)/4-r},n.toByteArray=function(e){var t,n,r=p(e),o=r[0],i=r[1],s=new l(function(e,t){return 3*(e+t)/4-t}(o,i)),a=0,c=0<i?o-4:o;for(n=0;n<c;n+=4)t=u[e.charCodeAt(n)]<<18|u[e.charCodeAt(n+1)]<<12|u[e.charCodeAt(n+2)]<<6|u[e.charCodeAt(n+3)],s[a++]=t>>16&255,s[a++]=t>>8&255,s[a++]=255&t;2===i&&(t=u[e.charCodeAt(n)]<<2|u[e.charCodeAt(n+1)]>>4,s[a++]=255&t);1===i&&(t=u[e.charCodeAt(n)]<<10|u[e.charCodeAt(n+1)]<<4|u[e.charCodeAt(n+2)]>>2,s[a++]=t>>8&255,s[a++]=255&t);return s},n.fromByteArray=function(e){for(var t,n=e.length,r=n%3,o=[],i=0,s=n-r;i<s;i+=16383)o.push(c(e,i,s<i+16383?s:i+16383));1==r?(t=e[n-1],o.push(a[t>>2]+a[t<<4&63]+"==")):2==r&&(t=(e[n-2]<<8)+e[n-1],o.push(a[t>>10]+a[t>>4&63]+a[t<<2&63]+"="));return o.join("")};for(var a=[],u=[],l="undefined"!=typeof Uint8Array?Uint8Array:Array,r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",o=0,i=r.length;o<i;++o)a[o]=r[o],u[r.charCodeAt(o)]=o;function p(e){var t=e.length;if(0<t%4)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function c(e,t,n){for(var r,o,i=[],s=t;s<n;s+=3)r=(e[s]<<16&16711680)+(e[s+1]<<8&65280)+(255&e[s+2]),i.push(a[(o=r)>>18&63]+a[o>>12&63]+a[o>>6&63]+a[63&o]);return i.join("")}u["-".charCodeAt(0)]=62,u["_".charCodeAt(0)]=63},{}],27:[function(B,e,N){(function(p){"use strict";var r=B("base64-js"),i=B("ieee754"),e="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;N.Buffer=p,N.SlowBuffer=function(e){+e!=e&&(e=0);return p.alloc(+e)},N.INSPECT_MAX_BYTES=50;var n=2147483647;function s(e){if(n<e)throw new RangeError('The value "'+e+'" is invalid for option "size"');var t=new Uint8Array(e);return Object.setPrototypeOf(t,p.prototype),t}function p(e,t,n){if("number"!=typeof e)return o(e,t,n);if("string"==typeof t)throw new TypeError('The "string" argument must be of type string. Received type number');return c(e)}function o(e,t,n){if("string"==typeof e)return function(e,t){"string"==typeof t&&""!==t||(t="utf8");if(!p.isEncoding(t))throw new TypeError("Unknown encoding: "+t);var n=0|h(e,t),r=s(n),o=r.write(e,t);o!==n&&(r=r.slice(0,o));return r}(e,t);if(ArrayBuffer.isView(e))return u(e);if(null==e)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(_(e,ArrayBuffer)||e&&_(e.buffer,ArrayBuffer))return l(e,t,n);if("undefined"!=typeof SharedArrayBuffer&&(_(e,SharedArrayBuffer)||e&&_(e.buffer,SharedArrayBuffer)))return l(e,t,n);if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type number');var r=e.valueOf&&e.valueOf();if(null!=r&&r!==e)return p.from(r,t,n);var o=function(e){if(p.isBuffer(e)){var t=0|f(e.length),n=s(t);return 0===n.length?n:(e.copy(n,0,0,t),n)}if(void 0!==e.length)return"number"!=typeof e.length||H(e.length)?s(0):u(e);if("Buffer"===e.type&&Array.isArray(e.data))return u(e.data)}(e);if(o)return o;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return p.from(e[Symbol.toPrimitive]("string"),t,n);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function a(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function c(e){return a(e),s(e<0?0:0|f(e))}function u(e){for(var t=e.length<0?0:0|f(e.length),n=s(t),r=0;r<t;r+=1)n[r]=255&e[r];return n}function l(e,t,n){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(n||0))throw new RangeError('"length" is outside of buffer bounds');var r=void 0===t&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,t):new Uint8Array(e,t,n);return Object.setPrototypeOf(r,p.prototype),r}function f(e){if(n<=e)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+n.toString(16)+" bytes");return 0|e}function h(e,t){if(p.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||_(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);var n=e.length,r=2<arguments.length&&!0===arguments[2];if(!r&&0===n)return 0;for(var o=!1;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":return D(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return M(e).length;default:if(o)return r?-1:D(e).length;t=(""+t).toLowerCase(),o=!0}}function d(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function g(e,t,n,r,o){if(0===e.length)return-1;if("string"==typeof n?(r=n,n=0):2147483647<n?n=2147483647:n<-2147483648&&(n=-2147483648),H(n=+n)&&(n=o?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(o)return-1;n=e.length-1}else if(n<0){if(!o)return-1;n=0}if("string"==typeof t&&(t=p.from(t,r)),p.isBuffer(t))return 0===t.length?-1:v(e,t,n,r,o);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):v(e,[t],n,r,o);throw new TypeError("val must be string, number or Buffer")}function v(e,t,n,r,o){var i=1,s=e.length,a=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;s/=i=2,a/=2,n/=2}function c(e,t){return 1===i?e[t]:e.readUInt16BE(t*i)}if(o)for(var u=-1,l=n;l<s;l++)if(c(e,l)===c(t,-1===u?0:l-u)){if(-1===u&&(u=l),l-u+1===a)return u*i}else-1!==u&&(l-=l-u),u=-1;else for(s<n+a&&(n=s-a),l=n;0<=l;l--){for(var p=!0,f=0;f<a;f++)if(c(e,l+f)!==c(t,f)){p=!1;break}if(p)return l}return-1}function m(e,t,n,r){n=Number(n)||0;var o=e.length-n;(!r||o<(r=Number(r)))&&(r=o);var i=t.length;i/2<r&&(r=i/2);for(var s=0;s<r;++s){var a=parseInt(t.substr(2*s,2),16);if(H(a))return s;e[n+s]=a}return s}function y(e,t,n,r){return j(function(e){for(var t=[],n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,r)}function b(e,t,n,r){return j(function(e,t){for(var n,r,o,i=[],s=0;s<e.length&&!((t-=2)<0);++s)n=e.charCodeAt(s),r=n>>8,o=n%256,i.push(o),i.push(r);return i}(t,e.length-n),e,n,r)}function w(e,t,n){return 0===t&&n===e.length?r.fromByteArray(e):r.fromByteArray(e.slice(t,n))}function E(e,t,n){n=Math.min(e.length,n);for(var r=[],o=t;o<n;){var i,s,a,c,u=e[o],l=null,p=239<u?4:223<u?3:191<u?2:1;if(o+p<=n)switch(p){case 1:u<128&&(l=u);break;case 2:128==(192&(i=e[o+1]))&&127<(c=(31&u)<<6|63&i)&&(l=c);break;case 3:i=e[o+1],s=e[o+2],128==(192&i)&&128==(192&s)&&2047<(c=(15&u)<<12|(63&i)<<6|63&s)&&(c<55296||57343<c)&&(l=c);break;case 4:i=e[o+1],s=e[o+2],a=e[o+3],128==(192&i)&&128==(192&s)&&128==(192&a)&&65535<(c=(15&u)<<18|(63&i)<<12|(63&s)<<6|63&a)&&c<1114112&&(l=c)}null===l?(l=65533,p=1):65535<l&&(l-=65536,r.push(l>>>10&1023|55296),l=56320|1023&l),r.push(l),o+=p}return function(e){var t=e.length;if(t<=L)return String.fromCharCode.apply(String,e);var n="",r=0;for(;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=L));return n}(r)}N.kMaxLength=n,(p.TYPED_ARRAY_SUPPORT=function(){try{var e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}())||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(p.prototype,"parent",{enumerable:!0,get:function(){if(p.isBuffer(this))return this.buffer}}),Object.defineProperty(p.prototype,"offset",{enumerable:!0,get:function(){if(p.isBuffer(this))return this.byteOffset}}),p.poolSize=8192,p.from=o,Object.setPrototypeOf(p.prototype,Uint8Array.prototype),Object.setPrototypeOf(p,Uint8Array),p.alloc=function(e,t,n){return o=t,i=n,a(r=e),r<=0||void 0===o?s(r):"string"==typeof i?s(r).fill(o,i):s(r).fill(o);var r,o,i},p.allocUnsafe=c,p.allocUnsafeSlow=c,p.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==p.prototype},p.compare=function(e,t){if(_(e,Uint8Array)&&(e=p.from(e,e.offset,e.byteLength)),_(t,Uint8Array)&&(t=p.from(t,t.offset,t.byteLength)),!p.isBuffer(e)||!p.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;for(var n=e.length,r=t.length,o=0,i=Math.min(n,r);o<i;++o)if(e[o]!==t[o]){n=e[o],r=t[o];break}return n<r?-1:r<n?1:0},p.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},p.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return p.alloc(0);if(void 0===t)for(o=t=0;o<e.length;++o)t+=e[o].length;for(var n=p.allocUnsafe(t),r=0,o=0;o<e.length;++o){var i=e[o];if(_(i,Uint8Array)&&(i=p.from(i)),!p.isBuffer(i))throw new TypeError('"list" argument must be an Array of Buffers');i.copy(n,r),r+=i.length}return n},p.byteLength=h,p.prototype._isBuffer=!0,p.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)d(this,t,t+1);return this},p.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)d(this,t,t+3),d(this,t+1,t+2);return this},p.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)d(this,t,t+7),d(this,t+1,t+6),d(this,t+2,t+5),d(this,t+3,t+4);return this},p.prototype.toLocaleString=p.prototype.toString=function(){var e=this.length;return 0===e?"":0===arguments.length?E(this,0,e):function(e,t,n){var r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e=e||"utf8";;)switch(e){case"hex":return S(this,t,n);case"utf8":case"utf-8":return E(this,t,n);case"ascii":return T(this,t,n);case"latin1":case"binary":return C(this,t,n);case"base64":return w(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return k(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}.apply(this,arguments)},p.prototype.equals=function(e){if(!p.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===p.compare(this,e)},p.prototype.inspect=function(){var e="",t=N.INSPECT_MAX_BYTES,e=this.toString("hex",0,t).replace(/(.{2})/g,"$1 ").trim();return this.length>t&&(e+=" ... "),"<Buffer "+e+">"},e&&(p.prototype[e]=p.prototype.inspect),p.prototype.compare=function(e,t,n,r,o){if(_(e,Uint8Array)&&(e=p.from(e,e.offset,e.byteLength)),!p.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===r&&(r=0),void 0===o&&(o=this.length),t<0||n>e.length||r<0||o>this.length)throw new RangeError("out of range index");if(o<=r&&n<=t)return 0;if(o<=r)return-1;if(n<=t)return 1;if(this===e)return 0;for(var i=(o>>>=0)-(r>>>=0),s=(n>>>=0)-(t>>>=0),a=Math.min(i,s),c=this.slice(r,o),u=e.slice(t,n),l=0;l<a;++l)if(c[l]!==u[l]){i=c[l],s=u[l];break}return i<s?-1:s<i?1:0},p.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},p.prototype.indexOf=function(e,t,n){return g(this,e,t,n,!0)},p.prototype.lastIndexOf=function(e,t,n){return g(this,e,t,n,!1)},p.prototype.write=function(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(n)?(n>>>=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var o=this.length-t;if((void 0===n||o<n)&&(n=o),0<e.length&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r=r||"utf8";for(var i,s,a,c,u,l,p=!1;;)switch(r){case"hex":return m(this,e,t,n);case"utf8":case"utf-8":return u=t,l=n,j(D(e,(c=this).length-u),c,u,l);case"ascii":return y(this,e,t,n);case"latin1":case"binary":return y(this,e,t,n);case"base64":return i=this,s=t,a=n,j(M(e),i,s,a);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return b(this,e,t,n);default:if(p)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),p=!0}},p.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var L=4096;function T(e,t,n){var r="";n=Math.min(e.length,n);for(var o=t;o<n;++o)r+=String.fromCharCode(127&e[o]);return r}function C(e,t,n){var r="";n=Math.min(e.length,n);for(var o=t;o<n;++o)r+=String.fromCharCode(e[o]);return r}function S(e,t,n){var r=e.length;(!t||t<0)&&(t=0),(!n||n<0||r<n)&&(n=r);for(var o="",i=t;i<n;++i)o+=R[e[i]];return o}function k(e,t,n){for(var r=e.slice(t,n),o="",i=0;i<r.length;i+=2)o+=String.fromCharCode(r[i]+256*r[i+1]);return o}function P(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(n<e+t)throw new RangeError("Trying to access beyond buffer length")}function O(e,t,n,r,o,i){if(!p.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(o<t||t<i)throw new RangeError('"value" argument is out of bounds');if(n+r>e.length)throw new RangeError("Index out of range")}function I(e,t,n,r){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function x(e,t,n,r,o){return t=+t,n>>>=0,o||I(e,0,n,4),i.write(e,t,n,r,23,4),n+4}function A(e,t,n,r,o){return t=+t,n>>>=0,o||I(e,0,n,8),i.write(e,t,n,r,52,8),n+8}p.prototype.slice=function(e,t){var n=this.length;(e=~~e)<0?(e+=n)<0&&(e=0):n<e&&(e=n),(t=void 0===t?n:~~t)<0?(t+=n)<0&&(t=0):n<t&&(t=n),t<e&&(t=e);var r=this.subarray(e,t);return Object.setPrototypeOf(r,p.prototype),r},p.prototype.readUIntLE=function(e,t,n){e>>>=0,t>>>=0,n||P(e,t,this.length);for(var r=this[e],o=1,i=0;++i<t&&(o*=256);)r+=this[e+i]*o;return r},p.prototype.readUIntBE=function(e,t,n){e>>>=0,t>>>=0,n||P(e,t,this.length);for(var r=this[e+--t],o=1;0<t&&(o*=256);)r+=this[e+--t]*o;return r},p.prototype.readUInt8=function(e,t){return e>>>=0,t||P(e,1,this.length),this[e]},p.prototype.readUInt16LE=function(e,t){return e>>>=0,t||P(e,2,this.length),this[e]|this[e+1]<<8},p.prototype.readUInt16BE=function(e,t){return e>>>=0,t||P(e,2,this.length),this[e]<<8|this[e+1]},p.prototype.readUInt32LE=function(e,t){return e>>>=0,t||P(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},p.prototype.readUInt32BE=function(e,t){return e>>>=0,t||P(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},p.prototype.readIntLE=function(e,t,n){e>>>=0,t>>>=0,n||P(e,t,this.length);for(var r=this[e],o=1,i=0;++i<t&&(o*=256);)r+=this[e+i]*o;return(o*=128)<=r&&(r-=Math.pow(2,8*t)),r},p.prototype.readIntBE=function(e,t,n){e>>>=0,t>>>=0,n||P(e,t,this.length);for(var r=t,o=1,i=this[e+--r];0<r&&(o*=256);)i+=this[e+--r]*o;return(o*=128)<=i&&(i-=Math.pow(2,8*t)),i},p.prototype.readInt8=function(e,t){return e>>>=0,t||P(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},p.prototype.readInt16LE=function(e,t){e>>>=0,t||P(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},p.prototype.readInt16BE=function(e,t){e>>>=0,t||P(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},p.prototype.readInt32LE=function(e,t){return e>>>=0,t||P(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},p.prototype.readInt32BE=function(e,t){return e>>>=0,t||P(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},p.prototype.readFloatLE=function(e,t){return e>>>=0,t||P(e,4,this.length),i.read(this,e,!0,23,4)},p.prototype.readFloatBE=function(e,t){return e>>>=0,t||P(e,4,this.length),i.read(this,e,!1,23,4)},p.prototype.readDoubleLE=function(e,t){return e>>>=0,t||P(e,8,this.length),i.read(this,e,!0,52,8)},p.prototype.readDoubleBE=function(e,t){return e>>>=0,t||P(e,8,this.length),i.read(this,e,!1,52,8)},p.prototype.writeUIntLE=function(e,t,n,r){e=+e,t>>>=0,n>>>=0,r||O(this,e,t,n,Math.pow(2,8*n)-1,0);var o=1,i=0;for(this[t]=255&e;++i<n&&(o*=256);)this[t+i]=e/o&255;return t+n},p.prototype.writeUIntBE=function(e,t,n,r){e=+e,t>>>=0,n>>>=0,r||O(this,e,t,n,Math.pow(2,8*n)-1,0);var o=n-1,i=1;for(this[t+o]=255&e;0<=--o&&(i*=256);)this[t+o]=e/i&255;return t+n},p.prototype.writeUInt8=function(e,t,n){return e=+e,t>>>=0,n||O(this,e,t,1,255,0),this[t]=255&e,t+1},p.prototype.writeUInt16LE=function(e,t,n){return e=+e,t>>>=0,n||O(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},p.prototype.writeUInt16BE=function(e,t,n){return e=+e,t>>>=0,n||O(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},p.prototype.writeUInt32LE=function(e,t,n){return e=+e,t>>>=0,n||O(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},p.prototype.writeUInt32BE=function(e,t,n){return e=+e,t>>>=0,n||O(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},p.prototype.writeIntLE=function(e,t,n,r){var o;e=+e,t>>>=0,r||O(this,e,t,n,(o=Math.pow(2,8*n-1))-1,-o);var i=0,s=1,a=0;for(this[t]=255&e;++i<n&&(s*=256);)e<0&&0===a&&0!==this[t+i-1]&&(a=1),this[t+i]=(e/s>>0)-a&255;return t+n},p.prototype.writeIntBE=function(e,t,n,r){var o;e=+e,t>>>=0,r||O(this,e,t,n,(o=Math.pow(2,8*n-1))-1,-o);var i=n-1,s=1,a=0;for(this[t+i]=255&e;0<=--i&&(s*=256);)e<0&&0===a&&0!==this[t+i+1]&&(a=1),this[t+i]=(e/s>>0)-a&255;return t+n},p.prototype.writeInt8=function(e,t,n){return e=+e,t>>>=0,n||O(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},p.prototype.writeInt16LE=function(e,t,n){return e=+e,t>>>=0,n||O(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},p.prototype.writeInt16BE=function(e,t,n){return e=+e,t>>>=0,n||O(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},p.prototype.writeInt32LE=function(e,t,n){return e=+e,t>>>=0,n||O(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},p.prototype.writeInt32BE=function(e,t,n){return e=+e,t>>>=0,n||O(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},p.prototype.writeFloatLE=function(e,t,n){return x(this,e,t,!0,n)},p.prototype.writeFloatBE=function(e,t,n){return x(this,e,t,!1,n)},p.prototype.writeDoubleLE=function(e,t,n){return A(this,e,t,!0,n)},p.prototype.writeDoubleBE=function(e,t,n){return A(this,e,t,!1,n)},p.prototype.copy=function(e,t,n,r){if(!p.isBuffer(e))throw new TypeError("argument should be a Buffer");if(n=n||0,r||0===r||(r=this.length),t>=e.length&&(t=e.length),t=t||0,0<r&&r<n&&(r=n),r===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);var o=r-n;if(this===e&&"function"==typeof Uint8Array.prototype.copyWithin)this.copyWithin(t,n,r);else if(this===e&&n<t&&t<r)for(var i=o-1;0<=i;--i)e[i+t]=this[i+n];else Uint8Array.prototype.set.call(e,this.subarray(n,r),t);return o},p.prototype.fill=function(e,t,n,r){if("string"==typeof e){if("string"==typeof t?(r=t,t=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!p.isEncoding(r))throw new TypeError("Unknown encoding: "+r);var o;1===e.length&&(o=e.charCodeAt(0),("utf8"===r&&o<128||"latin1"===r)&&(e=o))}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;var i;if(t>>>=0,n=void 0===n?this.length:n>>>0,"number"==typeof(e=e||0))for(i=t;i<n;++i)this[i]=e;else{var s=p.isBuffer(e)?e:p.from(e,r),a=s.length;if(0===a)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(i=0;i<n-t;++i)this[i+t]=s[i%a]}return this};var t=/[^+/0-9A-Za-z-_]/g;function D(e,t){var n;t=t||1/0;for(var r=e.length,o=null,i=[],s=0;s<r;++s){if(55295<(n=e.charCodeAt(s))&&n<57344){if(!o){if(56319<n){-1<(t-=3)&&i.push(239,191,189);continue}if(s+1===r){-1<(t-=3)&&i.push(239,191,189);continue}o=n;continue}if(n<56320){-1<(t-=3)&&i.push(239,191,189),o=n;continue}n=65536+(o-55296<<10|n-56320)}else o&&-1<(t-=3)&&i.push(239,191,189);if(o=null,n<128){if(--t<0)break;i.push(n)}else if(n<2048){if((t-=2)<0)break;i.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;i.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;i.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return i}function M(e){return r.toByteArray(function(e){if((e=(e=e.split("=")[0]).trim().replace(t,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function j(e,t,n,r){for(var o=0;o<r&&!(o+n>=t.length||o>=e.length);++o)t[o+n]=e[o];return o}function _(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function H(e){return e!=e}var R=function(){for(var e="0123456789abcdef",t=new Array(256),n=0;n<16;++n)for(var r=16*n,o=0;o<16;++o)t[r+o]=e[n]+e[o];return t}()}).call(this,B("buffer").Buffer)},{"base64-js":26,buffer:27,ieee754:28}],28:[function(e,t,n){n.read=function(e,t,n,r,o){var i,s,a=8*o-r-1,c=(1<<a)-1,u=c>>1,l=-7,p=n?o-1:0,f=n?-1:1,h=e[t+p];for(p+=f,i=h&(1<<-l)-1,h>>=-l,l+=a;0<l;i=256*i+e[t+p],p+=f,l-=8);for(s=i&(1<<-l)-1,i>>=-l,l+=r;0<l;s=256*s+e[t+p],p+=f,l-=8);if(0===i)i=1-u;else{if(i===c)return s?NaN:1/0*(h?-1:1);s+=Math.pow(2,r),i-=u}return(h?-1:1)*s*Math.pow(2,i-r)},n.write=function(e,t,n,r,o,i){var s,a,c,u=8*i-o-1,l=(1<<u)-1,p=l>>1,f=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,h=r?0:i-1,d=r?1:-1,g=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,s=l):(s=Math.floor(Math.log(t)/Math.LN2),t*(c=Math.pow(2,-s))<1&&(s--,c*=2),2<=(t+=1<=s+p?f/c:f*Math.pow(2,1-p))*c&&(s++,c/=2),l<=s+p?(a=0,s=l):1<=s+p?(a=(t*c-1)*Math.pow(2,o),s+=p):(a=t*Math.pow(2,p-1)*Math.pow(2,o),s=0));8<=o;e[n+h]=255&a,h+=d,a/=256,o-=8);for(s=s<<o|a,u+=o;0<u;e[n+h]=255&s,h+=d,s/=256,u-=8);e[n+h-d]|=128*g}},{}],29:[function(e,t,n){var r,o,i=t.exports={};function s(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function c(t){if(r===setTimeout)return setTimeout(t,0);if((r===s||!r)&&setTimeout)return r=setTimeout,setTimeout(t,0);try{return r(t,0)}catch(e){try{return r.call(null,t,0)}catch(e){return r.call(this,t,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:s}catch(e){r=s}try{o="function"==typeof clearTimeout?clearTimeout:a}catch(e){o=a}}();var u,l=[],p=!1,f=-1;function h(){p&&u&&(p=!1,u.length?l=u.concat(l):f=-1,l.length&&d())}function d(){if(!p){var e=c(h);p=!0;for(var t=l.length;t;){for(u=l,l=[];++f<t;)u&&u[f].run();f=-1,t=l.length}u=null,p=!1,function(t){if(o===clearTimeout)return clearTimeout(t);if((o===a||!o)&&clearTimeout)return o=clearTimeout,clearTimeout(t);try{o(t)}catch(e){try{return o.call(null,t)}catch(e){return o.call(this,t)}}}(e)}}function g(e,t){this.fun=e,this.array=t}function v(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(1<arguments.length)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];l.push(new g(e,t)),1!==l.length||p||c(d)},g.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=v,i.addListener=v,i.once=v,i.off=v,i.removeListener=v,i.removeAllListeners=v,i.emit=v,i.prependListener=v,i.prependOnceListener=v,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},{}],30:[function(M,e,j){(function(ee){"use strict";Object.defineProperty(j,"__esModule",{value:!0});var te=M("@popperjs/core"),ne={passive:!0},re="tippy-iOS",r="tippy-content",a="tippy-backdrop",o="tippy-arrow",i="tippy-svg-arrow";function oe(e,t,n){if(Array.isArray(e)){var r=e[t];return null==r?Array.isArray(n)?n[t]:n:r}return e}function t(e,t){var n={}.toString.call(e);return 0===n.indexOf("[object")&&-1<n.indexOf(t+"]")}function ie(e,t){return"function"==typeof e?e.apply(void 0,t):e}function se(t,n){return 0===n?t:function(e){clearTimeout(r),r=setTimeout(function(){t(e)},n)};var r}function p(e,t){var n=Object.assign({},e);return t.forEach(function(e){delete n[e]}),n}function ae(e){return[].concat(e)}function ce(e,t){-1===e.indexOf(t)&&e.push(t)}function ue(e){return e.split("-")[0]}function le(e){return[].slice.call(e)}function pe(){return document.createElement("div")}function f(e){return t(e,"Element")}function fe(e){return t(e,"MouseEvent")}function s(e){return e&&e._tippy&&e._tippy.reference===e}function h(e){return f(e)?[e]:t(e,"NodeList")?le(e):Array.isArray(e)?e:le(document.querySelectorAll(e))}function he(e,t){e.forEach(function(e){e&&(e.style.transitionDuration=t+"ms")})}function de(e,t){e.forEach(function(e){e&&e.setAttribute("data-state",t)})}function ge(e){var t=ae(e)[0];return t&&t.ownerDocument||document}function ve(t,e,n){var r=e+"EventListener";["transitionend","webkitTransitionEnd"].forEach(function(e){t[r](e,n)})}var me={isTouch:!1},n=0;function d(){me.isTouch||(me.isTouch=!0,window.performance&&document.addEventListener("mousemove",c))}function c(){var e=performance.now();e-n<20&&(me.isTouch=!1,document.removeEventListener("mousemove",c)),n=e}function g(){var e,t=document.activeElement;s(t)&&(e=t._tippy,t.blur&&!e.state.isVisible&&t.blur())}var e="undefined"!=typeof window&&"undefined"!=typeof document,u=e?navigator.userAgent:"",ye=/MSIE |Trident\//.test(u),be=e&&/iPhone|iPad|iPod/.test(navigator.platform);function we(e){return[e+"() was called on a"+("destroy"===e?"n already-":" ")+"destroyed instance. This is a no-op but","indicates a potential memory leak."].join(" ")}function l(e){return e.replace(/[ \t]{2,}/g," ").replace(/^[ \t]*/gm,"").trim()}function v(e){return[l("\n  %ctippy.js\n\n  %c"+l(e)+"\n\n  %c👷‍ This is a development-only message. It will be removed in production.\n  "),"color: #00C584; font-size: 1.3em; font-weight: bold;","line-height: 1.5","color: #a6a095;"]}function Ee(e,t){var n;e&&(n=console).warn.apply(n,v(t))}function Le(e,t){var n;e&&(n=console).error.apply(n,v(t))}var m={animateFill:!1,followCursor:!1,inlinePositioning:!1,sticky:!1},Te=Object.assign({appendTo:function(){return document.body},aria:{content:"auto",expanded:"auto"},content:"",delay:0,duration:[300,250],getReferenceClientRect:null,hideOnClick:!0,ignoreAttributes:!1,interactive:!1,interactiveBorder:2,interactiveDebounce:0,moveTransition:"",offset:[0,10],onAfterUpdate:function(){},onBeforeUpdate:function(){},onCreate:function(){},onDestroy:function(){},onHidden:function(){},onHide:function(){},onMount:function(){},onShow:function(){},onShown:function(){},onTrigger:function(){},onUntrigger:function(){},onClickOutside:function(){},placement:"top",plugins:[],popperOptions:{},render:null,showOnCreate:!1,touch:!0,trigger:"mouseenter focus",triggerTarget:null},m,{},{allowHTML:!1,animation:"fade",arrow:!0,content:"",inertia:!1,maxWidth:350,role:"tooltip",theme:"",zIndex:9999}),y=Object.keys(Te);function Ce(o){var e=(o.plugins||[]).reduce(function(e,t){var n=t.name,r=t.defaultValue;return n&&(e[n]=void 0!==o[n]?o[n]:r),e},{});return Object.assign({},o,{},e)}function Se(e,t){var o,n,r=Object.assign({},t,{content:ie(t.content,[e])},t.ignoreAttributes?{}:(o=e,((n=t.plugins)?Object.keys(Ce(Object.assign({},Te,{plugins:n}))):y).reduce(function(t,n){var r=(o.getAttribute("data-tippy-"+n)||"").trim();if(!r)return t;if("content"===n)t[n]=r;else try{t[n]=JSON.parse(r)}catch(e){t[n]=r}return t},{})));return r.aria=Object.assign({},Te.aria,{},r.aria),r.aria={expanded:"auto"===r.aria.expanded?t.interactive:r.aria.expanded,content:"auto"===r.aria.content?t.interactive?null:"describedby":r.aria.content},r}function b(e,o){void 0===e&&(e={}),void 0===o&&(o=[]),Object.keys(e).forEach(function(t){var e,n,r=p(Te,Object.keys(m));Ee((e=r,n=t,!{}.hasOwnProperty.call(e,n))&&0===o.filter(function(e){return e.name===t}).length,["`"+t+"`","is not a valid prop. You may have spelled it incorrectly, or if it's","a plugin, forgot to pass it in an array as props.plugins.","\n\n","All props: https://atomiks.github.io/tippyjs/v6/all-props/\n","Plugins: https://atomiks.github.io/tippyjs/v6/plugins/"].join(" "))})}var w=function(){return"innerHTML"};function E(e,t){e[w()]=t}function L(e){var t=pe();return!0===e?t.className=o:(t.className=i,f(e)?t.appendChild(e):E(t,e)),t}function T(e,t){f(t.content)?(E(e,""),e.appendChild(t.content)):"function"!=typeof t.content&&(t.allowHTML?E(e,t.content):e.textContent=t.content)}function ke(e){var t=e.firstElementChild,n=le(t.children);return{box:t,content:n.find(function(e){return e.classList.contains(r)}),arrow:n.find(function(e){return e.classList.contains(o)||e.classList.contains(i)}),backdrop:n.find(function(e){return e.classList.contains(a)})}}function C(s){var a=pe(),e=pe();e.className="tippy-box",e.setAttribute("data-state","hidden"),e.setAttribute("tabindex","-1");var t=pe();function n(e,t){var n=ke(a),r=n.box,o=n.content,i=n.arrow;t.theme?r.setAttribute("data-theme",t.theme):r.removeAttribute("data-theme"),"string"==typeof t.animation?r.setAttribute("data-animation",t.animation):r.removeAttribute("data-animation"),t.inertia?r.setAttribute("data-inertia",""):r.removeAttribute("data-inertia"),r.style.maxWidth="number"==typeof t.maxWidth?t.maxWidth+"px":t.maxWidth,t.role?r.setAttribute("role",t.role):r.removeAttribute("role"),e.content!==t.content&&T(o,s.props),t.arrow?i?e.arrow!==t.arrow&&(r.removeChild(i),r.appendChild(L(t.arrow))):r.appendChild(L(t.arrow)):i&&r.removeChild(i)}return t.className=r,t.setAttribute("data-state","hidden"),T(t,s.props),a.appendChild(e),e.appendChild(t),n(s.props,s.props),{popper:a,onUpdate:n}}C.$$tippy=!0;var Pe=1,Oe=[],Ie=[];function S(p,e){var i,n,r,s,o,f,a,c,u=Se(p,Object.assign({},Te,{},Ce(e))),l=!1,h=!1,d=!1,g=[],v=se(X,u.interactiveDebounce),m=ge(u.triggerTarget||p),t=Pe++,y=(c=u.plugins).filter(function(e,t){return c.indexOf(e)===t}),b={id:t,reference:p,popper:pe(),popperInstance:null,props:u,state:{isEnabled:!0,isVisible:!1,isDestroyed:!1,isMounted:!1,isShown:!1},plugins:y,clearDelayTimeouts:function(){clearTimeout(i),clearTimeout(n),cancelAnimationFrame(r)},setProps:function(e){"production"!==ee.env.NODE_ENV&&Ee(b.state.isDestroyed,we("setProps"));if(b.state.isDestroyed)return;M("onBeforeUpdate",[b,e]),q();var t=b.props,n=Se(p,Object.assign({},b.props,{},e,{ignoreAttributes:!0}));b.props=n,F(),t.interactiveDebounce!==n.interactiveDebounce&&(H(),v=se(X,n.interactiveDebounce));t.triggerTarget&&!n.triggerTarget?ae(t.triggerTarget).forEach(function(e){e.removeAttribute("aria-expanded")}):n.triggerTarget&&p.removeAttribute("aria-expanded");_(),A(),L&&L(t,n);b.popperInstance&&(G(),$().forEach(function(e){requestAnimationFrame(e._tippy.popperInstance.forceUpdate)}));M("onAfterUpdate",[b,e])},setContent:function(e){b.setProps({content:e})},show:function(){"production"!==ee.env.NODE_ENV&&Ee(b.state.isDestroyed,we("show"));var e=b.state.isVisible,t=b.state.isDestroyed,n=!b.state.isEnabled,r=me.isTouch&&!b.props.touch,o=oe(b.props.duration,0,Te.duration);if(e||t||n||r)return;if(O().hasAttribute("disabled"))return;if(M("onShow",[b],!1),!1===b.props.onShow(b))return;b.state.isVisible=!0,P()&&(E.style.visibility="visible");A(),B(),b.state.isMounted||(E.style.transition="none");{var i,s,a;P()&&(i=I(),s=i.box,a=i.content,he([s,a],0))}f=function(){var e,t,n;b.state.isVisible&&!d&&(d=!0,E.offsetHeight,E.style.transition=b.props.moveTransition,P()&&b.props.animation&&(he([t=(e=I()).box,n=e.content],o),de([t,n],"visible")),j(),_(),ce(Ie,b),D(!0),b.state.isMounted=!0,M("onMount",[b]),b.props.animation&&P()&&U(o,function(){b.state.isShown=!0,M("onShown",[b])}))},function(){var e,t=b.props.appendTo,n=O();e=b.props.interactive&&t===Te.appendTo||"parent"===t?n.parentNode:ie(t,[n]);e.contains(E)||e.appendChild(E);G(),"production"!==ee.env.NODE_ENV&&Ee(b.props.interactive&&t===Te.appendTo&&n.nextElementSibling!==E,["Interactive tippy element may not be accessible via keyboard","navigation because it is not directly after the reference element","in the DOM source order.","\n\n","Using a wrapper <div> or <span> tag around the reference element","solves this by creating a new parentNode context.","\n\n","Specifying `appendTo: document.body` silences this warning, but it","assumes you are using a focus management solution to handle","keyboard navigation.","\n\n","See: https://atomiks.github.io/tippyjs/v6/accessibility/#interactivity"].join(" "))}()},hide:function(){"production"!==ee.env.NODE_ENV&&Ee(b.state.isDestroyed,we("hide"));var e=!b.state.isVisible,t=b.state.isDestroyed,n=!b.state.isEnabled,r=oe(b.props.duration,1,Te.duration);if(e||t||n)return;if(M("onHide",[b],!1),!1===b.props.onHide(b))return;b.state.isVisible=!1,b.state.isShown=!1,d=!1,P()&&(E.style.visibility="hidden");{var o,i,s;H(),N(),A(),P()&&(o=I(),i=o.box,s=o.content,b.props.animation&&(he([i,s],r),de([i,s],"hidden")))}j(),_(),b.props.animation?P()&&function(e,t){U(e,function(){!b.state.isVisible&&E.parentNode&&E.parentNode.contains(E)&&t()})}(r,b.unmount):b.unmount()},enable:function(){b.state.isEnabled=!0},disable:function(){b.hide(),b.state.isEnabled=!1},unmount:function(){b.state.isVisible&&b.hide();if(!b.state.isMounted)return;Q(),$().forEach(function(e){e._tippy.unmount()}),E.parentNode&&E.parentNode.removeChild(E);0===(Ie=Ie.filter(function(e){return e!==b})).length&&D(!1);b.state.isMounted=!1,M("onHidden",[b])},destroy:function(){"production"!==ee.env.NODE_ENV&&Ee(b.state.isDestroyed,we("destroy"));if(b.state.isDestroyed)return;b.clearDelayTimeouts(),b.unmount(),q(),delete p._tippy,b.state.isDestroyed=!0,M("onDestroy",[b])}};if(!u.render)return"production"!==ee.env.NODE_ENV&&Le(!0,"render() function has not been supplied."),b;var w=u.render(b),E=w.popper,L=w.onUpdate;E.setAttribute("data-tippy-root",""),E.id="tippy-"+b.id,b.popper=E,p._tippy=b,E._tippy=b;var T=y.map(function(e){return e.fn(b)}),C=p.hasAttribute("aria-expanded");return F(),_(),A(),M("onCreate",[b]),u.showOnCreate&&K(),E.addEventListener("mouseenter",function(){b.props.interactive&&b.state.isVisible&&b.clearDelayTimeouts()}),E.addEventListener("mouseleave",function(e){b.props.interactive&&0<=b.props.trigger.indexOf("mouseenter")&&(m.addEventListener("mousemove",v),v(e))}),b;function S(){var e=b.props.touch;return Array.isArray(e)?e:[e,0]}function k(){return"hold"===S()[0]}function P(){var e;return null!=(e=b.props.render)&&e.$$tippy}function O(){return a||p}function I(){return ke(E)}function x(e){return b.state.isMounted&&!b.state.isVisible||me.isTouch||s&&"focus"===s.type?0:oe(b.props.delay,e?0:1,Te.delay)}function A(){E.style.pointerEvents=b.props.interactive&&b.state.isVisible?"":"none",E.style.zIndex=""+b.props.zIndex}function D(e){var t=e&&be&&me.isTouch;m.body.classList[t?"add":"remove"](re)}function M(t,n,e){var r;void 0===e&&(e=!0),T.forEach(function(e){e[t]&&e[t].apply(void 0,n)}),e&&(r=b.props)[t].apply(r,n)}function j(){var r,o,e=b.props.aria;e.content&&(r="aria-"+e.content,o=E.id,ae(b.props.triggerTarget||p).forEach(function(e){var t,n=e.getAttribute(r);b.state.isVisible?e.setAttribute(r,n?n+" "+o:o):(t=n&&n.replace(o,"").trim())?e.setAttribute(r,t):e.removeAttribute(r)}))}function _(){!C&&b.props.aria.expanded&&ae(b.props.triggerTarget||p).forEach(function(e){b.props.interactive?e.setAttribute("aria-expanded",b.state.isVisible&&e===O()?"true":"false"):e.removeAttribute("aria-expanded")})}function H(){m.body.removeEventListener("mouseleave",Z),m.removeEventListener("mousemove",v),Oe=Oe.filter(function(e){return e!==v})}function R(e){if(!b.props.interactive||!E.contains(e.target)){if(O().contains(e.target)){if(me.isTouch)return;if(b.state.isVisible&&0<=b.props.trigger.indexOf("click"))return}else b.props.onClickOutside(b,e);!0===b.props.hideOnClick&&(l=!1,b.clearDelayTimeouts(),b.hide(),h=!0,setTimeout(function(){h=!1}),b.state.isMounted||N())}}function B(){m.addEventListener("mousedown",R,!0)}function N(){m.removeEventListener("mousedown",R,!0)}function U(e,t){var n=I().box;function r(e){e.target===n&&(ve(n,"remove",r),t())}if(0===e)return t();ve(n,"remove",o),ve(n,"add",r),o=r}function W(t,n,r){void 0===r&&(r=!1),ae(b.props.triggerTarget||p).forEach(function(e){e.addEventListener(t,n,r),g.push({node:e,eventType:t,handler:n,options:r})})}function F(){k()&&(W("touchstart",V,ne),W("touchend",z,ne)),b.props.trigger.split(/\s+/).filter(Boolean).forEach(function(e){if("manual"!==e)switch(W(e,V),e){case"mouseenter":W("mouseleave",z);break;case"focus":W(ye?"focusout":"blur",J);break;case"focusin":W("focusout",J)}})}function q(){g.forEach(function(e){var t=e.node,n=e.eventType,r=e.handler,o=e.options;t.removeEventListener(n,r,o)}),g=[]}function V(t){var e,n,r,o=!1;!b.state.isEnabled||Y(t)||h||(a=(s=t).currentTarget,_(),!b.state.isVisible&&fe(t)&&Oe.forEach(function(e){return e(t)}),"click"===t.type&&(b.props.trigger.indexOf("mouseenter")<0||l)&&!1!==b.props.hideOnClick&&b.state.isVisible?o=!0:(n=(e=S())[0],r=e[1],me.isTouch&&"hold"===n&&r?i=setTimeout(function(){K(t)},r):K(t)),"click"===t.type&&(l=!o),o&&Z(t))}function X(e){var t,n,r,d,g,o=e.target,i=p.contains(o)||E.contains(o);"mousemove"===e.type&&i||(t=$().concat(E).map(function(e){var t,n=null==(t=e._tippy.popperInstance)?void 0:t.state;return n?{popperRect:e.getBoundingClientRect(),popperState:n,props:u}:null}).filter(Boolean),n=t,d=(r=e).clientX,g=r.clientY,n.every(function(e){var t=e.popperRect,n=e.popperState,r=e.props.interactiveBorder,o=ue(n.placement),i=n.modifiersData.offset;if(!i)return!0;var s="bottom"===o?i.top.y:0,a="top"===o?i.bottom.y:0,c="right"===o?i.left.x:0,u="left"===o?i.right.x:0,l=t.top-g+s>r,p=g-t.bottom-a>r,f=t.left-d+c>r,h=d-t.right-u>r;return l||p||f||h})&&(H(),Z(e)))}function z(e){if(!(Y(e)||0<=b.props.trigger.indexOf("click")&&l))return b.props.interactive?(m.body.addEventListener("mouseleave",Z),m.addEventListener("mousemove",v),ce(Oe,v),void v(e)):void Z(e)}function J(e){b.props.trigger.indexOf("focusin")<0&&e.target!==O()||b.props.interactive&&e.relatedTarget&&E.contains(e.relatedTarget)||Z(e)}function Y(e){return!!me.isTouch&&k()!==0<=e.type.indexOf("touch")}function G(){Q();var e=b.props,t=e.popperOptions,n=e.placement,r=e.offset,o=e.getReferenceClientRect,i=e.moveTransition,s=P()?ke(E).arrow:null,a=o?{getBoundingClientRect:o}:p,c={name:"$$tippy",enabled:!0,phase:"beforeWrite",requires:["computeStyles"],fn:function(e){var t,n=e.state;P()&&(t=I().box,["placement","reference-hidden","escaped"].forEach(function(e){"placement"===e?t.setAttribute("data-placement",n.placement):n.attributes.popper["data-popper-"+e]?t.setAttribute("data-"+e,""):t.removeAttribute("data-"+e)}),n.attributes.popper={})}},u={name:"arrow",enabled:!!s,options:{element:s,padding:3}},l=[{name:"offset",options:{offset:r}},{name:"preventOverflow",options:{padding:{top:2,bottom:2,left:5,right:5}}},{name:"flip",options:{padding:5}},{name:"computeStyles",options:{adaptive:!i}}].concat(P()?[u]:[],(null==t?void 0:t.modifiers)||[],[c]);b.popperInstance=te.createPopper(a,E,Object.assign({},t,{placement:n,onFirstUpdate:f,modifiers:l}))}function Q(){b.popperInstance&&(b.popperInstance.destroy(),b.popperInstance=null)}function $(){return le(E.querySelectorAll("[data-tippy-root]"))}function K(e){b.clearDelayTimeouts(),e&&M("onTrigger",[b,e]),B();var t=x(!0);t?i=setTimeout(function(){b.show()},t):b.show()}function Z(e){var t;b.clearDelayTimeouts(),M("onUntrigger",[b,e]),b.state.isVisible?0<=b.props.trigger.indexOf("mouseenter")&&0<=b.props.trigger.indexOf("click")&&0<=["mouseleave","mousemove"].indexOf(e.type)&&l||((t=x(!1))?n=setTimeout(function(){b.state.isVisible&&b.hide()},t):r=requestAnimationFrame(function(){b.hide()})):N()}}function k(e,t){void 0===t&&(t={});var n,r,o,i=Te.plugins.concat(t.plugins||[]);"production"!==ee.env.NODE_ENV&&(r=!(n=e),o="[object Object]"===Object.prototype.toString.call(n)&&!n.addEventListener,Le(r,["tippy() was passed","`"+String(n)+"`","as its targets (first) argument. Valid types are: String, Element,","Element[], or NodeList."].join(" ")),Le(o,["tippy() was passed a plain object which is not supported as an argument","for virtual positioning. Use props.getReferenceClientRect instead."].join(" ")),b(t,i)),document.addEventListener("touchstart",d,Object.assign({},ne,{capture:!0})),window.addEventListener("blur",g);var s,a,c=Object.assign({},t,{plugins:i}),u=h(e);"production"!==ee.env.NODE_ENV&&(s=f(c.content),a=1<u.length,Ee(s&&a,["tippy() was passed an Element as the `content` prop, but more than","one tippy instance was created by this invocation. This means the","content element will only be appended to the last tippy instance.","\n\n","Instead, pass the .innerHTML of the element, or use a function that","returns a cloned version of the element instead.","\n\n","1) content: element.innerHTML\n","2) content: () => element.cloneNode(true)"].join(" ")));var l=u.reduce(function(e,t){var n=t&&S(t,c);return n&&e.push(n),e},[]);return f(e)?l[0]:l}k.defaultProps=Te,k.setDefaultProps=function(t){"production"!==ee.env.NODE_ENV&&b(t,[]),Object.keys(t).forEach(function(e){Te[e]=t[e]})},k.currentInput=me;var P={mouseover:"mouseenter",focusin:"focus",click:"click"};var O={name:"animateFill",defaultValue:!1,fn:function(e){var t;if(null==(t=e.props.render)||!t.$$tippy)return"production"!==ee.env.NODE_ENV&&Le(e.props.animateFill,"The `animateFill` plugin requires the default render function."),{};var n,r=ke(e.popper),o=r.box,i=r.content,s=e.props.animateFill?((n=pe()).className=a,de([n],"hidden"),n):null;return{onCreate:function(){s&&(o.insertBefore(s,o.firstElementChild),o.setAttribute("data-animatefill",""),o.style.overflow="hidden",e.setProps({arrow:!1,animation:"shift-away"}))},onMount:function(){var e,t;s&&(e=o.style.transitionDuration,t=Number(e.replace("ms","")),i.style.transitionDelay=Math.round(t/10)+"ms",s.style.transitionDuration=e,de([s],"visible"))},onShow:function(){s&&(s.style.transitionDuration="0ms")},onHide:function(){s&&de([s],"hidden")}}}};var I={name:"followCursor",defaultValue:!1,fn:function(r){var f=r.reference,e=ge(r.props.triggerTarget||f),o=null;function t(){return"manual"===r.props.trigger.trim()}function n(){var e=!!t()||null!==o&&!(0===o.clientX&&0===o.clientY);return r.props.followCursor&&e}function i(e){e&&r.setProps({getReferenceClientRect:null})}function s(){n()?e.addEventListener("mousemove",a):i(r.props.followCursor)}function h(){e.removeEventListener("mousemove",a)}function a(e){o={clientX:e.clientX,clientY:e.clientY};var t=!e.target||f.contains(e.target),a=r.props.followCursor,c=e.clientX,u=e.clientY,n=f.getBoundingClientRect(),l=c-n.left,p=u-n.top;!t&&r.props.interactive||r.setProps({getReferenceClientRect:function(){var e=f.getBoundingClientRect(),t=c,n=u;"initial"===a&&(t=e.left+l,n=e.top+p);var r="horizontal"===a?e.top:n,o="vertical"===a?e.right:t,i="horizontal"===a?e.bottom:n,s="vertical"===a?e.left:t;return{width:o-s,height:i-r,top:r,right:o,bottom:i,left:s}}}),(me.isTouch||"initial"===r.props.followCursor&&r.state.isVisible)&&h()}return{onAfterUpdate:function(e,t){var n=t.followCursor;void 0===n||n||i(!0)},onMount:function(){n()&&a(o)},onShow:function(){t()&&(o={clientX:0,clientY:0},s())},onTrigger:function(e,t){o||(fe(t)&&(o={clientX:t.clientX,clientY:t.clientY}),s())},onUntrigger:function(){r.state.isVisible||(h(),o=null)},onHidden:function(){h(),o=null}}}},x={name:"inlinePositioning",defaultValue:!1,fn:function(n){var r,o=n.reference;var t={name:"tippyInlinePositioning",enabled:!0,phase:"afterWrite",fn:function(e){var t=e.state;n.props.inlinePositioning&&(r!==t.placement&&n.setProps({getReferenceClientRect:function(){return function(t,e,n){if(n.length<2||null===t)return e;switch(t){case"top":case"bottom":var r=n[0],o=n[n.length-1],i="top"===t,s=r.top,a=o.bottom,c=i?r.left:o.left,u=i?r.right:o.right;return{top:s,bottom:a,left:c,right:u,width:u-c,height:a-s};case"left":case"right":var l=Math.min.apply(Math,n.map(function(e){return e.left})),p=Math.max.apply(Math,n.map(function(e){return e.right})),f=n.filter(function(e){return"left"===t?e.left===l:e.right===p}),h=f[0].top,d=f[f.length-1].bottom;return{top:h,bottom:d,left:l,right:p,width:p-l,height:d-h};default:return e}}(ue(t.placement),o.getBoundingClientRect(),le(o.getClientRects()))}}),r=t.placement)}};return{onCreate:function(){var e;n.setProps({popperOptions:Object.assign({},n.props.popperOptions,{modifiers:[].concat((null==(e=n.props.popperOptions)?void 0:e.modifiers)||[],[t])})})}}}};var A={name:"sticky",defaultValue:!1,fn:function(n){var r=n.reference,o=n.popper;function i(e){return!0===n.props.sticky||n.props.sticky===e}var s=null,a=null;function c(){var e=i("reference")?(n.popperInstance?n.popperInstance.state.elements.reference:r).getBoundingClientRect():null,t=i("popper")?o.getBoundingClientRect():null;(e&&D(s,e)||t&&D(a,t))&&n.popperInstance&&n.popperInstance.update(),s=e,a=t,n.state.isMounted&&requestAnimationFrame(c)}return{onMount:function(){n.props.sticky&&c()}}}};function D(e,t){return!e||!t||(e.top!==t.top||e.right!==t.right||e.bottom!==t.bottom||e.left!==t.left)}k.setDefaultProps({render:C}),j.animateFill=O,j.createSingleton=function(i,s){var a;void 0===s&&(s={}),"production"!==ee.env.NODE_ENV&&Le(!Array.isArray(i),["The first argument passed to createSingleton() must be an array of","tippy instances. The passed value was",String(i)].join(" ")),i.forEach(function(e){e.disable()});var c=i.map(function(e){return e.reference}),e={fn:function(){return{onDestroy:function(){i.forEach(function(e){e.enable()})},onTrigger:function(e,t){var n,r=t.currentTarget,o=c.indexOf(r);r!==a&&(a=r,n=(s.overrides||[]).concat("content").reduce(function(e,t){return e[t]=i[o].props[t],e},{}),e.setProps(Object.assign({},n,{getReferenceClientRect:function(){return r.getBoundingClientRect()}})))}}}};return k(pe(),Object.assign({},p(s,["overrides"]),{plugins:[e].concat(s.plugins||[]),triggerTarget:c}))},j.default=k,j.delegate=function(e,r){"production"!==ee.env.NODE_ENV&&Le(!(r&&r.target),["You must specity a `target` prop indicating a CSS selector string matching","the target elements that should receive a tippy."].join(" "));var o=[],i=[],s=r.target,t=p(r,["target"]),n=Object.assign({},t,{trigger:"manual"}),a=Object.assign({},t,{showOnCreate:!0}),c=k(e,n);function u(e){var t,n;!e.target||(t=e.target.closest(s))&&((t.getAttribute("data-tippy-trigger")||r.trigger||Te.trigger).indexOf(P[e.type])<0||t._tippy||(n=k(t,a))&&(i=i.concat(n)))}function l(e,t,n,r){void 0===r&&(r=!1),e.addEventListener(t,n,r),o.push({node:e,eventType:t,handler:n,options:r})}return ae(c).forEach(function(e){var t,n=e.destroy;e.destroy=function(e){void 0===e&&(e=!0),e&&i.forEach(function(e){e.destroy()}),i=[],o.forEach(function(e){var t=e.node,n=e.eventType,r=e.handler,o=e.options;t.removeEventListener(n,r,o)}),o=[],n()},l(t=e.reference,"mouseover",u),l(t,"focusin",u),l(t,"click",u)}),c},j.followCursor=I,j.hideAll=function(e){var t=void 0===e?{}:e,r=t.exclude,o=t.duration;Ie.forEach(function(e){var t,n=!1;r&&(n=s(r)?e.reference===r:e.popper===r.popper),n||(t=e.props.duration,e.setProps({duration:o}),e.hide(),e.state.isDestroyed||e.setProps({duration:t}))})},j.inlinePositioning=x,j.roundArrow='<svg width="16" height="6" xmlns="http://www.w3.org/2000/svg"><path d="M0 6s1.796-.013 4.67-3.615C5.851.9 6.93.006 8 0c1.07-.006 2.148.887 3.343 2.385C14.233 6.005 16 6 16 6H0z"></svg>',j.sticky=A}).call(this,M("_process"))},{"@popperjs/core":25,_process:29}]},{},[1]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
