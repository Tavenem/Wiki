@model EditViewModel

@if (!string.IsNullOrEmpty(WikiWebConfig.PolicyPageTitle))
{
    if (!string.IsNullOrEmpty(WikiWebConfig.CopyrightPageTitle))
    {
        <div class="wiki-edit-terms-notice">
            <p>Content submitted to this wiki is subject to each of its <a href="/@WikiConfig.WikiLinkPrefix/@WikiWebConfig.SystemNamespace:@WikiWebConfig.PolicyPageTitle">policies</a>, including but not limited to its <a href="/@WikiConfig.WikiLinkPrefix/@WikiWebConfig.SystemNamespace:@WikiWebConfig.CopyrightPageTitle">copyright policy</a>.</p>
        </div>
    }
    else
    {
        <div class="wiki-edit-terms-notice">
            <p>Content submitted to this wiki is subject to each of its <a href="/@WikiConfig.WikiLinkPrefix/@WikiWebConfig.SystemNamespace:@WikiWebConfig.PolicyPageTitle">policies</a>.</p>
        </div>
    }
}
else if (!string.IsNullOrEmpty(WikiWebConfig.CopyrightPageTitle))
{
    <div class="wiki-edit-terms-notice">
        <p>Content submitted to this wiki is subject to its <a href="/@WikiConfig.WikiLinkPrefix/@WikiWebConfig.SystemNamespace:@WikiWebConfig.CopyrightPageTitle">copyright policy</a>.</p>
    </div>
}
else
{
    <div class="wiki-edit-terms-notice">
        <p>Content submitted to this wiki is subject to each of its policies, including but not limited to its copyright policy.</p>
    </div>
}

@if (Model.IsOutdated)
{
    <div class="wiki-edit-outdatedwarning alert alert-warning" role="alert">
        Warning: this version of the page is outdated. You may wish to <a asp-action="Edit" asp-route-isCompact="@Model.Data.IsCompact" asp-route-rev="">begin your edit from the most recent version of the page</a> instead.
    </div>
}

@if (!string.IsNullOrEmpty(Model.Preview))
{
    <div class="wiki-edit-preview">
        @Html.Raw(Model.Preview)
    </div>
}
<form class="wiki-edit-editor" asp-controller="Wiki" asp-route-isCompact="@Model.Data.IsCompact" asp-action="Edit">
    <div asp-validation-summary="ModelOnly" class="error-text"></div>
    <input asp-for="Id" />
    <div class="form-group wiki-edit-titleinputgroup">
        <label asp-for="Title"></label>
        <input asp-for="Title" data-original="@Model.Title" class="form-control" placeholder="Title" title="Move this article by changing its title" onchange="wikiRedirectCheck();" />
        <span asp-validation-for="Title" class="error-text"></span>
    </div>
    <div id="wiki-edit-redirect" class="form-group form-check" style="display: none;">
        <input asp-for="Redirect" class="form-check-input" title="You are renaming this article, which changes its URL. Leaving a redirect behind ensures that people who visit the original URL will be redirected to the new page." />
        <label asp-for="Redirect" title="You are renaming this article, which changes its URL. Leaving a redirect behind ensures that people who visit the original URL will be redirected to the new page.">Leave a redirect behind</label>
    </div>
    <textarea asp-for="Markdown"></textarea>
    <div class="wiki-markdown-editor">
        <div class="form-group">
            <label asp-for="Comment">Revision comment (e.g. briefly describe your changes)</label>
            <input asp-for="Comment" class="form-control" spellcheck="true" />
        </div>
        <div class="form-group">
            <label asp-for="Owner" title="Should be a username or user ID. Can be left blank to make the article community-owned.">Owner (optional)</label>
            <input asp-for="Owner" class="form-control" title="Should be a username or user ID. Can be left blank to make the article community-owned." readonly="@(Model.OwnerSelf ? "readonly" : null)" />
        </div>
        <div class="form-group form-check">
            <input asp-for="OwnerSelf" class="form-check-input" onclick="wikiToggleOwnerSelf(event);" onkeydown="wikiToggleOwnerSelf(event);" />
            <label asp-for="OwnerSelf" onclick="wikiToggleOwnerSelf(event);" onkeydown="wikiToggleOwnerSelf(event);">Make me the owner</label>
        </div>
        <div class="form-group">
            <label asp-for="AllowedEditors" title="Should be a list of usernames or user IDs, each separated by a semicolon (;). The owner is automatically included.">Allowed editors (optional)</label>
            <input asp-for="AllowedEditors" class="form-control" title="Should be a list of usernames or user IDs, each separated by a semicolon (;). The owner is automatically included." />
        </div>
        <div class="form-group">
            <label asp-for="AllowedViewers" title="Should be a list of usernames or user IDs, each separated by a semicolon (;). The owner is automatically included.">Allowed viewers (optional)</label>
            <input asp-for="AllowedViewers" class="form-control" title="Should be a list of usernames or user IDs, each separated by a semicolon (;). The owner is automatically included." />
        </div>
        <div class="form-group wiki-edit-terms-notice">
            @if (!string.IsNullOrEmpty(WikiWebConfig.PolicyPageTitle))
            {
                if (!string.IsNullOrEmpty(WikiWebConfig.CopyrightPageTitle))
                {
                    <div class="wiki-edit-terms-notice">
                        <p>Content submitted to this wiki is subject to each of its <a href="/@WikiConfig.WikiLinkPrefix/@WikiWebConfig.SystemNamespace:@WikiWebConfig.PolicyPageTitle">policies</a>, including but not limited to its <a href="/@WikiConfig.WikiLinkPrefix/@WikiWebConfig.SystemNamespace:@WikiWebConfig.CopyrightPageTitle">copyright policy</a>.</p>
                    </div>
                }
                else
                {
                    <div class="wiki-edit-terms-notice">
                        <p>Content submitted to this wiki is subject to each of its <a href="/@WikiConfig.WikiLinkPrefix/@WikiWebConfig.SystemNamespace:@WikiWebConfig.PolicyPageTitle">policies</a>.</p>
                    </div>
                }
            }
            else if (!string.IsNullOrEmpty(WikiWebConfig.CopyrightPageTitle))
            {
                <div class="wiki-edit-terms-notice">
                    <p>Content submitted to this wiki is subject to its <a href="/@WikiConfig.WikiLinkPrefix/@WikiWebConfig.SystemNamespace:@WikiWebConfig.CopyrightPageTitle">copyright policy</a>.</p>
                </div>
            }
            else
            {
                <div class="wiki-edit-terms-notice">
                    <p>Content submitted to this wiki is subject to each of its policies, including but not limited to its copyright policy.</p>
                </div>
            }
        </div>
        <div class="flex-wrap wiki-edit-submit-buttons">
            <button class="wiki-edit-submit-button btn btn-primary" type="submit">Publish changes</button>
            <button class="wiki-edit-preview-button btn btn-info" type="submit" name="ShowPreview" value="true">Show full preview</button>
            <a class="wiki-edit-cancel-button btn btn-secondary" asp-action="Read" asp-route-isCompact="@Model.Data.IsCompact">Cancel</a>
            <button id="wiki-edit-delete-button"
                    class="btn btn-danger"
                    type="button"
                    onclick="wikiEditDelete(event);"
                    onkeydown="wikiEditDelete(event);">
                Delete
            </button>
            <button id="wiki-edit-confirmed-delete-button"
                    class="btn btn-danger"
                    style="display: none;"
                    type="submit"
                    name="Delete"
                    value="true">
                Confirm Delete
            </button>
        </div>
    </div>
</form>
@if ((Model.Data.WikiItem?.Transclusions?.Count ?? 0) > 0)
{
    <div class="wiki-edit-transclusions">
        <div id="wiki-edit-transclusions-toggler" onclick="wikiToggleTransclusions(event);" onkeydown="wikiToggleTransclusions(event);">
            <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12">
                <path d="M4 1.533v9.671l4.752-4.871z" />
            </svg>
            <span>Pages transcluded in the current version of this one:</span>
        </div>
        <div id="wiki-edit-transclusionlist" style="display: none;">
            <ul>
                @foreach (var transclusion in Model.Data.WikiItem!.Transclusions!)
                {
                    <li><a href="/@(WikiConfig.WikiLinkPrefix)/@(transclusion.FullTitle)">@(transclusion.FullTitle)</a></li>
                }
            </ul>
        </div>
    </div>
}

@section Scripts {
    <script src="~/_content/NeverFoundry.Wiki.Mvc/libs.js"></script>
    <script>
        const easyMDE = new EasyMDE({
            autosave: {
                enabled: true,
                uniqueId: 'wiki-editor-@(Model.Id ?? "newitem")',
            },
            element: document.getElementById('Markdown'),
            indentWithTabs: false,
            initialValue: "@Html.Raw(Model.Markdown.Replace(@"\", @"\\").Replace(@"""", @"\""").Replace(Environment.NewLine, @"\r\n"))",
            placeholder: "Enter your content here, in markdown format.",
            tabSize: 4,
            toolbar: ['bold', 'italic', '|', 'heading-1', 'heading-2', 'heading-3', '|', 'unordered-list', 'ordered-list', '|', 'link', 'image']
        });

        function wikiRedirectCheck() {
            const r = document.getElementById('wiki-edit-redirect');
            if (!r) {
                return;
            }
            const t = document.getElementById('Title');
            if (!t) {
                return;
            }
            if (t.dataset.original
                && t.value != t.dataset.original) {
                r.style.display = 'block';
            } else {
                r.style.display = 'none';
            }
        }

        function wikiToggleOwnerSelf(e) {
            e = e || window.event;
            if (e.isComposing || e.keyCode === 229 || (e.key && e.key !== "Enter")) {
                return;
            }
            const i = document.getElementById('Owner');
            if (!i) {
                return;
            }
            const c = document.getElementById('OwnerSelf');
            if (!c) {
                return;
            }
            if (c.checked) {
                i.value = "";
            }
            i.readonly = c.checked;
        }

        function wikiToggleTransclusions(e) {
            e = e || window.event;
            if (e.isComposing || e.keyCode === 229 || (e.key && e.key !== "Enter")) {
                return;
            }
            const l = document.getElementById('wiki-edit-transclusionlist');
            if (!l) {
                return;
            }
            const t = document.getElementById('wiki-edit-transclusions-toggler');
            if (!t) {
                return;
            }
            window.wikimvc.editTransclusionsShown = !window.wikimvc.editTransclusionsShown;
            t.classList.toggle("is-active");
            if (window.wikimvc.editTransclusionsShown) {
                l.style.display = 'block';
            } else {
                l.style.display = 'none';
            }
        }

        function wikiEditDelete(e) {
            e = e || window.event;
            if (e.isComposing || e.keyCode === 229 || (e.key && e.key !== "Enter")) {
                return;
            }
            const d = document.getElementById('wiki-edit-confirmed-delete-button');
            if (!d) {
                return;
            }
            const b = document.getElementById('wiki-edit-delete-button');
            if (!b) {
                return;
            }
            b.style.display = 'none';
            d.style.display = 'inline-block';
        }
    </script>
}
